Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_37 $$ if (created != null) [ CD ]
Line_25 $$ if (issueUrl != null) -->Line_26 $$ task.setIssueUrl(issueUrl)[ CD ]
Line_19 $$ task = new GenericTask(id, summary, myRepository)-->Line_26 $$ task.setIssueUrl(issueUrl)[ FD ]
Line_19 $$ task = new GenericTask(id, summary, myRepository)-->Line_22 $$ task.setDescription(description)[ FD ]
Line_15 $$ task = new GenericTask(id, "", myRepository)-->Line_22 $$ task.setDescription(description)[ FD ]
Line_19 $$ task = new GenericTask(id, summary, myRepository)-->Line_34 $$ task.setUpdated(updated)[ FD ]
Line_20 $$ String description = selectString(getSelector(DESCRIPTION), context)-->Line_22 $$ task.setDescription(description)[ FD ]
Line_8 $$ List<Object> tasks = selectTasksList(response, max)-->Line_10 $$ List<Task> result = new ArrayList<Task>(tasks.size())[ FD ]
Line_15 $$ task = new GenericTask(id, "", myRepository)-->Line_30 $$ task.setClosed(closed)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_24 $$ String issueUrl = selectString(getSelector(ISSUE_URL), context)[ CD ]
Line_13 $$ GenericTask task-->Line_34 $$ task.setUpdated(updated)[ FD ]
Line_13 $$ GenericTask task-->Line_41 $$ result.add(task)[ FD ]
Line_13 $$ GenericTask task-->Line_26 $$ task.setIssueUrl(issueUrl)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_20 $$ String description = selectString(getSelector(DESCRIPTION), context)[ CD ]
Line_11 $$ for (Object context : tasks) -->Line_12 $$ String id = selectString(getSelector(ID), context)[ FD ]
Line_8 $$ List<Object> tasks = selectTasksList(response, max)-->Line_9 $$ LOG.debug(String.format("Total %d tasks extracted from response", tasks.size()))[ FD ]
Line_10 $$ List<Task> result = new ArrayList<Task>(tasks.size())-->Line_41 $$ result.add(task)[ FD ]
Line_15 $$ task = new GenericTask(id, "", myRepository)-->Line_19 $$ task = new GenericTask(id, summary, myRepository)[ FD ]
Line_32 $$ Date updated = selectDate(getSelector(UPDATED), context)-->Line_34 $$ task.setUpdated(updated)[ FD ]
Line_15 $$ task = new GenericTask(id, "", myRepository)-->Line_41 $$ result.add(task)[ FD ]
Line_36 $$ Date created = selectDate(getSelector(CREATED), context)-->Line_38 $$ task.setCreated(created)[ FD ]
Line_36 $$ Date created = selectDate(getSelector(CREATED), context)-->Line_37 $$ if (created != null) [ FD ]
Line_11 $$ for (Object context : tasks) -->Line_24 $$ String issueUrl = selectString(getSelector(ISSUE_URL), context)[ FD ]
Line_24 $$ String issueUrl = selectString(getSelector(ISSUE_URL), context)-->Line_25 $$ if (issueUrl != null) [ FD ]
Line_28 $$ Boolean closed = selectBoolean(getSelector(CLOSED), context)-->Line_29 $$ if (closed != null) [ FD ]
Line_21 $$ if (description != null) -->Line_22 $$ task.setDescription(description)[ CD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_36 $$ Date created = selectDate(getSelector(CREATED), context)[ CD ]
Line_15 $$ task = new GenericTask(id, "", myRepository)-->Line_38 $$ task.setCreated(created)[ FD ]
Line_29 $$ if (closed != null) -->Line_30 $$ task.setClosed(closed)[ CD ]
Line_28 $$ Boolean closed = selectBoolean(getSelector(CLOSED), context)-->Line_30 $$ task.setClosed(closed)[ FD ]
Line_13 $$ GenericTask task-->Line_15 $$ task = new GenericTask(id, "", myRepository)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_21 $$ if (description != null) [ CD ]
Line_19 $$ task = new GenericTask(id, summary, myRepository)-->Line_41 $$ result.add(task)[ FD ]
Line_37 $$ if (created != null) -->Line_38 $$ task.setCreated(created)[ CD ]
Line_13 $$ GenericTask task-->Line_30 $$ task.setClosed(closed)[ FD ]
Line_13 $$ GenericTask task-->Line_38 $$ task.setCreated(created)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_28 $$ Boolean closed = selectBoolean(getSelector(CLOSED), context)[ CD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_15 $$ task = new GenericTask(id, "", myRepository)[ CD ]
Line_13 $$ GenericTask task-->Line_19 $$ task = new GenericTask(id, summary, myRepository)[ FD ]
Line_11 $$ for (Object context : tasks) -->Line_32 $$ Date updated = selectDate(getSelector(UPDATED), context)[ FD ]
Line_11 $$ for (Object context : tasks) -->Line_20 $$ String description = selectString(getSelector(DESCRIPTION), context)[ FD ]
Line_15 $$ task = new GenericTask(id, "", myRepository)-->Line_26 $$ task.setIssueUrl(issueUrl)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_29 $$ if (closed != null) [ CD ]
Line_19 $$ task = new GenericTask(id, summary, myRepository)-->Line_30 $$ task.setClosed(closed)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_33 $$ if (updated != null) [ CD ]
Line_20 $$ String description = selectString(getSelector(DESCRIPTION), context)-->Line_21 $$ if (description != null) [ FD ]
Line_24 $$ String issueUrl = selectString(getSelector(ISSUE_URL), context)-->Line_26 $$ task.setIssueUrl(issueUrl)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_17 $$ String summary = selectString(getSelector(SUMMARY), context)[ CD ]
Line_19 $$ task = new GenericTask(id, summary, myRepository)-->Line_38 $$ task.setCreated(created)[ FD ]
Line_11 $$ for (Object context : tasks) -->Line_28 $$ Boolean closed = selectBoolean(getSelector(CLOSED), context)[ FD ]
Line_15 $$ task = new GenericTask(id, "", myRepository)-->Line_34 $$ task.setUpdated(updated)[ FD ]
Line_33 $$ if (updated != null) -->Line_34 $$ task.setUpdated(updated)[ CD ]
Line_10 $$ List<Task> result = new ArrayList<Task>(tasks.size())-->Line_43 $$ return result.toArray(new Task[result.size()])[ FD ]
Line_32 $$ Date updated = selectDate(getSelector(UPDATED), context)-->Line_33 $$ if (updated != null) [ FD ]
Line_13 $$ GenericTask task-->Line_22 $$ task.setDescription(description)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_25 $$ if (issueUrl != null) [ CD ]
Line_11 $$ for (Object context : tasks) -->Line_36 $$ Date created = selectDate(getSelector(CREATED), context)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_32 $$ Date updated = selectDate(getSelector(UPDATED), context)[ CD ]
Line_11 $$ for (Object context : tasks) -->Line_17 $$ String summary = selectString(getSelector(SUMMARY), context)[ FD ]
Line_14 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_19 $$ task = new GenericTask(id, summary, myRepository)[ CD ]
