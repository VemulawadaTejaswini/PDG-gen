Line_9 $$ for (Object context : tasks) -->Line_18 $$ String description = selectString(getSelector(DESCRIPTION), context)[ FD ]
Line_9 $$ for (Object context : tasks) -->Line_22 $$ String issueUrl = selectString(getSelector(ISSUE_URL), context)[ FD ]
Line_23 $$ if (issueUrl != null) -->Line_24 $$ task.setIssueUrl(issueUrl)[ CD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_19 $$ if (description != null) [ CD ]
Line_13 $$ task = new GenericTask(id, "", myRepository)-->Line_28 $$ task.setClosed(closed)[ FD ]
Line_17 $$ task = new GenericTask(id, summary, myRepository)-->Line_28 $$ task.setClosed(closed)[ FD ]
Line_17 $$ task = new GenericTask(id, summary, myRepository)-->Line_36 $$ task.setCreated(created)[ FD ]
Line_26 $$ Boolean closed = selectBoolean(getSelector(CLOSED), context)-->Line_28 $$ task.setClosed(closed)[ FD ]
Line_9 $$ for (Object context : tasks) -->Line_10 $$ String id = selectString(getSelector(ID), context)[ FD ]
Line_11 $$ GenericTask task-->Line_13 $$ task = new GenericTask(id, "", myRepository)[ FD ]
Line_13 $$ task = new GenericTask(id, "", myRepository)-->Line_39 $$ result.add(task)[ FD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_23 $$ if (issueUrl != null) [ CD ]
Line_13 $$ task = new GenericTask(id, "", myRepository)-->Line_32 $$ task.setUpdated(updated)[ FD ]
Line_17 $$ task = new GenericTask(id, summary, myRepository)-->Line_20 $$ task.setDescription(description)[ FD ]
Line_9 $$ for (Object context : tasks) -->Line_26 $$ Boolean closed = selectBoolean(getSelector(CLOSED), context)[ FD ]
Line_13 $$ task = new GenericTask(id, "", myRepository)-->Line_17 $$ task = new GenericTask(id, summary, myRepository)[ FD ]
Line_34 $$ Date created = selectDate(getSelector(CREATED), context)-->Line_36 $$ task.setCreated(created)[ FD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_35 $$ if (created != null) [ CD ]
Line_2 $$ public final Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_41 $$ return result.toArray(new Task[result.size()])[ CD ]
Line_17 $$ task = new GenericTask(id, summary, myRepository)-->Line_39 $$ result.add(task)[ FD ]
Line_19 $$ if (description != null) -->Line_20 $$ task.setDescription(description)[ CD ]
Line_22 $$ String issueUrl = selectString(getSelector(ISSUE_URL), context)-->Line_24 $$ task.setIssueUrl(issueUrl)[ FD ]
Line_2 $$ public final Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_8 $$ List<Task> result = new ArrayList<Task>(tasks.size())[ CD ]
Line_34 $$ Date created = selectDate(getSelector(CREATED), context)-->Line_35 $$ if (created != null) [ FD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_13 $$ task = new GenericTask(id, "", myRepository)[ CD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_31 $$ if (updated != null) [ CD ]
Line_2 $$ public final Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_6 $$ List<Object> tasks = selectTasksList(response, max)[ CD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_26 $$ Boolean closed = selectBoolean(getSelector(CLOSED), context)[ CD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_17 $$ task = new GenericTask(id, summary, myRepository)[ CD ]
Line_22 $$ String issueUrl = selectString(getSelector(ISSUE_URL), context)-->Line_23 $$ if (issueUrl != null) [ FD ]
Line_13 $$ task = new GenericTask(id, "", myRepository)-->Line_36 $$ task.setCreated(created)[ FD ]
Line_11 $$ GenericTask task-->Line_20 $$ task.setDescription(description)[ FD ]
Line_27 $$ if (closed != null) -->Line_28 $$ task.setClosed(closed)[ CD ]
Line_18 $$ String description = selectString(getSelector(DESCRIPTION), context)-->Line_20 $$ task.setDescription(description)[ FD ]
Line_11 $$ GenericTask task-->Line_28 $$ task.setClosed(closed)[ FD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_27 $$ if (closed != null) [ CD ]
Line_30 $$ Date updated = selectDate(getSelector(UPDATED), context)-->Line_32 $$ task.setUpdated(updated)[ FD ]
Line_17 $$ task = new GenericTask(id, summary, myRepository)-->Line_32 $$ task.setUpdated(updated)[ FD ]
Line_9 $$ for (Object context : tasks) -->Line_30 $$ Date updated = selectDate(getSelector(UPDATED), context)[ FD ]
Line_13 $$ task = new GenericTask(id, "", myRepository)-->Line_24 $$ task.setIssueUrl(issueUrl)[ FD ]
Line_9 $$ for (Object context : tasks) -->Line_15 $$ String summary = selectString(getSelector(SUMMARY), context)[ FD ]
Line_11 $$ GenericTask task-->Line_32 $$ task.setUpdated(updated)[ FD ]
Line_2 $$ public final Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_7 $$ LOG.debug(String.format("Total %d tasks extracted from response", tasks.size()))[ CD ]
Line_35 $$ if (created != null) -->Line_36 $$ task.setCreated(created)[ CD ]
Line_2 $$ public final Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_6 $$ List<Object> tasks = selectTasksList(response, max)[ FD ]
Line_6 $$ List<Object> tasks = selectTasksList(response, max)-->Line_7 $$ LOG.debug(String.format("Total %d tasks extracted from response", tasks.size()))[ FD ]
Line_9 $$ for (Object context : tasks) -->Line_34 $$ Date created = selectDate(getSelector(CREATED), context)[ FD ]
Line_11 $$ GenericTask task-->Line_17 $$ task = new GenericTask(id, summary, myRepository)[ FD ]
Line_30 $$ Date updated = selectDate(getSelector(UPDATED), context)-->Line_31 $$ if (updated != null) [ FD ]
Line_11 $$ GenericTask task-->Line_39 $$ result.add(task)[ FD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_34 $$ Date created = selectDate(getSelector(CREATED), context)[ CD ]
Line_13 $$ task = new GenericTask(id, "", myRepository)-->Line_20 $$ task.setDescription(description)[ FD ]
Line_26 $$ Boolean closed = selectBoolean(getSelector(CLOSED), context)-->Line_27 $$ if (closed != null) [ FD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_30 $$ Date updated = selectDate(getSelector(UPDATED), context)[ CD ]
Line_2 $$ public final Task[] parseIssues(@NotNull String response, int max) throws Exception -->Line_3 $$ if (StringUtil.isEmpty(getSelectorPath(TASKS)) || StringUtil.isEmpty(getSelectorPath(ID)) || (StringUtil.isEmpty(getSelectorPath(SUMMARY)) && !myRepository.getDownloadTasksInSeparateRequests())) [ CD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_15 $$ String summary = selectString(getSelector(SUMMARY), context)[ CD ]
Line_11 $$ GenericTask task-->Line_24 $$ task.setIssueUrl(issueUrl)[ FD ]
Line_11 $$ GenericTask task-->Line_36 $$ task.setCreated(created)[ FD ]
Line_18 $$ String description = selectString(getSelector(DESCRIPTION), context)-->Line_19 $$ if (description != null) [ FD ]
Line_17 $$ task = new GenericTask(id, summary, myRepository)-->Line_24 $$ task.setIssueUrl(issueUrl)[ FD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_22 $$ String issueUrl = selectString(getSelector(ISSUE_URL), context)[ CD ]
Line_31 $$ if (updated != null) -->Line_32 $$ task.setUpdated(updated)[ CD ]
Line_8 $$ List<Task> result = new ArrayList<Task>(tasks.size())-->Line_39 $$ result.add(task)[ FD ]
Line_12 $$ if (myRepository.getDownloadTasksInSeparateRequests()) -->Line_18 $$ String description = selectString(getSelector(DESCRIPTION), context)[ CD ]
Line_8 $$ List<Task> result = new ArrayList<Task>(tasks.size())-->Line_41 $$ return result.toArray(new Task[result.size()])[ FD ]
Line_6 $$ List<Object> tasks = selectTasksList(response, max)-->Line_8 $$ List<Task> result = new ArrayList<Task>(tasks.size())[ FD ]
