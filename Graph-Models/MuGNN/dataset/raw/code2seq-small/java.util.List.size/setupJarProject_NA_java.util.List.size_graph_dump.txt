Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_5 $$ File libDir = new File(projectDir, "lib")[ CD ]
Line_4 $$ File projectDir = new File(buildFile.getParent())-->Line_16 $$ File gitignoreFile = new File(projectDir.getCanonicalPath() + "/.gitignore")[ FD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_11 $$ if (sharedProject) [ CD ]
Line_7 $$ libDir = new File(projectDir, "docroot/WEB-INF/lib")-->Line_9 $$ writeEclipseFiles(libDir, projectDir, dependencyJars)[ FD ]
Line_17 $$ if (hasModulesGitIgnore(dirName)) -->Line_18 $$ gitignoreFile.delete()[ CD ]
Line_23 $$ String gitIgnore = gitIgnores[i]-->Line_25 $$ gitIgnores[i] = gitIgnore[ FD ]
Line_10 $$ List<String> importSharedJars = getImportSharedJars(projectDir)-->Line_13 $$ importSharedJars.add("portal-compat-shared.jar")[ FD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_4 $$ File projectDir = new File(buildFile.getParent())[ CD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_17 $$ if (hasModulesGitIgnore(dirName)) [ CD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_3 $$ File buildFile = new File(dirName + "/" + fileName)[ CD ]
Line_27 $$ if (gitIgnores.length > 0) -->Line_28 $$ System.out.println("Updating " + gitignoreFile)[ CD ]
Line_6 $$ if (!libDir.exists()) -->Line_7 $$ libDir = new File(projectDir, "docroot/WEB-INF/lib")[ CD ]
Line_11 $$ if (sharedProject) -->Line_12 $$ if (!importSharedJars.contains("portal-compat-shared.jar")) [ CD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_9 $$ writeEclipseFiles(libDir, projectDir, dependencyJars)[ FD ]
Line_10 $$ List<String> importSharedJars = getImportSharedJars(projectDir)-->Line_21 $$ String[] gitIgnores = importSharedJars.toArray(new String[importSharedJars.size()])[ FD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_22 $$ for (int i = 0; i < gitIgnores.length; i++) [ CD ]
Line_22 $$ for (int i = 0; i < gitIgnores.length; i++) -->Line_23 $$ String gitIgnore = gitIgnores[i][ CD ]
Line_16 $$ File gitignoreFile = new File(projectDir.getCanonicalPath() + "/.gitignore")-->Line_18 $$ gitignoreFile.delete()[ FD ]
Line_5 $$ File libDir = new File(projectDir, "lib")-->Line_7 $$ libDir = new File(projectDir, "docroot/WEB-INF/lib")[ FD ]
Line_10 $$ List<String> importSharedJars = getImportSharedJars(projectDir)-->Line_12 $$ if (!importSharedJars.contains("portal-compat-shared.jar")) [ FD ]
Line_24 $$ gitIgnore = "/lib/" + gitIgnore-->Line_25 $$ gitIgnores[i] = gitIgnore[ FD ]
Line_16 $$ File gitignoreFile = new File(projectDir.getCanonicalPath() + "/.gitignore")-->Line_29 $$ _fileUtil.write(gitignoreFile, StringUtil.merge(gitIgnores, "\n"))[ FD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_17 $$ if (hasModulesGitIgnore(dirName)) [ FD ]
Line_27 $$ if (gitIgnores.length > 0) -->Line_29 $$ _fileUtil.write(gitignoreFile, StringUtil.merge(gitIgnores, "\n"))[ CD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_10 $$ List<String> importSharedJars = getImportSharedJars(projectDir)[ CD ]
Line_4 $$ File projectDir = new File(buildFile.getParent())-->Line_9 $$ writeEclipseFiles(libDir, projectDir, dependencyJars)[ FD ]
Line_17 $$ if (hasModulesGitIgnore(dirName)) -->Line_19 $$ return[ CD ]
Line_5 $$ File libDir = new File(projectDir, "lib")-->Line_9 $$ writeEclipseFiles(libDir, projectDir, dependencyJars)[ FD ]
Line_22 $$ for (int i = 0; i < gitIgnores.length; i++) -->Line_25 $$ gitIgnores[i] = gitIgnore[ CD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_16 $$ File gitignoreFile = new File(projectDir.getCanonicalPath() + "/.gitignore")[ CD ]
Line_21 $$ String[] gitIgnores = importSharedJars.toArray(new String[importSharedJars.size()])-->Line_29 $$ _fileUtil.write(gitignoreFile, StringUtil.merge(gitIgnores, "\n"))[ FD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_21 $$ String[] gitIgnores = importSharedJars.toArray(new String[importSharedJars.size()])[ CD ]
Line_22 $$ for (int i = 0; i < gitIgnores.length; i++) -->Line_24 $$ gitIgnore = "/lib/" + gitIgnore[ CD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_27 $$ if (gitIgnores.length > 0) [ CD ]
Line_12 $$ if (!importSharedJars.contains("portal-compat-shared.jar")) -->Line_13 $$ importSharedJars.add("portal-compat-shared.jar")[ CD ]
Line_23 $$ String gitIgnore = gitIgnores[i]-->Line_24 $$ gitIgnore = "/lib/" + gitIgnore[ FD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_6 $$ if (!libDir.exists()) [ CD ]
Line_5 $$ File libDir = new File(projectDir, "lib")-->Line_6 $$ if (!libDir.exists()) [ FD ]
Line_2 $$ protected void setupJarProject(String dirName, String fileName, List<String> dependencyJars, boolean sharedProject) throws Exception -->Line_9 $$ writeEclipseFiles(libDir, projectDir, dependencyJars)[ CD ]
Line_3 $$ File buildFile = new File(dirName + "/" + fileName)-->Line_4 $$ File projectDir = new File(buildFile.getParent())[ FD ]
Line_4 $$ File projectDir = new File(buildFile.getParent())-->Line_10 $$ List<String> importSharedJars = getImportSharedJars(projectDir)[ FD ]
