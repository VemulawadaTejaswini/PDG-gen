Line_3 $$ TypeRegistry typeRegistry = new TypeRegistry()-->Line_6 $$ typeRegistry.addType(ModelType.MODEL)[ FD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_3 $$ TypeRegistry typeRegistry = new TypeRegistry()[ CD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_10 $$ accumulator.addInput(getPage())[ CD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_9 $$ Accumulator accumulator = aggregation.bind(ImmutableList.of(0, 1), Optional.empty(), Optional.empty(), 1.0).createAccumulator()[ CD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_4 $$ typeRegistry.addParametricType(new ClassifierParametricType())[ CD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_13 $$ Block block = finalOut.build()[ CD ]
Line_9 $$ Accumulator accumulator = aggregation.bind(ImmutableList.of(0, 1), Optional.empty(), Optional.empty(), 1.0).createAccumulator()-->Line_11 $$ BlockBuilder finalOut = accumulator.getFinalType().createBlockBuilder(new BlockBuilderStatus(), 1)[ FD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_12 $$ accumulator.evaluateFinal(finalOut)[ CD ]
Line_11 $$ BlockBuilder finalOut = accumulator.getFinalType().createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_12 $$ accumulator.evaluateFinal(finalOut)[ FD ]
Line_8 $$ InternalAggregationFunction aggregation = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("evaluate_classifier_predictions", AGGREGATE, StandardTypes.VARCHAR, StandardTypes.BIGINT, StandardTypes.BIGINT))-->Line_9 $$ Accumulator accumulator = aggregation.bind(ImmutableList.of(0, 1), Optional.empty(), Optional.empty(), 1.0).createAccumulator()[ FD ]
Line_13 $$ Block block = finalOut.build()-->Line_14 $$ String output = VARCHAR.getSlice(block, 0).toStringUtf8()[ FD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_7 $$ metadata.addFunctions(new MLFunctionFactory(typeRegistry).listFunctions())[ CD ]
Line_9 $$ Accumulator accumulator = aggregation.bind(ImmutableList.of(0, 1), Optional.empty(), Optional.empty(), 1.0).createAccumulator()-->Line_10 $$ accumulator.addInput(getPage())[ FD ]
Line_14 $$ String output = VARCHAR.getSlice(block, 0).toStringUtf8()-->Line_15 $$ List<String> parts = ImmutableList.copyOf(Splitter.on('\n').omitEmptyStrings().split(output))[ FD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_15 $$ List<String> parts = ImmutableList.copyOf(Splitter.on('\n').omitEmptyStrings().split(output))[ CD ]
Line_3 $$ TypeRegistry typeRegistry = new TypeRegistry()-->Line_4 $$ typeRegistry.addParametricType(new ClassifierParametricType())[ FD ]
Line_11 $$ BlockBuilder finalOut = accumulator.getFinalType().createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_13 $$ Block block = finalOut.build()[ FD ]
Line_15 $$ List<String> parts = ImmutableList.copyOf(Splitter.on('\n').omitEmptyStrings().split(output))-->Line_16 $$ assertEquals(parts.size(), 7, output)[ FD ]
Line_9 $$ Accumulator accumulator = aggregation.bind(ImmutableList.of(0, 1), Optional.empty(), Optional.empty(), 1.0).createAccumulator()-->Line_12 $$ accumulator.evaluateFinal(finalOut)[ FD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_5 $$ typeRegistry.addType(RegressorType.REGRESSOR)[ CD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_16 $$ assertEquals(parts.size(), 7, output)[ CD ]
Line_3 $$ TypeRegistry typeRegistry = new TypeRegistry()-->Line_5 $$ typeRegistry.addType(RegressorType.REGRESSOR)[ FD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_11 $$ BlockBuilder finalOut = accumulator.getFinalType().createBlockBuilder(new BlockBuilderStatus(), 1)[ CD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_14 $$ String output = VARCHAR.getSlice(block, 0).toStringUtf8()[ CD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_6 $$ typeRegistry.addType(ModelType.MODEL)[ CD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_8 $$ InternalAggregationFunction aggregation = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("evaluate_classifier_predictions", AGGREGATE, StandardTypes.VARCHAR, StandardTypes.BIGINT, StandardTypes.BIGINT))[ CD ]
Line_15 $$ List<String> parts = ImmutableList.copyOf(Splitter.on('\n').omitEmptyStrings().split(output))-->Line_17 $$ assertEquals(parts.get(0), "Accuracy: 1/2 (50.00%)")[ FD ]
Line_14 $$ String output = VARCHAR.getSlice(block, 0).toStringUtf8()-->Line_16 $$ assertEquals(parts.size(), 7, output)[ FD ]
Line_2 $$ public void testEvaluateClassifierPredictions() throws Exception -->Line_17 $$ assertEquals(parts.get(0), "Accuracy: 1/2 (50.00%)")[ CD ]
