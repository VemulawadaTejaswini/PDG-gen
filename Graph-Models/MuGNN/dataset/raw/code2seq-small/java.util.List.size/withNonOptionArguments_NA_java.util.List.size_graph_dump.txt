Line_2 $$ public void withNonOptionArguments() -->Line_8 $$ assertThat(nonOptions.get(0), equalTo("noa1"))[ CD ]
Line_7 $$ List<String> nonOptions = args.getNonOptionArgs()-->Line_9 $$ assertThat(nonOptions.get(1), equalTo("noa2"))[ FD ]
Line_4 $$ CommandLineArgs args = parser.parse("--o1=v1", "noa1", "--o2=v2", "noa2")-->Line_6 $$ assertThat(args.getOptionValues("o2").get(0), equalTo("v2"))[ FD ]
Line_7 $$ List<String> nonOptions = args.getNonOptionArgs()-->Line_10 $$ assertThat(nonOptions.size(), equalTo(2))[ FD ]
Line_7 $$ List<String> nonOptions = args.getNonOptionArgs()-->Line_8 $$ assertThat(nonOptions.get(0), equalTo("noa1"))[ FD ]
Line_2 $$ public void withNonOptionArguments() -->Line_3 $$ SimpleCommandLineArgsParser parser = new SimpleCommandLineArgsParser()[ CD ]
Line_2 $$ public void withNonOptionArguments() -->Line_4 $$ CommandLineArgs args = parser.parse("--o1=v1", "noa1", "--o2=v2", "noa2")[ CD ]
Line_2 $$ public void withNonOptionArguments() -->Line_6 $$ assertThat(args.getOptionValues("o2").get(0), equalTo("v2"))[ CD ]
Line_2 $$ public void withNonOptionArguments() -->Line_10 $$ assertThat(nonOptions.size(), equalTo(2))[ CD ]
Line_4 $$ CommandLineArgs args = parser.parse("--o1=v1", "noa1", "--o2=v2", "noa2")-->Line_5 $$ assertThat(args.getOptionValues("o1").get(0), equalTo("v1"))[ FD ]
Line_4 $$ CommandLineArgs args = parser.parse("--o1=v1", "noa1", "--o2=v2", "noa2")-->Line_7 $$ List<String> nonOptions = args.getNonOptionArgs()[ FD ]
Line_2 $$ public void withNonOptionArguments() -->Line_5 $$ assertThat(args.getOptionValues("o1").get(0), equalTo("v1"))[ CD ]
Line_2 $$ public void withNonOptionArguments() -->Line_9 $$ assertThat(nonOptions.get(1), equalTo("noa2"))[ CD ]
Line_3 $$ SimpleCommandLineArgsParser parser = new SimpleCommandLineArgsParser()-->Line_4 $$ CommandLineArgs args = parser.parse("--o1=v1", "noa1", "--o2=v2", "noa2")[ FD ]
Line_2 $$ public void withNonOptionArguments() -->Line_7 $$ List<String> nonOptions = args.getNonOptionArgs()[ CD ]
