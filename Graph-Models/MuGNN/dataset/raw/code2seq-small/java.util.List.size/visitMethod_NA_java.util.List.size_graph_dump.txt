Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_36 $$ final PsiParameterStubImpl[] paramStubs = new PsiParameterStubImpl[paramCount][ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_15 $$ boolean isConstructor = SYNTHETIC_INIT_METHOD.equals(name)[ FD ]
Line_37 $$ for (int i = 0; i < paramCount; i++) -->Line_38 $$ if (shouldSkipFirstParamForNonStaticInnerClassConstructor && i == 0)[ CD ]
Line_22 $$ List<String> args = new ArrayList<String>()-->Line_29 $$ args = args.subList(2, args.size())[ FD ]
Line_48 $$ String[] thrownTypes = buildThrowsList(exceptions, throwables, parsedViaGenericSignature)-->Line_49 $$ newReferenceList(JavaStubElementTypes.THROWS_LIST, stub, thrownTypes)[ FD ]
Line_16 $$ boolean isVarargs = (access & Opcodes.ACC_VARARGS) != 0-->Line_20 $$ final byte flags = PsiMethodStubImpl.packFlags(isConstructor, isAnnotationMethod, isVarargs, isDeprecated, false, false)[ FD ]
Line_25 $$ PsiMethodStubImpl stub = new PsiMethodStubImpl(myResult, canonicalMethodName, flags, signature, args, throwables, desc, modifiersMask)-->Line_32 $$ boolean parsedViaGenericSignature = stub.isParsedViaGenericSignature()[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_8 $$ if (isEnum) [ CD ]
Line_28 $$ if (isEnum && isConstructor && signature == null && args.size() >= 2 && JAVA_LANG_STRING.equals(args.get(0)) && "int".equals(args.get(1))) -->Line_29 $$ args = args.subList(2, args.size())[ CD ]
Line_25 $$ PsiMethodStubImpl stub = new PsiMethodStubImpl(myResult, canonicalMethodName, flags, signature, args, throwables, desc, modifiersMask)-->Line_49 $$ newReferenceList(JavaStubElementTypes.THROWS_LIST, stub, thrownTypes)[ FD ]
Line_9 $$ if ("values".equals(name) && desc.startsWith("()"))-->Line_10 $$ return null[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_15 $$ boolean isConstructor = SYNTHETIC_INIT_METHOD.equals(name)[ CD ]
Line_11 $$ if ("valueOf".equals(name) && desc.startsWith("(Ljava/lang/String;)"))-->Line_12 $$ return null[ CD ]
Line_22 $$ List<String> args = new ArrayList<String>()-->Line_40 $$ String arg = args.get(i)[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_52 $$ return new AnnotationParamCollectingVisitor(stub, modList, localVarIgnoreCount, paramIgnoreCount, paramCount, paramStubs)[ CD ]
Line_22 $$ List<String> args = new ArrayList<String>()-->Line_35 $$ final int paramCount = args.size()[ FD ]
Line_32 $$ boolean parsedViaGenericSignature = stub.isParsedViaGenericSignature()-->Line_33 $$ final boolean shouldSkipFirstParamForNonStaticInnerClassConstructor = !parsedViaGenericSignature && isNonStaticInnerClassConstructor[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_20 $$ final byte flags = PsiMethodStubImpl.packFlags(isConstructor, isAnnotationMethod, isVarargs, isDeprecated, false, false)[ CD ]
Line_35 $$ final int paramCount = args.size()-->Line_37 $$ for (int i = 0; i < paramCount; i++) [ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_9 $$ if ("values".equals(name) && desc.startsWith("()"))[ FD ]
Line_8 $$ if (isEnum) -->Line_11 $$ if ("valueOf".equals(name) && desc.startsWith("(Ljava/lang/String;)"))[ CD ]
Line_22 $$ List<String> args = new ArrayList<String>()-->Line_28 $$ if (isEnum && isConstructor && signature == null && args.size() >= 2 && JAVA_LANG_STRING.equals(args.get(0)) && "int".equals(args.get(1))) [ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_3 $$ if ((access & Opcodes.ACC_SYNTHETIC) != 0)[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_32 $$ boolean parsedViaGenericSignature = stub.isParsedViaGenericSignature()[ CD ]
Line_17 $$ boolean isAnnotationMethod = myResult.isAnnotationType()-->Line_20 $$ final byte flags = PsiMethodStubImpl.packFlags(isConstructor, isAnnotationMethod, isVarargs, isDeprecated, false, false)[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_33 $$ final boolean shouldSkipFirstParamForNonStaticInnerClassConstructor = !parsedViaGenericSignature && isNonStaticInnerClassConstructor[ CD ]
Line_29 $$ args = args.subList(2, args.size())-->Line_40 $$ String arg = args.get(i)[ FD ]
Line_37 $$ for (int i = 0; i < paramCount; i++) -->Line_43 $$ String paramName = i < parameterNames.length ? parameterNames[i] : "p" + (i + 1)[ CD ]
Line_41 $$ boolean isEllipsisParam = isVarargs && i == paramCount - 1-->Line_42 $$ final TypeInfo typeInfo = TypeInfo.fromString(arg, isEllipsisParam)[ FD ]
Line_3 $$ if ((access & Opcodes.ACC_SYNTHETIC) != 0)-->Line_4 $$ return null[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_24 $$ int modifiersMask = packMethodFlags(access, myResult.isInterface())[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_14 $$ boolean isDeprecated = (access & Opcodes.ACC_DEPRECATED) != 0[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_5 $$ if (SYNTHETIC_CLASS_INIT_METHOD.equals(name))[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_16 $$ boolean isVarargs = (access & Opcodes.ACC_VARARGS) != 0[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_21 $$ String canonicalMethodName = isConstructor ? myResult.getName() : name[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_24 $$ int modifiersMask = packMethodFlags(access, myResult.isInterface())[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_26 $$ PsiModifierListStub modList = (PsiModifierListStub) stub.findChildStubByType(JavaStubElementTypes.MODIFIER_LIST)[ CD ]
Line_14 $$ boolean isDeprecated = (access & Opcodes.ACC_DEPRECATED) != 0-->Line_20 $$ final byte flags = PsiMethodStubImpl.packFlags(isConstructor, isAnnotationMethod, isVarargs, isDeprecated, false, false)[ FD ]
Line_25 $$ PsiMethodStubImpl stub = new PsiMethodStubImpl(myResult, canonicalMethodName, flags, signature, args, throwables, desc, modifiersMask)-->Line_26 $$ PsiModifierListStub modList = (PsiModifierListStub) stub.findChildStubByType(JavaStubElementTypes.MODIFIER_LIST)[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_28 $$ if (isEnum && isConstructor && signature == null && args.size() >= 2 && JAVA_LANG_STRING.equals(args.get(0)) && "int".equals(args.get(1))) [ CD ]
Line_37 $$ for (int i = 0; i < paramCount; i++) -->Line_40 $$ String arg = args.get(i)[ CD ]
Line_44 $$ PsiParameterStubImpl parameterStub = new PsiParameterStubImpl(parameterList, paramName, typeInfo, isEllipsisParam)-->Line_45 $$ paramStubs[i] = parameterStub[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_48 $$ String[] thrownTypes = buildThrowsList(exceptions, throwables, parsedViaGenericSignature)[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_49 $$ newReferenceList(JavaStubElementTypes.THROWS_LIST, stub, thrownTypes)[ CD ]
Line_8 $$ if (isEnum) -->Line_9 $$ if ("values".equals(name) && desc.startsWith("()"))[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_37 $$ for (int i = 0; i < paramCount; i++) [ CD ]
Line_23 $$ List<String> throwables = exceptions != null ? new ArrayList<String>() : null-->Line_48 $$ String[] thrownTypes = buildThrowsList(exceptions, throwables, parsedViaGenericSignature)[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_17 $$ boolean isAnnotationMethod = myResult.isAnnotationType()[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_25 $$ PsiMethodStubImpl stub = new PsiMethodStubImpl(myResult, canonicalMethodName, flags, signature, args, throwables, desc, modifiersMask)[ CD ]
Line_37 $$ for (int i = 0; i < paramCount; i++) -->Line_41 $$ boolean isEllipsisParam = isVarargs && i == paramCount - 1[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_51 $$ int paramIgnoreCount = isConstructor && isEnum ? 2 : isNonStaticInnerClassConstructor ? 1 : 0[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_11 $$ if ("valueOf".equals(name) && desc.startsWith("(Ljava/lang/String;)"))[ FD ]
Line_37 $$ for (int i = 0; i < paramCount; i++) -->Line_40 $$ String arg = args.get(i)[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_50 $$ int localVarIgnoreCount = (access & Opcodes.ACC_STATIC) != 0 ? 0 : isConstructor && isEnum ? 3 : 1[ CD ]
Line_32 $$ boolean parsedViaGenericSignature = stub.isParsedViaGenericSignature()-->Line_48 $$ String[] thrownTypes = buildThrowsList(exceptions, throwables, parsedViaGenericSignature)[ FD ]
Line_29 $$ args = args.subList(2, args.size())-->Line_35 $$ final int paramCount = args.size()[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_31 $$ final boolean isNonStaticInnerClassConstructor = isConstructor && !(myParent instanceof PsiFileStub) && (myModList.getModifiersMask() & Opcodes.ACC_STATIC) == 0[ CD ]
Line_15 $$ boolean isConstructor = SYNTHETIC_INIT_METHOD.equals(name)-->Line_20 $$ final byte flags = PsiMethodStubImpl.packFlags(isConstructor, isAnnotationMethod, isVarargs, isDeprecated, false, false)[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_18 $$ if (!isConstructor && !isCorrectName(name))[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_35 $$ final int paramCount = args.size()[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_48 $$ String[] thrownTypes = buildThrowsList(exceptions, throwables, parsedViaGenericSignature)[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_5 $$ if (SYNTHETIC_CLASS_INIT_METHOD.equals(name))[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_18 $$ if (!isConstructor && !isCorrectName(name))[ FD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_23 $$ List<String> throwables = exceptions != null ? new ArrayList<String>() : null[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_34 $$ final PsiParameterListStubImpl parameterList = new PsiParameterListStubImpl(stub)[ CD ]
Line_40 $$ String arg = args.get(i)-->Line_42 $$ final TypeInfo typeInfo = TypeInfo.fromString(arg, isEllipsisParam)[ FD ]
Line_15 $$ boolean isConstructor = SYNTHETIC_INIT_METHOD.equals(name)-->Line_18 $$ if (!isConstructor && !isCorrectName(name))[ FD ]
Line_33 $$ final boolean shouldSkipFirstParamForNonStaticInnerClassConstructor = !parsedViaGenericSignature && isNonStaticInnerClassConstructor-->Line_38 $$ if (shouldSkipFirstParamForNonStaticInnerClassConstructor && i == 0)[ FD ]
Line_37 $$ for (int i = 0; i < paramCount; i++) -->Line_42 $$ final TypeInfo typeInfo = TypeInfo.fromString(arg, isEllipsisParam)[ CD ]
Line_5 $$ if (SYNTHETIC_CLASS_INIT_METHOD.equals(name))-->Line_6 $$ return null[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_22 $$ List<String> args = new ArrayList<String>()[ CD ]
Line_2 $$ public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) -->Line_7 $$ boolean isEnum = myResult.isEnum()[ CD ]
Line_37 $$ for (int i = 0; i < paramCount; i++) -->Line_44 $$ PsiParameterStubImpl parameterStub = new PsiParameterStubImpl(parameterList, paramName, typeInfo, isEllipsisParam)[ CD ]
Line_18 $$ if (!isConstructor && !isCorrectName(name))-->Line_19 $$ return null[ CD ]
Line_37 $$ for (int i = 0; i < paramCount; i++) -->Line_45 $$ paramStubs[i] = parameterStub[ CD ]
