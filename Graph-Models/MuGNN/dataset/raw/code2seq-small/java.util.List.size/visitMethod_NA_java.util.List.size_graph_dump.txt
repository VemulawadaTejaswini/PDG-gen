Line_41 $$ final boolean shouldSkipFirstParamForNonStaticInnerClassConstructor = !parsedViaGenericSignature && isNonStaticInnerClassConstructor-->Line_46 $$ if (shouldSkipFirstParamForNonStaticInnerClassConstructor && i == 0)[ FD ]
Line_56 $$ String[] thrownTypes = buildThrowsList(exceptions, throwables, parsedViaGenericSignature)-->Line_57 $$ newReferenceList(JavaStubElementTypes.THROWS_LIST, stub, thrownTypes)[ FD ]
Line_32 $$ PsiMethodStubImpl stub = new PsiMethodStubImpl(myResult, canonicalMethodName, flags, signature, args, throwables, desc, modifiersMask)-->Line_33 $$ PsiModifierListStub modList = (PsiModifierListStub) stub.findChildStubByType(JavaStubElementTypes.MODIFIER_LIST)[ FD ]
Line_45 $$ for (int i = 0; i < paramCount; i++) -->Line_49 $$ boolean isEllipsisParam = isVarargs && i == paramCount - 1[ CD ]
Line_21 $$ boolean isDeprecated = (access & Opcodes.ACC_DEPRECATED) != 0-->Line_27 $$ final byte flags = PsiMethodStubImpl.packFlags(isConstructor, isAnnotationMethod, isVarargs, isDeprecated, false, false)[ FD ]
Line_29 $$ List<String> args = new ArrayList<String>()-->Line_48 $$ String arg = args.get(i)[ FD ]
Line_48 $$ String arg = args.get(i)-->Line_50 $$ final TypeInfo typeInfo = TypeInfo.fromString(arg, isEllipsisParam)[ FD ]
Line_23 $$ boolean isVarargs = (access & Opcodes.ACC_VARARGS) != 0-->Line_27 $$ final byte flags = PsiMethodStubImpl.packFlags(isConstructor, isAnnotationMethod, isVarargs, isDeprecated, false, false)[ FD ]
Line_45 $$ for (int i = 0; i < paramCount; i++) -->Line_52 $$ PsiParameterStubImpl parameterStub = new PsiParameterStubImpl(parameterList, paramName, typeInfo, isEllipsisParam)[ CD ]
Line_25 $$ if (!isConstructor && !isCorrectName(name))-->Line_26 $$ return null[ CD ]
Line_11 $$ if (SYNTHETIC_CLASS_INIT_METHOD.equals(name))-->Line_12 $$ return null[ CD ]
Line_40 $$ boolean parsedViaGenericSignature = stub.isParsedViaGenericSignature()-->Line_56 $$ String[] thrownTypes = buildThrowsList(exceptions, throwables, parsedViaGenericSignature)[ FD ]
Line_52 $$ PsiParameterStubImpl parameterStub = new PsiParameterStubImpl(parameterList, paramName, typeInfo, isEllipsisParam)-->Line_53 $$ paramStubs[i] = parameterStub[ FD ]
Line_32 $$ PsiMethodStubImpl stub = new PsiMethodStubImpl(myResult, canonicalMethodName, flags, signature, args, throwables, desc, modifiersMask)-->Line_40 $$ boolean parsedViaGenericSignature = stub.isParsedViaGenericSignature()[ FD ]
Line_45 $$ for (int i = 0; i < paramCount; i++) -->Line_53 $$ paramStubs[i] = parameterStub[ CD ]
Line_45 $$ for (int i = 0; i < paramCount; i++) -->Line_51 $$ String paramName = i < parameterNames.length ? parameterNames[i] : "p" + (i + 1)[ CD ]
Line_15 $$ if (isEnum) -->Line_16 $$ if ("values".equals(name) && desc.startsWith("()"))[ CD ]
Line_16 $$ if ("values".equals(name) && desc.startsWith("()"))-->Line_17 $$ return null[ CD ]
Line_40 $$ boolean parsedViaGenericSignature = stub.isParsedViaGenericSignature()-->Line_41 $$ final boolean shouldSkipFirstParamForNonStaticInnerClassConstructor = !parsedViaGenericSignature && isNonStaticInnerClassConstructor[ FD ]
Line_45 $$ for (int i = 0; i < paramCount; i++) -->Line_46 $$ if (shouldSkipFirstParamForNonStaticInnerClassConstructor && i == 0)[ CD ]
Line_22 $$ boolean isConstructor = SYNTHETIC_INIT_METHOD.equals(name)-->Line_25 $$ if (!isConstructor && !isCorrectName(name))[ FD ]
Line_22 $$ boolean isConstructor = SYNTHETIC_INIT_METHOD.equals(name)-->Line_27 $$ final byte flags = PsiMethodStubImpl.packFlags(isConstructor, isAnnotationMethod, isVarargs, isDeprecated, false, false)[ FD ]
Line_24 $$ boolean isAnnotationMethod = myResult.isAnnotationType()-->Line_27 $$ final byte flags = PsiMethodStubImpl.packFlags(isConstructor, isAnnotationMethod, isVarargs, isDeprecated, false, false)[ FD ]
Line_49 $$ boolean isEllipsisParam = isVarargs && i == paramCount - 1-->Line_50 $$ final TypeInfo typeInfo = TypeInfo.fromString(arg, isEllipsisParam)[ FD ]
Line_45 $$ for (int i = 0; i < paramCount; i++) -->Line_48 $$ String arg = args.get(i)[ FD ]
Line_32 $$ PsiMethodStubImpl stub = new PsiMethodStubImpl(myResult, canonicalMethodName, flags, signature, args, throwables, desc, modifiersMask)-->Line_57 $$ newReferenceList(JavaStubElementTypes.THROWS_LIST, stub, thrownTypes)[ FD ]
Line_30 $$ List<String> throwables = exceptions != null ? new ArrayList<String>() : null-->Line_56 $$ String[] thrownTypes = buildThrowsList(exceptions, throwables, parsedViaGenericSignature)[ FD ]
Line_45 $$ for (int i = 0; i < paramCount; i++) -->Line_50 $$ final TypeInfo typeInfo = TypeInfo.fromString(arg, isEllipsisParam)[ CD ]
Line_29 $$ List<String> args = new ArrayList<String>()-->Line_43 $$ final int paramCount = args.size()[ FD ]
Line_29 $$ List<String> args = new ArrayList<String>()-->Line_35 $$ if (isEnum && isConstructor && signature == null && args.size() >= 2 && JAVA_LANG_STRING.equals(args.get(0)) && "int".equals(args.get(1))) [ FD ]
Line_43 $$ final int paramCount = args.size()-->Line_45 $$ for (int i = 0; i < paramCount; i++) [ FD ]
Line_45 $$ for (int i = 0; i < paramCount; i++) -->Line_48 $$ String arg = args.get(i)[ CD ]
Line_15 $$ if (isEnum) -->Line_18 $$ if ("valueOf".equals(name) && desc.startsWith("(Ljava/lang/String;)"))[ CD ]
Line_18 $$ if ("valueOf".equals(name) && desc.startsWith("(Ljava/lang/String;)"))-->Line_19 $$ return null[ CD ]
