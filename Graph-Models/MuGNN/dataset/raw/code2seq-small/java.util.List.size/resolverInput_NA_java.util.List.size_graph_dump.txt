Line_5 $$ if (shuffled) -->Line_6 $$ ThreadLocalRandom random = ThreadLocalRandom.current()[ CD ]
Line_2 $$ private static List<Accumulator> resolverInput(int count, boolean shuffled) -->Line_4 $$ for (int i = 1; i <= count; i++) for (int j = 0; j < i; j++) result.add(new Accumulator(i, i))[ FD ]
Line_3 $$ List<Accumulator> result = new ArrayList()-->Line_4 $$ result.add(new Accumulator(i, i))[ FD ]
Line_7 $$ for (int i = 0; i < result.size(); i++) -->Line_8 $$ int swapWith = random.nextInt(i, result.size())[ FD ]
Line_9 $$ Accumulator t = result.get(swapWith)-->Line_11 $$ result.set(i, t)[ FD ]
Line_3 $$ List<Accumulator> result = new ArrayList()-->Line_7 $$ for (int i = 0; i < result.size(); i++) [ FD ]
Line_2 $$ private static List<Accumulator> resolverInput(int count, boolean shuffled) -->Line_5 $$ if (shuffled) [ CD ]
Line_7 $$ for (int i = 0; i < result.size(); i++) -->Line_10 $$ result.set(swapWith, result.get(i))[ CD ]
Line_6 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_8 $$ int swapWith = random.nextInt(i, result.size())[ FD ]
Line_2 $$ private static List<Accumulator> resolverInput(int count, boolean shuffled) -->Line_3 $$ List<Accumulator> result = new ArrayList()[ CD ]
Line_7 $$ for (int i = 0; i < result.size(); i++) -->Line_11 $$ result.set(i, t)[ CD ]
Line_5 $$ if (shuffled) -->Line_7 $$ for (int i = 0; i < result.size(); i++) [ CD ]
Line_3 $$ List<Accumulator> result = new ArrayList()-->Line_10 $$ result.set(swapWith, result.get(i))[ FD ]
Line_8 $$ int swapWith = random.nextInt(i, result.size())-->Line_9 $$ Accumulator t = result.get(swapWith)[ FD ]
Line_7 $$ for (int i = 0; i < result.size(); i++) -->Line_9 $$ Accumulator t = result.get(swapWith)[ CD ]
Line_4 $$ for (int i = 1; i <= count; i++) for (int j = 0; j < i; j++) result.add(new Accumulator(i, i))-->Line_10 $$ result.set(swapWith, result.get(i))[ FD ]
Line_3 $$ List<Accumulator> result = new ArrayList()-->Line_11 $$ result.set(i, t)[ FD ]
Line_3 $$ List<Accumulator> result = new ArrayList()-->Line_8 $$ int swapWith = random.nextInt(i, result.size())[ FD ]
Line_4 $$ for (int i = 1; i <= count; i++) for (int j = 0; j < i; j++) result.add(new Accumulator(i, i))-->Line_8 $$ int swapWith = random.nextInt(i, result.size())[ FD ]
Line_8 $$ int swapWith = random.nextInt(i, result.size())-->Line_10 $$ result.set(swapWith, result.get(i))[ FD ]
Line_2 $$ private static List<Accumulator> resolverInput(int count, boolean shuffled) -->Line_4 $$ for (int i = 1; i <= count; i++) for (int j = 0; j < i; j++) result.add(new Accumulator(i, i))[ CD ]
Line_7 $$ for (int i = 0; i < result.size(); i++) -->Line_10 $$ result.set(swapWith, result.get(i))[ FD ]
Line_4 $$ for (int i = 1; i <= count; i++) for (int j = 0; j < i; j++) result.add(new Accumulator(i, i))-->Line_11 $$ result.set(i, t)[ FD ]
Line_3 $$ List<Accumulator> result = new ArrayList()-->Line_9 $$ Accumulator t = result.get(swapWith)[ FD ]
Line_7 $$ for (int i = 0; i < result.size(); i++) -->Line_8 $$ int swapWith = random.nextInt(i, result.size())[ CD ]
Line_2 $$ private static List<Accumulator> resolverInput(int count, boolean shuffled) -->Line_14 $$ return result[ CD ]
Line_7 $$ for (int i = 0; i < result.size(); i++) -->Line_11 $$ result.set(i, t)[ FD ]
Line_4 $$ for (int i = 1; i <= count; i++) for (int j = 0; j < i; j++) result.add(new Accumulator(i, i))-->Line_7 $$ for (int i = 0; i < result.size(); i++) [ FD ]
