Line_33 $$ for (int i = 0; i < urls.size(); i++) -->Line_35 $$ urls.set(i, internFileProtocol(url))[ FD ]
Line_5 $$ final StringBuffer buf = new StringBuffer()-->Line_11 $$ buf.append(File.pathSeparator)[ FD ]
Line_4 $$ final List urls = new ArrayList()-->Line_34 $$ URL url = (URL) urls.get(i)[ FD ]
Line_38 $$ final String classLoader = System.getProperty("java.system.class.loader")-->Line_41 $$ loader = (ClassLoader) Class.forName(classLoader).getConstructor(new Class[] [ FD ]
Line_33 $$ for (int i = 0; i < urls.size(); i++) -->Line_35 $$ urls.set(i, internFileProtocol(url))[ CD ]
Line_33 $$ for (int i = 0; i < urls.size(); i++) -->Line_34 $$ URL url = (URL) urls.get(i)[ CD ]
Line_14 $$ File classpathElement = new File(fileName)-->Line_20 $$ urls.add(classpathElement.toURL())[ FD ]
Line_29 $$ int startArgsIdx = 2-->Line_32 $$ System.arraycopy(args, startArgsIdx, mainArgs, 0, mainArgs.length)[ FD ]
Line_41 $$ loader = (ClassLoader) Class.forName(classLoader).getConstructor(new Class[] -->Line_46 $$ Class mainClass = loader.loadClass(mainClassName)[ FD ]
Line_4 $$ final List urls = new ArrayList()-->Line_37 $$ ClassLoader loader = new URLClassLoader((URL[]) urls.toArray(new URL[urls.size()]), null)[ FD ]
Line_5 $$ final StringBuffer buf = new StringBuffer()-->Line_10 $$ if (buf.length() > 0) [ FD ]
Line_5 $$ final StringBuffer buf = new StringBuffer()-->Line_13 $$ buf.append(fileName)[ FD ]
Line_10 $$ if (buf.length() > 0) -->Line_11 $$ buf.append(File.pathSeparator)[ CD ]
Line_4 $$ final List urls = new ArrayList()-->Line_35 $$ urls.set(i, internFileProtocol(url))[ FD ]
Line_4 $$ final List urls = new ArrayList()-->Line_33 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_37 $$ ClassLoader loader = new URLClassLoader((URL[]) urls.toArray(new URL[urls.size()]), null)-->Line_41 $$ loader = (ClassLoader) Class.forName(classLoader).getConstructor(new Class[] [ FD ]
Line_8 $$ while (reader.ready()) -->Line_9 $$ final String fileName = reader.readLine()[ CD ]
Line_34 $$ URL url = (URL) urls.get(i)-->Line_35 $$ urls.set(i, internFileProtocol(url))[ FD ]
Line_6 $$ final BufferedReader reader = new BufferedReader(new FileReader(file))-->Line_9 $$ final String fileName = reader.readLine()[ FD ]
Line_6 $$ final BufferedReader reader = new BufferedReader(new FileReader(file))-->Line_24 $$ reader.close()[ FD ]
Line_5 $$ final StringBuffer buf = new StringBuffer()-->Line_28 $$ System.setProperty("java.class.path", buf.toString())[ FD ]
Line_38 $$ final String classLoader = System.getProperty("java.system.class.loader")-->Line_39 $$ if (classLoader != null) [ FD ]
Line_30 $$ String mainClassName = args[startArgsIdx - 1]-->Line_46 $$ Class mainClass = loader.loadClass(mainClassName)[ FD ]
Line_8 $$ while (reader.ready()) -->Line_14 $$ File classpathElement = new File(fileName)[ CD ]
Line_9 $$ final String fileName = reader.readLine()-->Line_13 $$ buf.append(fileName)[ FD ]
Line_8 $$ while (reader.ready()) -->Line_10 $$ if (buf.length() > 0) [ CD ]
Line_37 $$ ClassLoader loader = new URLClassLoader((URL[]) urls.toArray(new URL[urls.size()]), null)-->Line_47 $$ Thread.currentThread().setContextClassLoader(loader)[ FD ]
Line_33 $$ for (int i = 0; i < urls.size(); i++) -->Line_34 $$ URL url = (URL) urls.get(i)[ FD ]
Line_8 $$ while (reader.ready()) -->Line_13 $$ buf.append(fileName)[ CD ]
Line_26 $$ if (!file.delete())-->Line_27 $$ file.deleteOnExit()[ CD ]
Line_4 $$ final List urls = new ArrayList()-->Line_20 $$ urls.add(classpathElement.toURL())[ FD ]
Line_6 $$ final BufferedReader reader = new BufferedReader(new FileReader(file))-->Line_8 $$ while (reader.ready()) [ FD ]
Line_37 $$ ClassLoader loader = new URLClassLoader((URL[]) urls.toArray(new URL[urls.size()]), null)-->Line_46 $$ Class mainClass = loader.loadClass(mainClassName)[ FD ]
Line_31 $$ String[] mainArgs = new String[args.length - startArgsIdx]-->Line_32 $$ System.arraycopy(args, startArgsIdx, mainArgs, 0, mainArgs.length)[ FD ]
Line_41 $$ loader = (ClassLoader) Class.forName(classLoader).getConstructor(new Class[] -->Line_47 $$ Thread.currentThread().setContextClassLoader(loader)[ FD ]
