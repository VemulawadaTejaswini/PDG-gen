Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_4 $$ TestData testData = new TestData()[ CD ]
Line_6 $$ Session session = openSession()-->Line_32 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_6 $$ Session session = openSession()-->Line_18 $$ session.enableFilter("region").setParameter("region", "APAC")[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_10 $$ Criteria departmentsQuery = session.createCriteria(Department.class).add(Subqueries.propertyIn("id", salespersonSubquery))[ CD ]
Line_20 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_32 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_20 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_21 $$ assertEquals("Incorrect orders count", 1, orders.size())[ FD ]
Line_27 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_33 $$ assertEquals("Incorrect orders count", 0, orders.size())[ FD ]
Line_32 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_33 $$ assertEquals("Incorrect orders count", 0, orders.size())[ FD ]
Line_19 $$ DetachedCriteria lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_26 $$ lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Subqueries.propertyIn("id", productSubquery)).setProjection(Property.forName("id"))[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_31 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", testData.fourMonthsAgo.getTime())[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_5 $$ testData.prepare()[ CD ]
Line_6 $$ Session session = openSession()-->Line_14 $$ session.enableFilter("region").setParameter("region", "Foobar")[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_17 $$ log.info("Criteria query against Order with a subquery for line items with a subquery on product and sold by a given sales person...")[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_25 $$ DetachedCriteria productSubquery = DetachedCriteria.forClass(Product.class).add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))[ CD ]
Line_6 $$ Session session = openSession()-->Line_23 $$ session.enableFilter("region").setParameter("region", "APAC")[ FD ]
Line_27 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_28 $$ assertEquals("Incorrect orders count", 1, orders.size())[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_15 $$ departments = departmentsQuery.list()[ CD ]
Line_15 $$ departments = departmentsQuery.list()-->Line_16 $$ assertEquals("Incorrect department count", 0, departments.size())[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_29 $$ log.info("query against Order with a subquery for line items with a subquery line items where the product name is Acme Hair Gel and the quantity is greater than 1 in a given region and the product is effective as of 4 months ago")[ CD ]
Line_20 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_33 $$ assertEquals("Incorrect orders count", 0, orders.size())[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_24 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", testData.lastMonth.getTime())[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_33 $$ assertEquals("Incorrect orders count", 0, orders.size())[ CD ]
Line_20 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_28 $$ assertEquals("Incorrect orders count", 1, orders.size())[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_13 $$ log.info("Criteria query against Department with a subquery on Salesperson in the FooBar reqion...")[ CD ]
Line_26 $$ lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Subqueries.propertyIn("id", productSubquery)).setProjection(Property.forName("id"))-->Line_32 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_6 $$ Session session = openSession()-->Line_7 $$ session.enableFilter("region").setParameter("region", "APAC")[ FD ]
Line_6 $$ Session session = openSession()-->Line_24 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", testData.lastMonth.getTime())[ FD ]
Line_11 $$ List departments = departmentsQuery.list()-->Line_12 $$ assertEquals("Incorrect department count", 1, departments.size())[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_20 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_14 $$ session.enableFilter("region").setParameter("region", "Foobar")[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_3 $$ log.info("Starting Criteria-subquery filter tests")[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_16 $$ assertEquals("Incorrect department count", 0, departments.size())[ CD ]
Line_6 $$ Session session = openSession()-->Line_27 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_6 $$ Session session = openSession()-->Line_20 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_18 $$ session.enableFilter("region").setParameter("region", "APAC")[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_9 $$ DetachedCriteria salespersonSubquery = DetachedCriteria.forClass(Salesperson.class).add(Restrictions.eq("name", "steve")).setProjection(Property.forName("department"))[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_28 $$ assertEquals("Incorrect orders count", 1, orders.size())[ CD ]
Line_11 $$ List departments = departmentsQuery.list()-->Line_15 $$ departments = departmentsQuery.list()[ FD ]
Line_19 $$ DetachedCriteria lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_27 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_10 $$ Criteria departmentsQuery = session.createCriteria(Department.class).add(Subqueries.propertyIn("id", salespersonSubquery))-->Line_15 $$ departments = departmentsQuery.list()[ FD ]
Line_19 $$ DetachedCriteria lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_32 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_10 $$ Criteria departmentsQuery = session.createCriteria(Department.class).add(Subqueries.propertyIn("id", salespersonSubquery))-->Line_11 $$ List departments = departmentsQuery.list()[ FD ]
Line_6 $$ Session session = openSession()-->Line_30 $$ session.enableFilter("region").setParameter("region", "APAC")[ FD ]
Line_6 $$ Session session = openSession()-->Line_31 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", testData.fourMonthsAgo.getTime())[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_35 $$ testData.release()[ CD ]
Line_4 $$ TestData testData = new TestData()-->Line_35 $$ testData.release()[ FD ]
Line_25 $$ DetachedCriteria productSubquery = DetachedCriteria.forClass(Product.class).add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_26 $$ lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Subqueries.propertyIn("id", productSubquery)).setProjection(Property.forName("id"))[ FD ]
Line_6 $$ Session session = openSession()-->Line_34 $$ session.close()[ FD ]
Line_20 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_27 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_23 $$ session.enableFilter("region").setParameter("region", "APAC")[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_22 $$ log.info("query against Order with a subquery for line items with a subquery line items where the product name is Acme Hair Gel and the quantity is greater than 1 in a given region and the product is effective as of last month")[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_34 $$ session.close()[ CD ]
Line_4 $$ TestData testData = new TestData()-->Line_5 $$ testData.prepare()[ FD ]
Line_9 $$ DetachedCriteria salespersonSubquery = DetachedCriteria.forClass(Salesperson.class).add(Restrictions.eq("name", "steve")).setProjection(Property.forName("department"))-->Line_10 $$ Criteria departmentsQuery = session.createCriteria(Department.class).add(Subqueries.propertyIn("id", salespersonSubquery))[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_12 $$ assertEquals("Incorrect department count", 1, departments.size())[ CD ]
Line_26 $$ lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Subqueries.propertyIn("id", productSubquery)).setProjection(Property.forName("id"))-->Line_27 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_27 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_32 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_11 $$ List departments = departmentsQuery.list()-->Line_16 $$ assertEquals("Incorrect department count", 0, departments.size())[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_26 $$ lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Subqueries.propertyIn("id", productSubquery)).setProjection(Property.forName("id"))[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_11 $$ List departments = departmentsQuery.list()[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_6 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_30 $$ session.enableFilter("region").setParameter("region", "APAC")[ CD ]
Line_6 $$ Session session = openSession()-->Line_10 $$ Criteria departmentsQuery = session.createCriteria(Department.class).add(Subqueries.propertyIn("id", salespersonSubquery))[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_7 $$ session.enableFilter("region").setParameter("region", "APAC")[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_21 $$ assertEquals("Incorrect orders count", 1, orders.size())[ CD ]
Line_19 $$ DetachedCriteria lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_20 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_32 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_19 $$ DetachedCriteria lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_27 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ CD ]
Line_2 $$ public void testCriteriaSubqueryWithFilters() -->Line_8 $$ log.info("Criteria query against Department with a subquery on Salesperson in the APAC reqion...")[ CD ]
