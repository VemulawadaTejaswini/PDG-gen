Line_30 $$ lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Subqueries.propertyIn("id", productSubquery)).setProjection(Property.forName("id"))-->Line_31 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_31 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_36 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_10 $$ Session session = openSession()-->Line_24 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_24 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_31 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_10 $$ Session session = openSession()-->Line_35 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", testData.fourMonthsAgo.getTime())[ FD ]
Line_31 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_37 $$ assertEquals("Incorrect orders count", 0, orders.size())[ FD ]
Line_36 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_37 $$ assertEquals("Incorrect orders count", 0, orders.size())[ FD ]
Line_10 $$ Session session = openSession()-->Line_27 $$ session.enableFilter("region").setParameter("region", "APAC")[ FD ]
Line_10 $$ Session session = openSession()-->Line_38 $$ session.close()[ FD ]
Line_10 $$ Session session = openSession()-->Line_22 $$ session.enableFilter("region").setParameter("region", "APAC")[ FD ]
Line_31 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_32 $$ assertEquals("Incorrect orders count", 1, orders.size())[ FD ]
Line_10 $$ Session session = openSession()-->Line_11 $$ session.enableFilter("region").setParameter("region", "APAC")[ FD ]
Line_15 $$ List departments = departmentsQuery.list()-->Line_16 $$ assertEquals("Incorrect department count", 1, departments.size())[ FD ]
Line_23 $$ DetachedCriteria lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_24 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_23 $$ DetachedCriteria lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_31 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_23 $$ DetachedCriteria lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_36 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_10 $$ Session session = openSession()-->Line_34 $$ session.enableFilter("region").setParameter("region", "APAC")[ FD ]
Line_15 $$ List departments = departmentsQuery.list()-->Line_19 $$ departments = departmentsQuery.list()[ FD ]
Line_30 $$ lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Subqueries.propertyIn("id", productSubquery)).setProjection(Property.forName("id"))-->Line_36 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_24 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_32 $$ assertEquals("Incorrect orders count", 1, orders.size())[ FD ]
Line_10 $$ Session session = openSession()-->Line_14 $$ Criteria departmentsQuery = session.createCriteria(Department.class).add(Subqueries.propertyIn("id", salespersonSubquery))[ FD ]
Line_8 $$ TestData testData = new TestData()-->Line_39 $$ testData.release()[ FD ]
Line_8 $$ TestData testData = new TestData()-->Line_9 $$ testData.prepare()[ FD ]
Line_24 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_25 $$ assertEquals("Incorrect orders count", 1, orders.size())[ FD ]
Line_10 $$ Session session = openSession()-->Line_28 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", testData.lastMonth.getTime())[ FD ]
Line_24 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_36 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_15 $$ List departments = departmentsQuery.list()-->Line_20 $$ assertEquals("Incorrect department count", 0, departments.size())[ FD ]
Line_10 $$ Session session = openSession()-->Line_31 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_14 $$ Criteria departmentsQuery = session.createCriteria(Department.class).add(Subqueries.propertyIn("id", salespersonSubquery))-->Line_19 $$ departments = departmentsQuery.list()[ FD ]
Line_10 $$ Session session = openSession()-->Line_18 $$ session.enableFilter("region").setParameter("region", "Foobar")[ FD ]
Line_23 $$ DetachedCriteria lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_30 $$ lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Subqueries.propertyIn("id", productSubquery)).setProjection(Property.forName("id"))[ FD ]
Line_14 $$ Criteria departmentsQuery = session.createCriteria(Department.class).add(Subqueries.propertyIn("id", salespersonSubquery))-->Line_15 $$ List departments = departmentsQuery.list()[ FD ]
Line_19 $$ departments = departmentsQuery.list()-->Line_20 $$ assertEquals("Incorrect department count", 0, departments.size())[ FD ]
Line_29 $$ DetachedCriteria productSubquery = DetachedCriteria.forClass(Product.class).add(Restrictions.eq("name", "Acme Hair Gel")).setProjection(Property.forName("id"))-->Line_30 $$ lineItemSubquery = DetachedCriteria.forClass(LineItem.class).add(Restrictions.ge("quantity", 1L)).createCriteria("product").add(Subqueries.propertyIn("id", productSubquery)).setProjection(Property.forName("id"))[ FD ]
Line_13 $$ DetachedCriteria salespersonSubquery = DetachedCriteria.forClass(Salesperson.class).add(Restrictions.eq("name", "steve")).setProjection(Property.forName("department"))-->Line_14 $$ Criteria departmentsQuery = session.createCriteria(Department.class).add(Subqueries.propertyIn("id", salespersonSubquery))[ FD ]
Line_10 $$ Session session = openSession()-->Line_36 $$ orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()[ FD ]
Line_24 $$ List orders = session.createCriteria(Order.class).add(Subqueries.exists(lineItemSubquery)).add(Restrictions.eq("buyer", "gavin")).list()-->Line_37 $$ assertEquals("Incorrect orders count", 0, orders.size())[ FD ]
