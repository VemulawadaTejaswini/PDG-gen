Line_37 $$ final ArrangementEntryWrapper<E> parentWrapper = initialWrapper.getParent()-->Line_42 $$ boolean isInserted = context.changer.insertSection(context, arranged.get(i), newSectionsInfo, parentWrapper, beforeOffset, afterOffset)[ FD ]
Line_41 $$ final int afterOffset = arrangedWrapper.getEndOffset()-->Line_42 $$ boolean isInserted = context.changer.insertSection(context, arranged.get(i), newSectionsInfo, parentWrapper, beforeOffset, afterOffset)[ FD ]
Line_8 $$ Map<E, ArrangementEntryWrapper<E>> map = ContainerUtilRt.newHashMap()-->Line_47 $$ ArrangementEntryWrapper<E> next = i < arranged.size() - 1 ? map.get(arranged.get(i + 1)) : null[ FD ]
Line_29 $$ final NewSectionInfo<E> newSectionsInfo = NewSectionInfo.create(arranged, entryToSection)-->Line_42 $$ boolean isInserted = context.changer.insertSection(context, arranged.get(i), newSectionsInfo, parentWrapper, beforeOffset, afterOffset)[ FD ]
Line_10 $$ List<E> toArrange = ContainerUtilRt.newArrayList()-->Line_18 $$ arranged.addAll(arrange(toArrange, context.sectionRules, context.rulesByPriority, entryToSection))[ FD ]
Line_12 $$ E entry = wrapper.getEntry()-->Line_23 $$ toArrange.add(entry)[ FD ]
Line_10 $$ List<E> toArrange = ContainerUtilRt.newArrayList()-->Line_26 $$ if (!toArrange.isEmpty()) [ FD ]
Line_4 $$ if (wrappers.isEmpty()) -->Line_5 $$ return[ CD ]
Line_12 $$ E entry = wrapper.getEntry()-->Line_14 $$ if (!entry.canBeMatched()) [ FD ]
Line_14 $$ if (!entry.canBeMatched()) -->Line_21 $$ toArrange.clear()[ CD ]
Line_26 $$ if (!toArrange.isEmpty()) -->Line_27 $$ arranged.addAll(arrange(toArrange, context.sectionRules, context.rulesByPriority, entryToSection))[ CD ]
Line_11 $$ for (ArrangementEntryWrapper<E> wrapper : wrappers) -->Line_13 $$ map.put(wrapper.getEntry(), wrapper)[ FD ]
Line_14 $$ if (!entry.canBeMatched()) -->Line_23 $$ toArrange.add(entry)[ CD ]
Line_10 $$ List<E> toArrange = ContainerUtilRt.newArrayList()-->Line_23 $$ toArrange.add(entry)[ FD ]
Line_7 $$ Map<E, ArrangementSectionRule> entryToSection = ContainerUtilRt.newHashMap()-->Line_29 $$ final NewSectionInfo<E> newSectionsInfo = NewSectionInfo.create(arranged, entryToSection)[ FD ]
Line_34 $$ ArrangementEntryWrapper<E> initialWrapper = wrappers.get(i)-->Line_37 $$ final ArrangementEntryWrapper<E> parentWrapper = initialWrapper.getParent()[ FD ]
Line_40 $$ final int beforeOffset = arrangedWrapper.getStartOffset()-->Line_42 $$ boolean isInserted = context.changer.insertSection(context, arranged.get(i), newSectionsInfo, parentWrapper, beforeOffset, afterOffset)[ FD ]
Line_11 $$ for (ArrangementEntryWrapper<E> wrapper : wrappers) -->Line_12 $$ E entry = wrapper.getEntry()[ FD ]
Line_9 $$ List<E> arranged = ContainerUtilRt.newArrayList()-->Line_42 $$ boolean isInserted = context.changer.insertSection(context, arranged.get(i), newSectionsInfo, parentWrapper, beforeOffset, afterOffset)[ FD ]
Line_8 $$ Map<E, ArrangementEntryWrapper<E>> map = ContainerUtilRt.newHashMap()-->Line_35 $$ ArrangementEntryWrapper<E> previous = i > 0 ? map.get(arranged.get(i - 1)) : null[ FD ]
Line_39 $$ if (previous != null && previous.equals(previousInitial) || previous == null && previousInitial == null) -->Line_42 $$ boolean isInserted = context.changer.insertSection(context, arranged.get(i), newSectionsInfo, parentWrapper, beforeOffset, afterOffset)[ CD ]
Line_33 $$ ArrangementEntryWrapper<E> arrangedWrapper = map.get(arranged.get(i))-->Line_41 $$ final int afterOffset = arrangedWrapper.getEndOffset()[ FD ]
Line_9 $$ List<E> arranged = ContainerUtilRt.newArrayList()-->Line_18 $$ arranged.addAll(arrange(toArrange, context.sectionRules, context.rulesByPriority, entryToSection))[ FD ]
Line_34 $$ ArrangementEntryWrapper<E> initialWrapper = wrappers.get(i)-->Line_48 $$ context.changer.replace(arrangedWrapper, initialWrapper, previous, next, context)[ FD ]
Line_10 $$ List<E> toArrange = ContainerUtilRt.newArrayList()-->Line_27 $$ arranged.addAll(arrange(toArrange, context.sectionRules, context.rulesByPriority, entryToSection))[ FD ]
Line_8 $$ Map<E, ArrangementEntryWrapper<E>> map = ContainerUtilRt.newHashMap()-->Line_33 $$ ArrangementEntryWrapper<E> arrangedWrapper = map.get(arranged.get(i))[ FD ]
Line_33 $$ ArrangementEntryWrapper<E> arrangedWrapper = map.get(arranged.get(i))-->Line_40 $$ final int beforeOffset = arrangedWrapper.getStartOffset()[ FD ]
Line_7 $$ Map<E, ArrangementSectionRule> entryToSection = ContainerUtilRt.newHashMap()-->Line_27 $$ arranged.addAll(arrange(toArrange, context.sectionRules, context.rulesByPriority, entryToSection))[ FD ]
Line_35 $$ ArrangementEntryWrapper<E> previous = i > 0 ? map.get(arranged.get(i - 1)) : null-->Line_48 $$ context.changer.replace(arrangedWrapper, initialWrapper, previous, next, context)[ FD ]
Line_9 $$ List<E> arranged = ContainerUtilRt.newArrayList()-->Line_49 $$ context.changer.insertSection(context, arranged.get(i), newSectionsInfo, arrangedWrapper, initialWrapper, parentWrapper)[ FD ]
Line_10 $$ List<E> toArrange = ContainerUtilRt.newArrayList()-->Line_21 $$ toArrange.clear()[ FD ]
Line_39 $$ if (previous != null && previous.equals(previousInitial) || previous == null && previousInitial == null) -->Line_40 $$ final int beforeOffset = arrangedWrapper.getStartOffset()[ CD ]
Line_37 $$ final ArrangementEntryWrapper<E> parentWrapper = initialWrapper.getParent()-->Line_49 $$ context.changer.insertSection(context, arranged.get(i), newSectionsInfo, arrangedWrapper, initialWrapper, parentWrapper)[ FD ]
Line_39 $$ if (previous != null && previous.equals(previousInitial) || previous == null && previousInitial == null) -->Line_41 $$ final int afterOffset = arrangedWrapper.getEndOffset()[ CD ]
Line_47 $$ ArrangementEntryWrapper<E> next = i < arranged.size() - 1 ? map.get(arranged.get(i + 1)) : null-->Line_48 $$ context.changer.replace(arrangedWrapper, initialWrapper, previous, next, context)[ FD ]
Line_33 $$ ArrangementEntryWrapper<E> arrangedWrapper = map.get(arranged.get(i))-->Line_49 $$ context.changer.insertSection(context, arranged.get(i), newSectionsInfo, arrangedWrapper, initialWrapper, parentWrapper)[ FD ]
Line_8 $$ Map<E, ArrangementEntryWrapper<E>> map = ContainerUtilRt.newHashMap()-->Line_13 $$ map.put(wrapper.getEntry(), wrapper)[ FD ]
Line_34 $$ ArrangementEntryWrapper<E> initialWrapper = wrappers.get(i)-->Line_49 $$ context.changer.insertSection(context, arranged.get(i), newSectionsInfo, arrangedWrapper, initialWrapper, parentWrapper)[ FD ]
Line_14 $$ if (!entry.canBeMatched()) -->Line_20 $$ arranged.add(entry)[ CD ]
Line_9 $$ List<E> arranged = ContainerUtilRt.newArrayList()-->Line_27 $$ arranged.addAll(arrange(toArrange, context.sectionRules, context.rulesByPriority, entryToSection))[ FD ]
Line_34 $$ ArrangementEntryWrapper<E> initialWrapper = wrappers.get(i)-->Line_38 $$ if (arrangedWrapper.equals(initialWrapper)) [ FD ]
Line_36 $$ ArrangementEntryWrapper<E> previousInitial = i > 0 ? wrappers.get(i - 1) : null-->Line_39 $$ if (previous != null && previous.equals(previousInitial) || previous == null && previousInitial == null) [ FD ]
Line_7 $$ Map<E, ArrangementSectionRule> entryToSection = ContainerUtilRt.newHashMap()-->Line_18 $$ arranged.addAll(arrange(toArrange, context.sectionRules, context.rulesByPriority, entryToSection))[ FD ]
Line_29 $$ final NewSectionInfo<E> newSectionsInfo = NewSectionInfo.create(arranged, entryToSection)-->Line_49 $$ context.changer.insertSection(context, arranged.get(i), newSectionsInfo, arrangedWrapper, initialWrapper, parentWrapper)[ FD ]
Line_12 $$ E entry = wrapper.getEntry()-->Line_20 $$ arranged.add(entry)[ FD ]
Line_9 $$ List<E> arranged = ContainerUtilRt.newArrayList()-->Line_33 $$ ArrangementEntryWrapper<E> arrangedWrapper = map.get(arranged.get(i))[ FD ]
Line_9 $$ List<E> arranged = ContainerUtilRt.newArrayList()-->Line_35 $$ ArrangementEntryWrapper<E> previous = i > 0 ? map.get(arranged.get(i - 1)) : null[ FD ]
Line_33 $$ ArrangementEntryWrapper<E> arrangedWrapper = map.get(arranged.get(i))-->Line_48 $$ context.changer.replace(arrangedWrapper, initialWrapper, previous, next, context)[ FD ]
Line_9 $$ List<E> arranged = ContainerUtilRt.newArrayList()-->Line_47 $$ ArrangementEntryWrapper<E> next = i < arranged.size() - 1 ? map.get(arranged.get(i + 1)) : null[ FD ]
Line_9 $$ List<E> arranged = ContainerUtilRt.newArrayList()-->Line_20 $$ arranged.add(entry)[ FD ]
Line_33 $$ ArrangementEntryWrapper<E> arrangedWrapper = map.get(arranged.get(i))-->Line_38 $$ if (arrangedWrapper.equals(initialWrapper)) [ FD ]
Line_35 $$ ArrangementEntryWrapper<E> previous = i > 0 ? map.get(arranged.get(i - 1)) : null-->Line_39 $$ if (previous != null && previous.equals(previousInitial) || previous == null && previousInitial == null) [ FD ]
Line_38 $$ if (arrangedWrapper.equals(initialWrapper)) -->Line_39 $$ if (previous != null && previous.equals(previousInitial) || previous == null && previousInitial == null) [ CD ]
Line_9 $$ List<E> arranged = ContainerUtilRt.newArrayList()-->Line_29 $$ final NewSectionInfo<E> newSectionsInfo = NewSectionInfo.create(arranged, entryToSection)[ FD ]
