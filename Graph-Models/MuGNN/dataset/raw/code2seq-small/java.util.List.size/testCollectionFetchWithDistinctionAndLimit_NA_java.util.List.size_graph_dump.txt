Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_30 $$ assertEquals("firstResult not applied correctly", "123-5", firstReturn.getSerialNumber())[ CD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_33 $$ s = openSession()[ CD ]
Line_22 $$ s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_21 $$ s.close()[ CD ]
Line_22 $$ s = openSession()-->Line_25 $$ results = s.createQuery("select distinct p from Animal p inner join fetch p.offspring").list()[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_22 $$ s = openSession()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_29 $$ Animal firstReturn = (Animal) results.get(0)[ CD ]
Line_22 $$ s = openSession()-->Line_33 $$ s = openSession()[ FD ]
Line_25 $$ results = s.createQuery("select distinct p from Animal p inner join fetch p.offspring").list()-->Line_26 $$ assertEquals("duplicate list() returns", 30, results.size())[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_27 $$ results = s.createQuery("select p from Animal p inner join fetch p.offspring order by p.id").setFirstResult(5).setMaxResults(20).list()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_20 $$ t.commit()[ FD ]
Line_10 $$ Animal child2 = new Animal()-->Line_11 $$ child2.setDescription("collection fetch distinction (child2 - parent " + i + ")")[ FD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_18 $$ s.persist(parent)[ CD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_15 $$ parent.setSerialNumber("123-" + i)[ CD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_14 $$ parent.setDescription("collection fetch distinction (parent" + i + ")")[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_13 $$ Animal parent = new Animal()-->Line_16 $$ parent.addOffspring(child1)[ FD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_17 $$ parent.addOffspring(child2)[ CD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_25 $$ results = s.createQuery("select distinct p from Animal p inner join fetch p.offspring").list()[ CD ]
Line_7 $$ Animal child1 = new Animal()-->Line_9 $$ s.persist(child1)[ FD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_9 $$ s.persist(child1)[ CD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_28 $$ assertEquals("duplicate returns", 20, results.size())[ CD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ results = s.createQuery("select distinct p from Animal p inner join fetch p.offspring").list()[ FD ]
Line_33 $$ s = openSession()-->Line_36 $$ s.createQuery("delete Animal").executeUpdate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.persist(child2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_31 $$ t.commit()[ FD ]
Line_13 $$ Animal parent = new Animal()-->Line_17 $$ parent.addOffspring(child2)[ FD ]
Line_23 $$ t = s.beginTransaction()-->Line_31 $$ t.commit()[ FD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_12 $$ s.persist(child2)[ CD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_10 $$ Animal child2 = new Animal()[ CD ]
Line_24 $$ List results-->Line_27 $$ results = s.createQuery("select p from Animal p inner join fetch p.offspring order by p.id").setFirstResult(5).setMaxResults(20).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ s.close()[ FD ]
Line_10 $$ Animal child2 = new Animal()-->Line_12 $$ s.persist(child2)[ FD ]
Line_25 $$ results = s.createQuery("select distinct p from Animal p inner join fetch p.offspring").list()-->Line_28 $$ assertEquals("duplicate returns", 20, results.size())[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_5 $$ int parentCount = 30-->Line_6 $$ for (int i = 0; i < parentCount; i++) [ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ results = s.createQuery("select p from Animal p inner join fetch p.offspring order by p.id").setFirstResult(5).setMaxResults(20).list()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_3 $$ Session s = openSession()[ CD ]
Line_23 $$ t = s.beginTransaction()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_23 $$ t = s.beginTransaction()[ CD ]
Line_24 $$ List results-->Line_26 $$ assertEquals("duplicate list() returns", 30, results.size())[ FD ]
Line_24 $$ List results-->Line_28 $$ assertEquals("duplicate returns", 20, results.size())[ FD ]
Line_7 $$ Animal child1 = new Animal()-->Line_16 $$ parent.addOffspring(child1)[ FD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_11 $$ child2.setDescription("collection fetch distinction (child2 - parent " + i + ")")[ CD ]
Line_25 $$ results = s.createQuery("select distinct p from Animal p inner join fetch p.offspring").list()-->Line_27 $$ results = s.createQuery("select p from Animal p inner join fetch p.offspring order by p.id").setFirstResult(5).setMaxResults(20).list()[ FD ]
Line_22 $$ s = openSession()-->Line_27 $$ results = s.createQuery("select p from Animal p inner join fetch p.offspring order by p.id").setFirstResult(5).setMaxResults(20).list()[ FD ]
Line_22 $$ s = openSession()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_13 $$ Animal parent = new Animal()-->Line_18 $$ s.persist(parent)[ FD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ s.createQuery("delete Animal").executeUpdate()[ FD ]
Line_23 $$ t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_7 $$ Animal child1 = new Animal()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_23 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ s = openSession()-->Line_35 $$ s.createQuery("delete Animal where mother is not null").executeUpdate()[ FD ]
Line_24 $$ List results-->Line_25 $$ results = s.createQuery("select distinct p from Animal p inner join fetch p.offspring").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.close()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_20 $$ t.commit()[ CD ]
Line_13 $$ Animal parent = new Animal()-->Line_14 $$ parent.setDescription("collection fetch distinction (parent" + i + ")")[ FD ]
Line_33 $$ s = openSession()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ s = openSession()-->Line_36 $$ s.createQuery("delete Animal").executeUpdate()[ FD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_8 $$ child1.setDescription("collection fetch distinction (child1 - parent" + i + ")")[ CD ]
Line_22 $$ s = openSession()-->Line_35 $$ s.createQuery("delete Animal where mother is not null").executeUpdate()[ FD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_13 $$ Animal parent = new Animal()[ CD ]
Line_24 $$ List results-->Line_29 $$ Animal firstReturn = (Animal) results.get(0)[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_34 $$ t = s.beginTransaction()[ CD ]
Line_7 $$ Animal child1 = new Animal()-->Line_8 $$ child1.setDescription("collection fetch distinction (child1 - parent" + i + ")")[ FD ]
Line_25 $$ results = s.createQuery("select distinct p from Animal p inner join fetch p.offspring").list()-->Line_29 $$ Animal firstReturn = (Animal) results.get(0)[ FD ]
Line_27 $$ results = s.createQuery("select p from Animal p inner join fetch p.offspring order by p.id").setFirstResult(5).setMaxResults(20).list()-->Line_29 $$ Animal firstReturn = (Animal) results.get(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s = openSession()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_32 $$ s.close()[ CD ]
Line_29 $$ Animal firstReturn = (Animal) results.get(0)-->Line_30 $$ assertEquals("firstResult not applied correctly", "123-5", firstReturn.getSerialNumber())[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_36 $$ s.createQuery("delete Animal").executeUpdate()[ CD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_37 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.createQuery("delete Animal where mother is not null").executeUpdate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_9 $$ s.persist(child1)[ FD ]
Line_27 $$ results = s.createQuery("select p from Animal p inner join fetch p.offspring order by p.id").setFirstResult(5).setMaxResults(20).list()-->Line_28 $$ assertEquals("duplicate returns", 20, results.size())[ FD ]
Line_3 $$ Session s = openSession()-->Line_33 $$ s = openSession()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_6 $$ for (int i = 0; i < parentCount; i++) [ CD ]
Line_13 $$ Animal parent = new Animal()-->Line_15 $$ parent.setSerialNumber("123-" + i)[ FD ]
Line_6 $$ for (int i = 0; i < parentCount; i++) -->Line_16 $$ parent.addOffspring(child1)[ CD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_38 $$ s.close()[ CD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_35 $$ s.createQuery("delete Animal where mother is not null").executeUpdate()[ CD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.persist(parent)[ FD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_5 $$ int parentCount = 30[ CD ]
Line_22 $$ s = openSession()-->Line_32 $$ s.close()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_24 $$ List results[ CD ]
Line_10 $$ Animal child2 = new Animal()-->Line_17 $$ parent.addOffspring(child2)[ FD ]
Line_22 $$ s = openSession()-->Line_23 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_26 $$ assertEquals("duplicate list() returns", 30, results.size())[ CD ]
Line_2 $$ public void testCollectionFetchWithDistinctionAndLimit() -->Line_31 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ s.close()[ FD ]
