Line_2 $$ private int calcLeftRespNeighborIndex(final int blockOffset) -->Line_4 $$ while (r - l > 1) [ CD ]
Line_2 $$ private int calcLeftRespNeighborIndex(final int blockOffset) -->Line_12 $$ return l[ CD ]
Line_4 $$ while (r - l > 1) -->Line_6 $$ if (myBlocks.get(m).getStartOffset() >= blockOffset) [ CD ]
Line_6 $$ if (myBlocks.get(m).getStartOffset() >= blockOffset) -->Line_7 $$ r = m[ CD ]
Line_3 $$ int l = -1, r = myBlocks.size()-->Line_7 $$ r = m[ FD ]
Line_5 $$ int m = (l + r) / 2-->Line_7 $$ r = m[ FD ]
Line_5 $$ int m = (l + r) / 2-->Line_9 $$ l = m[ FD ]
Line_2 $$ private int calcLeftRespNeighborIndex(final int blockOffset) -->Line_3 $$ int l = -1, r = myBlocks.size()[ CD ]
Line_2 $$ private int calcLeftRespNeighborIndex(final int blockOffset) -->Line_6 $$ if (myBlocks.get(m).getStartOffset() >= blockOffset) [ FD ]
Line_5 $$ int m = (l + r) / 2-->Line_6 $$ if (myBlocks.get(m).getStartOffset() >= blockOffset) [ FD ]
Line_3 $$ int l = -1, r = myBlocks.size()-->Line_9 $$ l = m[ FD ]
Line_6 $$ if (myBlocks.get(m).getStartOffset() >= blockOffset) -->Line_9 $$ l = m[ CD ]
Line_4 $$ while (r - l > 1) -->Line_5 $$ int m = (l + r) / 2[ CD ]
