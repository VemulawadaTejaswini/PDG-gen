Line_17 $$ if (!block.getSeq().isEmpty() && block.getInstruction(0).opcode == CodeConstants.opc_astore) -->Line_19 $$ if (offset > -1)[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_5 $$ if (isLabeled()) [ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_12 $$ buf.appendIndent(indent).append("}")[ CD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_23 $$ List<String> exception_types = exctstrings.get(i - 1)[ CD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_14 $$ Statement stat = stats.get(i)[ CD ]
Line_18 $$ Integer offset = block.getOldOffset(0)-->Line_20 $$ tracer.addMapping(offset)[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_3 $$ TextBuffer buf = new TextBuffer()[ CD ]
Line_27 $$ VarType exc_type = new VarType(CodeConstants.TYPE_OBJECT, 0, exception_types.get(exc_index))-->Line_28 $$ String exc_type_name = ExprProcessor.getCastTypeName(exc_type)[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_9 $$ buf.appendIndent(indent).append("try [ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_9 $$ buf.appendIndent(indent).append("try [ FD ]
Line_23 $$ List<String> exception_types = exctstrings.get(i - 1)-->Line_24 $$ if (exception_types.size() > 1) [ FD ]
Line_28 $$ String exc_type_name = ExprProcessor.getCastTypeName(exc_type)-->Line_29 $$ buf.append(exc_type_name).append(" | ")[ FD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_34 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_24 $$ if (exception_types.size() > 1) [ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_7 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_11 $$ buf.append(ExprProcessor.jmpWrapper(first, indent + 1, true, tracer))[ FD ]
Line_5 $$ if (isLabeled()) -->Line_7 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_10 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_37 $$ buf.appendLineSeparator()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_11 $$ buf.append(ExprProcessor.jmpWrapper(first, indent + 1, true, tracer))[ CD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_35 $$ buf.append(ExprProcessor.jmpWrapper(stat, indent + 1, true, tracer)).appendIndent(indent).append("}")[ FD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_29 $$ buf.append(exc_type_name).append(" | ")[ FD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_12 $$ buf.appendIndent(indent).append("}")[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_32 $$ buf.append(vars.get(i - 1).toJava(indent, tracer))[ FD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_9 $$ buf.appendIndent(indent).append("try [ FD ]
Line_17 $$ if (!block.getSeq().isEmpty() && block.getInstruction(0).opcode == CodeConstants.opc_astore) -->Line_18 $$ Integer offset = block.getOldOffset(0)[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_10 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_11 $$ buf.append(ExprProcessor.jmpWrapper(first, indent + 1, true, tracer))[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_39 $$ return buf[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_38 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_20 $$ tracer.addMapping(offset)[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_6 $$ buf.appendIndent(indent).append("label").append(this.id.toString()).append(":").appendLineSeparator()[ FD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_33 $$ buf.append(") [ FD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_22 $$ buf.append(" catch (")[ CD ]
Line_23 $$ List<String> exception_types = exctstrings.get(i - 1)-->Line_27 $$ VarType exc_type = new VarType(CodeConstants.TYPE_OBJECT, 0, exception_types.get(exc_index))[ FD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_14 $$ Statement stat = stats.get(i)[ FD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_35 $$ buf.append(ExprProcessor.jmpWrapper(stat, indent + 1, true, tracer)).appendIndent(indent).append("}")[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_4 $$ buf.append(ExprProcessor.listToJava(varDefinitions, indent, tracer))[ CD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_4 $$ buf.append(ExprProcessor.listToJava(varDefinitions, indent, tracer))[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_12 $$ buf.appendIndent(indent).append("}")[ FD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_32 $$ buf.append(vars.get(i - 1).toJava(indent, tracer))[ CD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_17 $$ if (!block.getSeq().isEmpty() && block.getInstruction(0).opcode == CodeConstants.opc_astore) [ CD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_32 $$ buf.append(vars.get(i - 1).toJava(indent, tracer))[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_34 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_19 $$ if (offset > -1)-->Line_20 $$ tracer.addMapping(offset)[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_37 $$ buf.appendLineSeparator()[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_38 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_35 $$ buf.append(ExprProcessor.jmpWrapper(stat, indent + 1, true, tracer)).appendIndent(indent).append("}")[ FD ]
Line_18 $$ Integer offset = block.getOldOffset(0)-->Line_19 $$ if (offset > -1)[ FD ]
Line_14 $$ Statement stat = stats.get(i)-->Line_35 $$ buf.append(ExprProcessor.jmpWrapper(stat, indent + 1, true, tracer)).appendIndent(indent).append("}")[ FD ]
Line_13 $$ for (int i = 1; i < stats.size(); i++) -->Line_33 $$ buf.append(") [ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_4 $$ buf.append(ExprProcessor.listToJava(varDefinitions, indent, tracer))[ FD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_6 $$ buf.appendIndent(indent).append("label").append(this.id.toString()).append(":").appendLineSeparator()[ FD ]
Line_5 $$ if (isLabeled()) -->Line_6 $$ buf.appendIndent(indent).append("label").append(this.id.toString()).append(":").appendLineSeparator()[ CD ]
Line_3 $$ TextBuffer buf = new TextBuffer()-->Line_22 $$ buf.append(" catch (")[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_13 $$ for (int i = 1; i < stats.size(); i++) [ CD ]
