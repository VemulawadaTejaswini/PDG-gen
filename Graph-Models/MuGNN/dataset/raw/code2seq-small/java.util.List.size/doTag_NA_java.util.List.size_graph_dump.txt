Line_2 $$ public static String doTag(String modelName, HttpServletRequest request) throws Exception -->Line_11 $$ List<String> guestDefaultActions = ResourceActionsUtil.getModelResourceGuestDefaultActions(modelName)[ FD ]
Line_11 $$ List<String> guestDefaultActions = ResourceActionsUtil.getModelResourceGuestDefaultActions(modelName)-->Line_22 $$ if (layout.isPublicLayout() && guestDefaultActions.contains(action)) [ FD ]
Line_15 $$ String action = supportedActions.get(i)-->Line_34 $$ sb.append(HttpUtil.encodeURL(action))[ FD ]
Line_26 $$ if (guestDisabled) -->Line_27 $$ guestChecked = false[ CD ]
Line_20 $$ guestChecked = true-->Line_27 $$ guestChecked = false[ FD ]
Line_2 $$ public static String doTag(String modelName, HttpServletRequest request) throws Exception -->Line_9 $$ List<String> supportedActions = ResourceActionsUtil.getModelResourceActions(modelName)[ FD ]
Line_17 $$ boolean guestChecked = false-->Line_20 $$ guestChecked = true[ FD ]
Line_18 $$ if (layoutGroup.isControlPanel()) -->Line_22 $$ if (layout.isPublicLayout() && guestDefaultActions.contains(action)) [ CD ]
Line_30 $$ if (groupChecked) -->Line_33 $$ sb.append("groupPermissions=")[ CD ]
Line_37 $$ if (guestChecked) -->Line_38 $$ sb.append(StringPool.AMPERSAND)[ CD ]
Line_9 $$ List<String> supportedActions = ResourceActionsUtil.getModelResourceActions(modelName)-->Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) [ FD ]
Line_2 $$ public static String doTag(String modelName, HttpServletRequest request) throws Exception -->Line_12 $$ List<String> guestUnsupportedActions = ResourceActionsUtil.getModelResourceGuestUnsupportedActions(modelName)[ FD ]
Line_6 $$ Layout layout = themeDisplay.getLayout()-->Line_22 $$ if (layout.isPublicLayout() && guestDefaultActions.contains(action)) [ FD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_41 $$ sb.append(HttpUtil.encodeURL(action))[ FD ]
Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) -->Line_15 $$ String action = supportedActions.get(i)[ FD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_40 $$ sb.append("guestPermissions=")[ FD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_31 $$ sb.append(StringPool.AMPERSAND)[ FD ]
Line_2 $$ public static String doTag(String modelName, HttpServletRequest request) throws Exception -->Line_10 $$ List<String> groupDefaultActions = ResourceActionsUtil.getModelResourceGroupDefaultActions(modelName)[ FD ]
Line_4 $$ RenderResponse renderResponse = (RenderResponse) request.getAttribute(JavaConstants.JAVAX_PORTLET_RESPONSE)-->Line_39 $$ sb.append(renderResponse.getNamespace())[ FD ]
Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) -->Line_16 $$ boolean groupChecked = groupDefaultActions.contains(action)[ CD ]
Line_8 $$ Group group = themeDisplay.getScopeGroup()-->Line_29 $$ if (group.isOrganization() || group.isRegularSite()) [ FD ]
Line_29 $$ if (group.isOrganization() || group.isRegularSite()) -->Line_30 $$ if (groupChecked) [ CD ]
Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) -->Line_26 $$ if (guestDisabled) [ CD ]
Line_37 $$ if (guestChecked) -->Line_39 $$ sb.append(renderResponse.getNamespace())[ CD ]
Line_2 $$ public static String doTag(String modelName, HttpServletRequest request) throws Exception -->Line_44 $$ String inputPermissionsViewRole = getDefaultViewRole(modelName, themeDisplay)[ FD ]
Line_15 $$ String action = supportedActions.get(i)-->Line_41 $$ sb.append(HttpUtil.encodeURL(action))[ FD ]
Line_2 $$ public static String doTag(String modelName, HttpServletRequest request) throws Exception -->Line_5 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_15 $$ String action = supportedActions.get(i)-->Line_22 $$ if (layout.isPublicLayout() && guestDefaultActions.contains(action)) [ FD ]
Line_23 $$ guestChecked = true-->Line_27 $$ guestChecked = false[ FD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_38 $$ sb.append(StringPool.AMPERSAND)[ FD ]
Line_7 $$ Group layoutGroup = layout.getGroup()-->Line_18 $$ if (layoutGroup.isControlPanel()) [ FD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_46 $$ sb.append(renderResponse.getNamespace())[ FD ]
Line_19 $$ if (!group.hasPrivateLayouts() && guestDefaultActions.contains(action)) -->Line_20 $$ guestChecked = true[ CD ]
Line_17 $$ boolean guestChecked = false-->Line_23 $$ guestChecked = true[ FD ]
Line_5 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_8 $$ Group group = themeDisplay.getScopeGroup()[ FD ]
Line_15 $$ String action = supportedActions.get(i)-->Line_16 $$ boolean groupChecked = groupDefaultActions.contains(action)[ FD ]
Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) -->Line_25 $$ boolean guestDisabled = guestUnsupportedActions.contains(action)[ CD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_34 $$ sb.append(HttpUtil.encodeURL(action))[ FD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_39 $$ sb.append(renderResponse.getNamespace())[ FD ]
Line_30 $$ if (groupChecked) -->Line_34 $$ sb.append(HttpUtil.encodeURL(action))[ CD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_45 $$ sb.append(StringPool.AMPERSAND)[ FD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_49 $$ return sb.toString()[ FD ]
Line_30 $$ if (groupChecked) -->Line_32 $$ sb.append(renderResponse.getNamespace())[ CD ]
Line_8 $$ Group group = themeDisplay.getScopeGroup()-->Line_19 $$ if (!group.hasPrivateLayouts() && guestDefaultActions.contains(action)) [ FD ]
Line_37 $$ if (guestChecked) -->Line_41 $$ sb.append(HttpUtil.encodeURL(action))[ CD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_32 $$ sb.append(renderResponse.getNamespace())[ FD ]
Line_30 $$ if (groupChecked) -->Line_31 $$ sb.append(StringPool.AMPERSAND)[ CD ]
Line_4 $$ RenderResponse renderResponse = (RenderResponse) request.getAttribute(JavaConstants.JAVAX_PORTLET_RESPONSE)-->Line_46 $$ sb.append(renderResponse.getNamespace())[ FD ]
Line_5 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_44 $$ String inputPermissionsViewRole = getDefaultViewRole(modelName, themeDisplay)[ FD ]
Line_44 $$ String inputPermissionsViewRole = getDefaultViewRole(modelName, themeDisplay)-->Line_48 $$ sb.append(HttpUtil.encodeURL(inputPermissionsViewRole))[ FD ]
Line_18 $$ if (layoutGroup.isControlPanel()) -->Line_19 $$ if (!group.hasPrivateLayouts() && guestDefaultActions.contains(action)) [ CD ]
Line_6 $$ Layout layout = themeDisplay.getLayout()-->Line_7 $$ Group layoutGroup = layout.getGroup()[ FD ]
Line_15 $$ String action = supportedActions.get(i)-->Line_19 $$ if (!group.hasPrivateLayouts() && guestDefaultActions.contains(action)) [ FD ]
Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) -->Line_29 $$ if (group.isOrganization() || group.isRegularSite()) [ CD ]
Line_2 $$ public static String doTag(String modelName, HttpServletRequest request) throws Exception -->Line_4 $$ RenderResponse renderResponse = (RenderResponse) request.getAttribute(JavaConstants.JAVAX_PORTLET_RESPONSE)[ FD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_33 $$ sb.append("groupPermissions=")[ FD ]
Line_11 $$ List<String> guestDefaultActions = ResourceActionsUtil.getModelResourceGuestDefaultActions(modelName)-->Line_19 $$ if (!group.hasPrivateLayouts() && guestDefaultActions.contains(action)) [ FD ]
Line_20 $$ guestChecked = true-->Line_23 $$ guestChecked = true[ FD ]
Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) -->Line_37 $$ if (guestChecked) [ CD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_47 $$ sb.append("inputPermissionsViewRole=")[ FD ]
Line_13 $$ StringBundler sb = new StringBundler()-->Line_48 $$ sb.append(HttpUtil.encodeURL(inputPermissionsViewRole))[ FD ]
Line_12 $$ List<String> guestUnsupportedActions = ResourceActionsUtil.getModelResourceGuestUnsupportedActions(modelName)-->Line_25 $$ boolean guestDisabled = guestUnsupportedActions.contains(action)[ FD ]
Line_9 $$ List<String> supportedActions = ResourceActionsUtil.getModelResourceActions(modelName)-->Line_15 $$ String action = supportedActions.get(i)[ FD ]
Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) -->Line_17 $$ boolean guestChecked = false[ CD ]
Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) -->Line_18 $$ if (layoutGroup.isControlPanel()) [ CD ]
Line_15 $$ String action = supportedActions.get(i)-->Line_25 $$ boolean guestDisabled = guestUnsupportedActions.contains(action)[ FD ]
Line_17 $$ boolean guestChecked = false-->Line_27 $$ guestChecked = false[ FD ]
Line_14 $$ for (int i = 0; i < supportedActions.size(); i++) -->Line_15 $$ String action = supportedActions.get(i)[ CD ]
Line_37 $$ if (guestChecked) -->Line_40 $$ sb.append("guestPermissions=")[ CD ]
Line_22 $$ if (layout.isPublicLayout() && guestDefaultActions.contains(action)) -->Line_23 $$ guestChecked = true[ CD ]
Line_5 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_6 $$ Layout layout = themeDisplay.getLayout()[ FD ]
Line_4 $$ RenderResponse renderResponse = (RenderResponse) request.getAttribute(JavaConstants.JAVAX_PORTLET_RESPONSE)-->Line_32 $$ sb.append(renderResponse.getNamespace())[ FD ]
Line_10 $$ List<String> groupDefaultActions = ResourceActionsUtil.getModelResourceGroupDefaultActions(modelName)-->Line_16 $$ boolean groupChecked = groupDefaultActions.contains(action)[ FD ]
