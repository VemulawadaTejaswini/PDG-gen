Line_29 $$ List l = s.createQuery("from Person").list()-->Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_68 $$ l = s.createQuery("from Person p left join fetch p.address").list()[ CD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_41 $$ assertNull(((Person) l.get(0)).getAddress())[ FD ]
Line_5 $$ Person p = new Person()-->Line_12 $$ a.setPerson(p)[ FD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_39 $$ assertEquals(l.size(), 2)[ FD ]
Line_49 $$ for (int i = 0; i < 2; i++) -->Line_54 $$ assertTrue(px.getAccounts().size() > 0 || row[1] == null)[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_13 $$ s.save(p)[ CD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_42 $$ assertNotNull(((Person) l.get(1)).getAddress())[ FD ]
Line_5 $$ Person p = new Person()-->Line_25 $$ p = (Person) s.get(Person.class, p.getId())[ FD ]
Line_62 $$ Person p1 = (Person) l.get(1)-->Line_63 $$ assertTrue(Hibernate.isInitialized(p1.getAccounts()))[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_39 $$ assertEquals(l.size(), 2)[ FD ]
Line_5 $$ Person p = new Person()-->Line_7 $$ p.setUserId("steve")[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.save(p)[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_62 $$ Person p1 = (Person) l.get(1)[ FD ]
Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()-->Line_58 $$ Person p0 = (Person) l.get(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_69 $$ s.clear()[ FD ]
Line_3 $$ Session s = openSession()-->Line_33 $$ l = s.createQuery("from Person p order by p.name").list()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_72 $$ s.createQuery("delete Person").executeUpdate()[ CD ]
Line_14 $$ Person p2 = new Person()-->Line_31 $$ assertTrue(l.contains(p) && l.contains(p2))[ FD ]
Line_49 $$ for (int i = 0; i < 2; i++) -->Line_52 $$ Set accounts = px.getAccounts()[ CD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_34 $$ assertEquals(l.size(), 2)[ FD ]
Line_14 $$ Person p2 = new Person()-->Line_26 $$ p2 = (Person) s.get(Person.class, p2.getId())[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_40 $$ if (((Person) l.get(0)).getName().equals("Max")) [ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_40 $$ if (((Person) l.get(0)).getName().equals("Max")) [ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_16 $$ p2.setUserId("max")[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_34 $$ assertEquals(l.size(), 2)[ CD ]
Line_14 $$ Person p2 = new Person()-->Line_27 $$ assertNull(p2.getAddress())[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_30 $$ assertEquals(l.size(), 2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_8 $$ Address a = new Address()-->Line_11 $$ p.setAddress(a)[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_58 $$ Person p0 = (Person) l.get(0)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_32 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ p2 = (Person) s.get(Person.class, p2.getId())[ FD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_58 $$ Person p0 = (Person) l.get(0)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_69 $$ s.clear()[ CD ]
Line_26 $$ p2 = (Person) s.get(Person.class, p2.getId())-->Line_31 $$ assertTrue(l.contains(p) && l.contains(p2))[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_12 $$ a.setPerson(p)[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_33 $$ l = s.createQuery("from Person p order by p.name").list()[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_35 $$ assertNull(((Person) l.get(0)).getAddress())[ CD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_45 $$ assertNotNull(((Person) l.get(0)).getAddress())[ FD ]
Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()-->Line_66 $$ l = s.createQuery("from Account a join fetch a.user").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_71 $$ s.createQuery("delete Account").executeUpdate()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_66 $$ l = s.createQuery("from Account a join fetch a.user").list()[ CD ]
Line_18 $$ Account act = new Account()-->Line_21 $$ p2.getAccounts().add(act)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_18 $$ Account act = new Account()[ CD ]
Line_3 $$ Session s = openSession()-->Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_45 $$ assertNotNull(((Person) l.get(0)).getAddress())[ FD ]
Line_49 $$ for (int i = 0; i < 2; i++) -->Line_51 $$ Person px = (Person) row[0][ CD ]
Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()-->Line_58 $$ Person p0 = (Person) l.get(0)[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_44 $$ assertNull(((Person) l.get(1)).getAddress())[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_74 $$ s.close()[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_49 $$ for (int i = 0; i < 2; i++) [ CD ]
Line_49 $$ for (int i = 0; i < 2; i++) -->Line_50 $$ Object[] row = (Object[]) l.get(i)[ CD ]
Line_3 $$ Session s = openSession()-->Line_68 $$ l = s.createQuery("from Person p left join fetch p.address").list()[ FD ]
Line_14 $$ Person p2 = new Person()-->Line_17 $$ s.save(p2)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_61 $$ assertSame(((Account) p0.getAccounts().iterator().next()).getUser(), p0)[ CD ]
Line_18 $$ Account act = new Account()-->Line_20 $$ act.setUser(p2)[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_42 $$ assertNotNull(((Person) l.get(1)).getAddress())[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_62 $$ Person p1 = (Person) l.get(1)[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_11 $$ p.setAddress(a)[ CD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_62 $$ Person p1 = (Person) l.get(1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.save(p2)[ FD ]
Line_51 $$ Person px = (Person) row[0]-->Line_54 $$ assertTrue(px.getAccounts().size() > 0 || row[1] == null)[ FD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_35 $$ assertNull(((Person) l.get(0)).getAddress())[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()[ FD ]
Line_5 $$ Person p = new Person()-->Line_31 $$ assertTrue(l.contains(p) && l.contains(p2))[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_30 $$ assertEquals(l.size(), 2)[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_34 $$ assertEquals(l.size(), 2)[ FD ]
Line_18 $$ Account act = new Account()-->Line_22 $$ s.save(act)[ FD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_44 $$ assertNull(((Person) l.get(1)).getAddress())[ FD ]
Line_58 $$ Person p0 = (Person) l.get(0)-->Line_59 $$ assertTrue(Hibernate.isInitialized(p0.getAccounts()))[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_68 $$ l = s.createQuery("from Person p left join fetch p.address").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_65 $$ s.clear()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_58 $$ Person p0 = (Person) l.get(0)[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_59 $$ assertTrue(Hibernate.isInitialized(p0.getAccounts()))[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_8 $$ Address a = new Address()[ CD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_40 $$ if (((Person) l.get(0)).getName().equals("Max")) [ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_73 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ p = (Person) s.get(Person.class, p.getId())[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_41 $$ assertNull(((Person) l.get(0)).getAddress())[ FD ]
Line_40 $$ if (((Person) l.get(0)).getName().equals("Max")) -->Line_44 $$ assertNull(((Person) l.get(1)).getAddress())[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_73 $$ t.commit()[ CD ]
Line_58 $$ Person p0 = (Person) l.get(0)-->Line_60 $$ assertEquals(p0.getAccounts().size(), 1)[ FD ]
Line_14 $$ Person p2 = new Person()-->Line_21 $$ p2.getAccounts().add(act)[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ s.flush()[ FD ]
Line_40 $$ if (((Person) l.get(0)).getName().equals("Max")) -->Line_42 $$ assertNotNull(((Person) l.get(1)).getAddress())[ CD ]
Line_14 $$ Person p2 = new Person()-->Line_20 $$ act.setUser(p2)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ s.clear()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_21 $$ p2.getAccounts().add(act)[ CD ]
Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()-->Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()[ FD ]
Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()-->Line_68 $$ l = s.createQuery("from Person p left join fetch p.address").list()[ FD ]
Line_49 $$ for (int i = 0; i < 2; i++) -->Line_53 $$ assertFalse(Hibernate.isInitialized(accounts))[ CD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_66 $$ l = s.createQuery("from Account a join fetch a.user").list()[ FD ]
Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()-->Line_62 $$ Person p1 = (Person) l.get(1)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_24 $$ s.clear()[ CD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_68 $$ l = s.createQuery("from Person p left join fetch p.address").list()[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_41 $$ assertNull(((Person) l.get(0)).getAddress())[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_19 $$ act.setType('c')[ CD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_50 $$ Object[] row = (Object[]) l.get(i)[ FD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_66 $$ l = s.createQuery("from Account a join fetch a.user").list()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_64 $$ assertEquals(p1.getAccounts().size(), 0)[ CD ]
Line_5 $$ Person p = new Person()-->Line_11 $$ p.setAddress(a)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_22 $$ s.save(act)[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_17 $$ s.save(p2)[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_9 $$ a.setAddress("Texas")[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()[ CD ]
Line_49 $$ for (int i = 0; i < 2; i++) -->Line_50 $$ Object[] row = (Object[]) l.get(i)[ FD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_50 $$ Object[] row = (Object[]) l.get(i)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_65 $$ s.clear()[ CD ]
Line_25 $$ p = (Person) s.get(Person.class, p.getId())-->Line_31 $$ assertTrue(l.contains(p) && l.contains(p2))[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_70 $$ s.createQuery("delete Address").executeUpdate()[ FD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_45 $$ assertNotNull(((Person) l.get(0)).getAddress())[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_3 $$ Session s = openSession()[ CD ]
Line_14 $$ Person p2 = new Person()-->Line_16 $$ p2.setUserId("max")[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_50 $$ Object[] row = (Object[]) l.get(i)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_63 $$ assertTrue(Hibernate.isInitialized(p1.getAccounts()))[ CD ]
Line_62 $$ Person p1 = (Person) l.get(1)-->Line_64 $$ assertEquals(p1.getAccounts().size(), 0)[ FD ]
Line_52 $$ Set accounts = px.getAccounts()-->Line_53 $$ assertFalse(Hibernate.isInitialized(accounts))[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_62 $$ Person p1 = (Person) l.get(1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s.save(act)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_70 $$ s.createQuery("delete Address").executeUpdate()[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_14 $$ Person p2 = new Person()[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_28 $$ assertNotNull(p.getAddress())[ CD ]
Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()-->Line_62 $$ Person p1 = (Person) l.get(1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ s.clear()[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_44 $$ assertNull(((Person) l.get(1)).getAddress())[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_26 $$ p2 = (Person) s.get(Person.class, p2.getId())[ CD ]
Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()-->Line_66 $$ l = s.createQuery("from Account a join fetch a.user").list()[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_36 $$ assertNotNull(((Person) l.get(1)).getAddress())[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_5 $$ Person p = new Person()[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_67 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ s.clear()[ FD ]
Line_3 $$ Session s = openSession()-->Line_72 $$ s.createQuery("delete Person").executeUpdate()[ FD ]
Line_8 $$ Address a = new Address()-->Line_10 $$ a.setCountry("USA")[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ List l = s.createQuery("from Person").list()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_36 $$ assertNotNull(((Person) l.get(1)).getAddress())[ CD ]
Line_3 $$ Session s = openSession()-->Line_67 $$ s.clear()[ FD ]
Line_66 $$ l = s.createQuery("from Account a join fetch a.user").list()-->Line_68 $$ l = s.createQuery("from Person p left join fetch p.address").list()[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()[ FD ]
Line_26 $$ p2 = (Person) s.get(Person.class, p2.getId())-->Line_27 $$ assertNull(p2.getAddress())[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_36 $$ assertNotNull(((Person) l.get(1)).getAddress())[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_10 $$ a.setCountry("USA")[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_6 $$ p.setName("Steve")[ CD ]
Line_18 $$ Account act = new Account()-->Line_19 $$ act.setType('c')[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_39 $$ assertEquals(l.size(), 2)[ CD ]
Line_25 $$ p = (Person) s.get(Person.class, p.getId())-->Line_28 $$ assertNotNull(p.getAddress())[ FD ]
Line_5 $$ Person p = new Person()-->Line_28 $$ assertNotNull(p.getAddress())[ FD ]
Line_8 $$ Address a = new Address()-->Line_9 $$ a.setAddress("Texas")[ FD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_31 $$ assertTrue(l.contains(p) && l.contains(p2))[ FD ]
Line_5 $$ Person p = new Person()-->Line_13 $$ s.save(p)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_47 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_56 $$ s.clear()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_29 $$ List l = s.createQuery("from Person").list()[ CD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_35 $$ assertNull(((Person) l.get(0)).getAddress())[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_31 $$ assertTrue(l.contains(p) && l.contains(p2))[ CD ]
Line_5 $$ Person p = new Person()-->Line_6 $$ p.setName("Steve")[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_60 $$ assertEquals(p0.getAccounts().size(), 1)[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_15 $$ p2.setName("Max")[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_20 $$ act.setUser(p2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.clear()[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_23 $$ s.flush()[ CD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_58 $$ Person p0 = (Person) l.get(0)[ FD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_40 $$ if (((Person) l.get(0)).getName().equals("Max")) [ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_56 $$ s.clear()[ CD ]
Line_8 $$ Address a = new Address()-->Line_12 $$ a.setPerson(p)[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_37 $$ s.clear()[ CD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_66 $$ l = s.createQuery("from Account a join fetch a.user").list()[ FD ]
Line_58 $$ Person p0 = (Person) l.get(0)-->Line_61 $$ assertSame(((Account) p0.getAccounts().iterator().next()).getUser(), p0)[ FD ]
Line_14 $$ Person p2 = new Person()-->Line_15 $$ p2.setName("Max")[ FD ]
Line_40 $$ if (((Person) l.get(0)).getName().equals("Max")) -->Line_41 $$ assertNull(((Person) l.get(0)).getAddress())[ CD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_42 $$ assertNotNull(((Person) l.get(1)).getAddress())[ FD ]
Line_51 $$ Person px = (Person) row[0]-->Line_52 $$ Set accounts = px.getAccounts()[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_68 $$ l = s.createQuery("from Person p left join fetch p.address").list()[ FD ]
Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()-->Line_68 $$ l = s.createQuery("from Person p left join fetch p.address").list()[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_33 $$ l = s.createQuery("from Person p order by p.name").list()[ FD ]
Line_40 $$ if (((Person) l.get(0)).getName().equals("Max")) -->Line_45 $$ assertNotNull(((Person) l.get(0)).getAddress())[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_27 $$ assertNull(p2.getAddress())[ CD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_7 $$ p.setUserId("steve")[ CD ]
Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()-->Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()[ FD ]
Line_29 $$ List l = s.createQuery("from Person").list()-->Line_57 $$ l = s.createQuery("from Person p left join fetch p.accounts a order by p.name").list()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_71 $$ s.createQuery("delete Account").executeUpdate()[ CD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_66 $$ l = s.createQuery("from Account a join fetch a.user").list()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_38 $$ l = s.createQuery("from Person p left join fetch p.address a order by a.country").list()[ CD ]
Line_48 $$ l = s.createQuery("from Person p left join p.accounts").list()-->Line_50 $$ Object[] row = (Object[]) l.get(i)[ FD ]
Line_33 $$ l = s.createQuery("from Person p order by p.name").list()-->Line_39 $$ assertEquals(l.size(), 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_74 $$ s.close()[ FD ]
Line_2 $$ public void testOneToOnePropertyRef() -->Line_25 $$ p = (Person) s.get(Person.class, p.getId())[ CD ]
