Line_8 $$ List<T> actualEvents = eventCaptor.getAllValues()-->Line_12 $$ assertEquals("expected events", expectedEvents.length, actualEvents.size())[ FD ]
Line_35 $$ for (T actualEvent : actualEvents) -->Line_37 $$ String actual = eventToString(actualEvent, methods)[ FD ]
Line_32 $$ for (T expectedEvent : expectedEvents) -->Line_33 $$ expectedSet.add(eventToString(expectedEvent, methods))[ FD ]
Line_19 $$ for (int n = 0; n < len; n++) -->Line_22 $$ String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null[ FD ]
Line_22 $$ String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null-->Line_23 $$ assertEquals("event#" + n, expect, actual)[ FD ]
Line_8 $$ List<T> actualEvents = eventCaptor.getAllValues()-->Line_22 $$ String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null[ FD ]
Line_22 $$ String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null-->Line_38 $$ assertTrue("unexpected event: " + actual, expectedSet.remove(actual))[ FD ]
Line_5 $$ ArgumentCaptor<T> eventCaptor = ArgumentCaptor.forClass(genericClass)-->Line_8 $$ List<T> actualEvents = eventCaptor.getAllValues()[ FD ]
Line_16 $$ if (inOrder) -->Line_19 $$ for (int n = 0; n < len; n++) [ CD ]
Line_4 $$ Class<T> genericClass = (Class<T>) expectedEvents.getClass().getComponentType()-->Line_5 $$ ArgumentCaptor<T> eventCaptor = ArgumentCaptor.forClass(genericClass)[ FD ]
Line_21 $$ String expect = (n < expectedEvents.length) ? eventToString(expectedEvents[n], methods) : null-->Line_23 $$ assertEquals("event#" + n, expect, actual)[ FD ]
Line_37 $$ String actual = eventToString(actualEvent, methods)-->Line_38 $$ assertTrue("unexpected event: " + actual, expectedSet.remove(actual))[ FD ]
