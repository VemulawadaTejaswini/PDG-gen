Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_3 $$ if (expectedName == null)[ CD ]
Line_7 $$ for (int i = 0; i < limit; i++) -->Line_10 $$ if (word.equalsIgnoreCase(expectedWord)) [ CD ]
Line_10 $$ if (word.equalsIgnoreCase(expectedWord)) -->Line_11 $$ max = Math.max(max, i + 1)[ CD ]
Line_6 $$ int limit = Math.min(words.size(), expectedWords.length)-->Line_7 $$ for (int i = 0; i < limit; i++) [ FD ]
Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_16 $$ return max[ CD ]
Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_8 $$ String word = words.get(words.size() - i - 1)[ FD ]
Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_5 $$ String[] expectedWords = NameUtil.nameToWords(expectedName)[ CD ]
Line_9 $$ String expectedWord = expectedWords[expectedWords.length - i - 1]-->Line_10 $$ if (word.equalsIgnoreCase(expectedWord)) [ FD ]
Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_3 $$ if (expectedName == null)[ FD ]
Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_6 $$ int limit = Math.min(words.size(), expectedWords.length)[ FD ]
Line_3 $$ if (expectedName == null)-->Line_4 $$ return max[ CD ]
Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_11 $$ max = Math.max(max, i + 1)[ FD ]
Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_6 $$ int limit = Math.min(words.size(), expectedWords.length)[ CD ]
Line_7 $$ for (int i = 0; i < limit; i++) -->Line_9 $$ String expectedWord = expectedWords[expectedWords.length - i - 1][ CD ]
Line_7 $$ for (int i = 0; i < limit; i++) -->Line_8 $$ String word = words.get(words.size() - i - 1)[ CD ]
Line_8 $$ String word = words.get(words.size() - i - 1)-->Line_10 $$ if (word.equalsIgnoreCase(expectedWord)) [ FD ]
Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_7 $$ for (int i = 0; i < limit; i++) [ CD ]
Line_2 $$ private static int calcMatch(final String expectedName, final List<String> words, int max) -->Line_5 $$ String[] expectedWords = NameUtil.nameToWords(expectedName)[ FD ]
