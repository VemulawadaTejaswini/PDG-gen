Line_3 $$ if (center.compareTo(searchInterval.min) < 0) -->Line_8 $$ if (right != null)[ CD ]
Line_5 $$ if (i == intersectsRight.size() && high.compareTo(searchInterval.min) < 0)-->Line_6 $$ return[ CD ]
Line_10 $$ if (center.compareTo(searchInterval.max) > 0) -->Line_19 $$ if (left != null)[ CD ]
Line_2 $$ void searchInternal(Interval<C, D> searchInterval, List<D> results) -->Line_14 $$ results.add(intersectsLeft.get(i).data)[ FD ]
Line_12 $$ if (j == 0 && low.compareTo(searchInterval.max) > 0)-->Line_13 $$ return[ CD ]
Line_10 $$ if (center.compareTo(searchInterval.max) > 0) -->Line_14 $$ for (int i = 0; i < j; i++) results.add(intersectsLeft.get(i).data)[ CD ]
Line_3 $$ if (center.compareTo(searchInterval.min) < 0) -->Line_10 $$ if (center.compareTo(searchInterval.max) > 0) [ CD ]
Line_2 $$ void searchInternal(Interval<C, D> searchInterval, List<D> results) -->Line_3 $$ if (center.compareTo(searchInterval.min) < 0) [ CD ]
Line_8 $$ if (right != null)-->Line_9 $$ right.searchInternal(searchInterval, results)[ CD ]
Line_10 $$ if (center.compareTo(searchInterval.max) > 0) -->Line_11 $$ int j = Interval.<C, D>minOrdering().binarySearchAsymmetric(intersectsLeft, searchInterval.max, Op.HIGHER)[ CD ]
Line_10 $$ if (center.compareTo(searchInterval.max) > 0) -->Line_15 $$ if (left != null)[ CD ]
Line_3 $$ if (center.compareTo(searchInterval.min) < 0) -->Line_4 $$ int i = Interval.<C, D>maxOrdering().binarySearchAsymmetric(intersectsRight, searchInterval.min, Op.CEIL)[ CD ]
Line_2 $$ void searchInternal(Interval<C, D> searchInterval, List<D> results) -->Line_7 $$ results.add(intersectsRight.get(i++).data)[ FD ]
Line_2 $$ void searchInternal(Interval<C, D> searchInterval, List<D> results) -->Line_20 $$ left.searchInternal(searchInterval, results)[ FD ]
Line_11 $$ int j = Interval.<C, D>minOrdering().binarySearchAsymmetric(intersectsLeft, searchInterval.max, Op.HIGHER)-->Line_14 $$ for (int i = 0; i < j; i++) results.add(intersectsLeft.get(i).data)[ FD ]
Line_15 $$ if (left != null)-->Line_16 $$ left.searchInternal(searchInterval, results)[ CD ]
Line_4 $$ int i = Interval.<C, D>maxOrdering().binarySearchAsymmetric(intersectsRight, searchInterval.min, Op.CEIL)-->Line_7 $$ while (i < intersectsRight.size()) results.add(intersectsRight.get(i++).data)[ FD ]
Line_19 $$ if (left != null)-->Line_20 $$ left.searchInternal(searchInterval, results)[ CD ]
Line_21 $$ if (right != null)-->Line_22 $$ right.searchInternal(searchInterval, results)[ CD ]
Line_2 $$ void searchInternal(Interval<C, D> searchInterval, List<D> results) -->Line_9 $$ right.searchInternal(searchInterval, results)[ FD ]
Line_3 $$ if (center.compareTo(searchInterval.min) < 0) -->Line_5 $$ if (i == intersectsRight.size() && high.compareTo(searchInterval.min) < 0)[ CD ]
Line_4 $$ int i = Interval.<C, D>maxOrdering().binarySearchAsymmetric(intersectsRight, searchInterval.min, Op.CEIL)-->Line_14 $$ for (int i = 0; i < j; i++) results.add(intersectsLeft.get(i).data)[ FD ]
Line_10 $$ if (center.compareTo(searchInterval.max) > 0) -->Line_21 $$ if (right != null)[ CD ]
Line_2 $$ void searchInternal(Interval<C, D> searchInterval, List<D> results) -->Line_16 $$ left.searchInternal(searchInterval, results)[ FD ]
Line_2 $$ void searchInternal(Interval<C, D> searchInterval, List<D> results) -->Line_18 $$ results.add(interval.data)[ FD ]
Line_3 $$ if (center.compareTo(searchInterval.min) < 0) -->Line_7 $$ while (i < intersectsRight.size()) results.add(intersectsRight.get(i++).data)[ CD ]
Line_10 $$ if (center.compareTo(searchInterval.max) > 0) -->Line_12 $$ if (j == 0 && low.compareTo(searchInterval.max) > 0)[ CD ]
Line_2 $$ void searchInternal(Interval<C, D> searchInterval, List<D> results) -->Line_22 $$ right.searchInternal(searchInterval, results)[ FD ]
Line_4 $$ int i = Interval.<C, D>maxOrdering().binarySearchAsymmetric(intersectsRight, searchInterval.min, Op.CEIL)-->Line_7 $$ results.add(intersectsRight.get(i++).data)[ FD ]
Line_4 $$ int i = Interval.<C, D>maxOrdering().binarySearchAsymmetric(intersectsRight, searchInterval.min, Op.CEIL)-->Line_14 $$ results.add(intersectsLeft.get(i).data)[ FD ]
