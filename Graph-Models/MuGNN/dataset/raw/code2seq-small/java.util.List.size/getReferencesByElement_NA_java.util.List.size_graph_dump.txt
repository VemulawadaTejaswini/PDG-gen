Line_14 $$ String shortName = annotation.getShortName()-->Line_15 $$ if (!shortName.equals("Unroll") && !shortName.equals("spock.lang.Unroll"))[ FD ]
Line_13 $$ GrAnnotation annotation = (GrAnnotation) eAnnotation-->Line_17 $$ PsiElement modifierList = annotation.getParent()[ FD ]
Line_24 $$ ElementManipulator<PsiElement> manipulator = ElementManipulators.getManipulator(element)-->Line_25 $$ TextRange rangeInElement = manipulator.getRangeInElement(element)[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_13 $$ GrAnnotation annotation = (GrAnnotation) eAnnotation[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_17 $$ PsiElement modifierList = annotation.getParent()[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_20 $$ PsiElement eMethod = modifierList.getParent()[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_24 $$ ElementManipulator<PsiElement> manipulator = ElementManipulators.getManipulator(element)[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_25 $$ TextRange rangeInElement = manipulator.getRangeInElement(element)[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_26 $$ String text = rangeInElement.substring(element.getText())[ CD ]
Line_26 $$ String text = rangeInElement.substring(element.getText())-->Line_28 $$ Matcher matcher = PATTERN.matcher(text)[ FD ]
Line_4 $$ String name = nvp.getName()-->Line_5 $$ if (name != null && !name.equals("value"))[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_33 $$ return references.toArray(new PsiReference[references.size()])[ CD ]
Line_5 $$ if (name != null && !name.equals("value"))-->Line_6 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_8 $$ if (!(argumentList instanceof GrAnnotationArgumentList))-->Line_9 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_4 $$ String name = nvp.getName()[ CD ]
Line_28 $$ Matcher matcher = PATTERN.matcher(text)-->Line_30 $$ TextRange range = new TextRange(rangeInElement.getStartOffset() + matcher.start(1), rangeInElement.getStartOffset() + matcher.end(1))[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_5 $$ if (name != null && !name.equals("value"))[ CD ]
Line_17 $$ PsiElement modifierList = annotation.getParent()-->Line_20 $$ PsiElement eMethod = modifierList.getParent()[ FD ]
Line_3 $$ GrAnnotationNameValuePair nvp = (GrAnnotationNameValuePair) element.getParent()-->Line_4 $$ String name = nvp.getName()[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_11 $$ if (!(eAnnotation instanceof GrAnnotation))[ CD ]
Line_11 $$ if (!(eAnnotation instanceof GrAnnotation))-->Line_12 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_18 $$ if (!(modifierList instanceof GrModifierList))[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_24 $$ ElementManipulator<PsiElement> manipulator = ElementManipulators.getManipulator(element)[ FD ]
Line_29 $$ while (matcher.find()) -->Line_31 $$ references.add(new SpockVariableReference(element, range, references, method))[ CD ]
Line_25 $$ TextRange rangeInElement = manipulator.getRangeInElement(element)-->Line_30 $$ TextRange range = new TextRange(rangeInElement.getStartOffset() + matcher.start(1), rangeInElement.getStartOffset() + matcher.end(1))[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_21 $$ if (!(eMethod instanceof GrMethod))[ CD ]
Line_7 $$ PsiElement argumentList = nvp.getParent()-->Line_10 $$ PsiElement eAnnotation = argumentList.getParent()[ FD ]
Line_27 $$ final List<SpockVariableReference> references = new ArrayList<SpockVariableReference>()-->Line_33 $$ return references.toArray(new PsiReference[references.size()])[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_14 $$ String shortName = annotation.getShortName()[ CD ]
Line_3 $$ GrAnnotationNameValuePair nvp = (GrAnnotationNameValuePair) element.getParent()-->Line_7 $$ PsiElement argumentList = nvp.getParent()[ FD ]
Line_29 $$ while (matcher.find()) -->Line_30 $$ TextRange range = new TextRange(rangeInElement.getStartOffset() + matcher.start(1), rangeInElement.getStartOffset() + matcher.end(1))[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_26 $$ String text = rangeInElement.substring(element.getText())[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_28 $$ Matcher matcher = PATTERN.matcher(text)[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_29 $$ while (matcher.find()) [ CD ]
Line_18 $$ if (!(modifierList instanceof GrModifierList))-->Line_19 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_27 $$ final List<SpockVariableReference> references = new ArrayList<SpockVariableReference>()-->Line_31 $$ references.add(new SpockVariableReference(element, range, references, method))[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_7 $$ PsiElement argumentList = nvp.getParent()[ CD ]
Line_21 $$ if (!(eMethod instanceof GrMethod))-->Line_22 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_15 $$ if (!shortName.equals("Unroll") && !shortName.equals("spock.lang.Unroll"))[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_23 $$ final GrMethod method = (GrMethod) eMethod[ CD ]
Line_15 $$ if (!shortName.equals("Unroll") && !shortName.equals("spock.lang.Unroll"))-->Line_16 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_10 $$ PsiElement eAnnotation = argumentList.getParent()[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_25 $$ TextRange rangeInElement = manipulator.getRangeInElement(element)[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_3 $$ GrAnnotationNameValuePair nvp = (GrAnnotationNameValuePair) element.getParent()[ CD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_27 $$ final List<SpockVariableReference> references = new ArrayList<SpockVariableReference>()[ CD ]
Line_25 $$ TextRange rangeInElement = manipulator.getRangeInElement(element)-->Line_26 $$ String text = rangeInElement.substring(element.getText())[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_3 $$ GrAnnotationNameValuePair nvp = (GrAnnotationNameValuePair) element.getParent()[ FD ]
Line_2 $$ public PsiReference[] getReferencesByElement(@NotNull PsiElement element, @NotNull ProcessingContext context) -->Line_8 $$ if (!(argumentList instanceof GrAnnotationArgumentList))[ CD ]
Line_28 $$ Matcher matcher = PATTERN.matcher(text)-->Line_29 $$ while (matcher.find()) [ FD ]
Line_13 $$ GrAnnotation annotation = (GrAnnotation) eAnnotation-->Line_14 $$ String shortName = annotation.getShortName()[ FD ]
