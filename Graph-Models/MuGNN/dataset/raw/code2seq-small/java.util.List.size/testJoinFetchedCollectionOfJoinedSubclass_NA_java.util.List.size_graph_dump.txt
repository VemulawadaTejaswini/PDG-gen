Line_17 $$ List results = session.createQuery("from Zoo z join fetch z.mammals").list()-->Line_20 $$ Zoo zooRead = (Zoo) results.get(0)[ FD ]
Line_15 $$ session = openSession()-->Line_25 $$ session.delete(mammalRead)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_17 $$ List results = session.createQuery("from Zoo z join fetch z.mammals").list()[ CD ]
Line_20 $$ Zoo zooRead = (Zoo) results.get(0)-->Line_23 $$ Mammal mammalRead = (Mammal) zooRead.getMammals().get("zebra")[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_11 $$ session.save(mammal)[ CD ]
Line_5 $$ Zoo zoo = new Zoo()-->Line_21 $$ assertEquals(zoo, zooRead)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_28 $$ session.close()[ CD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_26 $$ session.delete(zooRead)[ CD ]
Line_15 $$ session = openSession()-->Line_28 $$ session.close()[ FD ]
Line_9 $$ Session session = openSession()-->Line_14 $$ session.close()[ FD ]
Line_9 $$ Session session = openSession()-->Line_11 $$ session.save(mammal)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_21 $$ assertEquals(zoo, zooRead)[ CD ]
Line_9 $$ Session session = openSession()-->Line_25 $$ session.delete(mammalRead)[ FD ]
Line_15 $$ session = openSession()-->Line_17 $$ List results = session.createQuery("from Zoo z join fetch z.mammals").list()[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_20 $$ Zoo zooRead = (Zoo) results.get(0)[ CD ]
Line_9 $$ Session session = openSession()-->Line_15 $$ session = openSession()[ FD ]
Line_10 $$ Transaction txn = session.beginTransaction()-->Line_27 $$ txn.commit()[ FD ]
Line_5 $$ Zoo zoo = new Zoo()-->Line_8 $$ mammal.setZoo(zoo)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_27 $$ txn.commit()[ CD ]
Line_15 $$ session = openSession()-->Line_16 $$ txn = session.beginTransaction()[ FD ]
Line_3 $$ Mammal mammal = new Mammal()-->Line_4 $$ mammal.setDescription("A Zebra")[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_10 $$ Transaction txn = session.beginTransaction()[ CD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_24 $$ assertEquals(mammal, mammalRead)[ CD ]
Line_23 $$ Mammal mammalRead = (Mammal) zooRead.getMammals().get("zebra")-->Line_25 $$ session.delete(mammalRead)[ FD ]
Line_3 $$ Mammal mammal = new Mammal()-->Line_11 $$ session.save(mammal)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_7 $$ zoo.getMammals().put("zebra", mammal)[ CD ]
Line_16 $$ txn = session.beginTransaction()-->Line_27 $$ txn.commit()[ FD ]
Line_5 $$ Zoo zoo = new Zoo()-->Line_12 $$ session.save(zoo)[ FD ]
Line_9 $$ Session session = openSession()-->Line_28 $$ session.close()[ FD ]
Line_9 $$ Session session = openSession()-->Line_12 $$ session.save(zoo)[ FD ]
Line_3 $$ Mammal mammal = new Mammal()-->Line_7 $$ zoo.getMammals().put("zebra", mammal)[ FD ]
Line_9 $$ Session session = openSession()-->Line_26 $$ session.delete(zooRead)[ FD ]
Line_17 $$ List results = session.createQuery("from Zoo z join fetch z.mammals").list()-->Line_18 $$ assertEquals("Incorrect result size", 1, results.size())[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_5 $$ Zoo zoo = new Zoo()[ CD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_13 $$ txn.commit()[ CD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_3 $$ Mammal mammal = new Mammal()[ CD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_9 $$ Session session = openSession()[ CD ]
Line_3 $$ Mammal mammal = new Mammal()-->Line_8 $$ mammal.setZoo(zoo)[ FD ]
Line_15 $$ session = openSession()-->Line_26 $$ session.delete(zooRead)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_14 $$ session.close()[ CD ]
Line_20 $$ Zoo zooRead = (Zoo) results.get(0)-->Line_22 $$ assertTrue(Hibernate.isInitialized(zooRead.getMammals()))[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_12 $$ session.save(zoo)[ CD ]
Line_10 $$ Transaction txn = session.beginTransaction()-->Line_13 $$ txn.commit()[ FD ]
Line_23 $$ Mammal mammalRead = (Mammal) zooRead.getMammals().get("zebra")-->Line_24 $$ assertEquals(mammal, mammalRead)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_15 $$ session = openSession()[ CD ]
Line_3 $$ Mammal mammal = new Mammal()-->Line_24 $$ assertEquals(mammal, mammalRead)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_25 $$ session.delete(mammalRead)[ CD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_16 $$ txn = session.beginTransaction()[ CD ]
Line_20 $$ Zoo zooRead = (Zoo) results.get(0)-->Line_26 $$ session.delete(zooRead)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_8 $$ mammal.setZoo(zoo)[ CD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_22 $$ assertTrue(Hibernate.isInitialized(zooRead.getMammals()))[ CD ]
Line_5 $$ Zoo zoo = new Zoo()-->Line_7 $$ zoo.getMammals().put("zebra", mammal)[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_18 $$ assertEquals("Incorrect result size", 1, results.size())[ CD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_23 $$ Mammal mammalRead = (Mammal) zooRead.getMammals().get("zebra")[ CD ]
Line_10 $$ Transaction txn = session.beginTransaction()-->Line_16 $$ txn = session.beginTransaction()[ FD ]
Line_17 $$ List results = session.createQuery("from Zoo z join fetch z.mammals").list()-->Line_19 $$ assertTrue("Incorrect result return type", results.get(0) instanceof Zoo)[ FD ]
Line_9 $$ Session session = openSession()-->Line_10 $$ Transaction txn = session.beginTransaction()[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_4 $$ mammal.setDescription("A Zebra")[ CD ]
Line_5 $$ Zoo zoo = new Zoo()-->Line_6 $$ zoo.setName("A Zoo")[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_6 $$ zoo.setName("A Zoo")[ CD ]
Line_9 $$ Session session = openSession()-->Line_16 $$ txn = session.beginTransaction()[ FD ]
Line_2 $$ public void testJoinFetchedCollectionOfJoinedSubclass() throws Exception -->Line_19 $$ assertTrue("Incorrect result return type", results.get(0) instanceof Zoo)[ CD ]
Line_9 $$ Session session = openSession()-->Line_17 $$ List results = session.createQuery("from Zoo z join fetch z.mammals").list()[ FD ]
Line_20 $$ Zoo zooRead = (Zoo) results.get(0)-->Line_21 $$ assertEquals(zoo, zooRead)[ FD ]
