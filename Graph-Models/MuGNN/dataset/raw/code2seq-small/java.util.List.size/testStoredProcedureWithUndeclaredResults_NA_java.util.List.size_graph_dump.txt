Line_12 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_15 $$ given(resultSet2.getObject(1)).willReturn("Spam")[ FD ]
Line_12 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_13 $$ given(resultSet2.getMetaData()).willReturn(resultSetMetaData)[ FD ]
Line_26 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_27 $$ assertEquals(2, rs1.size())[ FD ]
Line_26 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_28 $$ assertEquals("Foo", rs1.get(0))[ FD ]
Line_8 $$ ResultSetMetaData resultSetMetaData = mock(ResultSetMetaData.class)-->Line_10 $$ given(resultSetMetaData.getColumnLabel(1)).willReturn("spam")[ FD ]
Line_24 $$ Map<String, Object> res = sproc.execute()-->Line_25 $$ assertEquals("incorrect number of returns", 3, res.size())[ FD ]
Line_24 $$ Map<String, Object> res = sproc.execute()-->Line_30 $$ List<Object> rs2 = (List<Object>) res.get("#result-set-2")[ FD ]
Line_30 $$ List<Object> rs2 = (List<Object>) res.get("#result-set-2")-->Line_32 $$ Object o2 = rs2.get(0)[ FD ]
Line_8 $$ ResultSetMetaData resultSetMetaData = mock(ResultSetMetaData.class)-->Line_11 $$ given(resultSetMetaData.getColumnLabel(2)).willReturn("eggs")[ FD ]
Line_8 $$ ResultSetMetaData resultSetMetaData = mock(ResultSetMetaData.class)-->Line_9 $$ given(resultSetMetaData.getColumnCount()).willReturn(2)[ FD ]
Line_5 $$ ResultSet resultSet1 = mock(ResultSet.class)-->Line_7 $$ given(resultSet1.getString(2)).willReturn("Foo", "Bar")[ FD ]
Line_12 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_19 $$ given(callableStatement.getResultSet()).willReturn(resultSet1, resultSet2)[ FD ]
Line_23 $$ StoredProcedureWithResultSetMapped sproc = new StoredProcedureWithResultSetMapped(dataSource)-->Line_24 $$ Map<String, Object> res = sproc.execute()[ FD ]
Line_24 $$ Map<String, Object> res = sproc.execute()-->Line_26 $$ List<String> rs1 = (List<String>) res.get("rs")[ FD ]
Line_37 $$ Number n = (Number) res.get("#update-count-1")-->Line_38 $$ assertEquals("wrong update count", 0, n.intValue())[ FD ]
Line_5 $$ ResultSet resultSet1 = mock(ResultSet.class)-->Line_6 $$ given(resultSet1.next()).willReturn(true, true, false)[ FD ]
Line_34 $$ Map<String, String> m2 = (Map<String, String>) o2-->Line_36 $$ assertEquals("Eggs", m2.get("eggs"))[ FD ]
Line_12 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_40 $$ verify(resultSet2).close()[ FD ]
Line_12 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_14 $$ given(resultSet2.next()).willReturn(true, false)[ FD ]
Line_5 $$ ResultSet resultSet1 = mock(ResultSet.class)-->Line_19 $$ given(callableStatement.getResultSet()).willReturn(resultSet1, resultSet2)[ FD ]
Line_30 $$ List<Object> rs2 = (List<Object>) res.get("#result-set-2")-->Line_31 $$ assertEquals(1, rs2.size())[ FD ]
Line_5 $$ ResultSet resultSet1 = mock(ResultSet.class)-->Line_39 $$ verify(resultSet1).close()[ FD ]
Line_12 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_16 $$ given(resultSet2.getObject(2)).willReturn("Eggs")[ FD ]
Line_34 $$ Map<String, String> m2 = (Map<String, String>) o2-->Line_35 $$ assertEquals("Spam", m2.get("spam"))[ FD ]
Line_8 $$ ResultSetMetaData resultSetMetaData = mock(ResultSetMetaData.class)-->Line_13 $$ given(resultSet2.getMetaData()).willReturn(resultSetMetaData)[ FD ]
Line_26 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_29 $$ assertEquals("Bar", rs1.get(1))[ FD ]
Line_24 $$ Map<String, Object> res = sproc.execute()-->Line_37 $$ Number n = (Number) res.get("#update-count-1")[ FD ]
