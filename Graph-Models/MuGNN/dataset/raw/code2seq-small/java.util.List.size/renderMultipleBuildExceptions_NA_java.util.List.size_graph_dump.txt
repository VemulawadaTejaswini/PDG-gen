Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_16 $$ writeFailureDetails(output, details)[ CD ]
Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_12 $$ output.withStyle(Failure).format("%s: ", i + 1)[ CD ]
Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_11 $$ output.println()[ CD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_16 $$ writeFailureDetails(output, details)[ FD ]
Line_2 $$ private void renderMultipleBuildExceptions(MultipleBuildFailures multipleFailures) -->Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)[ CD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_7 $$ output.println()[ FD ]
Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_14 $$ output.println()[ CD ]
Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_15 $$ output.text("-----------")[ CD ]
Line_2 $$ private void renderMultipleBuildExceptions(MultipleBuildFailures multipleFailures) -->Line_3 $$ List<? extends Throwable> causes = multipleFailures.getCauses()[ CD ]
Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_13 $$ details.summary.writeTo(output.withStyle(Failure))[ CD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_17 $$ output.println("==============================================================================")[ FD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_15 $$ output.text("-----------")[ FD ]
Line_9 $$ Throwable cause = causes.get(i)-->Line_10 $$ FailureDetails details = constructFailureDetails("Task", cause)[ FD ]
Line_2 $$ private void renderMultipleBuildExceptions(MultipleBuildFailures multipleFailures) -->Line_7 $$ output.println()[ CD ]
Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_10 $$ FailureDetails details = constructFailureDetails("Task", cause)[ CD ]
Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_9 $$ Throwable cause = causes.get(i)[ CD ]
Line_2 $$ private void renderMultipleBuildExceptions(MultipleBuildFailures multipleFailures) -->Line_8 $$ for (int i = 0; i < causes.size(); i++) [ CD ]
Line_2 $$ private void renderMultipleBuildExceptions(MultipleBuildFailures multipleFailures) -->Line_3 $$ List<? extends Throwable> causes = multipleFailures.getCauses()[ FD ]
Line_2 $$ private void renderMultipleBuildExceptions(MultipleBuildFailures multipleFailures) -->Line_5 $$ output.println()[ CD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_5 $$ output.println()[ FD ]
Line_3 $$ List<? extends Throwable> causes = multipleFailures.getCauses()-->Line_6 $$ output.withStyle(Failure).format("FAILURE: Build completed with %s failures.", causes.size())[ FD ]
Line_3 $$ List<? extends Throwable> causes = multipleFailures.getCauses()-->Line_9 $$ Throwable cause = causes.get(i)[ FD ]
Line_2 $$ private void renderMultipleBuildExceptions(MultipleBuildFailures multipleFailures) -->Line_6 $$ output.withStyle(Failure).format("FAILURE: Build completed with %s failures.", causes.size())[ CD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_12 $$ output.withStyle(Failure).format("%s: ", i + 1)[ FD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_6 $$ output.withStyle(Failure).format("FAILURE: Build completed with %s failures.", causes.size())[ FD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_14 $$ output.println()[ FD ]
Line_3 $$ List<? extends Throwable> causes = multipleFailures.getCauses()-->Line_8 $$ for (int i = 0; i < causes.size(); i++) [ FD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_13 $$ details.summary.writeTo(output.withStyle(Failure))[ FD ]
Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_9 $$ Throwable cause = causes.get(i)[ FD ]
Line_4 $$ StyledTextOutput output = textOutputFactory.create(BuildExceptionReporter.class, LogLevel.ERROR)-->Line_11 $$ output.println()[ FD ]
Line_10 $$ FailureDetails details = constructFailureDetails("Task", cause)-->Line_16 $$ writeFailureDetails(output, details)[ FD ]
Line_8 $$ for (int i = 0; i < causes.size(); i++) -->Line_17 $$ output.println("==============================================================================")[ CD ]
