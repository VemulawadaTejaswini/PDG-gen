Line_12 $$ DefaultMutableTreeNode node = treeBuilder.getNodeForElement(element)-->Line_14 $$ tree.expandPath(new TreePath(node.getPath()))[ FD ]
Line_20 $$ DefaultTreeModel treeModel = (DefaultTreeModel) tree.getModel()-->Line_21 $$ tree.addSelectionPath(new TreePath(treeModel.getPathToRoot(node)))[ FD ]
Line_10 $$ for (Object element : pathsToExpand) -->Line_18 $$ DefaultMutableTreeNode node = treeBuilder.getNodeForElement(element)[ FD ]
Line_10 $$ for (Object element : pathsToExpand) -->Line_11 $$ treeBuilder.buildNodeForElement(element)[ FD ]
Line_12 $$ DefaultMutableTreeNode node = treeBuilder.getNodeForElement(element)-->Line_21 $$ tree.addSelectionPath(new TreePath(treeModel.getPathToRoot(node)))[ FD ]
Line_2 $$ public static void restorePaths(AbstractTreeBuilder treeBuilder, List<Object> pathsToExpand, List<Object> selectionPaths, boolean elementsOnly) -->Line_18 $$ DefaultMutableTreeNode node = treeBuilder.getNodeForElement(element)[ FD ]
Line_12 $$ DefaultMutableTreeNode node = treeBuilder.getNodeForElement(element)-->Line_19 $$ if (node != null) [ FD ]
Line_4 $$ if (!elementsOnly) -->Line_8 $$ tree.addSelectionPaths(selectionPaths.toArray(new TreePath[selectionPaths.size()]))[ CD ]
Line_2 $$ public static void restorePaths(AbstractTreeBuilder treeBuilder, List<Object> pathsToExpand, List<Object> selectionPaths, boolean elementsOnly) -->Line_4 $$ if (!elementsOnly) [ FD ]
Line_3 $$ JTree tree = treeBuilder.getTree()-->Line_20 $$ DefaultTreeModel treeModel = (DefaultTreeModel) tree.getModel()[ FD ]
Line_19 $$ if (node != null) -->Line_21 $$ tree.addSelectionPath(new TreePath(treeModel.getPathToRoot(node)))[ CD ]
Line_2 $$ public static void restorePaths(AbstractTreeBuilder treeBuilder, List<Object> pathsToExpand, List<Object> selectionPaths, boolean elementsOnly) -->Line_8 $$ tree.addSelectionPaths(selectionPaths.toArray(new TreePath[selectionPaths.size()]))[ FD ]
Line_2 $$ public static void restorePaths(AbstractTreeBuilder treeBuilder, List<Object> pathsToExpand, List<Object> selectionPaths, boolean elementsOnly) -->Line_3 $$ JTree tree = treeBuilder.getTree()[ FD ]
Line_3 $$ JTree tree = treeBuilder.getTree()-->Line_6 $$ tree.expandPath((TreePath) path)[ FD ]
Line_2 $$ public static void restorePaths(AbstractTreeBuilder treeBuilder, List<Object> pathsToExpand, List<Object> selectionPaths, boolean elementsOnly) -->Line_12 $$ DefaultMutableTreeNode node = treeBuilder.getNodeForElement(element)[ FD ]
Line_3 $$ JTree tree = treeBuilder.getTree()-->Line_8 $$ tree.addSelectionPaths(selectionPaths.toArray(new TreePath[selectionPaths.size()]))[ FD ]
Line_2 $$ public static void restorePaths(AbstractTreeBuilder treeBuilder, List<Object> pathsToExpand, List<Object> selectionPaths, boolean elementsOnly) -->Line_11 $$ treeBuilder.buildNodeForElement(element)[ FD ]
Line_2 $$ public static void restorePaths(AbstractTreeBuilder treeBuilder, List<Object> pathsToExpand, List<Object> selectionPaths, boolean elementsOnly) -->Line_3 $$ JTree tree = treeBuilder.getTree()[ CD ]
Line_3 $$ JTree tree = treeBuilder.getTree()-->Line_14 $$ tree.expandPath(new TreePath(node.getPath()))[ FD ]
Line_3 $$ JTree tree = treeBuilder.getTree()-->Line_21 $$ tree.addSelectionPath(new TreePath(treeModel.getPathToRoot(node)))[ FD ]
Line_2 $$ public static void restorePaths(AbstractTreeBuilder treeBuilder, List<Object> pathsToExpand, List<Object> selectionPaths, boolean elementsOnly) -->Line_4 $$ if (!elementsOnly) [ CD ]
Line_12 $$ DefaultMutableTreeNode node = treeBuilder.getNodeForElement(element)-->Line_13 $$ if (node != null) [ FD ]
Line_10 $$ for (Object element : pathsToExpand) -->Line_12 $$ DefaultMutableTreeNode node = treeBuilder.getNodeForElement(element)[ FD ]
Line_13 $$ if (node != null) -->Line_14 $$ tree.expandPath(new TreePath(node.getPath()))[ CD ]
Line_19 $$ if (node != null) -->Line_20 $$ DefaultTreeModel treeModel = (DefaultTreeModel) tree.getModel()[ CD ]
