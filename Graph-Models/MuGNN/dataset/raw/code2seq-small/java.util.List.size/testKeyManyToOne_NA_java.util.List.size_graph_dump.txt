Line_29 $$ s = openSession()-->Line_40 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_45 $$ s.delete(d.getId().getMaster())[ CD ]
Line_40 $$ s = openSession()-->Line_62 $$ s.createQuery("from Outer o where o.id.master.id.one = ''").list()[ FD ]
Line_35 $$ s = openSession()-->Line_44 $$ s.delete(d)[ FD ]
Line_3 $$ Session s = openSession()-->Line_69 $$ s.delete(d.getId().getMaster().getId().getSup())[ FD ]
Line_35 $$ s = openSession()-->Line_56 $$ List l = s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_40 $$ s = openSession()-->Line_56 $$ List l = s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_42 $$ d = (Outer) s.load(Outer.class, did)-->Line_67 $$ s.delete(d)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_24 $$ s.save(sup)[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_20 $$ did.setMaster(m)[ CD ]
Line_40 $$ s = openSession()-->Line_67 $$ s.delete(d)[ FD ]
Line_11 $$ Middle m = new Middle()-->Line_25 $$ s.save(m)[ FD ]
Line_3 $$ Session s = openSession()-->Line_63 $$ s.createQuery("from Inner inn where inn.id.bkey is not null and inn.backOut.id.master.id.sup.id.akey > 'a'").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_7 $$ sup.setDudu("dudu")[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_27 $$ s.getTransaction().commit()[ CD ]
Line_40 $$ s = openSession()-->Line_42 $$ d = (Outer) s.load(Outer.class, did)[ FD ]
Line_29 $$ s = openSession()-->Line_58 $$ l = s.createQuery("select o.id.master.id.sup.id.akey from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_30 $$ s.beginTransaction()[ CD ]
Line_35 $$ s = openSession()-->Line_39 $$ s.close()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_59 $$ assertTrue(l.size() == 1)[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_50 $$ s = openSession()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_62 $$ s.createQuery("from Outer o where o.id.master.id.one = ''").list()[ CD ]
Line_29 $$ s = openSession()-->Line_70 $$ s.getTransaction().commit()[ FD ]
Line_29 $$ s = openSession()-->Line_48 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_33 $$ s.getTransaction().commit()[ CD ]
Line_29 $$ s = openSession()-->Line_42 $$ d = (Outer) s.load(Outer.class, did)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_71 $$ s.close()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_53 $$ s.createQuery("from Outer o where o.id.master.id.sup.dudu is not null").list()[ CD ]
Line_29 $$ s = openSession()-->Line_66 $$ s.createQuery("from Outer as o left join o.id.master m left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_47 $$ s.save(d)[ CD ]
Line_40 $$ s = openSession()-->Line_54 $$ s.createQuery("from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_42 $$ d = (Outer) s.load(Outer.class, did)-->Line_68 $$ s.delete(d.getId().getMaster())[ FD ]
Line_3 $$ Session s = openSession()-->Line_39 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_58 $$ l = s.createQuery("select o.id.master.id.sup.id.akey from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_61 $$ s.createQuery("from Outer o where o.id.master.bla = ''").list()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_12 $$ MiddleKey mid = new MiddleKey()[ CD ]
Line_3 $$ Session s = openSession()-->Line_56 $$ List l = s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_29 $$ s = openSession()-->Line_45 $$ s.delete(d.getId().getMaster())[ FD ]
Line_50 $$ s = openSession()-->Line_58 $$ l = s.createQuery("select o.id.master.id.sup.id.akey from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_62 $$ s.createQuery("from Outer o where o.id.master.id.one = ''").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_6 $$ InnerKey sid = new InnerKey()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_16 $$ m.setId(mid)[ CD ]
Line_50 $$ s = openSession()-->Line_55 $$ s.createQuery("from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_42 $$ d = (Outer) s.load(Outer.class, did)-->Line_69 $$ s.delete(d.getId().getMaster().getId().getSup())[ FD ]
Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)-->Line_69 $$ s.delete(d.getId().getMaster().getId().getSup())[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_42 $$ d = (Outer) s.load(Outer.class, did)[ CD ]
Line_18 $$ Outer d = new Outer()-->Line_23 $$ d.setBubu("bubu")[ FD ]
Line_40 $$ s = openSession()-->Line_45 $$ s.delete(d.getId().getMaster())[ FD ]
Line_50 $$ s = openSession()-->Line_53 $$ s.createQuery("from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_56 $$ List l = s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list()-->Line_58 $$ l = s.createQuery("select o.id.master.id.sup.id.akey from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_40 $$ s = openSession()-->Line_48 $$ s.getTransaction().commit()[ FD ]
Line_29 $$ s = openSession()-->Line_53 $$ s.createQuery("from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_40 $$ s = openSession()-->Line_64 $$ s.createQuery("from Outer as o left join o.id.master m left join m.id.sup where o.bubu is not null").list()[ FD ]
Line_40 $$ s = openSession()-->Line_66 $$ s.createQuery("from Outer as o left join o.id.master m left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
Line_29 $$ s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_50 $$ s = openSession()-->Line_62 $$ s.createQuery("from Outer o where o.id.master.id.one = ''").list()[ FD ]
Line_35 $$ s = openSession()-->Line_67 $$ s.delete(d)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_36 $$ s.beginTransaction()[ CD ]
Line_58 $$ l = s.createQuery("select o.id.master.id.sup.id.akey from Outer o where o.id.master.id.sup.id.akey is not null").list()-->Line_59 $$ assertTrue(l.size() == 1)[ FD ]
Line_35 $$ s = openSession()-->Line_63 $$ s.createQuery("from Inner inn where inn.id.bkey is not null and inn.backOut.id.master.id.sup.id.akey > 'a'").list()[ FD ]
Line_35 $$ s = openSession()-->Line_60 $$ s.createQuery("select i.backOut.id.master.id.sup.id.akey from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_5 $$ Inner sup = new Inner()-->Line_15 $$ mid.setSup(sup)[ FD ]
Line_3 $$ Session s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_29 $$ s = openSession()-->Line_39 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_68 $$ s.delete(d.getId().getMaster())[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_55 $$ s.createQuery("from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ CD ]
Line_29 $$ s = openSession()-->Line_51 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_50 $$ s = openSession()[ FD ]
Line_40 $$ s = openSession()-->Line_63 $$ s.createQuery("from Inner inn where inn.id.bkey is not null and inn.backOut.id.master.id.sup.id.akey > 'a'").list()[ FD ]
Line_11 $$ Middle m = new Middle()-->Line_17 $$ m.setBla("bla")[ FD ]
Line_35 $$ s = openSession()-->Line_46 $$ s.save(d.getId().getMaster())[ FD ]
Line_18 $$ Outer d = new Outer()-->Line_45 $$ s.delete(d.getId().getMaster())[ FD ]
Line_40 $$ s = openSession()-->Line_68 $$ s.delete(d.getId().getMaster())[ FD ]
Line_3 $$ Session s = openSession()-->Line_61 $$ s.createQuery("from Outer o where o.id.master.bla = ''").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_21 $$ did.setDetailId("detail")[ CD ]
Line_29 $$ s = openSession()-->Line_61 $$ s.createQuery("from Outer o where o.id.master.bla = ''").list()[ FD ]
Line_50 $$ s = openSession()-->Line_56 $$ List l = s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_41 $$ s.beginTransaction()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_69 $$ s.delete(d.getId().getMaster().getId().getSup())[ CD ]
Line_35 $$ s = openSession()-->Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)[ FD ]
Line_29 $$ s = openSession()-->Line_55 $$ s.createQuery("from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_35 $$ s = openSession()-->Line_41 $$ s.beginTransaction()[ FD ]
Line_35 $$ s = openSession()-->Line_50 $$ s = openSession()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_68 $$ s.delete(d.getId().getMaster())[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_25 $$ s.save(m)[ CD ]
Line_29 $$ s = openSession()-->Line_47 $$ s.save(d)[ FD ]
Line_50 $$ s = openSession()-->Line_63 $$ s.createQuery("from Inner inn where inn.id.bkey is not null and inn.backOut.id.master.id.sup.id.akey > 'a'").list()[ FD ]
Line_35 $$ s = openSession()-->Line_66 $$ s.createQuery("from Outer as o left join o.id.master m left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_67 $$ s.delete(d)[ CD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_54 $$ s.createQuery("from Outer o where o.id.master.id.sup.id.akey is not null").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ s.getTransaction().commit()[ FD ]
Line_19 $$ OuterKey did = new OuterKey()-->Line_21 $$ did.setDetailId("detail")[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_43 $$ assertTrue(d.getId().getMaster().getId().getSup().getDudu().equals("dudu"))[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_13 $$ mid.setOne("one")[ CD ]
Line_40 $$ s = openSession()-->Line_61 $$ s.createQuery("from Outer o where o.id.master.bla = ''").list()[ FD ]
Line_29 $$ s = openSession()-->Line_46 $$ s.save(d.getId().getMaster())[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_26 $$ s.save(d)[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_18 $$ Outer d = new Outer()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_48 $$ s.getTransaction().commit()[ CD ]
Line_35 $$ s = openSession()-->Line_45 $$ s.delete(d.getId().getMaster())[ FD ]
Line_35 $$ s = openSession()-->Line_51 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s.beginTransaction()[ FD ]
Line_50 $$ s = openSession()-->Line_66 $$ s.createQuery("from Outer as o left join o.id.master m left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
Line_35 $$ s = openSession()-->Line_54 $$ s.createQuery("from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_18 $$ Outer d = new Outer()-->Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)[ FD ]
Line_42 $$ d = (Outer) s.load(Outer.class, did)-->Line_47 $$ s.save(d)[ FD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ s.save(d.getId().getMaster())[ FD ]
Line_35 $$ s = openSession()-->Line_48 $$ s.getTransaction().commit()[ FD ]
Line_29 $$ s = openSession()-->Line_33 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.save(sup)[ FD ]
Line_19 $$ OuterKey did = new OuterKey()-->Line_22 $$ d.setId(did)[ FD ]
Line_40 $$ s = openSession()-->Line_41 $$ s.beginTransaction()[ FD ]
Line_42 $$ d = (Outer) s.load(Outer.class, did)-->Line_44 $$ s.delete(d)[ FD ]
Line_35 $$ s = openSession()-->Line_55 $$ s.createQuery("from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_63 $$ s.createQuery("from Inner inn where inn.id.bkey is not null and inn.backOut.id.master.id.sup.id.akey > 'a'").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_64 $$ s.createQuery("from Outer as o left join o.id.master m left join m.id.sup where o.bubu is not null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_70 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_40 $$ s = openSession()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_14 $$ mid.setTwo("two")[ CD ]
Line_35 $$ s = openSession()-->Line_53 $$ s.createQuery("from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_55 $$ s.createQuery("from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ s = openSession()[ FD ]
Line_35 $$ s = openSession()-->Line_37 $$ assertTrue(s.createQuery("from Inner _inner join _inner.middles middle").list().size() == 1)[ FD ]
Line_50 $$ s = openSession()-->Line_67 $$ s.delete(d)[ FD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ s.beginTransaction()[ FD ]
Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)-->Line_68 $$ s.delete(d.getId().getMaster())[ FD ]
Line_29 $$ s = openSession()-->Line_71 $$ s.close()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_15 $$ mid.setSup(sup)[ CD ]
Line_40 $$ s = openSession()-->Line_70 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_60 $$ s.createQuery("select i.backOut.id.master.id.sup.id.akey from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ CD ]
Line_35 $$ s = openSession()-->Line_61 $$ s.createQuery("from Outer o where o.id.master.bla = ''").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_32 $$ assertTrue(in.getMiddles().size() == 1)[ CD ]
Line_18 $$ Outer d = new Outer()-->Line_67 $$ s.delete(d)[ FD ]
Line_35 $$ s = openSession()-->Line_71 $$ s.close()[ FD ]
Line_11 $$ Middle m = new Middle()-->Line_20 $$ did.setMaster(m)[ FD ]
Line_3 $$ Session s = openSession()-->Line_65 $$ s.createQuery("from Outer as o left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_38 $$ s.getTransaction().commit()[ CD ]
Line_29 $$ s = openSession()-->Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)[ FD ]
Line_56 $$ List l = s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list()-->Line_57 $$ assertTrue(l.size() == 1)[ FD ]
Line_35 $$ s = openSession()-->Line_58 $$ l = s.createQuery("select o.id.master.id.sup.id.akey from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_37 $$ assertTrue(s.createQuery("from Inner _inner join _inner.middles middle").list().size() == 1)[ CD ]
Line_50 $$ s = openSession()-->Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)[ FD ]
Line_12 $$ MiddleKey mid = new MiddleKey()-->Line_15 $$ mid.setSup(sup)[ FD ]
Line_50 $$ s = openSession()-->Line_60 $$ s.createQuery("select i.backOut.id.master.id.sup.id.akey from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_70 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_44 $$ s.delete(d)[ CD ]
Line_35 $$ s = openSession()-->Line_42 $$ d = (Outer) s.load(Outer.class, did)[ FD ]
Line_42 $$ d = (Outer) s.load(Outer.class, did)-->Line_46 $$ s.save(d.getId().getMaster())[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_49 $$ s.close()[ CD ]
Line_40 $$ s = openSession()-->Line_51 $$ s.beginTransaction()[ FD ]
Line_29 $$ s = openSession()-->Line_69 $$ s.delete(d.getId().getMaster().getId().getSup())[ FD ]
Line_29 $$ s = openSession()-->Line_65 $$ s.createQuery("from Outer as o left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
Line_29 $$ s = openSession()-->Line_56 $$ List l = s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_8 $$ sid.setAkey("a")[ CD ]
Line_3 $$ Session s = openSession()-->Line_33 $$ s.getTransaction().commit()[ FD ]
Line_29 $$ s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_19 $$ OuterKey did = new OuterKey()-->Line_42 $$ d = (Outer) s.load(Outer.class, did)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_23 $$ d.setBubu("bubu")[ CD ]
Line_50 $$ s = openSession()-->Line_64 $$ s.createQuery("from Outer as o left join o.id.master m left join m.id.sup where o.bubu is not null").list()[ FD ]
Line_6 $$ InnerKey sid = new InnerKey()-->Line_10 $$ sup.setId(sid)[ FD ]
Line_29 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_66 $$ s.createQuery("from Outer as o left join o.id.master m left join o.id.master.id.sup s where o.bubu is not null").list()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_5 $$ Inner sup = new Inner()[ CD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ Inner in = (Inner) s.createQuery("from Inner").list().get(0)[ FD ]
Line_50 $$ s = openSession()-->Line_51 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_22 $$ d.setId(did)[ CD ]
Line_40 $$ s = openSession()-->Line_55 $$ s.createQuery("from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_35 $$ s = openSession()-->Line_62 $$ s.createQuery("from Outer o where o.id.master.id.one = ''").list()[ FD ]
Line_29 $$ s = openSession()-->Line_67 $$ s.delete(d)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_28 $$ s.close()[ CD ]
Line_6 $$ InnerKey sid = new InnerKey()-->Line_9 $$ sid.setBkey("b")[ FD ]
Line_35 $$ s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_18 $$ Outer d = new Outer()-->Line_44 $$ s.delete(d)[ FD ]
Line_12 $$ MiddleKey mid = new MiddleKey()-->Line_14 $$ mid.setTwo("two")[ FD ]
Line_3 $$ Session s = openSession()-->Line_53 $$ s.createQuery("from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_18 $$ Outer d = new Outer()-->Line_68 $$ s.delete(d.getId().getMaster())[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_29 $$ s = openSession()[ CD ]
Line_29 $$ s = openSession()-->Line_30 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ s.delete(d)[ FD ]
Line_35 $$ s = openSession()-->Line_69 $$ s.delete(d.getId().getMaster().getId().getSup())[ FD ]
Line_35 $$ s = openSession()-->Line_70 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_34 $$ s.close()[ CD ]
Line_40 $$ s = openSession()-->Line_60 $$ s.createQuery("select i.backOut.id.master.id.sup.id.akey from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_71 $$ s.close()[ FD ]
Line_29 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_40 $$ s = openSession()-->Line_58 $$ l = s.createQuery("select o.id.master.id.sup.id.akey from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ s.save(d)[ FD ]
Line_35 $$ s = openSession()-->Line_47 $$ s.save(d)[ FD ]
Line_40 $$ s = openSession()-->Line_69 $$ s.delete(d.getId().getMaster().getId().getSup())[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_46 $$ s.save(d.getId().getMaster())[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ d = (Outer) s.load(Outer.class, did)[ FD ]
Line_11 $$ Middle m = new Middle()-->Line_16 $$ m.setId(mid)[ FD ]
Line_42 $$ d = (Outer) s.load(Outer.class, did)-->Line_45 $$ s.delete(d.getId().getMaster())[ FD ]
Line_18 $$ Outer d = new Outer()-->Line_43 $$ assertTrue(d.getId().getMaster().getId().getSup().getDudu().equals("dudu"))[ FD ]
Line_35 $$ s = openSession()-->Line_68 $$ s.delete(d.getId().getMaster())[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ s.save(d)[ FD ]
Line_50 $$ s = openSession()-->Line_61 $$ s.createQuery("from Outer o where o.id.master.bla = ''").list()[ FD ]
Line_12 $$ MiddleKey mid = new MiddleKey()-->Line_16 $$ m.setId(mid)[ FD ]
Line_29 $$ s = openSession()-->Line_68 $$ s.delete(d.getId().getMaster())[ FD ]
Line_29 $$ s = openSession()-->Line_31 $$ Inner in = (Inner) s.createQuery("from Inner").list().get(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_66 $$ s.createQuery("from Outer as o left join o.id.master m left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ assertTrue(s.createQuery("from Inner _inner join _inner.middles middle").list().size() == 1)[ FD ]
Line_50 $$ s = openSession()-->Line_69 $$ s.delete(d.getId().getMaster().getId().getSup())[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.save(m)[ FD ]
Line_18 $$ Outer d = new Outer()-->Line_26 $$ s.save(d)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_31 $$ Inner in = (Inner) s.createQuery("from Inner").list().get(0)[ CD ]
Line_18 $$ Outer d = new Outer()-->Line_42 $$ d = (Outer) s.load(Outer.class, did)[ FD ]
Line_35 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)[ CD ]
Line_29 $$ s = openSession()-->Line_63 $$ s.createQuery("from Inner inn where inn.id.bkey is not null and inn.backOut.id.master.id.sup.id.akey > 'a'").list()[ FD ]
Line_50 $$ s = openSession()-->Line_71 $$ s.close()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_57 $$ assertTrue(l.size() == 1)[ CD ]
Line_40 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_67 $$ s.delete(d)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_56 $$ List l = s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list()[ CD ]
Line_18 $$ Outer d = new Outer()-->Line_22 $$ d.setId(did)[ FD ]
Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)-->Line_67 $$ s.delete(d)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_64 $$ s.createQuery("from Outer as o left join o.id.master m left join m.id.sup where o.bubu is not null").list()[ CD ]
Line_18 $$ Outer d = new Outer()-->Line_47 $$ s.save(d)[ FD ]
Line_29 $$ s = openSession()-->Line_60 $$ s.createQuery("select i.backOut.id.master.id.sup.id.akey from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_40 $$ s = openSession()-->Line_47 $$ s.save(d)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_11 $$ Middle m = new Middle()[ CD ]
Line_12 $$ MiddleKey mid = new MiddleKey()-->Line_13 $$ mid.setOne("one")[ FD ]
Line_40 $$ s = openSession()-->Line_53 $$ s.createQuery("from Outer o where o.id.master.id.sup.dudu is not null").list()[ FD ]
Line_29 $$ s = openSession()-->Line_62 $$ s.createQuery("from Outer o where o.id.master.id.one = ''").list()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_4 $$ s.beginTransaction()[ CD ]
Line_50 $$ s = openSession()-->Line_68 $$ s.delete(d.getId().getMaster())[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ s.close()[ FD ]
Line_35 $$ s = openSession()-->Line_40 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_45 $$ s.delete(d.getId().getMaster())[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_10 $$ sup.setId(sid)[ CD ]
Line_5 $$ Inner sup = new Inner()-->Line_24 $$ s.save(sup)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_58 $$ l = s.createQuery("select o.id.master.id.sup.id.akey from Outer o where o.id.master.id.sup.id.akey is not null").list()[ CD ]
Line_40 $$ s = openSession()-->Line_71 $$ s.close()[ FD ]
Line_35 $$ s = openSession()-->Line_38 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_39 $$ s.close()[ CD ]
Line_18 $$ Outer d = new Outer()-->Line_46 $$ s.save(d.getId().getMaster())[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_51 $$ s.beginTransaction()[ CD ]
Line_35 $$ s = openSession()-->Line_64 $$ s.createQuery("from Outer as o left join o.id.master m left join m.id.sup where o.bubu is not null").list()[ FD ]
Line_42 $$ d = (Outer) s.load(Outer.class, did)-->Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)[ FD ]
Line_50 $$ s = openSession()-->Line_54 $$ s.createQuery("from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_19 $$ OuterKey did = new OuterKey()-->Line_20 $$ did.setMaster(m)[ FD ]
Line_40 $$ s = openSession()-->Line_50 $$ s = openSession()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_35 $$ s = openSession()[ CD ]
Line_40 $$ s = openSession()-->Line_46 $$ s.save(d.getId().getMaster())[ FD ]
Line_3 $$ Session s = openSession()-->Line_54 $$ s.createQuery("from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_5 $$ Inner sup = new Inner()-->Line_7 $$ sup.setDudu("dudu")[ FD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ s = openSession()[ FD ]
Line_29 $$ s = openSession()-->Line_54 $$ s.createQuery("from Outer o where o.id.master.id.sup.id.akey is not null").list()[ FD ]
Line_29 $$ s = openSession()-->Line_38 $$ s.getTransaction().commit()[ FD ]
Line_40 $$ s = openSession()-->Line_44 $$ s.delete(d)[ FD ]
Line_29 $$ s = openSession()-->Line_64 $$ s.createQuery("from Outer as o left join o.id.master m left join m.id.sup where o.bubu is not null").list()[ FD ]
Line_40 $$ s = openSession()-->Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_65 $$ s.createQuery("from Outer as o left join o.id.master.id.sup s where o.bubu is not null").list()[ CD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_19 $$ OuterKey did = new OuterKey()[ CD ]
Line_35 $$ s = openSession()-->Line_65 $$ s.createQuery("from Outer as o left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
Line_29 $$ s = openSession()-->Line_37 $$ assertTrue(s.createQuery("from Inner _inner join _inner.middles middle").list().size() == 1)[ FD ]
Line_56 $$ List l = s.createQuery("select o.id.master.id.sup.dudu from Outer o where o.id.master.id.sup.dudu is not null").list()-->Line_59 $$ assertTrue(l.size() == 1)[ FD ]
Line_50 $$ s = openSession()-->Line_70 $$ s.getTransaction().commit()[ FD ]
Line_29 $$ s = openSession()-->Line_41 $$ s.beginTransaction()[ FD ]
Line_29 $$ s = openSession()-->Line_50 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ d = (Outer) s.createQuery("from Outer o where o.id.detailId = ?").setParameter(0, d.getId().getDetailId(), StandardBasicTypes.STRING).list().get(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_9 $$ sid.setBkey("b")[ CD ]
Line_31 $$ Inner in = (Inner) s.createQuery("from Inner").list().get(0)-->Line_32 $$ assertTrue(in.getMiddles().size() == 1)[ FD ]
Line_42 $$ d = (Outer) s.load(Outer.class, did)-->Line_43 $$ assertTrue(d.getId().getMaster().getId().getSup().getDudu().equals("dudu"))[ FD ]
Line_29 $$ s = openSession()-->Line_44 $$ s.delete(d)[ FD ]
Line_3 $$ Session s = openSession()-->Line_60 $$ s.createQuery("select i.backOut.id.master.id.sup.id.akey from Inner i where i.backOut.id.master.id.sup.id.akey = i.id.bkey").list()[ FD ]
Line_5 $$ Inner sup = new Inner()-->Line_10 $$ sup.setId(sid)[ FD ]
Line_2 $$ public void testKeyManyToOne() throws Exception -->Line_17 $$ m.setBla("bla")[ CD ]
Line_18 $$ Outer d = new Outer()-->Line_69 $$ s.delete(d.getId().getMaster().getId().getSup())[ FD ]
Line_50 $$ s = openSession()-->Line_65 $$ s.createQuery("from Outer as o left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
Line_6 $$ InnerKey sid = new InnerKey()-->Line_8 $$ sid.setAkey("a")[ FD ]
Line_40 $$ s = openSession()-->Line_65 $$ s.createQuery("from Outer as o left join o.id.master.id.sup s where o.bubu is not null").list()[ FD ]
