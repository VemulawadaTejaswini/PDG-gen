Line_106 $$ paramNames = pnd.getParameterNames(candidate)-->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_18 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_203 $$ bw.setWrappedInstance(beanInstance)[ FD ]
Line_96 $$ Method candidate = candidates[i]-->Line_154 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_46 $$ Method factoryMethodToUse = null-->Line_175 $$ if (void.class == factoryMethodToUse.getReturnType()) [ FD ]
Line_23 $$ String factoryBeanName = mbd.getFactoryBeanName()-->Line_28 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)[ FD ]
Line_158 $$ if (factoryMethodToUse == null) -->Line_160 $$ if (explicitArgs != null) [ CD ]
Line_80 $$ ConstructorArgumentValues resolvedValues = null-->Line_166 $$ valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())[ FD ]
Line_113 $$ if (i == candidates.length - 1 && argsHolderToUse == null) -->Line_114 $$ if (causes != null) [ CD ]
Line_186 $$ if (System.getSecurityManager() != null) -->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ CD ]
Line_83 $$ Set<Method> ambiguousFactoryMethods = null-->Line_151 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()[ FD ]
Line_97 $$ Class<?>[] paramTypes = candidate.getParameterTypes()-->Line_136 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_83 $$ Set<Method> ambiguousFactoryMethods = null-->Line_143 $$ ambiguousFactoryMethods = null[ FD ]
Line_143 $$ ambiguousFactoryMethods = null-->Line_152 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_50 $$ argsToUse = explicitArgs-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_49 $$ if (explicitArgs != null) -->Line_50 $$ argsToUse = explicitArgs[ CD ]
Line_151 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()-->Line_154 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_115 $$ for (Exception cause : causes) -->Line_116 $$ this.beanFactory.onSuppressedException(cause)[ FD ]
Line_50 $$ argsToUse = explicitArgs-->Line_58 $$ if (argsToUse == null) [ FD ]
Line_23 $$ String factoryBeanName = mbd.getFactoryBeanName()-->Line_24 $$ if (factoryBeanName != null) [ FD ]
Line_98 $$ if (paramTypes.length >= minNrOfArgs) -->Line_99 $$ ArgumentsHolder argsHolder[ CD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_78 $$ Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])[ CD ]
Line_180 $$ if (explicitArgs == null && argsHolderToUse != null) -->Line_181 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ CD ]
Line_48 $$ Object[] argsToUse = null-->Line_50 $$ argsToUse = explicitArgs[ FD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_95 $$ for (int i = 0; i < candidates.length; i++) [ CD ]
Line_73 $$ for (Method candidate : rawCandidates) -->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_99 $$ ArgumentsHolder argsHolder-->Line_140 $$ argsHolderToUse = argsHolder[ FD ]
Line_143 $$ ambiguousFactoryMethods = null-->Line_151 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()[ FD ]
Line_54 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_158 $$ if (factoryMethodToUse == null) [ FD ]
Line_159 $$ List<String> argTypes = new ArrayList<String>(minNrOfArgs)-->Line_162 $$ argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")[ FD ]
Line_54 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_175 $$ if (void.class == factoryMethodToUse.getReturnType()) [ FD ]
Line_48 $$ Object[] argsToUse = null-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_91 $$ resolvedValues = new ConstructorArgumentValues()-->Line_166 $$ valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())[ FD ]
Line_28 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_160 $$ if (explicitArgs != null) -->Line_167 $$ valueHolders.addAll(resolvedValues.getGenericArgumentValues())[ CD ]
Line_20 $$ Object factoryBean-->Line_42 $$ factoryBean = null[ FD ]
Line_21 $$ Class<?> factoryClass-->Line_71 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ FD ]
Line_143 $$ ambiguousFactoryMethods = null-->Line_177 $$ if (ambiguousFactoryMethods != null) [ FD ]
Line_94 $$ List<Exception> causes = null-->Line_123 $$ causes = new LinkedList<Exception>()[ FD ]
Line_97 $$ Class<?>[] paramTypes = candidate.getParameterTypes()-->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_50 $$ argsToUse = explicitArgs-->Line_141 $$ argsToUse = argsHolder.arguments[ FD ]
Line_98 $$ if (paramTypes.length >= minNrOfArgs) -->Line_100 $$ if (resolvedValues != null) [ CD ]
Line_159 $$ List<String> argTypes = new ArrayList<String>(minNrOfArgs)-->Line_173 $$ String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)[ FD ]
Line_186 $$ if (System.getSecurityManager() != null) -->Line_189 $$ final Object[] args = argsToUse[ CD ]
Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)-->Line_140 $$ argsHolderToUse = argsHolder[ FD ]
Line_83 $$ Set<Method> ambiguousFactoryMethods = null-->Line_150 $$ if (ambiguousFactoryMethods == null) [ FD ]
Line_49 $$ if (explicitArgs != null) -->Line_63 $$ if (argsToResolve != null) [ CD ]
Line_24 $$ if (factoryBeanName != null) -->Line_43 $$ factoryClass = mbd.getBeanClass()[ CD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_80 $$ ConstructorArgumentValues resolvedValues = null[ CD ]
Line_73 $$ for (Method candidate : rawCandidates) -->Line_106 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_24 $$ if (factoryBeanName != null) -->Line_35 $$ factoryClass = factoryBean.getClass()[ CD ]
Line_35 $$ factoryClass = factoryBean.getClass()-->Line_43 $$ factoryClass = mbd.getBeanClass()[ FD ]
Line_141 $$ argsToUse = argsHolder.arguments-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_81 $$ boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)-->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_18 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_19 $$ this.beanFactory.initBeanWrapper(bw)[ FD ]
Line_91 $$ resolvedValues = new ConstructorArgumentValues()-->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_94 $$ List<Exception> causes = null-->Line_125 $$ causes.add(ex)[ FD ]
Line_72 $$ List<Method> candidateSet = new ArrayList<Method>()-->Line_75 $$ candidateSet.add(candidate)[ FD ]
Line_160 $$ if (explicitArgs != null) -->Line_166 $$ valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())[ CD ]
Line_105 $$ if (pnd != null) -->Line_106 $$ paramNames = pnd.getParameterNames(candidate)[ CD ]
Line_63 $$ if (argsToResolve != null) -->Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ CD ]
Line_99 $$ ArgumentsHolder argsHolder-->Line_134 $$ argsHolder = new ArgumentsHolder(explicitArgs)[ FD ]
Line_47 $$ ArgumentsHolder argsHolderToUse = null-->Line_140 $$ argsHolderToUse = argsHolder[ FD ]
Line_151 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()-->Line_177 $$ if (ambiguousFactoryMethods != null) [ FD ]
Line_99 $$ ArgumentsHolder argsHolder-->Line_136 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_96 $$ Method candidate = candidates[i]-->Line_97 $$ Class<?>[] paramTypes = candidate.getParameterTypes()[ FD ]
Line_35 $$ factoryClass = factoryBean.getClass()-->Line_71 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ FD ]
Line_18 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_140 $$ argsHolderToUse = argsHolder-->Line_181 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_55 $$ if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) -->Line_58 $$ if (argsToUse == null) [ CD ]
Line_22 $$ boolean isStatic-->Line_36 $$ isStatic = false[ FD ]
Line_20 $$ Object factoryBean-->Line_35 $$ factoryClass = factoryBean.getClass()[ FD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_84 $$ int minNrOfArgs[ CD ]
Line_47 $$ ArgumentsHolder argsHolderToUse = null-->Line_181 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)-->Line_136 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_91 $$ resolvedValues = new ConstructorArgumentValues()-->Line_92 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_110 $$ if (this.beanFactory.logger.isTraceEnabled()) -->Line_111 $$ this.beanFactory.logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)[ CD ]
Line_80 $$ ConstructorArgumentValues resolvedValues = null-->Line_167 $$ valueHolders.addAll(resolvedValues.getGenericArgumentValues())[ FD ]
Line_50 $$ argsToUse = explicitArgs-->Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_48 $$ Object[] argsToUse = null-->Line_58 $$ if (argsToUse == null) [ FD ]
Line_48 $$ Object[] argsToUse = null-->Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_94 $$ List<Exception> causes = null-->Line_122 $$ if (causes == null) [ FD ]
Line_21 $$ Class<?> factoryClass-->Line_43 $$ factoryClass = mbd.getBeanClass()[ FD ]
Line_151 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()-->Line_150 $$ if (ambiguousFactoryMethods == null) [ FD ]
Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)-->Line_134 $$ argsHolder = new ArgumentsHolder(explicitArgs)[ FD ]
Line_28 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)-->Line_42 $$ factoryBean = null[ FD ]
Line_150 $$ if (ambiguousFactoryMethods == null) -->Line_152 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ CD ]
Line_73 $$ for (Method candidate : rawCandidates) -->Line_154 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_59 $$ argsToResolve = mbd.preparedConstructorArguments-->Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_86 $$ minNrOfArgs = explicitArgs.length-->Line_92 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_100 $$ if (resolvedValues != null) -->Line_134 $$ argsHolder = new ArgumentsHolder(explicitArgs)[ CD ]
Line_24 $$ if (factoryBeanName != null) -->Line_36 $$ isStatic = false[ CD ]
Line_46 $$ Method factoryMethodToUse = null-->Line_54 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod[ FD ]
Line_72 $$ List<Method> candidateSet = new ArrayList<Method>()-->Line_78 $$ Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])[ FD ]
Line_54 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_152 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_52 $$ Object[] argsToResolve = null-->Line_59 $$ argsToResolve = mbd.preparedConstructorArguments[ FD ]
Line_104 $$ ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()-->Line_105 $$ if (pnd != null) [ FD ]
Line_185 $$ Object beanInstance-->Line_190 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() [ FD ]
Line_59 $$ argsToResolve = mbd.preparedConstructorArguments-->Line_63 $$ if (argsToResolve != null) [ FD ]
Line_85 $$ if (explicitArgs != null) -->Line_92 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ CD ]
Line_123 $$ causes = new LinkedList<Exception>()-->Line_122 $$ if (causes == null) [ FD ]
Line_123 $$ causes = new LinkedList<Exception>()-->Line_125 $$ causes.add(ex)[ FD ]
Line_96 $$ Method candidate = candidates[i]-->Line_106 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_54 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_85 $$ if (explicitArgs != null) -->Line_86 $$ minNrOfArgs = explicitArgs.length[ CD ]
Line_95 $$ for (int i = 0; i < candidates.length; i++) -->Line_96 $$ Method candidate = candidates[i][ CD ]
Line_80 $$ ConstructorArgumentValues resolvedValues = null-->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_134 $$ argsHolder = new ArgumentsHolder(explicitArgs)-->Line_140 $$ argsHolderToUse = argsHolder[ FD ]
Line_168 $$ for (ValueHolder value : valueHolders) -->Line_169 $$ String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) : (value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))[ FD ]
Line_24 $$ if (factoryBeanName != null) -->Line_42 $$ factoryBean = null[ CD ]
Line_99 $$ ArgumentsHolder argsHolder-->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_103 $$ String[] paramNames = null-->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_86 $$ minNrOfArgs = explicitArgs.length-->Line_98 $$ if (paramTypes.length >= minNrOfArgs) [ FD ]
Line_74 $$ if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) -->Line_75 $$ candidateSet.add(candidate)[ CD ]
Line_52 $$ Object[] argsToResolve = null-->Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_52 $$ Object[] argsToResolve = null-->Line_63 $$ if (argsToResolve != null) [ FD ]
Line_18 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_92 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_150 $$ if (ambiguousFactoryMethods == null) -->Line_151 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()[ CD ]
Line_83 $$ Set<Method> ambiguousFactoryMethods = null-->Line_152 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_185 $$ Object beanInstance-->Line_200 $$ if (beanInstance == null) [ FD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_158 $$ if (factoryMethodToUse == null) [ CD ]
Line_113 $$ if (i == candidates.length - 1 && argsHolderToUse == null) -->Line_125 $$ causes.add(ex)[ CD ]
Line_139 $$ factoryMethodToUse = candidate-->Line_158 $$ if (factoryMethodToUse == null) [ FD ]
Line_73 $$ for (Method candidate : rawCandidates) -->Line_97 $$ Class<?>[] paramTypes = candidate.getParameterTypes()[ FD ]
Line_46 $$ Method factoryMethodToUse = null-->Line_158 $$ if (factoryMethodToUse == null) [ FD ]
Line_190 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_194 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args)[ CD ]
Line_159 $$ List<String> argTypes = new ArrayList<String>(minNrOfArgs)-->Line_170 $$ argTypes.add(argType)[ FD ]
Line_46 $$ Method factoryMethodToUse = null-->Line_181 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_42 $$ factoryBean = null-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_91 $$ resolvedValues = new ConstructorArgumentValues()-->Line_100 $$ if (resolvedValues != null) [ FD ]
Line_139 $$ factoryMethodToUse = candidate-->Line_152 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_186 $$ if (System.getSecurityManager() != null) -->Line_190 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() [ CD ]
Line_91 $$ resolvedValues = new ConstructorArgumentValues()-->Line_165 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())[ FD ]
Line_36 $$ isStatic = false-->Line_44 $$ isStatic = true[ FD ]
Line_134 $$ argsHolder = new ArgumentsHolder(explicitArgs)-->Line_136 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_43 $$ factoryClass = mbd.getBeanClass()-->Line_71 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ FD ]
Line_160 $$ if (explicitArgs != null) -->Line_165 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())[ CD ]
Line_91 $$ resolvedValues = new ConstructorArgumentValues()-->Line_167 $$ valueHolders.addAll(resolvedValues.getGenericArgumentValues())[ FD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_79 $$ AutowireUtils.sortFactoryMethods(candidates)[ CD ]
Line_92 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)-->Line_98 $$ if (paramTypes.length >= minNrOfArgs) [ FD ]
Line_49 $$ if (explicitArgs != null) -->Line_52 $$ Object[] argsToResolve = null[ CD ]
Line_84 $$ int minNrOfArgs-->Line_98 $$ if (paramTypes.length >= minNrOfArgs) [ FD ]
Line_139 $$ factoryMethodToUse = candidate-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_46 $$ Method factoryMethodToUse = null-->Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_80 $$ ConstructorArgumentValues resolvedValues = null-->Line_92 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_24 $$ if (factoryBeanName != null) -->Line_32 $$ if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) [ CD ]
Line_189 $$ final Object[] args = argsToUse-->Line_194 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args)[ FD ]
Line_78 $$ Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])-->Line_79 $$ AutowireUtils.sortFactoryMethods(candidates)[ FD ]
Line_169 $$ String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) : (value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))-->Line_170 $$ argTypes.add(argType)[ FD ]
Line_18 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_84 $$ int minNrOfArgs-->Line_86 $$ minNrOfArgs = explicitArgs.length[ FD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_81 $$ boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)[ CD ]
Line_136 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))-->Line_142 $$ minTypeDiffWeight = typeDiffWeight[ FD ]
Line_46 $$ Method factoryMethodToUse = null-->Line_152 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_158 $$ if (factoryMethodToUse == null) -->Line_175 $$ if (void.class == factoryMethodToUse.getReturnType()) [ CD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_83 $$ Set<Method> ambiguousFactoryMethods = null[ CD ]
Line_139 $$ factoryMethodToUse = candidate-->Line_175 $$ if (void.class == factoryMethodToUse.getReturnType()) [ FD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_71 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ CD ]
Line_139 $$ factoryMethodToUse = candidate-->Line_181 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_73 $$ for (Method candidate : rawCandidates) -->Line_74 $$ if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) [ FD ]
Line_96 $$ Method candidate = candidates[i]-->Line_108 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_158 $$ if (factoryMethodToUse == null) -->Line_159 $$ List<String> argTypes = new ArrayList<String>(minNrOfArgs)[ CD ]
Line_54 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_181 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_175 $$ if (void.class == factoryMethodToUse.getReturnType()) -->Line_177 $$ if (ambiguousFactoryMethods != null) [ CD ]
Line_122 $$ if (causes == null) -->Line_123 $$ causes = new LinkedList<Exception>()[ CD ]
Line_82 $$ int minTypeDiffWeight = Integer.MAX_VALUE-->Line_142 $$ minTypeDiffWeight = typeDiffWeight[ FD ]
Line_24 $$ if (factoryBeanName != null) -->Line_29 $$ if (factoryBean == null) [ CD ]
Line_165 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())-->Line_167 $$ valueHolders.addAll(resolvedValues.getGenericArgumentValues())[ FD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_94 $$ List<Exception> causes = null[ CD ]
Line_186 $$ if (System.getSecurityManager() != null) -->Line_187 $$ final Object fb = factoryBean[ CD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_72 $$ List<Method> candidateSet = new ArrayList<Method>()[ CD ]
Line_54 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_58 $$ if (argsToUse == null) -->Line_59 $$ argsToResolve = mbd.preparedConstructorArguments[ CD ]
Line_165 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())-->Line_166 $$ valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())[ FD ]
Line_20 $$ Object factoryBean-->Line_28 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)[ FD ]
Line_103 $$ String[] paramNames = null-->Line_106 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_143 $$ ambiguousFactoryMethods = null-->Line_154 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_95 $$ for (int i = 0; i < candidates.length; i++) -->Line_97 $$ Class<?>[] paramTypes = candidate.getParameterTypes()[ CD ]
Line_84 $$ int minNrOfArgs-->Line_92 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_46 $$ Method factoryMethodToUse = null-->Line_139 $$ factoryMethodToUse = candidate[ FD ]
Line_46 $$ Method factoryMethodToUse = null-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_185 $$ Object beanInstance-->Line_203 $$ bw.setWrappedInstance(beanInstance)[ FD ]
Line_188 $$ final Method factoryMethod = factoryMethodToUse-->Line_194 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args)[ FD ]
Line_28 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)-->Line_35 $$ factoryClass = factoryBean.getClass()[ FD ]
Line_80 $$ ConstructorArgumentValues resolvedValues = null-->Line_100 $$ if (resolvedValues != null) [ FD ]
Line_94 $$ List<Exception> causes = null-->Line_114 $$ if (causes != null) [ FD ]
Line_151 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()-->Line_152 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_83 $$ Set<Method> ambiguousFactoryMethods = null-->Line_154 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_186 $$ if (System.getSecurityManager() != null) -->Line_188 $$ final Method factoryMethod = factoryMethodToUse[ CD ]
Line_98 $$ if (paramTypes.length >= minNrOfArgs) -->Line_136 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ CD ]
Line_28 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)-->Line_29 $$ if (factoryBean == null) [ FD ]
Line_73 $$ for (Method candidate : rawCandidates) -->Line_75 $$ candidateSet.add(candidate)[ FD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_82 $$ int minTypeDiffWeight = Integer.MAX_VALUE[ CD ]
Line_104 $$ ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()-->Line_106 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_73 $$ for (Method candidate : rawCandidates) -->Line_139 $$ factoryMethodToUse = candidate[ FD ]
Line_158 $$ if (factoryMethodToUse == null) -->Line_173 $$ String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)[ CD ]
Line_187 $$ final Object fb = factoryBean-->Line_194 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args)[ FD ]
Line_24 $$ if (factoryBeanName != null) -->Line_25 $$ if (factoryBeanName.equals(beanName)) [ CD ]
Line_22 $$ boolean isStatic-->Line_44 $$ isStatic = true[ FD ]
Line_190 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_203 $$ bw.setWrappedInstance(beanInstance)[ FD ]
Line_20 $$ Object factoryBean-->Line_29 $$ if (factoryBean == null) [ FD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_180 $$ if (explicitArgs == null && argsHolderToUse != null) [ CD ]
Line_161 $$ for (Object arg : explicitArgs) -->Line_162 $$ argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")[ FD ]
Line_95 $$ for (int i = 0; i < candidates.length; i++) -->Line_98 $$ if (paramTypes.length >= minNrOfArgs) [ CD ]
Line_123 $$ causes = new LinkedList<Exception>()-->Line_114 $$ if (causes != null) [ FD ]
Line_190 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_200 $$ if (beanInstance == null) [ FD ]
Line_24 $$ if (factoryBeanName != null) -->Line_28 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)[ CD ]
Line_80 $$ ConstructorArgumentValues resolvedValues = null-->Line_165 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())[ FD ]
Line_80 $$ ConstructorArgumentValues resolvedValues = null-->Line_91 $$ resolvedValues = new ConstructorArgumentValues()[ FD ]
Line_24 $$ if (factoryBeanName != null) -->Line_44 $$ isStatic = true[ CD ]
Line_23 $$ String factoryBeanName = mbd.getFactoryBeanName()-->Line_25 $$ if (factoryBeanName.equals(beanName)) [ FD ]
Line_113 $$ if (i == candidates.length - 1 && argsHolderToUse == null) -->Line_122 $$ if (causes == null) [ CD ]
Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)-->Line_141 $$ argsToUse = argsHolder.arguments[ FD ]
Line_48 $$ Object[] argsToUse = null-->Line_141 $$ argsToUse = argsHolder.arguments[ FD ]
Line_21 $$ Class<?> factoryClass-->Line_35 $$ factoryClass = factoryBean.getClass()[ FD ]
Line_85 $$ if (explicitArgs != null) -->Line_91 $$ resolvedValues = new ConstructorArgumentValues()[ CD ]
Line_67 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_85 $$ if (explicitArgs != null) [ CD ]
Line_96 $$ Method candidate = candidates[i]-->Line_139 $$ factoryMethodToUse = candidate[ FD ]
Line_20 $$ Object factoryBean-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_200 $$ if (beanInstance == null) -->Line_201 $$ return null[ CD ]
Line_143 $$ ambiguousFactoryMethods = null-->Line_150 $$ if (ambiguousFactoryMethods == null) [ FD ]
Line_83 $$ Set<Method> ambiguousFactoryMethods = null-->Line_177 $$ if (ambiguousFactoryMethods != null) [ FD ]
Line_64 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)-->Line_198 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_54 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_139 $$ factoryMethodToUse = candidate[ FD ]
