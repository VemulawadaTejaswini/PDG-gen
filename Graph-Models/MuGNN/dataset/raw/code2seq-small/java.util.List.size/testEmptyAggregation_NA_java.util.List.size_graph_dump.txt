Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_4 $$ varsMap.put("multiplier", 1)[ CD ]
Line_14 $$ ScriptedMetric scriptedMetric = bucket.getAggregations().get("scripted")-->Line_17 $$ assertThat(scriptedMetric.aggregation(), notNullValue())[ FD ]
Line_8 $$ SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(scriptedMetric("scripted").params(params).initScript(new Script("vars.multiplier = 3")).mapScript(new Script("_agg.add(vars.multiplier)")).combineScript(new Script("newaggregation = []; sum = 0;for (a in _agg) -->Line_9 $$ assertThat(searchResponse.getHits().getTotalHits(), equalTo(2l))[ FD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_3 $$ Map<String, Object> varsMap = new HashMap()[ CD ]
Line_14 $$ ScriptedMetric scriptedMetric = bucket.getAggregations().get("scripted")-->Line_16 $$ assertThat(scriptedMetric.getName(), equalTo("scripted"))[ FD ]
Line_14 $$ ScriptedMetric scriptedMetric = bucket.getAggregations().get("scripted")-->Line_15 $$ assertThat(scriptedMetric, notNullValue())[ FD ]
Line_3 $$ Map<String, Object> varsMap = new HashMap()-->Line_4 $$ varsMap.put("multiplier", 1)[ FD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_17 $$ assertThat(scriptedMetric.aggregation(), notNullValue())[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_6 $$ params.put("_agg", new ArrayList())[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_19 $$ List<Integer> aggregationResult = (List<Integer>) scriptedMetric.aggregation()[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_10 $$ Histogram histo = searchResponse.getAggregations().get("histo")[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_8 $$ SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(scriptedMetric("scripted").params(params).initScript(new Script("vars.multiplier = 3")).mapScript(new Script("_agg.add(vars.multiplier)")).combineScript(new Script("newaggregation = []; sum = 0;for (a in _agg) [ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_15 $$ assertThat(scriptedMetric, notNullValue())[ CD ]
Line_12 $$ Histogram.Bucket bucket = histo.getBuckets().get(1)-->Line_14 $$ ScriptedMetric scriptedMetric = bucket.getAggregations().get("scripted")[ FD ]
Line_3 $$ Map<String, Object> varsMap = new HashMap()-->Line_7 $$ params.put("vars", varsMap)[ FD ]
Line_5 $$ Map<String, Object> params = new HashMap()-->Line_7 $$ params.put("vars", varsMap)[ FD ]
Line_12 $$ Histogram.Bucket bucket = histo.getBuckets().get(1)-->Line_13 $$ assertThat(bucket, notNullValue())[ FD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_11 $$ assertThat(histo, notNullValue())[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_7 $$ params.put("vars", varsMap)[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_5 $$ Map<String, Object> params = new HashMap()[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_14 $$ ScriptedMetric scriptedMetric = bucket.getAggregations().get("scripted")[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_12 $$ Histogram.Bucket bucket = histo.getBuckets().get(1)[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_18 $$ assertThat(scriptedMetric.aggregation(), instanceOf(List.class))[ CD ]
Line_10 $$ Histogram histo = searchResponse.getAggregations().get("histo")-->Line_11 $$ assertThat(histo, notNullValue())[ FD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_16 $$ assertThat(scriptedMetric.getName(), equalTo("scripted"))[ CD ]
Line_10 $$ Histogram histo = searchResponse.getAggregations().get("histo")-->Line_12 $$ Histogram.Bucket bucket = histo.getBuckets().get(1)[ FD ]
Line_5 $$ Map<String, Object> params = new HashMap()-->Line_8 $$ SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(scriptedMetric("scripted").params(params).initScript(new Script("vars.multiplier = 3")).mapScript(new Script("_agg.add(vars.multiplier)")).combineScript(new Script("newaggregation = []; sum = 0;for (a in _agg) [ FD ]
Line_14 $$ ScriptedMetric scriptedMetric = bucket.getAggregations().get("scripted")-->Line_18 $$ assertThat(scriptedMetric.aggregation(), instanceOf(List.class))[ FD ]
Line_5 $$ Map<String, Object> params = new HashMap()-->Line_6 $$ params.put("_agg", new ArrayList())[ FD ]
Line_19 $$ List<Integer> aggregationResult = (List<Integer>) scriptedMetric.aggregation()-->Line_20 $$ assertThat(aggregationResult.size(), equalTo(1))[ FD ]
Line_19 $$ List<Integer> aggregationResult = (List<Integer>) scriptedMetric.aggregation()-->Line_21 $$ assertThat(aggregationResult.get(0), equalTo(0))[ FD ]
Line_8 $$ SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(scriptedMetric("scripted").params(params).initScript(new Script("vars.multiplier = 3")).mapScript(new Script("_agg.add(vars.multiplier)")).combineScript(new Script("newaggregation = []; sum = 0;for (a in _agg) -->Line_10 $$ Histogram histo = searchResponse.getAggregations().get("histo")[ FD ]
Line_14 $$ ScriptedMetric scriptedMetric = bucket.getAggregations().get("scripted")-->Line_19 $$ List<Integer> aggregationResult = (List<Integer>) scriptedMetric.aggregation()[ FD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_21 $$ assertThat(aggregationResult.get(0), equalTo(0))[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_13 $$ assertThat(bucket, notNullValue())[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_20 $$ assertThat(aggregationResult.size(), equalTo(1))[ CD ]
Line_2 $$ public void testEmptyAggregation() throws Exception -->Line_9 $$ assertThat(searchResponse.getHits().getTotalHits(), equalTo(2l))[ CD ]
