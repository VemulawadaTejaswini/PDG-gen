Line_5 $$ if (forward) -->Line_20 $$ for (int i = 0; i < myLeftLines.size(); i++) [ CD ]
Line_6 $$ Integer line = editorLines.getAfter()-->Line_18 $$ if (line <= myLeftLines.get(0))[ FD ]
Line_5 $$ if (forward) -->Line_26 $$ return myLeftLines.size() - 1[ CD ]
Line_22 $$ if (integer >= line) -->Line_23 $$ return i[ CD ]
Line_6 $$ Integer line = editorLines.getAfter()-->Line_22 $$ if (integer >= line) [ FD ]
Line_12 $$ if (integer <= line)-->Line_13 $$ return i[ CD ]
Line_10 $$ for (int i = myLeftLines.size() - 1; i >= 0; i--) -->Line_20 $$ for (int i = 0; i < myLeftLines.size(); i++) [ FD ]
Line_7 $$ if (line >= myLeftLines.get(myLeftLines.size() - 1)) -->Line_8 $$ return myLeftLines.size() - 1[ CD ]
Line_5 $$ if (forward) -->Line_18 $$ if (line <= myLeftLines.get(0))[ CD ]
Line_10 $$ for (int i = myLeftLines.size() - 1; i >= 0; i--) -->Line_21 $$ Integer integer = myLeftLines.get(i)[ FD ]
Line_11 $$ Integer integer = myLeftLines.get(i)-->Line_22 $$ if (integer >= line) [ FD ]
Line_5 $$ if (forward) -->Line_17 $$ Integer line = editorLines.getBefore()[ CD ]
Line_10 $$ for (int i = myLeftLines.size() - 1; i >= 0; i--) -->Line_12 $$ if (integer <= line)[ CD ]
Line_10 $$ for (int i = myLeftLines.size() - 1; i >= 0; i--) -->Line_11 $$ Integer integer = myLeftLines.get(i)[ CD ]
Line_20 $$ for (int i = 0; i < myLeftLines.size(); i++) -->Line_21 $$ Integer integer = myLeftLines.get(i)[ CD ]
Line_5 $$ if (forward) -->Line_10 $$ for (int i = myLeftLines.size() - 1; i >= 0; i--) [ CD ]
Line_20 $$ for (int i = 0; i < myLeftLines.size(); i++) -->Line_22 $$ if (integer >= line) [ CD ]
Line_6 $$ Integer line = editorLines.getAfter()-->Line_7 $$ if (line >= myLeftLines.get(myLeftLines.size() - 1)) [ FD ]
Line_4 $$ BeforeAfter<Integer> editorLines = getEditorLines()-->Line_17 $$ Integer line = editorLines.getBefore()[ FD ]
Line_2 $$ private int getCurrentLogicalLineIdx(final boolean forward) -->Line_5 $$ if (forward) [ CD ]
Line_4 $$ BeforeAfter<Integer> editorLines = getEditorLines()-->Line_6 $$ Integer line = editorLines.getAfter()[ FD ]
Line_10 $$ for (int i = myLeftLines.size() - 1; i >= 0; i--) -->Line_12 $$ if (integer <= line)[ FD ]
Line_18 $$ if (line <= myLeftLines.get(0))-->Line_19 $$ return 0[ CD ]
Line_5 $$ if (forward) -->Line_15 $$ return 0[ CD ]
Line_5 $$ if (forward) -->Line_6 $$ Integer line = editorLines.getAfter()[ CD ]
Line_2 $$ private int getCurrentLogicalLineIdx(final boolean forward) -->Line_4 $$ BeforeAfter<Integer> editorLines = getEditorLines()[ CD ]
Line_5 $$ if (forward) -->Line_7 $$ if (line >= myLeftLines.get(myLeftLines.size() - 1)) [ CD ]
Line_6 $$ Integer line = editorLines.getAfter()-->Line_12 $$ if (integer <= line)[ FD ]
Line_21 $$ Integer integer = myLeftLines.get(i)-->Line_22 $$ if (integer >= line) [ FD ]
Line_10 $$ for (int i = myLeftLines.size() - 1; i >= 0; i--) -->Line_11 $$ Integer integer = myLeftLines.get(i)[ FD ]
Line_11 $$ Integer integer = myLeftLines.get(i)-->Line_12 $$ if (integer <= line)[ FD ]
Line_20 $$ for (int i = 0; i < myLeftLines.size(); i++) -->Line_21 $$ Integer integer = myLeftLines.get(i)[ FD ]
