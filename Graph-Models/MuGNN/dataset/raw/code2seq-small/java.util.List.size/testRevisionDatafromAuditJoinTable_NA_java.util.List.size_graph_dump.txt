Line_6 $$ for (Object revisionEntity : custHistory) -->Line_8 $$ Assert.assertNotNull(revisionEntity)[ FD ]
Line_5 $$ int counter = 0-->Line_7 $$ counter++[ FD ]
Line_9 $$ Customer rev = (Customer) (((List<Object>) (revisionEntity)).toArray()[0])-->Line_10 $$ Assert.assertNotNull(rev)[ FD ]
Line_9 $$ Customer rev = (Customer) (((List<Object>) (revisionEntity)).toArray()[0])-->Line_11 $$ Assert.assertEquals("MADHUMITA", rev.getFirstname())[ FD ]
Line_9 $$ Customer rev = (Customer) (((List<Object>) (revisionEntity)).toArray()[0])-->Line_15 $$ Assert.assertEquals("Mondal", rev.getSurname())[ FD ]
Line_2 $$ private void testRevisionDatafromAuditJoinTable(Customer c1, SLSBAudit sb) throws Exception -->Line_3 $$ List<Object> custHistory = sb.verifyRevision(c1.getId())[ CD ]
Line_2 $$ private void testRevisionDatafromAuditJoinTable(Customer c1, SLSBAudit sb) throws Exception -->Line_3 $$ List<Object> custHistory = sb.verifyRevision(c1.getId())[ FD ]
Line_12 $$ if (counter == 1)-->Line_13 $$ Assert.assertEquals("SADHUKHAN", rev.getSurname())[ CD ]
Line_14 $$ if (counter == 2)-->Line_15 $$ Assert.assertEquals("Mondal", rev.getSurname())[ CD ]
Line_5 $$ int counter = 0-->Line_12 $$ if (counter == 1)[ FD ]
Line_2 $$ private void testRevisionDatafromAuditJoinTable(Customer c1, SLSBAudit sb) throws Exception -->Line_4 $$ Assert.assertEquals(2, custHistory.size())[ CD ]
Line_9 $$ Customer rev = (Customer) (((List<Object>) (revisionEntity)).toArray()[0])-->Line_13 $$ Assert.assertEquals("SADHUKHAN", rev.getSurname())[ FD ]
Line_5 $$ int counter = 0-->Line_14 $$ if (counter == 2)[ FD ]
Line_2 $$ private void testRevisionDatafromAuditJoinTable(Customer c1, SLSBAudit sb) throws Exception -->Line_5 $$ int counter = 0[ CD ]
Line_3 $$ List<Object> custHistory = sb.verifyRevision(c1.getId())-->Line_4 $$ Assert.assertEquals(2, custHistory.size())[ FD ]
