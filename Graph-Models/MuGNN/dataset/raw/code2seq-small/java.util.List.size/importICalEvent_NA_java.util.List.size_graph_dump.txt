Line_43 $$ while (listIterator.hasNext()) -->Line_49 $$ int hour = jCalendar.get(java.util.Calendar.HOUR_OF_DAY)[ CD ]
Line_78 $$ DateTime dateTime = trigger.getDateTime()-->Line_84 $$ time = startDate.getTime() - dateTime.getTime()[ FD ]
Line_128 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)-->Line_132 $$ childCalendarIds.add(calendarResource.getDefaultCalendarId())[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_23 $$ DtEnd dtEnd = vEvent.getEndDate()[ CD ]
Line_46 $$ int year = jCalendar.get(java.util.Calendar.YEAR)-->Line_52 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_64 $$ ComponentList componentList = vEvent.getAlarms()-->Line_65 $$ long[] reminders = new long[componentList.size()][ FD ]
Line_26 $$ if (isICalDateOnly(dtStart)) -->Line_28 $$ long time = endDate.getTime()[ CD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_75 $$ reminderTypes[i] = value[ CD ]
Line_48 $$ int day = jCalendar.get(java.util.Calendar.DATE)-->Line_52 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_4 $$ User user = UserLocalServiceUtil.getUser(calendar.getUserId())[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_144 $$ serviceContext.setAddGuestPermissions(true)[ CD ]
Line_139 $$ vEventUidValue = uid.getValue()-->Line_140 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_69 $$ VAlarm vAlarm = iterator.next()[ CD ]
Line_110 $$ secondReminder = reminders[1]-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_39 $$ while (iterator.hasNext()) -->Line_42 $$ ListIterator<Date> listIterator = dateList.listIterator()[ CD ]
Line_92 $$ time += dur.getWeeks() * Time.WEEK-->Line_96 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_93 $$ time += dur.getDays() * Time.DAY-->Line_95 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_13 $$ if (description != null) -->Line_14 $$ descriptionMap.put(user.getLocale(), description.getValue())[ CD ]
Line_34 $$ recurrence = StringUtil.trim(rrule.toString())-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_110 $$ secondReminder = reminders[1]-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_25 $$ boolean allDay = false-->Line_27 $$ allDay = true[ FD ]
Line_92 $$ time += dur.getWeeks() * Time.WEEK-->Line_95 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_76 $$ Trigger trigger = vAlarm.getTrigger()-->Line_79 $$ Dur dur = trigger.getDuration()[ FD ]
Line_142 $$ ServiceContext serviceContext = new ServiceContext()-->Line_143 $$ serviceContext.setAddGroupPermissions(true)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_143 $$ serviceContext.setAddGroupPermissions(true)[ CD ]
Line_92 $$ time += dur.getWeeks() * Time.WEEK-->Line_98 $$ reminders[i] = time[ FD ]
Line_83 $$ if (dateTime != null) -->Line_93 $$ time += dur.getDays() * Time.DAY[ CD ]
Line_12 $$ Description description = vEvent.getDescription()-->Line_14 $$ descriptionMap.put(user.getLocale(), description.getValue())[ FD ]
Line_77 $$ long time = 0-->Line_93 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_36 $$ if (!propertyList.isEmpty()) -->Line_37 $$ StringBundler sb = new StringBundler()[ CD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_72 $$ if (!isActionSupported(value)) [ CD ]
Line_148 $$ if (calendarBooking == null) -->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ CD ]
Line_28 $$ long time = endDate.getTime()-->Line_93 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_101 $$ long firstReminder = 0-->Line_106 $$ firstReminder = reminders[0][ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_148 $$ if (calendarBooking == null) [ CD ]
Line_148 $$ if (calendarBooking == null) -->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ CD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_144 $$ serviceContext.setAddGuestPermissions(true)[ FD ]
Line_42 $$ ListIterator<Date> listIterator = dateList.listIterator()-->Line_53 $$ if (listIterator.hasNext()) [ FD ]
Line_26 $$ if (isICalDateOnly(dtStart)) -->Line_27 $$ allDay = true[ CD ]
Line_5 $$ Map<Locale, String> titleMap = new HashMap()-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_69 $$ VAlarm vAlarm = iterator.next()[ FD ]
Line_92 $$ time += dur.getWeeks() * Time.WEEK-->Line_85 $$ if (time < 0) [ FD ]
Line_83 $$ if (dateTime != null) -->Line_89 $$ if (!dur.isNegative()) [ CD ]
Line_142 $$ ServiceContext serviceContext = new ServiceContext()-->Line_145 $$ serviceContext.setAttribute("sendNotification", Boolean.FALSE)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_66 $$ String[] reminderTypes = new String[componentList.size()][ CD ]
Line_67 $$ int i = 0-->Line_105 $$ if (i > 0) [ FD ]
Line_135 $$ CalendarBooking calendarBooking = null-->Line_140 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)[ FD ]
Line_111 $$ secondReminderType = reminderTypes[1]-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_38 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_69 $$ VAlarm vAlarm = iterator.next()[ FD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_126 $$ serviceContext.setCompanyId(calendar.getCompanyId())[ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_117 $$ URI uri = attendee.getCalAddress()[ CD ]
Line_45 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_46 $$ int year = jCalendar.get(java.util.Calendar.YEAR)[ FD ]
Line_43 $$ while (listIterator.hasNext()) -->Line_52 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_113 $$ PropertyList propertyList = vEvent.getProperties(Property.ATTENDEE)[ CD ]
Line_38 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_39 $$ while (iterator.hasNext()) [ FD ]
Line_77 $$ long time = 0-->Line_96 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_128 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)[ CD ]
Line_4 $$ User user = UserLocalServiceUtil.getUser(calendar.getUserId())-->Line_9 $$ titleMap.put(user.getLocale(), title)[ FD ]
Line_109 $$ if (i > 1) -->Line_111 $$ secondReminderType = reminderTypes[1][ CD ]
Line_104 $$ String secondReminderType = null-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_102 $$ String firstReminderType = null-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_12 $$ Description description = vEvent.getDescription()-->Line_13 $$ if (description != null) [ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_25 $$ boolean allDay = false[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_31 $$ RRule rrule = (RRule) vEvent.getProperty(Property.RRULE)[ FD ]
Line_140 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_31 $$ RRule rrule = (RRule) vEvent.getProperty(Property.RRULE)-->Line_33 $$ if (rrule != null) [ FD ]
Line_22 $$ Date startDate = dtStart.getDate()-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_32 $$ String recurrence = StringPool.BLANK-->Line_61 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())[ FD ]
Line_71 $$ String value = StringUtil.lowerCase(action.getValue())-->Line_75 $$ reminderTypes[i] = value[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_103 $$ long secondReminder = 0[ CD ]
Line_102 $$ String firstReminderType = null-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_121 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_11 $$ Map<Locale, String> descriptionMap = new HashMap()[ CD ]
Line_28 $$ long time = endDate.getTime()-->Line_94 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_51 $$ int second = jCalendar.get(java.util.Calendar.SECOND)-->Line_52 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_31 $$ RRule rrule = (RRule) vEvent.getProperty(Property.RRULE)-->Line_34 $$ recurrence = StringUtil.trim(rrule.toString())[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_35 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_83 $$ if (dateTime != null) [ CD ]
Line_79 $$ Dur dur = trigger.getDuration()-->Line_94 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_136 $$ String vEventUidValue = null-->Line_146 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_101 $$ long firstReminder = 0[ CD ]
Line_26 $$ if (isICalDateOnly(dtStart)) -->Line_29 $$ endDate.setTime(time - 1)[ CD ]
Line_21 $$ DtStart dtStart = vEvent.getStartDate()-->Line_22 $$ Date startDate = dtStart.getDate()[ FD ]
Line_33 $$ if (rrule != null) -->Line_35 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)[ CD ]
Line_38 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_116 $$ Attendee attendee = iterator.next()[ FD ]
Line_5 $$ Map<Locale, String> titleMap = new HashMap()-->Line_9 $$ titleMap.put(user.getLocale(), title)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_6 $$ Summary summary = vEvent.getSummary()[ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_116 $$ Attendee attendee = iterator.next()[ CD ]
Line_95 $$ time += dur.getMinutes() * Time.MINUTE-->Line_98 $$ reminders[i] = time[ FD ]
Line_25 $$ boolean allDay = false-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_24 $$ Date endDate = dtEnd.getDate()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_26 $$ if (isICalDateOnly(dtStart)) [ CD ]
Line_84 $$ time = startDate.getTime() - dateTime.getTime()-->Line_96 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_28 $$ long time = endDate.getTime()-->Line_96 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_84 $$ time = startDate.getTime() - dateTime.getTime()-->Line_95 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_142 $$ ServiceContext serviceContext = new ServiceContext()-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_146 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ FD ]
Line_44 $$ Date date = listIterator.next()-->Line_45 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())[ FD ]
Line_135 $$ CalendarBooking calendarBooking = null-->Line_148 $$ if (calendarBooking == null) [ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_129 $$ if (calendarResource == null) [ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_7 $$ if (summary != null) [ CD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_147 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_57 $$ if (iterator.hasNext()) -->Line_58 $$ sb.append(StringPool.COMMA)[ CD ]
Line_35 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)-->Line_38 $$ Iterator<ExDate> iterator = propertyList.iterator()[ FD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_128 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)[ FD ]
Line_79 $$ Dur dur = trigger.getDuration()-->Line_95 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_142 $$ ServiceContext serviceContext = new ServiceContext()-->Line_146 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_147 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ CD ]
Line_34 $$ recurrence = StringUtil.trim(rrule.toString())-->Line_61 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())[ FD ]
Line_27 $$ allDay = true-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_113 $$ PropertyList propertyList = vEvent.getProperties(Property.ATTENDEE)[ FD ]
Line_137 $$ Uid uid = vEvent.getUid()-->Line_139 $$ vEventUidValue = uid.getValue()[ FD ]
Line_45 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_50 $$ int minute = jCalendar.get(java.util.Calendar.MINUTE)[ FD ]
Line_136 $$ String vEventUidValue = null-->Line_139 $$ vEventUidValue = uid.getValue()[ FD ]
Line_36 $$ if (!propertyList.isEmpty()) -->Line_38 $$ Iterator<ExDate> iterator = propertyList.iterator()[ CD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_99 $$ i++[ CD ]
Line_53 $$ if (listIterator.hasNext()) -->Line_54 $$ sb.append(StringPool.COMMA)[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_146 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ CD ]
Line_25 $$ boolean allDay = false-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_136 $$ String vEventUidValue = null-->Line_140 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)[ FD ]
Line_23 $$ DtEnd dtEnd = vEvent.getEndDate()-->Line_24 $$ Date endDate = dtEnd.getDate()[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_136 $$ String vEventUidValue = null[ CD ]
Line_45 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_49 $$ int hour = jCalendar.get(java.util.Calendar.HOUR_OF_DAY)[ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_116 $$ Attendee attendee = iterator.next()[ FD ]
Line_95 $$ time += dur.getMinutes() * Time.MINUTE-->Line_96 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_77 $$ long time = 0-->Line_98 $$ reminders[i] = time[ FD ]
Line_38 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) [ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) [ FD ]
Line_83 $$ if (dateTime != null) -->Line_94 $$ time += dur.getHours() * Time.HOUR[ CD ]
Line_28 $$ long time = endDate.getTime()-->Line_95 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_137 $$ Uid uid = vEvent.getUid()-->Line_138 $$ if (uid != null) [ FD ]
Line_102 $$ String firstReminderType = null-->Line_107 $$ firstReminderType = reminderTypes[0][ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_127 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_134 $$ long[] childCalendarIdsArray = ArrayUtil.toArray(childCalendarIds.toArray(new Long[childCalendarIds.size()]))[ CD ]
Line_95 $$ time += dur.getMinutes() * Time.MINUTE-->Line_85 $$ if (time < 0) [ FD ]
Line_16 $$ String locationString = StringPool.BLANK-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_43 $$ while (listIterator.hasNext()) -->Line_53 $$ if (listIterator.hasNext()) [ CD ]
Line_77 $$ long time = 0-->Line_92 $$ time += dur.getWeeks() * Time.WEEK[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_32 $$ String recurrence = StringPool.BLANK[ CD ]
Line_116 $$ Attendee attendee = iterator.next()-->Line_117 $$ URI uri = attendee.getCalAddress()[ FD ]
Line_24 $$ Date endDate = dtEnd.getDate()-->Line_28 $$ long time = endDate.getTime()[ FD ]
Line_103 $$ long secondReminder = 0-->Line_110 $$ secondReminder = reminders[1][ FD ]
Line_37 $$ StringBundler sb = new StringBundler()-->Line_61 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_12 $$ Description description = vEvent.getDescription()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_6 $$ Summary summary = vEvent.getSummary()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_12 $$ Description description = vEvent.getDescription()[ FD ]
Line_64 $$ ComponentList componentList = vEvent.getAlarms()-->Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) [ FD ]
Line_6 $$ Summary summary = vEvent.getSummary()-->Line_7 $$ if (summary != null) [ FD ]
Line_32 $$ String recurrence = StringPool.BLANK-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_142 $$ ServiceContext serviceContext = new ServiceContext()-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_69 $$ VAlarm vAlarm = iterator.next()-->Line_76 $$ Trigger trigger = vAlarm.getTrigger()[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_70 $$ Action action = vAlarm.getAction()[ CD ]
Line_84 $$ time = startDate.getTime() - dateTime.getTime()-->Line_93 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_17 $$ Location location = vEvent.getLocation()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_109 $$ if (i > 1) [ CD ]
Line_105 $$ if (i > 0) -->Line_107 $$ firstReminderType = reminderTypes[0][ CD ]
Line_41 $$ DateList dateList = exDate.getDates()-->Line_42 $$ ListIterator<Date> listIterator = dateList.listIterator()[ FD ]
Line_101 $$ long firstReminder = 0-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_105 $$ if (i > 0) [ CD ]
Line_39 $$ while (iterator.hasNext()) -->Line_43 $$ while (listIterator.hasNext()) [ CD ]
Line_7 $$ if (summary != null) -->Line_9 $$ titleMap.put(user.getLocale(), title)[ CD ]
Line_38 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_40 $$ ExDate exDate = iterator.next()[ FD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_102 $$ String firstReminderType = null[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_114 $$ List<Long> childCalendarIds = new ArrayList()[ CD ]
Line_8 $$ String title = ModelHintsUtil.trimString(CalendarBooking.class.getName(), "title", summary.getValue())-->Line_9 $$ titleMap.put(user.getLocale(), title)[ FD ]
Line_28 $$ long time = endDate.getTime()-->Line_98 $$ reminders[i] = time[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_116 $$ Attendee attendee = iterator.next()[ FD ]
Line_121 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())-->Line_122 $$ if ((attendeeUser == null) || (calendar.getUserId() == attendeeUser.getUserId())) [ FD ]
Line_103 $$ long secondReminder = 0-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_18 $$ if (location != null) [ CD ]
Line_67 $$ int i = 0-->Line_109 $$ if (i > 1) [ FD ]
Line_42 $$ ListIterator<Date> listIterator = dateList.listIterator()-->Line_44 $$ Date date = listIterator.next()[ FD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_21 $$ DtStart dtStart = vEvent.getStartDate()-->Line_26 $$ if (isICalDateOnly(dtStart)) [ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_64 $$ ComponentList componentList = vEvent.getAlarms()[ FD ]
Line_142 $$ ServiceContext serviceContext = new ServiceContext()-->Line_144 $$ serviceContext.setAddGuestPermissions(true)[ FD ]
Line_16 $$ String locationString = StringPool.BLANK-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_77 $$ long time = 0-->Line_85 $$ if (time < 0) [ FD ]
Line_35 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)-->Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) [ FD ]
Line_128 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)-->Line_129 $$ if (calendarResource == null) [ FD ]
Line_22 $$ Date startDate = dtStart.getDate()-->Line_84 $$ time = startDate.getTime() - dateTime.getTime()[ FD ]
Line_47 $$ int month = jCalendar.get(java.util.Calendar.MONTH) + 1-->Line_52 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_135 $$ CalendarBooking calendarBooking = null-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_93 $$ time += dur.getDays() * Time.DAY-->Line_85 $$ if (time < 0) [ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_118 $$ if (uri == null) [ CD ]
Line_24 $$ Date endDate = dtEnd.getDate()-->Line_29 $$ endDate.setTime(time - 1)[ FD ]
Line_45 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_47 $$ int month = jCalendar.get(java.util.Calendar.MONTH) + 1[ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_132 $$ childCalendarIds.add(calendarResource.getDefaultCalendarId())[ CD ]
Line_84 $$ time = startDate.getTime() - dateTime.getTime()-->Line_85 $$ if (time < 0) [ FD ]
Line_139 $$ vEventUidValue = uid.getValue()-->Line_146 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ FD ]
Line_4 $$ User user = UserLocalServiceUtil.getUser(calendar.getUserId())-->Line_14 $$ descriptionMap.put(user.getLocale(), description.getValue())[ FD ]
Line_32 $$ String recurrence = StringPool.BLANK-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_125 $$ ServiceContext serviceContext = new ServiceContext()[ CD ]
Line_42 $$ ListIterator<Date> listIterator = dateList.listIterator()-->Line_43 $$ while (listIterator.hasNext()) [ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_65 $$ long[] reminders = new long[componentList.size()][ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_17 $$ Location location = vEvent.getLocation()[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_21 $$ DtStart dtStart = vEvent.getStartDate()[ CD ]
Line_67 $$ int i = 0-->Line_99 $$ i++[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_104 $$ String secondReminderType = null[ CD ]
Line_50 $$ int minute = jCalendar.get(java.util.Calendar.MINUTE)-->Line_52 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_83 $$ if (dateTime != null) -->Line_85 $$ if (time < 0) [ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_67 $$ int i = 0[ CD ]
Line_109 $$ if (i > 1) -->Line_110 $$ secondReminder = reminders[1][ CD ]
Line_28 $$ long time = endDate.getTime()-->Line_84 $$ time = startDate.getTime() - dateTime.getTime()[ FD ]
Line_138 $$ if (uid != null) -->Line_139 $$ vEventUidValue = uid.getValue()[ CD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_126 $$ serviceContext.setCompanyId(calendar.getCompanyId())[ FD ]
Line_92 $$ time += dur.getWeeks() * Time.WEEK-->Line_94 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_94 $$ time += dur.getHours() * Time.HOUR-->Line_98 $$ reminders[i] = time[ FD ]
Line_142 $$ ServiceContext serviceContext = new ServiceContext()-->Line_147 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_37 $$ StringBundler sb = new StringBundler()-->Line_54 $$ sb.append(StringPool.COMMA)[ FD ]
Line_16 $$ String locationString = StringPool.BLANK-->Line_19 $$ locationString = location.getValue()[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)[ CD ]
Line_138 $$ if (uid != null) -->Line_140 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)[ CD ]
Line_140 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)-->Line_148 $$ if (calendarBooking == null) [ FD ]
Line_38 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_57 $$ if (iterator.hasNext()) [ FD ]
Line_77 $$ long time = 0-->Line_84 $$ time = startDate.getTime() - dateTime.getTime()[ FD ]
Line_77 $$ long time = 0-->Line_95 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_64 $$ ComponentList componentList = vEvent.getAlarms()[ CD ]
Line_83 $$ if (dateTime != null) -->Line_95 $$ time += dur.getMinutes() * Time.MINUTE[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_137 $$ Uid uid = vEvent.getUid()[ CD ]
Line_83 $$ if (dateTime != null) -->Line_96 $$ time += dur.getSeconds() * Time.SECOND[ CD ]
Line_39 $$ while (iterator.hasNext()) -->Line_40 $$ ExDate exDate = iterator.next()[ CD ]
Line_79 $$ Dur dur = trigger.getDuration()-->Line_92 $$ time += dur.getWeeks() * Time.WEEK[ FD ]
Line_93 $$ time += dur.getDays() * Time.DAY-->Line_98 $$ reminders[i] = time[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_121 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_13 $$ if (description != null) [ CD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_127 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_11 $$ Map<Locale, String> descriptionMap = new HashMap()-->Line_14 $$ descriptionMap.put(user.getLocale(), description.getValue())[ FD ]
Line_37 $$ StringBundler sb = new StringBundler()-->Line_52 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_31 $$ RRule rrule = (RRule) vEvent.getProperty(Property.RRULE)[ CD ]
Line_117 $$ URI uri = attendee.getCalAddress()-->Line_121 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())[ FD ]
Line_11 $$ Map<Locale, String> descriptionMap = new HashMap()-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_33 $$ if (rrule != null) -->Line_36 $$ if (!propertyList.isEmpty()) [ CD ]
Line_134 $$ long[] childCalendarIdsArray = ArrayUtil.toArray(childCalendarIds.toArray(new Long[childCalendarIds.size()]))-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_114 $$ List<Long> childCalendarIds = new ArrayList()-->Line_132 $$ childCalendarIds.add(calendarResource.getDefaultCalendarId())[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_5 $$ Map<Locale, String> titleMap = new HashMap()[ CD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_80 $$ if ((dateTime == null) && (dur == null)) [ CD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_78 $$ DateTime dateTime = trigger.getDateTime()[ CD ]
Line_49 $$ int hour = jCalendar.get(java.util.Calendar.HOUR_OF_DAY)-->Line_52 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_138 $$ if (uid != null) [ CD ]
Line_107 $$ firstReminderType = reminderTypes[0]-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_28 $$ long time = endDate.getTime()-->Line_85 $$ if (time < 0) [ FD ]
Line_134 $$ long[] childCalendarIdsArray = ArrayUtil.toArray(childCalendarIds.toArray(new Long[childCalendarIds.size()]))-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_17 $$ Location location = vEvent.getLocation()-->Line_18 $$ if (location != null) [ FD ]
Line_39 $$ while (iterator.hasNext()) -->Line_41 $$ DateList dateList = exDate.getDates()[ CD ]
Line_43 $$ while (listIterator.hasNext()) -->Line_47 $$ int month = jCalendar.get(java.util.Calendar.MONTH) + 1[ CD ]
Line_94 $$ time += dur.getHours() * Time.HOUR-->Line_96 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_96 $$ time += dur.getSeconds() * Time.SECOND-->Line_98 $$ reminders[i] = time[ FD ]
Line_77 $$ long time = 0-->Line_94 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_142 $$ ServiceContext serviceContext = new ServiceContext()[ CD ]
Line_114 $$ List<Long> childCalendarIds = new ArrayList()-->Line_134 $$ long[] childCalendarIdsArray = ArrayUtil.toArray(childCalendarIds.toArray(new Long[childCalendarIds.size()]))[ FD ]
Line_101 $$ long firstReminder = 0-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_24 $$ Date endDate = dtEnd.getDate()-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_122 $$ if ((attendeeUser == null) || (calendar.getUserId() == attendeeUser.getUserId())) [ CD ]
Line_36 $$ if (!propertyList.isEmpty()) -->Line_61 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_22 $$ Date startDate = dtStart.getDate()[ CD ]
Line_78 $$ DateTime dateTime = trigger.getDateTime()-->Line_83 $$ if (dateTime != null) [ FD ]
Line_27 $$ allDay = true-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_145 $$ serviceContext.setAttribute("sendNotification", Boolean.FALSE)[ FD ]
Line_45 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_51 $$ int second = jCalendar.get(java.util.Calendar.SECOND)[ FD ]
Line_79 $$ Dur dur = trigger.getDuration()-->Line_93 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_32 $$ String recurrence = StringPool.BLANK-->Line_34 $$ recurrence = StringUtil.trim(rrule.toString())[ FD ]
Line_93 $$ time += dur.getDays() * Time.DAY-->Line_96 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_84 $$ time = startDate.getTime() - dateTime.getTime()-->Line_92 $$ time += dur.getWeeks() * Time.WEEK[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_33 $$ if (rrule != null) [ CD ]
Line_7 $$ if (summary != null) -->Line_8 $$ String title = ModelHintsUtil.trimString(CalendarBooking.class.getName(), "title", summary.getValue())[ CD ]
Line_34 $$ recurrence = StringUtil.trim(rrule.toString())-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_5 $$ Map<Locale, String> titleMap = new HashMap()-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_147 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_79 $$ Dur dur = trigger.getDuration()[ CD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_122 $$ if ((attendeeUser == null) || (calendar.getUserId() == attendeeUser.getUserId())) [ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_4 $$ User user = UserLocalServiceUtil.getUser(calendar.getUserId())[ CD ]
Line_11 $$ Map<Locale, String> descriptionMap = new HashMap()-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_83 $$ if (dateTime != null) -->Line_84 $$ time = startDate.getTime() - dateTime.getTime()[ CD ]
Line_43 $$ while (listIterator.hasNext()) -->Line_44 $$ Date date = listIterator.next()[ CD ]
Line_104 $$ String secondReminderType = null-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_18 $$ if (location != null) -->Line_19 $$ locationString = location.getValue()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_23 $$ DtEnd dtEnd = vEvent.getEndDate()[ FD ]
Line_84 $$ time = startDate.getTime() - dateTime.getTime()-->Line_98 $$ reminders[i] = time[ FD ]
Line_64 $$ ComponentList componentList = vEvent.getAlarms()-->Line_66 $$ String[] reminderTypes = new String[componentList.size()][ FD ]
Line_70 $$ Action action = vAlarm.getAction()-->Line_71 $$ String value = StringUtil.lowerCase(action.getValue())[ FD ]
Line_103 $$ long secondReminder = 0-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_96 $$ time += dur.getSeconds() * Time.SECOND-->Line_85 $$ if (time < 0) [ FD ]
Line_125 $$ ServiceContext serviceContext = new ServiceContext()-->Line_143 $$ serviceContext.setAddGroupPermissions(true)[ FD ]
Line_40 $$ ExDate exDate = iterator.next()-->Line_41 $$ DateList dateList = exDate.getDates()[ FD ]
Line_117 $$ URI uri = attendee.getCalAddress()-->Line_118 $$ if (uri == null) [ FD ]
Line_43 $$ while (listIterator.hasNext()) -->Line_51 $$ int second = jCalendar.get(java.util.Calendar.SECOND)[ CD ]
Line_24 $$ Date endDate = dtEnd.getDate()-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_111 $$ secondReminderType = reminderTypes[1]-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_106 $$ firstReminder = reminders[0]-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_98 $$ reminders[i] = time[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_137 $$ Uid uid = vEvent.getUid()[ FD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_127 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_69 $$ VAlarm vAlarm = iterator.next()-->Line_70 $$ Action action = vAlarm.getAction()[ FD ]
Line_104 $$ String secondReminderType = null-->Line_111 $$ secondReminderType = reminderTypes[1][ FD ]
Line_43 $$ while (listIterator.hasNext()) -->Line_48 $$ int day = jCalendar.get(java.util.Calendar.DATE)[ CD ]
Line_33 $$ if (rrule != null) -->Line_34 $$ recurrence = StringUtil.trim(rrule.toString())[ CD ]
Line_19 $$ locationString = location.getValue()-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_79 $$ Dur dur = trigger.getDuration()-->Line_89 $$ if (!dur.isNegative()) [ FD ]
Line_43 $$ while (listIterator.hasNext()) -->Line_46 $$ int year = jCalendar.get(java.util.Calendar.YEAR)[ CD ]
Line_39 $$ while (iterator.hasNext()) -->Line_57 $$ if (iterator.hasNext()) [ CD ]
Line_105 $$ if (i > 0) -->Line_106 $$ firstReminder = reminders[0][ CD ]
Line_61 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_35 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)-->Line_36 $$ if (!propertyList.isEmpty()) [ FD ]
Line_19 $$ locationString = location.getValue()-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_94 $$ time += dur.getHours() * Time.HOUR-->Line_85 $$ if (time < 0) [ FD ]
Line_43 $$ while (listIterator.hasNext()) -->Line_50 $$ int minute = jCalendar.get(java.util.Calendar.MINUTE)[ CD ]
Line_22 $$ Date startDate = dtStart.getDate()-->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_61 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_84 $$ time = startDate.getTime() - dateTime.getTime()-->Line_94 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_121 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())-->Line_128 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)[ FD ]
Line_93 $$ time += dur.getDays() * Time.DAY-->Line_94 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_83 $$ if (dateTime != null) -->Line_92 $$ time += dur.getWeeks() * Time.WEEK[ CD ]
Line_79 $$ Dur dur = trigger.getDuration()-->Line_96 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_28 $$ long time = endDate.getTime()-->Line_92 $$ time += dur.getWeeks() * Time.WEEK[ FD ]
Line_36 $$ if (!propertyList.isEmpty()) -->Line_39 $$ while (iterator.hasNext()) [ CD ]
Line_37 $$ StringBundler sb = new StringBundler()-->Line_58 $$ sb.append(StringPool.COMMA)[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_77 $$ long time = 0[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_145 $$ serviceContext.setAttribute("sendNotification", Boolean.FALSE)[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_21 $$ DtStart dtStart = vEvent.getStartDate()[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_140 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_71 $$ String value = StringUtil.lowerCase(action.getValue())[ CD ]
Line_17 $$ Location location = vEvent.getLocation()-->Line_19 $$ locationString = location.getValue()[ FD ]
Line_6 $$ Summary summary = vEvent.getSummary()-->Line_8 $$ String title = ModelHintsUtil.trimString(CalendarBooking.class.getName(), "title", summary.getValue())[ FD ]
Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_126 $$ serviceContext.setCompanyId(calendar.getCompanyId())[ CD ]
Line_45 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_48 $$ int day = jCalendar.get(java.util.Calendar.DATE)[ FD ]
Line_38 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_115 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) [ FD ]
Line_43 $$ while (listIterator.hasNext()) -->Line_45 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())[ CD ]
Line_71 $$ String value = StringUtil.lowerCase(action.getValue())-->Line_72 $$ if (!isActionSupported(value)) [ FD ]
Line_106 $$ firstReminder = reminders[0]-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_92 $$ time += dur.getWeeks() * Time.WEEK-->Line_93 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_76 $$ Trigger trigger = vAlarm.getTrigger()-->Line_78 $$ DateTime dateTime = trigger.getDateTime()[ FD ]
Line_107 $$ firstReminderType = reminderTypes[0]-->Line_149 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_68 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_76 $$ Trigger trigger = vAlarm.getTrigger()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_151 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_135 $$ CalendarBooking calendarBooking = null[ CD ]
Line_94 $$ time += dur.getHours() * Time.HOUR-->Line_95 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_16 $$ String locationString = StringPool.BLANK[ CD ]
