Line_116 $$ if (i > 1) -->Line_118 $$ secondReminderType = reminderTypes[1][ CD ]
Line_91 $$ time = startDate.getTime() - dateTime.getTime()-->Line_92 $$ if (time < 0) [ FD ]
Line_122 $$ List<Long> childCalendarIds = new ArrayList()-->Line_142 $$ long[] childCalendarIdsArray = ArrayUtil.toArray(childCalendarIds.toArray(new Long[childCalendarIds.size()]))[ FD ]
Line_43 $$ StringBundler sb = new StringBundler()-->Line_60 $$ sb.append(StringPool.COMMA)[ FD ]
Line_84 $$ long time = 0-->Line_91 $$ time = startDate.getTime() - dateTime.getTime()[ FD ]
Line_83 $$ Trigger trigger = vAlarm.getTrigger()-->Line_86 $$ Dur dur = trigger.getDuration()[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_82 $$ reminderTypes[i] = value[ CD ]
Line_59 $$ if (listIterator.hasNext()) -->Line_60 $$ sb.append(StringPool.COMMA)[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_27 $$ DtEnd dtEnd = vEvent.getEndDate()[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_146 $$ Uid uid = vEvent.getUid()[ CD ]
Line_145 $$ String vEventUidValue = null-->Line_148 $$ vEventUidValue = uid.getValue()[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_84 $$ long time = 0[ CD ]
Line_151 $$ ServiceContext serviceContext = new ServiceContext()-->Line_156 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_86 $$ Dur dur = trigger.getDuration()[ CD ]
Line_151 $$ ServiceContext serviceContext = new ServiceContext()-->Line_155 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ FD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_135 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ CD ]
Line_146 $$ Uid uid = vEvent.getUid()-->Line_148 $$ vEventUidValue = uid.getValue()[ FD ]
Line_151 $$ ServiceContext serviceContext = new ServiceContext()-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_135 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_99 $$ time += dur.getWeeks() * Time.WEEK-->Line_92 $$ if (time < 0) [ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_151 $$ ServiceContext serviceContext = new ServiceContext()[ CD ]
Line_67 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_79 $$ if (!isActionSupported(value)) [ CD ]
Line_151 $$ ServiceContext serviceContext = new ServiceContext()-->Line_154 $$ serviceContext.setAttribute("sendNotification", Boolean.FALSE)[ FD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_135 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_57 $$ int second = jCalendar.get(java.util.Calendar.SECOND)[ CD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_125 $$ URI uri = attendee.getCalAddress()[ CD ]
Line_41 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)-->Line_42 $$ if (!propertyList.isEmpty()) [ FD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_140 $$ childCalendarIds.add(calendarResource.getDefaultCalendarId())[ CD ]
Line_101 $$ time += dur.getHours() * Time.HOUR-->Line_92 $$ if (time < 0) [ FD ]
Line_86 $$ Dur dur = trigger.getDuration()-->Line_103 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_20 $$ Location location = vEvent.getLocation()-->Line_21 $$ if (location != null) [ FD ]
Line_53 $$ int month = jCalendar.get(java.util.Calendar.MONTH) + 1-->Line_58 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_100 $$ time += dur.getDays() * Time.DAY-->Line_105 $$ reminders[i] = time[ FD ]
Line_113 $$ firstReminder = reminders[0]-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_78 $$ String value = StringUtil.lowerCase(action.getValue())[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_20 $$ Location location = vEvent.getLocation()[ FD ]
Line_38 $$ String recurrence = StringPool.BLANK-->Line_40 $$ recurrence = StringUtil.trim(rrule.toString())[ FD ]
Line_84 $$ long time = 0-->Line_103 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_125 $$ URI uri = attendee.getCalAddress()-->Line_126 $$ if (uri == null) [ FD ]
Line_44 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_76 $$ VAlarm vAlarm = iterator.next()[ FD ]
Line_111 $$ String secondReminderType = null-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_113 $$ firstReminder = reminders[0]-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_90 $$ if (dateTime != null) -->Line_96 $$ if (!dur.isNegative()) [ CD ]
Line_6 $$ Map<Locale, String> titleMap = new HashMap()-->Line_10 $$ titleMap.put(user.getLocale(), title)[ FD ]
Line_51 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_53 $$ int month = jCalendar.get(java.util.Calendar.MONTH) + 1[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_8 $$ if (summary != null) [ CD ]
Line_44 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_63 $$ if (iterator.hasNext()) [ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_106 $$ i++[ CD ]
Line_91 $$ time = startDate.getTime() - dateTime.getTime()-->Line_101 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_109 $$ String firstReminderType = null-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_20 $$ Location location = vEvent.getLocation()-->Line_22 $$ locationString = location.getValue()[ FD ]
Line_91 $$ time = startDate.getTime() - dateTime.getTime()-->Line_102 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_136 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)[ CD ]
Line_50 $$ Date date = listIterator.next()-->Line_51 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())[ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_153 $$ serviceContext.setAddGuestPermissions(true)[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_90 $$ if (dateTime != null) [ CD ]
Line_74 $$ int i = 0-->Line_106 $$ i++[ FD ]
Line_122 $$ List<Long> childCalendarIds = new ArrayList()-->Line_140 $$ childCalendarIds.add(calendarResource.getDefaultCalendarId())[ FD ]
Line_108 $$ long firstReminder = 0-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_33 $$ long time = endDate.getTime()-->Line_100 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_90 $$ if (dateTime != null) -->Line_102 $$ time += dur.getMinutes() * Time.MINUTE[ CD ]
Line_38 $$ String recurrence = StringPool.BLANK-->Line_67 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())[ FD ]
Line_148 $$ vEventUidValue = uid.getValue()-->Line_149 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)[ FD ]
Line_57 $$ int second = jCalendar.get(java.util.Calendar.SECOND)-->Line_58 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_101 $$ time += dur.getHours() * Time.HOUR-->Line_105 $$ reminders[i] = time[ FD ]
Line_6 $$ Map<Locale, String> titleMap = new HashMap()-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_124 $$ Attendee attendee = iterator.next()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_39 $$ if (rrule != null) [ CD ]
Line_6 $$ Map<Locale, String> titleMap = new HashMap()-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_44 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_46 $$ ExDate exDate = iterator.next()[ FD ]
Line_76 $$ VAlarm vAlarm = iterator.next()-->Line_77 $$ Action action = vAlarm.getAction()[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_124 $$ Attendee attendee = iterator.next()[ FD ]
Line_28 $$ Date endDate = dtEnd.getDate()-->Line_33 $$ long time = endDate.getTime()[ FD ]
Line_151 $$ ServiceContext serviceContext = new ServiceContext()-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_8 $$ if (summary != null) -->Line_10 $$ titleMap.put(user.getLocale(), title)[ CD ]
Line_42 $$ if (!propertyList.isEmpty()) -->Line_43 $$ StringBundler sb = new StringBundler()[ CD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_129 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())[ CD ]
Line_102 $$ time += dur.getMinutes() * Time.MINUTE-->Line_103 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_134 $$ serviceContext.setCompanyId(calendar.getCompanyId())[ FD ]
Line_33 $$ long time = endDate.getTime()-->Line_91 $$ time = startDate.getTime() - dateTime.getTime()[ FD ]
Line_74 $$ int i = 0-->Line_112 $$ if (i > 0) [ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_87 $$ if ((dateTime == null) && (dur == null)) [ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_156 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ CD ]
Line_129 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())-->Line_130 $$ if ((attendeeUser == null) || (calendar.getUserId() == attendeeUser.getUserId())) [ FD ]
Line_99 $$ time += dur.getWeeks() * Time.WEEK-->Line_105 $$ reminders[i] = time[ FD ]
Line_102 $$ time += dur.getMinutes() * Time.MINUTE-->Line_105 $$ reminders[i] = time[ FD ]
Line_84 $$ long time = 0-->Line_100 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_111 $$ String secondReminderType = null[ CD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_85 $$ DateTime dateTime = trigger.getDateTime()[ CD ]
Line_40 $$ recurrence = StringUtil.trim(rrule.toString())-->Line_67 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())[ FD ]
Line_116 $$ if (i > 1) -->Line_117 $$ secondReminder = reminders[1][ CD ]
Line_91 $$ time = startDate.getTime() - dateTime.getTime()-->Line_100 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_116 $$ if (i > 1) [ CD ]
Line_51 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_54 $$ int day = jCalendar.get(java.util.Calendar.DATE)[ FD ]
Line_117 $$ secondReminder = reminders[1]-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_44 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_45 $$ while (iterator.hasNext()) [ FD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_126 $$ if (uri == null) [ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_91 $$ time = startDate.getTime() - dateTime.getTime()-->Line_105 $$ reminders[i] = time[ FD ]
Line_26 $$ Date startDate = dtStart.getDate()-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_78 $$ String value = StringUtil.lowerCase(action.getValue())-->Line_79 $$ if (!isActionSupported(value)) [ FD ]
Line_43 $$ StringBundler sb = new StringBundler()-->Line_58 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_48 $$ ListIterator<Date> listIterator = dateList.listIterator()-->Line_50 $$ Date date = listIterator.next()[ FD ]
Line_90 $$ if (dateTime != null) -->Line_91 $$ time = startDate.getTime() - dateTime.getTime()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_15 $$ if (description != null) [ CD ]
Line_99 $$ time += dur.getWeeks() * Time.WEEK-->Line_101 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_84 $$ long time = 0-->Line_105 $$ reminders[i] = time[ FD ]
Line_45 $$ while (iterator.hasNext()) -->Line_63 $$ if (iterator.hasNext()) [ CD ]
Line_91 $$ time = startDate.getTime() - dateTime.getTime()-->Line_103 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_63 $$ if (iterator.hasNext()) -->Line_64 $$ sb.append(StringPool.COMMA)[ CD ]
Line_90 $$ if (dateTime != null) -->Line_103 $$ time += dur.getSeconds() * Time.SECOND[ CD ]
Line_42 $$ if (!propertyList.isEmpty()) -->Line_44 $$ Iterator<ExDate> iterator = propertyList.iterator()[ CD ]
Line_148 $$ vEventUidValue = uid.getValue()-->Line_155 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ FD ]
Line_136 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)-->Line_137 $$ if (calendarResource == null) [ FD ]
Line_43 $$ StringBundler sb = new StringBundler()-->Line_67 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())[ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_154 $$ serviceContext.setAttribute("sendNotification", Boolean.FALSE)[ FD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_53 $$ int month = jCalendar.get(java.util.Calendar.MONTH) + 1[ CD ]
Line_51 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_56 $$ int minute = jCalendar.get(java.util.Calendar.MINUTE)[ FD ]
Line_45 $$ while (iterator.hasNext()) -->Line_48 $$ ListIterator<Date> listIterator = dateList.listIterator()[ CD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_129 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())[ FD ]
Line_44 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) [ FD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_56 $$ int minute = jCalendar.get(java.util.Calendar.MINUTE)[ CD ]
Line_14 $$ Description description = vEvent.getDescription()-->Line_16 $$ descriptionMap.put(user.getLocale(), description.getValue())[ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_41 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)-->Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) [ FD ]
Line_102 $$ time += dur.getMinutes() * Time.MINUTE-->Line_92 $$ if (time < 0) [ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_109 $$ String firstReminderType = null[ CD ]
Line_85 $$ DateTime dateTime = trigger.getDateTime()-->Line_91 $$ time = startDate.getTime() - dateTime.getTime()[ FD ]
Line_22 $$ locationString = location.getValue()-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_77 $$ Action action = vAlarm.getAction()-->Line_78 $$ String value = StringUtil.lowerCase(action.getValue())[ FD ]
Line_110 $$ long secondReminder = 0-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_146 $$ Uid uid = vEvent.getUid()[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_14 $$ Description description = vEvent.getDescription()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_21 $$ if (location != null) [ CD ]
Line_114 $$ firstReminderType = reminderTypes[0]-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_145 $$ String vEventUidValue = null-->Line_155 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_136 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_105 $$ reminders[i] = time[ CD ]
Line_33 $$ long time = endDate.getTime()-->Line_105 $$ reminders[i] = time[ FD ]
Line_54 $$ int day = jCalendar.get(java.util.Calendar.DATE)-->Line_58 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)[ FD ]
Line_99 $$ time += dur.getWeeks() * Time.WEEK-->Line_103 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_112 $$ if (i > 0) -->Line_113 $$ firstReminder = reminders[0][ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_145 $$ String vEventUidValue = null[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) [ CD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_59 $$ if (listIterator.hasNext()) [ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_38 $$ String recurrence = StringPool.BLANK[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_142 $$ long[] childCalendarIdsArray = ArrayUtil.toArray(childCalendarIds.toArray(new Long[childCalendarIds.size()]))[ CD ]
Line_78 $$ String value = StringUtil.lowerCase(action.getValue())-->Line_82 $$ reminderTypes[i] = value[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_153 $$ serviceContext.setAddGuestPermissions(true)[ CD ]
Line_84 $$ long time = 0-->Line_101 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_42 $$ if (!propertyList.isEmpty()) -->Line_67 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())[ CD ]
Line_151 $$ ServiceContext serviceContext = new ServiceContext()-->Line_152 $$ serviceContext.setAddGroupPermissions(true)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_7 $$ Summary summary = vEvent.getSummary()[ CD ]
Line_86 $$ Dur dur = trigger.getDuration()-->Line_101 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_149 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)-->Line_157 $$ if (calendarBooking == null) [ FD ]
Line_42 $$ if (!propertyList.isEmpty()) -->Line_45 $$ while (iterator.hasNext()) [ CD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_58 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ CD ]
Line_101 $$ time += dur.getHours() * Time.HOUR-->Line_103 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_83 $$ Trigger trigger = vAlarm.getTrigger()-->Line_85 $$ DateTime dateTime = trigger.getDateTime()[ FD ]
Line_142 $$ long[] childCalendarIdsArray = ArrayUtil.toArray(childCalendarIds.toArray(new Long[childCalendarIds.size()]))-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_31 $$ if (isICalDateOnly(dtStart)) -->Line_32 $$ allDay = true[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_7 $$ Summary summary = vEvent.getSummary()[ FD ]
Line_47 $$ DateList dateList = exDate.getDates()-->Line_48 $$ ListIterator<Date> listIterator = dateList.listIterator()[ FD ]
Line_28 $$ Date endDate = dtEnd.getDate()-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_100 $$ time += dur.getDays() * Time.DAY-->Line_92 $$ if (time < 0) [ FD ]
Line_157 $$ if (calendarBooking == null) -->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_14 $$ Description description = vEvent.getDescription()[ FD ]
Line_46 $$ ExDate exDate = iterator.next()-->Line_47 $$ DateList dateList = exDate.getDates()[ FD ]
Line_51 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_52 $$ int year = jCalendar.get(java.util.Calendar.YEAR)[ FD ]
Line_45 $$ while (iterator.hasNext()) -->Line_46 $$ ExDate exDate = iterator.next()[ CD ]
Line_32 $$ allDay = true-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_44 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) [ FD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_51 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_28 $$ Date endDate = dtEnd.getDate()[ CD ]
Line_103 $$ time += dur.getSeconds() * Time.SECOND-->Line_105 $$ reminders[i] = time[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_154 $$ serviceContext.setAttribute("sendNotification", Boolean.FALSE)[ CD ]
Line_118 $$ secondReminderType = reminderTypes[1]-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_76 $$ VAlarm vAlarm = iterator.next()[ CD ]
Line_86 $$ Dur dur = trigger.getDuration()-->Line_96 $$ if (!dur.isNegative()) [ FD ]
Line_74 $$ int i = 0-->Line_116 $$ if (i > 1) [ FD ]
Line_108 $$ long firstReminder = 0-->Line_113 $$ firstReminder = reminders[0][ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_149 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)[ FD ]
Line_86 $$ Dur dur = trigger.getDuration()-->Line_100 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_90 $$ if (dateTime != null) -->Line_99 $$ time += dur.getWeeks() * Time.WEEK[ CD ]
Line_28 $$ Date endDate = dtEnd.getDate()-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_91 $$ time = startDate.getTime() - dateTime.getTime()-->Line_99 $$ time += dur.getWeeks() * Time.WEEK[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_83 $$ Trigger trigger = vAlarm.getTrigger()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_110 $$ long secondReminder = 0[ CD ]
Line_103 $$ time += dur.getSeconds() * Time.SECOND-->Line_92 $$ if (time < 0) [ FD ]
Line_22 $$ locationString = location.getValue()-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_7 $$ Summary summary = vEvent.getSummary()-->Line_9 $$ String title = ModelHintsUtil.trimString(CalendarBooking.class.getName(), "title", summary.getValue())[ FD ]
Line_149 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_129 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())-->Line_136 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)[ FD ]
Line_111 $$ String secondReminderType = null-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_111 $$ String secondReminderType = null-->Line_118 $$ secondReminderType = reminderTypes[1][ FD ]
Line_112 $$ if (i > 0) -->Line_114 $$ firstReminderType = reminderTypes[0][ CD ]
Line_157 $$ if (calendarBooking == null) -->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ CD ]
Line_33 $$ long time = endDate.getTime()-->Line_92 $$ if (time < 0) [ FD ]
Line_86 $$ Dur dur = trigger.getDuration()-->Line_99 $$ time += dur.getWeeks() * Time.WEEK[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_72 $$ long[] reminders = new long[componentList.size()][ CD ]
Line_67 $$ recurrence = recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString())-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_100 $$ time += dur.getDays() * Time.DAY-->Line_101 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_156 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_74 $$ int i = 0[ CD ]
Line_117 $$ secondReminder = reminders[1]-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_48 $$ ListIterator<Date> listIterator = dateList.listIterator()-->Line_59 $$ if (listIterator.hasNext()) [ FD ]
Line_55 $$ int hour = jCalendar.get(java.util.Calendar.HOUR_OF_DAY)-->Line_58 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_39 $$ if (rrule != null) -->Line_42 $$ if (!propertyList.isEmpty()) [ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) [ CD ]
Line_31 $$ if (isICalDateOnly(dtStart)) -->Line_33 $$ long time = endDate.getTime()[ CD ]
Line_151 $$ ServiceContext serviceContext = new ServiceContext()-->Line_153 $$ serviceContext.setAddGuestPermissions(true)[ FD ]
Line_52 $$ int year = jCalendar.get(java.util.Calendar.YEAR)-->Line_58 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_14 $$ Description description = vEvent.getDescription()-->Line_15 $$ if (description != null) [ FD ]
Line_39 $$ if (rrule != null) -->Line_41 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)[ CD ]
Line_110 $$ long secondReminder = 0-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_133 $$ ServiceContext serviceContext = new ServiceContext()[ CD ]
Line_40 $$ recurrence = StringUtil.trim(rrule.toString())-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_130 $$ if ((attendeeUser == null) || (calendar.getUserId() == attendeeUser.getUserId())) [ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_155 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ CD ]
Line_147 $$ if (uid != null) -->Line_149 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)[ CD ]
Line_33 $$ long time = endDate.getTime()-->Line_103 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_155 $$ serviceContext.setAttribute("vEventUid", vEventUidValue)[ FD ]
Line_142 $$ long[] childCalendarIdsArray = ArrayUtil.toArray(childCalendarIds.toArray(new Long[childCalendarIds.size()]))-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_124 $$ Attendee attendee = iterator.next()[ FD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_52 $$ int year = jCalendar.get(java.util.Calendar.YEAR)[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_41 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)[ FD ]
Line_114 $$ firstReminderType = reminderTypes[0]-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_118 $$ secondReminderType = reminderTypes[1]-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_109 $$ String firstReminderType = null-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_108 $$ long firstReminder = 0-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_152 $$ serviceContext.setAddGroupPermissions(true)[ CD ]
Line_56 $$ int minute = jCalendar.get(java.util.Calendar.MINUTE)-->Line_58 $$ sb.append(String.format(_EXDATE_FORMAT, year, month, day, hour, minute, second))[ FD ]
Line_48 $$ ListIterator<Date> listIterator = dateList.listIterator()-->Line_49 $$ while (listIterator.hasNext()) [ FD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_134 $$ serviceContext.setCompanyId(calendar.getCompanyId())[ CD ]
Line_43 $$ StringBundler sb = new StringBundler()-->Line_64 $$ sb.append(StringPool.COMMA)[ FD ]
Line_99 $$ time += dur.getWeeks() * Time.WEEK-->Line_102 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_28 $$ Date endDate = dtEnd.getDate()-->Line_34 $$ endDate.setTime(time - 1)[ FD ]
Line_33 $$ long time = endDate.getTime()-->Line_101 $$ time += dur.getHours() * Time.HOUR[ FD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_54 $$ int day = jCalendar.get(java.util.Calendar.DATE)[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_20 $$ Location location = vEvent.getLocation()[ CD ]
Line_51 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_57 $$ int second = jCalendar.get(java.util.Calendar.SECOND)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_108 $$ long firstReminder = 0[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)[ CD ]
Line_84 $$ long time = 0-->Line_99 $$ time += dur.getWeeks() * Time.WEEK[ FD ]
Line_38 $$ String recurrence = StringPool.BLANK-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_76 $$ VAlarm vAlarm = iterator.next()[ FD ]
Line_21 $$ if (location != null) -->Line_22 $$ locationString = location.getValue()[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_122 $$ List<Long> childCalendarIds = new ArrayList()[ CD ]
Line_90 $$ if (dateTime != null) -->Line_101 $$ time += dur.getHours() * Time.HOUR[ CD ]
Line_136 $$ CalendarResource calendarResource = CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(), serviceContext)-->Line_140 $$ childCalendarIds.add(calendarResource.getDefaultCalendarId())[ FD ]
Line_85 $$ DateTime dateTime = trigger.getDateTime()-->Line_90 $$ if (dateTime != null) [ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_6 $$ Map<Locale, String> titleMap = new HashMap()[ CD ]
Line_45 $$ while (iterator.hasNext()) -->Line_49 $$ while (listIterator.hasNext()) [ CD ]
Line_44 $$ Iterator<ExDate> iterator = propertyList.iterator()-->Line_124 $$ Attendee attendee = iterator.next()[ FD ]
Line_124 $$ Attendee attendee = iterator.next()-->Line_125 $$ URI uri = attendee.getCalAddress()[ FD ]
Line_27 $$ DtEnd dtEnd = vEvent.getEndDate()-->Line_28 $$ Date endDate = dtEnd.getDate()[ FD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_55 $$ int hour = jCalendar.get(java.util.Calendar.HOUR_OF_DAY)[ CD ]
Line_15 $$ if (description != null) -->Line_16 $$ descriptionMap.put(user.getLocale(), description.getValue())[ CD ]
Line_99 $$ time += dur.getWeeks() * Time.WEEK-->Line_100 $$ time += dur.getDays() * Time.DAY[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_157 $$ if (calendarBooking == null) [ CD ]
Line_38 $$ String recurrence = StringPool.BLANK-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_45 $$ while (iterator.hasNext()) -->Line_47 $$ DateList dateList = exDate.getDates()[ CD ]
Line_33 $$ long time = endDate.getTime()-->Line_102 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_147 $$ if (uid != null) [ CD ]
Line_40 $$ recurrence = StringUtil.trim(rrule.toString())-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_100 $$ time += dur.getDays() * Time.DAY-->Line_103 $$ time += dur.getSeconds() * Time.SECOND[ FD ]
Line_125 $$ URI uri = attendee.getCalAddress()-->Line_129 $$ User attendeeUser = UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(), uri.getSchemeSpecificPart())[ FD ]
Line_26 $$ Date startDate = dtStart.getDate()-->Line_158 $$ CalendarBookingServiceUtil.addCalendarBooking(calendarId, childCalendarIdsArray, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_8 $$ if (summary != null) -->Line_9 $$ String title = ModelHintsUtil.trimString(CalendarBooking.class.getName(), "title", summary.getValue())[ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_27 $$ DtEnd dtEnd = vEvent.getEndDate()[ CD ]
Line_76 $$ VAlarm vAlarm = iterator.next()-->Line_83 $$ Trigger trigger = vAlarm.getTrigger()[ FD ]
Line_41 $$ PropertyList propertyList = vEvent.getProperties(Property.EXDATE)-->Line_44 $$ Iterator<ExDate> iterator = propertyList.iterator()[ FD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_130 $$ if ((attendeeUser == null) || (calendar.getUserId() == attendeeUser.getUserId())) [ CD ]
Line_145 $$ String vEventUidValue = null-->Line_149 $$ calendarBooking = CalendarBookingLocalServiceUtil.fetchCalendarBooking(calendarId, vEventUidValue)[ FD ]
Line_49 $$ while (listIterator.hasNext()) -->Line_50 $$ Date date = listIterator.next()[ CD ]
Line_39 $$ if (rrule != null) -->Line_40 $$ recurrence = StringUtil.trim(rrule.toString())[ CD ]
Line_90 $$ if (dateTime != null) -->Line_100 $$ time += dur.getDays() * Time.DAY[ CD ]
Line_9 $$ String title = ModelHintsUtil.trimString(CalendarBooking.class.getName(), "title", summary.getValue())-->Line_10 $$ titleMap.put(user.getLocale(), title)[ FD ]
Line_26 $$ Date startDate = dtStart.getDate()-->Line_91 $$ time = startDate.getTime() - dateTime.getTime()[ FD ]
Line_3 $$ Calendar calendar = CalendarLocalServiceUtil.getCalendar(calendarId)-->Line_134 $$ serviceContext.setCompanyId(calendar.getCompanyId())[ FD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_77 $$ Action action = vAlarm.getAction()[ CD ]
Line_84 $$ long time = 0-->Line_92 $$ if (time < 0) [ FD ]
Line_84 $$ long time = 0-->Line_102 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_156 $$ serviceContext.setScopeGroupId(calendar.getGroupId())[ FD ]
Line_100 $$ time += dur.getDays() * Time.DAY-->Line_102 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_32 $$ allDay = true-->Line_160 $$ CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(), calendarId, childCalendarIdsArray, titleMap, descriptionMap, locationString, startDate.getTime(), endDate.getTime(), allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_101 $$ time += dur.getHours() * Time.HOUR-->Line_102 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_31 $$ if (isICalDateOnly(dtStart)) [ CD ]
Line_31 $$ if (isICalDateOnly(dtStart)) -->Line_34 $$ endDate.setTime(time - 1)[ CD ]
Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) -->Line_137 $$ if (calendarResource == null) [ CD ]
Line_90 $$ if (dateTime != null) -->Line_92 $$ if (time < 0) [ CD ]
Line_7 $$ Summary summary = vEvent.getSummary()-->Line_8 $$ if (summary != null) [ FD ]
Line_109 $$ String firstReminderType = null-->Line_114 $$ firstReminderType = reminderTypes[0][ FD ]
Line_110 $$ long secondReminder = 0-->Line_117 $$ secondReminder = reminders[1][ FD ]
Line_33 $$ long time = endDate.getTime()-->Line_99 $$ time += dur.getWeeks() * Time.WEEK[ FD ]
Line_147 $$ if (uid != null) -->Line_148 $$ vEventUidValue = uid.getValue()[ CD ]
Line_75 $$ for (Iterator<VAlarm> iterator = componentList.iterator(); iterator.hasNext(); ) -->Line_123 $$ for (Iterator<Attendee> iterator = propertyList.iterator(); iterator.hasNext(); ) [ FD ]
Line_86 $$ Dur dur = trigger.getDuration()-->Line_102 $$ time += dur.getMinutes() * Time.MINUTE[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_73 $$ String[] reminderTypes = new String[componentList.size()][ CD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_112 $$ if (i > 0) [ CD ]
Line_146 $$ Uid uid = vEvent.getUid()-->Line_147 $$ if (uid != null) [ FD ]
Line_133 $$ ServiceContext serviceContext = new ServiceContext()-->Line_152 $$ serviceContext.setAddGroupPermissions(true)[ FD ]
Line_2 $$ protected void importICalEvent(long calendarId, VEvent vEvent) throws Exception -->Line_26 $$ Date startDate = dtStart.getDate()[ CD ]
Line_51 $$ java.util.Calendar jCalendar = JCalendarUtil.getJCalendar(date.getTime())-->Line_55 $$ int hour = jCalendar.get(java.util.Calendar.HOUR_OF_DAY)[ FD ]
