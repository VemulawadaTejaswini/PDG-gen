Line_5 $$ AtomicInteger counter = new AtomicInteger()-->Line_15 $$ int initialCount = counter.get()[ FD ]
Line_2 $$ public void testCounter() throws Exception -->Line_25 $$ startLatch.countDown()[ CD ]
Line_2 $$ public void testCounter() throws Exception -->Line_7 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)[ CD ]
Line_2 $$ public void testCounter() throws Exception -->Line_9 $$ for (int i = 0; i < totalTasks; i++) [ CD ]
Line_2 $$ public void testCounter() throws Exception -->Line_8 $$ List<Future<?>> futures = new ArrayList()[ CD ]
Line_22 $$ for (Future<?> future : futures) -->Line_30 $$ assertTrue(future.isDone())[ FD ]
Line_5 $$ AtomicInteger counter = new AtomicInteger()-->Line_27 $$ assertEquals(counter.get(), totalTasks)[ FD ]
Line_4 $$ int totalTasks = 100_000-->Line_27 $$ assertEquals(counter.get(), totalTasks)[ FD ]
Line_10 $$ int taskNumber = i-->Line_14 $$ assertFalse(futures.get(taskNumber).isDone())[ FD ]
Line_2 $$ public void testCounter() throws Exception -->Line_4 $$ int totalTasks = 100_000[ CD ]
Line_5 $$ AtomicInteger counter = new AtomicInteger()-->Line_16 $$ counter.set(initialCount + 1)[ FD ]
Line_22 $$ for (Future<?> future : futures) -->Line_23 $$ assertFalse(future.isDone())[ FD ]
Line_3 $$ PrioritizedFifoExecutor<Runnable> executor = new PrioritizedFifoExecutor(this.executor, 1, DUMMY_COMPARATOR)-->Line_11 $$ futures.add(executor.submit(() -> [ FD ]
Line_8 $$ List<Future<?>> futures = new ArrayList()-->Line_14 $$ assertFalse(futures.get(taskNumber).isDone())[ FD ]
Line_6 $$ CountDownLatch startLatch = new CountDownLatch(1)-->Line_13 $$ awaitUninterruptibly(startLatch, 1, TimeUnit.MINUTES)[ FD ]
Line_2 $$ public void testCounter() throws Exception -->Line_28 $$ futures.get(futures.size() - 1).get(1, TimeUnit.MINUTES)[ CD ]
Line_4 $$ int totalTasks = 100_000-->Line_9 $$ for (int i = 0; i < totalTasks; i++) [ FD ]
Line_2 $$ public void testCounter() throws Exception -->Line_5 $$ AtomicInteger counter = new AtomicInteger()[ CD ]
Line_9 $$ for (int i = 0; i < totalTasks; i++) -->Line_10 $$ int taskNumber = i[ CD ]
Line_2 $$ public void testCounter() throws Exception -->Line_26 $$ awaitUninterruptibly(completeLatch, 1, TimeUnit.MINUTES)[ CD ]
Line_2 $$ public void testCounter() throws Exception -->Line_27 $$ assertEquals(counter.get(), totalTasks)[ CD ]
Line_7 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)-->Line_26 $$ awaitUninterruptibly(completeLatch, 1, TimeUnit.MINUTES)[ FD ]
Line_2 $$ public void testCounter() throws Exception -->Line_3 $$ PrioritizedFifoExecutor<Runnable> executor = new PrioritizedFifoExecutor(this.executor, 1, DUMMY_COMPARATOR)[ CD ]
Line_2 $$ public void testCounter() throws Exception -->Line_6 $$ CountDownLatch startLatch = new CountDownLatch(1)[ CD ]
Line_6 $$ CountDownLatch startLatch = new CountDownLatch(1)-->Line_25 $$ startLatch.countDown()[ FD ]
Line_7 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)-->Line_18 $$ completeLatch.countDown()[ FD ]
Line_9 $$ for (int i = 0; i < totalTasks; i++) -->Line_11 $$ futures.add(executor.submit(() -> [ CD ]
Line_8 $$ List<Future<?>> futures = new ArrayList()-->Line_11 $$ futures.add(executor.submit(() -> [ FD ]
Line_8 $$ List<Future<?>> futures = new ArrayList()-->Line_28 $$ futures.get(futures.size() - 1).get(1, TimeUnit.MINUTES)[ FD ]
