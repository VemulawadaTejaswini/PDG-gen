Line_7 $$ AtomicInteger counter = new AtomicInteger()-->Line_20 $$ counter.set(initialCount + 1)[ FD ]
Line_6 $$ int totalTasks = 100_000-->Line_32 $$ assertEquals(counter.get(), totalTasks)[ FD ]
Line_26 $$ for (Future<?> future : futures) -->Line_27 $$ assertFalse(future.isDone())[ FD ]
Line_10 $$ List<Future<?>> futures = new ArrayList()-->Line_13 $$ futures.add(executor.submit(() -> [ FD ]
Line_7 $$ AtomicInteger counter = new AtomicInteger()-->Line_32 $$ assertEquals(counter.get(), totalTasks)[ FD ]
Line_12 $$ int taskNumber = i-->Line_17 $$ assertFalse(futures.get(taskNumber).isDone())[ FD ]
Line_10 $$ List<Future<?>> futures = new ArrayList()-->Line_17 $$ assertFalse(futures.get(taskNumber).isDone())[ FD ]
Line_11 $$ for (int i = 0; i < totalTasks; i++) -->Line_12 $$ int taskNumber = i[ CD ]
Line_9 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)-->Line_31 $$ awaitUninterruptibly(completeLatch, 1, TimeUnit.MINUTES)[ FD ]
Line_11 $$ for (int i = 0; i < totalTasks; i++) -->Line_13 $$ futures.add(executor.submit(() -> [ CD ]
Line_6 $$ int totalTasks = 100_000-->Line_11 $$ for (int i = 0; i < totalTasks; i++) [ FD ]
Line_26 $$ for (Future<?> future : futures) -->Line_37 $$ assertTrue(future.isDone())[ FD ]
Line_9 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)-->Line_22 $$ completeLatch.countDown()[ FD ]
