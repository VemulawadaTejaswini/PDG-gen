Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_19 $$ _resourceBlockService.setIndividualScopePermissions(themeDisplay.getCompanyId(), resourceGroupId, selResource, GetterUtil.getLong(resourcePrimKey), roleIdsToActionIds)[ FD ]
Line_13 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_25 $$ _resourcePermissionService.setIndividualResourcePermissions(resourceGroupId, themeDisplay.getCompanyId(), selResource, resourcePrimKey, roleIdsToActionIds)[ FD ]
Line_8 $$ if (Validator.isNotNull(modelResource)) -->Line_9 $$ selResource = modelResource[ CD ]
Line_16 $$ List<String> actionIds = getActionIdsList(actionRequest, roleId, true)-->Line_17 $$ roleIdsToActionIds.put(roleId, actionIds.toArray(new String[actionIds.size()]))[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_22 $$ String[] actionIds = getActionIds(actionRequest, roleId, false)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_14 $$ if (_resourceBlockLocalService.isSupported(selResource)) [ CD ]
Line_11 $$ long resourceGroupId = ParamUtil.getLong(actionRequest, "resourceGroupId", themeDisplay.getScopeGroupId())-->Line_25 $$ _resourcePermissionService.setIndividualResourcePermissions(resourceGroupId, themeDisplay.getCompanyId(), selResource, resourcePrimKey, roleIdsToActionIds)[ FD ]
Line_12 $$ String resourcePrimKey = ParamUtil.getString(actionRequest, "resourcePrimKey")-->Line_25 $$ _resourcePermissionService.setIndividualResourcePermissions(resourceGroupId, themeDisplay.getCompanyId(), selResource, resourcePrimKey, roleIdsToActionIds)[ FD ]
Line_14 $$ if (_resourceBlockLocalService.isSupported(selResource)) -->Line_19 $$ _resourceBlockService.setIndividualScopePermissions(themeDisplay.getCompanyId(), resourceGroupId, selResource, GetterUtil.getLong(resourcePrimKey), roleIdsToActionIds)[ CD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ String resourcePrimKey = ParamUtil.getString(actionRequest, "resourcePrimKey")[ CD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_6 $$ long[] roleIds = StringUtil.split(ParamUtil.getString(actionRequest, "rolesSearchContainerPrimaryKeys"), 0L)[ CD ]
Line_29 $$ PermissionPropagator permissionPropagator = portlet.getPermissionPropagatorInstance()-->Line_30 $$ if (permissionPropagator != null) [ FD ]
Line_5 $$ String modelResource = ParamUtil.getString(actionRequest, "modelResource")-->Line_9 $$ selResource = modelResource[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_11 $$ long resourceGroupId = ParamUtil.getLong(actionRequest, "resourceGroupId", themeDisplay.getScopeGroupId())[ CD ]
Line_15 $$ for (long roleId : roleIds) -->Line_23 $$ roleIdsToActionIds.put(roleId, actionIds)[ FD ]
Line_29 $$ PermissionPropagator permissionPropagator = portlet.getPermissionPropagatorInstance()-->Line_31 $$ permissionPropagator.propagateRolePermissions(actionRequest, modelResource, resourcePrimKey, roleIds)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_36 $$ PortletPreferences portletPreferences = ActionUtil.getLayoutPortletSetup(actionRequest, portlet)[ FD ]
Line_15 $$ for (long roleId : roleIds) -->Line_17 $$ roleIdsToActionIds.put(roleId, actionIds.toArray(new String[actionIds.size()]))[ FD ]
Line_12 $$ String resourcePrimKey = ParamUtil.getString(actionRequest, "resourcePrimKey")-->Line_19 $$ _resourceBlockService.setIndividualScopePermissions(themeDisplay.getCompanyId(), resourceGroupId, selResource, GetterUtil.getLong(resourcePrimKey), roleIdsToActionIds)[ FD ]
Line_9 $$ selResource = modelResource-->Line_19 $$ _resourceBlockService.setIndividualScopePermissions(themeDisplay.getCompanyId(), resourceGroupId, selResource, GetterUtil.getLong(resourcePrimKey), roleIdsToActionIds)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_15 $$ for (long roleId : roleIds) -->Line_22 $$ String[] actionIds = getActionIds(actionRequest, roleId, false)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_27 $$ if (PropsValues.PERMISSIONS_PROPAGATION_ENABLED) -->Line_28 $$ Portlet portlet = _portletLocalService.getPortletById(themeDisplay.getCompanyId(), portletResource)[ CD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_6 $$ long[] roleIds = StringUtil.split(ParamUtil.getString(actionRequest, "rolesSearchContainerPrimaryKeys"), 0L)[ FD ]
Line_36 $$ PortletPreferences portletPreferences = ActionUtil.getLayoutPortletSetup(actionRequest, portlet)-->Line_37 $$ portletPreferences.store()[ FD ]
Line_7 $$ String selResource = PortletConstants.getRootPortletId(portletResource)-->Line_19 $$ _resourceBlockService.setIndividualScopePermissions(themeDisplay.getCompanyId(), resourceGroupId, selResource, GetterUtil.getLong(resourcePrimKey), roleIdsToActionIds)[ FD ]
Line_13 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_23 $$ roleIdsToActionIds.put(roleId, actionIds)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_5 $$ String modelResource = ParamUtil.getString(actionRequest, "modelResource")[ CD ]
Line_28 $$ Portlet portlet = _portletLocalService.getPortletById(themeDisplay.getCompanyId(), portletResource)-->Line_36 $$ PortletPreferences portletPreferences = ActionUtil.getLayoutPortletSetup(actionRequest, portlet)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_5 $$ String modelResource = ParamUtil.getString(actionRequest, "modelResource")[ FD ]
Line_16 $$ List<String> actionIds = getActionIdsList(actionRequest, roleId, true)-->Line_23 $$ roleIdsToActionIds.put(roleId, actionIds)[ FD ]
Line_9 $$ selResource = modelResource-->Line_25 $$ _resourcePermissionService.setIndividualResourcePermissions(resourceGroupId, themeDisplay.getCompanyId(), selResource, resourcePrimKey, roleIdsToActionIds)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_16 $$ List<String> actionIds = getActionIdsList(actionRequest, roleId, true)[ FD ]
Line_12 $$ String resourcePrimKey = ParamUtil.getString(actionRequest, "resourcePrimKey")-->Line_31 $$ permissionPropagator.propagateRolePermissions(actionRequest, modelResource, resourcePrimKey, roleIds)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_37 $$ portletPreferences.store()[ CD ]
Line_7 $$ String selResource = PortletConstants.getRootPortletId(portletResource)-->Line_25 $$ _resourcePermissionService.setIndividualResourcePermissions(resourceGroupId, themeDisplay.getCompanyId(), selResource, resourcePrimKey, roleIdsToActionIds)[ FD ]
Line_27 $$ if (PropsValues.PERMISSIONS_PROPAGATION_ENABLED) -->Line_29 $$ PermissionPropagator permissionPropagator = portlet.getPermissionPropagatorInstance()[ CD ]
Line_30 $$ if (permissionPropagator != null) -->Line_31 $$ permissionPropagator.propagateRolePermissions(actionRequest, modelResource, resourcePrimKey, roleIds)[ CD ]
Line_6 $$ long[] roleIds = StringUtil.split(ParamUtil.getString(actionRequest, "rolesSearchContainerPrimaryKeys"), 0L)-->Line_31 $$ permissionPropagator.propagateRolePermissions(actionRequest, modelResource, resourcePrimKey, roleIds)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_11 $$ long resourceGroupId = ParamUtil.getLong(actionRequest, "resourceGroupId", themeDisplay.getScopeGroupId())[ FD ]
Line_4 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")-->Line_7 $$ String selResource = PortletConstants.getRootPortletId(portletResource)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_36 $$ PortletPreferences portletPreferences = ActionUtil.getLayoutPortletSetup(actionRequest, portlet)[ CD ]
Line_7 $$ String selResource = PortletConstants.getRootPortletId(portletResource)-->Line_9 $$ selResource = modelResource[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_7 $$ String selResource = PortletConstants.getRootPortletId(portletResource)[ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_25 $$ _resourcePermissionService.setIndividualResourcePermissions(resourceGroupId, themeDisplay.getCompanyId(), selResource, resourcePrimKey, roleIdsToActionIds)[ FD ]
Line_9 $$ selResource = modelResource-->Line_14 $$ if (_resourceBlockLocalService.isSupported(selResource)) [ FD ]
Line_13 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_19 $$ _resourceBlockService.setIndividualScopePermissions(themeDisplay.getCompanyId(), resourceGroupId, selResource, GetterUtil.getLong(resourcePrimKey), roleIdsToActionIds)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_8 $$ if (Validator.isNotNull(modelResource)) [ CD ]
Line_5 $$ String modelResource = ParamUtil.getString(actionRequest, "modelResource")-->Line_8 $$ if (Validator.isNotNull(modelResource)) [ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_13 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()[ CD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ String resourcePrimKey = ParamUtil.getString(actionRequest, "resourcePrimKey")[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")[ CD ]
Line_14 $$ if (_resourceBlockLocalService.isSupported(selResource)) -->Line_25 $$ _resourcePermissionService.setIndividualResourcePermissions(resourceGroupId, themeDisplay.getCompanyId(), selResource, resourcePrimKey, roleIdsToActionIds)[ CD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_31 $$ permissionPropagator.propagateRolePermissions(actionRequest, modelResource, resourcePrimKey, roleIds)[ FD ]
Line_28 $$ Portlet portlet = _portletLocalService.getPortletById(themeDisplay.getCompanyId(), portletResource)-->Line_29 $$ PermissionPropagator permissionPropagator = portlet.getPermissionPropagatorInstance()[ FD ]
Line_7 $$ String selResource = PortletConstants.getRootPortletId(portletResource)-->Line_14 $$ if (_resourceBlockLocalService.isSupported(selResource)) [ FD ]
Line_15 $$ for (long roleId : roleIds) -->Line_16 $$ List<String> actionIds = getActionIdsList(actionRequest, roleId, true)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_11 $$ long resourceGroupId = ParamUtil.getLong(actionRequest, "resourceGroupId", themeDisplay.getScopeGroupId())[ FD ]
Line_11 $$ long resourceGroupId = ParamUtil.getLong(actionRequest, "resourceGroupId", themeDisplay.getScopeGroupId())-->Line_19 $$ _resourceBlockService.setIndividualScopePermissions(themeDisplay.getCompanyId(), resourceGroupId, selResource, GetterUtil.getLong(resourcePrimKey), roleIdsToActionIds)[ FD ]
Line_2 $$ public void updateRolePermissions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_27 $$ if (PropsValues.PERMISSIONS_PROPAGATION_ENABLED) [ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_28 $$ Portlet portlet = _portletLocalService.getPortletById(themeDisplay.getCompanyId(), portletResource)[ FD ]
Line_27 $$ if (PropsValues.PERMISSIONS_PROPAGATION_ENABLED) -->Line_30 $$ if (permissionPropagator != null) [ CD ]
Line_5 $$ String modelResource = ParamUtil.getString(actionRequest, "modelResource")-->Line_31 $$ permissionPropagator.propagateRolePermissions(actionRequest, modelResource, resourcePrimKey, roleIds)[ FD ]
Line_13 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_17 $$ roleIdsToActionIds.put(roleId, actionIds.toArray(new String[actionIds.size()]))[ FD ]
Line_4 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")-->Line_28 $$ Portlet portlet = _portletLocalService.getPortletById(themeDisplay.getCompanyId(), portletResource)[ FD ]
