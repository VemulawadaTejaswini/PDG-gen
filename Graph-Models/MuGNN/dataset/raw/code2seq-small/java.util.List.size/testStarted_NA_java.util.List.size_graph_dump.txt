Line_20 $$ for (int i = myStartedSuites.size() - 1; i >= idx; i--) -->Line_21 $$ currentClass = (Description) myStartedSuites.remove(i)[ CD ]
Line_28 $$ final String className = getShortName(fqName)-->Line_30 $$ myPrintStream.println("##teamcity[testSuiteStarted name=\'" + escapeName(className) + "\'" + (parents == null ? getClassLocation(fqName) : "") + "]")[ FD ]
Line_27 $$ final String fqName = JUnit4ReflectionUtil.getClassName(descriptionFromHistory)-->Line_28 $$ final String className = getShortName(fqName)[ FD ]
Line_12 $$ while (idx < myStartedSuites.size() && idx < parentsHierarchy.size()) -->Line_14 $$ currentParent = (Description) parentsHierarchy.get(parentsHierarchy.size() - 1 - idx)[ CD ]
Line_5 $$ List parentsHierarchy = parents != null && !parents.isEmpty() ? (List) parents.remove(0) : Collections.singletonList(Description.createSuiteDescription(classFQN, new Annotation[0]))-->Line_6 $$ final String methodName = getFullMethodName(description, parentsHierarchy.isEmpty() ? null : (Description) parentsHierarchy.get(parentsHierarchy.size() - 1))[ FD ]
Line_11 $$ Description currentParent-->Line_15 $$ if (isHierarchyDifferent(parents, currentClass, currentParent)) [ FD ]
Line_5 $$ List parentsHierarchy = parents != null && !parents.isEmpty() ? (List) parents.remove(0) : Collections.singletonList(Description.createSuiteDescription(classFQN, new Annotation[0]))-->Line_12 $$ while (idx < myStartedSuites.size() && idx < parentsHierarchy.size()) [ FD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_5 $$ List parentsHierarchy = parents != null && !parents.isEmpty() ? (List) parents.remove(0) : Collections.singletonList(Description.createSuiteDescription(classFQN, new Annotation[0]))[ CD ]
Line_25 $$ for (int i = idx; i < parentsHierarchy.size(); i++) -->Line_28 $$ final String className = getShortName(fqName)[ CD ]
Line_20 $$ for (int i = myStartedSuites.size() - 1; i >= idx; i--) -->Line_23 $$ myPrintStream.println("##teamcity[testSuiteFinished name=\'" + escapeName(getShortName(JUnit4ReflectionUtil.getClassName(currentClass))) + "\']")[ CD ]
Line_20 $$ for (int i = myStartedSuites.size() - 1; i >= idx; i--) -->Line_25 $$ for (int i = idx; i < parentsHierarchy.size(); i++) [ FD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_34 $$ myPrintStream.println("##teamcity[testStarted name=\'" + escapeName(methodName) + "\' " + getTestMethodLocation(methodName, classFQN) + "]")[ CD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_35 $$ myCurrentTestStart = currentTime()[ CD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_3 $$ final String classFQN = JUnit4ReflectionUtil.getClassName(description)[ CD ]
Line_12 $$ while (idx < myStartedSuites.size() && idx < parentsHierarchy.size()) -->Line_18 $$ idx++[ CD ]
Line_5 $$ List parentsHierarchy = parents != null && !parents.isEmpty() ? (List) parents.remove(0) : Collections.singletonList(Description.createSuiteDescription(classFQN, new Annotation[0]))-->Line_26 $$ final Description descriptionFromHistory = (Description) parentsHierarchy.get(parentsHierarchy.size() - 1 - i)[ FD ]
Line_13 $$ currentClass = (Description) myStartedSuites.get(idx)-->Line_23 $$ myPrintStream.println("##teamcity[testSuiteFinished name=\'" + escapeName(getShortName(JUnit4ReflectionUtil.getClassName(currentClass))) + "\']")[ FD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_7 $$ if (methodName == null)[ CD ]
Line_10 $$ Description currentClass-->Line_23 $$ myPrintStream.println("##teamcity[testSuiteFinished name=\'" + escapeName(getShortName(JUnit4ReflectionUtil.getClassName(currentClass))) + "\']")[ FD ]
Line_6 $$ final String methodName = getFullMethodName(description, parentsHierarchy.isEmpty() ? null : (Description) parentsHierarchy.get(parentsHierarchy.size() - 1))-->Line_34 $$ myPrintStream.println("##teamcity[testStarted name=\'" + escapeName(methodName) + "\' " + getTestMethodLocation(methodName, classFQN) + "]")[ FD ]
Line_9 $$ int idx = 0-->Line_13 $$ currentClass = (Description) myStartedSuites.get(idx)[ FD ]
Line_25 $$ for (int i = idx; i < parentsHierarchy.size(); i++) -->Line_26 $$ final Description descriptionFromHistory = (Description) parentsHierarchy.get(parentsHierarchy.size() - 1 - i)[ CD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_6 $$ final String methodName = getFullMethodName(description, parentsHierarchy.isEmpty() ? null : (Description) parentsHierarchy.get(parentsHierarchy.size() - 1))[ CD ]
Line_12 $$ while (idx < myStartedSuites.size() && idx < parentsHierarchy.size()) -->Line_13 $$ currentClass = (Description) myStartedSuites.get(idx)[ CD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_4 $$ final List parents = (List) myParents.get(description)[ FD ]
Line_3 $$ final String classFQN = JUnit4ReflectionUtil.getClassName(description)-->Line_5 $$ List parentsHierarchy = parents != null && !parents.isEmpty() ? (List) parents.remove(0) : Collections.singletonList(Description.createSuiteDescription(classFQN, new Annotation[0]))[ FD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_10 $$ Description currentClass[ CD ]
Line_7 $$ if (methodName == null)-->Line_8 $$ return[ CD ]
Line_4 $$ final List parents = (List) myParents.get(description)-->Line_15 $$ if (isHierarchyDifferent(parents, currentClass, currentParent)) [ FD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_20 $$ for (int i = myStartedSuites.size() - 1; i >= idx; i--) [ CD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_25 $$ for (int i = idx; i < parentsHierarchy.size(); i++) [ CD ]
Line_26 $$ final Description descriptionFromHistory = (Description) parentsHierarchy.get(parentsHierarchy.size() - 1 - i)-->Line_27 $$ final String fqName = JUnit4ReflectionUtil.getClassName(descriptionFromHistory)[ FD ]
Line_27 $$ final String fqName = JUnit4ReflectionUtil.getClassName(descriptionFromHistory)-->Line_30 $$ myPrintStream.println("##teamcity[testSuiteStarted name=\'" + escapeName(className) + "\'" + (parents == null ? getClassLocation(fqName) : "") + "]")[ FD ]
Line_29 $$ if (!className.equals(myRootName)) -->Line_31 $$ myStartedSuites.add(descriptionFromHistory)[ CD ]
Line_5 $$ List parentsHierarchy = parents != null && !parents.isEmpty() ? (List) parents.remove(0) : Collections.singletonList(Description.createSuiteDescription(classFQN, new Annotation[0]))-->Line_14 $$ currentParent = (Description) parentsHierarchy.get(parentsHierarchy.size() - 1 - idx)[ FD ]
Line_10 $$ Description currentClass-->Line_13 $$ currentClass = (Description) myStartedSuites.get(idx)[ FD ]
Line_25 $$ for (int i = idx; i < parentsHierarchy.size(); i++) -->Line_27 $$ final String fqName = JUnit4ReflectionUtil.getClassName(descriptionFromHistory)[ CD ]
Line_13 $$ currentClass = (Description) myStartedSuites.get(idx)-->Line_21 $$ currentClass = (Description) myStartedSuites.remove(i)[ FD ]
Line_9 $$ int idx = 0-->Line_18 $$ idx++[ FD ]
Line_13 $$ currentClass = (Description) myStartedSuites.get(idx)-->Line_15 $$ if (isHierarchyDifferent(parents, currentClass, currentParent)) [ FD ]
Line_3 $$ final String classFQN = JUnit4ReflectionUtil.getClassName(description)-->Line_34 $$ myPrintStream.println("##teamcity[testStarted name=\'" + escapeName(methodName) + "\' " + getTestMethodLocation(methodName, classFQN) + "]")[ FD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_4 $$ final List parents = (List) myParents.get(description)[ CD ]
Line_14 $$ currentParent = (Description) parentsHierarchy.get(parentsHierarchy.size() - 1 - idx)-->Line_15 $$ if (isHierarchyDifferent(parents, currentClass, currentParent)) [ FD ]
Line_11 $$ Description currentParent-->Line_14 $$ currentParent = (Description) parentsHierarchy.get(parentsHierarchy.size() - 1 - idx)[ FD ]
Line_28 $$ final String className = getShortName(fqName)-->Line_29 $$ if (!className.equals(myRootName)) [ FD ]
Line_5 $$ List parentsHierarchy = parents != null && !parents.isEmpty() ? (List) parents.remove(0) : Collections.singletonList(Description.createSuiteDescription(classFQN, new Annotation[0]))-->Line_25 $$ for (int i = idx; i < parentsHierarchy.size(); i++) [ FD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_11 $$ Description currentParent[ CD ]
Line_26 $$ final Description descriptionFromHistory = (Description) parentsHierarchy.get(parentsHierarchy.size() - 1 - i)-->Line_31 $$ myStartedSuites.add(descriptionFromHistory)[ FD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_3 $$ final String classFQN = JUnit4ReflectionUtil.getClassName(description)[ FD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_6 $$ final String methodName = getFullMethodName(description, parentsHierarchy.isEmpty() ? null : (Description) parentsHierarchy.get(parentsHierarchy.size() - 1))[ FD ]
Line_10 $$ Description currentClass-->Line_21 $$ currentClass = (Description) myStartedSuites.remove(i)[ FD ]
Line_12 $$ while (idx < myStartedSuites.size() && idx < parentsHierarchy.size()) -->Line_15 $$ if (isHierarchyDifferent(parents, currentClass, currentParent)) [ CD ]
Line_4 $$ final List parents = (List) myParents.get(description)-->Line_5 $$ List parentsHierarchy = parents != null && !parents.isEmpty() ? (List) parents.remove(0) : Collections.singletonList(Description.createSuiteDescription(classFQN, new Annotation[0]))[ FD ]
Line_25 $$ for (int i = idx; i < parentsHierarchy.size(); i++) -->Line_29 $$ if (!className.equals(myRootName)) [ CD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_9 $$ int idx = 0[ CD ]
Line_21 $$ currentClass = (Description) myStartedSuites.remove(i)-->Line_23 $$ myPrintStream.println("##teamcity[testSuiteFinished name=\'" + escapeName(getShortName(JUnit4ReflectionUtil.getClassName(currentClass))) + "\']")[ FD ]
Line_20 $$ for (int i = myStartedSuites.size() - 1; i >= idx; i--) -->Line_21 $$ currentClass = (Description) myStartedSuites.remove(i)[ FD ]
Line_9 $$ int idx = 0-->Line_20 $$ for (int i = myStartedSuites.size() - 1; i >= idx; i--) [ FD ]
Line_6 $$ final String methodName = getFullMethodName(description, parentsHierarchy.isEmpty() ? null : (Description) parentsHierarchy.get(parentsHierarchy.size() - 1))-->Line_7 $$ if (methodName == null)[ FD ]
Line_29 $$ if (!className.equals(myRootName)) -->Line_30 $$ myPrintStream.println("##teamcity[testSuiteStarted name=\'" + escapeName(className) + "\'" + (parents == null ? getClassLocation(fqName) : "") + "]")[ CD ]
Line_2 $$ public void testStarted(Description description) throws Exception -->Line_12 $$ while (idx < myStartedSuites.size() && idx < parentsHierarchy.size()) [ CD ]
Line_10 $$ Description currentClass-->Line_15 $$ if (isHierarchyDifferent(parents, currentClass, currentParent)) [ FD ]
