Line_18 $$ minValue = bucket.getDocCount()-->Line_21 $$ if (bucket.getDocCount() == minValue) [ FD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue)).addAggregation(minBucket("min_bucket").setBucketsPaths("histo>_count")).execute().actionGet()-->Line_4 $$ assertSearchResponse(response)[ FD ]
Line_5 $$ Histogram histo = response.getAggregations().get("histo")-->Line_8 $$ List<? extends Bucket> buckets = histo.getBuckets()[ FD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_22 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_19 $$ minKeys = new ArrayList()-->Line_20 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_18 $$ minValue = bucket.getDocCount()[ FD ]
Line_21 $$ if (bucket.getDocCount() == minValue) -->Line_22 $$ minKeys.add(bucket.getKeyAsString())[ CD ]
Line_12 $$ for (int i = 0; i < numValueBuckets; ++i) -->Line_16 $$ assertThat(bucket.getDocCount(), equalTo(valueCounts[i]))[ CD ]
Line_17 $$ if (bucket.getDocCount() < minValue) -->Line_18 $$ minValue = bucket.getDocCount()[ CD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_16 $$ assertThat(bucket.getDocCount(), equalTo(valueCounts[i]))[ FD ]
Line_10 $$ List<String> minKeys = new ArrayList()-->Line_29 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ FD ]
Line_11 $$ double minValue = Double.POSITIVE_INFINITY-->Line_28 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ FD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_20 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_17 $$ if (bucket.getDocCount() < minValue) -->Line_21 $$ if (bucket.getDocCount() == minValue) [ CD ]
Line_19 $$ minKeys = new ArrayList()-->Line_29 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ FD ]
Line_5 $$ Histogram histo = response.getAggregations().get("histo")-->Line_6 $$ assertThat(histo, notNullValue())[ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_4 $$ assertSearchResponse(response)[ CD ]
Line_8 $$ List<? extends Bucket> buckets = histo.getBuckets()-->Line_9 $$ assertThat(buckets.size(), equalTo(numValueBuckets))[ FD ]
Line_11 $$ double minValue = Double.POSITIVE_INFINITY-->Line_17 $$ if (bucket.getDocCount() < minValue) [ FD ]
Line_11 $$ double minValue = Double.POSITIVE_INFINITY-->Line_21 $$ if (bucket.getDocCount() == minValue) [ FD ]
Line_25 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")-->Line_26 $$ assertThat(minBucketValue, notNullValue())[ FD ]
Line_12 $$ for (int i = 0; i < numValueBuckets; ++i) -->Line_13 $$ Histogram.Bucket bucket = buckets.get(i)[ CD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_14 $$ assertThat(bucket, notNullValue())[ FD ]
Line_10 $$ List<String> minKeys = new ArrayList()-->Line_22 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue)).addAggregation(minBucket("min_bucket").setBucketsPaths("histo>_count")).execute().actionGet()[ CD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_17 $$ if (bucket.getDocCount() < minValue) [ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_25 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")[ CD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_28 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ CD ]
Line_18 $$ minValue = bucket.getDocCount()-->Line_28 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_12 $$ for (int i = 0; i < numValueBuckets; ++i) [ CD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_6 $$ assertThat(histo, notNullValue())[ CD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_15 $$ assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) i * interval))[ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_10 $$ List<String> minKeys = new ArrayList()[ CD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_7 $$ assertThat(histo.getName(), equalTo("histo"))[ CD ]
Line_11 $$ double minValue = Double.POSITIVE_INFINITY-->Line_18 $$ minValue = bucket.getDocCount()[ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_27 $$ assertThat(minBucketValue.getName(), equalTo("min_bucket"))[ CD ]
Line_8 $$ List<? extends Bucket> buckets = histo.getBuckets()-->Line_13 $$ Histogram.Bucket bucket = buckets.get(i)[ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_9 $$ assertThat(buckets.size(), equalTo(numValueBuckets))[ CD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_29 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ CD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_21 $$ if (bucket.getDocCount() == minValue) [ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_8 $$ List<? extends Bucket> buckets = histo.getBuckets()[ CD ]
Line_12 $$ for (int i = 0; i < numValueBuckets; ++i) -->Line_13 $$ Histogram.Bucket bucket = buckets.get(i)[ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_5 $$ Histogram histo = response.getAggregations().get("histo")[ CD ]
Line_25 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")-->Line_28 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ FD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue)).addAggregation(minBucket("min_bucket").setBucketsPaths("histo>_count")).execute().actionGet()-->Line_5 $$ Histogram histo = response.getAggregations().get("histo")[ FD ]
Line_12 $$ for (int i = 0; i < numValueBuckets; ++i) -->Line_14 $$ assertThat(bucket, notNullValue())[ CD ]
Line_10 $$ List<String> minKeys = new ArrayList()-->Line_19 $$ minKeys = new ArrayList()[ FD ]
Line_17 $$ if (bucket.getDocCount() < minValue) -->Line_20 $$ minKeys.add(bucket.getKeyAsString())[ CD ]
Line_10 $$ List<String> minKeys = new ArrayList()-->Line_20 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_5 $$ Histogram histo = response.getAggregations().get("histo")-->Line_7 $$ assertThat(histo.getName(), equalTo("histo"))[ FD ]
Line_12 $$ for (int i = 0; i < numValueBuckets; ++i) -->Line_15 $$ assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) i * interval))[ CD ]
Line_25 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")-->Line_27 $$ assertThat(minBucketValue.getName(), equalTo("min_bucket"))[ FD ]
Line_17 $$ if (bucket.getDocCount() < minValue) -->Line_19 $$ minKeys = new ArrayList()[ CD ]
Line_19 $$ minKeys = new ArrayList()-->Line_22 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_26 $$ assertThat(minBucketValue, notNullValue())[ CD ]
Line_12 $$ for (int i = 0; i < numValueBuckets; ++i) -->Line_17 $$ if (bucket.getDocCount() < minValue) [ CD ]
Line_2 $$ public void testDocCountTopLevel() throws Exception -->Line_11 $$ double minValue = Double.POSITIVE_INFINITY[ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue)).addAggregation(minBucket("min_bucket").setBucketsPaths("histo>_count")).execute().actionGet()-->Line_25 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")[ FD ]
Line_18 $$ minValue = bucket.getDocCount()-->Line_17 $$ if (bucket.getDocCount() < minValue) [ FD ]
Line_25 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")-->Line_29 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ FD ]
