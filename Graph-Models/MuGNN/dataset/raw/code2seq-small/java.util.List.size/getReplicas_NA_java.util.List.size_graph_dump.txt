Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_11 $$ while (endpoints.size() < replicas) [ CD ]
Line_15 $$ if (!usedGroups.get(group)) -->Line_17 $$ usedGroups.set(group)[ CD ]
Line_7 $$ token = sortedTokens.ceilingKey(token)-->Line_9 $$ token = sortedTokens.firstKey()[ FD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_8 $$ if (token == null)[ CD ]
Line_14 $$ int group = groupMap.get(ep)-->Line_15 $$ if (!usedGroups.get(group)) [ FD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_5 $$ if (sortedTokens.isEmpty())[ CD ]
Line_3 $$ List<Unit> endpoints = new ArrayList<Unit>(replicas)-->Line_5 $$ if (sortedTokens.isEmpty())[ FD ]
Line_9 $$ token = sortedTokens.firstKey()-->Line_10 $$ Iterator<Unit> iter = Iterables.concat(sortedTokens.tailMap(token, true).values(), sortedTokens.values()).iterator()[ FD ]
Line_3 $$ List<Unit> endpoints = new ArrayList<Unit>(replicas)-->Line_11 $$ while (endpoints.size() < replicas) [ FD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_5 $$ if (sortedTokens.isEmpty())[ FD ]
Line_11 $$ while (endpoints.size() < replicas) -->Line_14 $$ int group = groupMap.get(ep)[ CD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_20 $$ return endpoints[ CD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_3 $$ List<Unit> endpoints = new ArrayList<Unit>(replicas)[ CD ]
Line_4 $$ BitSet usedGroups = new BitSet()-->Line_15 $$ if (!usedGroups.get(group)) [ FD ]
Line_15 $$ if (!usedGroups.get(group)) -->Line_16 $$ endpoints.add(ep)[ CD ]
Line_14 $$ int group = groupMap.get(ep)-->Line_17 $$ usedGroups.set(group)[ FD ]
Line_5 $$ if (sortedTokens.isEmpty())-->Line_6 $$ return endpoints[ CD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_4 $$ BitSet usedGroups = new BitSet()[ CD ]
Line_8 $$ if (token == null)-->Line_9 $$ token = sortedTokens.firstKey()[ CD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_10 $$ Iterator<Unit> iter = Iterables.concat(sortedTokens.tailMap(token, true).values(), sortedTokens.values()).iterator()[ FD ]
Line_7 $$ token = sortedTokens.ceilingKey(token)-->Line_10 $$ Iterator<Unit> iter = Iterables.concat(sortedTokens.tailMap(token, true).values(), sortedTokens.values()).iterator()[ FD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_10 $$ Iterator<Unit> iter = Iterables.concat(sortedTokens.tailMap(token, true).values(), sortedTokens.values()).iterator()[ CD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_7 $$ token = sortedTokens.ceilingKey(token)[ FD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_8 $$ if (token == null)[ FD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_7 $$ token = sortedTokens.ceilingKey(token)[ CD ]
Line_2 $$ public List<Unit> getReplicas(Token token, NavigableMap<Token, Unit> sortedTokens) -->Line_9 $$ token = sortedTokens.firstKey()[ FD ]
Line_3 $$ List<Unit> endpoints = new ArrayList<Unit>(replicas)-->Line_16 $$ endpoints.add(ep)[ FD ]
Line_7 $$ token = sortedTokens.ceilingKey(token)-->Line_8 $$ if (token == null)[ FD ]
Line_11 $$ while (endpoints.size() < replicas) -->Line_15 $$ if (!usedGroups.get(group)) [ CD ]
Line_4 $$ BitSet usedGroups = new BitSet()-->Line_17 $$ usedGroups.set(group)[ FD ]
