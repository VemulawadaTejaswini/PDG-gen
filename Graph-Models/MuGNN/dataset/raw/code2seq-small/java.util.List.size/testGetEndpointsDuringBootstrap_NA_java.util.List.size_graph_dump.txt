Line_6 $$ TokenMetadata tmd = new TokenMetadata()-->Line_23 $$ tmd.addBootstrapToken(bsToken, bootstrapEndpoint)[ FD ]
Line_25 $$ for (String keyspaceName : Schema.instance.getNonSystemKeyspaces()) -->Line_26 $$ strategy = getStrategy(keyspaceName, tmd)[ FD ]
Line_28 $$ int replicationFactor = strategy.getReplicationFactor()-->Line_32 $$ for (int j = 0; j < replicationFactor; j++) [ FD ]
Line_25 $$ for (String keyspaceName : Schema.instance.getNonSystemKeyspaces()) -->Line_30 $$ Collection<InetAddress> endpoints = tmd.getWriteEndpoints(keyTokens[i], keyspaceName, strategy.getNaturalEndpoints(keyTokens[i]))[ FD ]
Line_6 $$ TokenMetadata tmd = new TokenMetadata()-->Line_17 $$ tmd.updateNormalToken(endpointTokens[i], ep)[ FD ]
Line_26 $$ strategy = getStrategy(keyspaceName, tmd)-->Line_28 $$ int replicationFactor = strategy.getReplicationFactor()[ FD ]
Line_6 $$ TokenMetadata tmd = new TokenMetadata()-->Line_30 $$ Collection<InetAddress> endpoints = tmd.getWriteEndpoints(keyTokens[i], keyspaceName, strategy.getNaturalEndpoints(keyTokens[i]))[ FD ]
Line_24 $$ AbstractReplicationStrategy strategy = null-->Line_26 $$ strategy = getStrategy(keyspaceName, tmd)[ FD ]
Line_6 $$ TokenMetadata tmd = new TokenMetadata()-->Line_26 $$ strategy = getStrategy(keyspaceName, tmd)[ FD ]
Line_15 $$ for (int i = 0; i < endpointTokens.length; i++) -->Line_17 $$ tmd.updateNormalToken(endpointTokens[i], ep)[ CD ]
Line_29 $$ for (int i = 0; i < keyTokens.length; i++) -->Line_30 $$ Collection<InetAddress> endpoints = tmd.getWriteEndpoints(keyTokens[i], keyspaceName, strategy.getNaturalEndpoints(keyTokens[i]))[ CD ]
Line_10 $$ for (int i = 0; i < RING_SIZE; i++) -->Line_11 $$ endpointTokens[i] = new BigIntegerToken(String.valueOf(RING_SIZE * 2 * i))[ CD ]
Line_26 $$ strategy = getStrategy(keyspaceName, tmd)-->Line_30 $$ Collection<InetAddress> endpoints = tmd.getWriteEndpoints(keyTokens[i], keyspaceName, strategy.getNaturalEndpoints(keyTokens[i]))[ FD ]
Line_10 $$ for (int i = 0; i < RING_SIZE; i++) -->Line_12 $$ keyTokens[i] = new BigIntegerToken(String.valueOf(RING_SIZE * 2 * i + RING_SIZE))[ CD ]
Line_14 $$ List<InetAddress> hosts = new ArrayList<InetAddress>()-->Line_18 $$ hosts.add(ep)[ FD ]
Line_29 $$ for (int i = 0; i < keyTokens.length; i++) -->Line_31 $$ assertTrue(endpoints.size() >= replicationFactor)[ CD ]
Line_22 $$ InetAddress bootstrapEndpoint = InetAddress.getByName("127.0.0.11")-->Line_40 $$ assertTrue(endpoints.contains(bootstrapEndpoint))[ FD ]
Line_16 $$ InetAddress ep = InetAddress.getByName("127.0.0." + String.valueOf(i + 1))-->Line_17 $$ tmd.updateNormalToken(endpointTokens[i], ep)[ FD ]
Line_7 $$ TokenMetadata oldTmd = StorageServiceAccessor.setTokenMetadata(tmd)-->Line_43 $$ StorageServiceAccessor.setTokenMetadata(oldTmd)[ FD ]
Line_22 $$ InetAddress bootstrapEndpoint = InetAddress.getByName("127.0.0.11")-->Line_23 $$ tmd.addBootstrapToken(bsToken, bootstrapEndpoint)[ FD ]
Line_30 $$ Collection<InetAddress> endpoints = tmd.getWriteEndpoints(keyTokens[i], keyspaceName, strategy.getNaturalEndpoints(keyTokens[i]))-->Line_40 $$ assertTrue(endpoints.contains(bootstrapEndpoint))[ FD ]
Line_24 $$ AbstractReplicationStrategy strategy = null-->Line_30 $$ Collection<InetAddress> endpoints = tmd.getWriteEndpoints(keyTokens[i], keyspaceName, strategy.getNaturalEndpoints(keyTokens[i]))[ FD ]
Line_15 $$ for (int i = 0; i < endpointTokens.length; i++) -->Line_29 $$ for (int i = 0; i < keyTokens.length; i++) [ FD ]
Line_26 $$ strategy = getStrategy(keyspaceName, tmd)-->Line_27 $$ PendingRangeCalculatorService.calculatePendingRanges(strategy, keyspaceName)[ FD ]
Line_24 $$ AbstractReplicationStrategy strategy = null-->Line_28 $$ int replicationFactor = strategy.getReplicationFactor()[ FD ]
Line_30 $$ Collection<InetAddress> endpoints = tmd.getWriteEndpoints(keyTokens[i], keyspaceName, strategy.getNaturalEndpoints(keyTokens[i]))-->Line_38 $$ assertFalse(endpoints.contains(bootstrapEndpoint))[ FD ]
Line_16 $$ InetAddress ep = InetAddress.getByName("127.0.0." + String.valueOf(i + 1))-->Line_18 $$ hosts.add(ep)[ FD ]
Line_30 $$ Collection<InetAddress> endpoints = tmd.getWriteEndpoints(keyTokens[i], keyspaceName, strategy.getNaturalEndpoints(keyTokens[i]))-->Line_31 $$ assertTrue(endpoints.size() >= replicationFactor)[ FD ]
Line_6 $$ TokenMetadata tmd = new TokenMetadata()-->Line_7 $$ TokenMetadata oldTmd = StorageServiceAccessor.setTokenMetadata(tmd)[ FD ]
Line_15 $$ for (int i = 0; i < endpointTokens.length; i++) -->Line_16 $$ InetAddress ep = InetAddress.getByName("127.0.0." + String.valueOf(i + 1))[ CD ]
Line_10 $$ for (int i = 0; i < RING_SIZE; i++) -->Line_15 $$ for (int i = 0; i < endpointTokens.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < RING_SIZE; i++) -->Line_29 $$ for (int i = 0; i < keyTokens.length; i++) [ FD ]
Line_29 $$ for (int i = 0; i < keyTokens.length; i++) -->Line_32 $$ for (int j = 0; j < replicationFactor; j++) [ CD ]
Line_24 $$ AbstractReplicationStrategy strategy = null-->Line_27 $$ PendingRangeCalculatorService.calculatePendingRanges(strategy, keyspaceName)[ FD ]
Line_22 $$ InetAddress bootstrapEndpoint = InetAddress.getByName("127.0.0.11")-->Line_38 $$ assertFalse(endpoints.contains(bootstrapEndpoint))[ FD ]
Line_15 $$ for (int i = 0; i < endpointTokens.length; i++) -->Line_18 $$ hosts.add(ep)[ CD ]
Line_25 $$ for (String keyspaceName : Schema.instance.getNonSystemKeyspaces()) -->Line_27 $$ PendingRangeCalculatorService.calculatePendingRanges(strategy, keyspaceName)[ FD ]
