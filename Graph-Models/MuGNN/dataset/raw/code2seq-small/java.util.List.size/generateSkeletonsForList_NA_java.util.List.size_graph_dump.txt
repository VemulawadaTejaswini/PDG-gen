Line_11 $$ final String extraPath = runResult.getStdout()-->Line_12 $$ final PySkeletonGenerator.ListBinariesResult binaries = generator.listBinaries(mySdk, extraPath)[ FD ]
Line_16 $$ for (int i = 0; i != size; ++i) -->Line_19 $$ if (needBinaryList(name)) [ CD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_9 $$ final ProcessOutput runResult = PySdkUtil.getProcessOutput(cmd, new File(homePath).getParent(), PythonSdkType.getVirtualEnvExtraEnv(homePath), 5000)[ CD ]
Line_17 $$ final String name = names.get(i)-->Line_21 $$ final PySkeletonRefresher.PyBinaryItem item = binaries.modules.get(name)[ FD ]
Line_19 $$ if (needBinaryList(name)) -->Line_23 $$ refresher.generateSkeleton(name, modulePath, new ArrayList<String>(), Consumer.EMPTY_CONSUMER)[ CD ]
Line_5 $$ final String homePath = mySdk.getHomePath()-->Line_6 $$ if (homePath == null)[ FD ]
Line_3 $$ final PySkeletonGenerator generator = new PySkeletonGenerator(refresher.getSkeletonsPath(), mySdk, currentBinaryFilesPath)-->Line_12 $$ final PySkeletonGenerator.ListBinariesResult binaries = generator.listBinaries(mySdk, extraPath)[ FD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_10 $$ if (runResult.getExitCode() == 0 && !runResult.isTimeout()) [ CD ]
Line_9 $$ final ProcessOutput runResult = PySdkUtil.getProcessOutput(cmd, new File(homePath).getParent(), PythonSdkType.getVirtualEnvExtraEnv(homePath), 5000)-->Line_11 $$ final String extraPath = runResult.getStdout()[ FD ]
Line_6 $$ if (homePath == null)-->Line_7 $$ return false[ CD ]
Line_22 $$ final String modulePath = item != null ? item.getPath() : ""-->Line_23 $$ refresher.generateSkeleton(name, modulePath, new ArrayList<String>(), Consumer.EMPTY_CONSUMER)[ FD ]
Line_21 $$ final PySkeletonRefresher.PyBinaryItem item = binaries.modules.get(name)-->Line_22 $$ final String modulePath = item != null ? item.getPath() : ""[ FD ]
Line_17 $$ final String name = names.get(i)-->Line_20 $$ indicator.setText2(name)[ FD ]
Line_19 $$ if (needBinaryList(name)) -->Line_22 $$ final String modulePath = item != null ? item.getPath() : ""[ CD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_23 $$ refresher.generateSkeleton(name, modulePath, new ArrayList<String>(), Consumer.EMPTY_CONSUMER)[ FD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_3 $$ final PySkeletonGenerator generator = new PySkeletonGenerator(refresher.getSkeletonsPath(), mySdk, currentBinaryFilesPath)[ CD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_18 $$ indicator.setFraction((double) i / size)[ FD ]
Line_16 $$ for (int i = 0; i != size; ++i) -->Line_17 $$ final String name = names.get(i)[ FD ]
Line_17 $$ final String name = names.get(i)-->Line_19 $$ if (needBinaryList(name)) [ FD ]
Line_19 $$ if (needBinaryList(name)) -->Line_20 $$ indicator.setText2(name)[ CD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_4 $$ indicator.setIndeterminate(false)[ FD ]
Line_10 $$ if (runResult.getExitCode() == 0 && !runResult.isTimeout()) -->Line_16 $$ for (int i = 0; i != size; ++i) [ CD ]
Line_16 $$ for (int i = 0; i != size; ++i) -->Line_18 $$ indicator.setFraction((double) i / size)[ CD ]
Line_16 $$ for (int i = 0; i != size; ++i) -->Line_17 $$ final String name = names.get(i)[ CD ]
Line_10 $$ if (runResult.getExitCode() == 0 && !runResult.isTimeout()) -->Line_11 $$ final String extraPath = runResult.getStdout()[ CD ]
Line_5 $$ final String homePath = mySdk.getHomePath()-->Line_9 $$ final ProcessOutput runResult = PySdkUtil.getProcessOutput(cmd, new File(homePath).getParent(), PythonSdkType.getVirtualEnvExtraEnv(homePath), 5000)[ FD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_6 $$ if (homePath == null)[ CD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_4 $$ indicator.setIndeterminate(false)[ CD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_8 $$ GeneralCommandLine cmd = PythonHelper.EXTRA_SYSPATH.newCommandLine(homePath, Lists.newArrayList(myQualifiedName))[ CD ]
Line_17 $$ final String name = names.get(i)-->Line_23 $$ refresher.generateSkeleton(name, modulePath, new ArrayList<String>(), Consumer.EMPTY_CONSUMER)[ FD ]
Line_19 $$ if (needBinaryList(name)) -->Line_21 $$ final PySkeletonRefresher.PyBinaryItem item = binaries.modules.get(name)[ CD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_3 $$ final PySkeletonGenerator generator = new PySkeletonGenerator(refresher.getSkeletonsPath(), mySdk, currentBinaryFilesPath)[ FD ]
Line_10 $$ if (runResult.getExitCode() == 0 && !runResult.isTimeout()) -->Line_15 $$ final int size = names.size()[ CD ]
Line_10 $$ if (runResult.getExitCode() == 0 && !runResult.isTimeout()) -->Line_13 $$ final List<String> names = Lists.newArrayList(binaries.modules.keySet())[ CD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_20 $$ indicator.setText2(name)[ FD ]
Line_13 $$ final List<String> names = Lists.newArrayList(binaries.modules.keySet())-->Line_14 $$ Collections.sort(names)[ FD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_27 $$ return true[ CD ]
Line_10 $$ if (runResult.getExitCode() == 0 && !runResult.isTimeout()) -->Line_14 $$ Collections.sort(names)[ CD ]
Line_5 $$ final String homePath = mySdk.getHomePath()-->Line_8 $$ GeneralCommandLine cmd = PythonHelper.EXTRA_SYSPATH.newCommandLine(homePath, Lists.newArrayList(myQualifiedName))[ FD ]
Line_13 $$ final List<String> names = Lists.newArrayList(binaries.modules.keySet())-->Line_17 $$ final String name = names.get(i)[ FD ]
Line_8 $$ GeneralCommandLine cmd = PythonHelper.EXTRA_SYSPATH.newCommandLine(homePath, Lists.newArrayList(myQualifiedName))-->Line_9 $$ final ProcessOutput runResult = PySdkUtil.getProcessOutput(cmd, new File(homePath).getParent(), PythonSdkType.getVirtualEnvExtraEnv(homePath), 5000)[ FD ]
Line_13 $$ final List<String> names = Lists.newArrayList(binaries.modules.keySet())-->Line_15 $$ final int size = names.size()[ FD ]
Line_15 $$ final int size = names.size()-->Line_16 $$ for (int i = 0; i != size; ++i) [ FD ]
Line_2 $$ private boolean generateSkeletonsForList(@NotNull final PySkeletonRefresher refresher, ProgressIndicator indicator, @Nullable final String currentBinaryFilesPath) throws InvalidSdkException -->Line_5 $$ final String homePath = mySdk.getHomePath()[ CD ]
Line_9 $$ final ProcessOutput runResult = PySdkUtil.getProcessOutput(cmd, new File(homePath).getParent(), PythonSdkType.getVirtualEnvExtraEnv(homePath), 5000)-->Line_10 $$ if (runResult.getExitCode() == 0 && !runResult.isTimeout()) [ FD ]
Line_10 $$ if (runResult.getExitCode() == 0 && !runResult.isTimeout()) -->Line_12 $$ final PySkeletonGenerator.ListBinariesResult binaries = generator.listBinaries(mySdk, extraPath)[ CD ]
