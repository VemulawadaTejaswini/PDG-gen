Line_15 $$ String fieldName = fieldsEntry.getKey()-->Line_18 $$ for (String resolvedFieldName : context.getMapperService().simpleMatchToIndexNames(fieldName)) [ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_62 $$ qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient)[ FD ]
Line_15 $$ String fieldName = fieldsEntry.getKey()-->Line_17 $$ if (Regex.isSimpleMatchPattern(fieldName)) [ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_41 $$ qpSettings.forceQuoteAnalyzer(namedAnalyzer)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_45 $$ qpSettings.defaultQuoteAnalyzer(context.getMapperService().searchQuoteAnalyzer())[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_12 $$ qpSettings.defaultField(this.defaultField == null ? context.defaultField() : this.defaultField)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_49 $$ qpSettings.allowLeadingWildcard(allowLeadingWildcard == null ? context.queryStringAllowLeadingWildcard() : allowLeadingWildcard)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_28 $$ qpSettings.defaultAnalyzer(context.getMapperService().searchAnalyzer())[ FD ]
Line_77 $$ while (query instanceof BoostQuery) -->Line_79 $$ boosts.add(boostQuery.getBoost())[ CD ]
Line_15 $$ String fieldName = fieldsEntry.getKey()-->Line_22 $$ resolvedFields.put(fieldName, weight)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_53 $$ qpSettings.locale(locale)[ FD ]
Line_68 $$ query = queryParser.parse(queryString)-->Line_88 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_66 $$ Query query-->Line_83 $$ if (query instanceof BooleanQuery) [ FD ]
Line_30 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_31 $$ if (namedAnalyzer == null) [ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_54 $$ qpSettings.fuzziness(fuzziness)[ FD ]
Line_7 $$ if (this.escape) -->Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))[ CD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_26 $$ qpSettings.defaultOperator(defaultOperator.toQueryParserOperator())[ FD ]
Line_18 $$ for (String resolvedFieldName : context.getMapperService().simpleMatchToIndexNames(fieldName)) -->Line_19 $$ resolvedFields.put(resolvedFieldName, weight)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_26 $$ qpSettings.defaultOperator(defaultOperator.toQueryParserOperator())[ FD ]
Line_27 $$ if (analyzer == null) -->Line_30 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)[ CD ]
Line_77 $$ while (query instanceof BoostQuery) -->Line_78 $$ BoostQuery boostQuery = (BoostQuery) query[ CD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_47 $$ qpSettings.quoteFieldSuffix(quoteFieldSuffix)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_56 $$ qpSettings.fuzzyMaxExpansions(fuzzyMaxExpansions)[ FD ]
Line_80 $$ query = boostQuery.getQuery()-->Line_82 $$ query = Queries.fixNegativeQueryIfNeeded(query)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_63 $$ qpSettings.timeZone(timeZone)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_55 $$ qpSettings.fuzzyPrefixLength(fuzzyPrefixLength)[ FD ]
Line_13 $$ Map<String, Float> resolvedFields = new TreeMap()-->Line_19 $$ resolvedFields.put(resolvedFieldName, weight)[ FD ]
Line_78 $$ BoostQuery boostQuery = (BoostQuery) query-->Line_80 $$ query = boostQuery.getQuery()[ FD ]
Line_65 $$ MapperQueryParser queryParser = context.queryParser(qpSettings)-->Line_68 $$ query = queryParser.parse(queryString)[ FD ]
Line_68 $$ query = queryParser.parse(queryString)-->Line_84 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ FD ]
Line_68 $$ query = queryParser.parse(queryString)-->Line_72 $$ if (query == null) [ FD ]
Line_16 $$ Float weight = fieldsEntry.getValue()-->Line_22 $$ resolvedFields.put(fieldName, weight)[ FD ]
Line_42 $$ if (analyzer != null) -->Line_43 $$ qpSettings.forceQuoteAnalyzer(qpSettings.analyzer())[ CD ]
Line_27 $$ if (analyzer == null) -->Line_28 $$ qpSettings.defaultAnalyzer(context.getMapperService().searchAnalyzer())[ CD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_63 $$ qpSettings.timeZone(timeZone)[ FD ]
Line_66 $$ Query query-->Line_84 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ FD ]
Line_66 $$ Query query-->Line_72 $$ if (query == null) [ FD ]
Line_84 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())-->Line_88 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_68 $$ query = queryParser.parse(queryString)-->Line_80 $$ query = boostQuery.getQuery()[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_43 $$ qpSettings.forceQuoteAnalyzer(qpSettings.analyzer())[ FD ]
Line_16 $$ Float weight = fieldsEntry.getValue()-->Line_19 $$ resolvedFields.put(resolvedFieldName, weight)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_56 $$ qpSettings.fuzzyMaxExpansions(fuzzyMaxExpansions)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_43 $$ qpSettings.forceQuoteAnalyzer(qpSettings.analyzer())[ FD ]
Line_30 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_41 $$ qpSettings.forceQuoteAnalyzer(namedAnalyzer)[ FD ]
Line_27 $$ if (analyzer == null) -->Line_34 $$ qpSettings.forceAnalyzer(namedAnalyzer)[ CD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_48 $$ qpSettings.autoGeneratePhraseQueries(autoGeneratePhraseQueries)[ FD ]
Line_80 $$ query = boostQuery.getQuery()-->Line_83 $$ if (query instanceof BooleanQuery) [ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_53 $$ qpSettings.locale(locale)[ FD ]
Line_42 $$ if (analyzer != null) -->Line_45 $$ qpSettings.defaultQuoteAnalyzer(context.getMapperService().searchQuoteAnalyzer())[ CD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_49 $$ qpSettings.allowLeadingWildcard(allowLeadingWildcard == null ? context.queryStringAllowLeadingWildcard() : allowLeadingWildcard)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)[ FD ]
Line_82 $$ query = Queries.fixNegativeQueryIfNeeded(query)-->Line_88 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_57 $$ qpSettings.fuzzyRewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.fuzzyRewrite))[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_54 $$ qpSettings.fuzziness(fuzziness)[ FD ]
Line_36 $$ if (quoteAnalyzer != null) -->Line_41 $$ qpSettings.forceQuoteAnalyzer(namedAnalyzer)[ CD ]
Line_66 $$ Query query-->Line_88 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_80 $$ query = boostQuery.getQuery()-->Line_84 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_57 $$ qpSettings.fuzzyRewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.fuzzyRewrite))[ FD ]
Line_83 $$ if (query instanceof BooleanQuery) -->Line_84 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ CD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_52 $$ qpSettings.enablePositionIncrements(enablePositionIncrements)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_60 $$ qpSettings.tieBreaker(tieBreaker)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_58 $$ qpSettings.phraseSlop(phraseSlop)[ FD ]
Line_36 $$ if (quoteAnalyzer != null) -->Line_38 $$ if (namedAnalyzer == null) [ CD ]
Line_27 $$ if (analyzer == null) -->Line_31 $$ if (namedAnalyzer == null) [ CD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_51 $$ qpSettings.lowercaseExpandedTerms(lowercaseExpandedTerms)[ FD ]
Line_30 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_34 $$ qpSettings.forceAnalyzer(namedAnalyzer)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_50 $$ qpSettings.analyzeWildcard(analyzeWildcard == null ? context.queryStringAnalyzeWildcard() : analyzeWildcard)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_64 $$ qpSettings.maxDeterminizedStates(maxDeterminizedStates)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_34 $$ qpSettings.forceAnalyzer(namedAnalyzer)[ FD ]
Line_13 $$ Map<String, Float> resolvedFields = new TreeMap()-->Line_22 $$ resolvedFields.put(fieldName, weight)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_55 $$ qpSettings.fuzzyPrefixLength(fuzzyPrefixLength)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_59 $$ qpSettings.useDisMax(useDisMax)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_28 $$ qpSettings.defaultAnalyzer(context.getMapperService().searchAnalyzer())[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_47 $$ qpSettings.quoteFieldSuffix(quoteFieldSuffix)[ FD ]
Line_36 $$ if (quoteAnalyzer != null) -->Line_37 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(quoteAnalyzer)[ CD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_48 $$ qpSettings.autoGeneratePhraseQueries(autoGeneratePhraseQueries)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_51 $$ qpSettings.lowercaseExpandedTerms(lowercaseExpandedTerms)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_60 $$ qpSettings.tieBreaker(tieBreaker)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_52 $$ qpSettings.enablePositionIncrements(enablePositionIncrements)[ FD ]
Line_7 $$ if (this.escape) -->Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)[ CD ]
Line_72 $$ if (query == null) -->Line_73 $$ return null[ CD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_61 $$ qpSettings.rewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.rewrite))[ FD ]
Line_14 $$ for (Map.Entry<String, Float> fieldsEntry : fieldsAndWeights.entrySet()) -->Line_15 $$ String fieldName = fieldsEntry.getKey()[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_45 $$ qpSettings.defaultQuoteAnalyzer(context.getMapperService().searchQuoteAnalyzer())[ FD ]
Line_82 $$ query = Queries.fixNegativeQueryIfNeeded(query)-->Line_84 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ FD ]
Line_66 $$ Query query-->Line_80 $$ query = boostQuery.getQuery()[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_65 $$ MapperQueryParser queryParser = context.queryParser(qpSettings)[ FD ]
Line_68 $$ query = queryParser.parse(queryString)-->Line_83 $$ if (query instanceof BooleanQuery) [ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_58 $$ qpSettings.phraseSlop(phraseSlop)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_64 $$ qpSettings.maxDeterminizedStates(maxDeterminizedStates)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_59 $$ qpSettings.useDisMax(useDisMax)[ FD ]
Line_14 $$ for (Map.Entry<String, Float> fieldsEntry : fieldsAndWeights.entrySet()) -->Line_16 $$ Float weight = fieldsEntry.getValue()[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_12 $$ qpSettings.defaultField(this.defaultField == null ? context.defaultField() : this.defaultField)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_50 $$ qpSettings.analyzeWildcard(analyzeWildcard == null ? context.queryStringAnalyzeWildcard() : analyzeWildcard)[ FD ]
Line_36 $$ if (quoteAnalyzer != null) -->Line_42 $$ if (analyzer != null) [ CD ]
Line_66 $$ Query query-->Line_68 $$ query = queryParser.parse(queryString)[ FD ]
Line_77 $$ while (query instanceof BoostQuery) -->Line_80 $$ query = boostQuery.getQuery()[ CD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_34 $$ qpSettings.forceAnalyzer(namedAnalyzer)[ FD ]
Line_66 $$ Query query-->Line_82 $$ query = Queries.fixNegativeQueryIfNeeded(query)[ FD ]
Line_82 $$ query = Queries.fixNegativeQueryIfNeeded(query)-->Line_83 $$ if (query instanceof BooleanQuery) [ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_61 $$ qpSettings.rewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.rewrite))[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_25 $$ qpSettings.fieldsAndWeights(resolvedFields)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_41 $$ qpSettings.forceQuoteAnalyzer(namedAnalyzer)[ FD ]
Line_68 $$ query = queryParser.parse(queryString)-->Line_82 $$ query = Queries.fixNegativeQueryIfNeeded(query)[ FD ]
Line_10 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_62 $$ qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient)[ FD ]
Line_13 $$ Map<String, Float> resolvedFields = new TreeMap()-->Line_25 $$ qpSettings.fieldsAndWeights(resolvedFields)[ FD ]
Line_80 $$ query = boostQuery.getQuery()-->Line_88 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_78 $$ BoostQuery boostQuery = (BoostQuery) query-->Line_79 $$ boosts.add(boostQuery.getBoost())[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_65 $$ MapperQueryParser queryParser = context.queryParser(qpSettings)[ FD ]
Line_8 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_25 $$ qpSettings.fieldsAndWeights(resolvedFields)[ FD ]
Line_17 $$ if (Regex.isSimpleMatchPattern(fieldName)) -->Line_22 $$ resolvedFields.put(fieldName, weight)[ CD ]
Line_30 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_38 $$ if (namedAnalyzer == null) [ FD ]
