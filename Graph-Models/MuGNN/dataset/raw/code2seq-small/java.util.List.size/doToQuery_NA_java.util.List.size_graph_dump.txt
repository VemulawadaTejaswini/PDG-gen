Line_78 $$ query = Queries.fixNegativeQueryIfNeeded(query)-->Line_83 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_50 $$ qpSettings.locale(locale)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_34 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(quoteAnalyzer)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_58 $$ qpSettings.rewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.rewrite))[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_60 $$ qpSettings.timeZone(timeZone)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_22 $$ qpSettings.fieldsAndWeights(resolvedFields)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_46 $$ qpSettings.allowLeadingWildcard(allowLeadingWildcard == null ? context.queryStringAllowLeadingWildcard() : allowLeadingWildcard)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_49 $$ qpSettings.enablePositionIncrements(enablePositionIncrements)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_50 $$ qpSettings.locale(locale)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_42 $$ qpSettings.defaultQuoteAnalyzer(context.getMapperService().searchQuoteAnalyzer())[ FD ]
Line_76 $$ query = boostQuery.getQuery()-->Line_80 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ FD ]
Line_14 $$ if (Regex.isSimpleMatchPattern(fieldName)) -->Line_19 $$ resolvedFields.put(fieldName, weight)[ CD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_25 $$ qpSettings.defaultAnalyzer(context.getMapperService().searchAnalyzer())[ FD ]
Line_74 $$ BoostQuery boostQuery = (BoostQuery) query-->Line_75 $$ boosts.add(boostQuery.getBoost())[ FD ]
Line_24 $$ if (analyzer == null) -->Line_27 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_72 $$ List<Float> boosts = new ArrayList()[ CD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_54 $$ qpSettings.fuzzyRewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.fuzzyRewrite))[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_51 $$ qpSettings.fuzziness(fuzziness)[ FD ]
Line_74 $$ BoostQuery boostQuery = (BoostQuery) query-->Line_76 $$ query = boostQuery.getQuery()[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_55 $$ qpSettings.phraseSlop(phraseSlop)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_47 $$ qpSettings.analyzeWildcard(analyzeWildcard == null ? context.queryStringAnalyzeWildcard() : analyzeWildcard)[ FD ]
Line_24 $$ if (analyzer == null) -->Line_25 $$ qpSettings.defaultAnalyzer(context.getMapperService().searchAnalyzer())[ CD ]
Line_12 $$ String fieldName = fieldsEntry.getKey()-->Line_15 $$ for (String resolvedFieldName : context.getMapperService().simpleMatchToIndexNames(fieldName)) [ FD ]
Line_27 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_38 $$ qpSettings.forceQuoteAnalyzer(namedAnalyzer)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_44 $$ qpSettings.quoteFieldSuffix(quoteFieldSuffix)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_53 $$ qpSettings.fuzzyMaxExpansions(fuzzyMaxExpansions)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_48 $$ qpSettings.lowercaseExpandedTerms(lowercaseExpandedTerms)[ FD ]
Line_4 $$ if (this.escape) -->Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)[ CD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_52 $$ qpSettings.fuzzyPrefixLength(fuzzyPrefixLength)[ FD ]
Line_69 $$ if (query == null) -->Line_70 $$ return null[ CD ]
Line_72 $$ List<Float> boosts = new ArrayList()-->Line_75 $$ boosts.add(boostQuery.getBoost())[ FD ]
Line_10 $$ Map<String, Float> resolvedFields = new TreeMap()-->Line_16 $$ resolvedFields.put(resolvedFieldName, weight)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_62 $$ MapperQueryParser queryParser = context.queryParser(qpSettings)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_42 $$ qpSettings.defaultQuoteAnalyzer(context.getMapperService().searchQuoteAnalyzer())[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_54 $$ qpSettings.fuzzyRewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.fuzzyRewrite))[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_53 $$ qpSettings.fuzzyMaxExpansions(fuzzyMaxExpansions)[ FD ]
Line_63 $$ Query query-->Line_80 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ FD ]
Line_72 $$ List<Float> boosts = new ArrayList()-->Line_82 $$ for (int i = boosts.size() - 1; i >= 0; i--) [ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_44 $$ qpSettings.quoteFieldSuffix(quoteFieldSuffix)[ FD ]
Line_65 $$ query = queryParser.parse(queryString)-->Line_69 $$ if (query == null) [ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_9 $$ qpSettings.defaultField(this.defaultField == null ? context.defaultField() : this.defaultField)[ FD ]
Line_12 $$ String fieldName = fieldsEntry.getKey()-->Line_14 $$ if (Regex.isSimpleMatchPattern(fieldName)) [ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_59 $$ qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_57 $$ qpSettings.tieBreaker(tieBreaker)[ CD ]
Line_39 $$ if (analyzer != null) -->Line_40 $$ qpSettings.forceQuoteAnalyzer(qpSettings.analyzer())[ CD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_45 $$ qpSettings.autoGeneratePhraseQueries(autoGeneratePhraseQueries)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_22 $$ qpSettings.fieldsAndWeights(resolvedFields)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_47 $$ qpSettings.analyzeWildcard(analyzeWildcard == null ? context.queryStringAnalyzeWildcard() : analyzeWildcard)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_23 $$ qpSettings.defaultOperator(defaultOperator.toQueryParserOperator())[ CD ]
Line_65 $$ query = queryParser.parse(queryString)-->Line_76 $$ query = boostQuery.getQuery()[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_40 $$ qpSettings.forceQuoteAnalyzer(qpSettings.analyzer())[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_49 $$ qpSettings.enablePositionIncrements(enablePositionIncrements)[ CD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_60 $$ qpSettings.timeZone(timeZone)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_23 $$ qpSettings.defaultOperator(defaultOperator.toQueryParserOperator())[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_48 $$ qpSettings.lowercaseExpandedTerms(lowercaseExpandedTerms)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_60 $$ qpSettings.timeZone(timeZone)[ CD ]
Line_65 $$ query = queryParser.parse(queryString)-->Line_83 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_9 $$ qpSettings.defaultField(this.defaultField == null ? context.defaultField() : this.defaultField)[ FD ]
Line_73 $$ while (query instanceof BoostQuery) -->Line_74 $$ BoostQuery boostQuery = (BoostQuery) query[ CD ]
Line_13 $$ Float weight = fieldsEntry.getValue()-->Line_16 $$ resolvedFields.put(resolvedFieldName, weight)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_61 $$ qpSettings.maxDeterminizedStates(maxDeterminizedStates)[ FD ]
Line_27 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_31 $$ qpSettings.forceAnalyzer(namedAnalyzer)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_27 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_78 $$ query = Queries.fixNegativeQueryIfNeeded(query)[ CD ]
Line_73 $$ while (query instanceof BoostQuery) -->Line_75 $$ boosts.add(boostQuery.getBoost())[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_24 $$ if (analyzer == null) [ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_85 $$ return query[ CD ]
Line_65 $$ query = queryParser.parse(queryString)-->Line_78 $$ query = Queries.fixNegativeQueryIfNeeded(query)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_31 $$ qpSettings.forceAnalyzer(namedAnalyzer)[ FD ]
Line_12 $$ String fieldName = fieldsEntry.getKey()-->Line_19 $$ resolvedFields.put(fieldName, weight)[ FD ]
Line_65 $$ query = queryParser.parse(queryString)-->Line_80 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_52 $$ qpSettings.fuzzyPrefixLength(fuzzyPrefixLength)[ CD ]
Line_76 $$ query = boostQuery.getQuery()-->Line_83 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_15 $$ for (String resolvedFieldName : context.getMapperService().simpleMatchToIndexNames(fieldName)) -->Line_16 $$ resolvedFields.put(resolvedFieldName, weight)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_56 $$ qpSettings.useDisMax(useDisMax)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_49 $$ qpSettings.enablePositionIncrements(enablePositionIncrements)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_42 $$ qpSettings.defaultQuoteAnalyzer(context.getMapperService().searchQuoteAnalyzer())[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_61 $$ qpSettings.maxDeterminizedStates(maxDeterminizedStates)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_47 $$ qpSettings.analyzeWildcard(analyzeWildcard == null ? context.queryStringAnalyzeWildcard() : analyzeWildcard)[ FD ]
Line_76 $$ query = boostQuery.getQuery()-->Line_79 $$ if (query instanceof BooleanQuery) [ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_9 $$ qpSettings.defaultField(this.defaultField == null ? context.defaultField() : this.defaultField)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_59 $$ qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_69 $$ if (query == null) [ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_53 $$ qpSettings.fuzzyMaxExpansions(fuzzyMaxExpansions)[ CD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_47 $$ qpSettings.analyzeWildcard(analyzeWildcard == null ? context.queryStringAnalyzeWildcard() : analyzeWildcard)[ FD ]
Line_63 $$ Query query-->Line_79 $$ if (query instanceof BooleanQuery) [ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_62 $$ MapperQueryParser queryParser = context.queryParser(qpSettings)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_33 $$ if (quoteAnalyzer != null) [ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_59 $$ qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))[ FD ]
Line_62 $$ MapperQueryParser queryParser = context.queryParser(qpSettings)-->Line_65 $$ query = queryParser.parse(queryString)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_56 $$ qpSettings.useDisMax(useDisMax)[ FD ]
Line_63 $$ Query query-->Line_69 $$ if (query == null) [ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_45 $$ qpSettings.autoGeneratePhraseQueries(autoGeneratePhraseQueries)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_57 $$ qpSettings.tieBreaker(tieBreaker)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_58 $$ qpSettings.rewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.rewrite))[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_49 $$ qpSettings.enablePositionIncrements(enablePositionIncrements)[ FD ]
Line_39 $$ if (analyzer != null) -->Line_42 $$ qpSettings.defaultQuoteAnalyzer(context.getMapperService().searchQuoteAnalyzer())[ CD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_62 $$ MapperQueryParser queryParser = context.queryParser(qpSettings)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_62 $$ MapperQueryParser queryParser = context.queryParser(qpSettings)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_54 $$ qpSettings.fuzzyRewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.fuzzyRewrite))[ FD ]
Line_27 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_35 $$ if (namedAnalyzer == null) [ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_42 $$ qpSettings.defaultQuoteAnalyzer(context.getMapperService().searchQuoteAnalyzer())[ FD ]
Line_78 $$ query = Queries.fixNegativeQueryIfNeeded(query)-->Line_80 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_58 $$ qpSettings.rewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.rewrite))[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_9 $$ qpSettings.defaultField(this.defaultField == null ? context.defaultField() : this.defaultField)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_23 $$ qpSettings.defaultOperator(defaultOperator.toQueryParserOperator())[ FD ]
Line_11 $$ for (Map.Entry<String, Float> fieldsEntry : fieldsAndWeights.entrySet()) -->Line_13 $$ Float weight = fieldsEntry.getValue()[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_46 $$ qpSettings.allowLeadingWildcard(allowLeadingWildcard == null ? context.queryStringAllowLeadingWildcard() : allowLeadingWildcard)[ FD ]
Line_27 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_28 $$ if (namedAnalyzer == null) [ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_9 $$ qpSettings.defaultField(this.defaultField == null ? context.defaultField() : this.defaultField)[ CD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)[ FD ]
Line_33 $$ if (quoteAnalyzer != null) -->Line_35 $$ if (namedAnalyzer == null) [ CD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_48 $$ qpSettings.lowercaseExpandedTerms(lowercaseExpandedTerms)[ FD ]
Line_63 $$ Query query-->Line_78 $$ query = Queries.fixNegativeQueryIfNeeded(query)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_56 $$ qpSettings.useDisMax(useDisMax)[ FD ]
Line_79 $$ if (query instanceof BooleanQuery) -->Line_80 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_63 $$ Query query[ CD ]
Line_63 $$ Query query-->Line_83 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_54 $$ qpSettings.fuzzyRewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.fuzzyRewrite))[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_47 $$ qpSettings.analyzeWildcard(analyzeWildcard == null ? context.queryStringAnalyzeWildcard() : analyzeWildcard)[ CD ]
Line_78 $$ query = Queries.fixNegativeQueryIfNeeded(query)-->Line_79 $$ if (query instanceof BooleanQuery) [ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_58 $$ qpSettings.rewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.rewrite))[ FD ]
Line_82 $$ for (int i = boosts.size() - 1; i >= 0; i--) -->Line_83 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_51 $$ qpSettings.fuzziness(fuzziness)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_52 $$ qpSettings.fuzzyPrefixLength(fuzzyPrefixLength)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_38 $$ qpSettings.forceQuoteAnalyzer(namedAnalyzer)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_38 $$ qpSettings.forceQuoteAnalyzer(namedAnalyzer)[ FD ]
Line_4 $$ if (this.escape) -->Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))[ CD ]
Line_63 $$ Query query-->Line_76 $$ query = boostQuery.getQuery()[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_25 $$ qpSettings.defaultAnalyzer(context.getMapperService().searchAnalyzer())[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_38 $$ qpSettings.forceQuoteAnalyzer(namedAnalyzer)[ FD ]
Line_10 $$ Map<String, Float> resolvedFields = new TreeMap()-->Line_22 $$ qpSettings.fieldsAndWeights(resolvedFields)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_4 $$ if (this.escape) [ CD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_55 $$ qpSettings.phraseSlop(phraseSlop)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_59 $$ qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient)[ FD ]
Line_80 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, this.minimumShouldMatch())-->Line_83 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_54 $$ qpSettings.fuzzyRewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.fuzzyRewrite))[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_57 $$ qpSettings.tieBreaker(tieBreaker)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_23 $$ qpSettings.defaultOperator(defaultOperator.toQueryParserOperator())[ FD ]
Line_73 $$ while (query instanceof BoostQuery) -->Line_76 $$ query = boostQuery.getQuery()[ CD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_50 $$ qpSettings.locale(locale)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_44 $$ qpSettings.quoteFieldSuffix(quoteFieldSuffix)[ CD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_22 $$ qpSettings.fieldsAndWeights(resolvedFields)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_51 $$ qpSettings.fuzziness(fuzziness)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_40 $$ qpSettings.forceQuoteAnalyzer(qpSettings.analyzer())[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_10 $$ Map<String, Float> resolvedFields = new TreeMap()[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_45 $$ qpSettings.autoGeneratePhraseQueries(autoGeneratePhraseQueries)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_59 $$ qpSettings.lenient(lenient == null ? context.queryStringLenient() : lenient)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_62 $$ MapperQueryParser queryParser = context.queryParser(qpSettings)[ CD ]
Line_24 $$ if (analyzer == null) -->Line_28 $$ if (namedAnalyzer == null) [ CD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_61 $$ qpSettings.maxDeterminizedStates(maxDeterminizedStates)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_31 $$ qpSettings.forceAnalyzer(namedAnalyzer)[ FD ]
Line_10 $$ Map<String, Float> resolvedFields = new TreeMap()-->Line_19 $$ resolvedFields.put(fieldName, weight)[ FD ]
Line_24 $$ if (analyzer == null) -->Line_31 $$ qpSettings.forceAnalyzer(namedAnalyzer)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_51 $$ qpSettings.fuzziness(fuzziness)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_25 $$ qpSettings.defaultAnalyzer(context.getMapperService().searchAnalyzer())[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_57 $$ qpSettings.tieBreaker(tieBreaker)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_46 $$ qpSettings.allowLeadingWildcard(allowLeadingWildcard == null ? context.queryStringAllowLeadingWildcard() : allowLeadingWildcard)[ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_46 $$ qpSettings.allowLeadingWildcard(allowLeadingWildcard == null ? context.queryStringAllowLeadingWildcard() : allowLeadingWildcard)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_48 $$ qpSettings.lowercaseExpandedTerms(lowercaseExpandedTerms)[ CD ]
Line_63 $$ Query query-->Line_65 $$ query = queryParser.parse(queryString)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_55 $$ qpSettings.phraseSlop(phraseSlop)[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_25 $$ qpSettings.defaultAnalyzer(context.getMapperService().searchAnalyzer())[ FD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_31 $$ qpSettings.forceAnalyzer(namedAnalyzer)[ FD ]
Line_65 $$ query = queryParser.parse(queryString)-->Line_79 $$ if (query instanceof BooleanQuery) [ FD ]
Line_7 $$ qpSettings = new QueryParserSettings(this.queryString)-->Line_50 $$ qpSettings.locale(locale)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_79 $$ if (query instanceof BooleanQuery) [ CD ]
Line_33 $$ if (quoteAnalyzer != null) -->Line_38 $$ qpSettings.forceQuoteAnalyzer(namedAnalyzer)[ CD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_44 $$ qpSettings.quoteFieldSuffix(quoteFieldSuffix)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_73 $$ while (query instanceof BoostQuery) [ CD ]
Line_13 $$ Float weight = fieldsEntry.getValue()-->Line_19 $$ resolvedFields.put(fieldName, weight)[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_53 $$ qpSettings.fuzzyMaxExpansions(fuzzyMaxExpansions)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_61 $$ qpSettings.maxDeterminizedStates(maxDeterminizedStates)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_46 $$ qpSettings.allowLeadingWildcard(allowLeadingWildcard == null ? context.queryStringAllowLeadingWildcard() : allowLeadingWildcard)[ CD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_55 $$ qpSettings.phraseSlop(phraseSlop)[ FD ]
Line_82 $$ for (int i = boosts.size() - 1; i >= 0; i--) -->Line_83 $$ query = new BoostQuery(query, boosts.get(i))[ CD ]
Line_33 $$ if (quoteAnalyzer != null) -->Line_39 $$ if (analyzer != null) [ CD ]
Line_5 $$ qpSettings = new QueryParserSettings(org.apache.lucene.queryparser.classic.QueryParser.escape(this.queryString))-->Line_60 $$ qpSettings.timeZone(timeZone)[ FD ]
Line_72 $$ List<Float> boosts = new ArrayList()-->Line_83 $$ query = new BoostQuery(query, boosts.get(i))[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_58 $$ qpSettings.rewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(), this.rewrite))[ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_52 $$ qpSettings.fuzzyPrefixLength(fuzzyPrefixLength)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_15 $$ for (String resolvedFieldName : context.getMapperService().simpleMatchToIndexNames(fieldName)) [ FD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_40 $$ qpSettings.forceQuoteAnalyzer(qpSettings.analyzer())[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_22 $$ qpSettings.fieldsAndWeights(resolvedFields)[ CD ]
Line_3 $$ QueryParserSettings qpSettings-->Line_45 $$ qpSettings.autoGeneratePhraseQueries(autoGeneratePhraseQueries)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_82 $$ for (int i = boosts.size() - 1; i >= 0; i--) [ CD ]
Line_11 $$ for (Map.Entry<String, Float> fieldsEntry : fieldsAndWeights.entrySet()) -->Line_12 $$ String fieldName = fieldsEntry.getKey()[ FD ]
Line_76 $$ query = boostQuery.getQuery()-->Line_78 $$ query = Queries.fixNegativeQueryIfNeeded(query)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_3 $$ QueryParserSettings qpSettings[ CD ]
Line_33 $$ if (quoteAnalyzer != null) -->Line_34 $$ NamedAnalyzer namedAnalyzer = context.getAnalysisService().analyzer(quoteAnalyzer)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_56 $$ qpSettings.useDisMax(useDisMax)[ CD ]
