Line_3 $$ List<String> result = expressionResolver.resolve(context, Arrays.asList("name1", "<.marvel--->Line_7 $$ assertThat(result.get(2), equalTo("name2"))[ FD ]
Line_2 $$ public void testExpression_MixedArray() throws Exception -->Line_3 $$ List<String> result = expressionResolver.resolve(context, Arrays.asList("name1", "<.marvel-[ CD ]
Line_3 $$ List<String> result = expressionResolver.resolve(context, Arrays.asList("name1", "<.marvel--->Line_5 $$ assertThat(result.get(0), equalTo("name1"))[ FD ]
Line_2 $$ public void testExpression_MixedArray() throws Exception -->Line_4 $$ assertThat(result.size(), equalTo(4))[ CD ]
Line_3 $$ List<String> result = expressionResolver.resolve(context, Arrays.asList("name1", "<.marvel--->Line_6 $$ assertThat(result.get(1), equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(context.getStartTime(), UTC))))[ FD ]
Line_3 $$ List<String> result = expressionResolver.resolve(context, Arrays.asList("name1", "<.marvel--->Line_4 $$ assertThat(result.size(), equalTo(4))[ FD ]
Line_3 $$ List<String> result = expressionResolver.resolve(context, Arrays.asList("name1", "<.marvel--->Line_8 $$ assertThat(result.get(3), equalTo(".logstash-" + DateTimeFormat.forPattern("YYYY.MM").print(new DateTime(context.getStartTime(), UTC).withDayOfMonth(1))))[ FD ]
Line_2 $$ public void testExpression_MixedArray() throws Exception -->Line_8 $$ assertThat(result.get(3), equalTo(".logstash-" + DateTimeFormat.forPattern("YYYY.MM").print(new DateTime(context.getStartTime(), UTC).withDayOfMonth(1))))[ CD ]
Line_2 $$ public void testExpression_MixedArray() throws Exception -->Line_5 $$ assertThat(result.get(0), equalTo("name1"))[ CD ]
Line_2 $$ public void testExpression_MixedArray() throws Exception -->Line_7 $$ assertThat(result.get(2), equalTo("name2"))[ CD ]
Line_2 $$ public void testExpression_MixedArray() throws Exception -->Line_6 $$ assertThat(result.get(1), equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(context.getStartTime(), UTC))))[ CD ]
