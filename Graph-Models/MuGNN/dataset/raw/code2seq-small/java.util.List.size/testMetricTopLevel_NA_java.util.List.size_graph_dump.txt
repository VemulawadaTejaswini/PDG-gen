Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_19 $$ if (sum.value() < minValue) [ CD ]
Line_17 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_19 $$ if (sum.value() < minValue) [ FD ]
Line_21 $$ minKeys = new ArrayList()-->Line_22 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_13 $$ Terms.Bucket bucket = buckets.get(i)-->Line_14 $$ assertThat(bucket, notNullValue())[ FD ]
Line_19 $$ if (sum.value() < minValue) -->Line_20 $$ minValue = sum.value()[ CD ]
Line_11 $$ double minValue = Double.POSITIVE_INFINITY-->Line_23 $$ if (sum.value() == minValue) [ FD ]
Line_19 $$ if (sum.value() < minValue) -->Line_22 $$ minKeys.add(bucket.getKeyAsString())[ CD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_31 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).addAggregation(minBucket("min_bucket").setBucketsPaths("terms>sum")).execute().actionGet()-->Line_27 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")[ FD ]
Line_5 $$ Terms terms = response.getAggregations().get("terms")-->Line_6 $$ assertThat(terms, notNullValue())[ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_10 $$ List<String> minKeys = new ArrayList()[ CD ]
Line_17 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_18 $$ assertThat(sum, notNullValue())[ FD ]
Line_13 $$ Terms.Bucket bucket = buckets.get(i)-->Line_17 $$ Sum sum = bucket.getAggregations().get("sum")[ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_29 $$ assertThat(minBucketValue.getName(), equalTo("min_bucket"))[ CD ]
Line_20 $$ minValue = sum.value()-->Line_30 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_27 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")[ CD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_7 $$ assertThat(terms.getName(), equalTo("terms"))[ CD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_13 $$ Terms.Bucket bucket = buckets.get(i)[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_13 $$ Terms.Bucket bucket = buckets.get(i)[ CD ]
Line_19 $$ if (sum.value() < minValue) -->Line_23 $$ if (sum.value() == minValue) [ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).addAggregation(minBucket("min_bucket").setBucketsPaths("terms>sum")).execute().actionGet()-->Line_4 $$ assertSearchResponse(response)[ FD ]
Line_13 $$ Terms.Bucket bucket = buckets.get(i)-->Line_15 $$ assertThat((String) bucket.getKey(), equalTo("tag" + (i % interval)))[ FD ]
Line_5 $$ Terms terms = response.getAggregations().get("terms")-->Line_8 $$ List<Terms.Bucket> buckets = terms.getBuckets()[ FD ]
Line_21 $$ minKeys = new ArrayList()-->Line_31 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_15 $$ assertThat((String) bucket.getKey(), equalTo("tag" + (i % interval)))[ CD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_16 $$ assertThat(bucket.getDocCount(), greaterThan(0l))[ CD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_14 $$ assertThat(bucket, notNullValue())[ CD ]
Line_13 $$ Terms.Bucket bucket = buckets.get(i)-->Line_16 $$ assertThat(bucket.getDocCount(), greaterThan(0l))[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_17 $$ Sum sum = bucket.getAggregations().get("sum")[ CD ]
Line_11 $$ double minValue = Double.POSITIVE_INFINITY-->Line_20 $$ minValue = sum.value()[ FD ]
Line_13 $$ Terms.Bucket bucket = buckets.get(i)-->Line_22 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_30 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ CD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_5 $$ Terms terms = response.getAggregations().get("terms")[ CD ]
Line_11 $$ double minValue = Double.POSITIVE_INFINITY-->Line_19 $$ if (sum.value() < minValue) [ FD ]
Line_10 $$ List<String> minKeys = new ArrayList()-->Line_22 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_28 $$ assertThat(minBucketValue, notNullValue())[ CD ]
Line_10 $$ List<String> minKeys = new ArrayList()-->Line_21 $$ minKeys = new ArrayList()[ FD ]
Line_27 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")-->Line_29 $$ assertThat(minBucketValue.getName(), equalTo("min_bucket"))[ FD ]
Line_8 $$ List<Terms.Bucket> buckets = terms.getBuckets()-->Line_13 $$ Terms.Bucket bucket = buckets.get(i)[ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_6 $$ assertThat(terms, notNullValue())[ CD ]
Line_10 $$ List<String> minKeys = new ArrayList()-->Line_31 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ FD ]
Line_27 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")-->Line_28 $$ assertThat(minBucketValue, notNullValue())[ FD ]
Line_27 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")-->Line_31 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ FD ]
Line_19 $$ if (sum.value() < minValue) -->Line_21 $$ minKeys = new ArrayList()[ CD ]
Line_20 $$ minValue = sum.value()-->Line_19 $$ if (sum.value() < minValue) [ FD ]
Line_8 $$ List<Terms.Bucket> buckets = terms.getBuckets()-->Line_9 $$ assertThat(buckets.size(), equalTo(interval))[ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_11 $$ double minValue = Double.POSITIVE_INFINITY[ CD ]
Line_21 $$ minKeys = new ArrayList()-->Line_24 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_27 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_bucket")-->Line_30 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_12 $$ for (int i = 0; i < interval; ++i) [ CD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_4 $$ assertSearchResponse(response)[ CD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_18 $$ assertThat(sum, notNullValue())[ CD ]
Line_10 $$ List<String> minKeys = new ArrayList()-->Line_24 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_5 $$ Terms terms = response.getAggregations().get("terms")-->Line_7 $$ assertThat(terms.getName(), equalTo("terms"))[ FD ]
Line_11 $$ double minValue = Double.POSITIVE_INFINITY-->Line_30 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ FD ]
Line_20 $$ minValue = sum.value()-->Line_23 $$ if (sum.value() == minValue) [ FD ]
Line_13 $$ Terms.Bucket bucket = buckets.get(i)-->Line_24 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_9 $$ assertThat(buckets.size(), equalTo(interval))[ CD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_8 $$ List<Terms.Bucket> buckets = terms.getBuckets()[ CD ]
Line_17 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_20 $$ minValue = sum.value()[ FD ]
Line_17 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_23 $$ if (sum.value() == minValue) [ FD ]
Line_2 $$ public void testMetricTopLevel() throws Exception -->Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).addAggregation(minBucket("min_bucket").setBucketsPaths("terms>sum")).execute().actionGet()[ CD ]
Line_23 $$ if (sum.value() == minValue) -->Line_24 $$ minKeys.add(bucket.getKeyAsString())[ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).addAggregation(minBucket("min_bucket").setBucketsPaths("terms>sum")).execute().actionGet()-->Line_5 $$ Terms terms = response.getAggregations().get("terms")[ FD ]
