Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_11 $$ errors.add("bad version: expected='" + expectedId.getVersion() + "' found='" + metadata.getId().getVersion() + "'")[ FD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_10 $$ if (!expectedId.getVersion().equals(metadata.getId().getVersion())) [ CD ]
Line_3 $$ List<String> errors = new ArrayList<String>()-->Line_11 $$ errors.add("bad version: expected='" + expectedId.getVersion() + "' found='" + metadata.getId().getVersion() + "'")[ FD ]
Line_3 $$ List<String> errors = new ArrayList<String>()-->Line_13 $$ if (errors.size() > 0) [ FD ]
Line_3 $$ List<String> errors = new ArrayList<String>()-->Line_8 $$ errors.add("bad module name: expected='" + expectedId.getModule() + "' found='" + metadata.getId().getName() + "'")[ FD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_7 $$ if (!expectedId.getModule().equals(metadata.getId().getName())) [ FD ]
Line_3 $$ List<String> errors = new ArrayList<String>()-->Line_14 $$ throw new MetaDataParseException(String.format("inconsistent module metadata found. Descriptor: %s Errors: %s", metadata.getId(), Joiner.on(SystemProperties.getInstance().getLineSeparator()).join(errors)))[ FD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_10 $$ if (!expectedId.getVersion().equals(metadata.getId().getVersion())) [ FD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_8 $$ errors.add("bad module name: expected='" + expectedId.getModule() + "' found='" + metadata.getId().getName() + "'")[ FD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_14 $$ throw new MetaDataParseException(String.format("inconsistent module metadata found. Descriptor: %s Errors: %s", metadata.getId(), Joiner.on(SystemProperties.getInstance().getLineSeparator()).join(errors)))[ FD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_5 $$ errors.add("bad group: expected='" + expectedId.getGroup() + "' found='" + metadata.getId().getGroup() + "'")[ FD ]
Line_4 $$ if (!expectedId.getGroup().equals(metadata.getId().getGroup())) -->Line_5 $$ errors.add("bad group: expected='" + expectedId.getGroup() + "' found='" + metadata.getId().getGroup() + "'")[ CD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_4 $$ if (!expectedId.getGroup().equals(metadata.getId().getGroup())) [ FD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_13 $$ if (errors.size() > 0) [ CD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_3 $$ List<String> errors = new ArrayList<String>()[ CD ]
Line_10 $$ if (!expectedId.getVersion().equals(metadata.getId().getVersion())) -->Line_11 $$ errors.add("bad version: expected='" + expectedId.getVersion() + "' found='" + metadata.getId().getVersion() + "'")[ CD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_4 $$ if (!expectedId.getGroup().equals(metadata.getId().getGroup())) [ CD ]
Line_7 $$ if (!expectedId.getModule().equals(metadata.getId().getName())) -->Line_8 $$ errors.add("bad module name: expected='" + expectedId.getModule() + "' found='" + metadata.getId().getName() + "'")[ CD ]
Line_3 $$ List<String> errors = new ArrayList<String>()-->Line_5 $$ errors.add("bad group: expected='" + expectedId.getGroup() + "' found='" + metadata.getId().getGroup() + "'")[ FD ]
Line_2 $$ protected void checkMetadataConsistency(ModuleComponentIdentifier expectedId, ModuleComponentResolveMetaData metadata) throws MetaDataParseException -->Line_7 $$ if (!expectedId.getModule().equals(metadata.getId().getName())) [ CD ]
