Line_2 $$ private static void addOrMergeRun(List<BidiRun> runs, BidiRun run) -->Line_4 $$ if (size > 0 && runs.get(size - 1).level == 0 && run.level == 0) [ CD ]
Line_4 $$ if (size > 0 && runs.get(size - 1).level == 0 && run.level == 0) -->Line_7 $$ runs.add(new BidiRun((byte) 0, lastRun.startOffset, run.endOffset))[ CD ]
Line_2 $$ private static void addOrMergeRun(List<BidiRun> runs, BidiRun run) -->Line_5 $$ BidiRun lastRun = runs.remove(size - 1)[ FD ]
Line_2 $$ private static void addOrMergeRun(List<BidiRun> runs, BidiRun run) -->Line_9 $$ runs.add(run)[ FD ]
Line_4 $$ if (size > 0 && runs.get(size - 1).level == 0 && run.level == 0) -->Line_9 $$ runs.add(run)[ CD ]
Line_4 $$ if (size > 0 && runs.get(size - 1).level == 0 && run.level == 0) -->Line_5 $$ BidiRun lastRun = runs.remove(size - 1)[ CD ]
Line_2 $$ private static void addOrMergeRun(List<BidiRun> runs, BidiRun run) -->Line_4 $$ if (size > 0 && runs.get(size - 1).level == 0 && run.level == 0) [ FD ]
Line_2 $$ private static void addOrMergeRun(List<BidiRun> runs, BidiRun run) -->Line_3 $$ int size = runs.size()[ CD ]
Line_2 $$ private static void addOrMergeRun(List<BidiRun> runs, BidiRun run) -->Line_3 $$ int size = runs.size()[ FD ]
Line_2 $$ private static void addOrMergeRun(List<BidiRun> runs, BidiRun run) -->Line_7 $$ runs.add(new BidiRun((byte) 0, lastRun.startOffset, run.endOffset))[ FD ]
