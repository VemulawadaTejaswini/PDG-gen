Line_7 $$ PsiElement element = usage.getElement()-->Line_16 $$ final PsiFile containingFile = element.getContainingFile()[ FD ]
Line_2 $$ public static void renameNonCodeUsages(@NotNull Project project, @NotNull NonCodeUsageInfo[] usages) -->Line_5 $$ final PsiDocumentManager psiDocumentManager = PsiDocumentManager.getInstance(project)[ FD ]
Line_4 $$ Map<Document, List<UsageOffset>> docsToOffsetsMap = new HashMap<Document, List<UsageOffset>>()-->Line_21 $$ List<UsageOffset> list = docsToOffsetsMap.get(document)[ FD ]
Line_6 $$ for (NonCodeUsageInfo usage : usages) -->Line_13 $$ final ProperTextRange rangeInElement = usage.getRangeInElement()[ FD ]
Line_17 $$ final Document document = psiDocumentManager.getDocument(containingFile)-->Line_24 $$ docsToOffsetsMap.put(document, list)[ FD ]
Line_6 $$ for (NonCodeUsageInfo usage : usages) -->Line_7 $$ PsiElement element = usage.getElement()[ FD ]
Line_2 $$ public static void renameNonCodeUsages(@NotNull Project project, @NotNull NonCodeUsageInfo[] usages) -->Line_39 $$ PsiDocumentManager.getInstance(project).commitAllDocuments()[ FD ]
Line_13 $$ final ProperTextRange rangeInElement = usage.getRangeInElement()-->Line_14 $$ if (rangeInElement == null)[ FD ]
Line_33 $$ for (int i = offsets.length - 1; i >= 0; i--) -->Line_34 $$ UsageOffset usageOffset = offsets[i][ CD ]
Line_2 $$ public static void renameNonCodeUsages(@NotNull Project project, @NotNull NonCodeUsageInfo[] usages) -->Line_5 $$ final PsiDocumentManager psiDocumentManager = PsiDocumentManager.getInstance(project)[ CD ]
Line_4 $$ Map<Document, List<UsageOffset>> docsToOffsetsMap = new HashMap<Document, List<UsageOffset>>()-->Line_29 $$ List<UsageOffset> list = docsToOffsetsMap.get(document)[ FD ]
Line_21 $$ List<UsageOffset> list = docsToOffsetsMap.get(document)-->Line_22 $$ if (list == null) [ FD ]
Line_18 $$ final Segment segment = usage.getSegment()-->Line_20 $$ int fileOffset = segment.getStartOffset()[ FD ]
Line_2 $$ public static void renameNonCodeUsages(@NotNull Project project, @NotNull NonCodeUsageInfo[] usages) -->Line_3 $$ PsiDocumentManager.getInstance(project).commitAllDocuments()[ CD ]
Line_21 $$ List<UsageOffset> list = docsToOffsetsMap.get(document)-->Line_26 $$ list.add(new UsageOffset(fileOffset, fileOffset + rangeInElement.getLength(), usage.newText))[ FD ]
Line_17 $$ final Document document = psiDocumentManager.getDocument(containingFile)-->Line_30 $$ LOG.assertTrue(list != null, document)[ FD ]
Line_21 $$ List<UsageOffset> list = docsToOffsetsMap.get(document)-->Line_23 $$ list = new ArrayList<UsageOffset>()[ FD ]
Line_13 $$ final ProperTextRange rangeInElement = usage.getRangeInElement()-->Line_26 $$ list.add(new UsageOffset(fileOffset, fileOffset + rangeInElement.getLength(), usage.newText))[ FD ]
Line_2 $$ public static void renameNonCodeUsages(@NotNull Project project, @NotNull NonCodeUsageInfo[] usages) -->Line_37 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_6 $$ for (NonCodeUsageInfo usage : usages) -->Line_18 $$ final Segment segment = usage.getSegment()[ FD ]
Line_2 $$ public static void renameNonCodeUsages(@NotNull Project project, @NotNull NonCodeUsageInfo[] usages) -->Line_3 $$ PsiDocumentManager.getInstance(project).commitAllDocuments()[ FD ]
Line_31 $$ UsageOffset[] offsets = list.toArray(new UsageOffset[list.size()])-->Line_32 $$ Arrays.sort(offsets)[ FD ]
Line_16 $$ final PsiFile containingFile = element.getContainingFile()-->Line_17 $$ final Document document = psiDocumentManager.getDocument(containingFile)[ FD ]
Line_17 $$ final Document document = psiDocumentManager.getDocument(containingFile)-->Line_37 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_23 $$ list = new ArrayList<UsageOffset>()-->Line_24 $$ docsToOffsetsMap.put(document, list)[ FD ]
Line_4 $$ Map<Document, List<UsageOffset>> docsToOffsetsMap = new HashMap<Document, List<UsageOffset>>()-->Line_28 $$ for (Document document : docsToOffsetsMap.keySet()) [ FD ]
Line_7 $$ PsiElement element = usage.getElement()-->Line_11 $$ if (element == null)[ FD ]
Line_23 $$ list = new ArrayList<UsageOffset>()-->Line_31 $$ UsageOffset[] offsets = list.toArray(new UsageOffset[list.size()])[ FD ]
Line_2 $$ public static void renameNonCodeUsages(@NotNull Project project, @NotNull NonCodeUsageInfo[] usages) -->Line_39 $$ PsiDocumentManager.getInstance(project).commitAllDocuments()[ CD ]
Line_10 $$ element = CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(element, true)-->Line_16 $$ final PsiFile containingFile = element.getContainingFile()[ FD ]
Line_21 $$ List<UsageOffset> list = docsToOffsetsMap.get(document)-->Line_31 $$ UsageOffset[] offsets = list.toArray(new UsageOffset[list.size()])[ FD ]
Line_17 $$ final Document document = psiDocumentManager.getDocument(containingFile)-->Line_21 $$ List<UsageOffset> list = docsToOffsetsMap.get(document)[ FD ]
Line_17 $$ final Document document = psiDocumentManager.getDocument(containingFile)-->Line_29 $$ List<UsageOffset> list = docsToOffsetsMap.get(document)[ FD ]
Line_4 $$ Map<Document, List<UsageOffset>> docsToOffsetsMap = new HashMap<Document, List<UsageOffset>>()-->Line_24 $$ docsToOffsetsMap.put(document, list)[ FD ]
Line_7 $$ PsiElement element = usage.getElement()-->Line_10 $$ element = CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(element, true)[ FD ]
Line_22 $$ if (list == null) -->Line_24 $$ docsToOffsetsMap.put(document, list)[ CD ]
Line_2 $$ public static void renameNonCodeUsages(@NotNull Project project, @NotNull NonCodeUsageInfo[] usages) -->Line_4 $$ Map<Document, List<UsageOffset>> docsToOffsetsMap = new HashMap<Document, List<UsageOffset>>()[ CD ]
Line_23 $$ list = new ArrayList<UsageOffset>()-->Line_26 $$ list.add(new UsageOffset(fileOffset, fileOffset + rangeInElement.getLength(), usage.newText))[ FD ]
Line_17 $$ final Document document = psiDocumentManager.getDocument(containingFile)-->Line_35 $$ document.replaceString(usageOffset.startOffset, usageOffset.endOffset, usageOffset.newText)[ FD ]
Line_21 $$ List<UsageOffset> list = docsToOffsetsMap.get(document)-->Line_24 $$ docsToOffsetsMap.put(document, list)[ FD ]
Line_22 $$ if (list == null) -->Line_23 $$ list = new ArrayList<UsageOffset>()[ CD ]
Line_7 $$ PsiElement element = usage.getElement()-->Line_8 $$ if (element == null)[ FD ]
Line_10 $$ element = CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(element, true)-->Line_11 $$ if (element == null)[ FD ]
Line_33 $$ for (int i = offsets.length - 1; i >= 0; i--) -->Line_35 $$ document.replaceString(usageOffset.startOffset, usageOffset.endOffset, usageOffset.newText)[ CD ]
Line_5 $$ final PsiDocumentManager psiDocumentManager = PsiDocumentManager.getInstance(project)-->Line_17 $$ final Document document = psiDocumentManager.getDocument(containingFile)[ FD ]
