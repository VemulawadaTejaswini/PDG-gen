Line_29 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_45 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_8 $$ LinkedHashMap<String, Object> params2 = null-->Line_64 $$ setJoin(qPos, params2)[ FD ]
Line_14 $$ if (doUnion) -->Line_16 $$ params2.remove("usersGroups")[ CD ]
Line_7 $$ LinkedHashMap<String, Object> params1 = params-->Line_37 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_39 $$ if (doUnion) -->Line_41 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ CD ]
Line_29 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_31 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)[ FD ]
Line_10 $$ LinkedHashMap<String, Object> params4 = null-->Line_45 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_33 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_43 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_25 $$ String sql = null-->Line_58 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_21 $$ params4 = new LinkedHashMap(params1)-->Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_27 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)-->Line_28 $$ if (sql == null) [ FD ]
Line_21 $$ params4 = new LinkedHashMap(params1)-->Line_22 $$ params4.remove("usersGroups")[ FD ]
Line_14 $$ if (doUnion) -->Line_15 $$ params2 = new LinkedHashMap(params1)[ CD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_43 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_71 $$ List<Long> groupIds = (List<Long>) QueryUtil.list(q, getDialect(), start, end)-->Line_72 $$ List<Group> groups = new ArrayList(groupIds.size())[ FD ]
Line_34 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)-->Line_45 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_18 $$ params3 = new LinkedHashMap(params1)-->Line_66 $$ setJoin(qPos, params3)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_42 $$ sb.append(") UNION (")[ FD ]
Line_14 $$ if (doUnion) -->Line_19 $$ params3.remove("usersGroups")[ CD ]
Line_5 $$ params = _emptyLinkedHashMap-->Line_11 $$ Long userId = (Long) params.get("usersGroups")[ FD ]
Line_31 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_37 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_18 $$ params3 = new LinkedHashMap(params1)-->Line_43 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_31 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_45 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_18 $$ params3 = new LinkedHashMap(params1)-->Line_20 $$ params3.put("groupsOrgs", userId)[ FD ]
Line_7 $$ LinkedHashMap<String, Object> params1 = params-->Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_21 $$ params4 = new LinkedHashMap(params1)-->Line_23 $$ params4.put("groupsUserGroups", userId)[ FD ]
Line_9 $$ LinkedHashMap<String, Object> params3 = null-->Line_43 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_10 $$ LinkedHashMap<String, Object> params4 = null-->Line_68 $$ setJoin(qPos, params4)[ FD ]
Line_21 $$ params4 = new LinkedHashMap(params1)-->Line_68 $$ setJoin(qPos, params4)[ FD ]
Line_57 $$ session = openSession()-->Line_81 $$ closeSession(session)[ FD ]
Line_15 $$ params2 = new LinkedHashMap(params1)-->Line_64 $$ setJoin(qPos, params2)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_41 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_27 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)-->Line_53 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ FD ]
Line_28 $$ if (sql == null) -->Line_36 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_48 $$ if (obc != null) -->Line_49 $$ sb.append(" ORDER BY ")[ CD ]
Line_10 $$ LinkedHashMap<String, Object> params4 = null-->Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_28 $$ if (sql == null) -->Line_37 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ CD ]
Line_29 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_34 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_36 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_14 $$ if (doUnion) -->Line_20 $$ params3.put("groupsOrgs", userId)[ CD ]
Line_28 $$ if (sql == null) -->Line_29 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)[ CD ]
Line_29 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_37 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_63 $$ if (doUnion) -->Line_69 $$ qPos.add(companyId)[ CD ]
Line_58 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_59 $$ q.addScalar("groupId", Type.LONG)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_37 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_60 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_64 $$ setJoin(qPos, params2)[ FD ]
Line_63 $$ if (doUnion) -->Line_66 $$ setJoin(qPos, params3)[ CD ]
Line_52 $$ sql = sb.toString()-->Line_53 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ FD ]
Line_11 $$ Long userId = (Long) params.get("usersGroups")-->Line_17 $$ params2.put("groupOrg", userId)[ FD ]
Line_60 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_68 $$ setJoin(qPos, params4)[ FD ]
Line_55 $$ Session session = null-->Line_58 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_60 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_66 $$ setJoin(qPos, params3)[ FD ]
Line_63 $$ if (doUnion) -->Line_67 $$ qPos.add(companyId)[ CD ]
Line_11 $$ Long userId = (Long) params.get("usersGroups")-->Line_13 $$ boolean doUnion = Validator.isNotNull(userId) && inherit[ FD ]
Line_31 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_33 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))[ FD ]
Line_18 $$ params3 = new LinkedHashMap(params1)-->Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_39 $$ if (doUnion) -->Line_42 $$ sb.append(") UNION (")[ CD ]
Line_27 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)-->Line_58 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_28 $$ if (sql == null) -->Line_30 $$ if (params.get("active") == Boolean.TRUE) [ CD ]
Line_63 $$ if (doUnion) -->Line_64 $$ setJoin(qPos, params2)[ CD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_38 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_39 $$ if (doUnion) -->Line_46 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_10 $$ LinkedHashMap<String, Object> params4 = null-->Line_21 $$ params4 = new LinkedHashMap(params1)[ FD ]
Line_39 $$ if (doUnion) -->Line_45 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ CD ]
Line_58 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_71 $$ List<Long> groupIds = (List<Long>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)-->Line_53 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ FD ]
Line_57 $$ session = openSession()-->Line_58 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ Long userId = (Long) params.get("usersGroups")-->Line_20 $$ params3.put("groupsOrgs", userId)[ FD ]
Line_25 $$ String sql = null-->Line_28 $$ if (sql == null) [ FD ]
Line_63 $$ if (doUnion) -->Line_68 $$ setJoin(qPos, params4)[ CD ]
Line_18 $$ params3 = new LinkedHashMap(params1)-->Line_19 $$ params3.remove("usersGroups")[ FD ]
Line_28 $$ if (sql == null) -->Line_34 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)[ CD ]
Line_72 $$ List<Group> groups = new ArrayList(groupIds.size())-->Line_75 $$ groups.add(group)[ FD ]
Line_31 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_43 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_28 $$ if (sql == null) -->Line_38 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_33 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_41 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_9 $$ LinkedHashMap<String, Object> params3 = null-->Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_14 $$ if (doUnion) -->Line_21 $$ params4 = new LinkedHashMap(params1)[ CD ]
Line_28 $$ if (sql == null) -->Line_33 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))[ CD ]
Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)-->Line_27 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)[ FD ]
Line_39 $$ if (doUnion) -->Line_40 $$ sb.append(" UNION (")[ CD ]
Line_28 $$ if (sql == null) -->Line_52 $$ sql = sb.toString()[ CD ]
Line_10 $$ LinkedHashMap<String, Object> params4 = null-->Line_23 $$ params4.put("groupsUserGroups", userId)[ FD ]
Line_25 $$ String sql = null-->Line_27 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)[ FD ]
Line_4 $$ if (params == null) -->Line_5 $$ params = _emptyLinkedHashMap[ CD ]
Line_33 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_34 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_46 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_25 $$ String sql = null-->Line_52 $$ sql = sb.toString()[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_50 $$ sb.append(obc.toString())[ FD ]
Line_21 $$ params4 = new LinkedHashMap(params1)-->Line_45 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_39 $$ if (doUnion) -->Line_44 $$ sb.append(") UNION (")[ CD ]
Line_29 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_43 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_8 $$ LinkedHashMap<String, Object> params2 = null-->Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_63 $$ if (doUnion) -->Line_65 $$ qPos.add(companyId)[ CD ]
Line_60 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_65 $$ qPos.add(companyId)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_45 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_27 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)-->Line_52 $$ sql = sb.toString()[ FD ]
Line_14 $$ if (doUnion) -->Line_22 $$ params4.remove("usersGroups")[ CD ]
Line_9 $$ LinkedHashMap<String, Object> params3 = null-->Line_66 $$ setJoin(qPos, params3)[ FD ]
Line_9 $$ LinkedHashMap<String, Object> params3 = null-->Line_19 $$ params3.remove("usersGroups")[ FD ]
Line_48 $$ if (obc != null) -->Line_50 $$ sb.append(obc.toString())[ CD ]
Line_60 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_69 $$ qPos.add(companyId)[ FD ]
Line_30 $$ if (params.get("active") == Boolean.TRUE) -->Line_31 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)[ CD ]
Line_10 $$ LinkedHashMap<String, Object> params4 = null-->Line_22 $$ params4.remove("usersGroups")[ FD ]
Line_13 $$ boolean doUnion = Validator.isNotNull(userId) && inherit-->Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_31 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_34 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)[ FD ]
Line_15 $$ params2 = new LinkedHashMap(params1)-->Line_17 $$ params2.put("groupOrg", userId)[ FD ]
Line_58 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_60 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_39 $$ if (doUnion) -->Line_43 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ CD ]
Line_29 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_41 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_8 $$ LinkedHashMap<String, Object> params2 = null-->Line_41 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_33 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_45 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_15 $$ params2 = new LinkedHashMap(params1)-->Line_16 $$ params2.remove("usersGroups")[ FD ]
Line_60 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_61 $$ setJoin(qPos, params1)[ FD ]
Line_34 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)-->Line_37 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_55 $$ Session session = null-->Line_57 $$ session = openSession()[ FD ]
Line_29 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_33 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))[ FD ]
Line_34 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)-->Line_41 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_31 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_41 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_44 $$ sb.append(") UNION (")[ FD ]
Line_7 $$ LinkedHashMap<String, Object> params1 = params-->Line_61 $$ setJoin(qPos, params1)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_49 $$ sb.append(" ORDER BY ")[ FD ]
Line_55 $$ Session session = null-->Line_81 $$ closeSession(session)[ FD ]
Line_9 $$ LinkedHashMap<String, Object> params3 = null-->Line_18 $$ params3 = new LinkedHashMap(params1)[ FD ]
Line_5 $$ params = _emptyLinkedHashMap-->Line_12 $$ boolean inherit = GetterUtil.getBoolean(params.get("inherit"), true)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_52 $$ sql = sb.toString()[ FD ]
Line_5 $$ params = _emptyLinkedHashMap-->Line_30 $$ if (params.get("active") == Boolean.TRUE) [ FD ]
Line_11 $$ Long userId = (Long) params.get("usersGroups")-->Line_23 $$ params4.put("groupsUserGroups", userId)[ FD ]
Line_25 $$ String sql = null-->Line_53 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ FD ]
Line_28 $$ if (sql == null) -->Line_53 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ CD ]
Line_52 $$ sql = sb.toString()-->Line_58 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_60 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_62 $$ qPos.add(companyId)[ FD ]
Line_8 $$ LinkedHashMap<String, Object> params2 = null-->Line_17 $$ params2.put("groupOrg", userId)[ FD ]
Line_15 $$ params2 = new LinkedHashMap(params1)-->Line_41 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_33 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_37 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_14 $$ if (doUnion) -->Line_17 $$ params2.put("groupOrg", userId)[ CD ]
Line_34 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)-->Line_43 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_73 $$ for (Long groupId : groupIds) -->Line_74 $$ Group group = GroupUtil.findByPrimaryKey(groupId)[ FD ]
Line_9 $$ LinkedHashMap<String, Object> params3 = null-->Line_20 $$ params3.put("groupsOrgs", userId)[ FD ]
Line_60 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_67 $$ qPos.add(companyId)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(12)-->Line_40 $$ sb.append(" UNION (")[ FD ]
Line_28 $$ if (sql == null) -->Line_48 $$ if (obc != null) [ CD ]
Line_14 $$ if (doUnion) -->Line_23 $$ params4.put("groupsUserGroups", userId)[ CD ]
Line_8 $$ LinkedHashMap<String, Object> params2 = null-->Line_16 $$ params2.remove("usersGroups")[ FD ]
Line_15 $$ params2 = new LinkedHashMap(params1)-->Line_26 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_14 $$ if (doUnion) -->Line_18 $$ params3 = new LinkedHashMap(params1)[ CD ]
Line_74 $$ Group group = GroupUtil.findByPrimaryKey(groupId)-->Line_75 $$ groups.add(group)[ FD ]
Line_28 $$ if (sql == null) -->Line_39 $$ if (doUnion) [ CD ]
Line_28 $$ if (sql == null) -->Line_35 $$ StringBundler sb = new StringBundler(12)[ CD ]
Line_8 $$ LinkedHashMap<String, Object> params2 = null-->Line_15 $$ params2 = new LinkedHashMap(params1)[ FD ]
