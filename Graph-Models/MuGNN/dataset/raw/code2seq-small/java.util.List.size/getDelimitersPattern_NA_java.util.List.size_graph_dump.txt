Line_11 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_32 $$ if (useDefaultDelimiters) [ CD ]
Line_20 $$ if (ind >= 0) -->Line_23 $$ appendDelimiter(patternBuilder, delimiter, delimiter)[ CD ]
Line_14 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_23 $$ appendDelimiter(patternBuilder, delimiter, delimiter)[ FD ]
Line_7 $$ if (cfg == null) -->Line_8 $$ res = DEFAULT_DELIMITERS[ CD ]
Line_15 $$ for (String delimiter : delimiters) -->Line_16 $$ delimiter = delimiter.trim()[ FD ]
Line_11 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_28 $$ String useDefaultDelimitersText = cfg.getChildText("useDefaultDelimiters")[ CD ]
Line_19 $$ int ind = delimiter.indexOf('*')-->Line_21 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ FD ]
Line_36 $$ res = Pattern.compile(patternBuilder.toString())-->Line_39 $$ res = mavenProject.putCachedValue(KEY, res)[ FD ]
Line_16 $$ delimiter = delimiter.trim()-->Line_17 $$ if (delimiter.isEmpty())[ FD ]
Line_6 $$ Element cfg = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_10 $$ List<String> delimiters = MavenJDOMUtil.findChildrenValuesByPath(cfg, "delimiters", "delimiter")[ FD ]
Line_7 $$ if (cfg == null) -->Line_10 $$ List<String> delimiters = MavenJDOMUtil.findChildrenValuesByPath(cfg, "delimiters", "delimiter")[ CD ]
Line_29 $$ if (StringUtil.isNotEmpty(useDefaultDelimitersText)) -->Line_30 $$ useDefaultDelimiters = Boolean.parseBoolean(useDefaultDelimitersText)[ CD ]
Line_14 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_36 $$ res = Pattern.compile(patternBuilder.toString())[ FD ]
Line_19 $$ int ind = delimiter.indexOf('*')-->Line_20 $$ if (ind >= 0) [ FD ]
Line_12 $$ res = DEFAULT_DELIMITERS-->Line_39 $$ res = mavenProject.putCachedValue(KEY, res)[ FD ]
Line_5 $$ if (res == null) -->Line_7 $$ if (cfg == null) [ CD ]
Line_32 $$ if (useDefaultDelimiters) -->Line_34 $$ appendDelimiter(patternBuilder, "@", "@")[ CD ]
Line_16 $$ delimiter = delimiter.trim()-->Line_19 $$ int ind = delimiter.indexOf('*')[ FD ]
Line_8 $$ res = DEFAULT_DELIMITERS-->Line_36 $$ res = Pattern.compile(patternBuilder.toString())[ FD ]
Line_5 $$ if (res == null) -->Line_39 $$ res = mavenProject.putCachedValue(KEY, res)[ CD ]
Line_12 $$ res = DEFAULT_DELIMITERS-->Line_36 $$ res = Pattern.compile(patternBuilder.toString())[ FD ]
Line_14 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_33 $$ appendDelimiter(patternBuilder, "$[ FD ]
Line_7 $$ if (cfg == null) -->Line_11 $$ if (delimiters.isEmpty() || delimiters.size() > 10) [ CD ]
Line_15 $$ for (String delimiter : delimiters) -->Line_21 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ FD ]
Line_20 $$ if (ind >= 0) -->Line_21 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ CD ]
Line_11 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_14 $$ StringBuilder patternBuilder = new StringBuilder()[ CD ]
Line_8 $$ res = DEFAULT_DELIMITERS-->Line_39 $$ res = mavenProject.putCachedValue(KEY, res)[ FD ]
Line_15 $$ for (String delimiter : delimiters) -->Line_17 $$ if (delimiter.isEmpty())[ FD ]
Line_14 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_21 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ FD ]
Line_14 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_34 $$ appendDelimiter(patternBuilder, "@", "@")[ FD ]
Line_4 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_12 $$ res = DEFAULT_DELIMITERS[ FD ]
Line_10 $$ List<String> delimiters = MavenJDOMUtil.findChildrenValuesByPath(cfg, "delimiters", "delimiter")-->Line_11 $$ if (delimiters.isEmpty() || delimiters.size() > 10) [ FD ]
Line_28 $$ String useDefaultDelimitersText = cfg.getChildText("useDefaultDelimiters")-->Line_29 $$ if (StringUtil.isNotEmpty(useDefaultDelimitersText)) [ FD ]
Line_28 $$ String useDefaultDelimitersText = cfg.getChildText("useDefaultDelimiters")-->Line_30 $$ useDefaultDelimiters = Boolean.parseBoolean(useDefaultDelimitersText)[ FD ]
Line_6 $$ Element cfg = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_7 $$ if (cfg == null) [ FD ]
Line_15 $$ for (String delimiter : delimiters) -->Line_19 $$ int ind = delimiter.indexOf('*')[ FD ]
Line_5 $$ if (res == null) -->Line_6 $$ Element cfg = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")[ CD ]
Line_8 $$ res = DEFAULT_DELIMITERS-->Line_12 $$ res = DEFAULT_DELIMITERS[ FD ]
Line_16 $$ delimiter = delimiter.trim()-->Line_23 $$ appendDelimiter(patternBuilder, delimiter, delimiter)[ FD ]
Line_4 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_5 $$ if (res == null) [ FD ]
Line_11 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_29 $$ if (StringUtil.isNotEmpty(useDefaultDelimitersText)) [ CD ]
Line_15 $$ for (String delimiter : delimiters) -->Line_23 $$ appendDelimiter(patternBuilder, delimiter, delimiter)[ FD ]
Line_4 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_8 $$ res = DEFAULT_DELIMITERS[ FD ]
Line_4 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_36 $$ res = Pattern.compile(patternBuilder.toString())[ FD ]
Line_11 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_12 $$ res = DEFAULT_DELIMITERS[ CD ]
Line_6 $$ Element cfg = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_28 $$ String useDefaultDelimitersText = cfg.getChildText("useDefaultDelimiters")[ FD ]
Line_4 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_39 $$ res = mavenProject.putCachedValue(KEY, res)[ FD ]
Line_16 $$ delimiter = delimiter.trim()-->Line_21 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ FD ]
Line_11 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_36 $$ res = Pattern.compile(patternBuilder.toString())[ CD ]
Line_32 $$ if (useDefaultDelimiters) -->Line_33 $$ appendDelimiter(patternBuilder, "$[ CD ]
