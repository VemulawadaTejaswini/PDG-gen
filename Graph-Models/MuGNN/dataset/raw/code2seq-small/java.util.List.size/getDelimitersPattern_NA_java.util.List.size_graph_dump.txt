Line_2 $$ public static Pattern getDelimitersPattern(MavenProject mavenProject) -->Line_4 $$ if (res == null) [ CD ]
Line_3 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_7 $$ res = DEFAULT_DELIMITERS[ FD ]
Line_14 $$ for (String delimiter : delimiters) -->Line_16 $$ if (delimiter.isEmpty())[ FD ]
Line_4 $$ if (res == null) -->Line_37 $$ res = mavenProject.putCachedValue(KEY, res)[ CD ]
Line_13 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_32 $$ appendDelimiter(patternBuilder, "@", "@")[ FD ]
Line_7 $$ res = DEFAULT_DELIMITERS-->Line_11 $$ res = DEFAULT_DELIMITERS[ FD ]
Line_26 $$ String useDefaultDelimitersText = cfg.getChildText("useDefaultDelimiters")-->Line_27 $$ if (StringUtil.isNotEmpty(useDefaultDelimitersText)) [ FD ]
Line_34 $$ res = Pattern.compile(patternBuilder.toString())-->Line_37 $$ res = mavenProject.putCachedValue(KEY, res)[ FD ]
Line_13 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_31 $$ appendDelimiter(patternBuilder, "$[ FD ]
Line_7 $$ res = DEFAULT_DELIMITERS-->Line_37 $$ res = mavenProject.putCachedValue(KEY, res)[ FD ]
Line_14 $$ for (String delimiter : delimiters) -->Line_18 $$ int ind = delimiter.indexOf('*')[ FD ]
Line_2 $$ public static Pattern getDelimitersPattern(MavenProject mavenProject) -->Line_39 $$ return res[ CD ]
Line_3 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_11 $$ res = DEFAULT_DELIMITERS[ FD ]
Line_2 $$ public static Pattern getDelimitersPattern(MavenProject mavenProject) -->Line_37 $$ res = mavenProject.putCachedValue(KEY, res)[ FD ]
Line_15 $$ delimiter = delimiter.trim()-->Line_18 $$ int ind = delimiter.indexOf('*')[ FD ]
Line_2 $$ public static Pattern getDelimitersPattern(MavenProject mavenProject) -->Line_3 $$ Pattern res = mavenProject.getCachedValue(KEY)[ FD ]
Line_15 $$ delimiter = delimiter.trim()-->Line_20 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ FD ]
Line_2 $$ public static Pattern getDelimitersPattern(MavenProject mavenProject) -->Line_3 $$ Pattern res = mavenProject.getCachedValue(KEY)[ CD ]
Line_11 $$ res = DEFAULT_DELIMITERS-->Line_37 $$ res = mavenProject.putCachedValue(KEY, res)[ FD ]
Line_3 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_34 $$ res = Pattern.compile(patternBuilder.toString())[ FD ]
Line_6 $$ if (cfg == null) -->Line_9 $$ List<String> delimiters = MavenJDOMUtil.findChildrenValuesByPath(cfg, "delimiters", "delimiter")[ CD ]
Line_26 $$ String useDefaultDelimitersText = cfg.getChildText("useDefaultDelimiters")-->Line_28 $$ useDefaultDelimiters = Boolean.parseBoolean(useDefaultDelimitersText)[ FD ]
Line_9 $$ List<String> delimiters = MavenJDOMUtil.findChildrenValuesByPath(cfg, "delimiters", "delimiter")-->Line_10 $$ if (delimiters.isEmpty() || delimiters.size() > 10) [ FD ]
Line_14 $$ for (String delimiter : delimiters) -->Line_15 $$ delimiter = delimiter.trim()[ FD ]
Line_2 $$ public static Pattern getDelimitersPattern(MavenProject mavenProject) -->Line_5 $$ Element cfg = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")[ FD ]
Line_5 $$ Element cfg = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_6 $$ if (cfg == null) [ FD ]
Line_10 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_25 $$ boolean useDefaultDelimiters = true[ CD ]
Line_19 $$ if (ind >= 0) -->Line_20 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ CD ]
Line_15 $$ delimiter = delimiter.trim()-->Line_22 $$ appendDelimiter(patternBuilder, delimiter, delimiter)[ FD ]
Line_13 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_20 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ FD ]
Line_14 $$ for (String delimiter : delimiters) -->Line_20 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ FD ]
Line_10 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_26 $$ String useDefaultDelimitersText = cfg.getChildText("useDefaultDelimiters")[ CD ]
Line_10 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_13 $$ StringBuilder patternBuilder = new StringBuilder()[ CD ]
Line_11 $$ res = DEFAULT_DELIMITERS-->Line_34 $$ res = Pattern.compile(patternBuilder.toString())[ FD ]
Line_19 $$ if (ind >= 0) -->Line_22 $$ appendDelimiter(patternBuilder, delimiter, delimiter)[ CD ]
Line_3 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_37 $$ res = mavenProject.putCachedValue(KEY, res)[ FD ]
Line_4 $$ if (res == null) -->Line_5 $$ Element cfg = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")[ CD ]
Line_4 $$ if (res == null) -->Line_6 $$ if (cfg == null) [ CD ]
Line_18 $$ int ind = delimiter.indexOf('*')-->Line_20 $$ appendDelimiter(patternBuilder, delimiter.substring(0, ind), delimiter.substring(ind + 1))[ FD ]
Line_3 $$ Pattern res = mavenProject.getCachedValue(KEY)-->Line_4 $$ if (res == null) [ FD ]
Line_30 $$ if (useDefaultDelimiters) -->Line_32 $$ appendDelimiter(patternBuilder, "@", "@")[ CD ]
Line_14 $$ for (String delimiter : delimiters) -->Line_22 $$ appendDelimiter(patternBuilder, delimiter, delimiter)[ FD ]
Line_27 $$ if (StringUtil.isNotEmpty(useDefaultDelimitersText)) -->Line_28 $$ useDefaultDelimiters = Boolean.parseBoolean(useDefaultDelimitersText)[ CD ]
Line_13 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_22 $$ appendDelimiter(patternBuilder, delimiter, delimiter)[ FD ]
Line_25 $$ boolean useDefaultDelimiters = true-->Line_28 $$ useDefaultDelimiters = Boolean.parseBoolean(useDefaultDelimitersText)[ FD ]
Line_13 $$ StringBuilder patternBuilder = new StringBuilder()-->Line_34 $$ res = Pattern.compile(patternBuilder.toString())[ FD ]
Line_10 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_30 $$ if (useDefaultDelimiters) [ CD ]
Line_7 $$ res = DEFAULT_DELIMITERS-->Line_34 $$ res = Pattern.compile(patternBuilder.toString())[ FD ]
Line_18 $$ int ind = delimiter.indexOf('*')-->Line_19 $$ if (ind >= 0) [ FD ]
Line_15 $$ delimiter = delimiter.trim()-->Line_16 $$ if (delimiter.isEmpty())[ FD ]
Line_10 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_27 $$ if (StringUtil.isNotEmpty(useDefaultDelimitersText)) [ CD ]
Line_30 $$ if (useDefaultDelimiters) -->Line_31 $$ appendDelimiter(patternBuilder, "$[ CD ]
Line_10 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_11 $$ res = DEFAULT_DELIMITERS[ CD ]
Line_5 $$ Element cfg = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_26 $$ String useDefaultDelimitersText = cfg.getChildText("useDefaultDelimiters")[ FD ]
Line_5 $$ Element cfg = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_9 $$ List<String> delimiters = MavenJDOMUtil.findChildrenValuesByPath(cfg, "delimiters", "delimiter")[ FD ]
Line_10 $$ if (delimiters.isEmpty() || delimiters.size() > 10) -->Line_34 $$ res = Pattern.compile(patternBuilder.toString())[ CD ]
Line_6 $$ if (cfg == null) -->Line_7 $$ res = DEFAULT_DELIMITERS[ CD ]
Line_6 $$ if (cfg == null) -->Line_10 $$ if (delimiters.isEmpty() || delimiters.size() > 10) [ CD ]
