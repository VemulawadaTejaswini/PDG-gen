Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_6 $$ int positionsPerColumn = positions.size() / columns[ CD ]
Line_11 $$ int ordinal = 0-->Line_17 $$ ordinal++[ FD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_8 $$ for (int i = 0; i < columns; i++) [ CD ]
Line_8 $$ for (int i = 0; i < columns; i++) -->Line_9 $$ valuePositions.add(new ArrayList(positionsPerColumn))[ CD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_11 $$ int ordinal = 0[ CD ]
Line_20 $$ for (int i = 0; i < columns; i++) -->Line_21 $$ blocks[i] = getBlock(i).copyPositions(valuePositions.get(i))[ FD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_6 $$ int positionsPerColumn = positions.size() / columns[ FD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_3 $$ if (positions.size() % columns != 0) [ FD ]
Line_20 $$ for (int i = 0; i < columns; i++) -->Line_21 $$ blocks[i] = getBlock(i).copyPositions(valuePositions.get(i))[ CD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_23 $$ return new InterleavedBlock(blocks)[ CD ]
Line_8 $$ for (int i = 0; i < columns; i++) -->Line_20 $$ for (int i = 0; i < columns; i++) [ FD ]
Line_7 $$ List<List<Integer>> valuePositions = new ArrayList(columns)-->Line_16 $$ valuePositions.get(position % columns).add(position / columns)[ FD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_20 $$ for (int i = 0; i < columns; i++) [ CD ]
Line_8 $$ for (int i = 0; i < columns; i++) -->Line_21 $$ blocks[i] = getBlock(i).copyPositions(valuePositions.get(i))[ FD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_4 $$ throw new IllegalArgumentException("Positions.size (" + positions.size() + ") is not evenly dividable by columns (" + columns + ")")[ FD ]
Line_7 $$ List<List<Integer>> valuePositions = new ArrayList(columns)-->Line_21 $$ blocks[i] = getBlock(i).copyPositions(valuePositions.get(i))[ FD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_3 $$ if (positions.size() % columns != 0) [ CD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_19 $$ Block[] blocks = new Block[columns][ CD ]
Line_2 $$ public Block copyPositions(List<Integer> positions) -->Line_7 $$ List<List<Integer>> valuePositions = new ArrayList(columns)[ CD ]
Line_7 $$ List<List<Integer>> valuePositions = new ArrayList(columns)-->Line_9 $$ valuePositions.add(new ArrayList(positionsPerColumn))[ FD ]
