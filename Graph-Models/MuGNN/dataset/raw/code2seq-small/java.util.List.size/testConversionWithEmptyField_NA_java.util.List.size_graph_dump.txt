Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_3 $$ DDMForm ddmForm = createDDMForm(createAvailableLocales(LocaleUtil.BRAZIL, LocaleUtil.US), LocaleUtil.US)[ CD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_4 $$ DDMFormField ddmFormField = new DDMFormField("Integer", DDMFormFieldType.INTEGER)[ CD ]
Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_25 $$ for (int i = 0; i < logRecords.size(); i++) [ FD ]
Line_6 $$ LocalizedValue label = new LocalizedValue(LocaleUtil.US)-->Line_8 $$ label.addString(LocaleUtil.US, "Integer")[ FD ]
Line_3 $$ DDMForm ddmForm = createDDMForm(createAvailableLocales(LocaleUtil.BRAZIL, LocaleUtil.US), LocaleUtil.US)-->Line_11 $$ DDMStructure ddmStructure = createStructure("Test Structure", ddmForm)[ FD ]
Line_12 $$ DDMFormValues ddmFormValues = createDDMFormValues(ddmForm, _availableLocales, LocaleUtil.US)-->Line_14 $$ ddmFormValues.addDDMFormFieldValue(integerDDMFormFieldValue)[ FD ]
Line_20 $$ Field fieldsDisplayField = fields.get(DDMImpl.FIELDS_DISPLAY_NAME)-->Line_21 $$ Assert.assertEquals("Integer_INSTANCE_rztm", fieldsDisplayField.getValue())[ FD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_12 $$ DDMFormValues ddmFormValues = createDDMFormValues(ddmForm, _availableLocales, LocaleUtil.US)[ CD ]
Line_13 $$ DDMFormFieldValue integerDDMFormFieldValue = createDDMFormFieldValue("rztm", "Integer", createLocalizedValue(StringPool.BLANK, StringPool.BLANK, LocaleUtil.US))-->Line_14 $$ ddmFormValues.addDDMFormFieldValue(integerDDMFormFieldValue)[ FD ]
Line_4 $$ DDMFormField ddmFormField = new DDMFormField("Integer", DDMFormFieldType.INTEGER)-->Line_9 $$ ddmFormField.setLabel(label)[ FD ]
Line_16 $$ Fields fields = DDMFormValuesToFieldsConverterUtil.convert(ddmStructure, ddmFormValues)-->Line_18 $$ Field integerField = fields.get("Integer")[ FD ]
Line_3 $$ DDMForm ddmForm = createDDMForm(createAvailableLocales(LocaleUtil.BRAZIL, LocaleUtil.US), LocaleUtil.US)-->Line_10 $$ ddmForm.addDDMFormField(ddmFormField)[ FD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_14 $$ ddmFormValues.addDDMFormFieldValue(integerDDMFormFieldValue)[ CD ]
Line_12 $$ DDMFormValues ddmFormValues = createDDMFormValues(ddmForm, _availableLocales, LocaleUtil.US)-->Line_16 $$ Fields fields = DDMFormValuesToFieldsConverterUtil.convert(ddmStructure, ddmFormValues)[ FD ]
Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ LogRecord logRecord = logRecords.get(i)[ FD ]
Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_23 $$ Assert.assertEquals(5, logRecords.size())[ FD ]
Line_16 $$ Fields fields = DDMFormValuesToFieldsConverterUtil.convert(ddmStructure, ddmFormValues)-->Line_20 $$ Field fieldsDisplayField = fields.get(DDMImpl.FIELDS_DISPLAY_NAME)[ FD ]
Line_6 $$ LocalizedValue label = new LocalizedValue(LocaleUtil.US)-->Line_9 $$ ddmFormField.setLabel(label)[ FD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_6 $$ LocalizedValue label = new LocalizedValue(LocaleUtil.US)[ CD ]
Line_4 $$ DDMFormField ddmFormField = new DDMFormField("Integer", DDMFormFieldType.INTEGER)-->Line_10 $$ ddmForm.addDDMFormField(ddmFormField)[ FD ]
Line_3 $$ DDMForm ddmForm = createDDMForm(createAvailableLocales(LocaleUtil.BRAZIL, LocaleUtil.US), LocaleUtil.US)-->Line_12 $$ DDMFormValues ddmFormValues = createDDMFormValues(ddmForm, _availableLocales, LocaleUtil.US)[ FD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_5 $$ ddmFormField.setDataType("integer")[ CD ]
Line_6 $$ LocalizedValue label = new LocalizedValue(LocaleUtil.US)-->Line_7 $$ label.addString(LocaleUtil.BRAZIL, "Inteiro")[ FD ]
Line_11 $$ DDMStructure ddmStructure = createStructure("Test Structure", ddmForm)-->Line_16 $$ Fields fields = DDMFormValuesToFieldsConverterUtil.convert(ddmStructure, ddmFormValues)[ FD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_10 $$ ddmForm.addDDMFormField(ddmFormField)[ CD ]
Line_25 $$ for (int i = 0; i < logRecords.size(); i++) -->Line_27 $$ Assert.assertEquals(expectedValues[i] + " is not a valid language id", logRecord.getMessage())[ CD ]
Line_26 $$ LogRecord logRecord = logRecords.get(i)-->Line_27 $$ Assert.assertEquals(expectedValues[i] + " is not a valid language id", logRecord.getMessage())[ FD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_9 $$ ddmFormField.setLabel(label)[ CD ]
Line_4 $$ DDMFormField ddmFormField = new DDMFormField("Integer", DDMFormFieldType.INTEGER)-->Line_5 $$ ddmFormField.setDataType("integer")[ FD ]
Line_16 $$ Fields fields = DDMFormValuesToFieldsConverterUtil.convert(ddmStructure, ddmFormValues)-->Line_17 $$ Assert.assertNotNull(fields)[ FD ]
Line_25 $$ for (int i = 0; i < logRecords.size(); i++) -->Line_26 $$ LogRecord logRecord = logRecords.get(i)[ CD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_11 $$ DDMStructure ddmStructure = createStructure("Test Structure", ddmForm)[ CD ]
Line_18 $$ Field integerField = fields.get("Integer")-->Line_19 $$ testField(integerField, createValuesList(""), createValuesList(""), _availableLocales, LocaleUtil.US)[ FD ]
Line_25 $$ for (int i = 0; i < logRecords.size(); i++) -->Line_26 $$ LogRecord logRecord = logRecords.get(i)[ FD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_7 $$ label.addString(LocaleUtil.BRAZIL, "Inteiro")[ CD ]
Line_15 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocaleUtil.class.getName(), Level.WARNING)) -->Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_13 $$ DDMFormFieldValue integerDDMFormFieldValue = createDDMFormFieldValue("rztm", "Integer", createLocalizedValue(StringPool.BLANK, StringPool.BLANK, LocaleUtil.US))[ CD ]
Line_2 $$ public void testConversionWithEmptyField() throws Exception -->Line_8 $$ label.addString(LocaleUtil.US, "Integer")[ CD ]
