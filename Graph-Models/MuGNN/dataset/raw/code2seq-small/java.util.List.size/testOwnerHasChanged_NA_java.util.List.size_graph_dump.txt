Line_6 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_10 $$ assertEquals(3, list.size())[ FD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_6 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")[ FD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_6 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")[ CD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_4 $$ assertEquals(2, list.size())[ FD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_10 $$ assertEquals(3, list.size())[ CD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_11 $$ assertEquals(makeList(1, 2, 4), extractRevisionNumbers(list))[ CD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_12 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")[ CD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_5 $$ assertEquals(makeList(1, 4), extractRevisionNumbers(list))[ CD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_7 $$ assertEquals(1, list.size())[ FD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_12 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")[ FD ]
Line_9 $$ list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")-->Line_11 $$ assertEquals(makeList(1, 2, 4), extractRevisionNumbers(list))[ FD ]
Line_6 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_12 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")[ FD ]
Line_6 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_7 $$ assertEquals(1, list.size())[ FD ]
Line_6 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_11 $$ assertEquals(makeList(1, 2, 4), extractRevisionNumbers(list))[ FD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_8 $$ assertEquals(makeList(3), extractRevisionNumbers(list))[ CD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_7 $$ assertEquals(1, list.size())[ CD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_4 $$ assertEquals(2, list.size())[ CD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_10 $$ assertEquals(3, list.size())[ FD ]
Line_9 $$ list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")-->Line_12 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")[ FD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_5 $$ assertEquals(makeList(1, 4), extractRevisionNumbers(list))[ FD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_8 $$ assertEquals(makeList(3), extractRevisionNumbers(list))[ FD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_13 $$ assertEquals(0, list.size())[ FD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_13 $$ assertEquals(0, list.size())[ CD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_9 $$ list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")[ FD ]
Line_9 $$ list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")-->Line_13 $$ assertEquals(0, list.size())[ FD ]
Line_9 $$ list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")-->Line_10 $$ assertEquals(3, list.size())[ FD ]
Line_6 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_13 $$ assertEquals(0, list.size())[ FD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")[ CD ]
Line_6 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_9 $$ list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")[ FD ]
Line_6 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_8 $$ assertEquals(makeList(3), extractRevisionNumbers(list))[ FD ]
Line_3 $$ List list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_1_id, "owner")-->Line_11 $$ assertEquals(makeList(1, 2, 4), extractRevisionNumbers(list))[ FD ]
Line_2 $$ public void testOwnerHasChanged() throws Exception -->Line_9 $$ list = queryForPropertyHasChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")[ CD ]
Line_12 $$ list = queryForPropertyHasNotChanged(DoubleListJoinColumnBidirectionalRefEdEntity1.class, ed1_2_id, "owner")-->Line_13 $$ assertEquals(0, list.size())[ FD ]
