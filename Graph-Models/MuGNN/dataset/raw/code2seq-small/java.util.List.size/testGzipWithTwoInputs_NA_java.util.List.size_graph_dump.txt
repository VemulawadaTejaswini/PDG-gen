Line_6 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_12 $$ List<InputSplit> splits = format.getSplits(job)[ FD ]
Line_5 $$ Job job = Job.getInstance(defaultConf)-->Line_9 $$ FileInputFormat.setInputPaths(job, workDir)[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)[ CD ]
Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_20 $$ assertEquals("splits[0] length", 10, results.size())[ FD ]
Line_5 $$ Job job = Job.getInstance(defaultConf)-->Line_8 $$ ReflectionUtils.setConf(gzip, job.getConfiguration())[ FD ]
Line_3 $$ CompressionCodec gzip = new GzipCodec()-->Line_8 $$ ReflectionUtils.setConf(gzip, job.getConfiguration())[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_14 $$ FileSplit tmp = (FileSplit) splits.get(0)[ CD ]
Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_24 $$ assertEquals("splits[1][0]", "ten  ", results.get(0))[ FD ]
Line_5 $$ Job job = Job.getInstance(defaultConf)-->Line_12 $$ List<InputSplit> splits = format.getSplits(job)[ FD ]
Line_12 $$ List<InputSplit> splits = format.getSplits(job)-->Line_13 $$ assertEquals("compressed splits == 2", 2, splits.size())[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_8 $$ ReflectionUtils.setConf(gzip, job.getConfiguration())[ CD ]
Line_12 $$ List<InputSplit> splits = format.getSplits(job)-->Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)[ FD ]
Line_6 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_9 $$ FileInputFormat.setInputPaths(job, workDir)[ CD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_15 $$ if (tmp.getPath().getName().equals("part2.txt.gz")) [ CD ]
Line_15 $$ if (tmp.getPath().getName().equals("part2.txt.gz")) -->Line_16 $$ splits.set(0, splits.get(1))[ CD ]
Line_14 $$ FileSplit tmp = (FileSplit) splits.get(0)-->Line_15 $$ if (tmp.getPath().getName().equals("part2.txt.gz")) [ FD ]
Line_5 $$ Job job = Job.getInstance(defaultConf)-->Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_4 $$ localFs.delete(workDir, true)[ CD ]
Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_25 $$ assertEquals("splits[1][1]", "nine ", results.get(1))[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_12 $$ List<InputSplit> splits = format.getSplits(job)[ CD ]
Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_23 $$ assertEquals("splits[1] length", 10, results.size())[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_5 $$ Job job = Job.getInstance(defaultConf)[ CD ]
Line_12 $$ List<InputSplit> splits = format.getSplits(job)-->Line_22 $$ results = readSplit(format, splits.get(1), job)[ FD ]
Line_3 $$ CompressionCodec gzip = new GzipCodec()-->Line_10 $$ writeFile(localFs, new Path(workDir, "part1.txt.gz"), gzip, "one  two  threefour five six  seveneightnine ten  ")[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_21 $$ assertEquals("splits[0][5]", "six  ", results.get(5))[ CD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_7 $$ format.setRecordLength(job.getConfiguration(), 5)[ CD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_3 $$ CompressionCodec gzip = new GzipCodec()[ CD ]
Line_12 $$ List<InputSplit> splits = format.getSplits(job)-->Line_16 $$ splits.set(0, splits.get(1))[ FD ]
Line_12 $$ List<InputSplit> splits = format.getSplits(job)-->Line_17 $$ splits.set(1, tmp)[ FD ]
Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_22 $$ results = readSplit(format, splits.get(1), job)[ FD ]
Line_6 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_7 $$ format.setRecordLength(job.getConfiguration(), 5)[ FD ]
Line_22 $$ results = readSplit(format, splits.get(1), job)-->Line_23 $$ assertEquals("splits[1] length", 10, results.size())[ FD ]
Line_15 $$ if (tmp.getPath().getName().equals("part2.txt.gz")) -->Line_17 $$ splits.set(1, tmp)[ CD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_11 $$ writeFile(localFs, new Path(workDir, "part2.txt.gz"), gzip, "ten  nine eightsevensix  five four threetwo  one  ")[ CD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_6 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()[ CD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_22 $$ results = readSplit(format, splits.get(1), job)[ CD ]
Line_6 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_22 $$ results = readSplit(format, splits.get(1), job)[ FD ]
Line_5 $$ Job job = Job.getInstance(defaultConf)-->Line_22 $$ results = readSplit(format, splits.get(1), job)[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_10 $$ writeFile(localFs, new Path(workDir, "part1.txt.gz"), gzip, "one  two  threefour five six  seveneightnine ten  ")[ CD ]
Line_14 $$ FileSplit tmp = (FileSplit) splits.get(0)-->Line_17 $$ splits.set(1, tmp)[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_24 $$ assertEquals("splits[1][0]", "ten  ", results.get(0))[ CD ]
Line_5 $$ Job job = Job.getInstance(defaultConf)-->Line_7 $$ format.setRecordLength(job.getConfiguration(), 5)[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_25 $$ assertEquals("splits[1][1]", "nine ", results.get(1))[ CD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_13 $$ assertEquals("compressed splits == 2", 2, splits.size())[ CD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_23 $$ assertEquals("splits[1] length", 10, results.size())[ CD ]
Line_12 $$ List<InputSplit> splits = format.getSplits(job)-->Line_14 $$ FileSplit tmp = (FileSplit) splits.get(0)[ FD ]
Line_22 $$ results = readSplit(format, splits.get(1), job)-->Line_25 $$ assertEquals("splits[1][1]", "nine ", results.get(1))[ FD ]
Line_3 $$ CompressionCodec gzip = new GzipCodec()-->Line_11 $$ writeFile(localFs, new Path(workDir, "part2.txt.gz"), gzip, "ten  nine eightsevensix  five four threetwo  one  ")[ FD ]
Line_22 $$ results = readSplit(format, splits.get(1), job)-->Line_24 $$ assertEquals("splits[1][0]", "ten  ", results.get(0))[ FD ]
Line_19 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_21 $$ assertEquals("splits[0][5]", "six  ", results.get(5))[ FD ]
Line_2 $$ public void testGzipWithTwoInputs() throws Exception -->Line_20 $$ assertEquals("splits[0] length", 10, results.size())[ CD ]
