Line_10 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_27 $$ results = readSplit(format, splits.get(1), job)[ FD ]
Line_27 $$ results = readSplit(format, splits.get(1), job)-->Line_29 $$ assertEquals("splits[1][0]", "ten  ", results.get(0))[ FD ]
Line_24 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_28 $$ assertEquals("splits[1] length", 10, results.size())[ FD ]
Line_24 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_30 $$ assertEquals("splits[1][1]", "nine ", results.get(1))[ FD ]
Line_27 $$ results = readSplit(format, splits.get(1), job)-->Line_30 $$ assertEquals("splits[1][1]", "nine ", results.get(1))[ FD ]
Line_9 $$ Job job = Job.getInstance(defaultConf)-->Line_24 $$ List<String> results = readSplit(format, splits.get(0), job)[ FD ]
Line_27 $$ results = readSplit(format, splits.get(1), job)-->Line_28 $$ assertEquals("splits[1] length", 10, results.size())[ FD ]
Line_9 $$ Job job = Job.getInstance(defaultConf)-->Line_13 $$ FileInputFormat.setInputPaths(job, workDir)[ FD ]
Line_7 $$ CompressionCodec gzip = new GzipCodec()-->Line_12 $$ ReflectionUtils.setConf(gzip, job.getConfiguration())[ FD ]
Line_24 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_26 $$ assertEquals("splits[0][5]", "six  ", results.get(5))[ FD ]
Line_19 $$ FileSplit tmp = (FileSplit) splits.get(0)-->Line_20 $$ if (tmp.getPath().getName().equals("part2.txt.gz")) [ FD ]
Line_17 $$ List<InputSplit> splits = format.getSplits(job)-->Line_19 $$ FileSplit tmp = (FileSplit) splits.get(0)[ FD ]
Line_10 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_24 $$ List<String> results = readSplit(format, splits.get(0), job)[ FD ]
Line_17 $$ List<InputSplit> splits = format.getSplits(job)-->Line_18 $$ assertEquals("compressed splits == 2", 2, splits.size())[ FD ]
Line_17 $$ List<InputSplit> splits = format.getSplits(job)-->Line_21 $$ splits.set(0, splits.get(1))[ FD ]
Line_24 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_27 $$ results = readSplit(format, splits.get(1), job)[ FD ]
Line_9 $$ Job job = Job.getInstance(defaultConf)-->Line_12 $$ ReflectionUtils.setConf(gzip, job.getConfiguration())[ FD ]
Line_10 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_11 $$ format.setRecordLength(job.getConfiguration(), 5)[ FD ]
Line_9 $$ Job job = Job.getInstance(defaultConf)-->Line_11 $$ format.setRecordLength(job.getConfiguration(), 5)[ FD ]
Line_9 $$ Job job = Job.getInstance(defaultConf)-->Line_27 $$ results = readSplit(format, splits.get(1), job)[ FD ]
Line_24 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_29 $$ assertEquals("splits[1][0]", "ten  ", results.get(0))[ FD ]
Line_17 $$ List<InputSplit> splits = format.getSplits(job)-->Line_22 $$ splits.set(1, tmp)[ FD ]
Line_24 $$ List<String> results = readSplit(format, splits.get(0), job)-->Line_25 $$ assertEquals("splits[0] length", 10, results.size())[ FD ]
Line_17 $$ List<InputSplit> splits = format.getSplits(job)-->Line_27 $$ results = readSplit(format, splits.get(1), job)[ FD ]
Line_19 $$ FileSplit tmp = (FileSplit) splits.get(0)-->Line_22 $$ splits.set(1, tmp)[ FD ]
Line_20 $$ if (tmp.getPath().getName().equals("part2.txt.gz")) -->Line_22 $$ splits.set(1, tmp)[ CD ]
Line_10 $$ FixedLengthInputFormat format = new FixedLengthInputFormat()-->Line_17 $$ List<InputSplit> splits = format.getSplits(job)[ FD ]
Line_17 $$ List<InputSplit> splits = format.getSplits(job)-->Line_24 $$ List<String> results = readSplit(format, splits.get(0), job)[ FD ]
Line_7 $$ CompressionCodec gzip = new GzipCodec()-->Line_16 $$ writeFile(localFs, new Path(workDir, "part2.txt.gz"), gzip, "ten  nine eightsevensix  five four threetwo  one  ")[ FD ]
Line_9 $$ Job job = Job.getInstance(defaultConf)-->Line_17 $$ List<InputSplit> splits = format.getSplits(job)[ FD ]
Line_20 $$ if (tmp.getPath().getName().equals("part2.txt.gz")) -->Line_21 $$ splits.set(0, splits.get(1))[ CD ]
