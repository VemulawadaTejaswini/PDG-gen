Line_9 $$ for (int i = size - 1; i >= 0; i--) -->Line_10 $$ list.get(i).write(out, referenceMap)[ CD ]
Line_2 $$ private static <N extends INode, A extends INodeAttributes, D extends AbstractINodeDiff<N, A, D>> void saveINodeDiffs(final AbstractINodeDiffList<N, A, D> diffs, final DataOutput out, ReferenceMap referenceMap) throws IOException -->Line_3 $$ if (diffs == null) [ CD ]
Line_2 $$ private static <N extends INode, A extends INodeAttributes, D extends AbstractINodeDiff<N, A, D>> void saveINodeDiffs(final AbstractINodeDiffList<N, A, D> diffs, final DataOutput out, ReferenceMap referenceMap) throws IOException -->Line_6 $$ final List<D> list = diffs.asList()[ FD ]
Line_2 $$ private static <N extends INode, A extends INodeAttributes, D extends AbstractINodeDiff<N, A, D>> void saveINodeDiffs(final AbstractINodeDiffList<N, A, D> diffs, final DataOutput out, ReferenceMap referenceMap) throws IOException -->Line_3 $$ if (diffs == null) [ FD ]
Line_3 $$ if (diffs == null) -->Line_7 $$ final int size = list.size()[ CD ]
Line_2 $$ private static <N extends INode, A extends INodeAttributes, D extends AbstractINodeDiff<N, A, D>> void saveINodeDiffs(final AbstractINodeDiffList<N, A, D> diffs, final DataOutput out, ReferenceMap referenceMap) throws IOException -->Line_10 $$ list.get(i).write(out, referenceMap)[ FD ]
Line_6 $$ final List<D> list = diffs.asList()-->Line_10 $$ list.get(i).write(out, referenceMap)[ FD ]
Line_3 $$ if (diffs == null) -->Line_6 $$ final List<D> list = diffs.asList()[ CD ]
Line_9 $$ for (int i = size - 1; i >= 0; i--) -->Line_10 $$ list.get(i).write(out, referenceMap)[ FD ]
Line_2 $$ private static <N extends INode, A extends INodeAttributes, D extends AbstractINodeDiff<N, A, D>> void saveINodeDiffs(final AbstractINodeDiffList<N, A, D> diffs, final DataOutput out, ReferenceMap referenceMap) throws IOException -->Line_8 $$ out.writeInt(size)[ FD ]
Line_3 $$ if (diffs == null) -->Line_9 $$ for (int i = size - 1; i >= 0; i--) [ CD ]
Line_3 $$ if (diffs == null) -->Line_4 $$ out.writeInt(-1)[ CD ]
Line_7 $$ final int size = list.size()-->Line_8 $$ out.writeInt(size)[ FD ]
Line_6 $$ final List<D> list = diffs.asList()-->Line_7 $$ final int size = list.size()[ FD ]
Line_2 $$ private static <N extends INode, A extends INodeAttributes, D extends AbstractINodeDiff<N, A, D>> void saveINodeDiffs(final AbstractINodeDiffList<N, A, D> diffs, final DataOutput out, ReferenceMap referenceMap) throws IOException -->Line_4 $$ out.writeInt(-1)[ FD ]
Line_3 $$ if (diffs == null) -->Line_8 $$ out.writeInt(size)[ CD ]
