Line_3 $$ List<PropertyDescriptor> pds = new LinkedList<PropertyDescriptor>(Arrays.asList(bw.getPropertyDescriptors()))-->Line_4 $$ for (Iterator<PropertyDescriptor> it = pds.iterator(); it.hasNext(); ) [ FD ]
Line_5 $$ PropertyDescriptor pd = it.next()-->Line_6 $$ if (isExcludedFromDependencyCheck(pd)) [ FD ]
Line_2 $$ protected PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(BeanWrapper bw) -->Line_3 $$ List<PropertyDescriptor> pds = new LinkedList<PropertyDescriptor>(Arrays.asList(bw.getPropertyDescriptors()))[ CD ]
Line_4 $$ for (Iterator<PropertyDescriptor> it = pds.iterator(); it.hasNext(); ) -->Line_7 $$ it.remove()[ FD ]
Line_2 $$ protected PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(BeanWrapper bw) -->Line_4 $$ for (Iterator<PropertyDescriptor> it = pds.iterator(); it.hasNext(); ) [ CD ]
Line_4 $$ for (Iterator<PropertyDescriptor> it = pds.iterator(); it.hasNext(); ) -->Line_5 $$ PropertyDescriptor pd = it.next()[ FD ]
Line_3 $$ List<PropertyDescriptor> pds = new LinkedList<PropertyDescriptor>(Arrays.asList(bw.getPropertyDescriptors()))-->Line_10 $$ return pds.toArray(new PropertyDescriptor[pds.size()])[ FD ]
Line_4 $$ for (Iterator<PropertyDescriptor> it = pds.iterator(); it.hasNext(); ) -->Line_5 $$ PropertyDescriptor pd = it.next()[ CD ]
Line_4 $$ for (Iterator<PropertyDescriptor> it = pds.iterator(); it.hasNext(); ) -->Line_6 $$ if (isExcludedFromDependencyCheck(pd)) [ CD ]
Line_2 $$ protected PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(BeanWrapper bw) -->Line_3 $$ List<PropertyDescriptor> pds = new LinkedList<PropertyDescriptor>(Arrays.asList(bw.getPropertyDescriptors()))[ FD ]
Line_2 $$ protected PropertyDescriptor[] filterPropertyDescriptorsForDependencyCheck(BeanWrapper bw) -->Line_10 $$ return pds.toArray(new PropertyDescriptor[pds.size()])[ CD ]
Line_6 $$ if (isExcludedFromDependencyCheck(pd)) -->Line_7 $$ it.remove()[ CD ]
