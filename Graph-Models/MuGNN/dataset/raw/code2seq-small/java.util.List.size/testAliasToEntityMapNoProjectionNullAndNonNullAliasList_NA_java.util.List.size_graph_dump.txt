Line_25 $$ Address yogiAddress2 = (Address) yogiMap2.get("a")-->Line_28 $$ assertFalse(yogiAddress1.getAddressType().equals(yogiAddress2.getAddressType()))[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student s left join s.addresses a left join s.preferredCourse order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_22 $$ Address yogiAddress1 = (Address) yogiMap1.get("a")-->Line_28 $$ assertFalse(yogiAddress1.getAddressType().equals(yogiAddress2.getAddressType()))[ FD ]
Line_19 $$ Map yogiMap2 = (Map) resultList.get(1)-->Line_25 $$ Address yogiAddress2 = (Address) yogiMap2.get("a")[ FD ]
Line_17 $$ Map yogiMap1 = (Map) resultList.get(0)-->Line_22 $$ Address yogiAddress1 = (Address) yogiMap1.get("a")[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ Map yogiMap1 = (Map) resultList.get(0)[ CD ]
Line_25 $$ Address yogiAddress2 = (Address) yogiMap2.get("a")-->Line_26 $$ assertEquals(yogiExpected.getAddresses().get(yogiAddress2.getAddressType()), yogiMap2.get("a"))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(yogiExpected, yogiMap1.get("s"))[ CD ]
Line_19 $$ Map yogiMap2 = (Map) resultList.get(1)-->Line_27 $$ assertSame(yogiMap1.get("s"), yogiMap2.get("s"))[ FD ]
Line_17 $$ Map yogiMap1 = (Map) resultList.get(0)-->Line_27 $$ assertSame(yogiMap1.get("s"), yogiMap2.get("s"))[ FD ]
Line_2 $$ public void testAliasToEntityMapNoProjectionNullAndNonNullAliasList() throws Exception -->Line_31 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_31 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_19 $$ Map yogiMap2 = (Map) resultList.get(1)-->Line_26 $$ assertEquals(yogiExpected.getAddresses().get(yogiAddress2.getAddressType()), yogiMap2.get("a"))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(2, yogiMap2.size())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_2 $$ public void testAliasToEntityMapNoProjectionNullAndNonNullAliasList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", CriteriaSpecification.LEFT_JOIN).setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP).createCriteria("s.preferredCourse", CriteriaSpecification.INNER_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_17 $$ Map yogiMap1 = (Map) resultList.get(0)-->Line_23 $$ assertEquals(yogiExpected.getAddresses().get(yogiAddress1.getAddressType()), yogiMap1.get("a"))[ FD ]
Line_17 $$ Map yogiMap1 = (Map) resultList.get(0)-->Line_21 $$ assertEquals(yogiExpected, yogiMap1.get("s"))[ FD ]
Line_19 $$ Map yogiMap2 = (Map) resultList.get(1)-->Line_24 $$ assertEquals(yogiExpected, yogiMap2.get("s"))[ FD ]
Line_17 $$ Map yogiMap1 = (Map) resultList.get(0)-->Line_18 $$ assertEquals(2, yogiMap1.size())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(yogiExpected.getAddresses().get(yogiAddress1.getAddressType()), yogiMap1.get("a"))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ Map yogiMap2 = (Map) resultList.get(1)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_28 $$ assertFalse(yogiAddress1.getAddressType().equals(yogiAddress2.getAddressType()))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ Address yogiAddress2 = (Address) yogiMap2.get("a")[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertSame(yogiMap1.get("s"), yogiMap2.get("s"))[ CD ]
Line_22 $$ Address yogiAddress1 = (Address) yogiMap1.get("a")-->Line_23 $$ assertEquals(yogiExpected.getAddresses().get(yogiAddress1.getAddressType()), yogiMap1.get("a"))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ Map yogiMap1 = (Map) resultList.get(0)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ assertEquals(2, yogiMap1.size())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ Address yogiAddress1 = (Address) yogiMap1.get("a")[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertEquals(yogiExpected.getAddresses().get(yogiAddress2.getAddressType()), yogiMap2.get("a"))[ CD ]
Line_19 $$ Map yogiMap2 = (Map) resultList.get(1)-->Line_20 $$ assertEquals(2, yogiMap2.size())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(yogiExpected, yogiMap2.get("s"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", CriteriaSpecification.LEFT_JOIN).setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP).createCriteria("s.preferredCourse", CriteriaSpecification.INNER_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_19 $$ Map yogiMap2 = (Map) resultList.get(1)[ FD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student s left join s.addresses a left join s.preferredCourse order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("from Student s left join s.addresses a left join s.preferredCourse order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
