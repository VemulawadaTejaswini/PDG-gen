Line_10 $$ em = getOrCreateEntityManager()-->Line_16 $$ assertTrue(em.contains(result.get(0)))[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_11 $$ em.getTransaction().begin()[ FD ]
Line_5 $$ Book book = new Book()-->Line_7 $$ em.persist(book)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_17 $$ em.close()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_10 $$ em = getOrCreateEntityManager()[ FD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_10 $$ em = getOrCreateEntityManager()[ CD ]
Line_12 $$ List result = em.createQuery("select book from Book book where book.name = :title").setParameter("title", book.name).getResultList()-->Line_14 $$ assertTrue(em.contains(result.get(0)))[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_15 $$ em.getTransaction().commit()[ FD ]
Line_12 $$ List result = em.createQuery("select book from Book book where book.name = :title").setParameter("title", book.name).getResultList()-->Line_13 $$ assertEquals("EntityManager.commit() should trigger a flush()", 1, result.size())[ FD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_14 $$ assertTrue(em.contains(result.get(0)))[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_12 $$ List result = em.createQuery("select book from Book book where book.name = :title").setParameter("title", book.name).getResultList()[ FD ]
Line_10 $$ em = getOrCreateEntityManager()-->Line_12 $$ List result = em.createQuery("select book from Book book where book.name = :title").setParameter("title", book.name).getResultList()[ FD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_11 $$ em.getTransaction().begin()[ CD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_17 $$ em.close()[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_16 $$ assertTrue(em.contains(result.get(0)))[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_8 $$ em.getTransaction().commit()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_9 $$ em.close()[ FD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_5 $$ Book book = new Book()[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_14 $$ assertTrue(em.contains(result.get(0)))[ FD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_6 $$ book.name = "Java for Dummies"[ CD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_3 $$ EntityManager em = getOrCreateEntityManager()[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_7 $$ em.persist(book)[ FD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_7 $$ em.persist(book)[ CD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_8 $$ em.getTransaction().commit()[ CD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_16 $$ assertTrue(em.contains(result.get(0)))[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_4 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_9 $$ em.close()[ CD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_12 $$ List result = em.createQuery("select book from Book book where book.name = :title").setParameter("title", book.name).getResultList()[ CD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_15 $$ em.getTransaction().commit()[ CD ]
Line_10 $$ em = getOrCreateEntityManager()-->Line_17 $$ em.close()[ FD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_4 $$ em.getTransaction().begin()[ CD ]
Line_10 $$ em = getOrCreateEntityManager()-->Line_15 $$ em.getTransaction().commit()[ FD ]
Line_10 $$ em = getOrCreateEntityManager()-->Line_14 $$ assertTrue(em.contains(result.get(0)))[ FD ]
Line_12 $$ List result = em.createQuery("select book from Book book where book.name = :title").setParameter("title", book.name).getResultList()-->Line_16 $$ assertTrue(em.contains(result.get(0)))[ FD ]
Line_10 $$ em = getOrCreateEntityManager()-->Line_11 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testTransactionAndContains() throws Exception -->Line_13 $$ assertEquals("EntityManager.commit() should trigger a flush()", 1, result.size())[ CD ]
