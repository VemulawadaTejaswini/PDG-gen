Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_25 $$ statusBar.setInfo(list.size() + " XPath " + s + " found (press Escape to remove the highlighting)")[ FD ]
Line_21 $$ SwingUtilities.invokeLater(new Runnable() -->Line_25 $$ statusBar.setInfo(list.size() + " XPath " + s + " found (press Escape to remove the highlighting)")[ CD ]
Line_4 $$ int lowestOffset = Integer.MAX_VALUE-->Line_18 $$ editor.getScrollingModel().scrollTo(editor.offsetToLogicalPosition(lowestOffset), ScrollType.MAKE_VISIBLE)[ FD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_18 $$ editor.getScrollingModel().scrollTo(editor.offsetToLogicalPosition(lowestOffset), ScrollType.MAKE_VISIBLE)[ FD ]
Line_17 $$ if (cfg.isScrollToFirst() && lowestOffset != Integer.MAX_VALUE) -->Line_19 $$ editor.getCaretModel().moveToOffset(lowestOffset)[ CD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_21 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_5 $$ for (final Object o : list) -->Line_7 $$ if (o instanceof PsiElement) [ FD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_3 $$ final Config cfg = myComponent.getConfig()[ CD ]
Line_3 $$ final Config cfg = myComponent.getConfig()-->Line_17 $$ if (cfg.isScrollToFirst() && lowestOffset != Integer.MAX_VALUE) [ FD ]
Line_8 $$ final PsiElement element = (PsiElement) o-->Line_10 $$ lowestOffset = highlightElement(editor, element, cfg, lowestOffset)[ FD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_4 $$ int lowestOffset = Integer.MAX_VALUE[ CD ]
Line_10 $$ lowestOffset = highlightElement(editor, element, cfg, lowestOffset)-->Line_19 $$ editor.getCaretModel().moveToOffset(lowestOffset)[ FD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_10 $$ lowestOffset = highlightElement(editor, element, cfg, lowestOffset)[ FD ]
Line_10 $$ lowestOffset = highlightElement(editor, element, cfg, lowestOffset)-->Line_18 $$ editor.getScrollingModel().scrollTo(editor.offsetToLogicalPosition(lowestOffset), ScrollType.MAKE_VISIBLE)[ FD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_17 $$ if (cfg.isScrollToFirst() && lowestOffset != Integer.MAX_VALUE) [ CD ]
Line_23 $$ final StatusBar statusBar = WindowManager.getInstance().getStatusBar(editor.getProject())-->Line_25 $$ statusBar.setInfo(list.size() + " XPath " + s + " found (press Escape to remove the highlighting)")[ FD ]
Line_8 $$ final PsiElement element = (PsiElement) o-->Line_9 $$ if (element.getContainingFile() == contextNode.getContainingFile()) [ FD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_24 $$ final String s = StringUtil.pluralize("match", list.size())[ FD ]
Line_17 $$ if (cfg.isScrollToFirst() && lowestOffset != Integer.MAX_VALUE) -->Line_18 $$ editor.getScrollingModel().scrollTo(editor.offsetToLogicalPosition(lowestOffset), ScrollType.MAKE_VISIBLE)[ CD ]
Line_4 $$ int lowestOffset = Integer.MAX_VALUE-->Line_10 $$ lowestOffset = highlightElement(editor, element, cfg, lowestOffset)[ FD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_9 $$ if (element.getContainingFile() == contextNode.getContainingFile()) [ FD ]
Line_21 $$ SwingUtilities.invokeLater(new Runnable() -->Line_23 $$ final StatusBar statusBar = WindowManager.getInstance().getStatusBar(editor.getProject())[ CD ]
Line_9 $$ if (element.getContainingFile() == contextNode.getContainingFile()) -->Line_10 $$ lowestOffset = highlightElement(editor, element, cfg, lowestOffset)[ CD ]
Line_21 $$ SwingUtilities.invokeLater(new Runnable() -->Line_24 $$ final String s = StringUtil.pluralize("match", list.size())[ CD ]
Line_4 $$ int lowestOffset = Integer.MAX_VALUE-->Line_19 $$ editor.getCaretModel().moveToOffset(lowestOffset)[ FD ]
Line_7 $$ if (o instanceof PsiElement) -->Line_13 $$ LOG.info("Don't know what to do with " + o + " in a list context")[ CD ]
Line_7 $$ if (o instanceof PsiElement) -->Line_8 $$ final PsiElement element = (PsiElement) o[ CD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_19 $$ editor.getCaretModel().moveToOffset(lowestOffset)[ FD ]
Line_3 $$ final Config cfg = myComponent.getConfig()-->Line_10 $$ lowestOffset = highlightElement(editor, element, cfg, lowestOffset)[ FD ]
Line_7 $$ if (o instanceof PsiElement) -->Line_9 $$ if (element.getContainingFile() == contextNode.getContainingFile()) [ CD ]
Line_2 $$ private void highlightResult(XmlElement contextNode, @NotNull final Editor editor, final List<?> list) -->Line_23 $$ final StatusBar statusBar = WindowManager.getInstance().getStatusBar(editor.getProject())[ FD ]
