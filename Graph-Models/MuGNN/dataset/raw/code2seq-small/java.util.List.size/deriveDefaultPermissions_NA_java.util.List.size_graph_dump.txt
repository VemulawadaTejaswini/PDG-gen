Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_12 $$ List<String> guestUnsupportedActions = ResourceActionsUtil.getModelResourceGuestUnsupportedActions(modelName)[ CD ]
Line_6 $$ List<String> groupPermissionsList = new ArrayList()-->Line_18 $$ groupPermissionsList.add(action)[ FD ]
Line_3 $$ long siteGroupId = PortalUtil.getSiteGroupId(repositoryId)-->Line_5 $$ Role defaultGroupRole = RoleLocalServiceUtil.getDefaultGroupRole(siteGroupId)[ FD ]
Line_3 $$ long siteGroupId = PortalUtil.getSiteGroupId(repositoryId)-->Line_4 $$ Group siteGroup = GroupLocalServiceUtil.getGroup(siteGroupId)[ FD ]
Line_14 $$ for (String action : supportedActions) -->Line_16 $$ guestPermissionsList.add(action)[ FD ]
Line_14 $$ for (String action : supportedActions) -->Line_15 $$ if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action) && siteGroup.hasPublicLayouts()) [ FD ]
Line_7 $$ List<String> guestPermissionsList = new ArrayList()-->Line_16 $$ guestPermissionsList.add(action)[ FD ]
Line_5 $$ Role defaultGroupRole = RoleLocalServiceUtil.getDefaultGroupRole(siteGroupId)-->Line_8 $$ String[] roleNames = [ FD ]
Line_5 $$ Role defaultGroupRole = RoleLocalServiceUtil.getDefaultGroupRole(siteGroupId)-->Line_17 $$ if (roleName.equals(defaultGroupRole.getName()) && groupDefaultActions.contains(action)) [ FD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_8 $$ String[] roleNames = [ CD ]
Line_14 $$ for (String action : supportedActions) -->Line_17 $$ if (roleName.equals(defaultGroupRole.getName()) && groupDefaultActions.contains(action)) [ FD ]
Line_14 $$ for (String action : supportedActions) -->Line_18 $$ groupPermissionsList.add(action)[ FD ]
Line_13 $$ for (String roleName : roleNames) -->Line_15 $$ if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action) && siteGroup.hasPublicLayouts()) [ FD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_10 $$ List<String> groupDefaultActions = ResourceActionsUtil.getModelResourceGroupDefaultActions(modelName)[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_11 $$ List<String> guestDefaultActions = ResourceActionsUtil.getModelResourceGuestDefaultActions(modelName)[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_25 $$ setGuestPermissions(guestPermissions)[ CD ]
Line_13 $$ for (String roleName : roleNames) -->Line_17 $$ if (roleName.equals(defaultGroupRole.getName()) && groupDefaultActions.contains(action)) [ FD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_9 $$ List<String> supportedActions = ResourceActionsUtil.getModelResourceActions(modelName)[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_22 $$ String[] groupPermissions = groupPermissionsList.toArray(new String[groupPermissionsList.size()])[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_4 $$ Group siteGroup = GroupLocalServiceUtil.getGroup(siteGroupId)[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_6 $$ List<String> groupPermissionsList = new ArrayList()[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_5 $$ Role defaultGroupRole = RoleLocalServiceUtil.getDefaultGroupRole(siteGroupId)[ CD ]
Line_7 $$ List<String> guestPermissionsList = new ArrayList()-->Line_24 $$ String[] guestPermissions = guestPermissionsList.toArray(new String[guestPermissionsList.size()])[ FD ]
Line_12 $$ List<String> guestUnsupportedActions = ResourceActionsUtil.getModelResourceGuestUnsupportedActions(modelName)-->Line_15 $$ if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action) && siteGroup.hasPublicLayouts()) [ FD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_24 $$ String[] guestPermissions = guestPermissionsList.toArray(new String[guestPermissionsList.size()])[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_7 $$ List<String> guestPermissionsList = new ArrayList()[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_3 $$ long siteGroupId = PortalUtil.getSiteGroupId(repositoryId)[ FD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_23 $$ setGroupPermissions(groupPermissions)[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_3 $$ long siteGroupId = PortalUtil.getSiteGroupId(repositoryId)[ CD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_12 $$ List<String> guestUnsupportedActions = ResourceActionsUtil.getModelResourceGuestUnsupportedActions(modelName)[ FD ]
Line_4 $$ Group siteGroup = GroupLocalServiceUtil.getGroup(siteGroupId)-->Line_15 $$ if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action) && siteGroup.hasPublicLayouts()) [ FD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_10 $$ List<String> groupDefaultActions = ResourceActionsUtil.getModelResourceGroupDefaultActions(modelName)[ FD ]
Line_10 $$ List<String> groupDefaultActions = ResourceActionsUtil.getModelResourceGroupDefaultActions(modelName)-->Line_17 $$ if (roleName.equals(defaultGroupRole.getName()) && groupDefaultActions.contains(action)) [ FD ]
Line_6 $$ List<String> groupPermissionsList = new ArrayList()-->Line_22 $$ String[] groupPermissions = groupPermissionsList.toArray(new String[groupPermissionsList.size()])[ FD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_11 $$ List<String> guestDefaultActions = ResourceActionsUtil.getModelResourceGuestDefaultActions(modelName)[ FD ]
Line_11 $$ List<String> guestDefaultActions = ResourceActionsUtil.getModelResourceGuestDefaultActions(modelName)-->Line_15 $$ if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action) && siteGroup.hasPublicLayouts()) [ FD ]
Line_2 $$ public void deriveDefaultPermissions(long repositoryId, String modelName) throws PortalException -->Line_9 $$ List<String> supportedActions = ResourceActionsUtil.getModelResourceActions(modelName)[ FD ]
Line_15 $$ if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action) && siteGroup.hasPublicLayouts()) -->Line_16 $$ guestPermissionsList.add(action)[ CD ]
Line_15 $$ if (roleName.equals(RoleConstants.GUEST) && !guestUnsupportedActions.contains(action) && guestDefaultActions.contains(action) && siteGroup.hasPublicLayouts()) -->Line_17 $$ if (roleName.equals(defaultGroupRole.getName()) && groupDefaultActions.contains(action)) [ CD ]
Line_22 $$ String[] groupPermissions = groupPermissionsList.toArray(new String[groupPermissionsList.size()])-->Line_23 $$ setGroupPermissions(groupPermissions)[ FD ]
Line_17 $$ if (roleName.equals(defaultGroupRole.getName()) && groupDefaultActions.contains(action)) -->Line_18 $$ groupPermissionsList.add(action)[ CD ]
Line_24 $$ String[] guestPermissions = guestPermissionsList.toArray(new String[guestPermissionsList.size()])-->Line_25 $$ setGuestPermissions(guestPermissions)[ FD ]
