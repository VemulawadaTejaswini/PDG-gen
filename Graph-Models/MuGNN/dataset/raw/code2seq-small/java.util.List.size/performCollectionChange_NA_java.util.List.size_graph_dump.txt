Line_8 $$ final String revisionFieldName = enversService.getAuditEntitiesConfiguration().getRevisionFieldName()-->Line_12 $$ if (!revisionFieldName.equals(originalIdEntry.getKey()) && !revisionTypePropName.equals(originalIdEntry.getKey())) [ FD ]
Line_24 $$ if (!originalIdPropName.equals(dataEntry.getKey())) -->Line_25 $$ qb.getRootParameters().addWhereWithParam(dataEntry.getKey(), true, "=", dataEntry.getValue())[ CD ]
Line_7 $$ final Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(originalIdPropName)-->Line_36 $$ updateLastRevision(session, enversService, l, originalId, persistentCollectionChangeData.getEntityName(), revision)[ FD ]
Line_5 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)-->Line_13 $$ qb.getRootParameters().addWhereWithParam(originalIdPropName + "." + originalIdEntry.getKey(), true, "=", originalIdEntry.getValue())[ FD ]
Line_18 $$ if (propertyType.isCollectionType()) -->Line_19 $$ CollectionType collectionPropertyType = (CollectionType) propertyType[ CD ]
Line_5 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)-->Line_31 $$ final List<Object> l = qb.toQuery(session).setLockOptions(LockOptions.UPGRADE).list()[ FD ]
Line_12 $$ if (!revisionFieldName.equals(originalIdEntry.getKey()) && !revisionTypePropName.equals(originalIdEntry.getKey())) -->Line_13 $$ qb.getRootParameters().addWhereWithParam(originalIdPropName + "." + originalIdEntry.getKey(), true, "=", originalIdEntry.getValue())[ CD ]
Line_16 $$ final SessionFactoryImplementor sessionFactory = ((SessionImplementor) session).getFactory()-->Line_17 $$ final Type propertyType = sessionFactory.getEntityPersister(entityName).getPropertyType(propertyName)[ FD ]
Line_6 $$ final String originalIdPropName = enversService.getAuditEntitiesConfiguration().getOriginalIdPropName()-->Line_7 $$ final Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(originalIdPropName)[ FD ]
Line_9 $$ final String revisionTypePropName = enversService.getAuditEntitiesConfiguration().getRevisionTypePropName()-->Line_12 $$ if (!revisionFieldName.equals(originalIdEntry.getKey()) && !revisionTypePropName.equals(originalIdEntry.getKey())) [ FD ]
Line_5 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)-->Line_25 $$ qb.getRootParameters().addWhereWithParam(dataEntry.getKey(), true, "=", dataEntry.getValue())[ FD ]
Line_6 $$ final String originalIdPropName = enversService.getAuditEntitiesConfiguration().getOriginalIdPropName()-->Line_24 $$ if (!originalIdPropName.equals(dataEntry.getKey())) [ FD ]
Line_31 $$ final List<Object> l = qb.toQuery(session).setLockOptions(LockOptions.UPGRADE).list()-->Line_36 $$ updateLastRevision(session, enversService, l, originalId, persistentCollectionChangeData.getEntityName(), revision)[ FD ]
Line_5 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)-->Line_30 $$ addEndRevisionNullRestriction(enversService, qb.getRootParameters())[ FD ]
Line_17 $$ final Type propertyType = sessionFactory.getEntityPersister(entityName).getPropertyType(propertyName)-->Line_18 $$ if (propertyType.isCollectionType()) [ FD ]
