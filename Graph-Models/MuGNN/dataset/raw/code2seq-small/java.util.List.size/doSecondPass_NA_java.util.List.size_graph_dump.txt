Line_60 $$ if (intermediateResults == null) -->Line_61 $$ intermediateResults = new ArrayList<String>()[ CD ]
Line_46 $$ Map<String, ArrayList<String>> propertyResultsTmp = new HashMap<String, ArrayList<String>>()-->Line_67 $$ for (Map.Entry<String, ArrayList<String>> entry : propertyResultsTmp.entrySet()) [ FD ]
Line_85 $$ for (ColumnResult columnResult : constructorResult.columns()) -->Line_86 $$ columnReturns.add(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(columnResult.name()), columnResult.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(columnResult.type().getName()) : null))[ FD ]
Line_7 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_88 $$ definition.addQueryReturn(new NativeSQLQueryConstructorReturn(constructorResult.targetClass(), columnReturns))[ FD ]
Line_60 $$ if (intermediateResults == null) -->Line_62 $$ propertyResultsTmp.put(key, intermediateResults)[ CD ]
Line_90 $$ if (isDefault) -->Line_91 $$ context.getMetadataCollector().addDefaultResultSetMapping(definition)[ CD ]
Line_17 $$ if (name.indexOf('.') == -1) -->Line_36 $$ int index = propertyNames.size()[ CD ]
Line_17 $$ if (name.indexOf('.') == -1) -->Line_29 $$ if (pc == null) [ CD ]
Line_17 $$ if (name.indexOf('.') == -1) -->Line_32 $$ int dotIndex = name.lastIndexOf('.')[ CD ]
Line_46 $$ Map<String, ArrayList<String>> propertyResultsTmp = new HashMap<String, ArrayList<String>>()-->Line_59 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)[ FD ]
Line_7 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_81 $$ definition.addQueryReturn(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(column.name()), column.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(column.type().getName()) : null))[ FD ]
Line_7 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_93 $$ context.getMetadataCollector().addResultSetMapping(definition)[ FD ]
Line_37 $$ for (String follower : followers) -->Line_38 $$ int currentIndex = getIndexOfFirstMatchingProperty(propertyNames, follower)[ FD ]
Line_58 $$ String key = StringHelper.root(name)-->Line_62 $$ propertyResultsTmp.put(key, intermediateResults)[ FD ]
Line_33 $$ String reducedName = name.substring(0, dotIndex)-->Line_34 $$ Iterator parentPropItr = getSubPropertyIterator(pc, reducedName)[ FD ]
Line_13 $$ List<String> propertyNames = new ArrayList<String>()-->Line_36 $$ int index = propertyNames.size()[ FD ]
Line_17 $$ if (name.indexOf('.') == -1) -->Line_34 $$ Iterator parentPropItr = getSubPropertyIterator(pc, reducedName)[ CD ]
Line_17 $$ if (name.indexOf('.') == -1) -->Line_41 $$ propertyNames.add(index, name)[ CD ]
Line_48 $$ final FieldResult propertyresult = (FieldResult) property-->Line_49 $$ final String name = propertyresult.name()[ FD ]
Line_59 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)-->Line_62 $$ propertyResultsTmp.put(key, intermediateResults)[ FD ]
Line_61 $$ intermediateResults = new ArrayList<String>()-->Line_64 $$ intermediateResults.add(quotingNormalizedColumnName)[ FD ]
Line_33 $$ String reducedName = name.substring(0, dotIndex)-->Line_35 $$ List<String> followers = getFollowers(parentPropItr, reducedName, name)[ FD ]
Line_7 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_78 $$ definition.addQueryReturn(result)[ FD ]
Line_17 $$ if (name.indexOf('.') == -1) -->Line_20 $$ propertyNames.add(name)[ CD ]
Line_13 $$ List<String> propertyNames = new ArrayList<String>()-->Line_20 $$ propertyNames.add(name)[ FD ]
Line_10 $$ for (EntityResult entity : ann.entities()) -->Line_77 $$ NativeSQLQueryRootReturn result = new NativeSQLQueryRootReturn("alias" + entityAliasIndex++, entity.entityClass().getName(), propertyResults, LockMode.READ)[ FD ]
Line_10 $$ for (EntityResult entity : ann.entities()) -->Line_54 $$ throw new MappingException("duplicate @FieldResult for property " + name + " on @Entity " + entity.entityClass().getName() + " in " + ann.name())[ FD ]
Line_36 $$ int index = propertyNames.size()-->Line_39 $$ index = currentIndex != -1 && currentIndex < index ? currentIndex : index[ FD ]
Line_39 $$ index = currentIndex != -1 && currentIndex < index ? currentIndex : index-->Line_41 $$ propertyNames.add(index, name)[ FD ]
Line_39 $$ index = currentIndex != -1 && currentIndex < index ? currentIndex : index-->Line_42 $$ properties.add(index, field)[ FD ]
Line_14 $$ for (FieldResult field : entity.fields()) -->Line_42 $$ properties.add(index, field)[ FD ]
Line_70 $$ if (!BinderHelper.isEmptyAnnotationValue(entity.discriminatorColumn())) -->Line_71 $$ final String quotingNormalizedName = normalizeColumnQuoting(entity.discriminatorColumn())[ CD ]
Line_66 $$ Map<String, String[]> propertyResults = new HashMap<String, String[]>()-->Line_72 $$ propertyResults.put("class", new String[] [ FD ]
Line_10 $$ for (EntityResult entity : ann.entities()) -->Line_14 $$ for (FieldResult field : entity.fields()) [ FD ]
Line_74 $$ if (propertyResults.isEmpty()) -->Line_75 $$ propertyResults = java.util.Collections.emptyMap()[ CD ]
Line_61 $$ intermediateResults = new ArrayList<String>()-->Line_62 $$ propertyResultsTmp.put(key, intermediateResults)[ FD ]
Line_9 $$ int entityAliasIndex = 0-->Line_77 $$ NativeSQLQueryRootReturn result = new NativeSQLQueryRootReturn("alias" + entityAliasIndex++, entity.entityClass().getName(), propertyResults, LockMode.READ)[ FD ]
Line_10 $$ for (EntityResult entity : ann.entities()) -->Line_70 $$ if (!BinderHelper.isEmptyAnnotationValue(entity.discriminatorColumn())) [ FD ]
Line_67 $$ for (Map.Entry<String, ArrayList<String>> entry : propertyResultsTmp.entrySet()) -->Line_68 $$ propertyResults.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]))[ FD ]
Line_45 $$ Set<String> uniqueReturnProperty = new HashSet<String>()-->Line_53 $$ if (uniqueReturnProperty.contains(name)) [ FD ]
Line_10 $$ for (EntityResult entity : ann.entities()) -->Line_71 $$ final String quotingNormalizedName = normalizeColumnQuoting(entity.discriminatorColumn())[ FD ]
Line_7 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_91 $$ context.getMetadataCollector().addDefaultResultSetMapping(definition)[ FD ]
Line_36 $$ int index = propertyNames.size()-->Line_42 $$ properties.add(index, field)[ FD ]
Line_17 $$ if (name.indexOf('.') == -1) -->Line_33 $$ String reducedName = name.substring(0, dotIndex)[ CD ]
Line_13 $$ List<String> propertyNames = new ArrayList<String>()-->Line_41 $$ propertyNames.add(index, name)[ FD ]
Line_10 $$ for (EntityResult entity : ann.entities()) -->Line_30 $$ throw new MappingException(String.format(Locale.ENGLISH, "Could not resolve entity [%s] referenced in SqlResultSetMapping [%s]", entity.entityClass().getName(), ann.name()))[ FD ]
Line_34 $$ Iterator parentPropItr = getSubPropertyIterator(pc, reducedName)-->Line_35 $$ List<String> followers = getFollowers(parentPropItr, reducedName, name)[ FD ]
Line_36 $$ int index = propertyNames.size()-->Line_41 $$ propertyNames.add(index, name)[ FD ]
Line_17 $$ if (name.indexOf('.') == -1) -->Line_42 $$ properties.add(index, field)[ CD ]
Line_45 $$ Set<String> uniqueReturnProperty = new HashSet<String>()-->Line_56 $$ uniqueReturnProperty.add(name)[ FD ]
Line_48 $$ final FieldResult propertyresult = (FieldResult) property-->Line_57 $$ final String quotingNormalizedColumnName = normalizeColumnQuoting(propertyresult.column())[ FD ]
Line_58 $$ String key = StringHelper.root(name)-->Line_59 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)[ FD ]
Line_59 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)-->Line_61 $$ intermediateResults = new ArrayList<String>()[ FD ]
Line_83 $$ for (ConstructorResult constructorResult : ann.classes()) -->Line_88 $$ definition.addQueryReturn(new NativeSQLQueryConstructorReturn(constructorResult.targetClass(), columnReturns))[ FD ]
Line_13 $$ List<String> propertyNames = new ArrayList<String>()-->Line_38 $$ int currentIndex = getIndexOfFirstMatchingProperty(propertyNames, follower)[ FD ]
Line_66 $$ Map<String, String[]> propertyResults = new HashMap<String, String[]>()-->Line_68 $$ propertyResults.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]))[ FD ]
Line_66 $$ Map<String, String[]> propertyResults = new HashMap<String, String[]>()-->Line_74 $$ if (propertyResults.isEmpty()) [ FD ]
Line_66 $$ Map<String, String[]> propertyResults = new HashMap<String, String[]>()-->Line_75 $$ propertyResults = java.util.Collections.emptyMap()[ FD ]
Line_59 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)-->Line_64 $$ intermediateResults.add(quotingNormalizedColumnName)[ FD ]
Line_80 $$ for (ColumnResult column : ann.columns()) -->Line_81 $$ definition.addQueryReturn(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(column.name()), column.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(column.type().getName()) : null))[ FD ]
Line_84 $$ List<NativeSQLQueryScalarReturn> columnReturns = new ArrayList<NativeSQLQueryScalarReturn>()-->Line_86 $$ columnReturns.add(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(columnResult.name()), columnResult.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(columnResult.type().getName()) : null))[ FD ]
Line_77 $$ NativeSQLQueryRootReturn result = new NativeSQLQueryRootReturn("alias" + entityAliasIndex++, entity.entityClass().getName(), propertyResults, LockMode.READ)-->Line_78 $$ definition.addQueryReturn(result)[ FD ]
Line_90 $$ if (isDefault) -->Line_93 $$ context.getMetadataCollector().addResultSetMapping(definition)[ CD ]
Line_59 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)-->Line_60 $$ if (intermediateResults == null) [ FD ]
Line_46 $$ Map<String, ArrayList<String>> propertyResultsTmp = new HashMap<String, ArrayList<String>>()-->Line_62 $$ propertyResultsTmp.put(key, intermediateResults)[ FD ]
Line_83 $$ for (ConstructorResult constructorResult : ann.classes()) -->Line_85 $$ for (ColumnResult columnResult : constructorResult.columns()) [ FD ]
Line_7 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_8 $$ LOG.debugf("Binding result set mapping: %s", definition.getName())[ FD ]
Line_57 $$ final String quotingNormalizedColumnName = normalizeColumnQuoting(propertyresult.column())-->Line_64 $$ intermediateResults.add(quotingNormalizedColumnName)[ FD ]
Line_32 $$ int dotIndex = name.lastIndexOf('.')-->Line_33 $$ String reducedName = name.substring(0, dotIndex)[ FD ]
Line_70 $$ if (!BinderHelper.isEmptyAnnotationValue(entity.discriminatorColumn())) -->Line_72 $$ propertyResults.put("class", new String[] [ CD ]
Line_17 $$ if (name.indexOf('.') == -1) -->Line_35 $$ List<String> followers = getFollowers(parentPropItr, reducedName, name)[ CD ]
