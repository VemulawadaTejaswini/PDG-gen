Line_11 $$ long tableId = createTable("test")-->Line_19 $$ long shardId4 = dao.insertShard(shardUuid4, tableId, 0, 0, 0)[ FD ]
Line_9 $$ int nodeId2 = dao.insertNode(nodeName2)-->Line_28 $$ dao.insertShardNode(shardId1, nodeId2)[ FD ]
Line_34 $$ List<ShardNode> shardNodes = dao.getShardNodes(tableId)-->Line_36 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid1)[ FD ]
Line_8 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_10 $$ assertEquals(dao.getAllNodesInUse(), ImmutableSet.of(nodeName1, nodeName2))[ FD ]
Line_6 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_27 $$ dao.insertShardNode(shardId1, nodeId1)[ FD ]
Line_34 $$ List<ShardNode> shardNodes = dao.getShardNodes(tableId)-->Line_37 $$ assertContainsShardNode(shardNodes, nodeName2, shardUuid1)[ FD ]
Line_14 $$ UUID shardUuid3 = UUID.randomUUID()-->Line_39 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid3)[ FD ]
Line_11 $$ long tableId = createTable("test")-->Line_33 $$ assertEquals(dao.getShards(tableId), shards)[ FD ]
Line_34 $$ List<ShardNode> shardNodes = dao.getShardNodes(tableId)-->Line_40 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid4)[ FD ]
Line_16 $$ long shardId1 = dao.insertShard(shardUuid1, tableId, 0, 0, 0)-->Line_27 $$ dao.insertShardNode(shardId1, nodeId1)[ FD ]
Line_34 $$ List<ShardNode> shardNodes = dao.getShardNodes(tableId)-->Line_35 $$ assertEquals(shardNodes.size(), 6)[ FD ]
Line_20 $$ List<UUID> shards = dao.getShards(tableId)-->Line_24 $$ assertTrue(shards.contains(shardUuid3))[ FD ]
Line_8 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_37 $$ assertContainsShardNode(shardNodes, nodeName2, shardUuid1)[ FD ]
Line_15 $$ UUID shardUuid4 = UUID.randomUUID()-->Line_25 $$ assertTrue(shards.contains(shardUuid4))[ FD ]
Line_14 $$ UUID shardUuid3 = UUID.randomUUID()-->Line_24 $$ assertTrue(shards.contains(shardUuid3))[ FD ]
Line_12 $$ UUID shardUuid1 = UUID.randomUUID()-->Line_16 $$ long shardId1 = dao.insertShard(shardUuid1, tableId, 0, 0, 0)[ FD ]
Line_8 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_41 $$ assertContainsShardNode(shardNodes, nodeName2, shardUuid4)[ FD ]
Line_20 $$ List<UUID> shards = dao.getShards(tableId)-->Line_25 $$ assertTrue(shards.contains(shardUuid4))[ FD ]
Line_34 $$ List<ShardNode> shardNodes = dao.getShardNodes(tableId)-->Line_39 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid3)[ FD ]
Line_18 $$ long shardId3 = dao.insertShard(shardUuid3, tableId, 0, 0, 0)-->Line_30 $$ dao.insertShardNode(shardId3, nodeId1)[ FD ]
Line_13 $$ UUID shardUuid2 = UUID.randomUUID()-->Line_38 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid2)[ FD ]
Line_6 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_29 $$ dao.insertShardNode(shardId2, nodeId1)[ FD ]
Line_9 $$ int nodeId2 = dao.insertNode(nodeName2)-->Line_32 $$ dao.insertShardNode(shardId4, nodeId2)[ FD ]
Line_15 $$ UUID shardUuid4 = UUID.randomUUID()-->Line_41 $$ assertContainsShardNode(shardNodes, nodeName2, shardUuid4)[ FD ]
Line_13 $$ UUID shardUuid2 = UUID.randomUUID()-->Line_23 $$ assertTrue(shards.contains(shardUuid2))[ FD ]
Line_5 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_40 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid4)[ FD ]
Line_34 $$ List<ShardNode> shardNodes = dao.getShardNodes(tableId)-->Line_41 $$ assertContainsShardNode(shardNodes, nodeName2, shardUuid4)[ FD ]
Line_11 $$ long tableId = createTable("test")-->Line_18 $$ long shardId3 = dao.insertShard(shardUuid3, tableId, 0, 0, 0)[ FD ]
Line_15 $$ UUID shardUuid4 = UUID.randomUUID()-->Line_19 $$ long shardId4 = dao.insertShard(shardUuid4, tableId, 0, 0, 0)[ FD ]
Line_6 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_30 $$ dao.insertShardNode(shardId3, nodeId1)[ FD ]
Line_20 $$ List<UUID> shards = dao.getShards(tableId)-->Line_33 $$ assertEquals(dao.getShards(tableId), shards)[ FD ]
Line_19 $$ long shardId4 = dao.insertShard(shardUuid4, tableId, 0, 0, 0)-->Line_31 $$ dao.insertShardNode(shardId4, nodeId1)[ FD ]
Line_20 $$ List<UUID> shards = dao.getShards(tableId)-->Line_22 $$ assertTrue(shards.contains(shardUuid1))[ FD ]
Line_11 $$ long tableId = createTable("test")-->Line_17 $$ long shardId2 = dao.insertShard(shardUuid2, tableId, 0, 0, 0)[ FD ]
Line_11 $$ long tableId = createTable("test")-->Line_16 $$ long shardId1 = dao.insertShard(shardUuid1, tableId, 0, 0, 0)[ FD ]
Line_11 $$ long tableId = createTable("test")-->Line_34 $$ List<ShardNode> shardNodes = dao.getShardNodes(tableId)[ FD ]
Line_12 $$ UUID shardUuid1 = UUID.randomUUID()-->Line_36 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid1)[ FD ]
Line_14 $$ UUID shardUuid3 = UUID.randomUUID()-->Line_18 $$ long shardId3 = dao.insertShard(shardUuid3, tableId, 0, 0, 0)[ FD ]
Line_12 $$ UUID shardUuid1 = UUID.randomUUID()-->Line_22 $$ assertTrue(shards.contains(shardUuid1))[ FD ]
Line_15 $$ UUID shardUuid4 = UUID.randomUUID()-->Line_40 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid4)[ FD ]
Line_17 $$ long shardId2 = dao.insertShard(shardUuid2, tableId, 0, 0, 0)-->Line_29 $$ dao.insertShardNode(shardId2, nodeId1)[ FD ]
Line_11 $$ long tableId = createTable("test")-->Line_26 $$ assertEquals(dao.getShardNodes(tableId).size(), 0)[ FD ]
Line_20 $$ List<UUID> shards = dao.getShards(tableId)-->Line_21 $$ assertEquals(shards.size(), 4)[ FD ]
Line_16 $$ long shardId1 = dao.insertShard(shardUuid1, tableId, 0, 0, 0)-->Line_28 $$ dao.insertShardNode(shardId1, nodeId2)[ FD ]
Line_13 $$ UUID shardUuid2 = UUID.randomUUID()-->Line_17 $$ long shardId2 = dao.insertShard(shardUuid2, tableId, 0, 0, 0)[ FD ]
Line_11 $$ long tableId = createTable("test")-->Line_20 $$ List<UUID> shards = dao.getShards(tableId)[ FD ]
Line_34 $$ List<ShardNode> shardNodes = dao.getShardNodes(tableId)-->Line_38 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid2)[ FD ]
Line_5 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_10 $$ assertEquals(dao.getAllNodesInUse(), ImmutableSet.of(nodeName1, nodeName2))[ FD ]
Line_5 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_36 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid1)[ FD ]
Line_5 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_39 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid3)[ FD ]
Line_12 $$ UUID shardUuid1 = UUID.randomUUID()-->Line_37 $$ assertContainsShardNode(shardNodes, nodeName2, shardUuid1)[ FD ]
Line_5 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_38 $$ assertContainsShardNode(shardNodes, nodeName1, shardUuid2)[ FD ]
Line_5 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_6 $$ int nodeId1 = dao.insertNode(nodeName1)[ FD ]
Line_6 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_31 $$ dao.insertShardNode(shardId4, nodeId1)[ FD ]
Line_8 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_9 $$ int nodeId2 = dao.insertNode(nodeName2)[ FD ]
Line_19 $$ long shardId4 = dao.insertShard(shardUuid4, tableId, 0, 0, 0)-->Line_32 $$ dao.insertShardNode(shardId4, nodeId2)[ FD ]
Line_20 $$ List<UUID> shards = dao.getShards(tableId)-->Line_23 $$ assertTrue(shards.contains(shardUuid2))[ FD ]
Line_5 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_7 $$ assertEquals(dao.getAllNodesInUse(), ImmutableSet.of(nodeName1))[ FD ]
