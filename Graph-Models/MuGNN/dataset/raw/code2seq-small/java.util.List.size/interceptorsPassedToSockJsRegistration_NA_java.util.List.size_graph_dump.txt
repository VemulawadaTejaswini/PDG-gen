Line_7 $$ List<Mapping> mappings = this.registration.getMappings()-->Line_8 $$ assertEquals(1, mappings.size())[ FD ]
Line_14 $$ List<HandshakeInterceptor> interceptors = mapping.sockJsService.getHandshakeInterceptors()-->Line_16 $$ assertEquals(OriginHandshakeInterceptor.class, interceptors.get(1).getClass())[ FD ]
Line_5 $$ HttpSessionHandshakeInterceptor interceptor = new HttpSessionHandshakeInterceptor()-->Line_6 $$ this.registration.addHandler(handler, "/foo").addInterceptors(interceptor).setAllowedOrigins("http://mydomain1.com").withSockJS()[ FD ]
Line_5 $$ HttpSessionHandshakeInterceptor interceptor = new HttpSessionHandshakeInterceptor()-->Line_15 $$ assertEquals(interceptor, interceptors.get(0))[ FD ]
Line_7 $$ List<Mapping> mappings = this.registration.getMappings()-->Line_9 $$ Mapping mapping = mappings.get(0)[ FD ]
Line_4 $$ WebSocketHandler handler = new TextWebSocketHandler()-->Line_10 $$ assertEquals(handler, mapping.webSocketHandler)[ FD ]
Line_14 $$ List<HandshakeInterceptor> interceptors = mapping.sockJsService.getHandshakeInterceptors()-->Line_15 $$ assertEquals(interceptor, interceptors.get(0))[ FD ]
Line_4 $$ WebSocketHandler handler = new TextWebSocketHandler()-->Line_6 $$ this.registration.addHandler(handler, "/foo").addInterceptors(interceptor).setAllowedOrigins("http://mydomain1.com").withSockJS()[ FD ]
