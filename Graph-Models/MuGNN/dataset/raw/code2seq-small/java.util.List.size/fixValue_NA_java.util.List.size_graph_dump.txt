Line_28 $$ List<Object> listValue = List.class.cast(value)-->Line_32 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_6 $$ if (value == null) -->Line_7 $$ return null[ CD ]
Line_18 $$ String keyType = signature.getParameters().get(0).toString()-->Line_22 $$ fixedValue.put(fixValue(keyType, entry.getKey()), fixValue(valueType, entry.getValue()))[ FD ]
Line_28 $$ List<Object> listValue = List.class.cast(value)-->Line_30 $$ for (int i = 0; i < listValue.size(); i++) [ FD ]
Line_30 $$ for (int i = 0; i < listValue.size(); i++) -->Line_32 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_9 $$ TypeSignature signature = parseTypeSignature(type)-->Line_32 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_9 $$ TypeSignature signature = parseTypeSignature(type)-->Line_31 $$ String key = (String) signature.getLiteralParameters().get(i)[ FD ]
Line_10 $$ if (signature.getBase().equals(ARRAY)) -->Line_11 $$ List<Object> fixedValue = new ArrayList()[ CD ]
Line_26 $$ if (signature.getBase().equals(ROW)) -->Line_30 $$ for (int i = 0; i < listValue.size(); i++) [ CD ]
Line_9 $$ TypeSignature signature = parseTypeSignature(type)-->Line_26 $$ if (signature.getBase().equals(ROW)) [ FD ]
Line_11 $$ List<Object> fixedValue = new ArrayList()-->Line_22 $$ fixedValue.put(fixValue(keyType, entry.getKey()), fixValue(valueType, entry.getValue()))[ FD ]
Line_9 $$ TypeSignature signature = parseTypeSignature(type)-->Line_29 $$ checkArgument(listValue.size() == signature.getLiteralParameters().size(), "Mismatched data values and row type")[ FD ]
Line_12 $$ for (Object object : List.class.cast(value)) -->Line_13 $$ fixedValue.add(fixValue(signature.getParameters().get(0).toString(), object))[ FD ]
Line_26 $$ if (signature.getBase().equals(ROW)) -->Line_29 $$ checkArgument(listValue.size() == signature.getLiteralParameters().size(), "Mismatched data values and row type")[ CD ]
Line_21 $$ for (Map.Entry<?, ?> entry : (Set<Map.Entry<?, ?>>) Map.class.cast(value).entrySet()) -->Line_22 $$ fixedValue.put(fixValue(keyType, entry.getKey()), fixValue(valueType, entry.getValue()))[ FD ]
Line_9 $$ TypeSignature signature = parseTypeSignature(type)-->Line_13 $$ fixedValue.add(fixValue(signature.getParameters().get(0).toString(), object))[ FD ]
Line_9 $$ TypeSignature signature = parseTypeSignature(type)-->Line_10 $$ if (signature.getBase().equals(ARRAY)) [ FD ]
Line_11 $$ List<Object> fixedValue = new ArrayList()-->Line_32 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_17 $$ if (signature.getBase().equals(MAP)) -->Line_24 $$ return fixedValue[ CD ]
Line_48 $$ if (value instanceof String) -->Line_49 $$ return Boolean.parseBoolean((String) value)[ CD ]
Line_28 $$ List<Object> listValue = List.class.cast(value)-->Line_29 $$ checkArgument(listValue.size() == signature.getLiteralParameters().size(), "Mismatched data values and row type")[ FD ]
Line_43 $$ if (value instanceof String) -->Line_44 $$ return Double.parseDouble((String) value)[ CD ]
Line_30 $$ for (int i = 0; i < listValue.size(); i++) -->Line_32 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ CD ]
Line_11 $$ List<Object> fixedValue = new ArrayList()-->Line_13 $$ fixedValue.add(fixValue(signature.getParameters().get(0).toString(), object))[ FD ]
Line_9 $$ TypeSignature signature = parseTypeSignature(type)-->Line_17 $$ if (signature.getBase().equals(MAP)) [ FD ]
Line_30 $$ for (int i = 0; i < listValue.size(); i++) -->Line_31 $$ String key = (String) signature.getLiteralParameters().get(i)[ CD ]
Line_9 $$ TypeSignature signature = parseTypeSignature(type)-->Line_19 $$ String valueType = signature.getParameters().get(1).toString()[ FD ]
Line_19 $$ String valueType = signature.getParameters().get(1).toString()-->Line_22 $$ fixedValue.put(fixValue(keyType, entry.getKey()), fixValue(valueType, entry.getValue()))[ FD ]
Line_17 $$ if (signature.getBase().equals(MAP)) -->Line_18 $$ String keyType = signature.getParameters().get(0).toString()[ CD ]
Line_38 $$ if (value instanceof String) -->Line_39 $$ return Long.parseLong((String) value)[ CD ]
Line_9 $$ TypeSignature signature = parseTypeSignature(type)-->Line_18 $$ String keyType = signature.getParameters().get(0).toString()[ FD ]
Line_30 $$ for (int i = 0; i < listValue.size(); i++) -->Line_31 $$ String key = (String) signature.getLiteralParameters().get(i)[ FD ]
Line_26 $$ if (signature.getBase().equals(ROW)) -->Line_34 $$ return fixedValue[ CD ]
Line_17 $$ if (signature.getBase().equals(MAP)) -->Line_19 $$ String valueType = signature.getParameters().get(1).toString()[ CD ]
Line_10 $$ if (signature.getBase().equals(ARRAY)) -->Line_15 $$ return fixedValue[ CD ]
Line_31 $$ String key = (String) signature.getLiteralParameters().get(i)-->Line_32 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_26 $$ if (signature.getBase().equals(ROW)) -->Line_28 $$ List<Object> listValue = List.class.cast(value)[ CD ]
