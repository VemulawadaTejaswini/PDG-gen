Line_4 $$ if (stringLiteralExpression != null) -->Line_6 $$ final Pair<String, String> quotes = PythonStringUtil.getQuotes(text)[ CD ]
Line_2 $$ protected String getPostfix(@NotNull PsiElement element) -->Line_3 $$ final PyStringLiteralExpression stringLiteralExpression = PsiTreeUtil.getParentOfType(element, PyStringLiteralExpression.class)[ FD ]
Line_10 $$ if (quotes != null) -->Line_11 $$ final List<String> strings = StringUtil.split(text, "\n")[ CD ]
Line_11 $$ final List<String> strings = StringUtil.split(text, "\n")-->Line_12 $$ if (strings.get(strings.size() - 1).trim().equals(quotes.getSecond())) [ FD ]
Line_5 $$ final String text = stringLiteralExpression.getText()-->Line_6 $$ final Pair<String, String> quotes = PythonStringUtil.getQuotes(text)[ FD ]
Line_4 $$ if (stringLiteralExpression != null) -->Line_7 $$ final PyDocStringOwner docStringOwner = PsiTreeUtil.getParentOfType(stringLiteralExpression, PyDocStringOwner.class)[ CD ]
Line_2 $$ protected String getPostfix(@NotNull PsiElement element) -->Line_3 $$ final PyStringLiteralExpression stringLiteralExpression = PsiTreeUtil.getParentOfType(element, PyStringLiteralExpression.class)[ CD ]
Line_5 $$ final String text = stringLiteralExpression.getText()-->Line_11 $$ final List<String> strings = StringUtil.split(text, "\n")[ FD ]
Line_4 $$ if (stringLiteralExpression != null) -->Line_8 $$ if (docStringOwner != null && stringLiteralExpression.equals(docStringOwner.getDocStringExpression())) [ CD ]
Line_3 $$ final PyStringLiteralExpression stringLiteralExpression = PsiTreeUtil.getParentOfType(element, PyStringLiteralExpression.class)-->Line_5 $$ final String text = stringLiteralExpression.getText()[ FD ]
Line_8 $$ if (docStringOwner != null && stringLiteralExpression.equals(docStringOwner.getDocStringExpression())) -->Line_10 $$ if (quotes != null) [ CD ]
Line_6 $$ final Pair<String, String> quotes = PythonStringUtil.getQuotes(text)-->Line_20 $$ return quotes != null ? quotes.getSecond() : "\""[ FD ]
Line_6 $$ final Pair<String, String> quotes = PythonStringUtil.getQuotes(text)-->Line_10 $$ if (quotes != null) [ FD ]
Line_12 $$ if (strings.get(strings.size() - 1).trim().equals(quotes.getSecond())) -->Line_15 $$ return quotes.getSecond()[ CD ]
Line_3 $$ final PyStringLiteralExpression stringLiteralExpression = PsiTreeUtil.getParentOfType(element, PyStringLiteralExpression.class)-->Line_4 $$ if (stringLiteralExpression != null) [ FD ]
Line_3 $$ final PyStringLiteralExpression stringLiteralExpression = PsiTreeUtil.getParentOfType(element, PyStringLiteralExpression.class)-->Line_8 $$ if (docStringOwner != null && stringLiteralExpression.equals(docStringOwner.getDocStringExpression())) [ FD ]
Line_10 $$ if (quotes != null) -->Line_12 $$ if (strings.get(strings.size() - 1).trim().equals(quotes.getSecond())) [ CD ]
Line_2 $$ protected String getPostfix(@NotNull PsiElement element) -->Line_4 $$ if (stringLiteralExpression != null) [ CD ]
Line_3 $$ final PyStringLiteralExpression stringLiteralExpression = PsiTreeUtil.getParentOfType(element, PyStringLiteralExpression.class)-->Line_9 $$ String indent = getIndent(stringLiteralExpression)[ FD ]
Line_6 $$ final Pair<String, String> quotes = PythonStringUtil.getQuotes(text)-->Line_13 $$ return indent + quotes.getSecond()[ FD ]
Line_2 $$ protected String getPostfix(@NotNull PsiElement element) -->Line_22 $$ return ""[ CD ]
Line_3 $$ final PyStringLiteralExpression stringLiteralExpression = PsiTreeUtil.getParentOfType(element, PyStringLiteralExpression.class)-->Line_7 $$ final PyDocStringOwner docStringOwner = PsiTreeUtil.getParentOfType(stringLiteralExpression, PyDocStringOwner.class)[ FD ]
Line_4 $$ if (stringLiteralExpression != null) -->Line_5 $$ final String text = stringLiteralExpression.getText()[ CD ]
Line_6 $$ final Pair<String, String> quotes = PythonStringUtil.getQuotes(text)-->Line_12 $$ if (strings.get(strings.size() - 1).trim().equals(quotes.getSecond())) [ FD ]
Line_12 $$ if (strings.get(strings.size() - 1).trim().equals(quotes.getSecond())) -->Line_13 $$ return indent + quotes.getSecond()[ CD ]
Line_6 $$ final Pair<String, String> quotes = PythonStringUtil.getQuotes(text)-->Line_15 $$ return quotes.getSecond()[ FD ]
Line_8 $$ if (docStringOwner != null && stringLiteralExpression.equals(docStringOwner.getDocStringExpression())) -->Line_18 $$ return indent + "\""[ CD ]
Line_8 $$ if (docStringOwner != null && stringLiteralExpression.equals(docStringOwner.getDocStringExpression())) -->Line_9 $$ String indent = getIndent(stringLiteralExpression)[ CD ]
Line_7 $$ final PyDocStringOwner docStringOwner = PsiTreeUtil.getParentOfType(stringLiteralExpression, PyDocStringOwner.class)-->Line_8 $$ if (docStringOwner != null && stringLiteralExpression.equals(docStringOwner.getDocStringExpression())) [ FD ]
Line_8 $$ if (docStringOwner != null && stringLiteralExpression.equals(docStringOwner.getDocStringExpression())) -->Line_20 $$ return quotes != null ? quotes.getSecond() : "\""[ CD ]
