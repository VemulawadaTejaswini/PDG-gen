Line_11 $$ for (int col = 0; col < headers.size(); col++) -->Line_22 $$ for (int col = 0; col < headers.size(); col++) [ FD ]
Line_5 $$ List<DisplayHeader> headers = buildDisplayHeaders(table, request)-->Line_12 $$ DisplayHeader header = headers.get(col)[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_21 $$ for (int row = 0; row < table.getRows().size(); row++) [ CD ]
Line_21 $$ for (int row = 0; row < table.getRows().size(); row++) -->Line_22 $$ for (int col = 0; col < headers.size(); col++) [ CD ]
Line_5 $$ List<DisplayHeader> headers = buildDisplayHeaders(table, request)-->Line_9 $$ int lastHeader = headers.size() - 1[ FD ]
Line_22 $$ for (int col = 0; col < headers.size(); col++) -->Line_23 $$ DisplayHeader header = headers.get(col)[ FD ]
Line_3 $$ RestRequest request = channel.request()-->Line_5 $$ List<DisplayHeader> headers = buildDisplayHeaders(table, request)[ FD ]
Line_21 $$ for (int row = 0; row < table.getRows().size(); row++) -->Line_30 $$ out.append("\n")[ CD ]
Line_13 $$ boolean isLastColumn = col == lastHeader-->Line_25 $$ pad(table.getAsMap().get(header.name).get(row), width[col], request, out, isLastColumn)[ FD ]
Line_8 $$ UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOut)-->Line_25 $$ pad(table.getAsMap().get(header.name).get(row), width[col], request, out, isLastColumn)[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_33 $$ return new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, bytesOut.bytes())[ CD ]
Line_3 $$ RestRequest request = channel.request()-->Line_6 $$ int[] width = buildWidths(table, request, verbose, headers)[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_25 $$ pad(table.getAsMap().get(header.name).get(row), width[col], request, out, isLastColumn)[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_3 $$ RestRequest request = channel.request()[ CD ]
Line_11 $$ for (int col = 0; col < headers.size(); col++) -->Line_12 $$ DisplayHeader header = headers.get(col)[ CD ]
Line_8 $$ UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOut)-->Line_14 $$ pad(new Table.Cell(header.display, table.findHeaderByName(header.name)), width[col], request, out, isLastColumn)[ FD ]
Line_24 $$ boolean isLastColumn = col == lastHeader-->Line_26 $$ if (!isLastColumn) [ FD ]
Line_7 $$ BytesStreamOutput bytesOut = channel.bytesOutput()-->Line_8 $$ UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOut)[ FD ]
Line_24 $$ boolean isLastColumn = col == lastHeader-->Line_25 $$ pad(table.getAsMap().get(header.name).get(row), width[col], request, out, isLastColumn)[ FD ]
Line_5 $$ List<DisplayHeader> headers = buildDisplayHeaders(table, request)-->Line_11 $$ for (int col = 0; col < headers.size(); col++) [ FD ]
Line_7 $$ BytesStreamOutput bytesOut = channel.bytesOutput()-->Line_33 $$ return new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, bytesOut.bytes())[ FD ]
Line_3 $$ RestRequest request = channel.request()-->Line_14 $$ pad(new Table.Cell(header.display, table.findHeaderByName(header.name)), width[col], request, out, isLastColumn)[ FD ]
Line_8 $$ UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOut)-->Line_19 $$ out.append("\n")[ FD ]
Line_22 $$ for (int col = 0; col < headers.size(); col++) -->Line_24 $$ boolean isLastColumn = col == lastHeader[ CD ]
Line_11 $$ for (int col = 0; col < headers.size(); col++) -->Line_12 $$ DisplayHeader header = headers.get(col)[ FD ]
Line_8 $$ UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOut)-->Line_16 $$ out.append(" ")[ FD ]
Line_3 $$ RestRequest request = channel.request()-->Line_4 $$ boolean verbose = request.paramAsBoolean("v", false)[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_7 $$ BytesStreamOutput bytesOut = channel.bytesOutput()[ CD ]
Line_10 $$ if (verbose) -->Line_19 $$ out.append("\n")[ CD ]
Line_11 $$ for (int col = 0; col < headers.size(); col++) -->Line_15 $$ if (!isLastColumn) [ CD ]
Line_5 $$ List<DisplayHeader> headers = buildDisplayHeaders(table, request)-->Line_23 $$ DisplayHeader header = headers.get(col)[ FD ]
Line_13 $$ boolean isLastColumn = col == lastHeader-->Line_14 $$ pad(new Table.Cell(header.display, table.findHeaderByName(header.name)), width[col], request, out, isLastColumn)[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_6 $$ int[] width = buildWidths(table, request, verbose, headers)[ CD ]
Line_3 $$ RestRequest request = channel.request()-->Line_25 $$ pad(table.getAsMap().get(header.name).get(row), width[col], request, out, isLastColumn)[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_5 $$ List<DisplayHeader> headers = buildDisplayHeaders(table, request)[ CD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_4 $$ boolean verbose = request.paramAsBoolean("v", false)[ CD ]
Line_21 $$ for (int row = 0; row < table.getRows().size(); row++) -->Line_25 $$ pad(table.getAsMap().get(header.name).get(row), width[col], request, out, isLastColumn)[ FD ]
Line_13 $$ boolean isLastColumn = col == lastHeader-->Line_26 $$ if (!isLastColumn) [ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_5 $$ List<DisplayHeader> headers = buildDisplayHeaders(table, request)[ FD ]
Line_11 $$ for (int col = 0; col < headers.size(); col++) -->Line_13 $$ boolean isLastColumn = col == lastHeader[ CD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_6 $$ int[] width = buildWidths(table, request, verbose, headers)[ FD ]
Line_22 $$ for (int col = 0; col < headers.size(); col++) -->Line_25 $$ pad(table.getAsMap().get(header.name).get(row), width[col], request, out, isLastColumn)[ CD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_9 $$ int lastHeader = headers.size() - 1[ CD ]
Line_10 $$ if (verbose) -->Line_11 $$ for (int col = 0; col < headers.size(); col++) [ CD ]
Line_13 $$ boolean isLastColumn = col == lastHeader-->Line_15 $$ if (!isLastColumn) [ FD ]
Line_22 $$ for (int col = 0; col < headers.size(); col++) -->Line_23 $$ DisplayHeader header = headers.get(col)[ CD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_21 $$ for (int row = 0; row < table.getRows().size(); row++) [ FD ]
Line_11 $$ for (int col = 0; col < headers.size(); col++) -->Line_14 $$ pad(new Table.Cell(header.display, table.findHeaderByName(header.name)), width[col], request, out, isLastColumn)[ CD ]
Line_8 $$ UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOut)-->Line_30 $$ out.append("\n")[ FD ]
Line_8 $$ UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOut)-->Line_27 $$ out.append(" ")[ FD ]
Line_26 $$ if (!isLastColumn) -->Line_27 $$ out.append(" ")[ CD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_8 $$ UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOut)[ CD ]
Line_15 $$ if (!isLastColumn) -->Line_16 $$ out.append(" ")[ CD ]
Line_11 $$ for (int col = 0; col < headers.size(); col++) -->Line_23 $$ DisplayHeader header = headers.get(col)[ FD ]
Line_5 $$ List<DisplayHeader> headers = buildDisplayHeaders(table, request)-->Line_22 $$ for (int col = 0; col < headers.size(); col++) [ FD ]
Line_4 $$ boolean verbose = request.paramAsBoolean("v", false)-->Line_6 $$ int[] width = buildWidths(table, request, verbose, headers)[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_10 $$ if (verbose) [ CD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_3 $$ RestRequest request = channel.request()[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_32 $$ out.close()[ CD ]
Line_8 $$ UTF8StreamWriter out = new UTF8StreamWriter().setOutput(bytesOut)-->Line_32 $$ out.close()[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_14 $$ pad(new Table.Cell(header.display, table.findHeaderByName(header.name)), width[col], request, out, isLastColumn)[ FD ]
Line_2 $$ public static RestResponse buildTextPlainResponse(Table table, RestChannel channel) throws IOException -->Line_7 $$ BytesStreamOutput bytesOut = channel.bytesOutput()[ FD ]
Line_22 $$ for (int col = 0; col < headers.size(); col++) -->Line_26 $$ if (!isLastColumn) [ CD ]
Line_5 $$ List<DisplayHeader> headers = buildDisplayHeaders(table, request)-->Line_6 $$ int[] width = buildWidths(table, request, verbose, headers)[ FD ]
