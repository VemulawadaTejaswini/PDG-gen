Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_44 $$ buf.append(" not null")[ FD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_50 $$ uk.addColumn(col)[ FD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_56 $$ String columnComment = col.getComment()[ FD ]
Line_37 $$ String defaultValue = col.getDefaultValue()-->Line_38 $$ if (defaultValue != null) [ FD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_34 $$ buf.append(' ').append(dialect.getIdentityColumnSupport().getIdentityColumnString(col.getSqlTypeCode(metadata)))[ FD ]
Line_14 $$ if (table.hasPrimaryKey()) -->Line_15 $$ Column pkColumn = (Column) table.getPrimaryKey().getColumns().iterator().next()[ CD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_58 $$ buf.append(dialect.getColumnComment(columnComment))[ FD ]
Line_7 $$ boolean isPrimaryKeyIdentity = table.hasPrimaryKey() && table.getIdentifierValue() != null && table.getIdentifierValue().isIdentityColumn(metadata.getIdentifierGeneratorFactory(), dialect)-->Line_29 $$ if (isPrimaryKeyIdentity && colName.equals(pkColName)) [ FD ]
Line_47 $$ if (col.isUnique()) -->Line_48 $$ String keyName = Constraint.generateName("UK_", table, col)[ CD ]
Line_68 $$ List<String> sqlStrings = new ArrayList<String>()-->Line_71 $$ applyInitCommands(table, sqlStrings)[ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_34 $$ buf.append(' ').append(dialect.getIdentityColumnSupport().getIdentityColumnString(col.getSqlTypeCode(metadata)))[ FD ]
Line_29 $$ if (isPrimaryKeyIdentity && colName.equals(pkColName)) -->Line_34 $$ buf.append(' ').append(dialect.getIdentityColumnSupport().getIdentityColumnString(col.getSqlTypeCode(metadata)))[ CD ]
Line_47 $$ if (col.isUnique()) -->Line_51 $$ buf.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(col))[ CD ]
Line_20 $$ while (columnItr.hasNext()) -->Line_27 $$ String colName = col.getQuotedName(dialect)[ CD ]
Line_4 $$ final QualifiedName tableName = new QualifiedNameParser.NameParts(Identifier.toIdentifier(table.getCatalog(), table.isCatalogQuoted()), Identifier.toIdentifier(table.getSchema(), table.isSchemaQuoted()), table.getNameIdentifier())-->Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")[ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_62 $$ buf.append(", ").append(table.getPrimaryKey().sqlConstraintString(dialect))[ FD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_51 $$ buf.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(col))[ FD ]
Line_29 $$ if (isPrimaryKeyIdentity && colName.equals(pkColName)) -->Line_36 $$ buf.append(col.getSqlType(dialect, metadata))[ CD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_54 $$ buf.append(" check (").append(col.getCheckConstraint()).append(")")[ FD ]
Line_18 $$ final Iterator columnItr = table.getColumnIterator()-->Line_20 $$ while (columnItr.hasNext()) [ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_42 $$ buf.append(dialect.getNullColumnString())[ FD ]
Line_27 $$ String colName = col.getQuotedName(dialect)-->Line_29 $$ if (isPrimaryKeyIdentity && colName.equals(pkColName)) [ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_51 $$ buf.append(dialect.getUniqueDelegate().getColumnDefinitionUniquenessFragment(col))[ FD ]
Line_20 $$ while (columnItr.hasNext()) -->Line_53 $$ if (col.getCheckConstraint() != null && dialect.supportsColumnCheck()) [ CD ]
Line_53 $$ if (col.getCheckConstraint() != null && dialect.supportsColumnCheck()) -->Line_54 $$ buf.append(" check (").append(col.getCheckConstraint()).append(")")[ CD ]
Line_47 $$ if (col.isUnique()) -->Line_49 $$ UniqueKey uk = table.getOrCreateUniqueKey(keyName)[ CD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_27 $$ String colName = col.getQuotedName(dialect)[ FD ]
Line_20 $$ while (columnItr.hasNext()) -->Line_47 $$ if (col.isUnique()) [ CD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_69 $$ sqlStrings.add(buf.toString())[ FD ]
Line_16 $$ pkColName = pkColumn.getQuotedName(dialect)-->Line_29 $$ if (isPrimaryKeyIdentity && colName.equals(pkColName)) [ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_67 $$ applyTableTypeString(buf)[ FD ]
Line_49 $$ UniqueKey uk = table.getOrCreateUniqueKey(keyName)-->Line_50 $$ uk.addColumn(col)[ FD ]
Line_20 $$ while (columnItr.hasNext()) -->Line_57 $$ if (columnComment != null) [ CD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_48 $$ String keyName = Constraint.generateName("UK_", table, col)[ FD ]
Line_56 $$ String columnComment = col.getComment()-->Line_57 $$ if (columnComment != null) [ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_25 $$ buf.append(", ")[ FD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_36 $$ buf.append(col.getSqlType(dialect, metadata))[ FD ]
Line_20 $$ while (columnItr.hasNext()) -->Line_22 $$ if (isFirst) [ CD ]
Line_68 $$ List<String> sqlStrings = new ArrayList<String>()-->Line_70 $$ applyComments(table, sqlStrings)[ FD ]
Line_37 $$ String defaultValue = col.getDefaultValue()-->Line_39 $$ buf.append(" default ").append(defaultValue)[ FD ]
Line_19 $$ boolean isFirst = true-->Line_23 $$ isFirst = false[ FD ]
Line_29 $$ if (isPrimaryKeyIdentity && colName.equals(pkColName)) -->Line_37 $$ String defaultValue = col.getDefaultValue()[ CD ]
Line_22 $$ if (isFirst) -->Line_25 $$ buf.append(", ")[ CD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_36 $$ buf.append(col.getSqlType(dialect, metadata))[ FD ]
Line_56 $$ String columnComment = col.getComment()-->Line_58 $$ buf.append(dialect.getColumnComment(columnComment))[ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_64 $$ buf.append(dialect.getUniqueDelegate().getTableCreationUniqueConstraintsFragment(table))[ FD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_32 $$ buf.append(col.getSqlType(dialect, metadata))[ FD ]
Line_29 $$ if (isPrimaryKeyIdentity && colName.equals(pkColName)) -->Line_41 $$ if (col.isNullable()) [ CD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_39 $$ buf.append(" default ").append(defaultValue)[ FD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_41 $$ if (col.isNullable()) [ FD ]
Line_29 $$ if (isPrimaryKeyIdentity && colName.equals(pkColName)) -->Line_38 $$ if (defaultValue != null) [ CD ]
Line_20 $$ while (columnItr.hasNext()) -->Line_28 $$ buf.append(colName).append(' ')[ CD ]
Line_41 $$ if (col.isNullable()) -->Line_42 $$ buf.append(dialect.getNullColumnString())[ CD ]
Line_20 $$ while (columnItr.hasNext()) -->Line_29 $$ if (isPrimaryKeyIdentity && colName.equals(pkColName)) [ CD ]
Line_14 $$ if (table.hasPrimaryKey()) -->Line_16 $$ pkColName = pkColumn.getQuotedName(dialect)[ CD ]
Line_15 $$ Column pkColumn = (Column) table.getPrimaryKey().getColumns().iterator().next()-->Line_16 $$ pkColName = pkColumn.getQuotedName(dialect)[ FD ]
Line_61 $$ if (table.hasPrimaryKey()) -->Line_62 $$ buf.append(", ").append(table.getPrimaryKey().sqlConstraintString(dialect))[ CD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_32 $$ buf.append(col.getSqlType(dialect, metadata))[ FD ]
Line_68 $$ List<String> sqlStrings = new ArrayList<String>()-->Line_69 $$ sqlStrings.add(buf.toString())[ FD ]
Line_5 $$ final JdbcEnvironment jdbcEnvironment = metadata.getDatabase().getJdbcEnvironment()-->Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")[ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_28 $$ buf.append(colName).append(' ')[ FD ]
Line_41 $$ if (col.isNullable()) -->Line_44 $$ buf.append(" not null")[ CD ]
Line_57 $$ if (columnComment != null) -->Line_58 $$ buf.append(dialect.getColumnComment(columnComment))[ CD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_37 $$ String defaultValue = col.getDefaultValue()[ FD ]
Line_48 $$ String keyName = Constraint.generateName("UK_", table, col)-->Line_49 $$ UniqueKey uk = table.getOrCreateUniqueKey(keyName)[ FD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_47 $$ if (col.isUnique()) [ FD ]
Line_27 $$ String colName = col.getQuotedName(dialect)-->Line_28 $$ buf.append(colName).append(' ')[ FD ]
Line_21 $$ final Column col = (Column) columnItr.next()-->Line_53 $$ if (col.getCheckConstraint() != null && dialect.supportsColumnCheck()) [ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_65 $$ applyTableCheck(table, buf)[ FD ]
Line_38 $$ if (defaultValue != null) -->Line_39 $$ buf.append(" default ").append(defaultValue)[ CD ]
Line_20 $$ while (columnItr.hasNext()) -->Line_21 $$ final Column col = (Column) columnItr.next()[ CD ]
Line_20 $$ while (columnItr.hasNext()) -->Line_56 $$ String columnComment = col.getComment()[ CD ]
Line_18 $$ final Iterator columnItr = table.getColumnIterator()-->Line_21 $$ final Column col = (Column) columnItr.next()[ FD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_54 $$ buf.append(" check (").append(col.getCheckConstraint()).append(")")[ FD ]
Line_47 $$ if (col.isUnique()) -->Line_50 $$ uk.addColumn(col)[ CD ]
Line_22 $$ if (isFirst) -->Line_23 $$ isFirst = false[ CD ]
Line_6 $$ StringBuilder buf = new StringBuilder(tableCreateString(table.hasPrimaryKey())).append(' ').append(jdbcEnvironment.getQualifiedObjectNameFormatter().format(tableName, jdbcEnvironment.getDialect())).append(" (")-->Line_66 $$ buf.append(')')[ FD ]
Line_68 $$ List<String> sqlStrings = new ArrayList<String>()-->Line_72 $$ return sqlStrings.toArray(new String[sqlStrings.size()])[ FD ]
