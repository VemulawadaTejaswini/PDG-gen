Line_2 $$ public void withFloatCustom() throws Exception -->Line_10 $$ int result = this.tag.doStartTag()[ CD ]
Line_22 $$ Element e = (Element) rootElement.selectSingleNode("option[text() = '12.34f']")-->Line_23 $$ assertEquals("'12.34' node not selected", "selected", e.attribute("selected").getValue())[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_12 $$ String output = getOutput()[ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_13 $$ assertTrue(output.startsWith("<select "))[ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_16 $$ Document document = reader.read(new StringReader(output))[ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_21 $$ assertEquals("Incorrect number of children", array.length, children.size())[ CD ]
Line_4 $$ BeanPropertyBindingResult errors = new BeanPropertyBindingResult(getTestBean(), COMMAND_NAME)-->Line_6 $$ exposeBindingResult(errors)[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_4 $$ BeanPropertyBindingResult errors = new BeanPropertyBindingResult(getTestBean(), COMMAND_NAME)[ CD ]
Line_17 $$ Element rootElement = document.getRootElement()-->Line_18 $$ assertEquals("select", rootElement.getName())[ FD ]
Line_17 $$ Element rootElement = document.getRootElement()-->Line_24 $$ e = (Element) rootElement.selectSingleNode("option[text() = '12.32f']")[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_17 $$ Element rootElement = document.getRootElement()[ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_5 $$ errors.getPropertyAccessor().registerCustomEditor(Float.class, propertyEditor)[ CD ]
Line_12 $$ String output = getOutput()-->Line_13 $$ assertTrue(output.startsWith("<select "))[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_18 $$ assertEquals("select", rootElement.getName())[ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_8 $$ Float[] array = new Float[] [ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_19 $$ assertEquals("myFloat", rootElement.attribute("name").getValue())[ CD ]
Line_17 $$ Element rootElement = document.getRootElement()-->Line_20 $$ List children = rootElement.elements()[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_25 $$ assertNull("'12.32' node incorrectly selected", e.attribute("selected"))[ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_3 $$ PropertyEditor propertyEditor = new SimpleFloatEditor()[ CD ]
Line_22 $$ Element e = (Element) rootElement.selectSingleNode("option[text() = '12.34f']")-->Line_24 $$ e = (Element) rootElement.selectSingleNode("option[text() = '12.32f']")[ FD ]
Line_17 $$ Element rootElement = document.getRootElement()-->Line_22 $$ Element e = (Element) rootElement.selectSingleNode("option[text() = '12.34f']")[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_14 $$ assertTrue(output.endsWith("</select>"))[ CD ]
Line_20 $$ List children = rootElement.elements()-->Line_21 $$ assertEquals("Incorrect number of children", array.length, children.size())[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_22 $$ Element e = (Element) rootElement.selectSingleNode("option[text() = '12.34f']")[ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_15 $$ SAXReader reader = new SAXReader()[ CD ]
Line_15 $$ SAXReader reader = new SAXReader()-->Line_16 $$ Document document = reader.read(new StringReader(output))[ FD ]
Line_10 $$ int result = this.tag.doStartTag()-->Line_11 $$ assertEquals(Tag.SKIP_BODY, result)[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_23 $$ assertEquals("'12.34' node not selected", "selected", e.attribute("selected").getValue())[ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_24 $$ e = (Element) rootElement.selectSingleNode("option[text() = '12.32f']")[ CD ]
Line_12 $$ String output = getOutput()-->Line_14 $$ assertTrue(output.endsWith("</select>"))[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_7 $$ this.tag.setPath("myFloat")[ CD ]
Line_3 $$ PropertyEditor propertyEditor = new SimpleFloatEditor()-->Line_5 $$ errors.getPropertyAccessor().registerCustomEditor(Float.class, propertyEditor)[ FD ]
Line_16 $$ Document document = reader.read(new StringReader(output))-->Line_17 $$ Element rootElement = document.getRootElement()[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_11 $$ assertEquals(Tag.SKIP_BODY, result)[ CD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_20 $$ List children = rootElement.elements()[ CD ]
Line_24 $$ e = (Element) rootElement.selectSingleNode("option[text() = '12.32f']")-->Line_25 $$ assertNull("'12.32' node incorrectly selected", e.attribute("selected"))[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_9 $$ this.tag.setItems(array)[ CD ]
Line_8 $$ Float[] array = new Float[] -->Line_9 $$ this.tag.setItems(array)[ FD ]
Line_22 $$ Element e = (Element) rootElement.selectSingleNode("option[text() = '12.34f']")-->Line_25 $$ assertNull("'12.32' node incorrectly selected", e.attribute("selected"))[ FD ]
Line_17 $$ Element rootElement = document.getRootElement()-->Line_19 $$ assertEquals("myFloat", rootElement.attribute("name").getValue())[ FD ]
Line_2 $$ public void withFloatCustom() throws Exception -->Line_6 $$ exposeBindingResult(errors)[ CD ]
Line_4 $$ BeanPropertyBindingResult errors = new BeanPropertyBindingResult(getTestBean(), COMMAND_NAME)-->Line_5 $$ errors.getPropertyAccessor().registerCustomEditor(Float.class, propertyEditor)[ FD ]
