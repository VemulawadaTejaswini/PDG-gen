Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_8 $$ StringBuilder newPattern = new StringBuilder()[ CD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_3 $$ pattern = pattern.toLowerCase()[ CD ]
Line_7 $$ List<String> parts = StringUtil.split(pattern, ".")-->Line_9 $$ for (int i = 0; i < parts.size() - 1; i++) [ FD ]
Line_9 $$ for (int i = 0; i < parts.size() - 1; i++) -->Line_10 $$ String each = parts.get(i)[ CD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_3 $$ pattern = pattern.toLowerCase()[ FD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_20 $$ String queryPattern = "*/" + pattern.replaceAll("\\.", "/")[ CD ]
Line_9 $$ for (int i = 0; i < parts.size() - 1; i++) -->Line_10 $$ String each = parts.get(i)[ FD ]
Line_9 $$ for (int i = 0; i < parts.size() - 1; i++) -->Line_12 $$ newPattern.append("*.")[ CD ]
Line_14 $$ String className = parts.get(parts.size() - 1)-->Line_16 $$ newPattern.append(className.trim())[ FD ]
Line_8 $$ StringBuilder newPattern = new StringBuilder()-->Line_12 $$ newPattern.append("*.")[ FD ]
Line_7 $$ List<String> parts = StringUtil.split(pattern, ".")-->Line_10 $$ String each = parts.get(i)[ FD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_21 $$ return new Pair<String, Query>(pattern, new WildcardQuery(new Term(TERM, queryPattern)))[ CD ]
Line_7 $$ List<String> parts = StringUtil.split(pattern, ".")-->Line_14 $$ String className = parts.get(parts.size() - 1)[ FD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_7 $$ List<String> parts = StringUtil.split(pattern, ".")[ CD ]
Line_19 $$ pattern = newPattern.toString()-->Line_20 $$ String queryPattern = "*/" + pattern.replaceAll("\\.", "/")[ FD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_4 $$ if (pattern.trim().length() == 0) [ CD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_19 $$ pattern = newPattern.toString()[ FD ]
Line_8 $$ StringBuilder newPattern = new StringBuilder()-->Line_16 $$ newPattern.append(className.trim())[ FD ]
Line_17 $$ if (!exactSearch)-->Line_18 $$ newPattern.append("*")[ CD ]
Line_10 $$ String each = parts.get(i)-->Line_11 $$ newPattern.append(each.trim())[ FD ]
Line_15 $$ boolean exactSearch = className.endsWith(" ")-->Line_17 $$ if (!exactSearch)[ FD ]
Line_8 $$ StringBuilder newPattern = new StringBuilder()-->Line_19 $$ pattern = newPattern.toString()[ FD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_7 $$ List<String> parts = StringUtil.split(pattern, ".")[ FD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_4 $$ if (pattern.trim().length() == 0) [ FD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_9 $$ for (int i = 0; i < parts.size() - 1; i++) [ CD ]
Line_14 $$ String className = parts.get(parts.size() - 1)-->Line_15 $$ boolean exactSearch = className.endsWith(" ")[ FD ]
Line_8 $$ StringBuilder newPattern = new StringBuilder()-->Line_18 $$ newPattern.append("*")[ FD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_14 $$ String className = parts.get(parts.size() - 1)[ CD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_16 $$ newPattern.append(className.trim())[ CD ]
Line_3 $$ pattern = pattern.toLowerCase()-->Line_20 $$ String queryPattern = "*/" + pattern.replaceAll("\\.", "/")[ FD ]
Line_8 $$ StringBuilder newPattern = new StringBuilder()-->Line_11 $$ newPattern.append(each.trim())[ FD ]
Line_3 $$ pattern = pattern.toLowerCase()-->Line_7 $$ List<String> parts = StringUtil.split(pattern, ".")[ FD ]
Line_3 $$ pattern = pattern.toLowerCase()-->Line_4 $$ if (pattern.trim().length() == 0) [ FD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_19 $$ pattern = newPattern.toString()[ CD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_20 $$ String queryPattern = "*/" + pattern.replaceAll("\\.", "/")[ FD ]
Line_3 $$ pattern = pattern.toLowerCase()-->Line_19 $$ pattern = newPattern.toString()[ FD ]
Line_4 $$ if (pattern.trim().length() == 0) -->Line_5 $$ return new Pair<String, Query>(pattern, new MatchAllDocsQuery())[ CD ]
Line_9 $$ for (int i = 0; i < parts.size() - 1; i++) -->Line_11 $$ newPattern.append(each.trim())[ CD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_15 $$ boolean exactSearch = className.endsWith(" ")[ CD ]
Line_2 $$ protected Pair<String, Query> preparePatternAndQuery(String pattern) -->Line_17 $$ if (!exactSearch)[ CD ]
