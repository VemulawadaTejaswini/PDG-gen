Line_4 $$ AbstractTestProxy parent = testProxy.getParent()-->Line_5 $$ while (parent != null) [ FD ]
Line_5 $$ while (parent != null) -->Line_6 $$ final List<? extends AbstractTestProxy> children = parent.getChildren()[ CD ]
Line_2 $$ public static void flushOutput(AbstractTestProxy testProxy) -->Line_3 $$ testProxy.flush()[ FD ]
Line_13 $$ parent = parent.getParent()-->Line_6 $$ final List<? extends AbstractTestProxy> children = parent.getChildren()[ FD ]
Line_2 $$ public static void flushOutput(AbstractTestProxy testProxy) -->Line_5 $$ while (parent != null) [ CD ]
Line_12 $$ testProxy = parent-->Line_7 $$ if (!testProxy.isInProgress() && testProxy.equals(children.get(children.size() - 1))) [ FD ]
Line_5 $$ while (parent != null) -->Line_7 $$ if (!testProxy.isInProgress() && testProxy.equals(children.get(children.size() - 1))) [ CD ]
Line_2 $$ public static void flushOutput(AbstractTestProxy testProxy) -->Line_4 $$ AbstractTestProxy parent = testProxy.getParent()[ FD ]
Line_4 $$ AbstractTestProxy parent = testProxy.getParent()-->Line_8 $$ parent.flush()[ FD ]
Line_4 $$ AbstractTestProxy parent = testProxy.getParent()-->Line_13 $$ parent = parent.getParent()[ FD ]
Line_4 $$ AbstractTestProxy parent = testProxy.getParent()-->Line_12 $$ testProxy = parent[ FD ]
Line_2 $$ public static void flushOutput(AbstractTestProxy testProxy) -->Line_12 $$ testProxy = parent[ FD ]
Line_6 $$ final List<? extends AbstractTestProxy> children = parent.getChildren()-->Line_7 $$ if (!testProxy.isInProgress() && testProxy.equals(children.get(children.size() - 1))) [ FD ]
Line_4 $$ AbstractTestProxy parent = testProxy.getParent()-->Line_6 $$ final List<? extends AbstractTestProxy> children = parent.getChildren()[ FD ]
Line_2 $$ public static void flushOutput(AbstractTestProxy testProxy) -->Line_7 $$ if (!testProxy.isInProgress() && testProxy.equals(children.get(children.size() - 1))) [ FD ]
Line_5 $$ while (parent != null) -->Line_12 $$ testProxy = parent[ CD ]
Line_13 $$ parent = parent.getParent()-->Line_12 $$ testProxy = parent[ FD ]
Line_13 $$ parent = parent.getParent()-->Line_5 $$ while (parent != null) [ FD ]
Line_7 $$ if (!testProxy.isInProgress() && testProxy.equals(children.get(children.size() - 1))) -->Line_8 $$ parent.flush()[ CD ]
Line_2 $$ public static void flushOutput(AbstractTestProxy testProxy) -->Line_4 $$ AbstractTestProxy parent = testProxy.getParent()[ CD ]
Line_13 $$ parent = parent.getParent()-->Line_8 $$ parent.flush()[ FD ]
Line_2 $$ public static void flushOutput(AbstractTestProxy testProxy) -->Line_3 $$ testProxy.flush()[ CD ]
Line_5 $$ while (parent != null) -->Line_13 $$ parent = parent.getParent()[ CD ]
