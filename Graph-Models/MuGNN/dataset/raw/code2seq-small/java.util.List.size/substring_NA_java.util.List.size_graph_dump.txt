Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_25 $$ if (!substringAffectedByChanges) [ CD ]
Line_42 $$ if (clientStart > start) -->Line_46 $$ outputOffset += length[ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_3 $$ if (myChanges.isEmpty()) [ CD ]
Line_16 $$ if (startChangeIndex > 0 && startChangeIndex <= myChanges.size()) -->Line_19 $$ originalStart = changeEntry.change.getEnd()[ CD ]
Line_46 $$ outputOffset += length-->Line_61 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_11 $$ boolean substringAffectedByChanges = startChangeIndex >= 0 || endChangeIndex >= 0 || startChangeIndex != endChangeIndex[ CD ]
Line_42 $$ if (clientStart > start) -->Line_47 $$ if (outputOffset >= data.length) [ CD ]
Line_29 $$ int outputOffset = 0-->Line_54 $$ CharArrayUtil.getChars(changeEntry.change.getText(), data, changeTextStartOffset, outputOffset, length)[ FD ]
Line_44 $$ length = Math.min(length, data.length - outputOffset)-->Line_54 $$ CharArrayUtil.getChars(changeEntry.change.getText(), data, changeTextStartOffset, outputOffset, length)[ FD ]
Line_14 $$ if (startChangeIndex < 0) -->Line_22 $$ ChangeEntry changeEntry = myChanges.get(startChangeIndex)[ CD ]
Line_51 $$ if (end >= clientStart && clientStart < clientEnd) -->Line_54 $$ CharArrayUtil.getChars(changeEntry.change.getText(), data, changeTextStartOffset, outputOffset, length)[ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_9 $$ int startChangeIndex = getChangeIndex(start)[ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_53 $$ int length = Math.min(clientEnd, end) - Math.max(clientStart, start)[ FD ]
Line_30 $$ for (int i = startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) -->Line_58 $$ originalStart = changeEntry.change.getEnd()[ CD ]
Line_40 $$ int clientEnd = clientStart + changeEntry.change.getText().length()-->Line_53 $$ int length = Math.min(clientEnd, end) - Math.max(clientStart, start)[ FD ]
Line_34 $$ if (i == startChangeIndex) -->Line_35 $$ return new String(originalData, start - clientShift, end - start)[ CD ]
Line_52 $$ int changeTextStartOffset = start <= clientStart ? 0 : start - clientStart-->Line_54 $$ CharArrayUtil.getChars(changeEntry.change.getText(), data, changeTextStartOffset, outputOffset, length)[ FD ]
Line_15 $$ startChangeIndex = -startChangeIndex - 1-->Line_22 $$ ChangeEntry changeEntry = myChanges.get(startChangeIndex)[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_13 $$ int originalStart = 0[ CD ]
Line_51 $$ if (end >= clientStart && clientStart < clientEnd) -->Line_52 $$ int changeTextStartOffset = start <= clientStart ? 0 : start - clientStart[ CD ]
Line_14 $$ if (startChangeIndex < 0) -->Line_23 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ CD ]
Line_28 $$ char[] data = new char[end - start]-->Line_61 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_29 $$ int outputOffset = 0-->Line_47 $$ if (outputOffset >= data.length) [ FD ]
Line_33 $$ if (clientStart >= end) -->Line_34 $$ if (i == startChangeIndex) [ CD ]
Line_55 $$ outputOffset += length-->Line_61 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_30 $$ for (int i = startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) -->Line_34 $$ if (i == startChangeIndex) [ FD ]
Line_15 $$ startChangeIndex = -startChangeIndex - 1-->Line_34 $$ if (i == startChangeIndex) [ FD ]
Line_46 $$ outputOffset += length-->Line_37 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_43 $$ int length = Math.min(clientStart - start, changeEntry.change.getStart() - originalStart)-->Line_45 $$ System.arraycopy(originalData, changeEntry.change.getStart() - length, data, outputOffset, length)[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_10 $$ int endChangeIndex = getChangeIndex(end)[ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_60 $$ if (outputOffset < data.length) [ CD ]
Line_33 $$ if (clientStart >= end) -->Line_37 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_30 $$ for (int i = startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) [ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_45 $$ System.arraycopy(originalData, changeEntry.change.getStart() - length, data, outputOffset, length)[ FD ]
Line_9 $$ int startChangeIndex = getChangeIndex(start)-->Line_22 $$ ChangeEntry changeEntry = myChanges.get(startChangeIndex)[ FD ]
Line_3 $$ if (myChanges.isEmpty()) -->Line_4 $$ return new String(originalData, start, end - start)[ CD ]
Line_30 $$ for (int i = startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) -->Line_31 $$ ChangeEntry changeEntry = myChanges.get(i)[ FD ]
Line_32 $$ int clientStart = changeEntry.clientStartOffset-->Line_42 $$ if (clientStart > start) [ FD ]
Line_46 $$ outputOffset += length-->Line_60 $$ if (outputOffset < data.length) [ FD ]
Line_28 $$ char[] data = new char[end - start]-->Line_45 $$ System.arraycopy(originalData, changeEntry.change.getStart() - length, data, outputOffset, length)[ FD ]
Line_30 $$ for (int i = startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) -->Line_32 $$ int clientStart = changeEntry.clientStartOffset[ CD ]
Line_13 $$ int originalStart = 0-->Line_19 $$ originalStart = changeEntry.change.getEnd()[ FD ]
Line_46 $$ outputOffset += length-->Line_54 $$ CharArrayUtil.getChars(changeEntry.change.getText(), data, changeTextStartOffset, outputOffset, length)[ FD ]
Line_13 $$ int originalStart = 0-->Line_37 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_43 $$ int length = Math.min(clientStart - start, changeEntry.change.getStart() - originalStart)-->Line_55 $$ outputOffset += length[ FD ]
Line_58 $$ originalStart = changeEntry.change.getEnd()-->Line_61 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_9 $$ int startChangeIndex = getChangeIndex(start)-->Line_34 $$ if (i == startChangeIndex) [ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_42 $$ if (clientStart > start) [ FD ]
Line_13 $$ int originalStart = 0-->Line_58 $$ originalStart = changeEntry.change.getEnd()[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_63 $$ return StringFactory.createShared(data)[ CD ]
Line_40 $$ int clientEnd = clientStart + changeEntry.change.getText().length()-->Line_41 $$ if (clientEnd > start) [ FD ]
Line_43 $$ int length = Math.min(clientStart - start, changeEntry.change.getStart() - originalStart)-->Line_54 $$ CharArrayUtil.getChars(changeEntry.change.getText(), data, changeTextStartOffset, outputOffset, length)[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_6 $$ if (end == start) [ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_14 $$ if (startChangeIndex < 0) [ CD ]
Line_30 $$ for (int i = startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) -->Line_40 $$ int clientEnd = clientStart + changeEntry.change.getText().length()[ CD ]
Line_44 $$ length = Math.min(length, data.length - outputOffset)-->Line_46 $$ outputOffset += length[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_61 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_29 $$ int outputOffset = 0-->Line_61 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_6 $$ if (end == start) -->Line_7 $$ return ""[ CD ]
Line_29 $$ int outputOffset = 0-->Line_55 $$ outputOffset += length[ FD ]
Line_44 $$ length = Math.min(length, data.length - outputOffset)-->Line_55 $$ outputOffset += length[ FD ]
Line_32 $$ int clientStart = changeEntry.clientStartOffset-->Line_53 $$ int length = Math.min(clientEnd, end) - Math.max(clientStart, start)[ FD ]
Line_43 $$ int length = Math.min(clientStart - start, changeEntry.change.getStart() - originalStart)-->Line_46 $$ outputOffset += length[ FD ]
Line_9 $$ int startChangeIndex = getChangeIndex(start)-->Line_15 $$ startChangeIndex = -startChangeIndex - 1[ FD ]
Line_16 $$ if (startChangeIndex > 0 && startChangeIndex <= myChanges.size()) -->Line_17 $$ ChangeEntry changeEntry = myChanges.get(startChangeIndex - 1)[ CD ]
Line_14 $$ if (startChangeIndex < 0) -->Line_16 $$ if (startChangeIndex > 0 && startChangeIndex <= myChanges.size()) [ CD ]
Line_13 $$ int originalStart = 0-->Line_61 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_28 $$ char[] data = new char[end - start]-->Line_37 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_14 $$ if (startChangeIndex < 0) -->Line_15 $$ startChangeIndex = -startChangeIndex - 1[ CD ]
Line_18 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_23 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ FD ]
Line_19 $$ originalStart = changeEntry.change.getEnd()-->Line_58 $$ originalStart = changeEntry.change.getEnd()[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_41 $$ if (clientEnd > start) [ FD ]
Line_19 $$ originalStart = changeEntry.change.getEnd()-->Line_61 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_29 $$ int outputOffset = 0-->Line_60 $$ if (outputOffset < data.length) [ FD ]
Line_29 $$ int outputOffset = 0-->Line_37 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_16 $$ if (startChangeIndex > 0 && startChangeIndex <= myChanges.size()) -->Line_18 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_9 $$ int startChangeIndex = getChangeIndex(start)[ FD ]
Line_41 $$ if (clientEnd > start) -->Line_42 $$ if (clientStart > start) [ CD ]
Line_44 $$ length = Math.min(length, data.length - outputOffset)-->Line_45 $$ System.arraycopy(originalData, changeEntry.change.getStart() - length, data, outputOffset, length)[ FD ]
Line_25 $$ if (!substringAffectedByChanges) -->Line_26 $$ return new String(originalData, start - clientShift, end - start)[ CD ]
Line_60 $$ if (outputOffset < data.length) -->Line_61 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_29 $$ int outputOffset = 0[ CD ]
Line_46 $$ outputOffset += length-->Line_55 $$ outputOffset += length[ FD ]
Line_29 $$ int outputOffset = 0-->Line_45 $$ System.arraycopy(originalData, changeEntry.change.getStart() - length, data, outputOffset, length)[ FD ]
Line_30 $$ for (int i = startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) -->Line_31 $$ ChangeEntry changeEntry = myChanges.get(i)[ CD ]
Line_41 $$ if (clientEnd > start) -->Line_51 $$ if (end >= clientStart && clientStart < clientEnd) [ CD ]
Line_28 $$ char[] data = new char[end - start]-->Line_63 $$ return StringFactory.createShared(data)[ FD ]
Line_55 $$ outputOffset += length-->Line_47 $$ if (outputOffset >= data.length) [ FD ]
Line_19 $$ originalStart = changeEntry.change.getEnd()-->Line_37 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_55 $$ outputOffset += length-->Line_37 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_55 $$ outputOffset += length-->Line_54 $$ CharArrayUtil.getChars(changeEntry.change.getText(), data, changeTextStartOffset, outputOffset, length)[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_12 $$ int clientShift = 0[ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_10 $$ int endChangeIndex = getChangeIndex(end)[ FD ]
Line_32 $$ int clientStart = changeEntry.clientStartOffset-->Line_33 $$ if (clientStart >= end) [ FD ]
Line_28 $$ char[] data = new char[end - start]-->Line_54 $$ CharArrayUtil.getChars(changeEntry.change.getText(), data, changeTextStartOffset, outputOffset, length)[ FD ]
Line_9 $$ int startChangeIndex = getChangeIndex(start)-->Line_14 $$ if (startChangeIndex < 0) [ FD ]
Line_29 $$ int outputOffset = 0-->Line_46 $$ outputOffset += length[ FD ]
Line_12 $$ int clientShift = 0-->Line_18 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_6 $$ if (end == start) [ CD ]
Line_11 $$ boolean substringAffectedByChanges = startChangeIndex >= 0 || endChangeIndex >= 0 || startChangeIndex != endChangeIndex-->Line_25 $$ if (!substringAffectedByChanges) [ FD ]
Line_42 $$ if (clientStart > start) -->Line_43 $$ int length = Math.min(clientStart - start, changeEntry.change.getStart() - originalStart)[ CD ]
Line_55 $$ outputOffset += length-->Line_60 $$ if (outputOffset < data.length) [ FD ]
Line_12 $$ int clientShift = 0-->Line_23 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ FD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_33 $$ if (clientStart >= end) [ FD ]
Line_55 $$ outputOffset += length-->Line_45 $$ System.arraycopy(originalData, changeEntry.change.getStart() - length, data, outputOffset, length)[ FD ]
Line_43 $$ int length = Math.min(clientStart - start, changeEntry.change.getStart() - originalStart)-->Line_44 $$ length = Math.min(length, data.length - outputOffset)[ FD ]
Line_58 $$ originalStart = changeEntry.change.getEnd()-->Line_37 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_46 $$ outputOffset += length-->Line_47 $$ if (outputOffset >= data.length) [ FD ]
Line_42 $$ if (clientStart > start) -->Line_44 $$ length = Math.min(length, data.length - outputOffset)[ CD ]
Line_51 $$ if (end >= clientStart && clientStart < clientEnd) -->Line_55 $$ outputOffset += length[ CD ]
Line_30 $$ for (int i = startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) -->Line_33 $$ if (clientStart >= end) [ CD ]
Line_30 $$ for (int i = startChangeIndex; i < myChanges.size() && outputOffset < data.length; i++) -->Line_41 $$ if (clientEnd > start) [ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_28 $$ char[] data = new char[end - start][ CD ]
Line_2 $$ public CharSequence substring(@NotNull char[] originalData, int start, int end) -->Line_37 $$ System.arraycopy(originalData, originalStart, data, outputOffset, data.length - outputOffset)[ FD ]
Line_42 $$ if (clientStart > start) -->Line_45 $$ System.arraycopy(originalData, changeEntry.change.getStart() - length, data, outputOffset, length)[ CD ]
Line_46 $$ outputOffset += length-->Line_45 $$ System.arraycopy(originalData, changeEntry.change.getStart() - length, data, outputOffset, length)[ FD ]
