Line_10 $$ for (int i = 0; i < children1.size(); i++) -->Line_11 $$ checkElements((Element) children1.get(i), (Element) children2.get(i))[ FD ]
Line_2 $$ private static void checkElements(@NotNull Element expected, @NotNull Element actual) -->Line_5 $$ List children2 = actual.getChildren()[ CD ]
Line_4 $$ List children1 = expected.getChildren()-->Line_6 $$ assertEquals(children1.size(), children2.size())[ FD ]
Line_5 $$ List children2 = actual.getChildren()-->Line_6 $$ assertEquals(children1.size(), children2.size())[ FD ]
Line_2 $$ private static void checkElements(@NotNull Element expected, @NotNull Element actual) -->Line_7 $$ if (children1.isEmpty()) [ CD ]
Line_10 $$ for (int i = 0; i < children1.size(); i++) -->Line_11 $$ checkElements((Element) children1.get(i), (Element) children2.get(i))[ CD ]
Line_7 $$ if (children1.isEmpty()) -->Line_10 $$ for (int i = 0; i < children1.size(); i++) [ CD ]
Line_2 $$ private static void checkElements(@NotNull Element expected, @NotNull Element actual) -->Line_4 $$ List children1 = expected.getChildren()[ FD ]
Line_5 $$ List children2 = actual.getChildren()-->Line_11 $$ checkElements((Element) children1.get(i), (Element) children2.get(i))[ FD ]
Line_4 $$ List children1 = expected.getChildren()-->Line_7 $$ if (children1.isEmpty()) [ FD ]
Line_2 $$ private static void checkElements(@NotNull Element expected, @NotNull Element actual) -->Line_3 $$ assertTrue(String.format("Tag name mismatch - expected: '%s', actual: '%s'", expected.getName(), actual.getName()), Comparing.equal(expected.getName(), actual.getName()))[ CD ]
Line_4 $$ List children1 = expected.getChildren()-->Line_11 $$ checkElements((Element) children1.get(i), (Element) children2.get(i))[ FD ]
Line_2 $$ private static void checkElements(@NotNull Element expected, @NotNull Element actual) -->Line_6 $$ assertEquals(children1.size(), children2.size())[ CD ]
Line_2 $$ private static void checkElements(@NotNull Element expected, @NotNull Element actual) -->Line_5 $$ List children2 = actual.getChildren()[ FD ]
Line_2 $$ private static void checkElements(@NotNull Element expected, @NotNull Element actual) -->Line_4 $$ List children1 = expected.getChildren()[ CD ]
Line_2 $$ private static void checkElements(@NotNull Element expected, @NotNull Element actual) -->Line_3 $$ assertTrue(String.format("Tag name mismatch - expected: '%s', actual: '%s'", expected.getName(), actual.getName()), Comparing.equal(expected.getName(), actual.getName()))[ FD ]
Line_7 $$ if (children1.isEmpty()) -->Line_8 $$ assertTrue(String.format("Content mismatch - expected: '%s', actual: '%s'", expected.getText(), actual.getText()), Comparing.equal(expected.getText(), actual.getText()))[ CD ]
Line_2 $$ private static void checkElements(@NotNull Element expected, @NotNull Element actual) -->Line_8 $$ assertTrue(String.format("Content mismatch - expected: '%s', actual: '%s'", expected.getText(), actual.getText()), Comparing.equal(expected.getText(), actual.getText()))[ FD ]
Line_4 $$ List children1 = expected.getChildren()-->Line_10 $$ for (int i = 0; i < children1.size(); i++) [ FD ]
