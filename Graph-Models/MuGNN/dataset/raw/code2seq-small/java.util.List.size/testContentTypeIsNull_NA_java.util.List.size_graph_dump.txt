Line_17 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_127 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ FD ]
Line_41 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))-->Line_42 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_41 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))-->Line_43 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ FD ]
Line_90 $$ List<String> attributeNames = ListUtil.fromEnumeration(mockHttpSession.getAttributeNames())-->Line_92 $$ Assert.assertTrue(attributeNames.contains(_SESSION_ATTRIBUTE_NAME_1))[ FD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_44 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_145 $$ sb.append(", serverName=")[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_140 $$ sb.append(Arrays.toString(entry.getValue()))[ FD ]
Line_7 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_89 $$ spiAgentRequest.populateSessionAttributes(mockHttpSession)[ FD ]
Line_112 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) -->Line_138 $$ sb.append(entry.getKey())[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_25 $$ Assert.assertEquals(_HEADER_VALUE_3, populatedHttpServletRequest.getHeader(_HEADER_NAME_2))[ FD ]
Line_127 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_150 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))[ FD ]
Line_62 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())-->Line_66 $$ Assert.assertTrue(parameterNames.contains(_PARAMETER_NAME_3))[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_149 $$ sb.append("}")[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_75 $$ parameter3 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_3)[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_42 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_56 $$ String[] parameter3 = parameterMap.get(_PARAMETER_NAME_3)-->Line_75 $$ parameter3 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_3)[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_148 $$ sb.append(_SERVER_PORT)[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_44 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_39 $$ Assert.assertEquals(_HEADER_VALUE_3, headers.get(0))[ FD ]
Line_17 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_89 $$ spiAgentRequest.populateSessionAttributes(mockHttpSession)[ FD ]
Line_9 $$ Map<String, Serializable> originalSessionAttributes = spiAgentRequest.getOriginalSessionAttributes()-->Line_11 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_1, originalSessionAttributes.get(_SESSION_ATTRIBUTE_NAME_1))[ FD ]
Line_90 $$ List<String> attributeNames = ListUtil.fromEnumeration(mockHttpSession.getAttributeNames())-->Line_93 $$ Assert.assertTrue(attributeNames.contains(_SESSION_ATTRIBUTE_NAME_2))[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_139 $$ sb.append("=")[ FD ]
Line_62 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())-->Line_63 $$ Assert.assertEquals(3, parameterNames.size())[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_59 $$ Assert.assertEquals(_PARAMETER_VALUE_3, populatedHttpServletRequest.getParameter(_PARAMETER_NAME_2))[ FD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_38 $$ Assert.assertEquals(2, headers.size())[ FD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_40 $$ Assert.assertEquals(_HEADER_VALUE_4, headers.get(1))[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_79 $$ Assert.assertEquals(_REMOTE_HOST, populatedHttpServletRequest.getRemoteHost())[ FD ]
Line_17 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_110 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_36 $$ Assert.assertEquals(_HEADER_VALUE_2, headers.get(1))[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_143 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_42 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_17 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_150 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_7 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_17 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_35 $$ Assert.assertEquals(_HEADER_VALUE_1, headers.get(0))[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_40 $$ Assert.assertEquals(_HEADER_VALUE_4, headers.get(1))[ FD ]
Line_7 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_9 $$ Map<String, Serializable> originalSessionAttributes = spiAgentRequest.getOriginalSessionAttributes()[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_41 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_19 $$ Cookie[] cookies = populatedHttpServletRequest.getCookies()[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_134 $$ sb.append(", originalSessionAttributes=")[ FD ]
Line_28 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())-->Line_31 $$ Assert.assertTrue(headerNames.contains(StringUtil.toLowerCase(_HEADER_NAME_2)))[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_71 $$ parameter2 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_2)[ FD ]
Line_7 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_127 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_58 $$ Assert.assertEquals(_PARAMETER_VALUE_1, populatedHttpServletRequest.getParameter(_PARAMETER_NAME_1))[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_80 $$ Assert.assertEquals(_REMOTE_PORT, populatedHttpServletRequest.getRemotePort())[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_27 $$ Assert.assertNull(populatedHttpServletRequest.getHeader(_HEADER_NAME_4))[ FD ]
Line_28 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())-->Line_32 $$ Assert.assertTrue(headerNames.contains(StringUtil.toLowerCase(_HEADER_NAME_3)))[ FD ]
Line_62 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())-->Line_65 $$ Assert.assertTrue(parameterNames.contains(_PARAMETER_NAME_2))[ FD ]
Line_17 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_135 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_112 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) -->Line_115 $$ sb.append(Arrays.toString(entry.getValue()))[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))[ FD ]
Line_7 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_135 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_141 $$ sb.append(", ")[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_150 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_17 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_138 $$ sb.append(entry.getKey())[ FD ]
Line_99 $$ for (Cookie cookie : cookies) -->Line_100 $$ sb.append(CookieUtil.toString(cookie))[ FD ]
Line_9 $$ Map<String, Serializable> originalSessionAttributes = spiAgentRequest.getOriginalSessionAttributes()-->Line_10 $$ Assert.assertEquals(2, originalSessionAttributes.size())[ FD ]
Line_17 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_125 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_61 $$ Assert.assertNull(populatedHttpServletRequest.getParameter(_PARAMETER_NAME_4))[ FD ]
Line_7 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_150 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_41 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))[ FD ]
Line_28 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())-->Line_29 $$ Assert.assertEquals(3, headerNames.size())[ FD ]
Line_7 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_110 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_130 $$ sb.append(spiAgentRequest.distributedRequestAttributes)[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_60 $$ Assert.assertNull(populatedHttpServletRequest.getParameter(_PARAMETER_NAME_3))[ FD ]
Line_62 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())-->Line_64 $$ Assert.assertTrue(parameterNames.contains(_PARAMETER_NAME_1))[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_147 $$ sb.append(", serverPort=")[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_67 $$ parameter1 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_1)[ FD ]
Line_7 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_125 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_26 $$ Assert.assertNull(populatedHttpServletRequest.getHeader(_HEADER_NAME_3))[ FD ]
Line_41 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))-->Line_44 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_28 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())-->Line_30 $$ Assert.assertTrue(headerNames.contains(StringUtil.toLowerCase(_HEADER_NAME_1)))[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_41 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))[ FD ]
Line_9 $$ Map<String, Serializable> originalSessionAttributes = spiAgentRequest.getOriginalSessionAttributes()-->Line_12 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_2, originalSessionAttributes.get(_SESSION_ATTRIBUTE_NAME_2))[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_81 $$ Assert.assertEquals(_REMOTE_USER, populatedHttpServletRequest.getRemoteUser())[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_135 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_43 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ FD ]
Line_48 $$ String[] parameter1 = parameterMap.get(_PARAMETER_NAME_1)-->Line_67 $$ parameter1 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_1)[ FD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_39 $$ Assert.assertEquals(_HEADER_VALUE_3, headers.get(0))[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_132 $$ sb.append(spiAgentRequest.headerMap)[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_133 $$ sb.append(", multipartParameterMap=null")[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_129 $$ sb.append("[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_34 $$ Assert.assertEquals(2, headers.size())[ FD ]
Line_112 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) -->Line_113 $$ sb.append(entry.getKey())[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_146 $$ sb.append(_SERVER_NAME)[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_62 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_131 $$ sb.append(", headerMap=")[ FD ]
Line_52 $$ String[] parameter2 = parameterMap.get(_PARAMETER_NAME_2)-->Line_71 $$ parameter2 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_2)[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_28 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())[ FD ]
Line_7 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_127 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_135 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_43 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))-->Line_44 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_43 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_144 $$ sb.append("}, regularParameterMap=null, requestBodyFile=null")[ FD ]
Line_90 $$ List<String> attributeNames = ListUtil.fromEnumeration(mockHttpSession.getAttributeNames())-->Line_91 $$ Assert.assertEquals(2, attributeNames.size())[ FD ]
Line_112 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) -->Line_140 $$ sb.append(Arrays.toString(entry.getValue()))[ FD ]
Line_128 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_136 $$ sb.append(", parameterMap=[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))[ FD ]
Line_33 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_38 $$ Assert.assertEquals(2, headers.size())[ FD ]
Line_18 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_43 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ FD ]
