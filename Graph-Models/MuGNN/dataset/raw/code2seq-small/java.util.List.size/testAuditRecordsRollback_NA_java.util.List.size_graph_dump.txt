Line_5 $$ IntTestEntity iteToRollback = new IntTestEntity(30)-->Line_7 $$ Integer rollbackedIteId = iteToRollback.getId()[ FD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_14 $$ List<Number> revisionsForSavedClass = getAuditReader().getRevisions(IntTestEntity.class, ite2Id)[ CD ]
Line_7 $$ Integer rollbackedIteId = iteToRollback.getId()-->Line_16 $$ List<Number> revisionsForRolledbackClass = getAuditReader().getRevisions(IntTestEntity.class, rollbackedIteId)[ FD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_17 $$ Assert.assertEquals("There should be no revision for rolled back transaction.", 0, revisionsForRolledbackClass.size())[ CD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_3 $$ EntityManager em = getEntityManager()[ CD ]
Line_3 $$ EntityManager em = getEntityManager()-->Line_4 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_16 $$ List<Number> revisionsForRolledbackClass = getAuditReader().getRevisions(IntTestEntity.class, rollbackedIteId)[ CD ]
Line_12 $$ Integer ite2Id = ite2.getId()-->Line_14 $$ List<Number> revisionsForSavedClass = getAuditReader().getRevisions(IntTestEntity.class, ite2Id)[ FD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_4 $$ em.getTransaction().begin()[ CD ]
Line_3 $$ EntityManager em = getEntityManager()-->Line_9 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_8 $$ em.getTransaction().rollback()[ CD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_6 $$ em.persist(iteToRollback)[ CD ]
Line_10 $$ IntTestEntity ite2 = new IntTestEntity(50)-->Line_11 $$ em.persist(ite2)[ FD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_15 $$ Assert.assertEquals("There should be one revision for inserted entity.", 1, revisionsForSavedClass.size())[ CD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_11 $$ em.persist(ite2)[ CD ]
Line_14 $$ List<Number> revisionsForSavedClass = getAuditReader().getRevisions(IntTestEntity.class, ite2Id)-->Line_15 $$ Assert.assertEquals("There should be one revision for inserted entity.", 1, revisionsForSavedClass.size())[ FD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_5 $$ IntTestEntity iteToRollback = new IntTestEntity(30)[ CD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_10 $$ IntTestEntity ite2 = new IntTestEntity(50)[ CD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_12 $$ Integer ite2Id = ite2.getId()[ CD ]
Line_3 $$ EntityManager em = getEntityManager()-->Line_13 $$ em.getTransaction().commit()[ FD ]
Line_3 $$ EntityManager em = getEntityManager()-->Line_8 $$ em.getTransaction().rollback()[ FD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_9 $$ em.getTransaction().begin()[ CD ]
Line_3 $$ EntityManager em = getEntityManager()-->Line_6 $$ em.persist(iteToRollback)[ FD ]
Line_3 $$ EntityManager em = getEntityManager()-->Line_11 $$ em.persist(ite2)[ FD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_7 $$ Integer rollbackedIteId = iteToRollback.getId()[ CD ]
Line_2 $$ public void testAuditRecordsRollback() -->Line_13 $$ em.getTransaction().commit()[ CD ]
Line_5 $$ IntTestEntity iteToRollback = new IntTestEntity(30)-->Line_6 $$ em.persist(iteToRollback)[ FD ]
Line_10 $$ IntTestEntity ite2 = new IntTestEntity(50)-->Line_12 $$ Integer ite2Id = ite2.getId()[ FD ]
Line_16 $$ List<Number> revisionsForRolledbackClass = getAuditReader().getRevisions(IntTestEntity.class, rollbackedIteId)-->Line_17 $$ Assert.assertEquals("There should be no revision for rolled back transaction.", 0, revisionsForRolledbackClass.size())[ FD ]
