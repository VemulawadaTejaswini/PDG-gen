Line_2 $$ public void testMockElements() throws Throwable -->Line_8 $$ assertEquals(element, DomUtil.getFileElement(element).getRootElement())[ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_13 $$ element2.addChildElement().getGenericValue().setStringValue("xxx")[ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_16 $$ element.getAttr().setValue("attr")[ CD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_14 $$ assertNotNull(element2.getXmlTag())[ FD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_22 $$ element2.copyFrom(element)[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_27 $$ final MyElement newChild = element2.getChild()[ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)[ CD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_25 $$ assertEquals("attr", element2.getAttr().getValue())[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_30 $$ assertEquals(1, childElements.size())[ CD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_8 $$ assertEquals(element, DomUtil.getFileElement(element).getRootElement())[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_6 $$ assertTrue(element.isValid())[ CD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_16 $$ element.getAttr().setValue("attr")[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_5 $$ assertSame(module, element.getModule())[ CD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_22 $$ element2.copyFrom(element)[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)[ CD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_18 $$ element.getChild().getGenericValue().setStringValue("abc")[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_19 $$ element.addChildElement().getGenericValue().setStringValue("def")[ CD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_29 $$ final List<MyElement> childElements = element2.getChildElements()[ FD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_5 $$ assertSame(module, element.getModule())[ FD ]
Line_20 $$ new WriteCommandAction(getProject()) -->Line_22 $$ element2.copyFrom(element)[ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_15 $$ final MyElement oldChild = element2.getChild()[ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_25 $$ assertEquals("attr", element2.getAttr().getValue())[ CD ]
Line_3 $$ Module module = new MockModule(getTestRootDisposable())-->Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)[ FD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_12 $$ assertNull(element2.getXmlTag())[ FD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_13 $$ element2.addChildElement().getGenericValue().setStringValue("xxx")[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_14 $$ assertNotNull(element2.getXmlTag())[ CD ]
Line_3 $$ Module module = new MockModule(getTestRootDisposable())-->Line_5 $$ assertSame(module, element.getModule())[ FD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_9 $$ assertFalse(DomUtil.getFile(element).isPhysical())[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_31 $$ assertEquals("def", childElements.get(0).getGenericValue().getStringValue())[ CD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_15 $$ final MyElement oldChild = element2.getChild()[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_7 $$ assertNull(element.getXmlTag())[ CD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_26 $$ assertEquals("true", element2.getGenericValue().getStringValue())[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_9 $$ assertFalse(DomUtil.getFile(element).isPhysical())[ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_12 $$ assertNull(element2.getXmlTag())[ CD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_6 $$ assertTrue(element.isValid())[ FD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_7 $$ assertNull(element.getXmlTag())[ FD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_27 $$ final MyElement newChild = element2.getChild()[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_11 $$ assertNull(element2.getModule())[ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_18 $$ element.getChild().getGenericValue().setStringValue("abc")[ CD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_17 $$ element.getGenericValue().setValue(Boolean.TRUE)[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_3 $$ Module module = new MockModule(getTestRootDisposable())[ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_28 $$ assertEquals("abc", newChild.getGenericValue().getStringValue())[ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_17 $$ element.getGenericValue().setValue(Boolean.TRUE)[ CD ]
Line_4 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, module, false)-->Line_19 $$ element.addChildElement().getGenericValue().setStringValue("def")[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_20 $$ new WriteCommandAction(getProject()) [ CD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_26 $$ assertEquals("true", element2.getGenericValue().getStringValue())[ CD ]
Line_10 $$ final MyElement element2 = getDomManager().createMockElement(MyElement.class, null, false)-->Line_11 $$ assertNull(element2.getModule())[ FD ]
Line_2 $$ public void testMockElements() throws Throwable -->Line_29 $$ final List<MyElement> childElements = element2.getChildElements()[ CD ]
