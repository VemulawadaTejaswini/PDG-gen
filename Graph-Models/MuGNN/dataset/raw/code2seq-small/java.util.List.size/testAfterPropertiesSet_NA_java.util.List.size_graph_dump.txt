Line_28 $$ threadLocalDistributor = new ThreadLocalDistributor()-->Line_31 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_31 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
Line_33 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_34 $$ Assert.assertEquals(1, threadLocals.size())[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_6 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
Line_23 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_25 $$ Assert.assertSame(TestClass._threadLocal, threadLocals.get(0))[ FD ]
Line_28 $$ threadLocalDistributor = new ThreadLocalDistributor()-->Line_30 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_28 $$ threadLocalDistributor = new ThreadLocalDistributor()[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_11 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ FD ]
Line_23 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_35 $$ Assert.assertSame(TestClass._threadLocal, threadLocals.get(0))[ FD ]
Line_28 $$ threadLocalDistributor = new ThreadLocalDistributor()-->Line_29 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ FD ]
Line_19 $$ LogRecord logRecord2 = logRecords.get(1)-->Line_20 $$ Assert.assertEquals("_nullValue is not initialized", logRecord2.getMessage())[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_30 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_29 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ FD ]
Line_28 $$ threadLocalDistributor = new ThreadLocalDistributor()-->Line_33 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_15 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
Line_23 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_33 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_23 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")[ FD ]
Line_23 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_34 $$ Assert.assertEquals(1, threadLocals.size())[ FD ]
Line_21 $$ LogRecord logRecord3 = logRecords.get(2)-->Line_22 $$ Assert.assertEquals("_object is not of type ThreadLocal", logRecord3.getMessage())[ FD ]
Line_17 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_18 $$ Assert.assertEquals("_nonStatic is not a static ThreadLocal", logRecord1.getMessage())[ FD ]
Line_23 $$ List<ThreadLocal<Serializable>> threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_24 $$ Assert.assertEquals(1, threadLocals.size())[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_10 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_33 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")[ FD ]
Line_33 $$ threadLocals = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocals")-->Line_35 $$ Assert.assertSame(TestClass._threadLocal, threadLocals.get(0))[ FD ]
