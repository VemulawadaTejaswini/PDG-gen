Line_28 $$ if (Shell.WINDOWS) -->Line_49 $$ fileWriter.write("\necho $" + Environment.NM_HTTP_PORT.name() + " >> " + processStartFile)[ CD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_53 $$ fileWriter.write("\necho $" + Environment.PWD.name() + " >> " + processStartFile)[ CD ]
Line_64 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_72 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_31 $$ fileWriter.println("@echo " + Environment.NM_PORT.$() + ">> " + processStartFile)[ FD ]
Line_13 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_135 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_42 $$ fileWriter.println("@ping -n 100 127.0.0.1 >nul")[ CD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_17 $$ userSetEnv.put(Environment.NM_PORT.name(), "user_set_NM_PORT")[ FD ]
Line_83 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_84 $$ Thread.sleep(1000)[ CD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_61 $$ fileWriter.close()[ FD ]
Line_98 $$ List<String> containerLogDirs = new ArrayList<String>()-->Line_129 $$ Assert.assertEquals(StringUtils.join(",", containerLogDirs), containerLaunchContext.getEnvironment().get(Environment.LOG_DIRS.name()))[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_124 $$ Assert.assertEquals(cId.toString(), containerLaunchContext.getEnvironment().get(Environment.CONTAINER_ID.name()))[ FD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_16 $$ userSetEnv.put(Environment.NM_HOST.name(), "user_set_NM_HOST")[ FD ]
Line_112 $$ boolean found = false-->Line_119 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_29 $$ fileWriter.println("@echo " + Environment.CONTAINER_ID.$() + "> " + processStartFile)[ CD ]
Line_38 $$ for (String serviceName : containerManager.getAuxServiceMetaData().keySet()) -->Line_122 $$ Assert.assertEquals(containerManager.getAuxServiceMetaData().get(serviceName), ByteBuffer.wrap(Base64.decodeBase64(reader.readLine().getBytes())))[ FD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_24 $$ containerLaunchContext.setEnvironment(userSetEnv)[ FD ]
Line_13 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_104 $$ Assert.assertEquals(cId.toString(), reader.readLine())[ FD ]
Line_115 $$ found = true-->Line_119 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_131 $$ Assert.assertEquals(user, containerLaunchContext.getEnvironment().get(Environment.LOGNAME.name()))[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_35 $$ fileWriter.println("@echo " + Environment.LOGNAME.$() + ">> " + processStartFile)[ CD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_141 $$ Assert.assertEquals(conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), containerLaunchContext.getEnvironment().get(Environment.HOME.name()))[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_24 $$ containerLaunchContext.setEnvironment(userSetEnv)[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_32 $$ fileWriter.println("@echo " + Environment.NM_HTTP_PORT.$() + ">> " + processStartFile)[ CD ]
Line_112 $$ boolean found = false-->Line_132 $$ found = false[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_51 $$ fileWriter.write("\necho $" + Environment.USER.name() + " >> " + processStartFile)[ FD ]
Line_135 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) -->Line_136 $$ found = true[ CD ]
Line_91 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())-->Line_108 $$ Assert.assertEquals(StringUtils.join(",", appDirs), reader.readLine())[ FD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_20 $$ userSetEnv.put(Environment.USER.key(), "user_set_" + Environment.USER.key())[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_30 $$ fileWriter.println("@echo " + Environment.NM_HOST.$() + ">> " + processStartFile)[ CD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_109 $$ Assert.assertEquals(user, reader.readLine())[ FD ]
Line_115 $$ found = true-->Line_136 $$ found = true[ FD ]
Line_64 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_68 $$ rsrc_alpha.setType(LocalResourceType.FILE)[ FD ]
Line_114 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) -->Line_115 $$ found = true[ CD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_56 $$ fileWriter.write("\necho $" + AuxiliaryServiceHelper.NM_AUX_SERVICE + serviceName + " >> " + processStartFile)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_42 $$ fileWriter.println("@ping -n 100 127.0.0.1 >nul")[ FD ]
Line_157 $$ GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds)-->Line_158 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)[ FD ]
Line_98 $$ List<String> containerLogDirs = new ArrayList<String>()-->Line_101 $$ containerLogDirs.add(logDir + Path.SEPARATOR + relativeContainerLogDir)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_47 $$ fileWriter.write("\necho $" + Environment.NM_HOST.name() + " >> " + processStartFile)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_39 $$ fileWriter.println("@echo %" + AuxiliaryServiceHelper.NM_AUX_SERVICE + serviceName + "%>> " + processStartFile)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_46 $$ fileWriter.write("\necho $" + Environment.CONTAINER_ID.name() + " > " + processStartFile)[ FD ]
Line_64 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_69 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_111 $$ String obtainedPWD = reader.readLine()-->Line_133 $$ obtainedPWD = containerLaunchContext.getEnvironment().get(Environment.PWD.name())[ FD ]
Line_64 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_65 $$ rsrc_alpha.setResource(resource_alpha)[ FD ]
Line_154 $$ StopContainersRequest stopRequest = StopContainersRequest.newInstance(containerIds)-->Line_155 $$ containerManager.stopContainers(stopRequest)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_30 $$ fileWriter.println("@echo " + Environment.NM_HOST.$() + ">> " + processStartFile)[ FD ]
Line_91 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())-->Line_128 $$ Assert.assertEquals(StringUtils.join(",", appDirs), containerLaunchContext.getEnvironment().get(Environment.LOCAL_DIRS.name()))[ FD ]
Line_70 $$ String destinationFile = "dest_file"-->Line_72 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_91 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())-->Line_96 $$ appDirs.add(new Path(appsdir, appId.toString()))[ FD ]
Line_27 $$ File processStartFile = new File(tmpDir, "env_vars.txt").getAbsoluteFile()-->Line_87 $$ Assert.assertTrue("ProcessStartFile doesn't exist!", processStartFile.exists())[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_36 $$ fileWriter.println("@echo " + Environment.PWD.$() + ">> " + processStartFile)[ CD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_15 $$ userSetEnv.put(Environment.CONTAINER_ID.name(), "user_set_container_id")[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_37 $$ fileWriter.println("@echo " + Environment.HOME.$() + ">> " + processStartFile)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_35 $$ fileWriter.println("@echo " + Environment.LOGNAME.$() + ">> " + processStartFile)[ FD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_19 $$ userSetEnv.put(Environment.LOCAL_DIRS.name(), "user_set_LOCAL_DIR")[ FD ]
Line_83 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) -->Line_85 $$ LOG.info("Waiting for process start-file to be created")[ CD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_46 $$ fileWriter.write("\necho $" + Environment.CONTAINER_ID.name() + " > " + processStartFile)[ CD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_41 $$ fileWriter.println("@echo " + cId + ">> " + processStartFile)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_53 $$ fileWriter.write("\necho $" + Environment.PWD.name() + " >> " + processStartFile)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_29 $$ fileWriter.println("@echo " + Environment.CONTAINER_ID.$() + "> " + processStartFile)[ FD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_120 $$ Assert.assertEquals(conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), reader.readLine())[ FD ]
Line_82 $$ int timeoutSecs = 0-->Line_83 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_78 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_79 $$ list.add(scRequest)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_36 $$ fileWriter.println("@echo " + Environment.PWD.$() + ">> " + processStartFile)[ FD ]
Line_78 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_80 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ FD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_106 $$ Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), reader.readLine())[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_41 $$ fileWriter.println("@echo " + cId + ">> " + processStartFile)[ CD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_110 $$ Assert.assertEquals(user, reader.readLine())[ FD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_122 $$ Assert.assertEquals(containerManager.getAuxServiceMetaData().get(serviceName), ByteBuffer.wrap(Base64.decodeBase64(reader.readLine().getBytes())))[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_48 $$ fileWriter.write("\necho $" + Environment.NM_PORT.name() + " >> " + processStartFile)[ CD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_111 $$ String obtainedPWD = reader.readLine()[ FD ]
Line_13 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_124 $$ Assert.assertEquals(cId.toString(), containerLaunchContext.getEnvironment().get(Environment.CONTAINER_ID.name()))[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_54 $$ fileWriter.write("\necho $" + Environment.HOME.name() + " >> " + processStartFile)[ FD ]
Line_112 $$ boolean found = false-->Line_115 $$ found = true[ FD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_18 $$ userSetEnv.put(Environment.NM_HTTP_PORT.name(), "user_set_NM_HTTP_PORT")[ FD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_105 $$ Assert.assertEquals(context.getNodeId().getHost(), reader.readLine())[ FD ]
Line_13 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_156 $$ BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE)[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_73 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_59 $$ fileWriter.write("\nexec sleep 100")[ CD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_107 $$ Assert.assertEquals(String.valueOf(HTTP_PORT), reader.readLine())[ FD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_21 $$ userSetEnv.put(Environment.LOGNAME.name(), "user_set_LOGNAME")[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_126 $$ Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), containerLaunchContext.getEnvironment().get(Environment.NM_PORT.name()))[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_31 $$ fileWriter.println("@echo " + Environment.NM_PORT.$() + ">> " + processStartFile)[ CD ]
Line_112 $$ boolean found = false-->Line_136 $$ found = true[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_33 $$ fileWriter.println("@echo " + Environment.LOCAL_DIRS.$() + ">> " + processStartFile)[ FD ]
Line_159 $$ int expectedExitCode = ContainerExitStatus.KILLED_BY_APPMASTER-->Line_160 $$ Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus())[ FD ]
Line_71 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_72 $$ localResources.put(destinationFile, rsrc_alpha)[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_54 $$ fileWriter.write("\necho $" + Environment.HOME.name() + " >> " + processStartFile)[ CD ]
Line_25 $$ File scriptFile = Shell.appendScriptExtension(tmpDir, "scriptFile")-->Line_69 $$ rsrc_alpha.setTimestamp(scriptFile.lastModified())[ FD ]
Line_13 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_153 $$ containerIds.add(cId)[ FD ]
Line_12 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_13 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_127 $$ Assert.assertEquals(String.valueOf(HTTP_PORT), containerLaunchContext.getEnvironment().get(Environment.NM_HTTP_PORT.name()))[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_129 $$ Assert.assertEquals(StringUtils.join(",", containerLogDirs), containerLaunchContext.getEnvironment().get(Environment.LOG_DIRS.name()))[ FD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_108 $$ Assert.assertEquals(StringUtils.join(",", appDirs), reader.readLine())[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_128 $$ Assert.assertEquals(StringUtils.join(",", appDirs), containerLaunchContext.getEnvironment().get(Environment.LOCAL_DIRS.name()))[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_34 $$ fileWriter.println("@echo " + Environment.USER.$() + ">> " + processStartFile)[ CD ]
Line_115 $$ found = true-->Line_132 $$ found = false[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_52 $$ fileWriter.write("\necho $" + Environment.LOGNAME.name() + " >> " + processStartFile)[ CD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_32 $$ fileWriter.println("@echo " + Environment.NM_HTTP_PORT.$() + ">> " + processStartFile)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_34 $$ fileWriter.println("@echo " + Environment.USER.$() + ">> " + processStartFile)[ FD ]
Line_115 $$ found = true-->Line_140 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_111 $$ String obtainedPWD = reader.readLine()-->Line_135 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_76 $$ containerLaunchContext.setCommands(commands)[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_125 $$ Assert.assertEquals(context.getNodeId().getHost(), containerLaunchContext.getEnvironment().get(Environment.NM_HOST.name()))[ FD ]
Line_136 $$ found = true-->Line_140 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_133 $$ obtainedPWD = containerLaunchContext.getEnvironment().get(Environment.PWD.name())[ FD ]
Line_132 $$ found = false-->Line_140 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_47 $$ fileWriter.write("\necho $" + Environment.NM_HOST.name() + " >> " + processStartFile)[ CD ]
Line_27 $$ File processStartFile = new File(tmpDir, "env_vars.txt").getAbsoluteFile()-->Line_83 $$ while (!processStartFile.exists() && timeoutSecs++ < 20) [ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_50 $$ fileWriter.write("\necho $" + Environment.LOCAL_DIRS.name() + " >> " + processStartFile)[ CD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_22 $$ userSetEnv.put(Environment.PWD.name(), "user_set_PWD")[ FD ]
Line_64 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_66 $$ rsrc_alpha.setSize(-1)[ FD ]
Line_80 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)-->Line_81 $$ containerManager.startContainers(allRequests)[ FD ]
Line_14 $$ Map<String, String> userSetEnv = new HashMap<String, String>()-->Line_23 $$ userSetEnv.put(Environment.HOME.name(), "user_set_HOME")[ FD ]
Line_103 $$ BufferedReader reader = new BufferedReader(new FileReader(processStartFile))-->Line_104 $$ Assert.assertEquals(cId.toString(), reader.readLine())[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_50 $$ fileWriter.write("\necho $" + Environment.LOCAL_DIRS.name() + " >> " + processStartFile)[ FD ]
Line_111 $$ String obtainedPWD = reader.readLine()-->Line_114 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_52 $$ fileWriter.write("\necho $" + Environment.LOGNAME.name() + " >> " + processStartFile)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_49 $$ fileWriter.write("\necho $" + Environment.NM_HTTP_PORT.name() + " >> " + processStartFile)[ FD ]
Line_64 $$ LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class)-->Line_67 $$ rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION)[ FD ]
Line_13 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_114 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_133 $$ obtainedPWD = containerLaunchContext.getEnvironment().get(Environment.PWD.name())-->Line_135 $$ if (new Path(localDir, cId.toString()).toString().equals(obtainedPWD)) [ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_37 $$ fileWriter.println("@echo " + Environment.HOME.$() + ">> " + processStartFile)[ CD ]
Line_77 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, Priority.newInstance(0), 0))-->Line_79 $$ list.add(scRequest)[ FD ]
Line_158 $$ ContainerStatus containerStatus = containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0)-->Line_160 $$ Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus())[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_33 $$ fileWriter.println("@echo " + Environment.LOCAL_DIRS.$() + ">> " + processStartFile)[ CD ]
Line_71 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_73 $$ containerLaunchContext.setLocalResources(localResources)[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_59 $$ fileWriter.write("\nexec sleep 100")[ FD ]
Line_26 $$ PrintWriter fileWriter = new PrintWriter(scriptFile)-->Line_48 $$ fileWriter.write("\necho $" + Environment.NM_PORT.name() + " >> " + processStartFile)[ FD ]
Line_112 $$ boolean found = false-->Line_140 $$ Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found)[ FD ]
Line_132 $$ found = false-->Line_136 $$ found = true[ FD ]
Line_13 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_99 $$ String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appId.toString(), cId.toString())[ FD ]
Line_13 $$ ContainerId cId = ContainerId.newInstance(appAttemptId, 0)-->Line_77 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, Priority.newInstance(0), 0))[ FD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_130 $$ Assert.assertEquals(user, containerLaunchContext.getEnvironment().get(Environment.USER.name()))[ FD ]
Line_28 $$ if (Shell.WINDOWS) -->Line_51 $$ fileWriter.write("\necho $" + Environment.USER.name() + " >> " + processStartFile)[ CD ]
Line_9 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_77 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, createContainerToken(cId, Priority.newInstance(0), 0))[ FD ]
