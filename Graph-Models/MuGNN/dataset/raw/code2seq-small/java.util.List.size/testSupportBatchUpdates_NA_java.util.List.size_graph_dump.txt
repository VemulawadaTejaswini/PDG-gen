Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_30 $$ Assert.assertEquals(PreparedStatement.class.getMethod("executeBatch"), methods.remove(0))[ FD ]
Line_3 $$ PreparedStatementInvocationHandler preparedStatementInvocationHandler = new PreparedStatementInvocationHandler(true)-->Line_4 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] [ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_20 $$ Assert.assertEquals(methods.toString(), 2, methods.size())[ FD ]
Line_5 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_23 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_34 $$ Assert.assertEquals(PreparedStatement.class.getMethod("execute"), methods.remove(0))[ FD ]
Line_4 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] -->Line_12 $$ Assert.assertArrayEquals(new int[0], preparedStatement.executeBatch())[ FD ]
Line_9 $$ int hibernateJDBCBatchSize = PropsValues.HIBERNATE_JDBC_BATCH_SIZE-->Line_37 $$ ReflectionTestUtil.setFieldValue(PropsValues.class, "HIBERNATE_JDBC_BATCH_SIZE", hibernateJDBCBatchSize)[ FD ]
Line_2 $$ public void testSupportBatchUpdates() throws Exception -->Line_10 $$ ReflectionTestUtil.setFieldValue(PropsValues.class, "HIBERNATE_JDBC_BATCH_SIZE", 2)[ CD ]
Line_2 $$ public void testSupportBatchUpdates() throws Exception -->Line_8 $$ Assert.assertTrue(methods.toString(), methods.isEmpty())[ CD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_17 $$ Assert.assertEquals(PreparedStatement.class.getMethod("addBatch"), methods.remove(0))[ FD ]
Line_5 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_31 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_5 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_18 $$ Assert.assertEquals(1, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_13 $$ Assert.assertTrue(methods.toString(), methods.isEmpty())[ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_21 $$ Assert.assertEquals(PreparedStatement.class.getMethod("addBatch"), methods.remove(0))[ FD ]
Line_5 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_35 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_4 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] -->Line_5 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)[ FD ]
Line_5 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_6 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_5 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_27 $$ Assert.assertEquals(1, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_4 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] -->Line_24 $$ preparedStatement.addBatch()[ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_25 $$ Assert.assertEquals(methods.toString(), 1, methods.size())[ FD ]
Line_2 $$ public void testSupportBatchUpdates() throws Exception -->Line_5 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)[ CD ]
Line_2 $$ public void testSupportBatchUpdates() throws Exception -->Line_9 $$ int hibernateJDBCBatchSize = PropsValues.HIBERNATE_JDBC_BATCH_SIZE[ CD ]
Line_4 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] -->Line_19 $$ preparedStatement.addBatch()[ FD ]
Line_4 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] -->Line_32 $$ preparedStatement.execute()[ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_33 $$ Assert.assertEquals(methods.toString(), 1, methods.size())[ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_29 $$ Assert.assertEquals(methods.toString(), 1, methods.size())[ FD ]
Line_4 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] -->Line_28 $$ preparedStatement.executeBatch()[ FD ]
Line_4 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] -->Line_15 $$ preparedStatement.addBatch()[ FD ]
Line_2 $$ public void testSupportBatchUpdates() throws Exception -->Line_4 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] [ CD ]
Line_2 $$ public void testSupportBatchUpdates() throws Exception -->Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()[ CD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_26 $$ Assert.assertEquals(PreparedStatement.class.getMethod("addBatch"), methods.remove(0))[ FD ]
Line_3 $$ PreparedStatementInvocationHandler preparedStatementInvocationHandler = new PreparedStatementInvocationHandler(true)-->Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()[ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_16 $$ Assert.assertEquals(methods.toString(), 1, methods.size())[ FD ]
Line_5 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_14 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_8 $$ Assert.assertTrue(methods.toString(), methods.isEmpty())[ FD ]
Line_7 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_22 $$ Assert.assertEquals(PreparedStatement.class.getMethod("executeBatch"), methods.remove(0))[ FD ]
Line_2 $$ public void testSupportBatchUpdates() throws Exception -->Line_6 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ CD ]
Line_2 $$ public void testSupportBatchUpdates() throws Exception -->Line_3 $$ PreparedStatementInvocationHandler preparedStatementInvocationHandler = new PreparedStatementInvocationHandler(true)[ CD ]
