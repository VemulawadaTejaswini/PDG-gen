Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_4 $$ for (int i = 0, size = events.size(); i < size; i++) [ CD ]
Line_4 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_35 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_12 $$ invalidIDs = EmptyIntHashSet.INSTANCE-->Line_32 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())[ FD ]
Line_33 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_34 $$ final VFileEvent event = events.get(i)[ CD ]
Line_10 $$ final TIntHashSet invalidIDs-->Line_35 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_15 $$ invalidIDs = new TIntHashSet(deletionEvents.size())-->Line_32 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())[ FD ]
Line_34 $$ final VFileEvent event = events.get(i)-->Line_35 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_25 $$ parent = parent.getParent()-->Line_20 $$ while (parent != null) [ FD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_33 $$ for (int i = 0, size = events.size(); i < size; i++) [ FD ]
Line_3 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_7 $$ deletionEvents.add(new EventWrapper((VFileDeleteEvent) event, i))[ FD ]
Line_3 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_11 $$ if (deletionEvents.isEmpty()) [ FD ]
Line_3 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_14 $$ ContainerUtil.quickSort(deletionEvents, DEPTH_COMPARATOR)[ FD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_5 $$ final VFileEvent event = events.get(i)[ FD ]
Line_33 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_35 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ CD ]
Line_11 $$ if (deletionEvents.isEmpty()) -->Line_16 $$ final Set<VirtualFile> dirsToBeDeleted = new THashSet<VirtualFile>(deletionEvents.size())[ CD ]
Line_32 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())-->Line_36 $$ filtered.add(event)[ FD ]
Line_25 $$ parent = parent.getParent()-->Line_21 $$ if (dirsToBeDeleted.contains(parent)) [ FD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_32 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())[ CD ]
Line_5 $$ final VFileEvent event = events.get(i)-->Line_35 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_33 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_34 $$ final VFileEvent event = events.get(i)[ FD ]
Line_5 $$ final VFileEvent event = events.get(i)-->Line_36 $$ filtered.add(event)[ FD ]
Line_16 $$ final Set<VirtualFile> dirsToBeDeleted = new THashSet<VirtualFile>(deletionEvents.size())-->Line_21 $$ if (dirsToBeDeleted.contains(parent)) [ FD ]
Line_4 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_5 $$ final VFileEvent event = events.get(i)[ CD ]
Line_4 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_5 $$ final VFileEvent event = events.get(i)[ FD ]
Line_34 $$ final VFileEvent event = events.get(i)-->Line_36 $$ filtered.add(event)[ FD ]
Line_12 $$ invalidIDs = EmptyIntHashSet.INSTANCE-->Line_15 $$ invalidIDs = new TIntHashSet(deletionEvents.size())[ FD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_33 $$ for (int i = 0, size = events.size(); i < size; i++) [ CD ]
Line_5 $$ final VFileEvent event = events.get(i)-->Line_6 $$ if (event instanceof VFileDeleteEvent && event.isValid()) [ FD ]
Line_3 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_16 $$ final Set<VirtualFile> dirsToBeDeleted = new THashSet<VirtualFile>(deletionEvents.size())[ FD ]
Line_20 $$ while (parent != null) -->Line_21 $$ if (dirsToBeDeleted.contains(parent)) [ CD ]
Line_10 $$ final TIntHashSet invalidIDs-->Line_22 $$ invalidIDs.add(wrapper.id)[ FD ]
Line_27 $$ if (candidate.isDirectory()) -->Line_28 $$ dirsToBeDeleted.add(candidate)[ CD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_10 $$ final TIntHashSet invalidIDs[ CD ]
Line_18 $$ final VirtualFile candidate = wrapper.event.getFile()-->Line_27 $$ if (candidate.isDirectory()) [ FD ]
Line_10 $$ final TIntHashSet invalidIDs-->Line_32 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())[ FD ]
Line_4 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_33 $$ for (int i = 0, size = events.size(); i < size; i++) [ FD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_39 $$ return filtered[ CD ]
Line_19 $$ VirtualFile parent = candidate-->Line_21 $$ if (dirsToBeDeleted.contains(parent)) [ FD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_34 $$ final VFileEvent event = events.get(i)[ FD ]
Line_11 $$ if (deletionEvents.isEmpty()) -->Line_15 $$ invalidIDs = new TIntHashSet(deletionEvents.size())[ CD ]
Line_16 $$ final Set<VirtualFile> dirsToBeDeleted = new THashSet<VirtualFile>(deletionEvents.size())-->Line_28 $$ dirsToBeDeleted.add(candidate)[ FD ]
Line_33 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_35 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_21 $$ if (dirsToBeDeleted.contains(parent)) -->Line_22 $$ invalidIDs.add(wrapper.id)[ CD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_11 $$ if (deletionEvents.isEmpty()) [ CD ]
Line_4 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_34 $$ final VFileEvent event = events.get(i)[ FD ]
Line_11 $$ if (deletionEvents.isEmpty()) -->Line_12 $$ invalidIDs = EmptyIntHashSet.INSTANCE[ CD ]
Line_3 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_15 $$ invalidIDs = new TIntHashSet(deletionEvents.size())[ FD ]
Line_12 $$ invalidIDs = EmptyIntHashSet.INSTANCE-->Line_22 $$ invalidIDs.add(wrapper.id)[ FD ]
Line_15 $$ invalidIDs = new TIntHashSet(deletionEvents.size())-->Line_22 $$ invalidIDs.add(wrapper.id)[ FD ]
Line_19 $$ VirtualFile parent = candidate-->Line_20 $$ while (parent != null) [ FD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_4 $$ for (int i = 0, size = events.size(); i < size; i++) [ FD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_32 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())[ FD ]
Line_10 $$ final TIntHashSet invalidIDs-->Line_12 $$ invalidIDs = EmptyIntHashSet.INSTANCE[ FD ]
Line_11 $$ if (deletionEvents.isEmpty()) -->Line_14 $$ ContainerUtil.quickSort(deletionEvents, DEPTH_COMPARATOR)[ CD ]
Line_19 $$ VirtualFile parent = candidate-->Line_25 $$ parent = parent.getParent()[ FD ]
Line_6 $$ if (event instanceof VFileDeleteEvent && event.isValid()) -->Line_7 $$ deletionEvents.add(new EventWrapper((VFileDeleteEvent) event, i))[ CD ]
Line_12 $$ invalidIDs = EmptyIntHashSet.INSTANCE-->Line_35 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_4 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_6 $$ if (event instanceof VFileDeleteEvent && event.isValid()) [ CD ]
Line_35 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) -->Line_36 $$ filtered.add(event)[ CD ]
Line_20 $$ while (parent != null) -->Line_25 $$ parent = parent.getParent()[ CD ]
Line_18 $$ final VirtualFile candidate = wrapper.event.getFile()-->Line_28 $$ dirsToBeDeleted.add(candidate)[ FD ]
Line_2 $$ private static List<VFileEvent> validateEvents(@NotNull List<VFileEvent> events) -->Line_3 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()[ CD ]
Line_15 $$ invalidIDs = new TIntHashSet(deletionEvents.size())-->Line_35 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_10 $$ final TIntHashSet invalidIDs-->Line_15 $$ invalidIDs = new TIntHashSet(deletionEvents.size())[ FD ]
