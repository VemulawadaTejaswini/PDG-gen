Line_16 $$ invalidIDs = new TIntHashSet(deletionEvents.size())-->Line_33 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())[ FD ]
Line_7 $$ if (event instanceof VFileDeleteEvent && event.isValid()) -->Line_8 $$ deletionEvents.add(new EventWrapper((VFileDeleteEvent) event, i))[ CD ]
Line_5 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_36 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_11 $$ final TIntHashSet invalidIDs-->Line_13 $$ invalidIDs = EmptyIntHashSet.INSTANCE[ FD ]
Line_4 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_16 $$ invalidIDs = new TIntHashSet(deletionEvents.size())[ FD ]
Line_12 $$ if (deletionEvents.isEmpty()) -->Line_17 $$ final Set<VirtualFile> dirsToBeDeleted = new THashSet<VirtualFile>(deletionEvents.size())[ CD ]
Line_17 $$ final Set<VirtualFile> dirsToBeDeleted = new THashSet<VirtualFile>(deletionEvents.size())-->Line_22 $$ if (dirsToBeDeleted.contains(parent)) [ FD ]
Line_11 $$ final TIntHashSet invalidIDs-->Line_33 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())[ FD ]
Line_33 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())-->Line_37 $$ filtered.add(event)[ FD ]
Line_19 $$ final VirtualFile candidate = wrapper.event.getFile()-->Line_29 $$ dirsToBeDeleted.add(candidate)[ FD ]
Line_11 $$ final TIntHashSet invalidIDs-->Line_23 $$ invalidIDs.add(wrapper.id)[ FD ]
Line_6 $$ final VFileEvent event = events.get(i)-->Line_37 $$ filtered.add(event)[ FD ]
Line_5 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_6 $$ final VFileEvent event = events.get(i)[ CD ]
Line_20 $$ VirtualFile parent = candidate-->Line_26 $$ parent = parent.getParent()[ FD ]
Line_12 $$ if (deletionEvents.isEmpty()) -->Line_16 $$ invalidIDs = new TIntHashSet(deletionEvents.size())[ CD ]
Line_35 $$ final VFileEvent event = events.get(i)-->Line_37 $$ filtered.add(event)[ FD ]
Line_34 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_36 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ CD ]
Line_12 $$ if (deletionEvents.isEmpty()) -->Line_13 $$ invalidIDs = EmptyIntHashSet.INSTANCE[ CD ]
Line_4 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_17 $$ final Set<VirtualFile> dirsToBeDeleted = new THashSet<VirtualFile>(deletionEvents.size())[ FD ]
Line_20 $$ VirtualFile parent = candidate-->Line_22 $$ if (dirsToBeDeleted.contains(parent)) [ FD ]
Line_5 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_6 $$ final VFileEvent event = events.get(i)[ FD ]
Line_34 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_35 $$ final VFileEvent event = events.get(i)[ FD ]
Line_35 $$ final VFileEvent event = events.get(i)-->Line_36 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_6 $$ final VFileEvent event = events.get(i)-->Line_36 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_22 $$ if (dirsToBeDeleted.contains(parent)) -->Line_23 $$ invalidIDs.add(wrapper.id)[ CD ]
Line_28 $$ if (candidate.isDirectory()) -->Line_29 $$ dirsToBeDeleted.add(candidate)[ CD ]
Line_16 $$ invalidIDs = new TIntHashSet(deletionEvents.size())-->Line_23 $$ invalidIDs.add(wrapper.id)[ FD ]
Line_4 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_8 $$ deletionEvents.add(new EventWrapper((VFileDeleteEvent) event, i))[ FD ]
Line_13 $$ invalidIDs = EmptyIntHashSet.INSTANCE-->Line_16 $$ invalidIDs = new TIntHashSet(deletionEvents.size())[ FD ]
Line_26 $$ parent = parent.getParent()-->Line_22 $$ if (dirsToBeDeleted.contains(parent)) [ FD ]
Line_6 $$ final VFileEvent event = events.get(i)-->Line_7 $$ if (event instanceof VFileDeleteEvent && event.isValid()) [ FD ]
Line_11 $$ final TIntHashSet invalidIDs-->Line_36 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_5 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_35 $$ final VFileEvent event = events.get(i)[ FD ]
Line_13 $$ invalidIDs = EmptyIntHashSet.INSTANCE-->Line_23 $$ invalidIDs.add(wrapper.id)[ FD ]
Line_11 $$ final TIntHashSet invalidIDs-->Line_16 $$ invalidIDs = new TIntHashSet(deletionEvents.size())[ FD ]
Line_16 $$ invalidIDs = new TIntHashSet(deletionEvents.size())-->Line_36 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_19 $$ final VirtualFile candidate = wrapper.event.getFile()-->Line_28 $$ if (candidate.isDirectory()) [ FD ]
Line_13 $$ invalidIDs = EmptyIntHashSet.INSTANCE-->Line_33 $$ final List<VFileEvent> filtered = new ArrayList<VFileEvent>(events.size() - invalidIDs.size())[ FD ]
Line_4 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_15 $$ ContainerUtil.quickSort(deletionEvents, DEPTH_COMPARATOR)[ FD ]
Line_17 $$ final Set<VirtualFile> dirsToBeDeleted = new THashSet<VirtualFile>(deletionEvents.size())-->Line_29 $$ dirsToBeDeleted.add(candidate)[ FD ]
Line_13 $$ invalidIDs = EmptyIntHashSet.INSTANCE-->Line_36 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_34 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_36 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) [ FD ]
Line_21 $$ while (parent != null) -->Line_26 $$ parent = parent.getParent()[ CD ]
Line_21 $$ while (parent != null) -->Line_22 $$ if (dirsToBeDeleted.contains(parent)) [ CD ]
Line_12 $$ if (deletionEvents.isEmpty()) -->Line_15 $$ ContainerUtil.quickSort(deletionEvents, DEPTH_COMPARATOR)[ CD ]
Line_5 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_7 $$ if (event instanceof VFileDeleteEvent && event.isValid()) [ CD ]
Line_20 $$ VirtualFile parent = candidate-->Line_21 $$ while (parent != null) [ FD ]
Line_4 $$ final List<EventWrapper> deletionEvents = ContainerUtil.newArrayList()-->Line_12 $$ if (deletionEvents.isEmpty()) [ FD ]
Line_5 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_34 $$ for (int i = 0, size = events.size(); i < size; i++) [ FD ]
Line_34 $$ for (int i = 0, size = events.size(); i < size; i++) -->Line_35 $$ final VFileEvent event = events.get(i)[ CD ]
Line_36 $$ if (event.isValid() && !(event instanceof VFileDeleteEvent && invalidIDs.contains(i))) -->Line_37 $$ filtered.add(event)[ CD ]
Line_26 $$ parent = parent.getParent()-->Line_21 $$ while (parent != null) [ FD ]
