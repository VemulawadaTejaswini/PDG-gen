Line_47 $$ QueryParameters qp = new QueryParameters()-->Line_51 $$ qp.setOptionalEntityName(personPersister.getEntityName())[ FD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_31 $$ qp.setOptionalEntityName(addressPersister.getEntityName())[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_19 $$ final EntityPersister addressPersister = sessionFactory().getEntityPersister(Address.class.getName())[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_58 $$ Object result = results.get(0)[ CD ]
Line_4 $$ Person p = new Person()-->Line_7 $$ a.setPerson(p)[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_24 $$ ps.setString(2, "HOME")[ CD ]
Line_13 $$ Session s = openSession()-->Line_14 $$ Transaction t = s.beginTransaction()[ FD ]
Line_47 $$ QueryParameters qp = new QueryParameters()-->Line_48 $$ qp.setPositionalParameterTypes(new Type[] [ FD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_29 $$ qp.setPositionalParameterValues(new Object[] [ FD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_47 $$ QueryParameters qp = new QueryParameters()[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_39 $$ assertNotNull(result)[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_63 $$ s.createQuery("delete Address").executeUpdate()[ CD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_58 $$ Object result = results.get(0)[ FD ]
Line_13 $$ Session s = openSession()-->Line_15 $$ s.persist(p)[ FD ]
Line_18 $$ final EntityPersister personPersister = sessionFactory().getEntityPersister(Person.class.getName())-->Line_42 $$ final List results = getResults(personPersister, new Callback() [ FD ]
Line_6 $$ final Address a = new Address()-->Line_9 $$ a.setType("HOME")[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_65 $$ s.getTransaction().commit()[ CD ]
Line_18 $$ final EntityPersister personPersister = sessionFactory().getEntityPersister(Person.class.getName())-->Line_48 $$ qp.setPositionalParameterTypes(new Type[] [ FD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_48 $$ qp.setPositionalParameterTypes(new Type[] [ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_6 $$ final Address a = new Address()[ CD ]
Line_6 $$ final Address a = new Address()-->Line_11 $$ a.setState("Sweet Home Alabama")[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_23 $$ ps.setString(1, personId)[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_18 $$ final EntityPersister personPersister = sessionFactory().getEntityPersister(Person.class.getName())[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_10 $$ a.setStreet("Main St")[ CD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_54 $$ return qp[ CD ]
Line_13 $$ Session s = openSession()-->Line_64 $$ s.createQuery("delete Person").executeUpdate()[ FD ]
Line_13 $$ Session s = openSession()-->Line_66 $$ s.close()[ FD ]
Line_3 $$ final String personId = "John Doe"-->Line_52 $$ qp.setOptionalId(personId)[ FD ]
Line_6 $$ final Address a = new Address()-->Line_32 $$ qp.setOptionalId(a)[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_14 $$ Transaction t = s.beginTransaction()[ CD ]
Line_3 $$ final String personId = "John Doe"-->Line_44 $$ ps.setString(1, personId)[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_28 $$ qp.setPositionalParameterTypes(new Type[] [ CD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_31 $$ qp.setOptionalEntityName(addressPersister.getEntityName())[ CD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_52 $$ qp.setOptionalId(personId)[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_17 $$ s.close()[ CD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_33 $$ qp.setLockOptions(LockOptions.NONE)[ FD ]
Line_13 $$ Session s = openSession()-->Line_62 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_4 $$ Person p = new Person()[ CD ]
Line_13 $$ Session s = openSession()-->Line_17 $$ s.close()[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_27 $$ QueryParameters qp = new QueryParameters()[ CD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_44 $$ ps.setString(1, personId)[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_3 $$ final String personId = "John Doe"[ CD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_30 $$ qp.setOptionalObject(a)[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_33 $$ qp.setLockOptions(LockOptions.NONE)[ CD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_28 $$ qp.setPositionalParameterTypes(new Type[] [ FD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_52 $$ qp.setOptionalId(personId)[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_8 $$ p.setAddress(a)[ CD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_49 $$ qp.setPositionalParameterValues(new Object[] [ CD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_50 $$ qp.setOptionalObject(null)[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_62 $$ s.beginTransaction()[ CD ]
Line_3 $$ final String personId = "John Doe"-->Line_5 $$ p.setName(personId)[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_9 $$ a.setType("HOME")[ CD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_30 $$ qp.setOptionalObject(a)[ CD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_51 $$ qp.setOptionalEntityName(personPersister.getEntityName())[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_61 $$ s = openSession()[ CD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_50 $$ qp.setOptionalObject(null)[ FD ]
Line_47 $$ QueryParameters qp = new QueryParameters()-->Line_49 $$ qp.setPositionalParameterValues(new Object[] [ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_32 $$ qp.setOptionalId(a)[ CD ]
Line_47 $$ QueryParameters qp = new QueryParameters()-->Line_50 $$ qp.setOptionalObject(null)[ FD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_48 $$ qp.setPositionalParameterTypes(new Type[] [ CD ]
Line_13 $$ Session s = openSession()-->Line_63 $$ s.createQuery("delete Address").executeUpdate()[ FD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_53 $$ qp.setLockOptions(LockOptions.NONE)[ FD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_44 $$ ps.setString(1, personId)[ FD ]
Line_6 $$ final Address a = new Address()-->Line_12 $$ a.setZip("3181")[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_5 $$ p.setName(personId)[ CD ]
Line_6 $$ final Address a = new Address()-->Line_8 $$ p.setAddress(a)[ FD ]
Line_6 $$ final Address a = new Address()-->Line_10 $$ a.setStreet("Main St")[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_21 $$ final List results = getResults(addressPersister, new Callback() [ CD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_51 $$ qp.setOptionalEntityName(personPersister.getEntityName())[ CD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_37 $$ assertEquals(1, results.size())[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_34 $$ return qp[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_42 $$ final List results = getResults(personPersister, new Callback() [ CD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_32 $$ qp.setOptionalId(a)[ FD ]
Line_6 $$ final Address a = new Address()-->Line_7 $$ a.setPerson(p)[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_64 $$ s.createQuery("delete Person").executeUpdate()[ CD ]
Line_13 $$ Session s = openSession()-->Line_65 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_11 $$ a.setState("Sweet Home Alabama")[ CD ]
Line_19 $$ final EntityPersister addressPersister = sessionFactory().getEntityPersister(Address.class.getName())-->Line_28 $$ qp.setPositionalParameterTypes(new Type[] [ FD ]
Line_6 $$ final Address a = new Address()-->Line_30 $$ qp.setOptionalObject(a)[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_57 $$ assertEquals(1, results.size())[ FD ]
Line_4 $$ Person p = new Person()-->Line_5 $$ p.setName(personId)[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_16 $$ t.commit()[ CD ]
Line_47 $$ QueryParameters qp = new QueryParameters()-->Line_52 $$ qp.setOptionalId(personId)[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_7 $$ a.setPerson(p)[ CD ]
Line_14 $$ Transaction t = s.beginTransaction()-->Line_16 $$ t.commit()[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_59 $$ assertNotNull(result)[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_57 $$ assertEquals(1, results.size())[ CD ]
Line_27 $$ QueryParameters qp = new QueryParameters()-->Line_49 $$ qp.setPositionalParameterValues(new Object[] [ FD ]
Line_19 $$ final EntityPersister addressPersister = sessionFactory().getEntityPersister(Address.class.getName())-->Line_21 $$ final List results = getResults(addressPersister, new Callback() [ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_66 $$ s.close()[ CD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_23 $$ ps.setString(1, personId)[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_37 $$ assertEquals(1, results.size())[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_13 $$ Session s = openSession()[ CD ]
Line_4 $$ Person p = new Person()-->Line_15 $$ s.persist(p)[ FD ]
Line_3 $$ final String personId = "John Doe"-->Line_23 $$ ps.setString(1, personId)[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_29 $$ qp.setPositionalParameterValues(new Object[] [ CD ]
Line_18 $$ final EntityPersister personPersister = sessionFactory().getEntityPersister(Person.class.getName())-->Line_51 $$ qp.setOptionalEntityName(personPersister.getEntityName())[ FD ]
Line_47 $$ QueryParameters qp = new QueryParameters()-->Line_53 $$ qp.setLockOptions(LockOptions.NONE)[ FD ]
Line_4 $$ Person p = new Person()-->Line_8 $$ p.setAddress(a)[ FD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_53 $$ qp.setLockOptions(LockOptions.NONE)[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_12 $$ a.setZip("3181")[ CD ]
Line_19 $$ final EntityPersister addressPersister = sessionFactory().getEntityPersister(Address.class.getName())-->Line_31 $$ qp.setOptionalEntityName(addressPersister.getEntityName())[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_24 $$ ps.setString(2, "HOME")[ FD ]
Line_21 $$ final List results = getResults(addressPersister, new Callback() -->Line_38 $$ Object result = results.get(0)[ FD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_38 $$ Object result = results.get(0)[ CD ]
Line_2 $$ public void testCompositeIdWithKeyManyToOne() throws Exception -->Line_15 $$ s.persist(p)[ CD ]
Line_42 $$ final List results = getResults(personPersister, new Callback() -->Line_44 $$ ps.setString(1, personId)[ CD ]
