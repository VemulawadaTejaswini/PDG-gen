Line_2 $$ private void addFiles(VirtualFile repo, Collection<VirtualFile> files, @Nullable ProgressIndicator indicator) -->Line_3 $$ final List<List<String>> chunks = VcsFileUtil.chunkFiles(repo, files)[ FD ]
Line_7 $$ if (indicator.isCanceled()) -->Line_8 $$ return[ CD ]
Line_6 $$ if (indicator != null) -->Line_10 $$ indicator.setFraction((double) currentChunk / chunks.size())[ CD ]
Line_4 $$ int currentChunk = 0-->Line_11 $$ currentChunk++[ FD ]
Line_2 $$ private void addFiles(VirtualFile repo, Collection<VirtualFile> files, @Nullable ProgressIndicator indicator) -->Line_10 $$ indicator.setFraction((double) currentChunk / chunks.size())[ FD ]
Line_2 $$ private void addFiles(VirtualFile repo, Collection<VirtualFile> files, @Nullable ProgressIndicator indicator) -->Line_13 $$ new HgCommandExecutor(myProject).executeInCurrentThread(repo, "add", paths)[ FD ]
Line_2 $$ private void addFiles(VirtualFile repo, Collection<VirtualFile> files, @Nullable ProgressIndicator indicator) -->Line_7 $$ if (indicator.isCanceled()) [ FD ]
Line_6 $$ if (indicator != null) -->Line_11 $$ currentChunk++[ CD ]
Line_6 $$ if (indicator != null) -->Line_7 $$ if (indicator.isCanceled()) [ CD ]
Line_2 $$ private void addFiles(VirtualFile repo, Collection<VirtualFile> files, @Nullable ProgressIndicator indicator) -->Line_4 $$ int currentChunk = 0[ CD ]
Line_2 $$ private void addFiles(VirtualFile repo, Collection<VirtualFile> files, @Nullable ProgressIndicator indicator) -->Line_6 $$ if (indicator != null) [ FD ]
Line_2 $$ private void addFiles(VirtualFile repo, Collection<VirtualFile> files, @Nullable ProgressIndicator indicator) -->Line_3 $$ final List<List<String>> chunks = VcsFileUtil.chunkFiles(repo, files)[ CD ]
Line_5 $$ for (List<String> paths : chunks) -->Line_13 $$ new HgCommandExecutor(myProject).executeInCurrentThread(repo, "add", paths)[ FD ]
Line_3 $$ final List<List<String>> chunks = VcsFileUtil.chunkFiles(repo, files)-->Line_10 $$ indicator.setFraction((double) currentChunk / chunks.size())[ FD ]
