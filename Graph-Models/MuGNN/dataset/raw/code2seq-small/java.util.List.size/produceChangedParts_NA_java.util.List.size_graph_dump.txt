Line_7 $$ for (int i = 0; i < actualParts.size(); i++) -->Line_9 $$ result.add(new LineExtensionInfo(actualParts.get(i), getNormalAttributes()))[ FD ]
Line_2 $$ public void produceChangedParts(List<LineExtensionInfo> result) -->Line_9 $$ result.add(new LineExtensionInfo(actualParts.get(i), getNormalAttributes()))[ FD ]
Line_7 $$ for (int i = 0; i < actualParts.size(); i++) -->Line_13 $$ if (i != actualParts.size() - 1) [ FD ]
Line_8 $$ if (i < oldParts.size() && StringUtil.equals(actualParts.get(i), oldParts.get(i))) -->Line_9 $$ result.add(new LineExtensionInfo(actualParts.get(i), getNormalAttributes()))[ CD ]
Line_2 $$ public void produceChangedParts(List<LineExtensionInfo> result) -->Line_3 $$ if (isArray(actual) && isArray(old)) [ CD ]
Line_7 $$ for (int i = 0; i < actualParts.size(); i++) -->Line_8 $$ if (i < oldParts.size() && StringUtil.equals(actualParts.get(i), oldParts.get(i))) [ FD ]
Line_4 $$ List<String> actualParts = getArrayParts(actual)-->Line_8 $$ if (i < oldParts.size() && StringUtil.equals(actualParts.get(i), oldParts.get(i))) [ FD ]
Line_4 $$ List<String> actualParts = getArrayParts(actual)-->Line_7 $$ for (int i = 0; i < actualParts.size(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < actualParts.size(); i++) -->Line_8 $$ if (i < oldParts.size() && StringUtil.equals(actualParts.get(i), oldParts.get(i))) [ CD ]
Line_3 $$ if (isArray(actual) && isArray(old)) -->Line_6 $$ result.add(new LineExtensionInfo("[ CD ]
Line_4 $$ List<String> actualParts = getArrayParts(actual)-->Line_9 $$ result.add(new LineExtensionInfo(actualParts.get(i), getNormalAttributes()))[ FD ]
Line_7 $$ for (int i = 0; i < actualParts.size(); i++) -->Line_11 $$ result.add(new LineExtensionInfo(actualParts.get(i), getChangedAttributes()))[ FD ]
Line_3 $$ if (isArray(actual) && isArray(old)) -->Line_5 $$ List<String> oldParts = getArrayParts(old)[ CD ]
Line_2 $$ public void produceChangedParts(List<LineExtensionInfo> result) -->Line_17 $$ result.add(new LineExtensionInfo("}", getNormalAttributes()))[ FD ]
Line_4 $$ List<String> actualParts = getArrayParts(actual)-->Line_11 $$ result.add(new LineExtensionInfo(actualParts.get(i), getChangedAttributes()))[ FD ]
Line_8 $$ if (i < oldParts.size() && StringUtil.equals(actualParts.get(i), oldParts.get(i))) -->Line_11 $$ result.add(new LineExtensionInfo(actualParts.get(i), getChangedAttributes()))[ CD ]
Line_5 $$ List<String> oldParts = getArrayParts(old)-->Line_8 $$ if (i < oldParts.size() && StringUtil.equals(actualParts.get(i), oldParts.get(i))) [ FD ]
Line_2 $$ public void produceChangedParts(List<LineExtensionInfo> result) -->Line_20 $$ result.add(new LineExtensionInfo(actual, getChangedAttributes()))[ FD ]
Line_4 $$ List<String> actualParts = getArrayParts(actual)-->Line_13 $$ if (i != actualParts.size() - 1) [ FD ]
Line_3 $$ if (isArray(actual) && isArray(old)) -->Line_17 $$ result.add(new LineExtensionInfo("}", getNormalAttributes()))[ CD ]
Line_3 $$ if (isArray(actual) && isArray(old)) -->Line_7 $$ for (int i = 0; i < actualParts.size(); i++) [ CD ]
Line_7 $$ for (int i = 0; i < actualParts.size(); i++) -->Line_13 $$ if (i != actualParts.size() - 1) [ CD ]
Line_2 $$ public void produceChangedParts(List<LineExtensionInfo> result) -->Line_6 $$ result.add(new LineExtensionInfo("[ FD ]
Line_2 $$ public void produceChangedParts(List<LineExtensionInfo> result) -->Line_14 $$ result.add(new LineExtensionInfo(", ", getNormalAttributes()))[ FD ]
Line_2 $$ public void produceChangedParts(List<LineExtensionInfo> result) -->Line_11 $$ result.add(new LineExtensionInfo(actualParts.get(i), getChangedAttributes()))[ FD ]
Line_2 $$ public void produceChangedParts(List<LineExtensionInfo> result) -->Line_20 $$ result.add(new LineExtensionInfo(actual, getChangedAttributes()))[ CD ]
Line_13 $$ if (i != actualParts.size() - 1) -->Line_14 $$ result.add(new LineExtensionInfo(", ", getNormalAttributes()))[ CD ]
Line_3 $$ if (isArray(actual) && isArray(old)) -->Line_18 $$ return[ CD ]
Line_3 $$ if (isArray(actual) && isArray(old)) -->Line_4 $$ List<String> actualParts = getArrayParts(actual)[ CD ]
