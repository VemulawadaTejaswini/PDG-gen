Line_4 $$ for (final Key each : ALL_TYPES) -->Line_13 $$ mySplitter.process(s, each)[ FD ]
Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000))-->Line_13 $$ mySplitter.process(s, each)[ FD ]
Line_14 $$ List<String> list = written.get(each)-->Line_15 $$ if (!list.isEmpty()) [ FD ]
Line_12 $$ s += "\n"-->Line_13 $$ mySplitter.process(s, each)[ FD ]
Line_11 $$ if (r.nextInt(1) == 1)-->Line_12 $$ s += "\n"[ CD ]
Line_9 $$ for (int i = 0; i < 1000; i++) -->Line_15 $$ if (!list.isEmpty()) [ CD ]
Line_6 $$ execute(new Runnable() -->Line_9 $$ for (int i = 0; i < 1000; i++) [ CD ]
Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000))-->Line_22 $$ list.add(s)[ FD ]
Line_14 $$ List<String> list = written.get(each)-->Line_18 $$ list.set(list.size() - 1, last + s)[ FD ]
Line_9 $$ for (int i = 0; i < 1000; i++) -->Line_14 $$ List<String> list = written.get(each)[ CD ]
Line_4 $$ for (final Key each : ALL_TYPES) -->Line_14 $$ List<String> list = written.get(each)[ FD ]
Line_9 $$ for (int i = 0; i < 1000; i++) -->Line_11 $$ if (r.nextInt(1) == 1)[ CD ]
Line_6 $$ execute(new Runnable() -->Line_8 $$ Random r = new Random()[ CD ]
Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000))-->Line_12 $$ s += "\n"[ FD ]
Line_15 $$ if (!list.isEmpty()) -->Line_17 $$ if (!last.endsWith("\n")) [ CD ]
Line_2 $$ public void testReadingSeveralStreams() throws Exception -->Line_3 $$ final Map<Key, List<String>> written = new ConcurrentHashMap<Key, List<String>>()[ CD ]
Line_2 $$ public void testReadingSeveralStreams() throws Exception -->Line_27 $$ mySplitter.flush()[ CD ]
Line_8 $$ Random r = new Random()-->Line_11 $$ if (r.nextInt(1) == 1)[ FD ]
Line_14 $$ List<String> list = written.get(each)-->Line_22 $$ list.add(s)[ FD ]
Line_3 $$ final Map<Key, List<String>> written = new ConcurrentHashMap<Key, List<String>>()-->Line_14 $$ List<String> list = written.get(each)[ FD ]
Line_15 $$ if (!list.isEmpty()) -->Line_16 $$ String last = list.get(list.size() - 1)[ CD ]
Line_9 $$ for (int i = 0; i < 1000; i++) -->Line_22 $$ list.add(s)[ CD ]
Line_9 $$ for (int i = 0; i < 1000; i++) -->Line_13 $$ mySplitter.process(s, each)[ CD ]
Line_16 $$ String last = list.get(list.size() - 1)-->Line_17 $$ if (!last.endsWith("\n")) [ FD ]
Line_3 $$ final Map<Key, List<String>> written = new ConcurrentHashMap<Key, List<String>>()-->Line_29 $$ assertOrderedEquals(myOutput.get(eachType), written.get(eachType))[ FD ]
Line_14 $$ List<String> list = written.get(each)-->Line_16 $$ String last = list.get(list.size() - 1)[ FD ]
Line_9 $$ for (int i = 0; i < 1000; i++) -->Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000))[ CD ]
Line_4 $$ for (final Key each : ALL_TYPES) -->Line_5 $$ written.put(each, new ArrayList<String>())[ FD ]
Line_8 $$ Random r = new Random()-->Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000))[ FD ]
Line_12 $$ s += "\n"-->Line_22 $$ list.add(s)[ FD ]
Line_3 $$ final Map<Key, List<String>> written = new ConcurrentHashMap<Key, List<String>>()-->Line_5 $$ written.put(each, new ArrayList<String>())[ FD ]
Line_17 $$ if (!last.endsWith("\n")) -->Line_18 $$ list.set(list.size() - 1, last + s)[ CD ]
