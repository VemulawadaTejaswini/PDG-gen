Line_45 $$ list2 = s.createQuery("from Foo foo where foo.date = ?").setParameter(0, new java.sql.Date(123), StandardBasicTypes.DATE).list()-->Line_46 $$ assertTrue("find by date", list2.size() == 4)[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_26 $$ assertTrue("class special property", list1.size() == 2)[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_39 $$ assertTrue("find size", list2.size() == 5)[ FD ]
Line_4 $$ Session s = openSession()-->Line_44 $$ doDelete(s, "from Trivial")[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_21 $$ assertTrue("class special property", list1.size() == 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_49 $$ s.delete(iter.next())[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_34 $$ list1 = s.createQuery("from Foo foo where foo.string='foo bar'").list()[ FD ]
Line_45 $$ list2 = s.createQuery("from Foo foo where foo.date = ?").setParameter(0, new java.sql.Date(123), StandardBasicTypes.DATE).list()-->Line_47 $$ Iterator iter = list2.iterator()[ FD ]
Line_51 $$ list2 = s.createQuery("from Foo foo").list()-->Line_52 $$ assertTrue("find deleted", list2.size() == 0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_22 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_42 $$ assertTrue("find same instance", list2.contains(list1.get(0)) && list2.contains(list2.get(0)))[ FD ]
Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()-->Line_45 $$ list2 = s.createQuery("from Foo foo where foo.date = ?").setParameter(0, new java.sql.Date(123), StandardBasicTypes.DATE).list()[ FD ]
Line_22 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_23 $$ assertTrue("class special property", list1.size() == 2)[ FD ]
Line_32 $$ s = openSession()-->Line_40 $$ List list3 = s.createQuery("from Bar bar where bar.barString='bar bar'").list()[ FD ]
Line_32 $$ s = openSession()-->Line_45 $$ list2 = s.createQuery("from Foo foo where foo.date = ?").setParameter(0, new java.sql.Date(123), StandardBasicTypes.DATE).list()[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_45 $$ list2 = s.createQuery("from Foo foo where foo.date = ?").setParameter(0, new java.sql.Date(123), StandardBasicTypes.DATE).list()[ FD ]
Line_28 $$ Trivial t = new Trivial()-->Line_29 $$ s.save(t)[ FD ]
Line_6 $$ Bar bar = new Bar()-->Line_7 $$ s.save(bar)[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()[ FD ]
Line_6 $$ Bar bar = new Bar()-->Line_8 $$ bar.setBarString("bar bar")[ FD ]
Line_48 $$ while (iter.hasNext()) -->Line_49 $$ s.delete(iter.next())[ CD ]
Line_4 $$ Session s = openSession()-->Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()[ FD ]
Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()-->Line_42 $$ assertTrue("find same instance", list2.contains(list1.get(0)) && list2.contains(list2.get(0)))[ FD ]
Line_45 $$ list2 = s.createQuery("from Foo foo where foo.date = ?").setParameter(0, new java.sql.Date(123), StandardBasicTypes.DATE).list()-->Line_52 $$ assertTrue("find deleted", list2.size() == 0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_29 $$ s.save(t)[ FD ]
Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()-->Line_22 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_13 $$ s.save(new Foo())[ FD ]
Line_5 $$ Transaction txn = s.beginTransaction()-->Line_30 $$ txn.commit()[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_23 $$ assertTrue("class special property", list1.size() == 2)[ FD ]
Line_10 $$ Foo foo = new Foo()-->Line_11 $$ s.save(foo)[ FD ]
Line_4 $$ Session s = openSession()-->Line_32 $$ s = openSession()[ FD ]
Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()-->Line_46 $$ assertTrue("find by date", list2.size() == 4)[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_42 $$ assertTrue("find same instance", list2.contains(list1.get(0)) && list2.contains(list2.get(0)))[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_54 $$ s.close()[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_27 $$ assertTrue("select from a subclass", list2.size() == 1)[ FD ]
Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()-->Line_42 $$ assertTrue("find same instance", list2.contains(list1.get(0)) && list2.contains(list2.get(0)))[ FD ]
Line_22 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_35 $$ assertTrue("find size", list1.size() == 1)[ FD ]
Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()-->Line_52 $$ assertTrue("find deleted", list2.size() == 0)[ FD ]
Line_24 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_35 $$ assertTrue("find size", list1.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_7 $$ s.save(bar)[ FD ]
Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()-->Line_52 $$ assertTrue("find deleted", list2.size() == 0)[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_17 $$ assertTrue("find ==", list1.get(0) == foo)[ FD ]
Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()-->Line_39 $$ assertTrue("find size", list2.size() == 5)[ FD ]
Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()-->Line_47 $$ Iterator iter = list2.iterator()[ FD ]
Line_4 $$ Session s = openSession()-->Line_24 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_35 $$ assertTrue("find size", list1.size() == 1)[ FD ]
Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()-->Line_51 $$ list2 = s.createQuery("from Foo foo").list()[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_52 $$ assertTrue("find deleted", list2.size() == 0)[ FD ]
Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()-->Line_34 $$ list1 = s.createQuery("from Foo foo where foo.string='foo bar'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_51 $$ list2 = s.createQuery("from Foo foo").list()[ FD ]
Line_22 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_26 $$ assertTrue("class special property", list1.size() == 2)[ FD ]
Line_22 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_34 $$ list1 = s.createQuery("from Foo foo where foo.string='foo bar'").list()[ FD ]
Line_32 $$ s = openSession()-->Line_33 $$ txn = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_11 $$ s.save(foo)[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_22 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_42 $$ assertTrue("find same instance", list2.contains(list1.get(0)) && list2.contains(list2.get(0)))[ FD ]
Line_6 $$ Bar bar = new Bar()-->Line_9 $$ bar.setString("xxx")[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_46 $$ assertTrue("find by date", list2.size() == 4)[ FD ]
Line_32 $$ s = openSession()-->Line_51 $$ list2 = s.createQuery("from Foo foo").list()[ FD ]
Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()-->Line_24 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_31 $$ s.close()[ FD ]
Line_34 $$ list1 = s.createQuery("from Foo foo where foo.string='foo bar'").list()-->Line_35 $$ assertTrue("find size", list1.size() == 1)[ FD ]
Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()-->Line_47 $$ Iterator iter = list2.iterator()[ FD ]
Line_4 $$ Session s = openSession()-->Line_45 $$ list2 = s.createQuery("from Foo foo where foo.date = ?").setParameter(0, new java.sql.Date(123), StandardBasicTypes.DATE).list()[ FD ]
Line_32 $$ s = openSession()-->Line_34 $$ list1 = s.createQuery("from Foo foo where foo.string='foo bar'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_14 $$ s.save(new Bar())[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_47 $$ Iterator iter = list2.iterator()[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_22 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_34 $$ list1 = s.createQuery("from Foo foo where foo.string='foo bar'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_40 $$ List list3 = s.createQuery("from Bar bar where bar.barString='bar bar'").list()[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_24 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()[ FD ]
Line_32 $$ s = openSession()-->Line_49 $$ s.delete(iter.next())[ FD ]
Line_32 $$ s = openSession()-->Line_44 $$ doDelete(s, "from Trivial")[ FD ]
Line_10 $$ Foo foo = new Foo()-->Line_12 $$ foo.setString("foo bar")[ FD ]
Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()-->Line_51 $$ list2 = s.createQuery("from Foo foo").list()[ FD ]
Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()-->Line_35 $$ assertTrue("find size", list1.size() == 1)[ FD ]
Line_47 $$ Iterator iter = list2.iterator()-->Line_48 $$ while (iter.hasNext()) [ FD ]
Line_4 $$ Session s = openSession()-->Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()[ FD ]
Line_32 $$ s = openSession()-->Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()[ FD ]
Line_24 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_26 $$ assertTrue("class special property", list1.size() == 2)[ FD ]
Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()-->Line_42 $$ assertTrue("find same instance", list2.contains(list1.get(0)) && list2.contains(list2.get(0)))[ FD ]
Line_5 $$ Transaction txn = s.beginTransaction()-->Line_33 $$ txn = s.beginTransaction()[ FD ]
Line_40 $$ List list3 = s.createQuery("from Bar bar where bar.barString='bar bar'").list()-->Line_41 $$ assertTrue("find size", list3.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()[ FD ]
Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()-->Line_26 $$ assertTrue("class special property", list1.size() == 2)[ FD ]
Line_22 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_24 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()[ FD ]
Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()-->Line_46 $$ assertTrue("find by date", list2.size() == 4)[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_51 $$ list2 = s.createQuery("from Foo foo").list()[ FD ]
Line_24 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_42 $$ assertTrue("find same instance", list2.contains(list1.get(0)) && list2.contains(list2.get(0)))[ FD ]
Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()-->Line_16 $$ assertTrue("find size", list1.size() == 1)[ FD ]
Line_32 $$ s = openSession()-->Line_43 $$ assertTrue(s.createQuery("from Trivial").list().size() == 1)[ FD ]
Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()-->Line_21 $$ assertTrue("class special property", list1.size() == 2)[ FD ]
Line_45 $$ list2 = s.createQuery("from Foo foo where foo.date = ?").setParameter(0, new java.sql.Date(123), StandardBasicTypes.DATE).list()-->Line_51 $$ list2 = s.createQuery("from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_33 $$ txn = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_15 $$ List list1 = s.createQuery("select foo from Foo foo where foo.string='foo bar'").list()[ FD ]
Line_33 $$ txn = s.beginTransaction()-->Line_53 $$ txn.commit()[ FD ]
Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()-->Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_43 $$ assertTrue(s.createQuery("from Trivial").list().size() == 1)[ FD ]
Line_34 $$ list1 = s.createQuery("from Foo foo where foo.string='foo bar'").list()-->Line_42 $$ assertTrue("find same instance", list2.contains(list1.get(0)) && list2.contains(list2.get(0)))[ FD ]
Line_5 $$ Transaction txn = s.beginTransaction()-->Line_53 $$ txn.commit()[ FD ]
Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()-->Line_27 $$ assertTrue("select from a subclass", list2.size() == 1)[ FD ]
Line_32 $$ s = openSession()-->Line_54 $$ s.close()[ FD ]
Line_24 $$ list1 = s.createQuery("from Foo foo where foo.class=Bar").list()-->Line_34 $$ list1 = s.createQuery("from Foo foo where foo.string='foo bar'").list()[ FD ]
Line_18 $$ List list2 = s.createQuery("from Foo foo order by foo.string, foo.date").list()-->Line_19 $$ assertTrue("find size", list2.size() == 4)[ FD ]
Line_20 $$ list1 = s.createQuery("from Foo foo where foo.class='B'").list()-->Line_23 $$ assertTrue("class special property", list1.size() == 2)[ FD ]
Line_47 $$ Iterator iter = list2.iterator()-->Line_49 $$ s.delete(iter.next())[ FD ]
Line_38 $$ list2 = s.createQuery("select foo from Foo foo").list()-->Line_45 $$ list2 = s.createQuery("from Foo foo where foo.date = ?").setParameter(0, new java.sql.Date(123), StandardBasicTypes.DATE).list()[ FD ]
Line_25 $$ list2 = s.createQuery("select bar from Bar bar, Foo foo where bar.string = foo.string and not bar=foo").list()-->Line_39 $$ assertTrue("find size", list2.size() == 5)[ FD ]
