Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_5 $$ for (int i = 0; i < exports.size(); i++) [ FD ]
Line_5 $$ for (int i = 0; i < exports.size(); i++) -->Line_15 $$ xdr.writeBoolean(false)[ CD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_17 $$ xdr.writeBoolean(false)[ CD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_12 $$ xdr.writeVariableOpaque(hostGroups[j].getBytes())[ FD ]
Line_5 $$ for (int i = 0; i < exports.size(); i++) -->Line_7 $$ xdr.writeString(exports.get(i))[ FD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_8 $$ String[] hostGroups = hostMatcher.get(i).getHostGroupList()[ FD ]
Line_5 $$ for (int i = 0; i < exports.size(); i++) -->Line_8 $$ String[] hostGroups = hostMatcher.get(i).getHostGroupList()[ FD ]
Line_10 $$ for (int j = 0; j < hostGroups.length; j++) -->Line_11 $$ xdr.writeBoolean(true)[ CD ]
Line_5 $$ for (int i = 0; i < exports.size(); i++) -->Line_6 $$ xdr.writeBoolean(true)[ CD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_6 $$ xdr.writeBoolean(true)[ FD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_15 $$ xdr.writeBoolean(false)[ FD ]
Line_9 $$ if (hostGroups.length > 0) -->Line_10 $$ for (int j = 0; j < hostGroups.length; j++) [ CD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_3 $$ assert (exports.size() == hostMatcher.size())[ FD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_7 $$ xdr.writeString(exports.get(i))[ FD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_4 $$ RpcAcceptedReply.getAcceptInstance(xid, new VerifierNone()).write(xdr)[ CD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_5 $$ for (int i = 0; i < exports.size(); i++) [ CD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_17 $$ xdr.writeBoolean(false)[ FD ]
Line_5 $$ for (int i = 0; i < exports.size(); i++) -->Line_8 $$ String[] hostGroups = hostMatcher.get(i).getHostGroupList()[ CD ]
Line_10 $$ for (int j = 0; j < hostGroups.length; j++) -->Line_12 $$ xdr.writeVariableOpaque(hostGroups[j].getBytes())[ CD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_4 $$ RpcAcceptedReply.getAcceptInstance(xid, new VerifierNone()).write(xdr)[ FD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_11 $$ xdr.writeBoolean(true)[ FD ]
Line_2 $$ public static XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher) -->Line_18 $$ return xdr[ CD ]
Line_5 $$ for (int i = 0; i < exports.size(); i++) -->Line_7 $$ xdr.writeString(exports.get(i))[ CD ]
Line_5 $$ for (int i = 0; i < exports.size(); i++) -->Line_9 $$ if (hostGroups.length > 0) [ CD ]
