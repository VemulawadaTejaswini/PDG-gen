Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() -->Line_22 $$ return index1.compareTo(index2)[ CD ]
Line_18 $$ Integer index1 = groupOrder.indexOf(group1)-->Line_22 $$ return index1.compareTo(index2)[ FD ]
Line_4 $$ List<BooleanOptionKey> result = new ArrayList<BooleanOptionKey>(options.size())-->Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() [ FD ]
Line_2 $$ private List<BooleanOptionKey> orderByGroup(final List<BooleanOptionKey> options) -->Line_25 $$ return result[ CD ]
Line_2 $$ private List<BooleanOptionKey> orderByGroup(final List<BooleanOptionKey> options) -->Line_4 $$ List<BooleanOptionKey> result = new ArrayList<BooleanOptionKey>(options.size())[ CD ]
Line_19 $$ Integer index2 = groupOrder.indexOf(group2)-->Line_22 $$ return index1.compareTo(index2)[ FD ]
Line_10 $$ String group1 = key1.groupName-->Line_12 $$ if (group1 == null) [ FD ]
Line_2 $$ private List<BooleanOptionKey> orderByGroup(final List<BooleanOptionKey> options) -->Line_4 $$ List<BooleanOptionKey> result = new ArrayList<BooleanOptionKey>(options.size())[ FD ]
Line_10 $$ String group1 = key1.groupName-->Line_21 $$ return group1.compareToIgnoreCase(group2)[ FD ]
Line_12 $$ if (group1 == null) -->Line_13 $$ return group2 == null ? 0 : 1[ CD ]
Line_2 $$ private List<BooleanOptionKey> orderByGroup(final List<BooleanOptionKey> options) -->Line_3 $$ final List<String> groupOrder = getGroupOrder(options)[ FD ]
Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() -->Line_11 $$ String group2 = key2.groupName[ CD ]
Line_2 $$ private List<BooleanOptionKey> orderByGroup(final List<BooleanOptionKey> options) -->Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() [ CD ]
Line_10 $$ String group1 = key1.groupName-->Line_18 $$ Integer index1 = groupOrder.indexOf(group1)[ FD ]
Line_2 $$ private List<BooleanOptionKey> orderByGroup(final List<BooleanOptionKey> options) -->Line_5 $$ result.addAll(options)[ CD ]
Line_3 $$ final List<String> groupOrder = getGroupOrder(options)-->Line_19 $$ Integer index2 = groupOrder.indexOf(group2)[ FD ]
Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() -->Line_10 $$ String group1 = key1.groupName[ CD ]
Line_2 $$ private List<BooleanOptionKey> orderByGroup(final List<BooleanOptionKey> options) -->Line_3 $$ final List<String> groupOrder = getGroupOrder(options)[ CD ]
Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() -->Line_18 $$ Integer index1 = groupOrder.indexOf(group1)[ CD ]
Line_11 $$ String group2 = key2.groupName-->Line_21 $$ return group1.compareToIgnoreCase(group2)[ FD ]
Line_15 $$ if (group2 == null) -->Line_16 $$ return -1[ CD ]
Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() -->Line_19 $$ Integer index2 = groupOrder.indexOf(group2)[ CD ]
Line_20 $$ if (index1 == -1 || index2 == -1)-->Line_21 $$ return group1.compareToIgnoreCase(group2)[ CD ]
Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() -->Line_15 $$ if (group2 == null) [ CD ]
Line_11 $$ String group2 = key2.groupName-->Line_19 $$ Integer index2 = groupOrder.indexOf(group2)[ FD ]
Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() -->Line_20 $$ if (index1 == -1 || index2 == -1)[ CD ]
Line_4 $$ List<BooleanOptionKey> result = new ArrayList<BooleanOptionKey>(options.size())-->Line_5 $$ result.addAll(options)[ FD ]
Line_6 $$ Collections.sort(result, new Comparator<BooleanOptionKey>() -->Line_12 $$ if (group1 == null) [ CD ]
Line_11 $$ String group2 = key2.groupName-->Line_15 $$ if (group2 == null) [ FD ]
Line_2 $$ private List<BooleanOptionKey> orderByGroup(final List<BooleanOptionKey> options) -->Line_5 $$ result.addAll(options)[ FD ]
Line_3 $$ final List<String> groupOrder = getGroupOrder(options)-->Line_18 $$ Integer index1 = groupOrder.indexOf(group1)[ FD ]
