Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_11 $$ messageRoutingBag.appendRoutingId(routingId2)[ CD ]
Line_8 $$ String routingId1 = "routingId1"-->Line_22 $$ Assert.assertEquals(routingId1, routingTrace.get(0))[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_19 $$ Assert.assertEquals(routingDowncast, newMessageRoutingBag.isRoutingDowncast())[ CD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_30 $$ Assert.assertNull(ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_messageData"))[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_30 $$ Assert.assertNull(ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_messageData"))[ CD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_24 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId1))[ FD ]
Line_20 $$ List<String> routingTrace = ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_routingTrace")-->Line_22 $$ Assert.assertEquals(routingId1, routingTrace.get(0))[ FD ]
Line_28 $$ Message newMessage = newMessageRoutingBag.getMessage()-->Line_29 $$ Assert.assertNotNull(newMessage)[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_7 $$ MessageRoutingBag messageRoutingBag = new MessageRoutingBag(message, synchronizedBridge)[ CD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_25 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId2))[ FD ]
Line_7 $$ MessageRoutingBag messageRoutingBag = new MessageRoutingBag(message, synchronizedBridge)-->Line_13 $$ messageRoutingBag.setRoutingDowncast(routingDowncast)[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_4 $$ String destinationName = "destinationName"[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_26 $$ Assert.assertFalse(newMessageRoutingBag.isVisited("routingId3"))[ CD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_19 $$ Assert.assertEquals(routingDowncast, newMessageRoutingBag.isRoutingDowncast())[ FD ]
Line_14 $$ byte[] bytes = messageRoutingBag.toByteArray()-->Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)[ FD ]
Line_10 $$ String routingId2 = "routingId2"-->Line_11 $$ messageRoutingBag.appendRoutingId(routingId2)[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_8 $$ String routingId1 = "routingId1"[ CD ]
Line_6 $$ boolean synchronizedBridge = false-->Line_27 $$ Assert.assertEquals(synchronizedBridge, newMessageRoutingBag.isSynchronizedBridge())[ FD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_31 $$ Assert.assertSame(newMessage, newMessageRoutingBag.getMessage())[ FD ]
Line_8 $$ String routingId1 = "routingId1"-->Line_24 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId1))[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_27 $$ Assert.assertEquals(synchronizedBridge, newMessageRoutingBag.isSynchronizedBridge())[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_10 $$ String routingId2 = "routingId2"[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_17 $$ Assert.assertNull(ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_message"))[ CD ]
Line_7 $$ MessageRoutingBag messageRoutingBag = new MessageRoutingBag(message, synchronizedBridge)-->Line_14 $$ byte[] bytes = messageRoutingBag.toByteArray()[ FD ]
Line_4 $$ String destinationName = "destinationName"-->Line_16 $$ Assert.assertEquals(destinationName, newMessageRoutingBag.getDestinationName())[ FD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_16 $$ Assert.assertEquals(destinationName, newMessageRoutingBag.getDestinationName())[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_18 $$ Assert.assertNotNull(newMessageRoutingBag.getMessageData())[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_23 $$ Assert.assertEquals(routingId2, routingTrace.get(1))[ CD ]
Line_10 $$ String routingId2 = "routingId2"-->Line_23 $$ Assert.assertEquals(routingId2, routingTrace.get(1))[ FD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_28 $$ Message newMessage = newMessageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_22 $$ Assert.assertEquals(routingId1, routingTrace.get(0))[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_6 $$ boolean synchronizedBridge = false[ CD ]
Line_20 $$ List<String> routingTrace = ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_routingTrace")-->Line_21 $$ Assert.assertEquals(2, routingTrace.size())[ FD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_18 $$ Assert.assertNotNull(newMessageRoutingBag.getMessageData())[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_24 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId1))[ CD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_27 $$ Assert.assertEquals(synchronizedBridge, newMessageRoutingBag.isSynchronizedBridge())[ FD ]
Line_3 $$ Message message = new Message()-->Line_5 $$ message.setDestinationName(destinationName)[ FD ]
Line_28 $$ Message newMessage = newMessageRoutingBag.getMessage()-->Line_31 $$ Assert.assertSame(newMessage, newMessageRoutingBag.getMessage())[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_13 $$ messageRoutingBag.setRoutingDowncast(routingDowncast)[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_16 $$ Assert.assertEquals(destinationName, newMessageRoutingBag.getDestinationName())[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_25 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId2))[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_5 $$ message.setDestinationName(destinationName)[ CD ]
Line_20 $$ List<String> routingTrace = ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_routingTrace")-->Line_23 $$ Assert.assertEquals(routingId2, routingTrace.get(1))[ FD ]
Line_10 $$ String routingId2 = "routingId2"-->Line_25 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId2))[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_3 $$ Message message = new Message()[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_29 $$ Assert.assertNotNull(newMessage)[ CD ]
Line_4 $$ String destinationName = "destinationName"-->Line_5 $$ message.setDestinationName(destinationName)[ FD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_26 $$ Assert.assertFalse(newMessageRoutingBag.isVisited("routingId3"))[ FD ]
Line_8 $$ String routingId1 = "routingId1"-->Line_9 $$ messageRoutingBag.appendRoutingId(routingId1)[ FD ]
Line_7 $$ MessageRoutingBag messageRoutingBag = new MessageRoutingBag(message, synchronizedBridge)-->Line_9 $$ messageRoutingBag.appendRoutingId(routingId1)[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_9 $$ messageRoutingBag.appendRoutingId(routingId1)[ CD ]
Line_12 $$ boolean routingDowncast = true-->Line_19 $$ Assert.assertEquals(routingDowncast, newMessageRoutingBag.isRoutingDowncast())[ FD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_20 $$ List<String> routingTrace = ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_routingTrace")[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_28 $$ Message newMessage = newMessageRoutingBag.getMessage()[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_31 $$ Assert.assertSame(newMessage, newMessageRoutingBag.getMessage())[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_21 $$ Assert.assertEquals(2, routingTrace.size())[ CD ]
Line_15 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_17 $$ Assert.assertNull(ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_message"))[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_14 $$ byte[] bytes = messageRoutingBag.toByteArray()[ CD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_20 $$ List<String> routingTrace = ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_routingTrace")[ CD ]
Line_12 $$ boolean routingDowncast = true-->Line_13 $$ messageRoutingBag.setRoutingDowncast(routingDowncast)[ FD ]
Line_7 $$ MessageRoutingBag messageRoutingBag = new MessageRoutingBag(message, synchronizedBridge)-->Line_11 $$ messageRoutingBag.appendRoutingId(routingId2)[ FD ]
Line_2 $$ public void testManualSerialization() throws ClassNotFoundException -->Line_12 $$ boolean routingDowncast = true[ CD ]
