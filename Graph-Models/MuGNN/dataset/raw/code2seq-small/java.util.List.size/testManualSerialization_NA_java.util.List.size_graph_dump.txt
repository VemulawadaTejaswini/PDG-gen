Line_11 $$ String routingId2 = "routingId2"-->Line_12 $$ messageRoutingBag.appendRoutingId(routingId2)[ FD ]
Line_15 $$ byte[] bytes = messageRoutingBag.toByteArray()-->Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_20 $$ Assert.assertEquals(routingDowncast, newMessageRoutingBag.isRoutingDowncast())[ FD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = new MessageRoutingBag(message, synchronizedBridge)-->Line_14 $$ messageRoutingBag.setRoutingDowncast(routingDowncast)[ FD ]
Line_5 $$ String destinationName = "destinationName"-->Line_17 $$ Assert.assertEquals(destinationName, newMessageRoutingBag.getDestinationName())[ FD ]
Line_7 $$ boolean synchronizedBridge = false-->Line_28 $$ Assert.assertEquals(synchronizedBridge, newMessageRoutingBag.isSynchronizedBridge())[ FD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = new MessageRoutingBag(message, synchronizedBridge)-->Line_10 $$ messageRoutingBag.appendRoutingId(routingId1)[ FD ]
Line_5 $$ String destinationName = "destinationName"-->Line_6 $$ message.setDestinationName(destinationName)[ FD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = new MessageRoutingBag(message, synchronizedBridge)-->Line_15 $$ byte[] bytes = messageRoutingBag.toByteArray()[ FD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = new MessageRoutingBag(message, synchronizedBridge)-->Line_12 $$ messageRoutingBag.appendRoutingId(routingId2)[ FD ]
Line_13 $$ boolean routingDowncast = true-->Line_20 $$ Assert.assertEquals(routingDowncast, newMessageRoutingBag.isRoutingDowncast())[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_29 $$ Message newMessage = newMessageRoutingBag.getMessage()[ FD ]
Line_21 $$ List<String> routingTrace = ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_routingTrace")-->Line_22 $$ Assert.assertEquals(2, routingTrace.size())[ FD ]
Line_21 $$ List<String> routingTrace = ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_routingTrace")-->Line_24 $$ Assert.assertEquals(routingId2, routingTrace.get(1))[ FD ]
Line_29 $$ Message newMessage = newMessageRoutingBag.getMessage()-->Line_30 $$ Assert.assertNotNull(newMessage)[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_18 $$ Assert.assertNull(ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_message"))[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_31 $$ Assert.assertNull(ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_messageData"))[ FD ]
Line_29 $$ Message newMessage = newMessageRoutingBag.getMessage()-->Line_32 $$ Assert.assertSame(newMessage, newMessageRoutingBag.getMessage())[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_32 $$ Assert.assertSame(newMessage, newMessageRoutingBag.getMessage())[ FD ]
Line_4 $$ Message message = new Message()-->Line_6 $$ message.setDestinationName(destinationName)[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_27 $$ Assert.assertFalse(newMessageRoutingBag.isVisited("routingId3"))[ FD ]
Line_13 $$ boolean routingDowncast = true-->Line_14 $$ messageRoutingBag.setRoutingDowncast(routingDowncast)[ FD ]
Line_9 $$ String routingId1 = "routingId1"-->Line_25 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId1))[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_21 $$ List<String> routingTrace = ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_routingTrace")[ FD ]
Line_11 $$ String routingId2 = "routingId2"-->Line_24 $$ Assert.assertEquals(routingId2, routingTrace.get(1))[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_19 $$ Assert.assertNotNull(newMessageRoutingBag.getMessageData())[ FD ]
Line_11 $$ String routingId2 = "routingId2"-->Line_26 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId2))[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_25 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId1))[ FD ]
Line_9 $$ String routingId1 = "routingId1"-->Line_23 $$ Assert.assertEquals(routingId1, routingTrace.get(0))[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_28 $$ Assert.assertEquals(synchronizedBridge, newMessageRoutingBag.isSynchronizedBridge())[ FD ]
Line_21 $$ List<String> routingTrace = ReflectionTestUtil.getFieldValue(newMessageRoutingBag, "_routingTrace")-->Line_23 $$ Assert.assertEquals(routingId1, routingTrace.get(0))[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_26 $$ Assert.assertTrue(newMessageRoutingBag.isVisited(routingId2))[ FD ]
Line_16 $$ MessageRoutingBag newMessageRoutingBag = MessageRoutingBag.fromByteArray(bytes)-->Line_17 $$ Assert.assertEquals(destinationName, newMessageRoutingBag.getDestinationName())[ FD ]
Line_9 $$ String routingId1 = "routingId1"-->Line_10 $$ messageRoutingBag.appendRoutingId(routingId1)[ FD ]
