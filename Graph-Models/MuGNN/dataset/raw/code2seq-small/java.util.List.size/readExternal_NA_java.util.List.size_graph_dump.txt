Line_20 $$ final Element scopeElement = (Element) sO-->Line_31 $$ final String enabledInScope = scopeElement.getAttributeValue(ENABLED_ATTRIBUTE)[ FD ]
Line_26 $$ NamedScope namedScope = null-->Line_41 $$ if (namedScope != null) [ FD ]
Line_50 $$ List<String> order = dependencies.get(scopeName)-->Line_56 $$ order.add(scopeNames.get(j))[ FD ]
Line_28 $$ namedScope = scopesHolder.getScope(scopeName)-->Line_42 $$ addTool(namedScope, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_61 $$ toolWrapper.getTool().readSettings(toolElement)[ FD ]
Line_16 $$ final InspectionToolWrapper toolWrapper = myDefaultState.getTool()-->Line_61 $$ toolWrapper.getTool().readSettings(toolElement)[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_4 $$ final ProfileManager profileManager = profile.getProfileManager()[ FD ]
Line_21 $$ final String scopeName = scopeElement.getAttributeValue(ProfileEx.NAME)-->Line_22 $$ if (scopeName == null) [ FD ]
Line_32 $$ final InspectionToolWrapper copyToolWrapper = toolWrapper.createCopy()-->Line_35 $$ copyToolWrapper.getTool().readSettings(scopeElement)[ FD ]
Line_30 $$ final String errorLevel = scopeElement.getAttributeValue(LEVEL_ATTRIBUTE)-->Line_37 $$ HighlightDisplayLevel scopeLevel = errorLevel != null ? HighlightDisplayLevel.find(registrar.getSeverity(errorLevel)) : null[ FD ]
Line_48 $$ for (int i = 0; i < scopeNames.size(); i++) -->Line_55 $$ for (int j = i + 1; j < scopeNames.size(); j++) [ CD ]
Line_20 $$ final Element scopeElement = (Element) sO-->Line_21 $$ final String scopeName = scopeElement.getAttributeValue(ProfileEx.NAME)[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_11 $$ myDefaultState.setLevel(level)[ CD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_7 $$ if (level == null || level == HighlightDisplayLevel.DO_NOT_SHOW) [ CD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_50 $$ List<String> order = dependencies.get(scopeName)[ FD ]
Line_32 $$ final InspectionToolWrapper copyToolWrapper = toolWrapper.createCopy()-->Line_42 $$ addTool(namedScope, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_13 $$ final boolean isEnabled = enabled != null && Boolean.parseBoolean(enabled)[ CD ]
Line_27 $$ if (scopesHolder != null) -->Line_28 $$ namedScope = scopesHolder.getScope(scopeName)[ CD ]
Line_49 $$ String scopeName = scopeNames.get(i)-->Line_53 $$ dependencies.put(scopeName, order)[ FD ]
Line_48 $$ for (int i = 0; i < scopeNames.size(); i++) -->Line_49 $$ String scopeName = scopeNames.get(i)[ CD ]
Line_21 $$ final String scopeName = scopeElement.getAttributeValue(ProfileEx.NAME)-->Line_53 $$ dependencies.put(scopeName, order)[ FD ]
Line_37 $$ HighlightDisplayLevel scopeLevel = errorLevel != null ? HighlightDisplayLevel.find(registrar.getSeverity(errorLevel)) : null-->Line_38 $$ if (scopeLevel == null) [ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_3 $$ final String levelName = toolElement.getAttributeValue(LEVEL_ATTRIBUTE)[ CD ]
Line_39 $$ scopeLevel = level-->Line_42 $$ addTool(namedScope, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_37 $$ HighlightDisplayLevel scopeLevel = errorLevel != null ? HighlightDisplayLevel.find(registrar.getSeverity(errorLevel)) : null-->Line_44 $$ addTool(scopeName, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_38 $$ if (scopeLevel == null) -->Line_39 $$ scopeLevel = level[ CD ]
Line_55 $$ for (int j = i + 1; j < scopeNames.size(); j++) -->Line_56 $$ order.add(scopeNames.get(j))[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_5 $$ final SeverityRegistrar registrar = ((SeverityProvider) profileManager).getOwnSeverityRegistrar()[ CD ]
Line_26 $$ NamedScope namedScope = null-->Line_28 $$ namedScope = scopesHolder.getScope(scopeName)[ FD ]
Line_52 $$ order = new ArrayList<String>()-->Line_51 $$ if (order == null) [ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_17 $$ final List scopeElements = toolElement.getChildren(ProfileEx.SCOPE)[ CD ]
Line_18 $$ final List<String> scopeNames = new ArrayList<String>()-->Line_48 $$ for (int i = 0; i < scopeNames.size(); i++) [ FD ]
Line_48 $$ for (int i = 0; i < scopeNames.size(); i++) -->Line_50 $$ List<String> order = dependencies.get(scopeName)[ CD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_15 $$ myDefaultState.setEnabled(enabledTool != null ? Boolean.parseBoolean(enabledTool) : isEnabled)[ CD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_12 $$ final String enabled = toolElement.getAttributeValue(ENABLED_ATTRIBUTE)[ CD ]
Line_41 $$ if (namedScope != null) -->Line_44 $$ addTool(scopeName, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ CD ]
Line_39 $$ scopeLevel = level-->Line_44 $$ addTool(scopeName, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_3 $$ final String levelName = toolElement.getAttributeValue(LEVEL_ATTRIBUTE)[ FD ]
Line_5 $$ final SeverityRegistrar registrar = ((SeverityProvider) profileManager).getOwnSeverityRegistrar()-->Line_6 $$ HighlightDisplayLevel level = levelName != null ? HighlightDisplayLevel.find(registrar.getSeverity(levelName)) : null[ FD ]
Line_48 $$ for (int i = 0; i < scopeNames.size(); i++) -->Line_51 $$ if (order == null) [ CD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_48 $$ for (int i = 0; i < scopeNames.size(); i++) [ CD ]
Line_31 $$ final String enabledInScope = scopeElement.getAttributeValue(ENABLED_ATTRIBUTE)-->Line_44 $$ addTool(scopeName, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_17 $$ final List scopeElements = toolElement.getChildren(ProfileEx.SCOPE)[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_12 $$ final String enabled = toolElement.getAttributeValue(ENABLED_ATTRIBUTE)[ FD ]
Line_21 $$ final String scopeName = scopeElement.getAttributeValue(ProfileEx.NAME)-->Line_46 $$ scopeNames.add(scopeName)[ FD ]
Line_6 $$ HighlightDisplayLevel level = levelName != null ? HighlightDisplayLevel.find(registrar.getSeverity(levelName)) : null-->Line_39 $$ scopeLevel = level[ FD ]
Line_28 $$ namedScope = scopesHolder.getScope(scopeName)-->Line_41 $$ if (namedScope != null) [ FD ]
Line_20 $$ final Element scopeElement = (Element) sO-->Line_30 $$ final String errorLevel = scopeElement.getAttributeValue(LEVEL_ATTRIBUTE)[ FD ]
Line_18 $$ final List<String> scopeNames = new ArrayList<String>()-->Line_49 $$ String scopeName = scopeNames.get(i)[ FD ]
Line_14 $$ final String enabledTool = toolElement.getAttributeValue(ENABLED_BY_DEFAULT_ATTRIBUTE)-->Line_15 $$ myDefaultState.setEnabled(enabledTool != null ? Boolean.parseBoolean(enabledTool) : isEnabled)[ FD ]
Line_21 $$ final String scopeName = scopeElement.getAttributeValue(ProfileEx.NAME)-->Line_50 $$ List<String> order = dependencies.get(scopeName)[ FD ]
Line_50 $$ List<String> order = dependencies.get(scopeName)-->Line_52 $$ order = new ArrayList<String>()[ FD ]
Line_48 $$ for (int i = 0; i < scopeNames.size(); i++) -->Line_49 $$ String scopeName = scopeNames.get(i)[ FD ]
Line_18 $$ final List<String> scopeNames = new ArrayList<String>()-->Line_56 $$ order.add(scopeNames.get(j))[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_4 $$ final ProfileManager profileManager = profile.getProfileManager()[ CD ]
Line_3 $$ final String levelName = toolElement.getAttributeValue(LEVEL_ATTRIBUTE)-->Line_6 $$ HighlightDisplayLevel level = levelName != null ? HighlightDisplayLevel.find(registrar.getSeverity(levelName)) : null[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_6 $$ HighlightDisplayLevel level = levelName != null ? HighlightDisplayLevel.find(registrar.getSeverity(levelName)) : null[ CD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_14 $$ final String enabledTool = toolElement.getAttributeValue(ENABLED_BY_DEFAULT_ATTRIBUTE)[ FD ]
Line_5 $$ final SeverityRegistrar registrar = ((SeverityProvider) profileManager).getOwnSeverityRegistrar()-->Line_37 $$ HighlightDisplayLevel scopeLevel = errorLevel != null ? HighlightDisplayLevel.find(registrar.getSeverity(errorLevel)) : null[ FD ]
Line_50 $$ List<String> order = dependencies.get(scopeName)-->Line_53 $$ dependencies.put(scopeName, order)[ FD ]
Line_12 $$ final String enabled = toolElement.getAttributeValue(ENABLED_ATTRIBUTE)-->Line_13 $$ final boolean isEnabled = enabled != null && Boolean.parseBoolean(enabled)[ FD ]
Line_52 $$ order = new ArrayList<String>()-->Line_53 $$ dependencies.put(scopeName, order)[ FD ]
Line_4 $$ final ProfileManager profileManager = profile.getProfileManager()-->Line_25 $$ final NamedScopesHolder scopesHolder = profileManager.getScopesManager()[ FD ]
Line_55 $$ for (int j = i + 1; j < scopeNames.size(); j++) -->Line_56 $$ order.add(scopeNames.get(j))[ CD ]
Line_26 $$ NamedScope namedScope = null-->Line_42 $$ addTool(namedScope, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_25 $$ final NamedScopesHolder scopesHolder = profileManager.getScopesManager()-->Line_27 $$ if (scopesHolder != null) [ FD ]
Line_50 $$ List<String> order = dependencies.get(scopeName)-->Line_51 $$ if (order == null) [ FD ]
Line_21 $$ final String scopeName = scopeElement.getAttributeValue(ProfileEx.NAME)-->Line_44 $$ addTool(scopeName, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_41 $$ if (namedScope != null) -->Line_42 $$ addTool(namedScope, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ CD ]
Line_18 $$ final List<String> scopeNames = new ArrayList<String>()-->Line_46 $$ scopeNames.add(scopeName)[ FD ]
Line_37 $$ HighlightDisplayLevel scopeLevel = errorLevel != null ? HighlightDisplayLevel.find(registrar.getSeverity(errorLevel)) : null-->Line_42 $$ addTool(namedScope, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_16 $$ final InspectionToolWrapper toolWrapper = myDefaultState.getTool()-->Line_32 $$ final InspectionToolWrapper copyToolWrapper = toolWrapper.createCopy()[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_16 $$ final InspectionToolWrapper toolWrapper = myDefaultState.getTool()[ CD ]
Line_49 $$ String scopeName = scopeNames.get(i)-->Line_50 $$ List<String> order = dependencies.get(scopeName)[ FD ]
Line_37 $$ HighlightDisplayLevel scopeLevel = errorLevel != null ? HighlightDisplayLevel.find(registrar.getSeverity(errorLevel)) : null-->Line_39 $$ scopeLevel = level[ FD ]
Line_32 $$ final InspectionToolWrapper copyToolWrapper = toolWrapper.createCopy()-->Line_44 $$ addTool(scopeName, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_31 $$ final String enabledInScope = scopeElement.getAttributeValue(ENABLED_ATTRIBUTE)-->Line_42 $$ addTool(namedScope, copyToolWrapper, enabledInScope != null && Boolean.parseBoolean(enabledInScope), scopeLevel)[ FD ]
Line_52 $$ order = new ArrayList<String>()-->Line_56 $$ order.add(scopeNames.get(j))[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_14 $$ final String enabledTool = toolElement.getAttributeValue(ENABLED_BY_DEFAULT_ATTRIBUTE)[ CD ]
Line_21 $$ final String scopeName = scopeElement.getAttributeValue(ProfileEx.NAME)-->Line_28 $$ namedScope = scopesHolder.getScope(scopeName)[ FD ]
Line_18 $$ final List<String> scopeNames = new ArrayList<String>()-->Line_55 $$ for (int j = i + 1; j < scopeNames.size(); j++) [ FD ]
Line_20 $$ final Element scopeElement = (Element) sO-->Line_35 $$ copyToolWrapper.getTool().readSettings(scopeElement)[ FD ]
Line_51 $$ if (order == null) -->Line_52 $$ order = new ArrayList<String>()[ CD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_53 $$ dependencies.put(scopeName, order)[ FD ]
Line_2 $$ void readExternal(@NotNull Element toolElement, @NotNull InspectionProfile profile, Map<String, List<String>> dependencies) throws InvalidDataException -->Line_18 $$ final List<String> scopeNames = new ArrayList<String>()[ CD ]
Line_25 $$ final NamedScopesHolder scopesHolder = profileManager.getScopesManager()-->Line_28 $$ namedScope = scopesHolder.getScope(scopeName)[ FD ]
Line_51 $$ if (order == null) -->Line_53 $$ dependencies.put(scopeName, order)[ CD ]
Line_6 $$ HighlightDisplayLevel level = levelName != null ? HighlightDisplayLevel.find(registrar.getSeverity(levelName)) : null-->Line_11 $$ myDefaultState.setLevel(level)[ FD ]
