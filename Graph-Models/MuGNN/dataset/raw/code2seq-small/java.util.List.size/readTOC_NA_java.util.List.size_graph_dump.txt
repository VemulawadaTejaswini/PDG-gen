Line_11 $$ Component component = new Component(Component.Type.fromRepresentation(componentName), componentName)-->Line_12 $$ if (!new File(descriptor.filenameFor(component)).exists())[ FD ]
Line_7 $$ File tocFile = new File(descriptor.filenameFor(Component.TOC))-->Line_8 $$ List<String> componentNames = Files.readLines(tocFile, Charset.defaultCharset())[ FD ]
Line_11 $$ Component component = new Component(Component.Type.fromRepresentation(componentName), componentName)-->Line_13 $$ logger.error("Missing component: [ FD ]
Line_10 $$ for (String componentName : componentNames) -->Line_11 $$ Component component = new Component(Component.Type.fromRepresentation(componentName), componentName)[ FD ]
Line_12 $$ if (!new File(descriptor.filenameFor(component)).exists())-->Line_15 $$ components.add(component)[ CD ]
Line_8 $$ List<String> componentNames = Files.readLines(tocFile, Charset.defaultCharset())-->Line_9 $$ Set<Component> components = Sets.newHashSetWithExpectedSize(componentNames.size())[ FD ]
Line_12 $$ if (!new File(descriptor.filenameFor(component)).exists())-->Line_13 $$ logger.error("Missing component: [ CD ]
Line_9 $$ Set<Component> components = Sets.newHashSetWithExpectedSize(componentNames.size())-->Line_15 $$ components.add(component)[ FD ]
Line_11 $$ Component component = new Component(Component.Type.fromRepresentation(componentName), componentName)-->Line_15 $$ components.add(component)[ FD ]
