Line_2 $$ protected static Set<Component> readTOC(Descriptor descriptor) throws IOException -->Line_9 $$ logger.error("Missing component: [ FD ]
Line_5 $$ Set<Component> components = Sets.newHashSetWithExpectedSize(componentNames.size())-->Line_11 $$ components.add(component)[ FD ]
Line_2 $$ protected static Set<Component> readTOC(Descriptor descriptor) throws IOException -->Line_13 $$ return components[ CD ]
Line_3 $$ File tocFile = new File(descriptor.filenameFor(Component.TOC))-->Line_4 $$ List<String> componentNames = Files.readLines(tocFile, Charset.defaultCharset())[ FD ]
Line_8 $$ if (!new File(descriptor.filenameFor(component)).exists())-->Line_9 $$ logger.error("Missing component: [ CD ]
Line_2 $$ protected static Set<Component> readTOC(Descriptor descriptor) throws IOException -->Line_3 $$ File tocFile = new File(descriptor.filenameFor(Component.TOC))[ FD ]
Line_8 $$ if (!new File(descriptor.filenameFor(component)).exists())-->Line_11 $$ components.add(component)[ CD ]
Line_2 $$ protected static Set<Component> readTOC(Descriptor descriptor) throws IOException -->Line_4 $$ List<String> componentNames = Files.readLines(tocFile, Charset.defaultCharset())[ CD ]
Line_2 $$ protected static Set<Component> readTOC(Descriptor descriptor) throws IOException -->Line_5 $$ Set<Component> components = Sets.newHashSetWithExpectedSize(componentNames.size())[ CD ]
Line_6 $$ for (String componentName : componentNames) -->Line_7 $$ Component component = new Component(Component.Type.fromRepresentation(componentName), componentName)[ FD ]
Line_4 $$ List<String> componentNames = Files.readLines(tocFile, Charset.defaultCharset())-->Line_5 $$ Set<Component> components = Sets.newHashSetWithExpectedSize(componentNames.size())[ FD ]
Line_7 $$ Component component = new Component(Component.Type.fromRepresentation(componentName), componentName)-->Line_8 $$ if (!new File(descriptor.filenameFor(component)).exists())[ FD ]
Line_2 $$ protected static Set<Component> readTOC(Descriptor descriptor) throws IOException -->Line_8 $$ if (!new File(descriptor.filenameFor(component)).exists())[ FD ]
Line_2 $$ protected static Set<Component> readTOC(Descriptor descriptor) throws IOException -->Line_3 $$ File tocFile = new File(descriptor.filenameFor(Component.TOC))[ CD ]
Line_7 $$ Component component = new Component(Component.Type.fromRepresentation(componentName), componentName)-->Line_11 $$ components.add(component)[ FD ]
Line_7 $$ Component component = new Component(Component.Type.fromRepresentation(componentName), componentName)-->Line_9 $$ logger.error("Missing component: [ FD ]
