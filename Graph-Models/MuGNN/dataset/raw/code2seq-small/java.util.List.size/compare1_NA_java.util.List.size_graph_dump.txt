Line_11 $$ for (int i = 0; i < c1.size(); ++i) -->Line_12 $$ c1.get(i).deepCompare(c2.get(i), new TreePath(loc, eltname, i))[ FD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_11 $$ for (int i = 0; i < c1.size(); ++i) [ FD ]
Line_3 $$ if (c1 == null && c2 == null) -->Line_4 $$ return[ CD ]
Line_11 $$ for (int i = 0; i < c1.size(); ++i) -->Line_12 $$ c1.get(i).deepCompare(c2.get(i), new TreePath(loc, eltname, i))[ CD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_10 $$ Collections.sort(c2, new TopoSort())[ FD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_11 $$ for (int i = 0; i < c1.size(); ++i) [ CD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_3 $$ if (c1 == null && c2 == null) [ CD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_6 $$ if (c1 == null || c2 == null || c1.size() != c2.size()) [ FD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_10 $$ Collections.sort(c2, new TopoSort())[ CD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_12 $$ c1.get(i).deepCompare(c2.get(i), new TreePath(loc, eltname, i))[ FD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_6 $$ if (c1 == null || c2 == null || c1.size() != c2.size()) [ CD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_9 $$ Collections.sort(c1, new TopoSort())[ FD ]
Line_2 $$ private void compare1(List<LoggedNetworkTopology> c1, List<LoggedNetworkTopology> c2, TreePath loc, String eltname) throws DeepInequalityException -->Line_9 $$ Collections.sort(c1, new TopoSort())[ CD ]
