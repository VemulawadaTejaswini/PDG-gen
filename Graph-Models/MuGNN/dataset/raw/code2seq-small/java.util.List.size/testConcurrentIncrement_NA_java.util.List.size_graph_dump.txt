Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_6 $$ arguments.add("-XX:MaxPermSize=200m")[ CD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_5 $$ arguments.add("-Xmx1024m")[ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_8 $$ arguments.add("-D" + property)[ FD ]
Line_30 $$ for (int i = 0; i < total; i++) -->Line_32 $$ Assert.assertEquals(i + 1, id.intValue())[ CD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_28 $$ Assert.assertEquals(total, ids.size())[ CD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_3 $$ String classPath = getClassPath()[ CD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_10 $$ Builder builder = new Builder()[ CD ]
Line_17 $$ for (int i = 0; i < _PROCESS_COUNT; i++) -->Line_19 $$ ProcessChannel<Long[]> processChannel = ProcessExecutorUtil.execute(processConfig, processCallable)[ CD ]
Line_3 $$ String classPath = getClassPath()-->Line_14 $$ builder.setRuntimeClassPath(classPath)[ FD ]
Line_15 $$ ProcessConfig processConfig = builder.build()-->Line_19 $$ ProcessChannel<Long[]> processChannel = ProcessExecutorUtil.execute(processConfig, processCallable)[ FD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_29 $$ Collections.sort(ids)[ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_11 $$ builder.setArguments(arguments)[ FD ]
Line_17 $$ for (int i = 0; i < _PROCESS_COUNT; i++) -->Line_18 $$ ProcessCallable<Long[]> processCallable = new IncrementProcessCallable("Increment Process-" + i, _COUNTER_NAME, _INCREMENT_COUNT)[ CD ]
Line_17 $$ for (int i = 0; i < _PROCESS_COUNT; i++) -->Line_20 $$ Future<Long[]> futures = processChannel.getProcessNoticeableFuture()[ CD ]
Line_24 $$ List<Long> ids = new ArrayList(total)-->Line_31 $$ Long id = ids.get(i)[ FD ]
Line_24 $$ List<Long> ids = new ArrayList(total)-->Line_29 $$ Collections.sort(ids)[ FD ]
Line_23 $$ int total = _PROCESS_COUNT * _INCREMENT_COUNT-->Line_28 $$ Assert.assertEquals(total, ids.size())[ FD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_14 $$ builder.setRuntimeClassPath(classPath)[ CD ]
Line_19 $$ ProcessChannel<Long[]> processChannel = ProcessExecutorUtil.execute(processConfig, processCallable)-->Line_20 $$ Future<Long[]> futures = processChannel.getProcessNoticeableFuture()[ FD ]
Line_23 $$ int total = _PROCESS_COUNT * _INCREMENT_COUNT-->Line_30 $$ for (int i = 0; i < total; i++) [ FD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_15 $$ ProcessConfig processConfig = builder.build()[ CD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_16 $$ List<Future<Long[]>> futuresList = new ArrayList()[ CD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_30 $$ for (int i = 0; i < total; i++) [ CD ]
Line_24 $$ List<Long> ids = new ArrayList(total)-->Line_26 $$ ids.addAll(Arrays.asList(futures.get()))[ FD ]
Line_16 $$ List<Future<Long[]>> futuresList = new ArrayList()-->Line_21 $$ futuresList.add(futures)[ FD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_5 $$ arguments.add("-Xmx1024m")[ FD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_23 $$ int total = _PROCESS_COUNT * _INCREMENT_COUNT[ CD ]
Line_10 $$ Builder builder = new Builder()-->Line_11 $$ builder.setArguments(arguments)[ FD ]
Line_10 $$ Builder builder = new Builder()-->Line_12 $$ builder.setBootstrapClassPath(classPath)[ FD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_17 $$ for (int i = 0; i < _PROCESS_COUNT; i++) [ CD ]
Line_17 $$ for (int i = 0; i < _PROCESS_COUNT; i++) -->Line_31 $$ Long id = ids.get(i)[ FD ]
Line_25 $$ for (Future<Long[]> futures : futuresList) -->Line_26 $$ ids.addAll(Arrays.asList(futures.get()))[ FD ]
Line_17 $$ for (int i = 0; i < _PROCESS_COUNT; i++) -->Line_30 $$ for (int i = 0; i < total; i++) [ FD ]
Line_20 $$ Future<Long[]> futures = processChannel.getProcessNoticeableFuture()-->Line_21 $$ futuresList.add(futures)[ FD ]
Line_24 $$ List<Long> ids = new ArrayList(total)-->Line_28 $$ Assert.assertEquals(total, ids.size())[ FD ]
Line_10 $$ Builder builder = new Builder()-->Line_15 $$ ProcessConfig processConfig = builder.build()[ FD ]
Line_17 $$ for (int i = 0; i < _PROCESS_COUNT; i++) -->Line_21 $$ futuresList.add(futures)[ CD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_13 $$ builder.setReactClassLoader(PortalClassLoaderUtil.getClassLoader())[ CD ]
Line_30 $$ for (int i = 0; i < total; i++) -->Line_31 $$ Long id = ids.get(i)[ CD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_4 $$ List<String> arguments = new ArrayList()[ CD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_11 $$ builder.setArguments(arguments)[ CD ]
Line_10 $$ Builder builder = new Builder()-->Line_14 $$ builder.setRuntimeClassPath(classPath)[ FD ]
Line_31 $$ Long id = ids.get(i)-->Line_32 $$ Assert.assertEquals(i + 1, id.intValue())[ FD ]
Line_3 $$ String classPath = getClassPath()-->Line_12 $$ builder.setBootstrapClassPath(classPath)[ FD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_12 $$ builder.setBootstrapClassPath(classPath)[ CD ]
Line_10 $$ Builder builder = new Builder()-->Line_13 $$ builder.setReactClassLoader(PortalClassLoaderUtil.getClassLoader())[ FD ]
Line_20 $$ Future<Long[]> futures = processChannel.getProcessNoticeableFuture()-->Line_26 $$ ids.addAll(Arrays.asList(futures.get()))[ FD ]
Line_2 $$ public void testConcurrentIncrement() throws Exception -->Line_24 $$ List<Long> ids = new ArrayList(total)[ CD ]
Line_30 $$ for (int i = 0; i < total; i++) -->Line_31 $$ Long id = ids.get(i)[ FD ]
Line_18 $$ ProcessCallable<Long[]> processCallable = new IncrementProcessCallable("Increment Process-" + i, _COUNTER_NAME, _INCREMENT_COUNT)-->Line_19 $$ ProcessChannel<Long[]> processChannel = ProcessExecutorUtil.execute(processConfig, processCallable)[ FD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_6 $$ arguments.add("-XX:MaxPermSize=200m")[ FD ]
