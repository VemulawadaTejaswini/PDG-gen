Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_15 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_7 $$ Session s = openSession()-->Line_36 $$ s.close()[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_40 $$ f = (Foo) list.get(0)-->Line_42 $$ assertTrue(!Hibernate.isInitialized(f.getComponent().getGlarch()))[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_30 $$ assertTrue(list.size() == 3)[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_26 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_32 $$ assertTrue(list.size() == 1)[ FD ]
Line_16 $$ Foo example = new Foo()-->Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_28 $$ assertTrue(list.size() == 0)[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_37 $$ s = openSession()-->Line_46 $$ assertTrue(s.createCriteria(Foo.class).list().size() == 3)[ FD ]
Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_48 $$ s.delete(f.getFoo())[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_33 $$ f.setFoo(new Foo())[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_32 $$ assertTrue(list.size() == 1)[ FD ]
Line_7 $$ Session s = openSession()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_7 $$ Session s = openSession()-->Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_37 $$ s = openSession()-->Line_49 $$ s.delete(f)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_15 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_26 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_4 $$ if (getDialect() instanceof DB2Dialect) -->Line_5 $$ return[ CD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_40 $$ f = (Foo) list.get(0)-->Line_49 $$ s.delete(f)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_30 $$ assertTrue(list.size() == 3)[ FD ]
Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_19 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_32 $$ assertTrue(list.size() == 1)[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()[ FD ]
Line_16 $$ Foo example = new Foo()-->Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_24 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_44 $$ list = s.createCriteria(Bar.class).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_24 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_22 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_24 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_37 $$ s = openSession()-->Line_43 $$ s.save(new Bar())[ FD ]
Line_7 $$ Session s = openSession()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_30 $$ assertTrue(list.size() == 3)[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_30 $$ assertTrue(list.size() == 3)[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_22 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_8 $$ Transaction txn = s.beginTransaction()-->Line_50 $$ txn.commit()[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_37 $$ s = openSession()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_34 $$ s.save(f.getFoo())[ FD ]
Line_7 $$ Session s = openSession()-->Line_8 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_13 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_22 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_30 $$ assertTrue(list.size() == 3)[ FD ]
Line_7 $$ Session s = openSession()-->Line_10 $$ s.save(f)[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_28 $$ assertTrue(list.size() == 0)[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_28 $$ assertTrue(list.size() == 0)[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_19 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_40 $$ f = (Foo) list.get(0)-->Line_41 $$ assertTrue(Hibernate.isInitialized(f.getFoo()))[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_10 $$ s.save(f)[ FD ]
Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_44 $$ list = s.createCriteria(Bar.class).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_32 $$ assertTrue(list.size() == 1)[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_7 $$ Session s = openSession()-->Line_11 $$ s.flush()[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_41 $$ assertTrue(Hibernate.isInitialized(f.getFoo()))[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_26 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_7 $$ Session s = openSession()-->Line_38 $$ txn = s.beginTransaction()[ FD ]
Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_24 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_7 $$ Session s = openSession()-->Line_34 $$ s.save(f.getFoo())[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_37 $$ s = openSession()-->Line_48 $$ s.delete(f.getFoo())[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_28 $$ assertTrue(list.size() == 0)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_16 $$ Foo example = new Foo()-->Line_17 $$ example.setString("a STRing")[ FD ]
Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_32 $$ assertTrue(list.size() == 1)[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()[ FD ]
Line_37 $$ s = openSession()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_49 $$ s.delete(f)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_28 $$ assertTrue(list.size() == 0)[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_30 $$ assertTrue(list.size() == 3)[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_26 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_7 $$ Session s = openSession()-->Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_43 $$ s.save(new Bar())[ FD ]
Line_7 $$ Session s = openSession()-->Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_28 $$ assertTrue(list.size() == 0)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_19 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_8 $$ Transaction txn = s.beginTransaction()-->Line_35 $$ txn.commit()[ FD ]
Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_32 $$ assertTrue(list.size() == 1)[ FD ]
Line_7 $$ Session s = openSession()-->Line_49 $$ s.delete(f)[ FD ]
Line_7 $$ Session s = openSession()-->Line_48 $$ s.delete(f.getFoo())[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_25 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_38 $$ txn = s.beginTransaction()-->Line_50 $$ txn.commit()[ FD ]
Line_7 $$ Session s = openSession()-->Line_46 $$ assertTrue(s.createCriteria(Foo.class).list().size() == 3)[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_28 $$ assertTrue(list.size() == 0)[ FD ]
Line_40 $$ f = (Foo) list.get(0)-->Line_48 $$ s.delete(f.getFoo())[ FD ]
Line_37 $$ s = openSession()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_24 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_42 $$ assertTrue(!Hibernate.isInitialized(f.getComponent().getGlarch()))[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_32 $$ assertTrue(list.size() == 1)[ FD ]
Line_16 $$ Foo example = new Foo()-->Line_20 $$ example.setString("rin")[ FD ]
Line_37 $$ s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_8 $$ Transaction txn = s.beginTransaction()-->Line_38 $$ txn = s.beginTransaction()[ FD ]
Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_27 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_47 $$ s.delete(list.get(0))[ FD ]
Line_21 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_39 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_31 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_32 $$ assertTrue(list.size() == 1)[ FD ]
Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_30 $$ assertTrue(list.size() == 3)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_37 $$ s = openSession()-->Line_38 $$ txn = s.beginTransaction()[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_40 $$ f = (Foo) list.get(0)[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_29 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_18 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_22 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_9 $$ Foo f = new Foo()-->Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_7 $$ Session s = openSession()-->Line_37 $$ s = openSession()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_26 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_26 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_30 $$ assertTrue(list.size() == 3)[ FD ]
Line_14 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_44 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_23 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_12 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_32 $$ assertTrue(list.size() == 1)[ FD ]
