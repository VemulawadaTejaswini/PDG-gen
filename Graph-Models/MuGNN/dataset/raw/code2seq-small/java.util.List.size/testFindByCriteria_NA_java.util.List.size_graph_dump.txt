Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_25 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_15 $$ Foo example = new Foo()[ CD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_29 $$ assertTrue(list.size() == 3)[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_29 $$ assertTrue(list.size() == 3)[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_32 $$ f.setFoo(new Foo())[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_47 $$ s.delete(f.getFoo())[ CD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_36 $$ s = openSession()-->Line_48 $$ s.delete(f)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_16 $$ example.setString("a STRing")[ CD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_25 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ CD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_36 $$ s = openSession()-->Line_37 $$ txn = s.beginTransaction()[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_41 $$ assertTrue(!Hibernate.isInitialized(f.getComponent().getGlarch()))[ CD ]
Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_9 $$ s.save(f)[ FD ]
Line_6 $$ Session s = openSession()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_48 $$ s.delete(f)[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_23 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_29 $$ assertTrue(list.size() == 3)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_37 $$ txn = s.beginTransaction()[ CD ]
Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_29 $$ assertTrue(list.size() == 3)[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_21 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_27 $$ assertTrue(list.size() == 0)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ CD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_31 $$ assertTrue(list.size() == 1)[ CD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_23 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_42 $$ s.save(new Bar())[ CD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_18 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ CD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_27 $$ assertTrue(list.size() == 0)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_29 $$ assertTrue(list.size() == 3)[ CD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_45 $$ assertTrue(s.createCriteria(Foo.class).list().size() == 3)[ CD ]
Line_6 $$ Session s = openSession()-->Line_45 $$ assertTrue(s.createCriteria(Foo.class).list().size() == 3)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_10 $$ s.flush()[ CD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_21 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_29 $$ assertTrue(list.size() == 3)[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_25 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_50 $$ s.close()[ CD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_35 $$ s.close()[ CD ]
Line_6 $$ Session s = openSession()-->Line_9 $$ s.save(f)[ FD ]
Line_6 $$ Session s = openSession()-->Line_37 $$ txn = s.beginTransaction()[ FD ]
Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_15 $$ Foo example = new Foo()-->Line_16 $$ example.setString("a STRing")[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_33 $$ s.save(f.getFoo())[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_27 $$ assertTrue(list.size() == 0)[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_31 $$ assertTrue(list.size() == 1)[ FD ]
Line_6 $$ Session s = openSession()-->Line_47 $$ s.delete(f.getFoo())[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_27 $$ assertTrue(list.size() == 0)[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_12 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ CD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_7 $$ Transaction txn = s.beginTransaction()-->Line_37 $$ txn = s.beginTransaction()[ FD ]
Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_15 $$ Foo example = new Foo()-->Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_3 $$ if (getDialect() instanceof DB2Dialect) [ CD ]
Line_6 $$ Session s = openSession()-->Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ CD ]
Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_31 $$ assertTrue(list.size() == 1)[ FD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_29 $$ assertTrue(list.size() == 3)[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_31 $$ assertTrue(list.size() == 1)[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_21 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_31 $$ assertTrue(list.size() == 1)[ FD ]
Line_6 $$ Session s = openSession()-->Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_27 $$ assertTrue(list.size() == 0)[ CD ]
Line_7 $$ Transaction txn = s.beginTransaction()-->Line_34 $$ txn.commit()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_21 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ CD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_6 $$ Session s = openSession()[ CD ]
Line_3 $$ if (getDialect() instanceof DB2Dialect) -->Line_4 $$ return[ CD ]
Line_6 $$ Session s = openSession()-->Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_7 $$ Transaction txn = s.beginTransaction()[ CD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_27 $$ assertTrue(list.size() == 0)[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_7 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_21 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_32 $$ f.setFoo(new Foo())[ CD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_14 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ CD ]
Line_6 $$ Session s = openSession()-->Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_34 $$ txn.commit()[ CD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_31 $$ assertTrue(list.size() == 1)[ FD ]
Line_15 $$ Foo example = new Foo()-->Line_19 $$ example.setString("rin")[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_27 $$ assertTrue(list.size() == 0)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ CD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_43 $$ list = s.createCriteria(Bar.class).list()[ CD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ CD ]
Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_36 $$ s = openSession()-->Line_50 $$ s.close()[ FD ]
Line_37 $$ txn = s.beginTransaction()-->Line_49 $$ txn.commit()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_9 $$ s.save(f)[ CD ]
Line_6 $$ Session s = openSession()-->Line_50 $$ s.close()[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_39 $$ f = (Foo) list.get(0)-->Line_40 $$ assertTrue(Hibernate.isInitialized(f.getFoo()))[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ CD ]
Line_6 $$ Session s = openSession()-->Line_42 $$ s.save(new Bar())[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_18 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_47 $$ s.delete(f.getFoo())[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_8 $$ Foo f = new Foo()[ CD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_35 $$ s.close()[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_41 $$ assertTrue(!Hibernate.isInitialized(f.getComponent().getGlarch()))[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()[ CD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_39 $$ f = (Foo) list.get(0)[ CD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_12 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_36 $$ s = openSession()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_33 $$ s.save(f.getFoo())[ CD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_14 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_31 $$ assertTrue(list.size() == 1)[ FD ]
Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_6 $$ Session s = openSession()-->Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_18 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_19 $$ example.setString("rin")[ CD ]
Line_39 $$ f = (Foo) list.get(0)-->Line_48 $$ s.delete(f)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ CD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_25 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_23 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_6 $$ Session s = openSession()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_48 $$ s.delete(f)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_44 $$ assertTrue(list.size() == 1)[ CD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_29 $$ assertTrue(list.size() == 3)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_36 $$ s = openSession()[ CD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_23 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_23 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()[ CD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_48 $$ s.delete(f)[ CD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_43 $$ list = s.createCriteria(Bar.class).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_31 $$ assertTrue(list.size() == 1)[ FD ]
Line_7 $$ Transaction txn = s.beginTransaction()-->Line_49 $$ txn.commit()[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_25 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_43 $$ list = s.createCriteria(Bar.class).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_46 $$ s.delete(list.get(0))[ CD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_14 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_36 $$ s = openSession()-->Line_47 $$ s.delete(f.getFoo())[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_23 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ CD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_27 $$ assertTrue(list.size() == 0)[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()[ CD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_18 $$ assertTrue("Example API without like did not work correctly, size was " + list.size(), list.size() == 1 && list.get(0) == f)[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_39 $$ f = (Foo) list.get(0)[ FD ]
Line_36 $$ s = openSession()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_36 $$ s = openSession()[ FD ]
Line_39 $$ f = (Foo) list.get(0)-->Line_41 $$ assertTrue(!Hibernate.isInitialized(f.getComponent().getGlarch()))[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_40 $$ assertTrue(Hibernate.isInitialized(f.getFoo()))[ FD ]
Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()-->Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_33 $$ s.save(f.getFoo())[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_49 $$ txn.commit()[ CD ]
Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
Line_6 $$ Session s = openSession()-->Line_26 $$ list = s.createCriteria(Foo.class).setFirstResult(1).addOrder(Order.asc("date")).addOrder(Order.desc("string")).list()[ FD ]
Line_15 $$ Foo example = new Foo()-->Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_31 $$ assertTrue(list.size() == 1)[ FD ]
Line_36 $$ s = openSession()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_10 $$ s.flush()[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_24 $$ list = s.createCriteria(Foo.class).setMaxResults(5).addOrder(Order.asc("date")).list()[ FD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_25 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_36 $$ s = openSession()-->Line_42 $$ s.save(new Bar())[ FD ]
Line_8 $$ Foo f = new Foo()-->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ FD ]
Line_36 $$ s = openSession()-->Line_45 $$ assertTrue(s.createCriteria(Foo.class).list().size() == 3)[ FD ]
Line_17 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().ignoreCase().excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_25 $$ assertTrue(list.size() == 1 && list.get(0) == f)[ FD ]
Line_11 $$ List list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.eqProperty("integer", "integer")).add(Restrictions.like("string", f.getString().toUpperCase(Locale.ROOT)).ignoreCase()).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("abstracts", FetchMode.JOIN).list()-->Line_29 $$ assertTrue(list.size() == 3)[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()[ FD ]
Line_30 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list()-->Line_43 $$ list = s.createCriteria(Bar.class).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()[ CD ]
Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()-->Line_44 $$ assertTrue(list.size() == 1)[ FD ]
Line_39 $$ f = (Foo) list.get(0)-->Line_47 $$ s.delete(f.getFoo())[ FD ]
Line_13 $$ list = s.createCriteria(Foo.class).add(Restrictions.disjunction().add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.eq("boolean", f.getBoolean()))).add(Restrictions.isNotNull("boolean")).list()-->Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()[ FD ]
Line_20 $$ list = s.createCriteria(Foo.class).add(Example.create(example).excludeZeroes().enableLike(MatchMode.ANYWHERE).excludeProperty("bool").excludeProperty("char").excludeProperty("yesno")).list()-->Line_28 $$ list = s.createCriteria(Foo.class).setFetchMode("component.importantDates", FetchMode.JOIN).list()[ FD ]
Line_2 $$ public void testFindByCriteria() throws Exception -->Line_40 $$ assertTrue(Hibernate.isInitialized(f.getFoo()))[ CD ]
Line_22 $$ list = s.createCriteria(Foo.class).add(Restrictions.or(Restrictions.and(Restrictions.eq("integer", f.getInteger()), Restrictions.like("string", f.getString())), Restrictions.eq("boolean", f.getBoolean()))).list()-->Line_31 $$ assertTrue(list.size() == 1)[ FD ]
Line_38 $$ list = s.createCriteria(Foo.class).add(Restrictions.eq("integer", f.getInteger())).add(Restrictions.like("string", f.getString())).add(Restrictions.in("boolean", f.getBoolean(), f.getBoolean())).add(Restrictions.isNotNull("foo")).setFetchMode("foo", FetchMode.JOIN).setFetchMode("baz", FetchMode.SELECT).setFetchMode("component.glarch", FetchMode.SELECT).setFetchMode("foo.baz", FetchMode.SELECT).setFetchMode("foo.component.glarch", FetchMode.SELECT).list()-->Line_46 $$ s.delete(list.get(0))[ FD ]
