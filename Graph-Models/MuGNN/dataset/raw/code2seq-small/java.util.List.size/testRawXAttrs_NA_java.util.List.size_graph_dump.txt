Line_2 $$ public void testRawXAttrs() throws Exception -->Line_14 $$ fs.removeXAttr(rawPath, raw1)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_29 $$ assertTrue(xattrNames.contains(raw2))[ CD ]
Line_27 $$ final List<String> xattrNames = fs.listXAttrs(rawPath)-->Line_30 $$ assertTrue(xattrNames.size() == 2)[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_39 $$ fs.removeXAttr(rawPath, raw1)[ CD ]
Line_27 $$ final List<String> xattrNames = fs.listXAttrs(rawPath)-->Line_28 $$ assertTrue(xattrNames.contains(raw1))[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_82 $$ user.doAs(new PrivilegedExceptionAction<Object>() [ CD ]
Line_82 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_102 $$ return null[ CD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_98 $$ userFs.listXAttrs(rawPath)[ FD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_86 $$ userFs.getXAttr(rawPath, raw1)[ FD ]
Line_95 $$ final List<String> xattrNames = userFs.listXAttrs(path)-->Line_96 $$ assertTrue(xattrNames.size() == 0)[ FD ]
Line_7 $$ final byte[] value = fs.getXAttr(rawPath, raw1)-->Line_8 $$ Assert.assertArrayEquals(value, value1)[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_11 $$ final Map<String, byte[]> xattrs = fs.getXAttrs(rawPath)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_13 $$ Assert.assertArrayEquals(value1, xattrs.get(raw1))[ CD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_62 $$ userFs.getXAttrs(path)[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_25 $$ fs.setXAttr(rawPath, raw1, value1, EnumSet.of(XAttrSetFlag.CREATE))[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_7 $$ final byte[] value = fs.getXAttr(rawPath, raw1)[ CD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_72 $$ userFs.getXAttr(path, raw1)[ FD ]
Line_84 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_98 $$ userFs.listXAttrs(rawPath)[ FD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_52 $$ userFs.setXAttr(rawPath, raw1, value1)[ FD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_95 $$ final List<String> xattrNames = userFs.listXAttrs(path)[ FD ]
Line_27 $$ final List<String> xattrNames = fs.listXAttrs(rawPath)-->Line_96 $$ assertTrue(xattrNames.size() == 0)[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_3 $$ final UserGroupInformation user = UserGroupInformation.createUserForTesting("user", new String[] [ CD ]
Line_84 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_86 $$ userFs.getXAttr(rawPath, raw1)[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_105 $$ fs.removeXAttr(rawPath, raw1)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_32 $$ fs.removeXAttr(rawPath, raw2)[ CD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_91 $$ userFs.getXAttr(path, raw1)[ FD ]
Line_84 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_95 $$ final List<String> xattrNames = userFs.listXAttrs(path)[ FD ]
Line_27 $$ final List<String> xattrNames = fs.listXAttrs(rawPath)-->Line_29 $$ assertTrue(xattrNames.contains(raw2))[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_4 $$ FileSystem.mkdirs(fs, path, FsPermission.createImmutable((short) 0750))[ CD ]
Line_27 $$ final List<String> xattrNames = fs.listXAttrs(rawPath)-->Line_38 $$ assertTrue(xattrNames.size() == 0)[ FD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_57 $$ userFs.getXAttrs(rawPath)[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_30 $$ assertTrue(xattrNames.size() == 2)[ CD ]
Line_82 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_96 $$ assertTrue(xattrNames.size() == 0)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_12 $$ Assert.assertEquals(xattrs.size(), 1)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_17 $$ fs.setXAttr(rawPath, raw1, value1, EnumSet.of(XAttrSetFlag.CREATE))[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_18 $$ fs.setXAttr(rawPath, raw1, newValue1, EnumSet.of(XAttrSetFlag.CREATE, XAttrSetFlag.REPLACE))[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_40 $$ fs.removeXAttr(rawPath, raw2)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_21 $$ Assert.assertArrayEquals(newValue1, xattrs.get(raw1))[ CD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_47 $$ userFs.setXAttr(path, raw1, value1)[ FD ]
Line_43 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_76 $$ return null[ CD ]
Line_11 $$ final Map<String, byte[]> xattrs = fs.getXAttrs(rawPath)-->Line_12 $$ Assert.assertEquals(xattrs.size(), 1)[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_35 $$ fs.setXAttr(rawPath, raw1, value1, EnumSet.of(XAttrSetFlag.CREATE))[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_27 $$ final List<String> xattrNames = fs.listXAttrs(rawPath)[ CD ]
Line_3 $$ final UserGroupInformation user = UserGroupInformation.createUserForTesting("user", new String[] -->Line_82 $$ user.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_8 $$ Assert.assertArrayEquals(value, value1)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_19 $$ final Map<String, byte[]> xattrs = fs.getXAttrs(rawPath)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_20 $$ Assert.assertEquals(xattrs.size(), 1)[ CD ]
Line_82 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_84 $$ final FileSystem userFs = dfsCluster.getFileSystem()[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_81 $$ fs.setXAttr(rawPath, raw1, value1)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_36 $$ fs.setXAttr(rawPath, raw2, value2, EnumSet.of(XAttrSetFlag.CREATE))[ CD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_67 $$ userFs.getXAttr(rawPath, raw1)[ FD ]
Line_84 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_91 $$ userFs.getXAttr(path, raw1)[ FD ]
Line_11 $$ final Map<String, byte[]> xattrs = fs.getXAttrs(rawPath)-->Line_20 $$ Assert.assertEquals(xattrs.size(), 1)[ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_26 $$ fs.setXAttr(rawPath, raw2, value2, EnumSet.of(XAttrSetFlag.CREATE))[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_22 $$ fs.removeXAttr(rawPath, raw1)[ CD ]
Line_82 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_95 $$ final List<String> xattrNames = userFs.listXAttrs(path)[ CD ]
Line_11 $$ final Map<String, byte[]> xattrs = fs.getXAttrs(rawPath)-->Line_21 $$ Assert.assertArrayEquals(newValue1, xattrs.get(raw1))[ FD ]
Line_11 $$ final Map<String, byte[]> xattrs = fs.getXAttrs(rawPath)-->Line_13 $$ Assert.assertArrayEquals(value1, xattrs.get(raw1))[ FD ]
Line_3 $$ final UserGroupInformation user = UserGroupInformation.createUserForTesting("user", new String[] -->Line_43 $$ user.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_28 $$ assertTrue(xattrNames.contains(raw1))[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_37 $$ final List<String> xattrNames = fs.listXAttrs(path)[ CD ]
Line_43 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_5 $$ fs.setXAttr(rawPath, raw1, value1, EnumSet.of(XAttrSetFlag.CREATE, XAttrSetFlag.REPLACE))[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_31 $$ fs.removeXAttr(rawPath, raw1)[ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_43 $$ user.doAs(new PrivilegedExceptionAction<Object>() [ CD ]
Line_2 $$ public void testRawXAttrs() throws Exception -->Line_38 $$ assertTrue(xattrNames.size() == 0)[ CD ]
