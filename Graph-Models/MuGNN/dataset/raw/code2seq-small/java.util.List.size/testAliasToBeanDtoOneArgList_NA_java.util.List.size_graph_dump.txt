Line_15 $$ List resultList = (List) results-->Line_17 $$ StudentDTO dto = (StudentDTO) resultList.get(0)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertNull(dto.getDescription())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ StudentDTO dto = (StudentDTO) resultList.get(0)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select st.name as studentName from Student st order by st.studentNumber").setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select st.name as studentName from Student st order by st.studentNumber").setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").createAlias("e.student", "st").createAlias("e.course", "co").setProjection(Projections.property("st.name").as("studentName")).addOrder(Order.asc("st.studentNumber")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ FD ]
Line_2 $$ public void testAliasToBeanDtoOneArgList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(shermanExpected.getName(), dto.getName())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_17 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_21 $$ assertNull(dto.getDescription())[ FD ]
Line_2 $$ public void testAliasToBeanDtoOneArgList() throws Exception -->Line_25 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").createAlias("e.student", "st").createAlias("e.course", "co").setProjection(Projections.property("st.name").as("studentName")).addOrder(Order.asc("st.studentNumber")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ dto = (StudentDTO) resultList.get(1)[ CD ]
Line_17 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_19 $$ assertEquals(yogiExpected.getName(), dto.getName())[ FD ]
Line_17 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_18 $$ assertNull(dto.getDescription())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertEquals(yogiExpected.getName(), dto.getName())[ CD ]
Line_20 $$ dto = (StudentDTO) resultList.get(1)-->Line_22 $$ assertEquals(shermanExpected.getName(), dto.getName())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ assertNull(dto.getDescription())[ CD ]
Line_15 $$ List resultList = (List) results-->Line_20 $$ dto = (StudentDTO) resultList.get(1)[ FD ]
Line_17 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_20 $$ dto = (StudentDTO) resultList.get(1)[ FD ]
Line_20 $$ dto = (StudentDTO) resultList.get(1)-->Line_21 $$ assertNull(dto.getDescription())[ FD ]
Line_17 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_22 $$ assertEquals(shermanExpected.getName(), dto.getName())[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_25 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select st.name as studentName from Student st order by st.studentNumber").setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ FD ]
