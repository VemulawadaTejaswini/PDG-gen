Line_21 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_24 $$ dto = (StudentDTO) resultList.get(1)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ List resultList = (List) results[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Enrolment.class, "e").createAlias("e.student", "st").createAlias("e.course", "co").setProjection(Projections.property("st.name").as("studentName")).addOrder(Order.asc("st.studentNumber")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ CD ]
Line_19 $$ List resultList = (List) results-->Line_21 $$ StudentDTO dto = (StudentDTO) resultList.get(0)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertEquals(shermanExpected.getName(), dto.getName())[ CD ]
Line_21 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_23 $$ assertEquals(yogiExpected.getName(), dto.getName())[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(yogiExpected.getName(), dto.getName())[ CD ]
Line_21 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_22 $$ assertNull(dto.getDescription())[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertNull(dto.getDescription())[ CD ]
Line_10 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select st.name as studentName from Student st order by st.studentNumber").setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ FD ]
Line_19 $$ List resultList = (List) results-->Line_24 $$ dto = (StudentDTO) resultList.get(1)[ FD ]
Line_24 $$ dto = (StudentDTO) resultList.get(1)-->Line_26 $$ assertEquals(shermanExpected.getName(), dto.getName())[ FD ]
Line_21 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_26 $$ assertEquals(shermanExpected.getName(), dto.getName())[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_29 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_13 $$ return s.createQuery("select st.name as studentName from Student st order by st.studentNumber").setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ FD ]
Line_19 $$ List resultList = (List) results-->Line_20 $$ assertEquals(2, resultList.size())[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(2, resultList.size())[ CD ]
Line_10 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select st.name as studentName from Student st order by st.studentNumber").setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ CD ]
Line_24 $$ dto = (StudentDTO) resultList.get(1)-->Line_25 $$ assertNull(dto.getDescription())[ FD ]
Line_21 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_25 $$ assertNull(dto.getDescription())[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertNull(dto.getDescription())[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ dto = (StudentDTO) resultList.get(1)[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Enrolment.class, "e").createAlias("e.student", "st").createAlias("e.course", "co").setProjection(Projections.property("st.name").as("studentName")).addOrder(Order.asc("st.studentNumber")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class))[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ StudentDTO dto = (StudentDTO) resultList.get(0)[ CD ]
