Line_4 $$ List<Integer> sortChannels = Ints.asList(0, 1, 2)-->Line_8 $$ assertSorted(inputPages, expectedPages, types, sortChannels, sortOrders, 100)[ FD ]
Line_2 $$ public void testPageSorterMultipleChannels() throws Exception -->Line_7 $$ List<Page> expectedPages = RowPagesBuilder.rowPagesBuilder(types).row(1, null, null).row(1, null, "z").row(1, 2.2, null).row(1, 2.2, "a").row(1, 2.2, "b").row(1, 2.2, "c").row(2, 1.1, "d").build()[ CD ]
Line_2 $$ public void testPageSorterMultipleChannels() throws Exception -->Line_4 $$ List<Integer> sortChannels = Ints.asList(0, 1, 2)[ CD ]
Line_4 $$ List<Integer> sortChannels = Ints.asList(0, 1, 2)-->Line_5 $$ List<SortOrder> sortOrders = Collections.nCopies(sortChannels.size(), ASC_NULLS_FIRST)[ FD ]
Line_2 $$ public void testPageSorterMultipleChannels() throws Exception -->Line_6 $$ List<Page> inputPages = RowPagesBuilder.rowPagesBuilder(types).row(2, 1.1, "d").row(1, 2.2, "c").pageBreak().row(1, 2.2, "b").row(1, 2.2, "a").pageBreak().row(1, 2.2, null).row(1, null, "z").row(1, null, null).build()[ CD ]
Line_3 $$ List<Type> types = ImmutableList.of(BIGINT, DOUBLE, VARCHAR)-->Line_8 $$ assertSorted(inputPages, expectedPages, types, sortChannels, sortOrders, 100)[ FD ]
Line_2 $$ public void testPageSorterMultipleChannels() throws Exception -->Line_3 $$ List<Type> types = ImmutableList.of(BIGINT, DOUBLE, VARCHAR)[ CD ]
Line_6 $$ List<Page> inputPages = RowPagesBuilder.rowPagesBuilder(types).row(2, 1.1, "d").row(1, 2.2, "c").pageBreak().row(1, 2.2, "b").row(1, 2.2, "a").pageBreak().row(1, 2.2, null).row(1, null, "z").row(1, null, null).build()-->Line_8 $$ assertSorted(inputPages, expectedPages, types, sortChannels, sortOrders, 100)[ FD ]
Line_5 $$ List<SortOrder> sortOrders = Collections.nCopies(sortChannels.size(), ASC_NULLS_FIRST)-->Line_8 $$ assertSorted(inputPages, expectedPages, types, sortChannels, sortOrders, 100)[ FD ]
Line_7 $$ List<Page> expectedPages = RowPagesBuilder.rowPagesBuilder(types).row(1, null, null).row(1, null, "z").row(1, 2.2, null).row(1, 2.2, "a").row(1, 2.2, "b").row(1, 2.2, "c").row(2, 1.1, "d").build()-->Line_8 $$ assertSorted(inputPages, expectedPages, types, sortChannels, sortOrders, 100)[ FD ]
Line_3 $$ List<Type> types = ImmutableList.of(BIGINT, DOUBLE, VARCHAR)-->Line_6 $$ List<Page> inputPages = RowPagesBuilder.rowPagesBuilder(types).row(2, 1.1, "d").row(1, 2.2, "c").pageBreak().row(1, 2.2, "b").row(1, 2.2, "a").pageBreak().row(1, 2.2, null).row(1, null, "z").row(1, null, null).build()[ FD ]
Line_2 $$ public void testPageSorterMultipleChannels() throws Exception -->Line_5 $$ List<SortOrder> sortOrders = Collections.nCopies(sortChannels.size(), ASC_NULLS_FIRST)[ CD ]
Line_2 $$ public void testPageSorterMultipleChannels() throws Exception -->Line_8 $$ assertSorted(inputPages, expectedPages, types, sortChannels, sortOrders, 100)[ CD ]
Line_3 $$ List<Type> types = ImmutableList.of(BIGINT, DOUBLE, VARCHAR)-->Line_7 $$ List<Page> expectedPages = RowPagesBuilder.rowPagesBuilder(types).row(1, null, null).row(1, null, "z").row(1, 2.2, null).row(1, 2.2, "a").row(1, 2.2, "b").row(1, 2.2, "c").row(2, 1.1, "d").build()[ FD ]
