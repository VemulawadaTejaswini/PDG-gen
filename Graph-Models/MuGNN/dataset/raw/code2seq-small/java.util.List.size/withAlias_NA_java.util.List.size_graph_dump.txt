Line_11 $$ Field field = allFields.get(i)-->Line_12 $$ Optional<String> columnAlias = field.getName()[ FD ]
Line_9 $$ ImmutableList.Builder<Field> fieldsBuilder = ImmutableList.builder()-->Line_18 $$ fieldsBuilder.add(Field.newQualified(QualifiedName.of(relationAlias), columnAlias, field.getType(), false))[ FD ]
Line_15 $$ if (!field.isHidden()) -->Line_18 $$ fieldsBuilder.add(Field.newQualified(QualifiedName.of(relationAlias), columnAlias, field.getType(), false))[ CD ]
Line_10 $$ for (int i = 0; i < allFields.size(); i++) -->Line_11 $$ Field field = allFields.get(i)[ CD ]
Line_11 $$ Field field = allFields.get(i)-->Line_15 $$ if (!field.isHidden()) [ FD ]
Line_12 $$ Optional<String> columnAlias = field.getName()-->Line_18 $$ fieldsBuilder.add(Field.newQualified(QualifiedName.of(relationAlias), columnAlias, field.getType(), false))[ FD ]
Line_10 $$ for (int i = 0; i < allFields.size(); i++) -->Line_13 $$ if (columnAliases == null) [ CD ]
Line_9 $$ ImmutableList.Builder<Field> fieldsBuilder = ImmutableList.builder()-->Line_14 $$ fieldsBuilder.add(Field.newQualified(QualifiedName.of(relationAlias), columnAlias, field.getType(), field.isHidden()))[ FD ]
Line_12 $$ Optional<String> columnAlias = field.getName()-->Line_14 $$ fieldsBuilder.add(Field.newQualified(QualifiedName.of(relationAlias), columnAlias, field.getType(), field.isHidden()))[ FD ]
Line_6 $$ if (columnAliases != null) -->Line_7 $$ checkArgument(columnAliases.size() == visibleFields.size(), "Column alias list has %s entries but '%s' has %s columns available", columnAliases.size(), relationAlias, visibleFields.size())[ CD ]
Line_10 $$ for (int i = 0; i < allFields.size(); i++) -->Line_12 $$ Optional<String> columnAlias = field.getName()[ CD ]
Line_11 $$ Field field = allFields.get(i)-->Line_14 $$ fieldsBuilder.add(Field.newQualified(QualifiedName.of(relationAlias), columnAlias, field.getType(), field.isHidden()))[ FD ]
Line_11 $$ Field field = allFields.get(i)-->Line_18 $$ fieldsBuilder.add(Field.newQualified(QualifiedName.of(relationAlias), columnAlias, field.getType(), false))[ FD ]
Line_9 $$ ImmutableList.Builder<Field> fieldsBuilder = ImmutableList.builder()-->Line_21 $$ return new RelationType(fieldsBuilder.build())[ FD ]
Line_10 $$ for (int i = 0; i < allFields.size(); i++) -->Line_11 $$ Field field = allFields.get(i)[ FD ]
Line_13 $$ if (columnAliases == null) -->Line_15 $$ if (!field.isHidden()) [ CD ]
Line_13 $$ if (columnAliases == null) -->Line_14 $$ fieldsBuilder.add(Field.newQualified(QualifiedName.of(relationAlias), columnAlias, field.getType(), field.isHidden()))[ CD ]
