Line_49 $$ if (argument != null) -->Line_50 $$ verify(this.preparedStatement).setObject(1, argument)[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_4 $$ String[] results = [ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_18 $$ given(this.resultSet.next()).willReturn(true, true, true, false)[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_24 $$ if (fetchSize != null) [ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_27 $$ if (maxRows != null) [ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_30 $$ if (queryTimeout != null) [ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_24 $$ if (fetchSize != null) [ CD ]
Line_46 $$ if (queryTimeout != null) -->Line_47 $$ verify(this.preparedStatement).setQueryTimeout(queryTimeout.intValue())[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_52 $$ verify(this.resultSet).close()[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_49 $$ if (argument != null) [ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_30 $$ if (queryTimeout != null) [ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_43 $$ if (maxRows != null) [ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_23 $$ template.setDataSource(this.dataSource)[ CD ]
Line_30 $$ if (queryTimeout != null) -->Line_31 $$ template.setQueryTimeout(queryTimeout.intValue())[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_46 $$ if (queryTimeout != null) [ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_20 $$ given(this.connection.createStatement()).willReturn(this.preparedStatement)[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_43 $$ if (maxRows != null) [ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_37 $$ for (int i = 0; i < forenames.length; i++) [ CD ]
Line_5 $$ class StringHandler implements RowCallbackHandler -->Line_11 $$ this.list.add(rs.getString(1))[ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_53 $$ verify(this.preparedStatement).close()[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_50 $$ verify(this.preparedStatement).setObject(1, argument)[ FD ]
Line_43 $$ if (maxRows != null) -->Line_44 $$ verify(this.preparedStatement).setMaxRows(maxRows.intValue())[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_31 $$ template.setQueryTimeout(queryTimeout.intValue())[ FD ]
Line_27 $$ if (maxRows != null) -->Line_28 $$ template.setMaxRows(maxRows.intValue())[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_33 $$ jdbcTemplateCallback.doInJdbcTemplate(template, sql, sh)[ CD ]
Line_40 $$ if (fetchSize != null) -->Line_41 $$ verify(this.preparedStatement).setFetchSize(fetchSize.intValue())[ CD ]
Line_37 $$ for (int i = 0; i < forenames.length; i++) -->Line_38 $$ assertTrue("Row " + i + " matches", forenames[i].equals(results[i]))[ CD ]
Line_5 $$ class StringHandler implements RowCallbackHandler -->Line_11 $$ this.list.add(rs.getString(1))[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_19 $$ given(this.resultSet.getString(1)).willReturn(results[0], results[1], results[2])[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_49 $$ if (argument != null) [ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_33 $$ jdbcTemplateCallback.doInJdbcTemplate(template, sql, sh)[ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_25 $$ template.setFetchSize(fetchSize.intValue())[ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_47 $$ verify(this.preparedStatement).setQueryTimeout(queryTimeout.intValue())[ FD ]
Line_24 $$ if (fetchSize != null) -->Line_25 $$ template.setFetchSize(fetchSize.intValue())[ CD ]
Line_5 $$ class StringHandler implements RowCallbackHandler -->Line_15 $$ return this.list.toArray(new String[this.list.size()])[ CD ]
Line_3 $$ String sql = "SELECT FORENAME FROM CUSTMR"-->Line_33 $$ jdbcTemplateCallback.doInJdbcTemplate(template, sql, sh)[ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_44 $$ verify(this.preparedStatement).setMaxRows(maxRows.intValue())[ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_28 $$ template.setMaxRows(maxRows.intValue())[ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_36 $$ assertTrue("same length", forenames.length == results.length)[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_40 $$ if (fetchSize != null) [ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_40 $$ if (fetchSize != null) [ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_46 $$ if (queryTimeout != null) [ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_54 $$ verify(this.connection).close()[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_3 $$ String sql = "SELECT FORENAME FROM CUSTMR"[ CD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_41 $$ verify(this.preparedStatement).setFetchSize(fetchSize.intValue())[ FD ]
Line_2 $$ private void doTestStrings(boolean usePreparedStatement, Integer fetchSize, Integer maxRows, Integer queryTimeout, Object argument, JdbcTemplateCallback jdbcTemplateCallback) throws Exception -->Line_27 $$ if (maxRows != null) [ FD ]
