Line_8 $$ job = new JobConf(conf)-->Line_16 $$ Submitter.setExecutable(job, fs.makeQualified(wordExec).toString())[ FD ]
Line_6 $$ job = mr.createJobConf()-->Line_18 $$ Submitter.setIsJavaRecordWriter(job, true)[ FD ]
Line_22 $$ if (numReduces == 0) -->Line_32 $$ rJob = Submitter.runJob(job)[ CD ]
Line_4 $$ JobConf job = null-->Line_16 $$ Submitter.setExecutable(job, fs.makeQualified(wordExec).toString())[ FD ]
Line_49 $$ for (int i = 0; i < results.size(); i++) -->Line_50 $$ assertEquals("pipes program " + program + " output " + i + " wrong", expectedResults[i], results.get(i))[ CD ]
Line_21 $$ RunningJob rJob = null-->Line_35 $$ Counters counters = rJob.getCounters()[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_37 $$ int numCounters = 0[ CD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_15 $$ fs.copyFromLocalFile(program, wordExec)[ CD ]
Line_4 $$ JobConf job = null-->Line_8 $$ job = new JobConf(conf)[ FD ]
Line_8 $$ job = new JobConf(conf)-->Line_18 $$ Submitter.setIsJavaRecordWriter(job, true)[ FD ]
Line_6 $$ job = mr.createJobConf()-->Line_19 $$ FileInputFormat.setInputPaths(job, inputPath)[ FD ]
Line_21 $$ RunningJob rJob = null-->Line_32 $$ rJob = Submitter.runJob(job)[ FD ]
Line_3 $$ Path wordExec = new Path("testing/bin/application")-->Line_15 $$ fs.copyFromLocalFile(program, wordExec)[ FD ]
Line_6 $$ job = mr.createJobConf()-->Line_32 $$ rJob = Submitter.runJob(job)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_15 $$ fs.copyFromLocalFile(program, wordExec)[ FD ]
Line_3 $$ Path wordExec = new Path("testing/bin/application")-->Line_14 $$ fs.delete(wordExec.getParent(), true)[ FD ]
Line_23 $$ rJob = Submitter.jobSubmit(job)-->Line_35 $$ Counters counters = rJob.getCounters()[ FD ]
Line_4 $$ JobConf job = null-->Line_20 $$ FileOutputFormat.setOutputPath(job, outputPath)[ FD ]
Line_44 $$ List<String> results = new ArrayList<String>()-->Line_49 $$ for (int i = 0; i < results.size(); i++) [ FD ]
Line_22 $$ if (numReduces == 0) -->Line_23 $$ rJob = Submitter.jobSubmit(job)[ CD ]
Line_23 $$ rJob = Submitter.jobSubmit(job)-->Line_34 $$ assertTrue("pipes job failed", rJob.isSuccessful())[ FD ]
Line_4 $$ JobConf job = null-->Line_19 $$ FileInputFormat.setInputPaths(job, inputPath)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_20 $$ FileOutputFormat.setOutputPath(job, outputPath)[ CD ]
Line_13 $$ FileSystem fs = dfs.getFileSystem()-->Line_16 $$ Submitter.setExecutable(job, fs.makeQualified(wordExec).toString())[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_22 $$ if (numReduces == 0) [ CD ]
Line_44 $$ List<String> results = new ArrayList<String>()-->Line_46 $$ results.add(MapReduceTestUtil.readOutput(p, job))[ FD ]
Line_6 $$ job = mr.createJobConf()-->Line_8 $$ job = new JobConf(conf)[ FD ]
Line_23 $$ rJob = Submitter.jobSubmit(job)-->Line_32 $$ rJob = Submitter.runJob(job)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_10 $$ job.setNumMapTasks(numMaps)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_19 $$ FileInputFormat.setInputPaths(job, inputPath)[ FD ]
Line_6 $$ job = mr.createJobConf()-->Line_10 $$ job.setNumMapTasks(numMaps)[ FD ]
Line_6 $$ job = mr.createJobConf()-->Line_17 $$ Submitter.setIsJavaRecordReader(job, true)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_11 $$ job.setNumReduceTasks(numReduces)[ CD ]
Line_3 $$ Path wordExec = new Path("testing/bin/application")-->Line_16 $$ Submitter.setExecutable(job, fs.makeQualified(wordExec).toString())[ FD ]
Line_8 $$ job = new JobConf(conf)-->Line_32 $$ rJob = Submitter.runJob(job)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_10 $$ job.setNumMapTasks(numMaps)[ CD ]
Line_6 $$ job = mr.createJobConf()-->Line_46 $$ results.add(MapReduceTestUtil.readOutput(p, job))[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_11 $$ job.setNumReduceTasks(numReduces)[ FD ]
Line_45 $$ for (Path p : FileUtil.stat2Paths(dfs.getFileSystem().listStatus(outputPath, new Utils.OutputFileUtils.OutputFilesFilter()))) -->Line_46 $$ results.add(MapReduceTestUtil.readOutput(p, job))[ FD ]
Line_32 $$ rJob = Submitter.runJob(job)-->Line_35 $$ Counters counters = rJob.getCounters()[ FD ]
Line_22 $$ if (numReduces == 0) -->Line_24 $$ while (!rJob.isComplete()) [ CD ]
Line_35 $$ Counters counters = rJob.getCounters()-->Line_36 $$ Counters.Group wordCountCounters = counters.getGroup("WORDCOUNT")[ FD ]
Line_5 $$ if (conf == null) -->Line_8 $$ job = new JobConf(conf)[ CD ]
Line_21 $$ RunningJob rJob = null-->Line_24 $$ while (!rJob.isComplete()) [ FD ]
Line_13 $$ FileSystem fs = dfs.getFileSystem()-->Line_14 $$ fs.delete(wordExec.getParent(), true)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_34 $$ assertTrue("pipes job failed", rJob.isSuccessful())[ CD ]
Line_8 $$ job = new JobConf(conf)-->Line_17 $$ Submitter.setIsJavaRecordReader(job, true)[ FD ]
Line_8 $$ job = new JobConf(conf)-->Line_20 $$ FileOutputFormat.setOutputPath(job, outputPath)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_3 $$ Path wordExec = new Path("testing/bin/application")[ CD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_13 $$ FileSystem fs = dfs.getFileSystem()[ FD ]
Line_21 $$ RunningJob rJob = null-->Line_34 $$ assertTrue("pipes job failed", rJob.isSuccessful())[ FD ]
Line_8 $$ job = new JobConf(conf)-->Line_19 $$ FileInputFormat.setInputPaths(job, inputPath)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_6 $$ job = mr.createJobConf()[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_18 $$ Submitter.setIsJavaRecordWriter(job, true)[ CD ]
Line_23 $$ rJob = Submitter.jobSubmit(job)-->Line_24 $$ while (!rJob.isComplete()) [ FD ]
Line_38 $$ for (Counter c : wordCountCounters) -->Line_39 $$ System.out.println(c)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_44 $$ List<String> results = new ArrayList<String>()[ CD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_13 $$ FileSystem fs = dfs.getFileSystem()[ CD ]
Line_6 $$ job = mr.createJobConf()-->Line_23 $$ rJob = Submitter.jobSubmit(job)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_36 $$ Counters.Group wordCountCounters = counters.getGroup("WORDCOUNT")[ CD ]
Line_4 $$ JobConf job = null-->Line_32 $$ rJob = Submitter.runJob(job)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_22 $$ if (numReduces == 0) [ FD ]
Line_6 $$ job = mr.createJobConf()-->Line_11 $$ job.setNumReduceTasks(numReduces)[ FD ]
Line_8 $$ job = new JobConf(conf)-->Line_10 $$ job.setNumMapTasks(numMaps)[ FD ]
Line_21 $$ RunningJob rJob = null-->Line_23 $$ rJob = Submitter.jobSubmit(job)[ FD ]
Line_8 $$ job = new JobConf(conf)-->Line_23 $$ rJob = Submitter.jobSubmit(job)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_5 $$ if (conf == null) [ CD ]
Line_49 $$ for (int i = 0; i < results.size(); i++) -->Line_50 $$ assertEquals("pipes program " + program + " output " + i + " wrong", expectedResults[i], results.get(i))[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_21 $$ RunningJob rJob = null[ CD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_16 $$ Submitter.setExecutable(job, fs.makeQualified(wordExec).toString())[ CD ]
Line_6 $$ job = mr.createJobConf()-->Line_20 $$ FileOutputFormat.setOutputPath(job, outputPath)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_4 $$ JobConf job = null[ CD ]
Line_4 $$ JobConf job = null-->Line_10 $$ job.setNumMapTasks(numMaps)[ FD ]
Line_4 $$ JobConf job = null-->Line_23 $$ rJob = Submitter.jobSubmit(job)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_5 $$ if (conf == null) [ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_48 $$ assertEquals("number of reduces is wrong", expectedResults.length, results.size())[ CD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_49 $$ for (int i = 0; i < results.size(); i++) [ CD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_14 $$ fs.delete(wordExec.getParent(), true)[ CD ]
Line_4 $$ JobConf job = null-->Line_6 $$ job = mr.createJobConf()[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_45 $$ for (Path p : FileUtil.stat2Paths(dfs.getFileSystem().listStatus(outputPath, new Utils.OutputFileUtils.OutputFilesFilter()))) [ FD ]
Line_44 $$ List<String> results = new ArrayList<String>()-->Line_48 $$ assertEquals("number of reduces is wrong", expectedResults.length, results.size())[ FD ]
Line_32 $$ rJob = Submitter.runJob(job)-->Line_34 $$ assertTrue("pipes job failed", rJob.isSuccessful())[ FD ]
Line_44 $$ List<String> results = new ArrayList<String>()-->Line_50 $$ assertEquals("pipes program " + program + " output " + i + " wrong", expectedResults[i], results.get(i))[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_17 $$ Submitter.setIsJavaRecordReader(job, true)[ CD ]
Line_4 $$ JobConf job = null-->Line_17 $$ Submitter.setIsJavaRecordReader(job, true)[ FD ]
Line_4 $$ JobConf job = null-->Line_18 $$ Submitter.setIsJavaRecordWriter(job, true)[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_20 $$ FileOutputFormat.setOutputPath(job, outputPath)[ FD ]
Line_8 $$ job = new JobConf(conf)-->Line_46 $$ results.add(MapReduceTestUtil.readOutput(p, job))[ FD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_35 $$ Counters counters = rJob.getCounters()[ CD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_42 $$ assertTrue("No counters found!", (numCounters > 0))[ CD ]
Line_4 $$ JobConf job = null-->Line_46 $$ results.add(MapReduceTestUtil.readOutput(p, job))[ FD ]
Line_4 $$ JobConf job = null-->Line_11 $$ job.setNumReduceTasks(numReduces)[ FD ]
Line_8 $$ job = new JobConf(conf)-->Line_11 $$ job.setNumReduceTasks(numReduces)[ FD ]
Line_13 $$ FileSystem fs = dfs.getFileSystem()-->Line_15 $$ fs.copyFromLocalFile(program, wordExec)[ FD ]
Line_37 $$ int numCounters = 0-->Line_40 $$ ++numCounters[ FD ]
Line_6 $$ job = mr.createJobConf()-->Line_16 $$ Submitter.setExecutable(job, fs.makeQualified(wordExec).toString())[ FD ]
Line_5 $$ if (conf == null) -->Line_6 $$ job = mr.createJobConf()[ CD ]
Line_2 $$ static void runProgram(MiniMRCluster mr, MiniDFSCluster dfs, Path program, Path inputPath, Path outputPath, int numMaps, int numReduces, String[] expectedResults, JobConf conf) throws IOException -->Line_19 $$ FileInputFormat.setInputPaths(job, inputPath)[ CD ]
