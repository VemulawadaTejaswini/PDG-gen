Line_2 $$ private static List<CfSplit> tokenListToSplits(List<String> splitTokens, int splitSize) -->Line_4 $$ for (int index = 0; index < splitTokens.size() - 1; index++) [ CD ]
Line_3 $$ List<CfSplit> splits = Lists.newArrayListWithExpectedSize(splitTokens.size() - 1)-->Line_5 $$ splits.add(new CfSplit(splitTokens.get(index), splitTokens.get(index + 1), splitSize))[ FD ]
Line_2 $$ private static List<CfSplit> tokenListToSplits(List<String> splitTokens, int splitSize) -->Line_5 $$ splits.add(new CfSplit(splitTokens.get(index), splitTokens.get(index + 1), splitSize))[ FD ]
Line_2 $$ private static List<CfSplit> tokenListToSplits(List<String> splitTokens, int splitSize) -->Line_3 $$ List<CfSplit> splits = Lists.newArrayListWithExpectedSize(splitTokens.size() - 1)[ FD ]
Line_2 $$ private static List<CfSplit> tokenListToSplits(List<String> splitTokens, int splitSize) -->Line_3 $$ List<CfSplit> splits = Lists.newArrayListWithExpectedSize(splitTokens.size() - 1)[ CD ]
Line_4 $$ for (int index = 0; index < splitTokens.size() - 1; index++) -->Line_5 $$ splits.add(new CfSplit(splitTokens.get(index), splitTokens.get(index + 1), splitSize))[ CD ]
Line_2 $$ private static List<CfSplit> tokenListToSplits(List<String> splitTokens, int splitSize) -->Line_4 $$ for (int index = 0; index < splitTokens.size() - 1; index++) [ FD ]
Line_2 $$ private static List<CfSplit> tokenListToSplits(List<String> splitTokens, int splitSize) -->Line_7 $$ return splits[ CD ]
Line_4 $$ for (int index = 0; index < splitTokens.size() - 1; index++) -->Line_5 $$ splits.add(new CfSplit(splitTokens.get(index), splitTokens.get(index + 1), splitSize))[ FD ]
