Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_62 $$ if ((builtinsUpdated || PySdkUtil.isRemote(mySdk)) && myProject != null) [ CD ]
Line_35 $$ if (!binaries.modules.isEmpty()) -->Line_37 $$ final List<UpdateResult> updateErrors = updateOrCreateSkeletons(binaries.modules)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_51 $$ mySkeletonsGenerator.refreshGeneratedSkeletons()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_35 $$ if (!binaries.modules.isEmpty()) [ CD ]
Line_35 $$ if (!binaries.modules.isEmpty()) -->Line_36 $$ indicate(PyBundle.message("sdk.gen.updating.$0", readablePath))[ CD ]
Line_35 $$ if (!binaries.modules.isEmpty()) -->Line_38 $$ if (updateErrors.size() > 0) [ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_14 $$ final String extraSysPath = calculateExtraSysPath(mySdk, getSkeletonsPath())[ CD ]
Line_40 $$ for (UpdateResult error : updateErrors) -->Line_41 $$ if (error.isFresh())[ FD ]
Line_5 $$ final String skeletonsPath = getSkeletonsPath()-->Line_32 $$ copyBaseSdkSkeletonsToVirtualEnv(skeletonsPath, binaries)[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_56 $$ if (PySdkUtil.isRemote(mySdk)) [ CD ]
Line_27 $$ final boolean oldOrNonExisting = oldHeader == null || oldHeader.getVersion() == 0-->Line_28 $$ if (myPregeneratedSkeletons != null && oldOrNonExisting) [ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_26 $$ final SkeletonHeader oldHeader = readSkeletonHeader(builtinsFile)[ CD ]
Line_6 $$ final File skeletonsDir = new File(skeletonsPath)-->Line_8 $$ skeletonsDir.mkdirs()[ FD ]
Line_40 $$ for (UpdateResult error : updateErrors) -->Line_43 $$ myBlacklist.put(error.getPath(), new Pair<Integer, Long>(myGeneratorVersion, error.getTimestamp()))[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_25 $$ final File builtinsFile = new File(skeletonsPath, builtinsFileName)[ CD ]
Line_6 $$ final File skeletonsDir = new File(skeletonsPath)-->Line_47 $$ removeBlacklist(skeletonsDir)[ FD ]
Line_52 $$ if (!oldOrNonExisting) -->Line_53 $$ indicate(PyBundle.message("sdk.gen.cleaning.$0", readablePath))[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_3 $$ final List<String> errorList = new SmartList<String>()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_34 $$ final boolean builtinsUpdated = updateSkeletonsForBuiltins(readablePath, builtinsFile)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_69 $$ return errorList[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_15 $$ final PySkeletonGenerator.ListBinariesResult binaries = mySkeletonsGenerator.listBinaries(mySdk, extraSysPath)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_19 $$ if (cachedChecker != null) [ FD ]
Line_10 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)-->Line_34 $$ final boolean builtinsUpdated = updateSkeletonsForBuiltins(readablePath, builtinsFile)[ FD ]
Line_40 $$ for (UpdateResult error : updateErrors) -->Line_42 $$ errorList.add(error.getName())[ FD ]
Line_52 $$ if (!oldOrNonExisting) -->Line_54 $$ cleanUpSkeletons(skeletonsDir)[ CD ]
Line_31 $$ if (oldOrNonExisting) -->Line_32 $$ copyBaseSdkSkeletonsToVirtualEnv(skeletonsPath, binaries)[ CD ]
Line_63 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_65 $$ DaemonCodeAnalyzer.getInstance(myProject).restart()[ CD ]
Line_3 $$ final List<String> errorList = new SmartList<String>()-->Line_42 $$ errorList.add(error.getName())[ FD ]
Line_38 $$ if (updateErrors.size() > 0) -->Line_45 $$ storeBlacklist(skeletonsDir, myBlacklist)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_10 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)[ CD ]
Line_38 $$ if (updateErrors.size() > 0) -->Line_47 $$ removeBlacklist(skeletonsDir)[ CD ]
Line_62 $$ if ((builtinsUpdated || PySdkUtil.isRemote(mySdk)) && myProject != null) -->Line_63 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_27 $$ final boolean oldOrNonExisting = oldHeader == null || oldHeader.getVersion() == 0-->Line_52 $$ if (!oldOrNonExisting) [ FD ]
Line_10 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)-->Line_13 $$ indicate(PyBundle.message("sdk.gen.querying.$0", readablePath))[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_17 $$ myPregeneratedSkeletons = findPregeneratedSkeletons()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_20 $$ myVersionChecker = cachedChecker.withDefaultVersionIfUnknown(myGeneratorVersion)[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_5 $$ final String skeletonsPath = getSkeletonsPath()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_12 $$ myBlacklist = loadBlacklist()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_28 $$ if (myPregeneratedSkeletons != null && oldOrNonExisting) [ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_18 $$ indicate(PyBundle.message("sdk.gen.reading.versions.file"))[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_31 $$ if (oldOrNonExisting) [ CD ]
Line_14 $$ final String extraSysPath = calculateExtraSysPath(mySdk, getSkeletonsPath())-->Line_15 $$ final PySkeletonGenerator.ListBinariesResult binaries = mySkeletonsGenerator.listBinaries(mySdk, extraSysPath)[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_52 $$ if (!oldOrNonExisting) [ CD ]
Line_6 $$ final File skeletonsDir = new File(skeletonsPath)-->Line_54 $$ cleanUpSkeletons(skeletonsDir)[ FD ]
Line_38 $$ if (updateErrors.size() > 0) -->Line_39 $$ indicateMinor(BLACKLIST_FILE_NAME)[ CD ]
Line_19 $$ if (cachedChecker != null) -->Line_20 $$ myVersionChecker = cachedChecker.withDefaultVersionIfUnknown(myGeneratorVersion)[ CD ]
Line_6 $$ final File skeletonsDir = new File(skeletonsPath)-->Line_45 $$ storeBlacklist(skeletonsDir, myBlacklist)[ FD ]
Line_15 $$ final PySkeletonGenerator.ListBinariesResult binaries = mySkeletonsGenerator.listBinaries(mySdk, extraSysPath)-->Line_32 $$ copyBaseSdkSkeletonsToVirtualEnv(skeletonsPath, binaries)[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_13 $$ indicate(PyBundle.message("sdk.gen.querying.$0", readablePath))[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_7 $$ if (!skeletonsDir.exists()) [ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_19 $$ if (cachedChecker != null) [ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_24 $$ final String builtinsFileName = PythonSdkType.getBuiltinsFileName(mySdk)[ CD ]
Line_25 $$ final File builtinsFile = new File(skeletonsPath, builtinsFileName)-->Line_34 $$ final boolean builtinsUpdated = updateSkeletonsForBuiltins(readablePath, builtinsFile)[ FD ]
Line_10 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)-->Line_36 $$ indicate(PyBundle.message("sdk.gen.updating.$0", readablePath))[ FD ]
Line_37 $$ final List<UpdateResult> updateErrors = updateOrCreateSkeletons(binaries.modules)-->Line_38 $$ if (updateErrors.size() > 0) [ FD ]
Line_6 $$ final File skeletonsDir = new File(skeletonsPath)-->Line_7 $$ if (!skeletonsDir.exists()) [ FD ]
Line_4 $$ final String homePath = mySdk.getHomePath()-->Line_10 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)[ FD ]
Line_25 $$ final File builtinsFile = new File(skeletonsPath, builtinsFileName)-->Line_26 $$ final SkeletonHeader oldHeader = readSkeletonHeader(builtinsFile)[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_50 $$ indicate(PyBundle.message("sdk.gen.reloading"))[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_6 $$ final File skeletonsDir = new File(skeletonsPath)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_11 $$ mySkeletonsGenerator.prepare()[ CD ]
Line_41 $$ if (error.isFresh())-->Line_42 $$ errorList.add(error.getName())[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_4 $$ final String homePath = mySdk.getHomePath()[ CD ]
Line_7 $$ if (!skeletonsDir.exists()) -->Line_8 $$ skeletonsDir.mkdirs()[ CD ]
Line_10 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)-->Line_53 $$ indicate(PyBundle.message("sdk.gen.cleaning.$0", readablePath))[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_27 $$ final boolean oldOrNonExisting = oldHeader == null || oldHeader.getVersion() == 0[ CD ]
Line_28 $$ if (myPregeneratedSkeletons != null && oldOrNonExisting) -->Line_29 $$ unpackPreGeneratedSkeletons()[ CD ]
Line_26 $$ final SkeletonHeader oldHeader = readSkeletonHeader(builtinsFile)-->Line_27 $$ final boolean oldOrNonExisting = oldHeader == null || oldHeader.getVersion() == 0[ FD ]
