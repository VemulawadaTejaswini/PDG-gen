Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_21 $$ if (cachedChecker != null) [ CD ]
Line_3 $$ final List<String> errorList = new SmartList<String>()-->Line_45 $$ errorList.add(error.getName())[ FD ]
Line_55 $$ if (!oldOrNonExisting) -->Line_56 $$ indicate(PyBundle.message("sdk.gen.cleaning.$0", readablePath))[ CD ]
Line_28 $$ final File builtinsFile = new File(skeletonsPath, builtinsFileName)-->Line_37 $$ final boolean builtinsUpdated = updateSkeletonsForBuiltins(readablePath, builtinsFile)[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_14 $$ indicate(PyBundle.message("sdk.gen.querying.$0", readablePath))[ CD ]
Line_31 $$ if (myPregeneratedSkeletons != null && oldOrNonExisting) -->Line_32 $$ unpackPreGeneratedSkeletons()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_28 $$ final File builtinsFile = new File(skeletonsPath, builtinsFileName)[ CD ]
Line_40 $$ final List<UpdateResult> updateErrors = updateOrCreateSkeletons(binaries.modules)-->Line_41 $$ if (updateErrors.size() > 0) [ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_4 $$ final String homePath = mySdk.getHomePath()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_11 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)[ CD ]
Line_5 $$ final String skeletonsPath = getSkeletonsPath()-->Line_35 $$ copyBaseSdkSkeletonsToVirtualEnv(skeletonsPath, binaries)[ FD ]
Line_11 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)-->Line_56 $$ indicate(PyBundle.message("sdk.gen.cleaning.$0", readablePath))[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_17 $$ final PySkeletonGenerator.ListBinariesResult binaries = mySkeletonsGenerator.listBinaries(mySdk, extraSysPath)[ CD ]
Line_34 $$ if (oldOrNonExisting) -->Line_35 $$ copyBaseSdkSkeletonsToVirtualEnv(skeletonsPath, binaries)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_54 $$ mySkeletonsGenerator.refreshGeneratedSkeletons()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_19 $$ myPregeneratedSkeletons = findPregeneratedSkeletons()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_53 $$ indicate(PyBundle.message("sdk.gen.reloading"))[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_37 $$ final boolean builtinsUpdated = updateSkeletonsForBuiltins(readablePath, builtinsFile)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_22 $$ myVersionChecker = cachedChecker.withDefaultVersionIfUnknown(myGeneratorVersion)[ FD ]
Line_43 $$ for (UpdateResult error : updateErrors) -->Line_46 $$ myBlacklist.put(error.getPath(), new Pair<Integer, Long>(myGeneratorVersion, error.getTimestamp()))[ FD ]
Line_68 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_72 $$ DaemonCodeAnalyzer.getInstance(myProject).restart()[ CD ]
Line_4 $$ final String homePath = mySdk.getHomePath()-->Line_11 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)[ FD ]
Line_30 $$ final boolean oldOrNonExisting = oldHeader == null || oldHeader.getVersion() == 0-->Line_55 $$ if (!oldOrNonExisting) [ FD ]
Line_29 $$ final SkeletonHeader oldHeader = readSkeletonHeader(builtinsFile)-->Line_30 $$ final boolean oldOrNonExisting = oldHeader == null || oldHeader.getVersion() == 0[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_55 $$ if (!oldOrNonExisting) [ CD ]
Line_6 $$ final File skeletonsDir = new File(skeletonsPath)-->Line_7 $$ if (!skeletonsDir.exists()) [ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_59 $$ if (PySdkUtil.isRemote(mySdk)) [ CD ]
Line_43 $$ for (UpdateResult error : updateErrors) -->Line_44 $$ if (error.isFresh())[ FD ]
Line_43 $$ for (UpdateResult error : updateErrors) -->Line_45 $$ errorList.add(error.getName())[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_12 $$ mySkeletonsGenerator.prepare()[ CD ]
Line_41 $$ if (updateErrors.size() > 0) -->Line_42 $$ indicateMinor(BLACKLIST_FILE_NAME)[ CD ]
Line_67 $$ if ((builtinsUpdated || PySdkUtil.isRemote(mySdk)) && myProject != null) -->Line_68 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_38 $$ if (!binaries.modules.isEmpty()) -->Line_40 $$ final List<UpdateResult> updateErrors = updateOrCreateSkeletons(binaries.modules)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_7 $$ if (!skeletonsDir.exists()) [ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_30 $$ final boolean oldOrNonExisting = oldHeader == null || oldHeader.getVersion() == 0[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_21 $$ if (cachedChecker != null) [ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_29 $$ final SkeletonHeader oldHeader = readSkeletonHeader(builtinsFile)[ CD ]
Line_6 $$ final File skeletonsDir = new File(skeletonsPath)-->Line_48 $$ storeBlacklist(skeletonsDir, myBlacklist)[ FD ]
Line_17 $$ final PySkeletonGenerator.ListBinariesResult binaries = mySkeletonsGenerator.listBinaries(mySdk, extraSysPath)-->Line_35 $$ copyBaseSdkSkeletonsToVirtualEnv(skeletonsPath, binaries)[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_6 $$ final File skeletonsDir = new File(skeletonsPath)[ CD ]
Line_11 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)-->Line_14 $$ indicate(PyBundle.message("sdk.gen.querying.$0", readablePath))[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_20 $$ indicate(PyBundle.message("sdk.gen.reading.versions.file"))[ CD ]
Line_55 $$ if (!oldOrNonExisting) -->Line_57 $$ cleanUpSkeletons(skeletonsDir)[ CD ]
Line_6 $$ final File skeletonsDir = new File(skeletonsPath)-->Line_57 $$ cleanUpSkeletons(skeletonsDir)[ FD ]
Line_11 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)-->Line_37 $$ final boolean builtinsUpdated = updateSkeletonsForBuiltins(readablePath, builtinsFile)[ FD ]
Line_11 $$ final String readablePath = FileUtil.getLocationRelativeToUserHome(homePath)-->Line_39 $$ indicate(PyBundle.message("sdk.gen.updating.$0", readablePath))[ FD ]
Line_30 $$ final boolean oldOrNonExisting = oldHeader == null || oldHeader.getVersion() == 0-->Line_31 $$ if (myPregeneratedSkeletons != null && oldOrNonExisting) [ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_3 $$ final List<String> errorList = new SmartList<String>()[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_76 $$ return errorList[ CD ]
Line_28 $$ final File builtinsFile = new File(skeletonsPath, builtinsFileName)-->Line_29 $$ final SkeletonHeader oldHeader = readSkeletonHeader(builtinsFile)[ FD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_34 $$ if (oldOrNonExisting) [ CD ]
Line_38 $$ if (!binaries.modules.isEmpty()) -->Line_39 $$ indicate(PyBundle.message("sdk.gen.updating.$0", readablePath))[ CD ]
Line_41 $$ if (updateErrors.size() > 0) -->Line_48 $$ storeBlacklist(skeletonsDir, myBlacklist)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_5 $$ final String skeletonsPath = getSkeletonsPath()[ CD ]
Line_38 $$ if (!binaries.modules.isEmpty()) -->Line_41 $$ if (updateErrors.size() > 0) [ CD ]
Line_6 $$ final File skeletonsDir = new File(skeletonsPath)-->Line_50 $$ removeBlacklist(skeletonsDir)[ FD ]
Line_41 $$ if (updateErrors.size() > 0) -->Line_50 $$ removeBlacklist(skeletonsDir)[ CD ]
Line_21 $$ if (cachedChecker != null) -->Line_22 $$ myVersionChecker = cachedChecker.withDefaultVersionIfUnknown(myGeneratorVersion)[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_31 $$ if (myPregeneratedSkeletons != null && oldOrNonExisting) [ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_13 $$ myBlacklist = loadBlacklist()[ CD ]
Line_44 $$ if (error.isFresh())-->Line_45 $$ errorList.add(error.getName())[ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_67 $$ if ((builtinsUpdated || PySdkUtil.isRemote(mySdk)) && myProject != null) [ CD ]
Line_2 $$ public List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cachedChecker) throws InvalidSdkException -->Line_38 $$ if (!binaries.modules.isEmpty()) [ CD ]
