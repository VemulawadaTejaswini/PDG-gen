Line_6 $$ for (int number = 0; ; number++) -->Line_7 $$ int shift = getRangeShift(mySettings.range, number)[ FD ]
Line_10 $$ for (int i = 0; i < myCount; i++) -->Line_11 $$ rangeStarts[i] = bound(starts[i] + shift, i)[ FD ]
Line_7 $$ int shift = getRangeShift(mySettings.range, number)-->Line_8 $$ if (shift == -1)[ FD ]
Line_16 $$ if (result.size() > 0) -->Line_21 $$ myFoldings.add(block)[ CD ]
Line_2 $$ private void addRange(int[] starts, int[] ends) -->Line_5 $$ int[] rangeEnds = new int[myCount][ CD ]
Line_3 $$ List<FoldedBlock> result = new ArrayList<FoldedBlock>(3)-->Line_14 $$ ContainerUtil.addAllNotNull(result, createRange(rangeStarts, rangeEnds, myExpandSuggester.isExpanded(rangeStarts, rangeEnds)))[ FD ]
Line_17 $$ FoldedBlock[] block = ContainerUtil.toArray(result, new FoldedBlock[result.size()])-->Line_21 $$ myFoldings.add(block)[ FD ]
Line_2 $$ private void addRange(int[] starts, int[] ends) -->Line_6 $$ for (int number = 0; ; number++) [ CD ]
Line_6 $$ for (int number = 0; ; number++) -->Line_14 $$ ContainerUtil.addAllNotNull(result, createRange(rangeStarts, rangeEnds, myExpandSuggester.isExpanded(rangeStarts, rangeEnds)))[ CD ]
Line_16 $$ if (result.size() > 0) -->Line_17 $$ FoldedBlock[] block = ContainerUtil.toArray(result, new FoldedBlock[result.size()])[ CD ]
Line_2 $$ private void addRange(int[] starts, int[] ends) -->Line_4 $$ int[] rangeStarts = new int[myCount][ CD ]
Line_10 $$ for (int i = 0; i < myCount; i++) -->Line_11 $$ rangeStarts[i] = bound(starts[i] + shift, i)[ CD ]
Line_4 $$ int[] rangeStarts = new int[myCount]-->Line_14 $$ ContainerUtil.addAllNotNull(result, createRange(rangeStarts, rangeEnds, myExpandSuggester.isExpanded(rangeStarts, rangeEnds)))[ FD ]
Line_3 $$ List<FoldedBlock> result = new ArrayList<FoldedBlock>(3)-->Line_16 $$ if (result.size() > 0) [ FD ]
Line_10 $$ for (int i = 0; i < myCount; i++) -->Line_12 $$ rangeEnds[i] = bound(ends[i] - shift, i)[ FD ]
Line_6 $$ for (int number = 0; ; number++) -->Line_7 $$ int shift = getRangeShift(mySettings.range, number)[ CD ]
Line_2 $$ private void addRange(int[] starts, int[] ends) -->Line_3 $$ List<FoldedBlock> result = new ArrayList<FoldedBlock>(3)[ CD ]
Line_18 $$ for (FoldedBlock folding : block) -->Line_19 $$ folding.installHighlighter(block)[ FD ]
Line_3 $$ List<FoldedBlock> result = new ArrayList<FoldedBlock>(3)-->Line_17 $$ FoldedBlock[] block = ContainerUtil.toArray(result, new FoldedBlock[result.size()])[ FD ]
Line_2 $$ private void addRange(int[] starts, int[] ends) -->Line_16 $$ if (result.size() > 0) [ CD ]
Line_6 $$ for (int number = 0; ; number++) -->Line_8 $$ if (shift == -1)[ CD ]
Line_17 $$ FoldedBlock[] block = ContainerUtil.toArray(result, new FoldedBlock[result.size()])-->Line_19 $$ folding.installHighlighter(block)[ FD ]
Line_10 $$ for (int i = 0; i < myCount; i++) -->Line_12 $$ rangeEnds[i] = bound(ends[i] - shift, i)[ CD ]
Line_6 $$ for (int number = 0; ; number++) -->Line_10 $$ for (int i = 0; i < myCount; i++) [ CD ]
Line_5 $$ int[] rangeEnds = new int[myCount]-->Line_14 $$ ContainerUtil.addAllNotNull(result, createRange(rangeStarts, rangeEnds, myExpandSuggester.isExpanded(rangeStarts, rangeEnds)))[ FD ]
