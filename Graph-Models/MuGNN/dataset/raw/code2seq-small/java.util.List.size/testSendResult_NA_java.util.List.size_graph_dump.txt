Line_2 $$ public void testSendResult() throws Exception -->Line_15 $$ NoticeableFuture<Serializable> noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()[ CD ]
Line_15 $$ NoticeableFuture<Serializable> noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()-->Line_25 $$ noticeableFuture.get()[ FD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_4 $$ Channel channel = NettyTestUtil.createEmptyEmbeddedChannel()[ CD ]
Line_15 $$ NoticeableFuture<Serializable> noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()-->Line_20 $$ noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()[ FD ]
Line_19 $$ nettyFabricWorkerStub = installNettyFabricWorkerStub()-->Line_20 $$ noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()[ FD ]
Line_3 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>(), new LocalFabricAgent(new EmbeddedProcessExecutor()), Long.MAX_VALUE)-->Line_7 $$ nettyFabricWorkerExecutionChannelHandler.sendResult(channel, 0, StringPool.BLANK, null)[ FD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_19 $$ nettyFabricWorkerStub = installNettyFabricWorkerStub()[ CD ]
Line_20 $$ noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()-->Line_25 $$ noticeableFuture.get()[ FD ]
Line_4 $$ Channel channel = NettyTestUtil.createEmptyEmbeddedChannel()-->Line_7 $$ nettyFabricWorkerExecutionChannelHandler.sendResult(channel, 0, StringPool.BLANK, null)[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_9 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_14 $$ NettyFabricWorkerStub<Serializable> nettyFabricWorkerStub = installNettyFabricWorkerStub()-->Line_15 $$ NoticeableFuture<Serializable> noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()[ FD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_22 $$ nettyFabricWorkerExecutionChannelHandler.sendResult(_embeddedChannel, 0, null, throwable)[ CD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyFabricWorkerExecutionChannelHandler.class.getName(), Level.SEVERE)) -->Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_14 $$ NettyFabricWorkerStub<Serializable> nettyFabricWorkerStub = installNettyFabricWorkerStub()[ CD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_17 $$ invokeRPC()[ CD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_11 $$ Assert.assertEquals("Unable to send back fabric worker result " + "[ FD ]
Line_14 $$ NettyFabricWorkerStub<Serializable> nettyFabricWorkerStub = installNettyFabricWorkerStub()-->Line_19 $$ nettyFabricWorkerStub = installNettyFabricWorkerStub()[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_16 $$ nettyFabricWorkerExecutionChannelHandler.sendResult(_embeddedChannel, 0, StringPool.BLANK, null)[ CD ]
Line_3 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>(), new LocalFabricAgent(new EmbeddedProcessExecutor()), Long.MAX_VALUE)-->Line_16 $$ nettyFabricWorkerExecutionChannelHandler.sendResult(_embeddedChannel, 0, StringPool.BLANK, null)[ FD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_3 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>(), new LocalFabricAgent(new EmbeddedProcessExecutor()), Long.MAX_VALUE)[ CD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_20 $$ noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()[ CD ]
Line_15 $$ NoticeableFuture<Serializable> noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()-->Line_18 $$ Assert.assertEquals(StringPool.BLANK, noticeableFuture.get())[ FD ]
Line_21 $$ Throwable throwable = new Throwable()-->Line_22 $$ nettyFabricWorkerExecutionChannelHandler.sendResult(_embeddedChannel, 0, null, throwable)[ FD ]
Line_4 $$ Channel channel = NettyTestUtil.createEmptyEmbeddedChannel()-->Line_5 $$ channel.close()[ FD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_18 $$ Assert.assertEquals(StringPool.BLANK, noticeableFuture.get())[ CD ]
Line_3 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>(), new LocalFabricAgent(new EmbeddedProcessExecutor()), Long.MAX_VALUE)-->Line_22 $$ nettyFabricWorkerExecutionChannelHandler.sendResult(_embeddedChannel, 0, null, throwable)[ FD ]
Line_14 $$ NettyFabricWorkerStub<Serializable> nettyFabricWorkerStub = installNettyFabricWorkerStub()-->Line_20 $$ noticeableFuture = nettyFabricWorkerStub.getProcessNoticeableFuture()[ FD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_23 $$ invokeRPC()[ CD ]
Line_21 $$ Throwable throwable = new Throwable()-->Line_28 $$ Assert.assertSame(throwable, ee.getCause())[ FD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_13 $$ installNettyFabricAgentStub()[ CD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_5 $$ channel.close()[ CD ]
Line_2 $$ public void testSendResult() throws Exception -->Line_21 $$ Throwable throwable = new Throwable()[ CD ]
