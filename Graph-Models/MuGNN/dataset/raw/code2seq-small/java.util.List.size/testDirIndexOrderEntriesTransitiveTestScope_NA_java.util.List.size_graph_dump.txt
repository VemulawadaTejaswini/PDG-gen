Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_12 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(1), modules.get(2), modules.get(3)))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_16 $$ VirtualFile m6javaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m6/src/main/java"), true)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_23 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), null))[ CD ]
Line_16 $$ VirtualFile m6javaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m6/src/main/java"), true)-->Line_18 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_22 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(1), modules.get(4), modules.get(5)))[ CD ]
Line_28 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)-->Line_30 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))[ FD ]
Line_3 $$ List<Module> modules = setupDirIndexTestModulesWithScope("test")-->Line_36 $$ assertEquals(modules.get(2), jmockE1.getOwnerModule())[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_8 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_15 $$ assertInstanceOf(m3E1, ModuleSourceOrderEntry.class)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_37 $$ assertInstanceOf(jmockE1, LibraryOrderEntry.class)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_20 $$ List<Module> m6OwnerModules = orderEntriesToOwnerModules(m6OrderEntries)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_27 $$ assertNotNull(jmockDir)[ CD ]
Line_18 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))-->Line_20 $$ List<Module> m6OwnerModules = orderEntriesToOwnerModules(m6OrderEntries)[ FD ]
Line_18 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))-->Line_19 $$ assertEquals(3, m6OrderEntries.size())[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_17 $$ assertNotNull(m6javaDir)[ CD ]
Line_24 $$ OrderEntry m6E2 = m6OrderEntries.get(2)-->Line_25 $$ assertInstanceOf(m6E2, ModuleSourceOrderEntry.class)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_26 $$ VirtualFile jmockDir = VfsUtil.findFileByIoFile(new File(getRepositoryPath(), "jmock/jmock/1.0/jmock-1.0.jar"), true)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_28 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_35 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_14 $$ OrderEntry m3E1 = orderEntries.get(1)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_34 $$ assertInstanceOf(jmockE0, LibraryOrderEntry.class)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_21 $$ List<Module> m6DepModules = orderEntriesToDepModules(m6OrderEntries)[ CD ]
Line_3 $$ List<Module> modules = setupDirIndexTestModulesWithScope("test")-->Line_22 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(1), modules.get(4), modules.get(5)))[ FD ]
Line_3 $$ List<Module> modules = setupDirIndexTestModulesWithScope("test")-->Line_4 $$ assertEquals(6, modules.size())[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_11 $$ List<Module> depModules = orderEntriesToDepModules(orderEntries)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_18 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))[ CD ]
Line_26 $$ VirtualFile jmockDir = VfsUtil.findFileByIoFile(new File(getRepositoryPath(), "jmock/jmock/1.0/jmock-1.0.jar"), true)-->Line_27 $$ assertNotNull(jmockDir)[ FD ]
Line_35 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)-->Line_36 $$ assertEquals(modules.get(2), jmockE1.getOwnerModule())[ FD ]
Line_6 $$ VirtualFile m3JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m3/src/main/java"), true)-->Line_8 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_24 $$ OrderEntry m6E2 = m6OrderEntries.get(2)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_7 $$ assertNotNull(m3JavaDir)[ CD ]
Line_18 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))-->Line_21 $$ List<Module> m6DepModules = orderEntriesToDepModules(m6OrderEntries)[ FD ]
Line_3 $$ List<Module> modules = setupDirIndexTestModulesWithScope("test")-->Line_12 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(1), modules.get(2), modules.get(3)))[ FD ]
Line_6 $$ VirtualFile m3JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m3/src/main/java"), true)-->Line_7 $$ assertNotNull(m3JavaDir)[ FD ]
Line_21 $$ List<Module> m6DepModules = orderEntriesToDepModules(m6OrderEntries)-->Line_23 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), null))[ FD ]
Line_11 $$ List<Module> depModules = orderEntriesToDepModules(orderEntries)-->Line_13 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), null, modules.get(2)))[ FD ]
Line_28 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)-->Line_29 $$ assertNotNull(jmockJar)[ FD ]
Line_8 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))-->Line_10 $$ List<Module> ownerModules = orderEntriesToOwnerModules(orderEntries)[ FD ]
Line_30 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))-->Line_35 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_13 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), null, modules.get(2)))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_29 $$ assertNotNull(jmockJar)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_25 $$ assertInstanceOf(m6E2, ModuleSourceOrderEntry.class)[ CD ]
Line_14 $$ OrderEntry m3E1 = orderEntries.get(1)-->Line_15 $$ assertInstanceOf(m3E1, ModuleSourceOrderEntry.class)[ FD ]
Line_10 $$ List<Module> ownerModules = orderEntriesToOwnerModules(orderEntries)-->Line_12 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(1), modules.get(2), modules.get(3)))[ FD ]
Line_8 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))-->Line_11 $$ List<Module> depModules = orderEntriesToDepModules(orderEntries)[ FD ]
Line_8 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))-->Line_9 $$ assertEquals(3, orderEntries.size())[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_10 $$ List<Module> ownerModules = orderEntriesToOwnerModules(orderEntries)[ CD ]
Line_30 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))-->Line_31 $$ assertEquals(2, jmockOrderEntries.size())[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_32 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_4 $$ assertEquals(6, modules.size())[ CD ]
Line_32 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)-->Line_34 $$ assertInstanceOf(jmockE0, LibraryOrderEntry.class)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_3 $$ List<Module> modules = setupDirIndexTestModulesWithScope("test")[ CD ]
Line_30 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))-->Line_32 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_33 $$ assertEquals(modules.get(1), jmockE0.getOwnerModule())[ CD ]
Line_8 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))-->Line_14 $$ OrderEntry m3E1 = orderEntries.get(1)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_9 $$ assertEquals(3, orderEntries.size())[ CD ]
Line_3 $$ List<Module> modules = setupDirIndexTestModulesWithScope("test")-->Line_13 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), null, modules.get(2)))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_19 $$ assertEquals(3, m6OrderEntries.size())[ CD ]
Line_35 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)-->Line_37 $$ assertInstanceOf(jmockE1, LibraryOrderEntry.class)[ FD ]
Line_3 $$ List<Module> modules = setupDirIndexTestModulesWithScope("test")-->Line_23 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), null))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_6 $$ VirtualFile m3JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m3/src/main/java"), true)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_36 $$ assertEquals(modules.get(2), jmockE1.getOwnerModule())[ CD ]
Line_20 $$ List<Module> m6OwnerModules = orderEntriesToOwnerModules(m6OrderEntries)-->Line_22 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(1), modules.get(4), modules.get(5)))[ FD ]
Line_3 $$ List<Module> modules = setupDirIndexTestModulesWithScope("test")-->Line_33 $$ assertEquals(modules.get(1), jmockE0.getOwnerModule())[ FD ]
Line_5 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)-->Line_18 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))[ FD ]
Line_5 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)-->Line_30 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_31 $$ assertEquals(2, jmockOrderEntries.size())[ CD ]
Line_26 $$ VirtualFile jmockDir = VfsUtil.findFileByIoFile(new File(getRepositoryPath(), "jmock/jmock/1.0/jmock-1.0.jar"), true)-->Line_28 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)[ FD ]
Line_16 $$ VirtualFile m6javaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m6/src/main/java"), true)-->Line_17 $$ assertNotNull(m6javaDir)[ FD ]
Line_18 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))-->Line_24 $$ OrderEntry m6E2 = m6OrderEntries.get(2)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_30 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))[ CD ]
Line_5 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)-->Line_8 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))[ FD ]
Line_32 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)-->Line_33 $$ assertEquals(modules.get(1), jmockE0.getOwnerModule())[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_5 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)[ CD ]
