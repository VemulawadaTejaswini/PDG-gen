Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_21 $$ assertNotNull(m6javaDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_9 $$ assertNotNull(m3JavaDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_27 $$ List<Module> m6DepModules = orderEntriesToDepModules(m6OrderEntries)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_19 $$ assertInstanceOf(m3E1, ModuleSourceOrderEntry.class)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_14 $$ List<Module> depModules = orderEntriesToDepModules(orderEntries)[ CD ]
Line_14 $$ List<Module> depModules = orderEntriesToDepModules(orderEntries)-->Line_16 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), null, modules.get(2)))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_40 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_44 $$ assertEquals(modules.get(2), jmockE1.getOwnerModule())[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_15 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(1), modules.get(2), modules.get(3)))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_28 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(1), modules.get(4), modules.get(5)))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_29 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), null))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_20 $$ VirtualFile m6javaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m6/src/main/java"), true)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_36 $$ assertNotNull(jmockJar)[ CD ]
Line_20 $$ VirtualFile m6javaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m6/src/main/java"), true)-->Line_21 $$ assertNotNull(m6javaDir)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_35 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_8 $$ VirtualFile m3JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m3/src/main/java"), true)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_43 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)[ CD ]
Line_40 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)-->Line_41 $$ assertEquals(modules.get(1), jmockE0.getOwnerModule())[ FD ]
Line_27 $$ List<Module> m6DepModules = orderEntriesToDepModules(m6OrderEntries)-->Line_29 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), null))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_45 $$ assertInstanceOf(jmockE1, LibraryOrderEntry.class)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_6 $$ assertEquals(6, modules.size())[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_26 $$ List<Module> m6OwnerModules = orderEntriesToOwnerModules(m6OrderEntries)[ CD ]
Line_40 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)-->Line_42 $$ assertInstanceOf(jmockE0, LibraryOrderEntry.class)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_34 $$ assertNotNull(jmockDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_39 $$ assertEquals(2, jmockOrderEntries.size())[ CD ]
Line_26 $$ List<Module> m6OwnerModules = orderEntriesToOwnerModules(m6OrderEntries)-->Line_28 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(1), modules.get(4), modules.get(5)))[ FD ]
Line_13 $$ List<Module> ownerModules = orderEntriesToOwnerModules(orderEntries)-->Line_15 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(1), modules.get(2), modules.get(3)))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_7 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_33 $$ VirtualFile jmockDir = VfsUtil.findFileByIoFile(new File(getRepositoryPath(), "jmock/jmock/1.0/jmock-1.0.jar"), true)[ CD ]
Line_8 $$ VirtualFile m3JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m3/src/main/java"), true)-->Line_9 $$ assertNotNull(m3JavaDir)[ FD ]
Line_35 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)-->Line_36 $$ assertNotNull(jmockJar)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_41 $$ assertEquals(modules.get(1), jmockE0.getOwnerModule())[ CD ]
Line_43 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)-->Line_45 $$ assertInstanceOf(jmockE1, LibraryOrderEntry.class)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_16 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), null, modules.get(2)))[ CD ]
Line_33 $$ VirtualFile jmockDir = VfsUtil.findFileByIoFile(new File(getRepositoryPath(), "jmock/jmock/1.0/jmock-1.0.jar"), true)-->Line_34 $$ assertNotNull(jmockDir)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_25 $$ assertEquals(3, m6OrderEntries.size())[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_13 $$ List<Module> ownerModules = orderEntriesToOwnerModules(orderEntries)[ CD ]
Line_43 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)-->Line_44 $$ assertEquals(modules.get(2), jmockE1.getOwnerModule())[ FD ]
Line_33 $$ VirtualFile jmockDir = VfsUtil.findFileByIoFile(new File(getRepositoryPath(), "jmock/jmock/1.0/jmock-1.0.jar"), true)-->Line_35 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_42 $$ assertInstanceOf(jmockE0, LibraryOrderEntry.class)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_12 $$ assertEquals(3, orderEntries.size())[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesTransitiveTestScope() throws IOException -->Line_32 $$ assertInstanceOf(m6E2, ModuleSourceOrderEntry.class)[ CD ]
