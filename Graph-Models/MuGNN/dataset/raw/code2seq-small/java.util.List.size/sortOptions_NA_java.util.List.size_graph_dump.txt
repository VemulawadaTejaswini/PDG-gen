Line_13 $$ if (anchorOptionName != null && names.contains(anchorOptionName)) -->Line_14 $$ if (each.getAnchor() == OptionAnchor.AFTER) [ CD ]
Line_2 $$ protected <T extends OrderedOption> List<T> sortOptions(Collection<T> options) -->Line_24 $$ List<T> result = new ArrayList<T>(options.size())[ FD ]
Line_2 $$ protected <T extends OrderedOption> List<T> sortOptions(Collection<T> options) -->Line_30 $$ assert result.size() == options.size()[ FD ]
Line_3 $$ Set<String> names = new THashSet<String>(ContainerUtil.map(options, new Function<OrderedOption, String>() -->Line_5 $$ return option.getOptionName()[ FD ]
Line_2 $$ protected <T extends OrderedOption> List<T> sortOptions(Collection<T> options) -->Line_3 $$ Set<String> names = new THashSet<String>(ContainerUtil.map(options, new Function<OrderedOption, String>() [ CD ]
Line_14 $$ if (each.getAnchor() == OptionAnchor.AFTER) -->Line_15 $$ afters.putValue(anchorOptionName, each)[ CD ]
Line_17 $$ if (each.getAnchor() == OptionAnchor.BEFORE) -->Line_18 $$ befores.putValue(anchorOptionName, each)[ CD ]
Line_14 $$ if (each.getAnchor() == OptionAnchor.AFTER) -->Line_17 $$ if (each.getAnchor() == OptionAnchor.BEFORE) [ CD ]
Line_3 $$ Set<String> names = new THashSet<String>(ContainerUtil.map(options, new Function<OrderedOption, String>() -->Line_5 $$ return option.getOptionName()[ CD ]
Line_2 $$ protected <T extends OrderedOption> List<T> sortOptions(Collection<T> options) -->Line_31 $$ return result[ CD ]
Line_2 $$ protected <T extends OrderedOption> List<T> sortOptions(Collection<T> options) -->Line_3 $$ Set<String> names = new THashSet<String>(ContainerUtil.map(options, new Function<OrderedOption, String>() [ FD ]
Line_3 $$ Set<String> names = new THashSet<String>(ContainerUtil.map(options, new Function<OrderedOption, String>() -->Line_13 $$ if (anchorOptionName != null && names.contains(anchorOptionName)) [ FD ]
Line_2 $$ protected <T extends OrderedOption> List<T> sortOptions(Collection<T> options) -->Line_8 $$ List<T> order = new ArrayList<T>(options.size())[ FD ]
