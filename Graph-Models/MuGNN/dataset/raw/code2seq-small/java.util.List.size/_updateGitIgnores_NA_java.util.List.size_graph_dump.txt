Line_24 $$ for (int i = 0; i < ignoresArray.length; i++) -->Line_26 $$ if (Validator.isNotNull(ignore) && !ignore.startsWith("/")) [ CD ]
Line_25 $$ String ignore = ignoresArray[i]-->Line_26 $$ if (Validator.isNotNull(ignore) && !ignore.startsWith("/")) [ FD ]
Line_2 $$ private void _updateGitIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_15 $$ Iterator<String> itr = ignores.iterator()[ CD ]
Line_10 $$ ignores = Collections.emptyList()-->Line_23 $$ String[] ignoresArray = ignores.toArray(new String[ignores.size()])[ FD ]
Line_26 $$ if (Validator.isNotNull(ignore) && !ignore.startsWith("/")) -->Line_27 $$ ignoresArray[i] = "/" + ignore[ CD ]
Line_23 $$ String[] ignoresArray = ignores.toArray(new String[ignores.size()])-->Line_30 $$ _fileUtil.write(destDirName + dirName + ".gitignore", StringUtil.merge(ignoresArray, "\n"))[ FD ]
Line_15 $$ Iterator<String> itr = ignores.iterator()-->Line_19 $$ itr.remove()[ FD ]
Line_12 $$ ignores = ListUtil.fromArray(_exec(_SVN_GET_IGNORES + srcDirName + dirName))-->Line_14 $$ Collections.sort(ignores)[ FD ]
Line_10 $$ ignores = Collections.emptyList()-->Line_14 $$ Collections.sort(ignores)[ FD ]
Line_4 $$ if (!_fileUtil.exists(srcDirName + dirName + ".svn")) -->Line_5 $$ _fileUtil.delete(gitIgnoreFile)[ CD ]
Line_8 $$ List<String> ignores = null-->Line_14 $$ Collections.sort(ignores)[ FD ]
Line_2 $$ private void _updateGitIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_4 $$ if (!_fileUtil.exists(srcDirName + dirName + ".svn")) [ CD ]
Line_17 $$ String ignore = itr.next()-->Line_18 $$ if (ignore.equals("classes")) [ FD ]
Line_3 $$ File gitIgnoreFile = new File(destDirName + dirName + ".gitignore")-->Line_32 $$ _fileUtil.delete(gitIgnoreFile)[ FD ]
Line_22 $$ if (!ignores.isEmpty()) -->Line_24 $$ for (int i = 0; i < ignoresArray.length; i++) [ CD ]
Line_2 $$ private void _updateGitIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_22 $$ if (!ignores.isEmpty()) [ CD ]
Line_4 $$ if (!_fileUtil.exists(srcDirName + dirName + ".svn")) -->Line_6 $$ return[ CD ]
Line_17 $$ String ignore = itr.next()-->Line_26 $$ if (Validator.isNotNull(ignore) && !ignore.startsWith("/")) [ FD ]
Line_12 $$ ignores = ListUtil.fromArray(_exec(_SVN_GET_IGNORES + srcDirName + dirName))-->Line_22 $$ if (!ignores.isEmpty()) [ FD ]
Line_15 $$ Iterator<String> itr = ignores.iterator()-->Line_16 $$ while (itr.hasNext()) [ FD ]
Line_22 $$ if (!ignores.isEmpty()) -->Line_30 $$ _fileUtil.write(destDirName + dirName + ".gitignore", StringUtil.merge(ignoresArray, "\n"))[ CD ]
Line_12 $$ ignores = ListUtil.fromArray(_exec(_SVN_GET_IGNORES + srcDirName + dirName))-->Line_15 $$ Iterator<String> itr = ignores.iterator()[ FD ]
Line_2 $$ private void _updateGitIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_9 $$ if (!dirName.contains("/docroot/")) [ FD ]
Line_12 $$ ignores = ListUtil.fromArray(_exec(_SVN_GET_IGNORES + srcDirName + dirName))-->Line_23 $$ String[] ignoresArray = ignores.toArray(new String[ignores.size()])[ FD ]
Line_22 $$ if (!ignores.isEmpty()) -->Line_23 $$ String[] ignoresArray = ignores.toArray(new String[ignores.size()])[ CD ]
Line_8 $$ List<String> ignores = null-->Line_10 $$ ignores = Collections.emptyList()[ FD ]
Line_8 $$ List<String> ignores = null-->Line_12 $$ ignores = ListUtil.fromArray(_exec(_SVN_GET_IGNORES + srcDirName + dirName))[ FD ]
Line_16 $$ while (itr.hasNext()) -->Line_17 $$ String ignore = itr.next()[ CD ]
Line_16 $$ while (itr.hasNext()) -->Line_18 $$ if (ignore.equals("classes")) [ CD ]
Line_3 $$ File gitIgnoreFile = new File(destDirName + dirName + ".gitignore")-->Line_5 $$ _fileUtil.delete(gitIgnoreFile)[ FD ]
Line_2 $$ private void _updateGitIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_8 $$ List<String> ignores = null[ CD ]
Line_10 $$ ignores = Collections.emptyList()-->Line_12 $$ ignores = ListUtil.fromArray(_exec(_SVN_GET_IGNORES + srcDirName + dirName))[ FD ]
Line_10 $$ ignores = Collections.emptyList()-->Line_15 $$ Iterator<String> itr = ignores.iterator()[ FD ]
Line_9 $$ if (!dirName.contains("/docroot/")) -->Line_10 $$ ignores = Collections.emptyList()[ CD ]
Line_15 $$ Iterator<String> itr = ignores.iterator()-->Line_17 $$ String ignore = itr.next()[ FD ]
Line_17 $$ String ignore = itr.next()-->Line_27 $$ ignoresArray[i] = "/" + ignore[ FD ]
Line_8 $$ List<String> ignores = null-->Line_15 $$ Iterator<String> itr = ignores.iterator()[ FD ]
Line_22 $$ if (!ignores.isEmpty()) -->Line_32 $$ _fileUtil.delete(gitIgnoreFile)[ CD ]
Line_2 $$ private void _updateGitIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_16 $$ while (itr.hasNext()) [ CD ]
Line_8 $$ List<String> ignores = null-->Line_23 $$ String[] ignoresArray = ignores.toArray(new String[ignores.size()])[ FD ]
Line_2 $$ private void _updateGitIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_9 $$ if (!dirName.contains("/docroot/")) [ CD ]
Line_18 $$ if (ignore.equals("classes")) -->Line_19 $$ itr.remove()[ CD ]
Line_10 $$ ignores = Collections.emptyList()-->Line_22 $$ if (!ignores.isEmpty()) [ FD ]
Line_2 $$ private void _updateGitIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_3 $$ File gitIgnoreFile = new File(destDirName + dirName + ".gitignore")[ CD ]
Line_2 $$ private void _updateGitIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_14 $$ Collections.sort(ignores)[ CD ]
Line_25 $$ String ignore = ignoresArray[i]-->Line_27 $$ ignoresArray[i] = "/" + ignore[ FD ]
Line_8 $$ List<String> ignores = null-->Line_22 $$ if (!ignores.isEmpty()) [ FD ]
Line_9 $$ if (!dirName.contains("/docroot/")) -->Line_12 $$ ignores = ListUtil.fromArray(_exec(_SVN_GET_IGNORES + srcDirName + dirName))[ CD ]
Line_24 $$ for (int i = 0; i < ignoresArray.length; i++) -->Line_25 $$ String ignore = ignoresArray[i][ CD ]
