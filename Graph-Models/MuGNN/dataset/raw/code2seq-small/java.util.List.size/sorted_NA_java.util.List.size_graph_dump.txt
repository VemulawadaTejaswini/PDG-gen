Line_3 $$ if (targets.size() == 1) -->Line_4 $$ return targets[ CD ]
Line_2 $$ public static List<RatedResolveResult> sorted(List<RatedResolveResult> targets) -->Line_6 $$ List<RatedResolveResult> ret = new SortedList<RatedResolveResult>(new Comparator<RatedResolveResult>() [ CD ]
Line_2 $$ public static List<RatedResolveResult> sorted(List<RatedResolveResult> targets) -->Line_3 $$ if (targets.size() == 1) [ CD ]
Line_6 $$ List<RatedResolveResult> ret = new SortedList<RatedResolveResult>(new Comparator<RatedResolveResult>() -->Line_9 $$ return another.getRate() - one.getRate()[ CD ]
Line_2 $$ public static List<RatedResolveResult> sorted(List<RatedResolveResult> targets) -->Line_12 $$ ret.addAll(targets)[ CD ]
Line_2 $$ public static List<RatedResolveResult> sorted(List<RatedResolveResult> targets) -->Line_3 $$ if (targets.size() == 1) [ FD ]
Line_6 $$ List<RatedResolveResult> ret = new SortedList<RatedResolveResult>(new Comparator<RatedResolveResult>() -->Line_12 $$ ret.addAll(targets)[ FD ]
Line_6 $$ List<RatedResolveResult> ret = new SortedList<RatedResolveResult>(new Comparator<RatedResolveResult>() -->Line_9 $$ return another.getRate() - one.getRate()[ FD ]
Line_2 $$ public static List<RatedResolveResult> sorted(List<RatedResolveResult> targets) -->Line_13 $$ return ret[ CD ]
Line_2 $$ public static List<RatedResolveResult> sorted(List<RatedResolveResult> targets) -->Line_12 $$ ret.addAll(targets)[ FD ]
