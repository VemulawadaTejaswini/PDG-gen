Line_2 $$ public void testJobUtilProcessesAllItems_Performance() throws Exception -->Line_4 $$ final AtomicReference<Exception> exception = new AtomicReference<Exception>()[ CD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_16 $$ if (exception.get() != null)[ CD ]
Line_8 $$ JobLauncher.getInstance().invokeConcurrentlyUnderProgress(list, null, false, new Processor<String>() -->Line_13 $$ return true[ CD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_20 $$ assertEquals(list.size(), COUNT.get())[ CD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_18 $$ long finish = System.currentTimeMillis()[ CD ]
Line_4 $$ final AtomicReference<Exception> exception = new AtomicReference<Exception>()-->Line_17 $$ throw exception.get()[ FD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_19 $$ System.out.println("Elapsed: " + (finish - start) + "ms")[ CD ]
Line_3 $$ List<String> list = Collections.nCopies(10000, null)-->Line_20 $$ assertEquals(list.size(), COUNT.get())[ FD ]
Line_2 $$ public void testJobUtilProcessesAllItems_Performance() throws Exception -->Line_3 $$ List<String> list = Collections.nCopies(10000, null)[ CD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_8 $$ JobLauncher.getInstance().invokeConcurrentlyUnderProgress(list, null, false, new Processor<String>() [ CD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_6 $$ long start = System.currentTimeMillis()[ CD ]
Line_8 $$ JobLauncher.getInstance().invokeConcurrentlyUnderProgress(list, null, false, new Processor<String>() -->Line_12 $$ busySleep(1)[ CD ]
Line_4 $$ final AtomicReference<Exception> exception = new AtomicReference<Exception>()-->Line_16 $$ if (exception.get() != null)[ FD ]
Line_2 $$ public void testJobUtilProcessesAllItems_Performance() throws Exception -->Line_5 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_5 $$ for (int i = 0; i < 10; i++) -->Line_7 $$ COUNT.set(0)[ CD ]
Line_3 $$ List<String> list = Collections.nCopies(10000, null)-->Line_8 $$ JobLauncher.getInstance().invokeConcurrentlyUnderProgress(list, null, false, new Processor<String>() [ FD ]
