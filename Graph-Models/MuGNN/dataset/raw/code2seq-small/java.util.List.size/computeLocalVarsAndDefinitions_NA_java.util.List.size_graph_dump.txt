Line_37 $$ InvocationExprent constructor = ((NewExprent) expr).getConstructor()-->Line_60 $$ List<VarFieldPair> pairMask = mapVarFieldPairs.get(refClassName).get(constructor.getStringDescriptor())[ FD ]
Line_43 $$ List<VarFieldPair> mask = mapVarMasks.get(refClassName).get(constructor.getStringDescriptor())-->Line_48 $$ for (int i = 0; i < mask.size(); i++) [ FD ]
Line_37 $$ InvocationExprent constructor = ((NewExprent) expr).getConstructor()-->Line_38 $$ if (constructor != null && mapVarMasks.containsKey(constructor.getClassname())) [ FD ]
Line_11 $$ if (nd.type != ClassNode.CLASS_LAMBDA && (nd.access & CodeConstants.ACC_STATIC) == 0 && (nd.access & CodeConstants.ACC_INTERFACE) == 0) -->Line_13 $$ Map<String, List<VarFieldPair>> mask = getMaskLocalVars(nd.getWrapper())[ CD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_66 $$ pairMask.set(i, null)[ FD ]
Line_11 $$ if (nd.type != ClassNode.CLASS_LAMBDA && (nd.access & CodeConstants.ACC_STATIC) == 0 && (nd.access & CodeConstants.ACC_INTERFACE) == 0) -->Line_12 $$ clTypes |= nd.type[ CD ]
Line_62 $$ pairMask = lstTemp-->Line_64 $$ for (int i = 0; i < pairMask.size(); i++) [ FD ]
Line_13 $$ Map<String, List<VarFieldPair>> mask = getMaskLocalVars(nd.getWrapper())-->Line_14 $$ if (mask.isEmpty()) [ FD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_49 $$ Exprent param = constructor.getLstParameters().get(i)[ CD ]
Line_110 $$ for (int i = 0; i < interPairMask.size(); i++) -->Line_111 $$ if (interPairMask.get(i) != null) [ CD ]
Line_65 $$ if (!InterpreterUtil.equalObjects(pairMask.get(i), lstTemp.get(i))) -->Line_66 $$ pairMask.set(i, null)[ CD ]
Line_42 $$ if (nestedClassNode.type != ClassNode.CLASS_MEMBER) -->Line_48 $$ for (int i = 0; i < mask.size(); i++) [ CD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_50 $$ VarFieldPair pair = null[ CD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_51 $$ if (param.type == Exprent.EXPRENT_VAR && mask.get(i) != null) [ CD ]
Line_47 $$ List<VarFieldPair> lstTemp = new ArrayList<VarFieldPair>()-->Line_58 $$ lstTemp.add(pair)[ FD ]
Line_44 $$ if (!mapVarFieldPairs.containsKey(refClassName)) -->Line_45 $$ mapVarFieldPairs.put(refClassName, new HashMap<String, List<VarFieldPair>>())[ CD ]
Line_47 $$ List<VarFieldPair> lstTemp = new ArrayList<VarFieldPair>()-->Line_65 $$ if (!InterpreterUtil.equalObjects(pairMask.get(i), lstTemp.get(i))) [ FD ]
Line_36 $$ if (expr.type == Exprent.EXPRENT_NEW) -->Line_37 $$ InvocationExprent constructor = ((NewExprent) expr).getConstructor()[ CD ]
Line_110 $$ for (int i = 0; i < interPairMask.size(); i++) -->Line_113 $$ interPairMask.set(i, null)[ FD ]
Line_37 $$ InvocationExprent constructor = ((NewExprent) expr).getConstructor()-->Line_43 $$ List<VarFieldPair> mask = mapVarMasks.get(refClassName).get(constructor.getStringDescriptor())[ FD ]
Line_37 $$ InvocationExprent constructor = ((NewExprent) expr).getConstructor()-->Line_70 $$ mapVarFieldPairs.get(refClassName).put(constructor.getStringDescriptor(), pairMask)[ FD ]
Line_6 $$ int clTypes = 0-->Line_24 $$ if (clTypes != ClassNode.CLASS_MEMBER) [ FD ]
Line_2 $$ private static void computeLocalVarsAndDefinitions(final ClassNode node) -->Line_41 $$ ClassNode nestedClassNode = node.getClassNode(refClassName)[ FD ]
Line_13 $$ Map<String, List<VarFieldPair>> mask = getMaskLocalVars(nd.getWrapper())-->Line_93 $$ mergeListSignatures(interPairMask, mask, false)[ FD ]
Line_13 $$ Map<String, List<VarFieldPair>> mask = getMaskLocalVars(nd.getWrapper())-->Line_48 $$ for (int i = 0; i < mask.size(); i++) [ FD ]
Line_2 $$ private static void computeLocalVarsAndDefinitions(final ClassNode node) -->Line_24 $$ if (clTypes != ClassNode.CLASS_MEMBER) [ CD ]
Line_61 $$ if (pairMask == null) -->Line_62 $$ pairMask = lstTemp[ CD ]
Line_12 $$ clTypes |= nd.type-->Line_24 $$ if (clTypes != ClassNode.CLASS_MEMBER) [ FD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_110 $$ for (int i = 0; i < interPairMask.size(); i++) [ FD ]
Line_13 $$ Map<String, List<VarFieldPair>> mask = getMaskLocalVars(nd.getWrapper())-->Line_18 $$ mapVarMasks.put(nd.classStruct.qualifiedName, mask)[ FD ]
Line_90 $$ if (interPairMask == null) -->Line_93 $$ mergeListSignatures(interPairMask, mask, false)[ CD ]
Line_38 $$ if (constructor != null && mapVarMasks.containsKey(constructor.getClassname())) -->Line_42 $$ if (nestedClassNode.type != ClassNode.CLASS_MEMBER) [ CD ]
Line_11 $$ if (nd.type != ClassNode.CLASS_LAMBDA && (nd.access & CodeConstants.ACC_STATIC) == 0 && (nd.access & CodeConstants.ACC_INTERFACE) == 0) -->Line_14 $$ if (mask.isEmpty()) [ CD ]
Line_60 $$ List<VarFieldPair> pairMask = mapVarFieldPairs.get(refClassName).get(constructor.getStringDescriptor())-->Line_70 $$ mapVarFieldPairs.get(refClassName).put(constructor.getStringDescriptor(), pairMask)[ FD ]
Line_64 $$ for (int i = 0; i < pairMask.size(); i++) -->Line_65 $$ if (!InterpreterUtil.equalObjects(pairMask.get(i), lstTemp.get(i))) [ CD ]
Line_15 $$ String message = "Nested class " + nd.classStruct.qualifiedName + " has no constructor!"-->Line_16 $$ DecompilerContext.getLogger().writeMessage(message, IFernflowerLogger.Severity.WARN)[ FD ]
Line_36 $$ if (expr.type == Exprent.EXPRENT_NEW) -->Line_38 $$ if (constructor != null && mapVarMasks.containsKey(constructor.getClassname())) [ CD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_64 $$ for (int i = 0; i < pairMask.size(); i++) [ FD ]
Line_51 $$ if (param.type == Exprent.EXPRENT_VAR && mask.get(i) != null) -->Line_52 $$ VarVersionPair varPair = new VarVersionPair((VarExprent) param)[ CD ]
Line_60 $$ List<VarFieldPair> pairMask = mapVarFieldPairs.get(refClassName).get(constructor.getStringDescriptor())-->Line_61 $$ if (pairMask == null) [ FD ]
Line_37 $$ InvocationExprent constructor = ((NewExprent) expr).getConstructor()-->Line_49 $$ Exprent param = constructor.getLstParameters().get(i)[ FD ]
Line_42 $$ if (nestedClassNode.type != ClassNode.CLASS_MEMBER) -->Line_43 $$ List<VarFieldPair> mask = mapVarMasks.get(refClassName).get(constructor.getStringDescriptor())[ CD ]
Line_42 $$ if (nestedClassNode.type != ClassNode.CLASS_MEMBER) -->Line_70 $$ mapVarFieldPairs.get(refClassName).put(constructor.getStringDescriptor(), pairMask)[ CD ]
Line_42 $$ if (nestedClassNode.type != ClassNode.CLASS_MEMBER) -->Line_60 $$ List<VarFieldPair> pairMask = mapVarFieldPairs.get(refClassName).get(constructor.getStringDescriptor())[ CD ]
Line_60 $$ List<VarFieldPair> pairMask = mapVarFieldPairs.get(refClassName).get(constructor.getStringDescriptor())-->Line_64 $$ for (int i = 0; i < pairMask.size(); i++) [ FD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_51 $$ if (param.type == Exprent.EXPRENT_VAR && mask.get(i) != null) [ FD ]
Line_14 $$ if (mask.isEmpty()) -->Line_18 $$ mapVarMasks.put(nd.classStruct.qualifiedName, mask)[ CD ]
Line_43 $$ List<VarFieldPair> mask = mapVarMasks.get(refClassName).get(constructor.getStringDescriptor())-->Line_51 $$ if (param.type == Exprent.EXPRENT_VAR && mask.get(i) != null) [ FD ]
Line_62 $$ pairMask = lstTemp-->Line_65 $$ if (!InterpreterUtil.equalObjects(pairMask.get(i), lstTemp.get(i))) [ FD ]
Line_111 $$ if (interPairMask.get(i) != null) -->Line_112 $$ if (found) [ CD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_65 $$ if (!InterpreterUtil.equalObjects(pairMask.get(i), lstTemp.get(i))) [ FD ]
Line_121 $$ if (pair != null && pair.fieldKey.length() > 0) -->Line_122 $$ nestedNode.mapFieldsToVars.put(pair.fieldKey, pair.varPair)[ CD ]
Line_64 $$ for (int i = 0; i < pairMask.size(); i++) -->Line_66 $$ pairMask.set(i, null)[ FD ]
Line_14 $$ if (mask.isEmpty()) -->Line_15 $$ String message = "Nested class " + nd.classStruct.qualifiedName + " has no constructor!"[ CD ]
Line_61 $$ if (pairMask == null) -->Line_64 $$ for (int i = 0; i < pairMask.size(); i++) [ CD ]
Line_6 $$ int clTypes = 0-->Line_12 $$ clTypes |= nd.type[ FD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_111 $$ if (interPairMask.get(i) != null) [ FD ]
Line_62 $$ pairMask = lstTemp-->Line_66 $$ pairMask.set(i, null)[ FD ]
Line_50 $$ VarFieldPair pair = null-->Line_58 $$ lstTemp.add(pair)[ FD ]
Line_60 $$ List<VarFieldPair> pairMask = mapVarFieldPairs.get(refClassName).get(constructor.getStringDescriptor())-->Line_62 $$ pairMask = lstTemp[ FD ]
Line_60 $$ List<VarFieldPair> pairMask = mapVarFieldPairs.get(refClassName).get(constructor.getStringDescriptor())-->Line_66 $$ pairMask.set(i, null)[ FD ]
Line_106 $$ if (interPairMask == null) -->Line_110 $$ for (int i = 0; i < interPairMask.size(); i++) [ CD ]
Line_64 $$ for (int i = 0; i < pairMask.size(); i++) -->Line_111 $$ if (interPairMask.get(i) != null) [ FD ]
Line_47 $$ List<VarFieldPair> lstTemp = new ArrayList<VarFieldPair>()-->Line_62 $$ pairMask = lstTemp[ FD ]
Line_60 $$ List<VarFieldPair> pairMask = mapVarFieldPairs.get(refClassName).get(constructor.getStringDescriptor())-->Line_65 $$ if (!InterpreterUtil.equalObjects(pairMask.get(i), lstTemp.get(i))) [ FD ]
Line_38 $$ if (constructor != null && mapVarMasks.containsKey(constructor.getClassname())) -->Line_41 $$ ClassNode nestedClassNode = node.getClassNode(refClassName)[ CD ]
Line_64 $$ for (int i = 0; i < pairMask.size(); i++) -->Line_65 $$ if (!InterpreterUtil.equalObjects(pairMask.get(i), lstTemp.get(i))) [ FD ]
Line_110 $$ for (int i = 0; i < interPairMask.size(); i++) -->Line_111 $$ if (interPairMask.get(i) != null) [ FD ]
Line_62 $$ pairMask = lstTemp-->Line_70 $$ mapVarFieldPairs.get(refClassName).put(constructor.getStringDescriptor(), pairMask)[ FD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_113 $$ interPairMask.set(i, null)[ FD ]
Line_42 $$ if (nestedClassNode.type != ClassNode.CLASS_MEMBER) -->Line_47 $$ List<VarFieldPair> lstTemp = new ArrayList<VarFieldPair>()[ CD ]
Line_2 $$ private static void computeLocalVarsAndDefinitions(final ClassNode node) -->Line_84 $$ ClassNode nestedNode = node.getClassNode(enclosing.getKey())[ FD ]
Line_2 $$ private static void computeLocalVarsAndDefinitions(final ClassNode node) -->Line_6 $$ int clTypes = 0[ CD ]
Line_13 $$ Map<String, List<VarFieldPair>> mask = getMaskLocalVars(nd.getWrapper())-->Line_51 $$ if (param.type == Exprent.EXPRENT_VAR && mask.get(i) != null) [ FD ]
Line_42 $$ if (nestedClassNode.type != ClassNode.CLASS_MEMBER) -->Line_61 $$ if (pairMask == null) [ CD ]
Line_13 $$ Map<String, List<VarFieldPair>> mask = getMaskLocalVars(nd.getWrapper())-->Line_103 $$ mergeListSignatures(interMask, mask, false)[ FD ]
Line_64 $$ for (int i = 0; i < pairMask.size(); i++) -->Line_113 $$ interPairMask.set(i, null)[ FD ]
Line_43 $$ List<VarFieldPair> mask = mapVarMasks.get(refClassName).get(constructor.getStringDescriptor())-->Line_93 $$ mergeListSignatures(interPairMask, mask, false)[ FD ]
Line_43 $$ List<VarFieldPair> mask = mapVarMasks.get(refClassName).get(constructor.getStringDescriptor())-->Line_103 $$ mergeListSignatures(interMask, mask, false)[ FD ]
Line_7 $$ for (ClassNode nd : node.nested) -->Line_13 $$ Map<String, List<VarFieldPair>> mask = getMaskLocalVars(nd.getWrapper())[ FD ]
Line_14 $$ if (mask.isEmpty()) -->Line_16 $$ DecompilerContext.getLogger().writeMessage(message, IFernflowerLogger.Severity.WARN)[ CD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_49 $$ Exprent param = constructor.getLstParameters().get(i)[ FD ]
Line_42 $$ if (nestedClassNode.type != ClassNode.CLASS_MEMBER) -->Line_71 $$ nestedClassNode.enclosingMethod = InterpreterUtil.makeUniqueKey(method.methodStruct.getName(), method.methodStruct.getDescriptor())[ CD ]
Line_112 $$ if (found) -->Line_113 $$ interPairMask.set(i, null)[ CD ]
Line_48 $$ for (int i = 0; i < mask.size(); i++) -->Line_58 $$ lstTemp.add(pair)[ CD ]
Line_33 $$ List<Exprent> lst = exprent.getAllExprents(true)-->Line_34 $$ lst.add(exprent)[ FD ]
Line_100 $$ if (interMask == null) -->Line_103 $$ mergeListSignatures(interMask, mask, false)[ CD ]
Line_64 $$ for (int i = 0; i < pairMask.size(); i++) -->Line_110 $$ for (int i = 0; i < interPairMask.size(); i++) [ FD ]
Line_42 $$ if (nestedClassNode.type != ClassNode.CLASS_MEMBER) -->Line_44 $$ if (!mapVarFieldPairs.containsKey(refClassName)) [ CD ]
