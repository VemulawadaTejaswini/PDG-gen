Line_11 $$ final List<String> aggregatesToDrop = copy(aggregates)-->Line_22 $$ schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))[ FD ]
Line_10 $$ final List<String> functionsToDrop = copy(functions)-->Line_23 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_21 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_22 $$ schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))[ FD ]
Line_21 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_24 $$ schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_22 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))-->Line_24 $$ for (int i = typesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_21 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_24 $$ for (int i = typesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_9 $$ final List<String> typesToDrop = copy(types)-->Line_24 $$ schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_11 $$ final List<String> aggregatesToDrop = copy(aggregates)-->Line_22 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))[ FD ]
Line_10 $$ final List<String> functionsToDrop = copy(functions)-->Line_23 $$ schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_22 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))-->Line_23 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_21 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_23 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_23 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))-->Line_24 $$ schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_8 $$ final List<String> tablesToDrop = copy(tables)-->Line_37 $$ removeAllSSTables(KEYSPACE, tablesToDrop)[ FD ]
Line_9 $$ final List<String> typesToDrop = copy(types)-->Line_24 $$ for (int i = typesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_21 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_22 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))[ FD ]
Line_21 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_23 $$ schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_23 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))-->Line_24 $$ for (int i = typesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_30 $$ ScheduledExecutors.nonPeriodicTasks.execute(new Runnable() -->Line_33 $$ latch.countDown()[ CD ]
Line_8 $$ final List<String> tablesToDrop = copy(tables)-->Line_21 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))[ FD ]
Line_8 $$ final List<String> tablesToDrop = copy(tables)-->Line_21 $$ schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))[ FD ]
Line_22 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))-->Line_24 $$ schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_22 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))-->Line_23 $$ schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
