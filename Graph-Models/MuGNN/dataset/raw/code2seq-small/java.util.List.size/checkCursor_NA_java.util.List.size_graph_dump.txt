Line_12 $$ fieldFromCursor = cursor.getBoolean(i)-->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_14 $$ fieldFromCursor = cursor.getLong(i)-->Line_18 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_7 $$ Object fieldFromCursor-->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_7 $$ Object fieldFromCursor-->Line_18 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_10 $$ fieldFromCursor = null-->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_7 $$ Object fieldFromCursor-->Line_14 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)-->Line_13 $$ if (BIGINT.equals(type)) [ FD ]
Line_6 $$ TestColumn testColumn = testColumns.get(i)-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_14 $$ fieldFromCursor = cursor.getLong(i)-->Line_20 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_7 $$ Object fieldFromCursor-->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_37 $$ Block expected = (Block) testColumn.getExpectedValue()-->Line_39 $$ assertBlockEquals(actual, expected, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_15 $$ if (DOUBLE.equals(type)) -->Line_16 $$ fieldFromCursor = cursor.getDouble(i)[ CD ]
Line_10 $$ fieldFromCursor = null-->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_6 $$ TestColumn testColumn = testColumns.get(i)-->Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)[ FD ]
Line_13 $$ if (BIGINT.equals(type)) -->Line_15 $$ if (DOUBLE.equals(type)) [ CD ]
Line_11 $$ if (BOOLEAN.equals(type)) -->Line_12 $$ fieldFromCursor = cursor.getBoolean(i)[ CD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_9 $$ if (cursor.isNull(i)) [ CD ]
Line_22 $$ fieldFromCursor = cursor.getLong(i)-->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_7 $$ Object fieldFromCursor-->Line_20 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_26 $$ fieldFromCursor = cursor.getObject(i)-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_10 $$ fieldFromCursor = null-->Line_20 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_16 $$ fieldFromCursor = cursor.getDouble(i)-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_6 $$ TestColumn testColumn = testColumns.get(i)-->Line_39 $$ assertBlockEquals(actual, expected, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_6 $$ TestColumn testColumn = testColumns.get(i)[ FD ]
Line_18 $$ fieldFromCursor = cursor.getSlice(i)-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_34 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_38 $$ Block actual = (Block) fieldFromCursor[ CD ]
Line_12 $$ fieldFromCursor = cursor.getBoolean(i)-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_30 $$ if (fieldFromCursor == null) -->Line_31 $$ assertEquals(null, testColumn.getExpectedValue(), String.format("Expected null for column %s", testColumn.getName()))[ CD ]
Line_7 $$ Object fieldFromCursor-->Line_16 $$ fieldFromCursor = cursor.getDouble(i)[ FD ]
Line_21 $$ if (DateType.DATE.equals(type)) -->Line_23 $$ if (TimestampType.TIMESTAMP.equals(type)) [ CD ]
Line_24 $$ fieldFromCursor = cursor.getLong(i)-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_12 $$ fieldFromCursor = cursor.getBoolean(i)-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_13 $$ if (BIGINT.equals(type)) -->Line_14 $$ fieldFromCursor = cursor.getLong(i)[ CD ]
Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)-->Line_11 $$ if (BOOLEAN.equals(type)) [ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_18 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_6 $$ TestColumn testColumn = testColumns.get(i)[ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)-->Line_21 $$ if (DateType.DATE.equals(type)) [ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_14 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_18 $$ fieldFromCursor = cursor.getSlice(i)-->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_14 $$ fieldFromCursor = cursor.getLong(i)-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_14 $$ fieldFromCursor = cursor.getLong(i)-->Line_16 $$ fieldFromCursor = cursor.getDouble(i)[ FD ]
Line_17 $$ if (VARCHAR.equals(type)) -->Line_19 $$ if (VARBINARY.equals(type)) [ CD ]
Line_23 $$ if (TimestampType.TIMESTAMP.equals(type)) -->Line_25 $$ if (isStructuralType(type)) [ CD ]
Line_22 $$ fieldFromCursor = cursor.getLong(i)-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_19 $$ if (VARBINARY.equals(type)) -->Line_21 $$ if (DateType.DATE.equals(type)) [ CD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_12 $$ fieldFromCursor = cursor.getBoolean(i)[ FD ]
Line_9 $$ if (cursor.isNull(i)) -->Line_10 $$ fieldFromCursor = null[ CD ]
Line_7 $$ Object fieldFromCursor-->Line_12 $$ fieldFromCursor = cursor.getBoolean(i)[ FD ]
Line_3 $$ for (int row = 0; row < numRows; row++) -->Line_4 $$ assertTrue(cursor.advanceNextPosition())[ CD ]
Line_7 $$ Object fieldFromCursor-->Line_10 $$ fieldFromCursor = null[ FD ]
Line_12 $$ fieldFromCursor = cursor.getBoolean(i)-->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_26 $$ fieldFromCursor = cursor.getObject(i)-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_16 $$ fieldFromCursor = cursor.getDouble(i)[ FD ]
Line_12 $$ fieldFromCursor = cursor.getBoolean(i)-->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_14 $$ fieldFromCursor = cursor.getLong(i)-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_3 $$ for (int row = 0; row < numRows; row++) -->Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) [ CD ]
Line_30 $$ if (fieldFromCursor == null) -->Line_32 $$ if (testColumn.getObjectInspector().getTypeName().equals("float") || testColumn.getObjectInspector().getTypeName().equals("double")) [ CD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_30 $$ if (fieldFromCursor == null) [ CD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_14 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_34 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ CD ]
Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)-->Line_25 $$ if (isStructuralType(type)) [ FD ]
Line_17 $$ if (VARCHAR.equals(type)) -->Line_18 $$ fieldFromCursor = cursor.getSlice(i)[ CD ]
Line_10 $$ fieldFromCursor = null-->Line_16 $$ fieldFromCursor = cursor.getDouble(i)[ FD ]
Line_12 $$ fieldFromCursor = cursor.getBoolean(i)-->Line_16 $$ fieldFromCursor = cursor.getDouble(i)[ FD ]
Line_6 $$ TestColumn testColumn = testColumns.get(i)-->Line_37 $$ Block expected = (Block) testColumn.getExpectedValue()[ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_6 $$ TestColumn testColumn = testColumns.get(i)[ CD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) [ FD ]
Line_16 $$ fieldFromCursor = cursor.getDouble(i)-->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_24 $$ fieldFromCursor = cursor.getLong(i)-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_18 $$ fieldFromCursor = cursor.getSlice(i)-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_12 $$ fieldFromCursor = cursor.getBoolean(i)-->Line_14 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_20 $$ fieldFromCursor = cursor.getSlice(i)-->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_3 $$ for (int row = 0; row < numRows; row++) [ CD ]
Line_14 $$ fieldFromCursor = cursor.getLong(i)-->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_7 $$ Object fieldFromCursor[ CD ]
Line_20 $$ fieldFromCursor = cursor.getSlice(i)-->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_22 $$ fieldFromCursor = cursor.getLong(i)-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_6 $$ TestColumn testColumn = testColumns.get(i)-->Line_34 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) [ FD ]
Line_16 $$ fieldFromCursor = cursor.getDouble(i)-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_14 $$ fieldFromCursor = cursor.getLong(i)-->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_24 $$ fieldFromCursor = cursor.getLong(i)-->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_21 $$ if (DateType.DATE.equals(type)) -->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ CD ]
Line_32 $$ if (testColumn.getObjectInspector().getTypeName().equals("float") || testColumn.getObjectInspector().getTypeName().equals("double")) -->Line_34 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) [ CD ]
Line_10 $$ fieldFromCursor = null-->Line_18 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_9 $$ if (cursor.isNull(i)) [ FD ]
Line_16 $$ fieldFromCursor = cursor.getDouble(i)-->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_32 $$ if (testColumn.getObjectInspector().getTypeName().equals("float") || testColumn.getObjectInspector().getTypeName().equals("double")) -->Line_33 $$ assertEquals((double) fieldFromCursor, (double) testColumn.getExpectedValue(), EPSILON)[ CD ]
Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)-->Line_15 $$ if (DOUBLE.equals(type)) [ FD ]
Line_34 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_37 $$ Block expected = (Block) testColumn.getExpectedValue()[ CD ]
Line_16 $$ fieldFromCursor = cursor.getDouble(i)-->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_20 $$ fieldFromCursor = cursor.getSlice(i)-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_10 $$ fieldFromCursor = null-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_4 $$ assertTrue(cursor.advanceNextPosition())[ FD ]
Line_18 $$ fieldFromCursor = cursor.getSlice(i)-->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_10 $$ fieldFromCursor = null-->Line_12 $$ fieldFromCursor = cursor.getBoolean(i)[ FD ]
Line_7 $$ Object fieldFromCursor-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_18 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_20 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_25 $$ if (isStructuralType(type)) -->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ CD ]
Line_7 $$ Object fieldFromCursor-->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_10 $$ fieldFromCursor = null-->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_16 $$ fieldFromCursor = cursor.getDouble(i)-->Line_18 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_20 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_20 $$ fieldFromCursor = cursor.getSlice(i)-->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_12 $$ fieldFromCursor = cursor.getBoolean(i)-->Line_20 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)-->Line_19 $$ if (VARBINARY.equals(type)) [ FD ]
Line_18 $$ fieldFromCursor = cursor.getSlice(i)-->Line_20 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_10 $$ fieldFromCursor = null-->Line_14 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_22 $$ fieldFromCursor = cursor.getLong(i)-->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_12 $$ fieldFromCursor = cursor.getBoolean(i)-->Line_18 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)[ CD ]
Line_10 $$ fieldFromCursor = null-->Line_35 $$ assertEquals(fieldFromCursor, testColumn.getExpectedValue(), String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_38 $$ Block actual = (Block) fieldFromCursor-->Line_39 $$ assertBlockEquals(actual, expected, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_3 $$ for (int row = 0; row < numRows; row++) [ FD ]
Line_11 $$ if (BOOLEAN.equals(type)) -->Line_13 $$ if (BIGINT.equals(type)) [ CD ]
Line_18 $$ fieldFromCursor = cursor.getSlice(i)-->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_6 $$ TestColumn testColumn = testColumns.get(i)-->Line_33 $$ assertEquals((double) fieldFromCursor, (double) testColumn.getExpectedValue(), EPSILON)[ FD ]
Line_14 $$ fieldFromCursor = cursor.getLong(i)-->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)-->Line_23 $$ if (TimestampType.TIMESTAMP.equals(type)) [ FD ]
Line_34 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_39 $$ assertBlockEquals(actual, expected, String.format("Wrong value for column %s", testColumn.getName()))[ CD ]
Line_16 $$ fieldFromCursor = cursor.getDouble(i)-->Line_20 $$ fieldFromCursor = cursor.getSlice(i)[ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_9 $$ if (cursor.isNull(i)) [ FD ]
Line_20 $$ fieldFromCursor = cursor.getSlice(i)-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_12 $$ fieldFromCursor = cursor.getBoolean(i)[ FD ]
Line_6 $$ TestColumn testColumn = testColumns.get(i)-->Line_31 $$ assertEquals(null, testColumn.getExpectedValue(), String.format("Expected null for column %s", testColumn.getName()))[ FD ]
Line_8 $$ Type type = HiveType.valueOf(testColumn.getObjectInspector().getTypeName()).getType(TYPE_MANAGER)-->Line_17 $$ if (VARCHAR.equals(type)) [ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_16 $$ fieldFromCursor = cursor.getDouble(i)[ FD ]
Line_23 $$ if (TimestampType.TIMESTAMP.equals(type)) -->Line_24 $$ fieldFromCursor = cursor.getLong(i)[ CD ]
Line_6 $$ TestColumn testColumn = testColumns.get(i)-->Line_32 $$ if (testColumn.getObjectInspector().getTypeName().equals("float") || testColumn.getObjectInspector().getTypeName().equals("double")) [ FD ]
Line_2 $$ protected void checkCursor(RecordCursor cursor, List<TestColumn> testColumns, int numRows) throws IOException -->Line_22 $$ fieldFromCursor = cursor.getLong(i)[ FD ]
Line_9 $$ if (cursor.isNull(i)) -->Line_11 $$ if (BOOLEAN.equals(type)) [ CD ]
Line_5 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_26 $$ fieldFromCursor = cursor.getObject(i)[ FD ]
Line_7 $$ Object fieldFromCursor-->Line_30 $$ if (fieldFromCursor == null) [ FD ]
Line_15 $$ if (DOUBLE.equals(type)) -->Line_17 $$ if (VARCHAR.equals(type)) [ CD ]
Line_19 $$ if (VARBINARY.equals(type)) -->Line_20 $$ fieldFromCursor = cursor.getSlice(i)[ CD ]
