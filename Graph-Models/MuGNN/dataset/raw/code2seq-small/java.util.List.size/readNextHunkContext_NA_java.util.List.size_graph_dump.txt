Line_37 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_61 $$ addContextDiffLine(hunk, beforeLine, PatchLine.Type.CONTEXT)[ FD ]
Line_71 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) -->Line_72 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ CD ]
Line_6 $$ if (curLine.startsWith(CONTEXT_FILE_PREFIX)) -->Line_7 $$ iterator.previous()[ CD ]
Line_51 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) -->Line_52 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)[ CD ]
Line_39 $$ int afterLineIndex = 0-->Line_76 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ FD ]
Line_37 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_65 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)[ FD ]
Line_39 $$ int afterLineIndex = 0-->Line_53 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)[ FD ]
Line_21 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_72 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_68 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)-->Line_76 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ FD ]
Line_70 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) -->Line_71 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) [ CD ]
Line_68 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)-->Line_58 $$ lastAfterPatchLine.setSuppressNewLine(true)[ FD ]
Line_6 $$ if (curLine.startsWith(CONTEXT_FILE_PREFIX)) -->Line_8 $$ return null[ CD ]
Line_67 $$ if (startsWith(afterLine, "+")) -->Line_68 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)[ CD ]
Line_57 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) -->Line_59 $$ afterLineIndex++[ CD ]
Line_17 $$ Matcher beforeMatcher = ourContextBeforeHunkStartPattern.matcher(iterator.next())-->Line_33 $$ int startLineBefore = Integer.parseInt(beforeMatcher.group(1))[ FD ]
Line_21 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_42 $$ if (beforeLines.size() == 0) [ FD ]
Line_4 $$ while (iterator.hasNext()) -->Line_10 $$ if (curLine.startsWith(CONTEXT_HUNK_PREFIX)) [ CD ]
Line_17 $$ Matcher beforeMatcher = ourContextBeforeHunkStartPattern.matcher(iterator.next())-->Line_34 $$ int endLineBefore = Integer.parseInt(beforeMatcher.group(2))[ FD ]
Line_38 $$ int beforeLineIndex = 0-->Line_52 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)[ FD ]
Line_41 $$ PatchLine lastAfterPatchLine = null-->Line_68 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)[ FD ]
Line_64 $$ if (startsWith(beforeLine, "-")) -->Line_66 $$ beforeLineIndex++[ CD ]
Line_67 $$ if (startsWith(afterLine, "+")) -->Line_70 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) [ CD ]
Line_54 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) -->Line_55 $$ lastBeforePatchLine.setSuppressNewLine(true)[ CD ]
Line_37 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_44 $$ hunk.addLine(parsePatchLine(line, 2))[ FD ]
Line_75 $$ while (afterLineIndex < afterLines.size() && afterLines.get(afterLineIndex).startsWith("! ")) -->Line_77 $$ afterLineIndex++[ CD ]
Line_64 $$ if (startsWith(beforeLine, "-")) -->Line_65 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)[ CD ]
Line_38 $$ int beforeLineIndex = 0-->Line_72 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_65 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)-->Line_72 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_39 $$ int afterLineIndex = 0-->Line_77 $$ afterLineIndex++[ FD ]
Line_38 $$ int beforeLineIndex = 0-->Line_62 $$ beforeLineIndex++[ FD ]
Line_25 $$ Matcher afterMatcher = ourContextAfterHunkStartPattern.matcher(iterator.next())-->Line_36 $$ int endLineAfter = Integer.parseInt(afterMatcher.group(2))[ FD ]
Line_52 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_54 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) [ FD ]
Line_53 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_60 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) [ FD ]
Line_39 $$ int afterLineIndex = 0-->Line_63 $$ afterLineIndex++[ FD ]
Line_38 $$ int beforeLineIndex = 0-->Line_71 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) [ FD ]
Line_53 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_70 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) [ FD ]
Line_57 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) -->Line_58 $$ lastAfterPatchLine.setSuppressNewLine(true)[ CD ]
Line_38 $$ int beforeLineIndex = 0-->Line_73 $$ beforeLineIndex++[ FD ]
Line_39 $$ int afterLineIndex = 0-->Line_75 $$ while (afterLineIndex < afterLines.size() && afterLines.get(afterLineIndex).startsWith("! ")) [ FD ]
Line_51 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) -->Line_53 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)[ CD ]
Line_60 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) -->Line_61 $$ addContextDiffLine(hunk, beforeLine, PatchLine.Type.CONTEXT)[ CD ]
Line_53 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_68 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)[ FD ]
Line_51 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) -->Line_54 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) [ CD ]
Line_60 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) -->Line_64 $$ if (startsWith(beforeLine, "-")) [ CD ]
Line_39 $$ int afterLineIndex = 0-->Line_69 $$ afterLineIndex++[ FD ]
Line_42 $$ if (beforeLines.size() == 0) -->Line_46 $$ if (afterLines.size() == 0) [ CD ]
Line_52 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_70 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) [ FD ]
Line_5 $$ String curLine = iterator.next()-->Line_6 $$ if (curLine.startsWith(CONTEXT_FILE_PREFIX)) [ FD ]
Line_52 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_64 $$ if (startsWith(beforeLine, "-")) [ FD ]
Line_25 $$ Matcher afterMatcher = ourContextAfterHunkStartPattern.matcher(iterator.next())-->Line_26 $$ if (!afterMatcher.matches()) [ FD ]
Line_41 $$ PatchLine lastAfterPatchLine = null-->Line_58 $$ lastAfterPatchLine.setSuppressNewLine(true)[ FD ]
Line_38 $$ int beforeLineIndex = 0-->Line_56 $$ beforeLineIndex++[ FD ]
Line_39 $$ int afterLineIndex = 0-->Line_59 $$ afterLineIndex++[ FD ]
Line_37 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_76 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ FD ]
Line_67 $$ if (startsWith(afterLine, "+")) -->Line_69 $$ afterLineIndex++[ CD ]
Line_75 $$ while (afterLineIndex < afterLines.size() && afterLines.get(afterLineIndex).startsWith("! ")) -->Line_76 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ CD ]
Line_70 $$ if (startsWith(beforeLine, "!") && startsWith(afterLine, "!")) -->Line_75 $$ while (afterLineIndex < afterLines.size() && afterLines.get(afterLineIndex).startsWith("! ")) [ CD ]
Line_43 $$ for (String line : afterLines) -->Line_44 $$ hunk.addLine(parsePatchLine(line, 2))[ FD ]
Line_21 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_51 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) [ FD ]
Line_53 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_57 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) [ FD ]
Line_43 $$ for (String line : afterLines) -->Line_48 $$ hunk.addLine(parsePatchLine(line, 2))[ FD ]
Line_25 $$ Matcher afterMatcher = ourContextAfterHunkStartPattern.matcher(iterator.next())-->Line_35 $$ int startLineAfter = Integer.parseInt(afterMatcher.group(1))[ FD ]
Line_40 $$ PatchLine lastBeforePatchLine = null-->Line_55 $$ lastBeforePatchLine.setSuppressNewLine(true)[ FD ]
Line_37 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_72 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_40 $$ PatchLine lastBeforePatchLine = null-->Line_72 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLines.get(beforeLineIndex), PatchLine.Type.REMOVE)[ FD ]
Line_46 $$ if (afterLines.size() == 0) -->Line_51 $$ while (beforeLineIndex < beforeLines.size() || afterLineIndex < afterLines.size()) [ CD ]
Line_54 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) -->Line_57 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) [ CD ]
Line_52 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_61 $$ addContextDiffLine(hunk, beforeLine, PatchLine.Type.CONTEXT)[ FD ]
Line_53 $$ String afterLine = afterLineIndex >= afterLines.size() ? null : afterLines.get(afterLineIndex)-->Line_67 $$ if (startsWith(afterLine, "+")) [ FD ]
Line_14 $$ if (!iterator.hasNext()) -->Line_15 $$ return null[ CD ]
Line_4 $$ while (iterator.hasNext()) -->Line_5 $$ String curLine = iterator.next()[ CD ]
Line_71 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) -->Line_73 $$ beforeLineIndex++[ CD ]
Line_57 $$ if (startsWith(afterLine, NO_NEWLINE_SIGNATURE) && lastAfterPatchLine != null) -->Line_60 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) [ CD ]
Line_65 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)-->Line_55 $$ lastBeforePatchLine.setSuppressNewLine(true)[ FD ]
Line_52 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_65 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)[ FD ]
Line_60 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) -->Line_62 $$ beforeLineIndex++[ CD ]
Line_4 $$ while (iterator.hasNext()) -->Line_6 $$ if (curLine.startsWith(CONTEXT_FILE_PREFIX)) [ CD ]
Line_40 $$ PatchLine lastBeforePatchLine = null-->Line_65 $$ lastBeforePatchLine = addContextDiffLine(hunk, beforeLine, PatchLine.Type.REMOVE)[ FD ]
Line_38 $$ int beforeLineIndex = 0-->Line_66 $$ beforeLineIndex++[ FD ]
Line_21 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_71 $$ while (beforeLineIndex < beforeLines.size() && beforeLines.get(beforeLineIndex).startsWith("! ")) [ FD ]
Line_60 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) -->Line_63 $$ afterLineIndex++[ CD ]
Line_5 $$ String curLine = iterator.next()-->Line_10 $$ if (curLine.startsWith(CONTEXT_HUNK_PREFIX)) [ FD ]
Line_37 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_48 $$ hunk.addLine(parsePatchLine(line, 2))[ FD ]
Line_54 $$ if (startsWith(beforeLine, NO_NEWLINE_SIGNATURE) && lastBeforePatchLine != null) -->Line_56 $$ beforeLineIndex++[ CD ]
Line_17 $$ Matcher beforeMatcher = ourContextBeforeHunkStartPattern.matcher(iterator.next())-->Line_18 $$ if (!beforeMatcher.matches()) [ FD ]
Line_37 $$ PatchHunk hunk = new PatchHunk(startLineBefore - 1, endLineBefore - 1, startLineAfter - 1, endLineAfter - 1)-->Line_68 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLine, PatchLine.Type.ADD)[ FD ]
Line_52 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)-->Line_60 $$ if (startsWith(beforeLine, " ") && (startsWith(afterLine, " ") || afterLine == null)) [ FD ]
Line_64 $$ if (startsWith(beforeLine, "-")) -->Line_67 $$ if (startsWith(afterLine, "+")) [ CD ]
Line_21 $$ List<String> beforeLines = readContextDiffLines(iterator)-->Line_52 $$ String beforeLine = beforeLineIndex >= beforeLines.size() ? null : beforeLines.get(beforeLineIndex)[ FD ]
Line_41 $$ PatchLine lastAfterPatchLine = null-->Line_76 $$ lastAfterPatchLine = addContextDiffLine(hunk, afterLines.get(afterLineIndex), PatchLine.Type.ADD)[ FD ]
