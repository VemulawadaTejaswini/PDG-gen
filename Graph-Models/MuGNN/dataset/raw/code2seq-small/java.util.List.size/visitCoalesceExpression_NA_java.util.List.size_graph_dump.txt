Line_2 $$ protected Object visitCoalesceExpression(CoalesceExpression node, Object context) -->Line_4 $$ processWithExceptionHandling(value, context)[ FD ]
Line_2 $$ protected Object visitCoalesceExpression(CoalesceExpression node, Object context) -->Line_9 $$ if (expressions.isEmpty()) [ CD ]
Line_2 $$ protected Object visitCoalesceExpression(CoalesceExpression node, Object context) -->Line_4 $$ List<Object> values = node.getOperands().stream().map( value -> processWithExceptionHandling(value, context)).filter( value -> value != null).collect(Collectors.toList())[ FD ]
Line_2 $$ protected Object visitCoalesceExpression(CoalesceExpression node, Object context) -->Line_3 $$ Type type = type(node)[ CD ]
Line_5 $$ if ((!values.isEmpty() && !(values.get(0) instanceof Expression)) || values.size() == 1) -->Line_6 $$ return values.get(0)[ CD ]
Line_2 $$ protected Object visitCoalesceExpression(CoalesceExpression node, Object context) -->Line_5 $$ if ((!values.isEmpty() && !(values.get(0) instanceof Expression)) || values.size() == 1) [ CD ]
Line_4 $$ List<Object> values = node.getOperands().stream().map( value -> processWithExceptionHandling(value, context)).filter( value -> value != null).collect(Collectors.toList())-->Line_6 $$ return values.get(0)[ FD ]
Line_2 $$ protected Object visitCoalesceExpression(CoalesceExpression node, Object context) -->Line_4 $$ List<Object> values = node.getOperands().stream().map( value -> processWithExceptionHandling(value, context)).filter( value -> value != null).collect(Collectors.toList())[ CD ]
Line_2 $$ protected Object visitCoalesceExpression(CoalesceExpression node, Object context) -->Line_12 $$ return new CoalesceExpression(expressions)[ CD ]
Line_2 $$ protected Object visitCoalesceExpression(CoalesceExpression node, Object context) -->Line_3 $$ Type type = type(node)[ FD ]
Line_8 $$ List<Expression> expressions = values.stream().map( value -> toExpression(value, type)).collect(Collectors.toList())-->Line_9 $$ if (expressions.isEmpty()) [ FD ]
Line_9 $$ if (expressions.isEmpty()) -->Line_10 $$ return null[ CD ]
Line_4 $$ List<Object> values = node.getOperands().stream().map( value -> processWithExceptionHandling(value, context)).filter( value -> value != null).collect(Collectors.toList())-->Line_5 $$ if ((!values.isEmpty() && !(values.get(0) instanceof Expression)) || values.size() == 1) [ FD ]
Line_4 $$ List<Object> values = node.getOperands().stream().map( value -> processWithExceptionHandling(value, context)).filter( value -> value != null).collect(Collectors.toList())-->Line_8 $$ List<Expression> expressions = values.stream().map( value -> toExpression(value, type)).collect(Collectors.toList())[ FD ]
Line_2 $$ protected Object visitCoalesceExpression(CoalesceExpression node, Object context) -->Line_8 $$ List<Expression> expressions = values.stream().map( value -> toExpression(value, type)).collect(Collectors.toList())[ CD ]
Line_3 $$ Type type = type(node)-->Line_8 $$ toExpression(value, type)[ FD ]
