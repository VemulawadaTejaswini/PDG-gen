Line_11 $$ if (activeFactoryNames == null) -->Line_12 $$ activeFactoryNames = new ArrayList<String>()[ CD ]
Line_10 $$ if (returnedBuilder != null) -->Line_11 $$ if (activeFactoryNames == null) [ CD ]
Line_10 $$ if (returnedBuilder != null) -->Line_14 $$ activeFactoryNames.add(discoveredBuilderFactory.getClass().getName())[ CD ]
Line_8 $$ for (SessionFactoryBuilderFactory discoveredBuilderFactory : discoveredBuilderFactories) -->Line_9 $$ final SessionFactoryBuilder returnedBuilder = discoveredBuilderFactory.getSessionFactoryBuilder(this, defaultBuilder)[ FD ]
Line_7 $$ List<String> activeFactoryNames = null-->Line_12 $$ activeFactoryNames = new ArrayList<String>()[ FD ]
Line_2 $$ public SessionFactoryBuilder getSessionFactoryBuilder() -->Line_4 $$ final ClassLoaderService cls = metadataBuildingOptions.getServiceRegistry().getService(ClassLoaderService.class)[ CD ]
Line_7 $$ List<String> activeFactoryNames = null-->Line_14 $$ activeFactoryNames.add(discoveredBuilderFactory.getClass().getName())[ FD ]
Line_12 $$ activeFactoryNames = new ArrayList<String>()-->Line_18 $$ if (activeFactoryNames != null && activeFactoryNames.size() > 1) [ FD ]
Line_12 $$ activeFactoryNames = new ArrayList<String>()-->Line_14 $$ activeFactoryNames.add(discoveredBuilderFactory.getClass().getName())[ FD ]
Line_6 $$ SessionFactoryBuilder builder = null-->Line_15 $$ builder = returnedBuilder[ FD ]
Line_2 $$ public SessionFactoryBuilder getSessionFactoryBuilder() -->Line_5 $$ final java.util.Collection<SessionFactoryBuilderFactory> discoveredBuilderFactories = cls.loadJavaServices(SessionFactoryBuilderFactory.class)[ CD ]
Line_9 $$ final SessionFactoryBuilder returnedBuilder = discoveredBuilderFactory.getSessionFactoryBuilder(this, defaultBuilder)-->Line_10 $$ if (returnedBuilder != null) [ FD ]
Line_4 $$ final ClassLoaderService cls = metadataBuildingOptions.getServiceRegistry().getService(ClassLoaderService.class)-->Line_5 $$ final java.util.Collection<SessionFactoryBuilderFactory> discoveredBuilderFactories = cls.loadJavaServices(SessionFactoryBuilderFactory.class)[ FD ]
Line_6 $$ SessionFactoryBuilder builder = null-->Line_21 $$ if (builder != null) [ FD ]
Line_15 $$ builder = returnedBuilder-->Line_21 $$ if (builder != null) [ FD ]
Line_2 $$ public SessionFactoryBuilder getSessionFactoryBuilder() -->Line_21 $$ if (builder != null) [ CD ]
Line_2 $$ public SessionFactoryBuilder getSessionFactoryBuilder() -->Line_6 $$ SessionFactoryBuilder builder = null[ CD ]
Line_2 $$ public SessionFactoryBuilder getSessionFactoryBuilder() -->Line_3 $$ final SessionFactoryBuilderImpl defaultBuilder = new SessionFactoryBuilderImpl(this)[ CD ]
Line_3 $$ final SessionFactoryBuilderImpl defaultBuilder = new SessionFactoryBuilderImpl(this)-->Line_9 $$ final SessionFactoryBuilder returnedBuilder = discoveredBuilderFactory.getSessionFactoryBuilder(this, defaultBuilder)[ FD ]
Line_7 $$ List<String> activeFactoryNames = null-->Line_18 $$ if (activeFactoryNames != null && activeFactoryNames.size() > 1) [ FD ]
Line_8 $$ for (SessionFactoryBuilderFactory discoveredBuilderFactory : discoveredBuilderFactories) -->Line_14 $$ activeFactoryNames.add(discoveredBuilderFactory.getClass().getName())[ FD ]
Line_2 $$ public SessionFactoryBuilder getSessionFactoryBuilder() -->Line_7 $$ List<String> activeFactoryNames = null[ CD ]
Line_9 $$ final SessionFactoryBuilder returnedBuilder = discoveredBuilderFactory.getSessionFactoryBuilder(this, defaultBuilder)-->Line_15 $$ builder = returnedBuilder[ FD ]
Line_7 $$ List<String> activeFactoryNames = null-->Line_11 $$ if (activeFactoryNames == null) [ FD ]
Line_2 $$ public SessionFactoryBuilder getSessionFactoryBuilder() -->Line_24 $$ return defaultBuilder[ CD ]
Line_12 $$ activeFactoryNames = new ArrayList<String>()-->Line_19 $$ throw new HibernateException("Multiple active SessionFactoryBuilderFactory definitions were discovered : " + StringHelper.join(", ", activeFactoryNames))[ FD ]
Line_7 $$ List<String> activeFactoryNames = null-->Line_19 $$ throw new HibernateException("Multiple active SessionFactoryBuilderFactory definitions were discovered : " + StringHelper.join(", ", activeFactoryNames))[ FD ]
Line_10 $$ if (returnedBuilder != null) -->Line_15 $$ builder = returnedBuilder[ CD ]
Line_21 $$ if (builder != null) -->Line_22 $$ return builder[ CD ]
Line_2 $$ public SessionFactoryBuilder getSessionFactoryBuilder() -->Line_18 $$ if (activeFactoryNames != null && activeFactoryNames.size() > 1) [ CD ]
