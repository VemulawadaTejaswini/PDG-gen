Line_2 $$ protected void importPermissions(LayoutCache layoutCache, long companyId, long groupId, long userId, Layout layout, String resourceName, String resourcePrimKey, Element permissionsElement, boolean portletActions) throws Exception -->Line_23 $$ ResourcePermissionLocalServiceUtil.setResourcePermissions(companyId, resourceName, ResourceConstants.SCOPE_INDIVIDUAL, resourcePrimKey, roleIdsToActionIds)[ FD ]
Line_6 $$ Role role = checkRole(layoutCache, companyId, groupId, userId, roleElement)-->Line_12 $$ String roleName = role.getName()[ FD ]
Line_2 $$ protected void importPermissions(LayoutCache layoutCache, long companyId, long groupId, long userId, Layout layout, String resourceName, String resourcePrimKey, Element permissionsElement, boolean portletActions) throws Exception -->Line_20 $$ if (roleIdsToActionIds.isEmpty()) [ CD ]
Line_6 $$ Role role = checkRole(layoutCache, companyId, groupId, userId, roleElement)-->Line_18 $$ roleIdsToActionIds.put(role.getRoleId(), actions.toArray(new String[actions.size()]))[ FD ]
Line_2 $$ protected void importPermissions(LayoutCache layoutCache, long companyId, long groupId, long userId, Layout layout, String resourceName, String resourcePrimKey, Element permissionsElement, boolean portletActions) throws Exception -->Line_23 $$ ResourcePermissionLocalServiceUtil.setResourcePermissions(companyId, resourceName, ResourceConstants.SCOPE_INDIVIDUAL, resourcePrimKey, roleIdsToActionIds)[ CD ]
Line_2 $$ protected void importPermissions(LayoutCache layoutCache, long companyId, long groupId, long userId, Layout layout, String resourceName, String resourcePrimKey, Element permissionsElement, boolean portletActions) throws Exception -->Line_11 $$ if (!group.isLayoutPrototype() && !group.isLayoutSetPrototype() && layout.isPrivateLayout()) [ FD ]
Line_5 $$ for (Element roleElement : roleElements) -->Line_17 $$ List<String> actions = getActions(roleElement)[ FD ]
Line_10 $$ Group group = GroupLocalServiceUtil.getGroup(groupId)-->Line_11 $$ if (!group.isLayoutPrototype() && !group.isLayoutSetPrototype() && layout.isPrivateLayout()) [ FD ]
Line_2 $$ protected void importPermissions(LayoutCache layoutCache, long companyId, long groupId, long userId, Layout layout, String resourceName, String resourcePrimKey, Element permissionsElement, boolean portletActions) throws Exception -->Line_10 $$ Group group = GroupLocalServiceUtil.getGroup(groupId)[ FD ]
Line_11 $$ if (!group.isLayoutPrototype() && !group.isLayoutSetPrototype() && layout.isPrivateLayout()) -->Line_12 $$ String roleName = role.getName()[ CD ]
Line_6 $$ Role role = checkRole(layoutCache, companyId, groupId, userId, roleElement)-->Line_7 $$ if (role == null) [ FD ]
Line_2 $$ protected void importPermissions(LayoutCache layoutCache, long companyId, long groupId, long userId, Layout layout, String resourceName, String resourcePrimKey, Element permissionsElement, boolean portletActions) throws Exception -->Line_6 $$ Role role = checkRole(layoutCache, companyId, groupId, userId, roleElement)[ FD ]
Line_17 $$ List<String> actions = getActions(roleElement)-->Line_18 $$ roleIdsToActionIds.put(role.getRoleId(), actions.toArray(new String[actions.size()]))[ FD ]
Line_3 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_23 $$ ResourcePermissionLocalServiceUtil.setResourcePermissions(companyId, resourceName, ResourceConstants.SCOPE_INDIVIDUAL, resourcePrimKey, roleIdsToActionIds)[ FD ]
Line_3 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_20 $$ if (roleIdsToActionIds.isEmpty()) [ FD ]
Line_2 $$ protected void importPermissions(LayoutCache layoutCache, long companyId, long groupId, long userId, Layout layout, String resourceName, String resourcePrimKey, Element permissionsElement, boolean portletActions) throws Exception -->Line_4 $$ List<Element> roleElements = permissionsElement.elements("role")[ FD ]
Line_20 $$ if (roleIdsToActionIds.isEmpty()) -->Line_21 $$ return[ CD ]
Line_3 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()-->Line_18 $$ roleIdsToActionIds.put(role.getRoleId(), actions.toArray(new String[actions.size()]))[ FD ]
Line_2 $$ protected void importPermissions(LayoutCache layoutCache, long companyId, long groupId, long userId, Layout layout, String resourceName, String resourcePrimKey, Element permissionsElement, boolean portletActions) throws Exception -->Line_4 $$ List<Element> roleElements = permissionsElement.elements("role")[ CD ]
Line_2 $$ protected void importPermissions(LayoutCache layoutCache, long companyId, long groupId, long userId, Layout layout, String resourceName, String resourcePrimKey, Element permissionsElement, boolean portletActions) throws Exception -->Line_3 $$ Map<Long, String[]> roleIdsToActionIds = new HashMap()[ CD ]
Line_12 $$ String roleName = role.getName()-->Line_13 $$ if (roleName.equals(RoleConstants.GUEST)) [ FD ]
Line_5 $$ for (Element roleElement : roleElements) -->Line_6 $$ Role role = checkRole(layoutCache, companyId, groupId, userId, roleElement)[ FD ]
Line_11 $$ if (!group.isLayoutPrototype() && !group.isLayoutSetPrototype() && layout.isPrivateLayout()) -->Line_13 $$ if (roleName.equals(RoleConstants.GUEST)) [ CD ]
