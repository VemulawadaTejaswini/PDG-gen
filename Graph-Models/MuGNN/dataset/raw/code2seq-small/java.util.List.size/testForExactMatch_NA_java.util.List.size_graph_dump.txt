Line_15 $$ for (BeforeAfter<List<String>> step : steps) -->Line_28 $$ length = step.getAfter().size()[ FD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_34 $$ return true[ CD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_4 $$ final List<BeforeAfter<List<String>>> steps = splitHunk.getPatchSteps()[ CD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_3 $$ final int offset = splitHunk.getContextBefore().size()[ FD ]
Line_16 $$ if (myLines.size() <= idx)-->Line_17 $$ return false[ CD ]
Line_20 $$ final Pair<Integer, Boolean> distance = new FragmentMatcher(idx + cnt, step).find(false)-->Line_21 $$ if (distance.getFirst() > 0) [ FD ]
Line_15 $$ for (BeforeAfter<List<String>> step : steps) -->Line_26 $$ length = step.getBefore().size()[ FD ]
Line_28 $$ length = step.getAfter().size()-->Line_31 $$ cnt += length[ FD ]
Line_24 $$ int length-->Line_31 $$ cnt += length[ FD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_13 $$ int cnt = 0[ CD ]
Line_14 $$ boolean hadAlreadyApplied = false-->Line_29 $$ hadAlreadyApplied = true[ FD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_4 $$ final List<BeforeAfter<List<String>>> steps = splitHunk.getPatchSteps()[ FD ]
Line_25 $$ if (distance.getSecond()) -->Line_28 $$ length = step.getAfter().size()[ CD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_5 $$ if (splitHunk.isInsertion()) [ CD ]
Line_12 $$ int idx = splitHunk.getStartLineBefore() + offset-->Line_16 $$ if (myLines.size() <= idx)[ FD ]
Line_7 $$ if (emptyFile) -->Line_8 $$ myNotBound.add(splitHunk)[ CD ]
Line_25 $$ if (distance.getSecond()) -->Line_29 $$ hadAlreadyApplied = true[ CD ]
Line_13 $$ int cnt = 0-->Line_31 $$ cnt += length[ FD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_14 $$ boolean hadAlreadyApplied = false[ CD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_12 $$ int idx = splitHunk.getStartLineBefore() + offset[ FD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_5 $$ if (splitHunk.isInsertion()) [ FD ]
Line_26 $$ length = step.getBefore().size()-->Line_28 $$ length = step.getAfter().size()[ FD ]
Line_26 $$ length = step.getBefore().size()-->Line_31 $$ cnt += length[ FD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_33 $$ putCutIntoTransformations(new TextRange(idx, idx + cnt - 1), new MyAppliedData(splitHunk.getAfterAll(), hadAlreadyApplied, true, true, ChangeType.REPLACE))[ CD ]
Line_25 $$ if (distance.getSecond()) -->Line_26 $$ length = step.getBefore().size()[ CD ]
Line_5 $$ if (splitHunk.isInsertion()) -->Line_10 $$ return emptyFile[ CD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_3 $$ final int offset = splitHunk.getContextBefore().size()[ CD ]
Line_15 $$ for (BeforeAfter<List<String>> step : steps) -->Line_18 $$ if (step.getBefore().isEmpty())[ FD ]
Line_20 $$ final Pair<Integer, Boolean> distance = new FragmentMatcher(idx + cnt, step).find(false)-->Line_25 $$ if (distance.getSecond()) [ FD ]
Line_5 $$ if (splitHunk.isInsertion()) -->Line_7 $$ if (emptyFile) [ CD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_33 $$ putCutIntoTransformations(new TextRange(idx, idx + cnt - 1), new MyAppliedData(splitHunk.getAfterAll(), hadAlreadyApplied, true, true, ChangeType.REPLACE))[ FD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_8 $$ myNotBound.add(splitHunk)[ FD ]
Line_5 $$ if (splitHunk.isInsertion()) -->Line_6 $$ final boolean emptyFile = myLines.isEmpty() || myLines.size() == 1 && myLines.get(0).trim().length() == 0[ CD ]
Line_21 $$ if (distance.getFirst() > 0) -->Line_22 $$ return false[ CD ]
Line_24 $$ int length-->Line_26 $$ length = step.getBefore().size()[ FD ]
Line_24 $$ int length-->Line_28 $$ length = step.getAfter().size()[ FD ]
Line_2 $$ private boolean testForExactMatch(final SplitHunk splitHunk) -->Line_12 $$ int idx = splitHunk.getStartLineBefore() + offset[ CD ]
