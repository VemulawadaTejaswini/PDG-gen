Line_6 $$ final int distance = randomInt()-->Line_11 $$ final List<Object> rotated = CollectionUtils.rotate(list, distance)[ FD ]
Line_7 $$ List<Object> list = new ArrayList()-->Line_16 $$ assertEquals(rotated, CollectionUtils.rotate(list, distance))[ FD ]
Line_18 $$ if (distance != Integer.MIN_VALUE) -->Line_19 $$ assertEquals(list, CollectionUtils.rotate(CollectionUtils.rotate(list, distance), -distance))[ CD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_14 $$ assertEquals(new HashSet(rotated), new HashSet(list))[ CD ]
Line_6 $$ final int distance = randomInt()-->Line_16 $$ assertEquals(rotated, CollectionUtils.rotate(list, distance))[ FD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_8 $$ for (int i = 0; i < size; ++i) [ CD ]
Line_15 $$ for (int j = randomInt(4); j >= 0; --j) -->Line_16 $$ assertEquals(rotated, CollectionUtils.rotate(list, distance))[ CD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_5 $$ final int size = randomIntBetween(1, 100)[ CD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_11 $$ final List<Object> rotated = CollectionUtils.rotate(list, distance)[ CD ]
Line_7 $$ List<Object> list = new ArrayList()-->Line_19 $$ assertEquals(list, CollectionUtils.rotate(CollectionUtils.rotate(list, distance), -distance))[ FD ]
Line_6 $$ final int distance = randomInt()-->Line_18 $$ if (distance != Integer.MIN_VALUE) [ FD ]
Line_7 $$ List<Object> list = new ArrayList()-->Line_9 $$ list.add(new Object())[ FD ]
Line_2 $$ public void testRotate() -->Line_3 $$ final int iters = scaledRandomIntBetween(10, 100)[ CD ]
Line_7 $$ List<Object> list = new ArrayList()-->Line_11 $$ final List<Object> rotated = CollectionUtils.rotate(list, distance)[ FD ]
Line_2 $$ public void testRotate() -->Line_4 $$ for (int k = 0; k < iters; ++k) [ CD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_12 $$ assertEquals(rotated.size(), list.size())[ CD ]
Line_8 $$ for (int i = 0; i < size; ++i) -->Line_9 $$ list.add(new Object())[ CD ]
Line_5 $$ final int size = randomIntBetween(1, 100)-->Line_8 $$ for (int i = 0; i < size; ++i) [ FD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_13 $$ assertEquals(rotated.size(), list.size())[ CD ]
Line_7 $$ List<Object> list = new ArrayList()-->Line_13 $$ assertEquals(rotated.size(), list.size())[ FD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_7 $$ List<Object> list = new ArrayList()[ CD ]
Line_6 $$ final int distance = randomInt()-->Line_19 $$ assertEquals(list, CollectionUtils.rotate(CollectionUtils.rotate(list, distance), -distance))[ FD ]
Line_7 $$ List<Object> list = new ArrayList()-->Line_12 $$ assertEquals(rotated.size(), list.size())[ FD ]
Line_3 $$ final int iters = scaledRandomIntBetween(10, 100)-->Line_4 $$ for (int k = 0; k < iters; ++k) [ FD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_15 $$ for (int j = randomInt(4); j >= 0; --j) [ CD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_6 $$ final int distance = randomInt()[ CD ]
Line_4 $$ for (int k = 0; k < iters; ++k) -->Line_18 $$ if (distance != Integer.MIN_VALUE) [ CD ]
