Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_89 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_13 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_51 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_61 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ Assert.assertTrue(logRecord.getThrown() instanceof IOException)[ FD ]
Line_77 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_82 $$ recordCompletionHandler.waitUntilSubmitted()[ FD ]
Line_38 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_90 $$ Assert.assertNull(requestDatagram.getDataByteBuffer())[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_57 $$ ByteBuffer receiveByteBuffer = ByteBuffer.allocate(bufferSize + 14)-->Line_68 $$ Assert.assertFalse(receiveByteBuffer.hasRemaining())[ FD ]
Line_77 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_78 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_88 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_55 $$ int bufferSize = 1024 * 1024 * 10-->Line_56 $$ ByteBuffer sendByteBuffer = ByteBuffer.allocate(bufferSize)[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_12 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_89 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_35 $$ channelContext = new ChannelContext(null)[ FD ]
Line_39 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_40 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_88 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_11 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_27 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_94 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_41 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_5 $$ Datagram requestDatagram = null-->Line_91 $$ String requestDatagramString = requestDatagram.toString()[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_37 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_51 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_63 $$ sourceChannel.read(receiveByteBuffer)[ FD ]
Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_86 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_88 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_24 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_56 $$ ByteBuffer sendByteBuffer = ByteBuffer.allocate(bufferSize)-->Line_64 $$ Assert.assertTrue(sendByteBuffer.hasRemaining())[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_94 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_26 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_26 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_89 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_18 $$ assertMessageStartWith(logRecord, "Broken write channel, unregister ")[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_42 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_25 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_51 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_70 $$ sourceChannel.configureBlocking(true)[ FD ]
Line_11 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_37 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_29 $$ logRecord = logRecords.get(0)[ FD ]
Line_38 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_86 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_36 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_37 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_39 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_83 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_12 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_11 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_23 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_88 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_59 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_25 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_74 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_90 $$ Assert.assertNull(requestDatagram.getDataByteBuffer())[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_6 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_77 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_41 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_37 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_6 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_44 $$ recordCompletionHandler.waitUntilFailed()[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_59 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_60 $$ int count = 0-->Line_62 $$ count++[ FD ]
Line_36 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_43 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_35 $$ channelContext = new ChannelContext(null)[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_61 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_14 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_5 $$ Datagram requestDatagram = null-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_61 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) -->Line_64 $$ Assert.assertTrue(sendByteBuffer.hasRemaining())[ CD ]
Line_11 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_36 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_39 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_77 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_50 $$ Queue<Datagram> sendingQueue = new LinkedList()-->Line_94 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_35 $$ channelContext = new ChannelContext(null)[ FD ]
Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_94 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_75 $$ Object attachment = new Object()-->Line_76 $$ requestDatagram.attachment = attachment[ FD ]
Line_75 $$ Object attachment = new Object()-->Line_83 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_13 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_5 $$ Datagram requestDatagram = null-->Line_41 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_56 $$ ByteBuffer sendByteBuffer = ByteBuffer.allocate(bufferSize)-->Line_67 $$ Assert.assertFalse(sendByteBuffer.hasRemaining())[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_41 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_5 $$ Datagram requestDatagram = null-->Line_86 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_37 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_42 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_5 $$ Datagram requestDatagram = null-->Line_88 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_37 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_6 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_78 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_74 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_86 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_29 $$ logRecord = logRecords.get(0)-->Line_31 $$ Assert.assertNull(logRecord.getThrown())[ FD ]
Line_86 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_91 $$ String requestDatagramString = requestDatagram.toString()[ FD ]
Line_23 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_36 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_6 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_40 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_57 $$ ByteBuffer receiveByteBuffer = ByteBuffer.allocate(bufferSize + 14)-->Line_66 $$ sourceChannel.read(receiveByteBuffer)[ FD ]
Line_51 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_89 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_42 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_6 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_82 $$ recordCompletionHandler.waitUntilSubmitted()[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_38 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_88 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_31 $$ Assert.assertNull(logRecord.getThrown())[ FD ]
Line_6 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_45 $$ Assert.assertNotNull(recordCompletionHandler.getIOException())[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_61 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) -->Line_62 $$ count++[ CD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_14 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_56 $$ ByteBuffer sendByteBuffer = ByteBuffer.allocate(bufferSize)-->Line_59 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_38 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_77 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_83 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_39 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_44 $$ recordCompletionHandler.waitUntilFailed()[ FD ]
Line_57 $$ ByteBuffer receiveByteBuffer = ByteBuffer.allocate(bufferSize + 14)-->Line_63 $$ sourceChannel.read(receiveByteBuffer)[ FD ]
Line_11 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_24 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_23 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_43 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_74 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_91 $$ String requestDatagramString = requestDatagram.toString()[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_42 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_11 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_15 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_94 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_51 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_71 $$ sinkChannel.configureBlocking(true)[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_94 $$ Assert.assertSame(sendingQueue, channelContext.getSendingQueue())[ FD ]
Line_29 $$ logRecord = logRecords.get(0)-->Line_30 $$ assertMessageStartWith(logRecord, "Broken write channel, unregister ")[ FD ]
Line_6 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_39 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_61 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_39 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_78 $$ requestDatagram.completionHandler = recordCompletionHandler[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_41 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_23 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_27 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_51 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_66 $$ sourceChannel.read(receiveByteBuffer)[ FD ]
Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_5 $$ Datagram requestDatagram = null-->Line_38 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_38 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_74 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_39 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_45 $$ Assert.assertNotNull(recordCompletionHandler.getIOException())[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_24 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_61 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_24 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_74 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_88 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_59 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_61 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) -->Line_63 $$ sourceChannel.read(receiveByteBuffer)[ CD ]
Line_11 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_12 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_22 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_61 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_74 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_80 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_23 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_24 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_61 $$ while (!_mockIntraband.handleWriting(sinkChannel, channelContext)) [ FD ]
Line_91 $$ String requestDatagramString = requestDatagram.toString()-->Line_92 $$ Assert.assertTrue(requestDatagramString.contains("dataChunk=null"))[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_88 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_25 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, _data))[ FD ]
Line_5 $$ Datagram requestDatagram = null-->Line_74 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_11 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_43 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_39 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_82 $$ recordCompletionHandler.waitUntilSubmitted()[ FD ]
Line_5 $$ Datagram requestDatagram = null-->Line_90 $$ Assert.assertNull(requestDatagram.getDataByteBuffer())[ FD ]
Line_35 $$ channelContext = new ChannelContext(null)-->Line_89 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_51 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_53 $$ sourceChannel.configureBlocking(false)[ FD ]
Line_23 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_37 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_51 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_54 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_30 $$ assertMessageStartWith(logRecord, "Broken write channel, unregister ")[ FD ]
Line_6 $$ RecordCompletionHandler<Object> recordCompletionHandler = null-->Line_83 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_89 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_86 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_90 $$ Assert.assertNull(requestDatagram.getDataByteBuffer())[ FD ]
Line_38 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_41 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
Line_51 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_81 $$ Assert.assertTrue(_mockIntraband.handleWriting(sinkChannel, channelContext))[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_26 $$ Assert.assertFalse(_mockIntraband.handleWriting(new MockGatheringByteChannel(), channelContext))[ FD ]
Line_4 $$ ChannelContext channelContext = null-->Line_59 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_58 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_59 $$ channelContext.setWritingDatagram(Datagram.createRequestDatagram(_TYPE, sendByteBuffer))[ FD ]
Line_38 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_91 $$ String requestDatagramString = requestDatagram.toString()[ FD ]
Line_10 $$ channelContext = new ChannelContext(new LinkedList<Datagram>())-->Line_88 $$ channelContext.setWritingDatagram(requestDatagram)[ FD ]
