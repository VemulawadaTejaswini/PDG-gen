Line_7 $$ Boy boy = new Boy()-->Line_39 $$ assertTrue(boy.getFavoriteFood().get("dinner").equals(FavoriteFood.SUSHI))[ FD ]
Line_5 $$ Session s = openSession()-->Line_29 $$ Transaction tx = s.beginTransaction()[ FD ]
Line_21 $$ HashMap<String, FavoriteFood> foods = new HashMap<String, FavoriteFood>()-->Line_24 $$ foods.put("dinner", FavoriteFood.SUSHI)[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_10 $$ boy.getNickNames().add("Johnny")[ FD ]
Line_5 $$ Session s = openSession()-->Line_42 $$ List result = s.createQuery("select boy from Boy boy join boy.nickNames names where names = :name").setParameter("name", "Thing").list()[ FD ]
Line_21 $$ HashMap<String, FavoriteFood> foods = new HashMap<String, FavoriteFood>()-->Line_23 $$ foods.put("lunch", FavoriteFood.KUNGPAOCHICKEN)[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_34 $$ assertTrue(boy.getScorePerNickName().containsKey("Thing"))[ FD ]
Line_42 $$ List result = s.createQuery("select boy from Boy boy join boy.nickNames names where names = :name").setParameter("name", "Thing").list()-->Line_43 $$ assertEquals(1, result.size())[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_26 $$ s.persist(boy)[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_37 $$ assertEquals(3, boy.getFavoriteNumbers()[1])[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_44 $$ s.delete(boy)[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_12 $$ boy.getScorePerNickName().put("Johnny", 3)[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_25 $$ boy.setFavoriteFood(foods)[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_35 $$ assertEquals(Integer.valueOf(5), boy.getScorePerNickName().get("Thing"))[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_39 $$ assertTrue(boy.getFavoriteFood().get("dinner").equals(FavoriteFood.SUSHI))[ FD ]
Line_29 $$ Transaction tx = s.beginTransaction()-->Line_45 $$ tx.commit()[ FD ]
Line_15 $$ for (int index = 0; index < favNbrs.length - 1; index++) -->Line_16 $$ favNbrs[index] = index * 3[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_31 $$ assertNotNull(boy.getNickNames())[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_40 $$ assertTrue(boy.getFavoriteFood().get("lunch").equals(FavoriteFood.KUNGPAOCHICKEN))[ FD ]
Line_5 $$ Session s = openSession()-->Line_6 $$ s.getTransaction().begin()[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_33 $$ assertNotNull(boy.getScorePerNickName())[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_36 $$ assertNotNull(boy.getFavoriteNumbers())[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_38 $$ assertTrue(boy.getCharacters().contains(Character.CRAFTY))[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_11 $$ boy.getNickNames().add("Thing")[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_34 $$ assertTrue(boy.getScorePerNickName().containsKey("Thing"))[ FD ]
Line_5 $$ Session s = openSession()-->Line_44 $$ s.delete(boy)[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_44 $$ s.delete(boy)[ FD ]
Line_21 $$ HashMap<String, FavoriteFood> foods = new HashMap<String, FavoriteFood>()-->Line_22 $$ foods.put("breakfast", FavoriteFood.PIZZA)[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_37 $$ assertEquals(3, boy.getFavoriteNumbers()[1])[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_38 $$ assertTrue(boy.getCharacters().contains(Character.CRAFTY))[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_19 $$ boy.getCharacters().add(Character.GENTLE)[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_36 $$ assertNotNull(boy.getFavoriteNumbers())[ FD ]
Line_5 $$ Session s = openSession()-->Line_28 $$ s.clear()[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_13 $$ boy.getScorePerNickName().put("Thing", 5)[ FD ]
Line_5 $$ Session s = openSession()-->Line_27 $$ s.getTransaction().commit()[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_32 $$ assertTrue(boy.getNickNames().contains("Thing"))[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_41 $$ assertTrue(boy.getFavoriteFood().get("breakfast").equals(FavoriteFood.PIZZA))[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_20 $$ boy.getCharacters().add(Character.CRAFTY)[ FD ]
Line_5 $$ Session s = openSession()-->Line_46 $$ s.close()[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_8 $$ boy.setFirstName("John")[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_41 $$ assertTrue(boy.getFavoriteFood().get("breakfast").equals(FavoriteFood.PIZZA))[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_9 $$ boy.setLastName("Doe")[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_18 $$ boy.setFavoriteNumbers(favNbrs)[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_32 $$ assertTrue(boy.getNickNames().contains("Thing"))[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_31 $$ assertNotNull(boy.getNickNames())[ FD ]
Line_7 $$ Boy boy = new Boy()-->Line_33 $$ assertNotNull(boy.getScorePerNickName())[ FD ]
Line_5 $$ Session s = openSession()-->Line_26 $$ s.persist(boy)[ FD ]
Line_21 $$ HashMap<String, FavoriteFood> foods = new HashMap<String, FavoriteFood>()-->Line_25 $$ boy.setFavoriteFood(foods)[ FD ]
Line_15 $$ for (int index = 0; index < favNbrs.length - 1; index++) -->Line_16 $$ favNbrs[index] = index * 3[ CD ]
Line_7 $$ Boy boy = new Boy()-->Line_40 $$ assertTrue(boy.getFavoriteFood().get("lunch").equals(FavoriteFood.KUNGPAOCHICKEN))[ FD ]
Line_14 $$ int[] favNbrs = new int[4]-->Line_18 $$ boy.setFavoriteNumbers(favNbrs)[ FD ]
Line_5 $$ Session s = openSession()-->Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())[ FD ]
Line_30 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_35 $$ assertEquals(Integer.valueOf(5), boy.getScorePerNickName().get("Thing"))[ FD ]
