Line_3 $$ StringBundler sb = null-->Line_47 $$ sb.append(" AND ")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_15 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_14 $$ sb.append(" = (")[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_46 $$ if (includeList != null) [ FD ]
Line_61 $$ QueryPos qPos = QueryPos.getInstance(sqlQuery)-->Line_64 $$ qPos.add(start)[ FD ]
Line_36 $$ if (leftOrRight) -->Line_37 $$ sb.append(_nestedSetsTreeNodeLeftName)[ CD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_21 $$ sb.append(" + ?)")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_27 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_62 $$ qPos.add(delta)[ FD ]
Line_31 $$ if (startInclusive) -->Line_32 $$ sb.append(" >= ? AND ")[ CD ]
Line_3 $$ StringBundler sb = null-->Line_13 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_5 $$ sb = new StringBundler(14)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_44 $$ sb.append(" < ? ")[ FD ]
Line_12 $$ if (leftOrRight) -->Line_18 $$ sb.append(_nestedSetsTreeNodeRightName)[ CD ]
Line_59 $$ session = _basePersistenceImpl.openSession()-->Line_70 $$ _basePersistenceImpl.closeSession(session)[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_65 $$ qPos.add(end)[ FD ]
Line_46 $$ if (includeList != null) -->Line_47 $$ sb.append(" AND ")[ CD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_9 $$ sb.append("UPDATE ")[ CD ]
Line_3 $$ StringBundler sb = null-->Line_48 $$ sb.append(_primaryKeyName)[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_25 $$ sb.append(" = ? AND ")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_23 $$ sb.append(" WHERE ")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_14 $$ sb.append(" = (")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_51 $$ sb.append(t.getPrimaryKey())[ FD ]
Line_61 $$ QueryPos qPos = QueryPos.getInstance(sqlQuery)-->Line_65 $$ qPos.add(end)[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_24 $$ sb.append(_nestedSetsTreeNodeScopeIdName)[ CD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_36 $$ if (leftOrRight) [ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_25 $$ sb.append(" = ? AND ")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_10 $$ sb.append(_tableName)[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_10 $$ sb.append(_tableName)[ CD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_34 $$ sb.append(" > ? AND ")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_54 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_11 $$ sb.append(" SET ")[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_41 $$ if (endInclusive) [ CD ]
Line_60 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery(sb.toString())-->Line_61 $$ QueryPos qPos = QueryPos.getInstance(sqlQuery)[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_20 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_18 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_60 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery(sb.toString())-->Line_66 $$ sqlQuery.executeUpdate()[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_16 $$ sb.append(" + ?)")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_44 $$ sb.append(" < ? ")[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_57 $$ Session session = null[ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_47 $$ sb.append(" AND ")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_48 $$ sb.append(_primaryKeyName)[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_49 $$ sb.append(" IN(")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_20 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_12 $$ if (leftOrRight) -->Line_21 $$ sb.append(" + ?)")[ CD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_26 $$ if (leftOrRight) [ CD ]
Line_3 $$ StringBundler sb = null-->Line_55 $$ sb.append(")")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_13 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_32 $$ sb.append(" >= ? AND ")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_19 $$ sb.append(" = (")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_18 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_59 $$ session = _basePersistenceImpl.openSession()-->Line_60 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery(sb.toString())[ FD ]
Line_57 $$ Session session = null-->Line_59 $$ session = _basePersistenceImpl.openSession()[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_39 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_24 $$ sb.append(_nestedSetsTreeNodeScopeIdName)[ FD ]
Line_12 $$ if (leftOrRight) -->Line_14 $$ sb.append(" = (")[ CD ]
Line_46 $$ if (includeList != null) -->Line_55 $$ sb.append(")")[ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_19 $$ sb.append(" = (")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_49 $$ sb.append(" IN(")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_16 $$ sb.append(" + ?)")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_52 $$ sb.append(", ")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_9 $$ sb.append("UPDATE ")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_37 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_15 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_10 $$ sb.append(_tableName)[ FD ]
Line_50 $$ for (T t : includeList) -->Line_51 $$ sb.append(t.getPrimaryKey())[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_27 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_12 $$ if (leftOrRight) -->Line_20 $$ sb.append(_nestedSetsTreeNodeRightName)[ CD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_31 $$ if (startInclusive) [ CD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_18 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_46 $$ if (includeList != null) -->Line_49 $$ sb.append(" IN(")[ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_34 $$ sb.append(" > ? AND ")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_32 $$ sb.append(" >= ? AND ")[ FD ]
Line_4 $$ if (includeList == null) -->Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)[ CD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_4 $$ if (includeList == null) [ CD ]
Line_12 $$ if (leftOrRight) -->Line_19 $$ sb.append(" = (")[ CD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_32 $$ sb.append(" >= ? AND ")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_39 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_12 $$ if (leftOrRight) -->Line_16 $$ sb.append(" + ?)")[ CD ]
Line_3 $$ StringBundler sb = null-->Line_54 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_46 $$ if (includeList != null) -->Line_54 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_14 $$ sb.append(" = (")[ FD ]
Line_41 $$ if (endInclusive) -->Line_42 $$ sb.append(" <= ? ")[ CD ]
Line_3 $$ StringBundler sb = null-->Line_21 $$ sb.append(" + ?)")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_55 $$ sb.append(")")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_11 $$ sb.append(" SET ")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_42 $$ sb.append(" <= ? ")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_52 $$ sb.append(", ")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_48 $$ sb.append(_primaryKeyName)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_23 $$ sb.append(" WHERE ")[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_63 $$ qPos.add(nestedSetsTreeNodeScopeId)[ FD ]
Line_4 $$ if (includeList == null) -->Line_5 $$ sb = new StringBundler(14)[ CD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_23 $$ sb.append(" WHERE ")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_34 $$ sb.append(" > ? AND ")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_9 $$ sb.append("UPDATE ")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_60 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery(sb.toString())[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_15 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_37 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_16 $$ sb.append(" + ?)")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_44 $$ sb.append(" < ? ")[ FD ]
Line_41 $$ if (endInclusive) -->Line_44 $$ sb.append(" < ? ")[ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_52 $$ sb.append(", ")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_49 $$ sb.append(" IN(")[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_11 $$ sb.append(" SET ")[ CD ]
Line_3 $$ StringBundler sb = null-->Line_19 $$ sb.append(" = (")[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_23 $$ sb.append(" WHERE ")[ CD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_39 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_61 $$ QueryPos qPos = QueryPos.getInstance(sqlQuery)-->Line_62 $$ qPos.add(delta)[ FD ]
Line_26 $$ if (leftOrRight) -->Line_27 $$ sb.append(_nestedSetsTreeNodeLeftName)[ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_60 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery(sb.toString())[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_4 $$ if (includeList == null) [ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_51 $$ sb.append(t.getPrimaryKey())[ FD ]
Line_3 $$ StringBundler sb = null-->Line_29 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_57 $$ Session session = null-->Line_70 $$ _basePersistenceImpl.closeSession(session)[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_51 $$ sb.append(t.getPrimaryKey())[ FD ]
Line_12 $$ if (leftOrRight) -->Line_15 $$ sb.append(_nestedSetsTreeNodeLeftName)[ CD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_64 $$ qPos.add(start)[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_25 $$ sb.append(" = ? AND ")[ CD ]
Line_26 $$ if (leftOrRight) -->Line_29 $$ sb.append(_nestedSetsTreeNodeRightName)[ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_54 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_60 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery(sb.toString())[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_24 $$ sb.append(_nestedSetsTreeNodeScopeIdName)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_24 $$ sb.append(_nestedSetsTreeNodeScopeIdName)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_10 $$ sb.append(_tableName)[ FD ]
Line_57 $$ Session session = null-->Line_60 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery(sb.toString())[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_13 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_46 $$ if (includeList != null) -->Line_48 $$ sb.append(_primaryKeyName)[ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_21 $$ sb.append(" + ?)")[ FD ]
Line_5 $$ sb = new StringBundler(14)-->Line_29 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_9 $$ sb.append("UPDATE ")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_25 $$ sb.append(" = ? AND ")[ FD ]
Line_12 $$ if (leftOrRight) -->Line_13 $$ sb.append(_nestedSetsTreeNodeLeftName)[ CD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_46 $$ if (includeList != null) [ CD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_37 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_47 $$ sb.append(" AND ")[ FD ]
Line_61 $$ QueryPos qPos = QueryPos.getInstance(sqlQuery)-->Line_63 $$ qPos.add(nestedSetsTreeNodeScopeId)[ FD ]
Line_31 $$ if (startInclusive) -->Line_34 $$ sb.append(" > ? AND ")[ CD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_12 $$ if (leftOrRight) [ CD ]
Line_5 $$ sb = new StringBundler(14)-->Line_42 $$ sb.append(" <= ? ")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_29 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_3 $$ StringBundler sb = null-->Line_20 $$ sb.append(_nestedSetsTreeNodeRightName)[ FD ]
Line_2 $$ protected void doUpdate(boolean leftOrRight, long nestedSetsTreeNodeScopeId, long delta, long start, boolean startInclusive, long end, boolean endInclusive, List<T> includeList) -->Line_3 $$ StringBundler sb = null[ CD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_55 $$ sb.append(")")[ FD ]
Line_36 $$ if (leftOrRight) -->Line_39 $$ sb.append(_nestedSetsTreeNodeRightName)[ CD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_42 $$ sb.append(" <= ? ")[ FD ]
Line_3 $$ StringBundler sb = null-->Line_11 $$ sb.append(" SET ")[ FD ]
Line_7 $$ sb = new StringBundler(17 + includeList.size() * 2)-->Line_27 $$ sb.append(_nestedSetsTreeNodeLeftName)[ FD ]
