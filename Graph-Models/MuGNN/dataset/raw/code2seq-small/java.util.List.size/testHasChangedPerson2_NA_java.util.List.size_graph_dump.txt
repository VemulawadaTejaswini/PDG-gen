Line_2 $$ public void testHasChangedPerson2() throws Exception -->Line_4 $$ assertEquals(2, list.size())[ CD ]
Line_3 $$ List list = getAuditReader().createQuery().forRevisionsOfEntity(Person.class, "Personaje", false, false).add(AuditEntity.id().eq(id_pers2)).add(AuditEntity.property("cars").hasChanged()).getResultList()-->Line_6 $$ list = getAuditReader().createQuery().forRevisionsOfEntity(Person.class, "Personaje", false, false).add(AuditEntity.id().eq(id_pers2)).add(AuditEntity.property("cars").hasNotChanged()).getResultList()[ FD ]
Line_3 $$ List list = getAuditReader().createQuery().forRevisionsOfEntity(Person.class, "Personaje", false, false).add(AuditEntity.id().eq(id_pers2)).add(AuditEntity.property("cars").hasChanged()).getResultList()-->Line_5 $$ assertEquals(makeList(1, 2), extractRevisionNumbers(list))[ FD ]
Line_2 $$ public void testHasChangedPerson2() throws Exception -->Line_6 $$ list = getAuditReader().createQuery().forRevisionsOfEntity(Person.class, "Personaje", false, false).add(AuditEntity.id().eq(id_pers2)).add(AuditEntity.property("cars").hasNotChanged()).getResultList()[ CD ]
Line_3 $$ List list = getAuditReader().createQuery().forRevisionsOfEntity(Person.class, "Personaje", false, false).add(AuditEntity.id().eq(id_pers2)).add(AuditEntity.property("cars").hasChanged()).getResultList()-->Line_4 $$ assertEquals(2, list.size())[ FD ]
Line_3 $$ List list = getAuditReader().createQuery().forRevisionsOfEntity(Person.class, "Personaje", false, false).add(AuditEntity.id().eq(id_pers2)).add(AuditEntity.property("cars").hasChanged()).getResultList()-->Line_7 $$ assertEquals(0, list.size())[ FD ]
Line_2 $$ public void testHasChangedPerson2() throws Exception -->Line_5 $$ assertEquals(makeList(1, 2), extractRevisionNumbers(list))[ CD ]
Line_2 $$ public void testHasChangedPerson2() throws Exception -->Line_7 $$ assertEquals(0, list.size())[ CD ]
Line_6 $$ list = getAuditReader().createQuery().forRevisionsOfEntity(Person.class, "Personaje", false, false).add(AuditEntity.id().eq(id_pers2)).add(AuditEntity.property("cars").hasNotChanged()).getResultList()-->Line_7 $$ assertEquals(0, list.size())[ FD ]
Line_2 $$ public void testHasChangedPerson2() throws Exception -->Line_3 $$ List list = getAuditReader().createQuery().forRevisionsOfEntity(Person.class, "Personaje", false, false).add(AuditEntity.id().eq(id_pers2)).add(AuditEntity.property("cars").hasChanged()).getResultList()[ CD ]
