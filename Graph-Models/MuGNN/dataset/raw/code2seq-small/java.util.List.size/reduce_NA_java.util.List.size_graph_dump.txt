Line_4 $$ long docCount = 0-->Line_6 $$ docCount += bucket.docCount[ FD ]
Line_2 $$ <B extends Bucket> B reduce(List<B> buckets, ReduceContext context) -->Line_3 $$ List<InternalAggregations> aggregations = new ArrayList(buckets.size())[ CD ]
Line_3 $$ List<InternalAggregations> aggregations = new ArrayList(buckets.size())-->Line_7 $$ aggregations.add((InternalAggregations) bucket.getAggregations())[ FD ]
Line_2 $$ <B extends Bucket> B reduce(List<B> buckets, ReduceContext context) -->Line_3 $$ List<InternalAggregations> aggregations = new ArrayList(buckets.size())[ FD ]
Line_4 $$ long docCount = 0-->Line_10 $$ return (B) getFactory().createBucket(key, docCount, aggs, keyed, formatter)[ FD ]
Line_2 $$ <B extends Bucket> B reduce(List<B> buckets, ReduceContext context) -->Line_10 $$ return (B) getFactory().createBucket(key, docCount, aggs, keyed, formatter)[ CD ]
Line_2 $$ <B extends Bucket> B reduce(List<B> buckets, ReduceContext context) -->Line_4 $$ long docCount = 0[ CD ]
Line_2 $$ <B extends Bucket> B reduce(List<B> buckets, ReduceContext context) -->Line_9 $$ InternalAggregations aggs = InternalAggregations.reduce(aggregations, context)[ CD ]
Line_3 $$ List<InternalAggregations> aggregations = new ArrayList(buckets.size())-->Line_9 $$ InternalAggregations aggs = InternalAggregations.reduce(aggregations, context)[ FD ]
Line_2 $$ <B extends Bucket> B reduce(List<B> buckets, ReduceContext context) -->Line_9 $$ InternalAggregations aggs = InternalAggregations.reduce(aggregations, context)[ FD ]
Line_5 $$ for (Bucket bucket : buckets) -->Line_7 $$ aggregations.add((InternalAggregations) bucket.getAggregations())[ FD ]
Line_6 $$ docCount += bucket.docCount-->Line_10 $$ return (B) getFactory().createBucket(key, docCount, aggs, keyed, formatter)[ FD ]
Line_9 $$ InternalAggregations aggs = InternalAggregations.reduce(aggregations, context)-->Line_10 $$ return (B) getFactory().createBucket(key, docCount, aggs, keyed, formatter)[ FD ]
