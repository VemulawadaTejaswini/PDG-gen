Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_9 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_8 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_2 $$ public void testResilientToUpdateFailures() -->Line_3 $$ Throwable throwable = new RuntimeException()[ CD ]
Line_9 $$ LogRecord logRecord = logRecords.get(0)-->Line_10 $$ Assert.assertEquals("Unable to update number of replicas", logRecord.getMessage())[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.get(0)-->Line_11 $$ Assert.assertSame(throwable, logRecord.getThrown())[ FD ]
Line_3 $$ Throwable throwable = new RuntimeException()-->Line_4 $$ Mockito.doThrow(throwable).when(_replicasManager).updateNumberOfReplicas(Mockito.anyInt(), (String[]) Mockito.anyVararg())[ FD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(ReplicasClusterListener.class.getName(), Level.WARNING)) -->Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_3 $$ Throwable throwable = new RuntimeException()-->Line_11 $$ Assert.assertSame(throwable, logRecord.getThrown())[ FD ]
Line_2 $$ public void testResilientToUpdateFailures() -->Line_4 $$ Mockito.doThrow(throwable).when(_replicasManager).updateNumberOfReplicas(Mockito.anyInt(), (String[]) Mockito.anyVararg())[ CD ]
