Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)-->Line_46 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(arg)[ FD ]
Line_47 $$ if (virtualFile != null) -->Line_50 $$ Messages.showErrorDialog("Cannot find file '" + arg + "'", "Cannot find file")[ CD ]
Line_46 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(arg)-->Line_48 $$ lastOpenedProject = doOpenFile(virtualFile, line)[ FD ]
Line_45 $$ if (line != -1) -->Line_53 $$ lastOpenedProject = doOpenFileOrProject(arg)[ CD ]
Line_6 $$ for (String arg : args) -->Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()[ FD ]
Line_6 $$ for (String arg : args) -->Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)[ FD ]
Line_13 $$ for (ApplicationStarter starter : Extensions.getExtensions(ApplicationStarter.EP_NAME)) -->Line_14 $$ if (command.equals(starter.getCommandName()) && starter instanceof ApplicationStarterEx && ((ApplicationStarterEx) starter).canProcessExternalCommandLine()) [ FD ]
Line_11 $$ if (args.size() > 0) -->Line_12 $$ String command = args.get(0)[ CD ]
Line_6 $$ for (String arg : args) -->Line_46 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(arg)[ FD ]
Line_14 $$ if (command.equals(starter.getCommandName()) && starter instanceof ApplicationStarterEx && ((ApplicationStarterEx) starter).canProcessExternalCommandLine()) -->Line_16 $$ ((ApplicationStarterEx) starter).processExternalCommandLine(ArrayUtil.toStringArray(args), currentDirectory)[ CD ]
Line_23 $$ for (int i = 0, argsSize = args.size(); i < argsSize; i++) -->Line_25 $$ if (arg.equals(StartupUtil.NO_SPLASH)) [ CD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_16 $$ ((ApplicationStarterEx) starter).processExternalCommandLine(ArrayUtil.toStringArray(args), currentDirectory)[ FD ]
Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)-->Line_25 $$ if (arg.equals(StartupUtil.NO_SPLASH)) [ FD ]
Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)-->Line_39 $$ if (StringUtil.isQuotedString(arg)) [ FD ]
Line_21 $$ Project lastOpenedProject = null-->Line_53 $$ lastOpenedProject = doOpenFileOrProject(arg)[ FD ]
Line_14 $$ if (command.equals(starter.getCommandName()) && starter instanceof ApplicationStarterEx && ((ApplicationStarterEx) starter).canProcessExternalCommandLine()) -->Line_15 $$ LOG.info("Processing command with " + starter)[ CD ]
Line_6 $$ for (String arg : args) -->Line_7 $$ LOG.info(arg)[ FD ]
Line_23 $$ for (int i = 0, argsSize = args.size(); i < argsSize; i++) -->Line_30 $$ if (i == args.size()) [ FD ]
Line_36 $$ line = -1-->Line_45 $$ if (line != -1) [ FD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_30 $$ if (i == args.size()) [ FD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_3 $$ if (args.size() > 0) [ FD ]
Line_46 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(arg)-->Line_47 $$ if (virtualFile != null) [ FD ]
Line_6 $$ for (String arg : args) -->Line_39 $$ if (StringUtil.isQuotedString(arg)) [ FD ]
Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()-->Line_39 $$ if (StringUtil.isQuotedString(arg)) [ FD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_23 $$ for (int i = 0, argsSize = args.size(); i < argsSize; i++) [ CD ]
Line_22 $$ int line = -1-->Line_48 $$ lastOpenedProject = doOpenFile(virtualFile, line)[ FD ]
Line_23 $$ for (int i = 0, argsSize = args.size(); i < argsSize; i++) -->Line_24 $$ String arg = args.get(i)[ FD ]
Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()-->Line_46 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(arg)[ FD ]
Line_23 $$ for (int i = 0, argsSize = args.size(); i < argsSize; i++) -->Line_29 $$ i++[ FD ]
Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()-->Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)[ FD ]
Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()-->Line_53 $$ lastOpenedProject = doOpenFileOrProject(arg)[ FD ]
Line_45 $$ if (line != -1) -->Line_47 $$ if (virtualFile != null) [ CD ]
Line_36 $$ line = -1-->Line_48 $$ lastOpenedProject = doOpenFile(virtualFile, line)[ FD ]
Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) -->Line_45 $$ if (line != -1) [ CD ]
Line_6 $$ for (String arg : args) -->Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) [ FD ]
Line_22 $$ int line = -1-->Line_34 $$ line = Integer.parseInt(args.get(i))[ FD ]
Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) -->Line_39 $$ if (StringUtil.isQuotedString(arg)) [ CD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_22 $$ int line = -1[ CD ]
Line_34 $$ line = Integer.parseInt(args.get(i))-->Line_48 $$ lastOpenedProject = doOpenFile(virtualFile, line)[ FD ]
Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) -->Line_42 $$ if (!new File(arg).isAbsolute()) [ CD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_10 $$ LOG.info("-----")[ CD ]
Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)-->Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) [ FD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_12 $$ String command = args.get(0)[ FD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_21 $$ Project lastOpenedProject = null[ CD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_11 $$ if (args.size() > 0) [ FD ]
Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()-->Line_25 $$ if (arg.equals(StartupUtil.NO_SPLASH)) [ FD ]
Line_14 $$ if (command.equals(starter.getCommandName()) && starter instanceof ApplicationStarterEx && ((ApplicationStarterEx) starter).canProcessExternalCommandLine()) -->Line_17 $$ return null[ CD ]
Line_6 $$ for (String arg : args) -->Line_53 $$ lastOpenedProject = doOpenFileOrProject(arg)[ FD ]
Line_34 $$ line = Integer.parseInt(args.get(i))-->Line_45 $$ if (line != -1) [ FD ]
Line_47 $$ if (virtualFile != null) -->Line_48 $$ lastOpenedProject = doOpenFile(virtualFile, line)[ CD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_11 $$ if (args.size() > 0) [ CD ]
Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) -->Line_30 $$ if (i == args.size()) [ CD ]
Line_24 $$ String arg = args.get(i)-->Line_46 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(arg)[ FD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_57 $$ return lastOpenedProject[ CD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_3 $$ if (args.size() > 0) [ CD ]
Line_22 $$ int line = -1-->Line_45 $$ if (line != -1) [ FD ]
Line_39 $$ if (StringUtil.isQuotedString(arg)) -->Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)[ CD ]
Line_3 $$ if (args.size() > 0) -->Line_4 $$ LOG.info("External command line:")[ CD ]
Line_3 $$ if (args.size() > 0) -->Line_5 $$ LOG.info("Dir: " + currentDirectory)[ CD ]
Line_21 $$ Project lastOpenedProject = null-->Line_48 $$ lastOpenedProject = doOpenFile(virtualFile, line)[ FD ]
Line_24 $$ String arg = args.get(i)-->Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)[ FD ]
Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)-->Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()[ FD ]
Line_6 $$ for (String arg : args) -->Line_25 $$ if (arg.equals(StartupUtil.NO_SPLASH)) [ FD ]
Line_45 $$ if (line != -1) -->Line_46 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(arg)[ CD ]
Line_24 $$ String arg = args.get(i)-->Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()[ FD ]
Line_23 $$ for (int i = 0, argsSize = args.size(); i < argsSize; i++) -->Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) [ CD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_34 $$ line = Integer.parseInt(args.get(i))[ FD ]
Line_48 $$ lastOpenedProject = doOpenFile(virtualFile, line)-->Line_53 $$ lastOpenedProject = doOpenFileOrProject(arg)[ FD ]
Line_40 $$ arg = StringUtil.stripQuotesAroundValue(arg)-->Line_53 $$ lastOpenedProject = doOpenFileOrProject(arg)[ FD ]
Line_42 $$ if (!new File(arg).isAbsolute()) -->Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()[ CD ]
Line_12 $$ String command = args.get(0)-->Line_14 $$ if (command.equals(starter.getCommandName()) && starter instanceof ApplicationStarterEx && ((ApplicationStarterEx) starter).canProcessExternalCommandLine()) [ FD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_23 $$ for (int i = 0, argsSize = args.size(); i < argsSize; i++) [ FD ]
Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) -->Line_29 $$ i++[ CD ]
Line_24 $$ String arg = args.get(i)-->Line_53 $$ lastOpenedProject = doOpenFileOrProject(arg)[ FD ]
Line_22 $$ int line = -1-->Line_36 $$ line = -1[ FD ]
Line_23 $$ for (int i = 0, argsSize = args.size(); i < argsSize; i++) -->Line_34 $$ line = Integer.parseInt(args.get(i))[ FD ]
Line_23 $$ for (int i = 0, argsSize = args.size(); i < argsSize; i++) -->Line_24 $$ String arg = args.get(i)[ CD ]
Line_43 $$ arg = currentDirectory != null ? new File(currentDirectory, arg).getAbsolutePath() : new File(arg).getAbsolutePath()-->Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) [ FD ]
Line_34 $$ line = Integer.parseInt(args.get(i))-->Line_36 $$ line = -1[ FD ]
Line_24 $$ String arg = args.get(i)-->Line_25 $$ if (arg.equals(StartupUtil.NO_SPLASH)) [ FD ]
Line_2 $$ public static Project processExternalCommandLine(List<String> args, @Nullable String currentDirectory) -->Line_24 $$ String arg = args.get(i)[ FD ]
Line_24 $$ String arg = args.get(i)-->Line_39 $$ if (StringUtil.isQuotedString(arg)) [ FD ]
Line_24 $$ String arg = args.get(i)-->Line_28 $$ if (arg.equals("-l") || arg.equals("--line")) [ FD ]
