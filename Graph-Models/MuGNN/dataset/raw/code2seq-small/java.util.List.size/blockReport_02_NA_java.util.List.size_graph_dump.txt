Line_2 $$ public void blockReport_02() throws IOException -->Line_37 $$ waitTil(DN_RESCAN_EXTRA_WAIT)[ CD ]
Line_12 $$ while (removedIndex.size() != 2) -->Line_14 $$ if (!removedIndex.contains(newRemoveIndex))[ CD ]
Line_28 $$ for (File f : findAllFiles(dataDir, new MyFileFilter(b.getBlockName(), true))) -->Line_33 $$ LOG.debug("Deleted file " + f.toString())[ FD ]
Line_9 $$ List<ExtendedBlock> blocks2Remove = new ArrayList<ExtendedBlock>()-->Line_18 $$ blocks2Remove.add(lBlocks.get(aRemovedIndex).getBlock())[ FD ]
Line_20 $$ if (LOG.isDebugEnabled()) -->Line_21 $$ LOG.debug("Number of blocks allocated " + lBlocks.size())[ CD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_9 $$ List<ExtendedBlock> blocks2Remove = new ArrayList<ExtendedBlock>()[ CD ]
Line_10 $$ List<Integer> removedIndex = new ArrayList<Integer>()-->Line_15 $$ removedIndex.add(newRemoveIndex)[ FD ]
Line_23 $$ final DataNode dn0 = cluster.getDataNodes().get(DN_N0)-->Line_29 $$ DataNodeTestUtils.getFSDataset(dn0).unfinalizeBlock(b)[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_43 $$ printStats()[ CD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_12 $$ while (removedIndex.size() != 2) [ CD ]
Line_30 $$ if (!f.delete()) -->Line_31 $$ LOG.warn("Couldn't delete " + b.getBlockName())[ CD ]
Line_25 $$ if (LOG.isDebugEnabled()) -->Line_26 $$ LOG.debug("Removing the block " + b.getBlockName())[ CD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_23 $$ final DataNode dn0 = cluster.getDataNodes().get(DN_N0)[ CD ]
Line_28 $$ for (File f : findAllFiles(dataDir, new MyFileFilter(b.getBlockName(), true))) -->Line_30 $$ if (!f.delete()) [ FD ]
Line_13 $$ int newRemoveIndex = rand.nextInt(lBlocks.size())-->Line_15 $$ removedIndex.add(newRemoveIndex)[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_5 $$ Path filePath = new Path("/" + METHOD_NAME + ".dat")[ CD ]
Line_9 $$ List<ExtendedBlock> blocks2Remove = new ArrayList<ExtendedBlock>()-->Line_44 $$ assertEquals("Wrong number of MissingBlocks is found", blocks2Remove.size(), cluster.getNamesystem().getMissingBlocksCount())[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_20 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_39 $$ DatanodeRegistration dnR = dn0.getDNRegistrationForBP(poolId)-->Line_41 $$ sendBlockReports(dnR, poolId, reports)[ FD ]
Line_24 $$ for (ExtendedBlock b : blocks2Remove) -->Line_29 $$ DataNodeTestUtils.getFSDataset(dn0).unfinalizeBlock(b)[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_10 $$ List<Integer> removedIndex = new ArrayList<Integer>()[ CD ]
Line_7 $$ File dataDir = new File(cluster.getDataDirectory())-->Line_28 $$ for (File f : findAllFiles(dataDir, new MyFileFilter(b.getBlockName(), true))) [ FD ]
Line_9 $$ List<ExtendedBlock> blocks2Remove = new ArrayList<ExtendedBlock>()-->Line_45 $$ assertEquals("Wrong number of UnderReplicatedBlocks is found", blocks2Remove.size(), cluster.getNamesystem().getUnderReplicatedBlocks())[ FD ]
Line_13 $$ int newRemoveIndex = rand.nextInt(lBlocks.size())-->Line_14 $$ if (!removedIndex.contains(newRemoveIndex))[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_42 $$ BlockManagerTestUtil.getComputedDatanodeWork(cluster.getNamesystem().getBlockManager())[ CD ]
Line_10 $$ List<Integer> removedIndex = new ArrayList<Integer>()-->Line_14 $$ if (!removedIndex.contains(newRemoveIndex))[ FD ]
Line_38 $$ String poolId = cluster.getNamesystem().getBlockPoolId()-->Line_40 $$ StorageBlockReport[] reports = getBlockReports(dn0, poolId, false, false)[ FD ]
Line_24 $$ for (ExtendedBlock b : blocks2Remove) -->Line_26 $$ LOG.debug("Removing the block " + b.getBlockName())[ FD ]
Line_38 $$ String poolId = cluster.getNamesystem().getBlockPoolId()-->Line_41 $$ sendBlockReports(dnR, poolId, reports)[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_6 $$ DFSTestUtil.createFile(fs, filePath, FILE_SIZE, REPL_FACTOR, rand.nextLong())[ CD ]
Line_30 $$ if (!f.delete()) -->Line_33 $$ LOG.debug("Deleted file " + f.toString())[ CD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_44 $$ assertEquals("Wrong number of MissingBlocks is found", blocks2Remove.size(), cluster.getNamesystem().getMissingBlocksCount())[ CD ]
Line_10 $$ List<Integer> removedIndex = new ArrayList<Integer>()-->Line_12 $$ while (removedIndex.size() != 2) [ FD ]
Line_5 $$ Path filePath = new Path("/" + METHOD_NAME + ".dat")-->Line_6 $$ DFSTestUtil.createFile(fs, filePath, FILE_SIZE, REPL_FACTOR, rand.nextLong())[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_39 $$ DatanodeRegistration dnR = dn0.getDNRegistrationForBP(poolId)[ CD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_3 $$ final String METHOD_NAME = GenericTestUtils.getMethodName()[ CD ]
Line_11 $$ List<LocatedBlock> lBlocks = cluster.getNameNodeRpc().getBlockLocations(filePath.toString(), FILE_START, FILE_SIZE).getLocatedBlocks()-->Line_21 $$ LOG.debug("Number of blocks allocated " + lBlocks.size())[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_7 $$ File dataDir = new File(cluster.getDataDirectory())[ CD ]
Line_24 $$ for (ExtendedBlock b : blocks2Remove) -->Line_28 $$ for (File f : findAllFiles(dataDir, new MyFileFilter(b.getBlockName(), true))) [ FD ]
Line_40 $$ StorageBlockReport[] reports = getBlockReports(dn0, poolId, false, false)-->Line_41 $$ sendBlockReports(dnR, poolId, reports)[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_40 $$ StorageBlockReport[] reports = getBlockReports(dn0, poolId, false, false)[ CD ]
Line_11 $$ List<LocatedBlock> lBlocks = cluster.getNameNodeRpc().getBlockLocations(filePath.toString(), FILE_START, FILE_SIZE).getLocatedBlocks()-->Line_13 $$ int newRemoveIndex = rand.nextInt(lBlocks.size())[ FD ]
Line_12 $$ while (removedIndex.size() != 2) -->Line_13 $$ int newRemoveIndex = rand.nextInt(lBlocks.size())[ CD ]
Line_38 $$ String poolId = cluster.getNamesystem().getBlockPoolId()-->Line_39 $$ DatanodeRegistration dnR = dn0.getDNRegistrationForBP(poolId)[ FD ]
Line_11 $$ List<LocatedBlock> lBlocks = cluster.getNameNodeRpc().getBlockLocations(filePath.toString(), FILE_START, FILE_SIZE).getLocatedBlocks()-->Line_18 $$ blocks2Remove.add(lBlocks.get(aRemovedIndex).getBlock())[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_45 $$ assertEquals("Wrong number of UnderReplicatedBlocks is found", blocks2Remove.size(), cluster.getNamesystem().getUnderReplicatedBlocks())[ CD ]
Line_23 $$ final DataNode dn0 = cluster.getDataNodes().get(DN_N0)-->Line_40 $$ StorageBlockReport[] reports = getBlockReports(dn0, poolId, false, false)[ FD ]
Line_7 $$ File dataDir = new File(cluster.getDataDirectory())-->Line_8 $$ assertTrue(dataDir.isDirectory())[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_4 $$ LOG.info("Running test " + METHOD_NAME)[ CD ]
Line_14 $$ if (!removedIndex.contains(newRemoveIndex))-->Line_15 $$ removedIndex.add(newRemoveIndex)[ CD ]
Line_5 $$ Path filePath = new Path("/" + METHOD_NAME + ".dat")-->Line_11 $$ List<LocatedBlock> lBlocks = cluster.getNameNodeRpc().getBlockLocations(filePath.toString(), FILE_START, FILE_SIZE).getLocatedBlocks()[ FD ]
Line_24 $$ for (ExtendedBlock b : blocks2Remove) -->Line_31 $$ LOG.warn("Couldn't delete " + b.getBlockName())[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_41 $$ sendBlockReports(dnR, poolId, reports)[ CD ]
Line_23 $$ final DataNode dn0 = cluster.getDataNodes().get(DN_N0)-->Line_39 $$ DatanodeRegistration dnR = dn0.getDNRegistrationForBP(poolId)[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_11 $$ List<LocatedBlock> lBlocks = cluster.getNameNodeRpc().getBlockLocations(filePath.toString(), FILE_START, FILE_SIZE).getLocatedBlocks()[ CD ]
Line_17 $$ for (Integer aRemovedIndex : removedIndex) -->Line_18 $$ blocks2Remove.add(lBlocks.get(aRemovedIndex).getBlock())[ FD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_8 $$ assertTrue(dataDir.isDirectory())[ CD ]
Line_2 $$ public void blockReport_02() throws IOException -->Line_38 $$ String poolId = cluster.getNamesystem().getBlockPoolId()[ CD ]
