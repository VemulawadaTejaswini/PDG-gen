Line_6 $$ ImmutableList.Builder<HivePartitionKey> partitionKeys = ImmutableList.builder()-->Line_15 $$ partitionKeys.add(new HivePartitionKey(name, hiveType, value))[ FD ]
Line_7 $$ List<FieldSchema> keys = table.getPartitionKeys()-->Line_9 $$ checkCondition(keys.size() == values.size(), HIVE_INVALID_METADATA, "Expected %s partition key values, but got %s", keys.size(), values.size())[ FD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_9 $$ checkCondition(keys.size() == values.size(), HIVE_INVALID_METADATA, "Expected %s partition key values, but got %s", keys.size(), values.size())[ CD ]
Line_7 $$ List<FieldSchema> keys = table.getPartitionKeys()-->Line_12 $$ HiveType hiveType = HiveType.valueOf(keys.get(i).getType())[ FD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_8 $$ List<String> values = partition.getValues()[ FD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_10 $$ for (int i = 0; i < keys.size(); i++) [ CD ]
Line_7 $$ List<FieldSchema> keys = table.getPartitionKeys()-->Line_11 $$ String name = keys.get(i).getName()[ FD ]
Line_10 $$ for (int i = 0; i < keys.size(); i++) -->Line_13 $$ String value = values.get(i)[ FD ]
Line_8 $$ List<String> values = partition.getValues()-->Line_13 $$ String value = values.get(i)[ FD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_17 $$ return partitionKeys.build()[ CD ]
Line_10 $$ for (int i = 0; i < keys.size(); i++) -->Line_11 $$ String name = keys.get(i).getName()[ CD ]
Line_6 $$ ImmutableList.Builder<HivePartitionKey> partitionKeys = ImmutableList.builder()-->Line_17 $$ return partitionKeys.build()[ FD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_6 $$ ImmutableList.Builder<HivePartitionKey> partitionKeys = ImmutableList.builder()[ CD ]
Line_10 $$ for (int i = 0; i < keys.size(); i++) -->Line_14 $$ checkCondition(value != null, HIVE_INVALID_PARTITION_VALUE, "partition key value cannot be null for field: %s", name)[ CD ]
Line_11 $$ String name = keys.get(i).getName()-->Line_14 $$ checkCondition(value != null, HIVE_INVALID_PARTITION_VALUE, "partition key value cannot be null for field: %s", name)[ FD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_3 $$ if (isUnpartitioned(partition)) [ CD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_3 $$ if (isUnpartitioned(partition)) [ FD ]
Line_10 $$ for (int i = 0; i < keys.size(); i++) -->Line_11 $$ String name = keys.get(i).getName()[ FD ]
Line_3 $$ if (isUnpartitioned(partition)) -->Line_4 $$ return ImmutableList.of()[ CD ]
Line_10 $$ for (int i = 0; i < keys.size(); i++) -->Line_13 $$ String value = values.get(i)[ CD ]
Line_8 $$ List<String> values = partition.getValues()-->Line_9 $$ checkCondition(keys.size() == values.size(), HIVE_INVALID_METADATA, "Expected %s partition key values, but got %s", keys.size(), values.size())[ FD ]
Line_10 $$ for (int i = 0; i < keys.size(); i++) -->Line_12 $$ HiveType hiveType = HiveType.valueOf(keys.get(i).getType())[ FD ]
Line_10 $$ for (int i = 0; i < keys.size(); i++) -->Line_15 $$ partitionKeys.add(new HivePartitionKey(name, hiveType, value))[ CD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_8 $$ List<String> values = partition.getValues()[ CD ]
Line_7 $$ List<FieldSchema> keys = table.getPartitionKeys()-->Line_10 $$ for (int i = 0; i < keys.size(); i++) [ FD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_7 $$ List<FieldSchema> keys = table.getPartitionKeys()[ FD ]
Line_10 $$ for (int i = 0; i < keys.size(); i++) -->Line_12 $$ HiveType hiveType = HiveType.valueOf(keys.get(i).getType())[ CD ]
Line_2 $$ private static List<HivePartitionKey> getPartitionKeys(Table table, Partition partition) -->Line_7 $$ List<FieldSchema> keys = table.getPartitionKeys()[ CD ]
