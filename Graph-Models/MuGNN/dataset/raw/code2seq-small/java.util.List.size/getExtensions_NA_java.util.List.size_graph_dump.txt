Line_17 $$ if (i > 0 && extension == result[i - 1]) -->Line_18 $$ LOG.error("Duplicate extension found: " + extension + "; " + " Result:      " + Arrays.toString(result) + ";\n" + " extensions: " + myExtensions + ";\n" + " getExtensionClass(): " + extensionClass + ";\n" + " size:" + myExtensions.size() + ";" + result.length)[ CD ]
Line_2 $$ public T[] getExtensions() -->Line_25 $$ return result[ CD ]
Line_7 $$ if (result == null) -->Line_9 $$ Class<T> extensionClass = getExtensionClass()[ CD ]
Line_10 $$ T[] a = (T[]) Array.newInstance(extensionClass, myExtensions.size())-->Line_11 $$ result = myExtensions.toArray(a)[ FD ]
Line_7 $$ if (result == null) -->Line_12 $$ for (int i = result.length - 1; i >= 0; i--) [ CD ]
Line_3 $$ T[] result = myExtensionsCache-->Line_11 $$ result = myExtensions.toArray(a)[ FD ]
Line_6 $$ result = myExtensionsCache-->Line_11 $$ result = myExtensions.toArray(a)[ FD ]
Line_12 $$ for (int i = result.length - 1; i >= 0; i--) -->Line_13 $$ T extension = result[i][ CD ]
Line_3 $$ T[] result = myExtensionsCache-->Line_6 $$ result = myExtensionsCache[ FD ]
Line_7 $$ if (result == null) -->Line_11 $$ result = myExtensions.toArray(a)[ CD ]
Line_9 $$ Class<T> extensionClass = getExtensionClass()-->Line_10 $$ T[] a = (T[]) Array.newInstance(extensionClass, myExtensions.size())[ FD ]
Line_7 $$ if (result == null) -->Line_10 $$ T[] a = (T[]) Array.newInstance(extensionClass, myExtensions.size())[ CD ]
Line_14 $$ if (extension == null) -->Line_15 $$ LOG.error(" null extension: " + myExtensions + ";\n" + " getExtensionClass(): " + extensionClass + ";\n")[ CD ]
Line_13 $$ T extension = result[i]-->Line_14 $$ if (extension == null) [ FD ]
Line_6 $$ result = myExtensionsCache-->Line_18 $$ LOG.error("Duplicate extension found: " + extension + "; " + " Result:      " + Arrays.toString(result) + ";\n" + " extensions: " + myExtensions + ";\n" + " getExtensionClass(): " + extensionClass + ";\n" + " size:" + myExtensions.size() + ";" + result.length)[ FD ]
Line_2 $$ public T[] getExtensions() -->Line_3 $$ T[] result = myExtensionsCache[ CD ]
Line_3 $$ T[] result = myExtensionsCache-->Line_4 $$ if (result == null) [ FD ]
Line_6 $$ result = myExtensionsCache-->Line_7 $$ if (result == null) [ FD ]
Line_7 $$ if (result == null) -->Line_8 $$ processAdapters()[ CD ]
Line_2 $$ public T[] getExtensions() -->Line_4 $$ if (result == null) [ CD ]
Line_11 $$ result = myExtensions.toArray(a)-->Line_18 $$ LOG.error("Duplicate extension found: " + extension + "; " + " Result:      " + Arrays.toString(result) + ";\n" + " extensions: " + myExtensions + ";\n" + " getExtensionClass(): " + extensionClass + ";\n" + " size:" + myExtensions.size() + ";" + result.length)[ FD ]
Line_12 $$ for (int i = result.length - 1; i >= 0; i--) -->Line_17 $$ if (i > 0 && extension == result[i - 1]) [ CD ]
Line_12 $$ for (int i = result.length - 1; i >= 0; i--) -->Line_14 $$ if (extension == null) [ CD ]
Line_3 $$ T[] result = myExtensionsCache-->Line_7 $$ if (result == null) [ FD ]
Line_3 $$ T[] result = myExtensionsCache-->Line_18 $$ LOG.error("Duplicate extension found: " + extension + "; " + " Result:      " + Arrays.toString(result) + ";\n" + " extensions: " + myExtensions + ";\n" + " getExtensionClass(): " + extensionClass + ";\n" + " size:" + myExtensions.size() + ";" + result.length)[ FD ]
