Line_10 $$ if (allowedMethods.isEmpty()) -->Line_11 $$ allowedMethods.add(HttpMethod.GET.name())[ CD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_7 $$ if (allowedMethods.contains(ALL)) [ CD ]
Line_20 $$ if (resolved != null) -->Line_21 $$ result.add(resolved)[ CD ]
Line_6 $$ List<String> allowedMethods = (this.allowedMethods != null ? this.allowedMethods : new ArrayList<String>())-->Line_13 $$ List<HttpMethod> result = new ArrayList<HttpMethod>(allowedMethods.size())[ FD ]
Line_7 $$ if (allowedMethods.contains(ALL)) -->Line_8 $$ return Collections.singletonList(requestMethod)[ CD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_6 $$ List<String> allowedMethods = (this.allowedMethods != null ? this.allowedMethods : new ArrayList<String>())[ CD ]
Line_15 $$ for (String method : allowedMethods) -->Line_19 $$ HttpMethod resolved = HttpMethod.resolve(method)[ FD ]
Line_14 $$ boolean allowed = false-->Line_17 $$ allowed = true[ FD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_3 $$ if (requestMethod == null) [ FD ]
Line_6 $$ List<String> allowedMethods = (this.allowedMethods != null ? this.allowedMethods : new ArrayList<String>())-->Line_11 $$ allowedMethods.add(HttpMethod.GET.name())[ FD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_14 $$ boolean allowed = false[ CD ]
Line_3 $$ if (requestMethod == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_24 $$ return (allowed ? result : null)[ CD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_8 $$ return Collections.singletonList(requestMethod)[ FD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_16 $$ if (requestMethod.matches(method)) [ FD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_13 $$ List<HttpMethod> result = new ArrayList<HttpMethod>(allowedMethods.size())[ CD ]
Line_15 $$ for (String method : allowedMethods) -->Line_16 $$ if (requestMethod.matches(method)) [ FD ]
Line_6 $$ List<String> allowedMethods = (this.allowedMethods != null ? this.allowedMethods : new ArrayList<String>())-->Line_7 $$ if (allowedMethods.contains(ALL)) [ FD ]
Line_19 $$ HttpMethod resolved = HttpMethod.resolve(method)-->Line_20 $$ if (resolved != null) [ FD ]
Line_6 $$ List<String> allowedMethods = (this.allowedMethods != null ? this.allowedMethods : new ArrayList<String>())-->Line_10 $$ if (allowedMethods.isEmpty()) [ FD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_3 $$ if (requestMethod == null) [ CD ]
Line_16 $$ if (requestMethod.matches(method)) -->Line_17 $$ allowed = true[ CD ]
Line_2 $$ public List<HttpMethod> checkHttpMethod(HttpMethod requestMethod) -->Line_10 $$ if (allowedMethods.isEmpty()) [ CD ]
Line_19 $$ HttpMethod resolved = HttpMethod.resolve(method)-->Line_21 $$ result.add(resolved)[ FD ]
Line_13 $$ List<HttpMethod> result = new ArrayList<HttpMethod>(allowedMethods.size())-->Line_21 $$ result.add(resolved)[ FD ]
