Line_19 $$ final TextRange key = entry.getKey()-->Line_21 $$ consumerIncluded.consume(key)[ FD ]
Line_22 $$ previousEnd = key.getEndOffset() + 1-->Line_24 $$ if (previousEnd < myLines.size()) [ FD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_10 $$ final Map.Entry<TextRange, MyAppliedData> first = iterator.next()[ CD ]
Line_7 $$ final Set<Map.Entry<TextRange, MyAppliedData>> entries = myTransformations.entrySet()-->Line_8 $$ final Iterator<Map.Entry<TextRange, MyAppliedData>> iterator = entries.iterator()[ FD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_12 $$ if (range.getStartOffset() > 0) [ CD ]
Line_11 $$ final TextRange range = first.getKey()-->Line_15 $$ consumerIncluded.consume(range)[ FD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_17 $$ while (iterator.hasNext() && previousEnd < myLines.size()) [ CD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_11 $$ final TextRange range = first.getKey()[ CD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_24 $$ if (previousEnd < myLines.size()) [ CD ]
Line_10 $$ final Map.Entry<TextRange, MyAppliedData> first = iterator.next()-->Line_11 $$ final TextRange range = first.getKey()[ FD ]
Line_8 $$ final Iterator<Map.Entry<TextRange, MyAppliedData>> iterator = entries.iterator()-->Line_10 $$ final Map.Entry<TextRange, MyAppliedData> first = iterator.next()[ FD ]
Line_19 $$ final TextRange key = entry.getKey()-->Line_22 $$ previousEnd = key.getEndOffset() + 1[ FD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_15 $$ consumerIncluded.consume(range)[ CD ]
Line_8 $$ final Iterator<Map.Entry<TextRange, MyAppliedData>> iterator = entries.iterator()-->Line_17 $$ while (iterator.hasNext() && previousEnd < myLines.size()) [ FD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_7 $$ final Set<Map.Entry<TextRange, MyAppliedData>> entries = myTransformations.entrySet()[ CD ]
Line_17 $$ while (iterator.hasNext() && previousEnd < myLines.size()) -->Line_22 $$ previousEnd = key.getEndOffset() + 1[ CD ]
Line_16 $$ int previousEnd = range.getEndOffset() + 1-->Line_24 $$ if (previousEnd < myLines.size()) [ FD ]
Line_17 $$ while (iterator.hasNext() && previousEnd < myLines.size()) -->Line_20 $$ consumerExcluded.consume(new UnfairTextRange(previousEnd, key.getStartOffset() - 1))[ CD ]
Line_19 $$ final TextRange key = entry.getKey()-->Line_20 $$ consumerExcluded.consume(new UnfairTextRange(previousEnd, key.getStartOffset() - 1))[ FD ]
Line_17 $$ while (iterator.hasNext() && previousEnd < myLines.size()) -->Line_19 $$ final TextRange key = entry.getKey()[ CD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_8 $$ final Iterator<Map.Entry<TextRange, MyAppliedData>> iterator = entries.iterator()[ CD ]
Line_18 $$ final Map.Entry<TextRange, MyAppliedData> entry = iterator.next()-->Line_19 $$ final TextRange key = entry.getKey()[ FD ]
Line_11 $$ final TextRange range = first.getKey()-->Line_12 $$ if (range.getStartOffset() > 0) [ FD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_5 $$ consumerExcluded.consume(new UnfairTextRange(0, myLines.size() - 1))[ CD ]
Line_11 $$ final TextRange range = first.getKey()-->Line_16 $$ int previousEnd = range.getEndOffset() + 1[ FD ]
Line_4 $$ if (myTransformations.isEmpty()) -->Line_16 $$ int previousEnd = range.getEndOffset() + 1[ CD ]
Line_11 $$ final TextRange range = first.getKey()-->Line_13 $$ consumerExcluded.consume(new TextRange(0, range.getStartOffset() - 1))[ FD ]
Line_8 $$ final Iterator<Map.Entry<TextRange, MyAppliedData>> iterator = entries.iterator()-->Line_18 $$ final Map.Entry<TextRange, MyAppliedData> entry = iterator.next()[ FD ]
Line_24 $$ if (previousEnd < myLines.size()) -->Line_25 $$ consumerExcluded.consume(new TextRange(previousEnd, myLines.size() - 1))[ CD ]
Line_16 $$ int previousEnd = range.getEndOffset() + 1-->Line_22 $$ previousEnd = key.getEndOffset() + 1[ FD ]
Line_17 $$ while (iterator.hasNext() && previousEnd < myLines.size()) -->Line_21 $$ consumerIncluded.consume(key)[ CD ]
Line_12 $$ if (range.getStartOffset() > 0) -->Line_13 $$ consumerExcluded.consume(new TextRange(0, range.getStartOffset() - 1))[ CD ]
Line_8 $$ final Iterator<Map.Entry<TextRange, MyAppliedData>> iterator = entries.iterator()-->Line_9 $$ assert iterator.hasNext()[ FD ]
Line_17 $$ while (iterator.hasNext() && previousEnd < myLines.size()) -->Line_18 $$ final Map.Entry<TextRange, MyAppliedData> entry = iterator.next()[ CD ]
