Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_3 $$ List<ByteBuffer> keys = buildPartitionKeyNames(options)[ CD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_10 $$ Clustering clustering = Iterables.getOnlyElement(clusterings)[ CD ]
Line_10 $$ Clustering clustering = Iterables.getOnlyElement(clusterings)-->Line_12 $$ addConditions(clustering, request, options)[ FD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_8 $$ SortedSet<Clustering> clusterings = createClustering(options)[ FD ]
Line_11 $$ CQL3CasRequest request = new CQL3CasRequest(cfm, key, false, conditionColumns(), updatesRegularRows(), updatesStaticRow())-->Line_12 $$ addConditions(clustering, request, options)[ FD ]
Line_3 $$ List<ByteBuffer> keys = buildPartitionKeyNames(options)-->Line_6 $$ DecoratedKey key = cfm.decorateKey(keys.get(0))[ FD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_9 $$ checkFalse(clusterings.size() > 1, "IN on the clustering key columns is not supported with conditional %s", type.isUpdate() ? "updates" : "deletions")[ CD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_3 $$ List<ByteBuffer> keys = buildPartitionKeyNames(options)[ FD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_11 $$ CQL3CasRequest request = new CQL3CasRequest(cfm, key, false, conditionColumns(), updatesRegularRows(), updatesStaticRow())[ CD ]
Line_8 $$ SortedSet<Clustering> clusterings = createClustering(options)-->Line_9 $$ checkFalse(clusterings.size() > 1, "IN on the clustering key columns is not supported with conditional %s", type.isUpdate() ? "updates" : "deletions")[ FD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_14 $$ return request[ CD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_7 $$ long now = options.getTimestamp(queryState)[ CD ]
Line_7 $$ long now = options.getTimestamp(queryState)-->Line_13 $$ request.addRowUpdate(clustering, this, options, now)[ FD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_13 $$ request.addRowUpdate(clustering, this, options, now)[ CD ]
Line_10 $$ Clustering clustering = Iterables.getOnlyElement(clusterings)-->Line_13 $$ request.addRowUpdate(clustering, this, options, now)[ FD ]
Line_8 $$ SortedSet<Clustering> clusterings = createClustering(options)-->Line_10 $$ Clustering clustering = Iterables.getOnlyElement(clusterings)[ FD ]
Line_11 $$ CQL3CasRequest request = new CQL3CasRequest(cfm, key, false, conditionColumns(), updatesRegularRows(), updatesStaticRow())-->Line_13 $$ request.addRowUpdate(clustering, this, options, now)[ FD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_7 $$ long now = options.getTimestamp(queryState)[ FD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_8 $$ SortedSet<Clustering> clusterings = createClustering(options)[ CD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_6 $$ DecoratedKey key = cfm.decorateKey(keys.get(0))[ CD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_12 $$ addConditions(clustering, request, options)[ FD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_12 $$ addConditions(clustering, request, options)[ CD ]
Line_2 $$ private CQL3CasRequest makeCasRequest(QueryState queryState, QueryOptions options) -->Line_13 $$ request.addRowUpdate(clustering, this, options, now)[ FD ]
