Line_4 $$ StageInfo outputStage = queryInfo.getOutputStage()-->Line_5 $$ requireNonNull(outputStage, "outputStage is null")[ FD ]
Line_10 $$ for (int i = 0; i < names.size(); i++) -->Line_11 $$ String name = names.get(i)[ CD ]
Line_10 $$ for (int i = 0; i < names.size(); i++) -->Line_11 $$ String name = names.get(i)[ FD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_10 $$ for (int i = 0; i < names.size(); i++) [ CD ]
Line_6 $$ List<String> names = queryInfo.getFieldNames()-->Line_11 $$ String name = names.get(i)[ FD ]
Line_6 $$ List<String> names = queryInfo.getFieldNames()-->Line_10 $$ for (int i = 0; i < names.size(); i++) [ FD ]
Line_7 $$ List<Type> types = outputStage.getTypes()-->Line_8 $$ checkArgument(names.size() == types.size(), "names and types size mismatch")[ FD ]
Line_4 $$ StageInfo outputStage = queryInfo.getOutputStage()-->Line_7 $$ List<Type> types = outputStage.getTypes()[ FD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_6 $$ List<String> names = queryInfo.getFieldNames()[ CD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_7 $$ List<Type> types = outputStage.getTypes()[ CD ]
Line_9 $$ ImmutableList.Builder<Column> list = ImmutableList.builder()-->Line_16 $$ return list.build()[ FD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_4 $$ StageInfo outputStage = queryInfo.getOutputStage()[ FD ]
Line_10 $$ for (int i = 0; i < names.size(); i++) -->Line_12 $$ TypeSignature typeSignature = types.get(i).getTypeSignature()[ CD ]
Line_10 $$ for (int i = 0; i < names.size(); i++) -->Line_12 $$ TypeSignature typeSignature = types.get(i).getTypeSignature()[ FD ]
Line_9 $$ ImmutableList.Builder<Column> list = ImmutableList.builder()-->Line_14 $$ list.add(new Column(name, type, new ClientTypeSignature(typeSignature)))[ FD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_3 $$ requireNonNull(queryInfo, "queryInfo is null")[ FD ]
Line_12 $$ TypeSignature typeSignature = types.get(i).getTypeSignature()-->Line_13 $$ String type = typeSignature.toString()[ FD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_4 $$ StageInfo outputStage = queryInfo.getOutputStage()[ CD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_9 $$ ImmutableList.Builder<Column> list = ImmutableList.builder()[ CD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_5 $$ requireNonNull(outputStage, "outputStage is null")[ CD ]
Line_10 $$ for (int i = 0; i < names.size(); i++) -->Line_13 $$ String type = typeSignature.toString()[ CD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_16 $$ return list.build()[ CD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_3 $$ requireNonNull(queryInfo, "queryInfo is null")[ CD ]
Line_7 $$ List<Type> types = outputStage.getTypes()-->Line_12 $$ TypeSignature typeSignature = types.get(i).getTypeSignature()[ FD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_8 $$ checkArgument(names.size() == types.size(), "names and types size mismatch")[ CD ]
Line_10 $$ for (int i = 0; i < names.size(); i++) -->Line_14 $$ list.add(new Column(name, type, new ClientTypeSignature(typeSignature)))[ CD ]
Line_2 $$ private static List<Column> createColumnsList(QueryInfo queryInfo) -->Line_6 $$ List<String> names = queryInfo.getFieldNames()[ FD ]
Line_6 $$ List<String> names = queryInfo.getFieldNames()-->Line_8 $$ checkArgument(names.size() == types.size(), "names and types size mismatch")[ FD ]
