Line_53 $$ if (fragmentAlignment == SwingConstants.RIGHT || fragmentAlignment == SwingConstants.TRAILING) -->Line_54 $$ offset = fragmentPadding - fragmentWidth[ CD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_34 $$ final int fragmentPadding = myFragmentPadding.get(i)[ FD ]
Line_19 $$ final int textBaseline = getTextBaseLine(baseMetrics, getHeight())-->Line_74 $$ drawStrikeout(g, offset, offset + fragmentWidth, textBaseline)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_116 $$ g.setColor(SHADOW_COLOR)[ FD ]
Line_36 $$ if ((attributes.isOpaque() || isOpaque()) && bgColor != null) -->Line_38 $$ g.fillRect(offset, 0, fragmentWidth, getHeight())[ CD ]
Line_64 $$ if (shouldDrawDimmed()) -->Line_65 $$ color = ColorUtil.dimmer(color)[ CD ]
Line_97 $$ offset = endOffset-->Line_92 $$ UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque())[ FD ]
Line_36 $$ if ((attributes.isOpaque() || isOpaque()) && bgColor != null) -->Line_37 $$ g.setColor(bgColor)[ CD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_49 $$ final int fragmentAlignment = myFragmentAlignment.get(i)[ CD ]
Line_54 $$ offset = fragmentPadding - fragmentWidth-->Line_97 $$ offset = endOffset[ FD ]
Line_19 $$ final int textBaseline = getTextBaseLine(baseMetrics, getHeight())-->Line_68 $$ doDrawString(g, fragment, offset, textBaseline)[ FD ]
Line_101 $$ if (focusAroundIcon) -->Line_104 $$ myBorder.paintBorder(this, g, textStart, 0, getWidth() - textStart, getHeight())[ CD ]
Line_115 $$ if (shouldDrawMacShadow()) -->Line_117 $$ g.drawString(text, x1, baseline + 1)[ CD ]
Line_5 $$ offset = myIpad.left-->Line_92 $$ UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque())[ FD ]
Line_5 $$ offset = myIpad.left-->Line_68 $$ doDrawString(g, fragment, offset, textBaseline)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_38 $$ g.fillRect(offset, 0, fragmentWidth, getHeight())[ FD ]
Line_32 $$ final String fragment = myFragments.get(i)-->Line_68 $$ doDrawString(g, fragment, offset, textBaseline)[ FD ]
Line_54 $$ offset = fragmentPadding - fragmentWidth-->Line_92 $$ UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque())[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_30 $$ g.setFont(font)[ CD ]
Line_11 $$ final List<Object[]> searchMatches = new ArrayList<Object[]>()-->Line_95 $$ searchMatches.add(new Object[] [ FD ]
Line_15 $$ offset += computeTextAlignShift(ownFont)-->Line_68 $$ doDrawString(g, fragment, offset, textBaseline)[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_48 $$ g.setColor(color)[ CD ]
Line_97 $$ offset = endOffset-->Line_38 $$ g.fillRect(offset, 0, fragmentWidth, getHeight())[ FD ]
Line_5 $$ offset = myIpad.left-->Line_15 $$ offset += computeTextAlignShift(ownFont)[ FD ]
Line_113 $$ Integer baseline = (Integer) info[2]-->Line_120 $$ g.drawString(text, x1, baseline)[ FD ]
Line_91 $$ final Color lineColor = attributes.getWaveColor()-->Line_92 $$ UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque())[ FD ]
Line_97 $$ offset = endOffset-->Line_68 $$ doDrawString(g, fragment, offset, textBaseline)[ FD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_86 $$ UIUtil.drawLine(g, offset, underlineAt, offset + fragmentWidth, underlineAt)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_12 $$ applyAdditionalHints(g)[ CD ]
Line_34 $$ final int fragmentPadding = myFragmentPadding.get(i)-->Line_52 $$ endOffset = fragmentPadding[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_13 $$ final Font ownFont = getFont()[ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_9 $$ offset += myBorder.getBorderInsets(this).left[ FD ]
Line_51 $$ if (fragmentPadding > 0 && fragmentPadding > fragmentWidth) -->Line_52 $$ endOffset = fragmentPadding[ CD ]
Line_57 $$ endOffset = offset + fragmentWidth-->Line_97 $$ offset = endOffset[ FD ]
Line_15 $$ offset += computeTextAlignShift(ownFont)-->Line_97 $$ offset = endOffset[ FD ]
Line_15 $$ offset += computeTextAlignShift(ownFont)-->Line_86 $$ UIUtil.drawLine(g, offset, underlineAt, offset + fragmentWidth, underlineAt)[ FD ]
Line_32 $$ final String fragment = myFragments.get(i)-->Line_33 $$ final int fragmentWidth = computeStringWidth(fragment, font)[ FD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_40 $$ Color color = attributes.getFgColor()[ FD ]
Line_40 $$ Color color = attributes.getFgColor()-->Line_65 $$ color = ColorUtil.dimmer(color)[ FD ]
Line_18 $$ FontMetrics baseMetrics = g.getFontMetrics(ownFont != null ? ownFont : g.getFont())-->Line_19 $$ final int textBaseline = getTextBaseLine(baseMetrics, getHeight())[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_34 $$ final int fragmentPadding = myFragmentPadding.get(i)[ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_17 $$ int baseSize = ownFont != null ? ownFont.getSize() : g.getFont().getSize()[ FD ]
Line_40 $$ Color color = attributes.getFgColor()-->Line_67 $$ g.setColor(color)[ FD ]
Line_13 $$ final Font ownFont = getFont()-->Line_14 $$ if (ownFont != null) [ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_54 $$ offset = fragmentPadding - fragmentWidth[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_97 $$ offset = endOffset[ CD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_38 $$ g.fillRect(offset, 0, fragmentWidth, getHeight())[ FD ]
Line_46 $$ color = UIUtil.getInactiveTextColor()-->Line_67 $$ g.setColor(color)[ FD ]
Line_115 $$ if (shouldDrawMacShadow()) -->Line_116 $$ g.setColor(SHADOW_COLOR)[ CD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_51 $$ if (fragmentPadding > 0 && fragmentPadding > fragmentWidth) [ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_21 $$ for (int i = 0; i < myFragments.size(); i++) [ CD ]
Line_94 $$ if (attributes.isSearchMatch()) -->Line_95 $$ searchMatches.add(new Object[] [ CD ]
Line_15 $$ offset += computeTextAlignShift(ownFont)-->Line_62 $$ doDrawString(g, fragment, offset, textBaseline + 1)[ FD ]
Line_23 $$ Font font = g.getFont()-->Line_31 $$ final FontMetrics metrics = g.getFontMetrics(font)[ FD ]
Line_78 $$ if (attributes.getWaveColor() != null) -->Line_79 $$ g.setColor(attributes.getWaveColor())[ CD ]
Line_20 $$ boolean wasSmaller = false-->Line_29 $$ wasSmaller = isSmaller[ FD ]
Line_50 $$ final int endOffset-->Line_97 $$ offset = endOffset[ FD ]
Line_109 $$ Integer x1 = (Integer) info[0]-->Line_120 $$ g.drawString(text, x1, baseline)[ FD ]
Line_46 $$ color = UIUtil.getInactiveTextColor()-->Line_48 $$ g.setColor(color)[ FD ]
Line_5 $$ offset = myIpad.left-->Line_57 $$ endOffset = offset + fragmentWidth[ FD ]
Line_59 $$ if (!attributes.isSearchMatch()) -->Line_67 $$ g.setColor(color)[ CD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_24 $$ boolean isSmaller = attributes.isSmaller()[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_14 $$ if (ownFont != null) [ CD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_25 $$ if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) [ FD ]
Line_23 $$ Font font = g.getFont()-->Line_33 $$ final int fragmentWidth = computeStringWidth(fragment, font)[ FD ]
Line_85 $$ final int underlineAt = textBaseline + 1-->Line_86 $$ UIUtil.drawLine(g, offset, underlineAt, offset + fragmentWidth, underlineAt)[ FD ]
Line_59 $$ if (!attributes.isSearchMatch()) -->Line_64 $$ if (shouldDrawDimmed()) [ CD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_32 $$ final String fragment = myFragments.get(i)[ CD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_59 $$ if (!attributes.isSearchMatch()) [ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_94 $$ if (attributes.isSearchMatch()) [ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_31 $$ final FontMetrics metrics = g.getFontMetrics(font)[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_32 $$ final String fragment = myFragments.get(i)[ FD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_78 $$ if (attributes.getWaveColor() != null) [ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_95 $$ searchMatches.add(new Object[] [ FD ]
Line_65 $$ color = ColorUtil.dimmer(color)-->Line_67 $$ g.setColor(color)[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_59 $$ if (!attributes.isSearchMatch()) [ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_117 $$ g.drawString(text, x1, baseline + 1)[ FD ]
Line_121 $$ if (((SimpleTextAttributes) info[5]).isStrikeout()) -->Line_122 $$ drawStrikeout(g, x1, x2, baseline)[ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_119 $$ g.setColor(new JBColor(Gray._50, Gray._0))[ FD ]
Line_59 $$ if (!attributes.isSearchMatch()) -->Line_68 $$ doDrawString(g, fragment, offset, textBaseline)[ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_81 $$ UIUtil.drawWave(g, new Rectangle(offset, textBaseline + 1, fragmentWidth, Math.max(2, metrics.getDescent())))[ FD ]
Line_46 $$ color = UIUtil.getInactiveTextColor()-->Line_65 $$ color = ColorUtil.dimmer(color)[ FD ]
Line_24 $$ boolean isSmaller = attributes.isSmaller()-->Line_29 $$ wasSmaller = isSmaller[ FD ]
Line_54 $$ offset = fragmentPadding - fragmentWidth-->Line_86 $$ UIUtil.drawLine(g, offset, underlineAt, offset + fragmentWidth, underlineAt)[ FD ]
Line_110 $$ Integer x2 = (Integer) info[1]-->Line_111 $$ UIUtil.drawSearchMatch(g, x1, x2, getHeight())[ FD ]
Line_23 $$ Font font = g.getFont()-->Line_25 $$ if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) [ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_30 $$ g.setFont(font)[ FD ]
Line_32 $$ final String fragment = myFragments.get(i)-->Line_62 $$ doDrawString(g, fragment, offset, textBaseline + 1)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_74 $$ drawStrikeout(g, offset, offset + fragmentWidth, textBaseline)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_23 $$ Font font = g.getFont()[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_112 $$ g.setFont((Font) info[4])[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_122 $$ drawStrikeout(g, x1, x2, baseline)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_11 $$ final List<Object[]> searchMatches = new ArrayList<Object[]>()[ CD ]
Line_5 $$ offset = myIpad.left-->Line_62 $$ doDrawString(g, fragment, offset, textBaseline + 1)[ FD ]
Line_65 $$ color = ColorUtil.dimmer(color)-->Line_41 $$ if (color == null) [ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_18 $$ FontMetrics baseMetrics = g.getFontMetrics(ownFont != null ? ownFont : g.getFont())[ CD ]
Line_97 $$ offset = endOffset-->Line_86 $$ UIUtil.drawLine(g, offset, underlineAt, offset + fragmentWidth, underlineAt)[ FD ]
Line_114 $$ String text = (String) info[3]-->Line_117 $$ g.drawString(text, x1, baseline + 1)[ FD ]
Line_60 $$ if (shouldDrawMacShadow()) -->Line_61 $$ g.setColor(SHADOW_COLOR)[ CD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_54 $$ offset = fragmentPadding - fragmentWidth[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_50 $$ final int endOffset[ CD ]
Line_54 $$ offset = fragmentPadding - fragmentWidth-->Line_62 $$ doDrawString(g, fragment, offset, textBaseline + 1)[ FD ]
Line_15 $$ offset += computeTextAlignShift(ownFont)-->Line_54 $$ offset = fragmentPadding - fragmentWidth[ FD ]
Line_33 $$ final int fragmentWidth = computeStringWidth(fragment, font)-->Line_57 $$ endOffset = offset + fragmentWidth[ FD ]
Line_40 $$ Color color = attributes.getFgColor()-->Line_41 $$ if (color == null) [ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_62 $$ doDrawString(g, fragment, offset, textBaseline + 1)[ FD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_15 $$ offset += computeTextAlignShift(ownFont)[ FD ]
Line_34 $$ final int fragmentPadding = myFragmentPadding.get(i)-->Line_54 $$ offset = fragmentPadding - fragmentWidth[ FD ]
Line_33 $$ final int fragmentWidth = computeStringWidth(fragment, font)-->Line_54 $$ offset = fragmentPadding - fragmentWidth[ FD ]
Line_101 $$ if (focusAroundIcon) -->Line_102 $$ myBorder.paintBorder(this, g, 0, 0, getWidth(), getHeight())[ CD ]
Line_33 $$ final int fragmentWidth = computeStringWidth(fragment, font)-->Line_38 $$ g.fillRect(offset, 0, fragmentWidth, getHeight())[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_18 $$ FontMetrics baseMetrics = g.getFontMetrics(ownFont != null ? ownFont : g.getFont())[ FD ]
Line_109 $$ Integer x1 = (Integer) info[0]-->Line_117 $$ g.drawString(text, x1, baseline + 1)[ FD ]
Line_65 $$ color = ColorUtil.dimmer(color)-->Line_48 $$ g.setColor(color)[ FD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_91 $$ final Color lineColor = attributes.getWaveColor()[ FD ]
Line_5 $$ offset = myIpad.left-->Line_86 $$ UIUtil.drawLine(g, offset, underlineAt, offset + fragmentWidth, underlineAt)[ FD ]
Line_15 $$ offset += computeTextAlignShift(ownFont)-->Line_74 $$ drawStrikeout(g, offset, offset + fragmentWidth, textBaseline)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_104 $$ myBorder.paintBorder(this, g, textStart, 0, getWidth() - textStart, getHeight())[ FD ]
Line_23 $$ Font font = g.getFont()-->Line_30 $$ g.setFont(font)[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)[ FD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_97 $$ offset = endOffset[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_29 $$ wasSmaller = isSmaller[ CD ]
Line_110 $$ Integer x2 = (Integer) info[1]-->Line_122 $$ drawStrikeout(g, x1, x2, baseline)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_92 $$ UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque())[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_97 $$ offset = endOffset[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_12 $$ applyAdditionalHints(g)[ FD ]
Line_50 $$ final int endOffset-->Line_52 $$ endOffset = fragmentPadding[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_7 $$ int textStart = offset[ CD ]
Line_15 $$ offset += computeTextAlignShift(ownFont)-->Line_92 $$ UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque())[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_86 $$ UIUtil.drawLine(g, offset, underlineAt, offset + fragmentWidth, underlineAt)[ FD ]
Line_97 $$ offset = endOffset-->Line_57 $$ endOffset = offset + fragmentWidth[ FD ]
Line_40 $$ Color color = attributes.getFgColor()-->Line_48 $$ g.setColor(color)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_5 $$ offset = myIpad.left[ FD ]
Line_31 $$ final FontMetrics metrics = g.getFontMetrics(font)-->Line_81 $$ UIUtil.drawWave(g, new Rectangle(offset, textBaseline + 1, fragmentWidth, Math.max(2, metrics.getDescent())))[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_120 $$ g.drawString(text, x1, baseline)[ FD ]
Line_97 $$ offset = endOffset-->Line_74 $$ drawStrikeout(g, offset, offset + fragmentWidth, textBaseline)[ FD ]
Line_5 $$ offset = myIpad.left-->Line_97 $$ offset = endOffset[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)[ CD ]
Line_54 $$ offset = fragmentPadding - fragmentWidth-->Line_38 $$ g.fillRect(offset, 0, fragmentWidth, getHeight())[ FD ]
Line_13 $$ final Font ownFont = getFont()-->Line_17 $$ int baseSize = ownFont != null ? ownFont.getSize() : g.getFont().getSize()[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_33 $$ final int fragmentWidth = computeStringWidth(fragment, font)[ CD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_92 $$ UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque())[ FD ]
Line_5 $$ offset = myIpad.left-->Line_38 $$ g.fillRect(offset, 0, fragmentWidth, getHeight())[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_68 $$ doDrawString(g, fragment, offset, textBaseline)[ FD ]
Line_15 $$ offset += computeTextAlignShift(ownFont)-->Line_38 $$ g.fillRect(offset, 0, fragmentWidth, getHeight())[ FD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_94 $$ if (attributes.isSearchMatch()) [ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_111 $$ UIUtil.drawSearchMatch(g, x1, x2, getHeight())[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_23 $$ Font font = g.getFont()[ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_61 $$ g.setColor(SHADOW_COLOR)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_17 $$ int baseSize = ownFont != null ? ownFont.getSize() : g.getFont().getSize()[ CD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_57 $$ endOffset = offset + fragmentWidth[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_37 $$ g.setColor(bgColor)[ FD ]
Line_54 $$ offset = fragmentPadding - fragmentWidth-->Line_68 $$ doDrawString(g, fragment, offset, textBaseline)[ FD ]
Line_90 $$ final int dottedAt = SystemInfo.isMac ? textBaseline : textBaseline + 1-->Line_92 $$ UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque())[ FD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_62 $$ doDrawString(g, fragment, offset, textBaseline + 1)[ FD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_36 $$ if ((attributes.isOpaque() || isOpaque()) && bgColor != null) [ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_48 $$ g.setColor(color)[ FD ]
Line_46 $$ color = UIUtil.getInactiveTextColor()-->Line_41 $$ if (color == null) [ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_31 $$ final FontMetrics metrics = g.getFontMetrics(font)[ CD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_45 $$ if (!isEnabled()) [ CD ]
Line_5 $$ offset = myIpad.left-->Line_54 $$ offset = fragmentPadding - fragmentWidth[ FD ]
Line_15 $$ offset += computeTextAlignShift(ownFont)-->Line_57 $$ endOffset = offset + fragmentWidth[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_57 $$ endOffset = offset + fragmentWidth[ FD ]
Line_40 $$ Color color = attributes.getFgColor()-->Line_46 $$ color = UIUtil.getInactiveTextColor()[ FD ]
Line_51 $$ if (fragmentPadding > 0 && fragmentPadding > fragmentWidth) -->Line_57 $$ endOffset = offset + fragmentWidth[ CD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_68 $$ doDrawString(g, fragment, offset, textBaseline)[ FD ]
Line_35 $$ final Color bgColor = attributes.isSearchMatch() ? null : attributes.getBgColor()-->Line_92 $$ UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque())[ FD ]
Line_52 $$ endOffset = fragmentPadding-->Line_57 $$ endOffset = offset + fragmentWidth[ FD ]
Line_35 $$ final Color bgColor = attributes.isSearchMatch() ? null : attributes.getBgColor()-->Line_37 $$ g.setColor(bgColor)[ FD ]
Line_109 $$ Integer x1 = (Integer) info[0]-->Line_111 $$ UIUtil.drawSearchMatch(g, x1, x2, getHeight())[ FD ]
Line_97 $$ offset = endOffset-->Line_62 $$ doDrawString(g, fragment, offset, textBaseline + 1)[ FD ]
Line_9 $$ offset += myBorder.getBorderInsets(this).left-->Line_74 $$ drawStrikeout(g, offset, offset + fragmentWidth, textBaseline)[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_25 $$ if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) [ CD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_79 $$ g.setColor(attributes.getWaveColor())[ FD ]
Line_109 $$ Integer x1 = (Integer) info[0]-->Line_122 $$ drawStrikeout(g, x1, x2, baseline)[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_24 $$ boolean isSmaller = attributes.isSmaller()[ CD ]
Line_113 $$ Integer baseline = (Integer) info[2]-->Line_122 $$ drawStrikeout(g, x1, x2, baseline)[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_40 $$ Color color = attributes.getFgColor()[ CD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_36 $$ if ((attributes.isOpaque() || isOpaque()) && bgColor != null) [ CD ]
Line_14 $$ if (ownFont != null) -->Line_15 $$ offset += computeTextAlignShift(ownFont)[ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_67 $$ g.setColor(color)[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_79 $$ g.setColor(attributes.getWaveColor())[ FD ]
Line_5 $$ offset = myIpad.left-->Line_9 $$ offset += myBorder.getBorderInsets(this).left[ FD ]
Line_13 $$ final Font ownFont = getFont()-->Line_15 $$ offset += computeTextAlignShift(ownFont)[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_49 $$ final int fragmentAlignment = myFragmentAlignment.get(i)[ FD ]
Line_22 $$ final SimpleTextAttributes attributes = myAttributes.get(i)-->Line_35 $$ final Color bgColor = attributes.isSearchMatch() ? null : attributes.getBgColor()[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_8 $$ if (myBorder != null) [ CD ]
Line_52 $$ endOffset = fragmentPadding-->Line_97 $$ offset = endOffset[ FD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_19 $$ final int textBaseline = getTextBaseLine(baseMetrics, getHeight())[ CD ]
Line_54 $$ offset = fragmentPadding - fragmentWidth-->Line_74 $$ drawStrikeout(g, offset, offset + fragmentWidth, textBaseline)[ FD ]
Line_50 $$ final int endOffset-->Line_57 $$ endOffset = offset + fragmentWidth[ FD ]
Line_60 $$ if (shouldDrawMacShadow()) -->Line_62 $$ doDrawString(g, fragment, offset, textBaseline + 1)[ CD ]
Line_59 $$ if (!attributes.isSearchMatch()) -->Line_60 $$ if (shouldDrawMacShadow()) [ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_20 $$ boolean wasSmaller = false[ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_102 $$ myBorder.paintBorder(this, g, 0, 0, getWidth(), getHeight())[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_35 $$ final Color bgColor = attributes.isSearchMatch() ? null : attributes.getBgColor()[ CD ]
Line_8 $$ if (myBorder != null) -->Line_9 $$ offset += myBorder.getBorderInsets(this).left[ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_125 $$ return offset[ CD ]
Line_2 $$ protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) -->Line_15 $$ offset += computeTextAlignShift(ownFont)[ FD ]
Line_45 $$ if (!isEnabled()) -->Line_46 $$ color = UIUtil.getInactiveTextColor()[ CD ]
Line_51 $$ if (fragmentPadding > 0 && fragmentPadding > fragmentWidth) -->Line_53 $$ if (fragmentAlignment == SwingConstants.RIGHT || fragmentAlignment == SwingConstants.TRAILING) [ CD ]
Line_5 $$ offset = myIpad.left-->Line_74 $$ drawStrikeout(g, offset, offset + fragmentWidth, textBaseline)[ FD ]
Line_114 $$ String text = (String) info[3]-->Line_120 $$ g.drawString(text, x1, baseline)[ FD ]
Line_7 $$ int textStart = offset-->Line_104 $$ myBorder.paintBorder(this, g, textStart, 0, getWidth() - textStart, getHeight())[ FD ]
Line_54 $$ offset = fragmentPadding - fragmentWidth-->Line_57 $$ endOffset = offset + fragmentWidth[ FD ]
Line_21 $$ for (int i = 0; i < myFragments.size(); i++) -->Line_41 $$ if (color == null) [ CD ]
