Line_9 $$ List<Object> params = new ArrayList<Object>(4)-->Line_21 $$ params.add(command)[ FD ]
Line_9 $$ List<Object> params = new ArrayList<Object>(4)-->Line_17 $$ params.add(session)[ FD ]
Line_2 $$ protected final ModelAndView invokeNamedMethod(String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_10 $$ params.add(request)[ FD ]
Line_19 $$ if (paramTypes.length >= 3 && HttpSession.class != paramTypes[paramTypes.length - 1]) -->Line_20 $$ Object command = newCommandObject(paramTypes[paramTypes.length - 1])[ CD ]
Line_12 $$ if (paramTypes.length >= 3 && HttpSession.class == paramTypes[2]) -->Line_13 $$ HttpSession session = request.getSession(false)[ CD ]
Line_19 $$ if (paramTypes.length >= 3 && HttpSession.class != paramTypes[paramTypes.length - 1]) -->Line_21 $$ params.add(command)[ CD ]
Line_2 $$ protected final ModelAndView invokeNamedMethod(String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_4 $$ if (method == null) [ CD ]
Line_2 $$ protected final ModelAndView invokeNamedMethod(String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_22 $$ bind(request, command)[ FD ]
Line_3 $$ Method method = this.handlerMethodMap.get(methodName)-->Line_4 $$ if (method == null) [ FD ]
Line_3 $$ Method method = this.handlerMethodMap.get(methodName)-->Line_24 $$ Object returnValue = method.invoke(this.delegate, params.toArray(new Object[params.size()]))[ FD ]
Line_13 $$ HttpSession session = request.getSession(false)-->Line_14 $$ if (session == null) [ FD ]
Line_12 $$ if (paramTypes.length >= 3 && HttpSession.class == paramTypes[2]) -->Line_17 $$ params.add(session)[ CD ]
Line_19 $$ if (paramTypes.length >= 3 && HttpSession.class != paramTypes[paramTypes.length - 1]) -->Line_22 $$ bind(request, command)[ CD ]
Line_9 $$ List<Object> params = new ArrayList<Object>(4)-->Line_10 $$ params.add(request)[ FD ]
Line_2 $$ protected final ModelAndView invokeNamedMethod(String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_27 $$ return handleException(request, response, ex.getTargetException())[ FD ]
Line_2 $$ protected final ModelAndView invokeNamedMethod(String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_3 $$ Method method = this.handlerMethodMap.get(methodName)[ CD ]
Line_24 $$ Object returnValue = method.invoke(this.delegate, params.toArray(new Object[params.size()]))-->Line_25 $$ return massageReturnValueIfNecessary(returnValue)[ FD ]
Line_2 $$ protected final ModelAndView invokeNamedMethod(String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_29 $$ return handleException(request, response, ex)[ FD ]
Line_20 $$ Object command = newCommandObject(paramTypes[paramTypes.length - 1])-->Line_21 $$ params.add(command)[ FD ]
Line_2 $$ protected final ModelAndView invokeNamedMethod(String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_13 $$ HttpSession session = request.getSession(false)[ FD ]
Line_2 $$ protected final ModelAndView invokeNamedMethod(String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_11 $$ params.add(response)[ FD ]
Line_3 $$ Method method = this.handlerMethodMap.get(methodName)-->Line_8 $$ Class<?>[] paramTypes = method.getParameterTypes()[ FD ]
Line_9 $$ List<Object> params = new ArrayList<Object>(4)-->Line_11 $$ params.add(response)[ FD ]
Line_12 $$ if (paramTypes.length >= 3 && HttpSession.class == paramTypes[2]) -->Line_14 $$ if (session == null) [ CD ]
Line_9 $$ List<Object> params = new ArrayList<Object>(4)-->Line_24 $$ Object returnValue = method.invoke(this.delegate, params.toArray(new Object[params.size()]))[ FD ]
Line_20 $$ Object command = newCommandObject(paramTypes[paramTypes.length - 1])-->Line_22 $$ bind(request, command)[ FD ]
Line_13 $$ HttpSession session = request.getSession(false)-->Line_17 $$ params.add(session)[ FD ]
Line_2 $$ protected final ModelAndView invokeNamedMethod(String methodName, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_3 $$ Method method = this.handlerMethodMap.get(methodName)[ FD ]
