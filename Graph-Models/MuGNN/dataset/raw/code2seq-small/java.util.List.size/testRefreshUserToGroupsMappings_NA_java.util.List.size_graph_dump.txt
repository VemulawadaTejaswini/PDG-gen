Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_23 $$ for (int i = 0; i < g3.size(); i++) [ CD ]
Line_8 $$ String[] str_groups = new String[g1.size()]-->Line_13 $$ g2.toArray(str_groups)[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_20 $$ List<String> g3 = groups.getGroups(user)[ CD ]
Line_5 $$ String user = UserGroupInformation.getCurrentUser().getUserName()-->Line_7 $$ List<String> g1 = groups.getGroups(user)[ FD ]
Line_8 $$ String[] str_groups = new String[g1.size()]-->Line_14 $$ System.out.println(Arrays.toString(str_groups))[ FD ]
Line_5 $$ String user = UserGroupInformation.getCurrentUser().getUserName()-->Line_20 $$ List<String> g3 = groups.getGroups(user)[ FD ]
Line_20 $$ List<String> g3 = groups.getGroups(user)-->Line_24 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_15 $$ for (int i = 0; i < g2.size(); i++) [ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_18 $$ hsAdminClient.run(args)[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_12 $$ List<String> g2 = groups.getGroups(user)[ CD ]
Line_7 $$ List<String> g1 = groups.getGroups(user)-->Line_16 $$ assertEquals("Should be same group ", g1.get(i), g2.get(i))[ FD ]
Line_20 $$ List<String> g3 = groups.getGroups(user)-->Line_21 $$ g3.toArray(str_groups)[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_10 $$ System.out.println(Arrays.toString(str_groups))[ CD ]
Line_7 $$ List<String> g1 = groups.getGroups(user)-->Line_24 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ FD ]
Line_5 $$ String user = UserGroupInformation.getCurrentUser().getUserName()-->Line_12 $$ List<String> g2 = groups.getGroups(user)[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_4 $$ Groups groups = Groups.getUserToGroupsMappingService(conf)[ CD ]
Line_8 $$ String[] str_groups = new String[g1.size()]-->Line_22 $$ System.out.println(Arrays.toString(str_groups))[ FD ]
Line_23 $$ for (int i = 0; i < g3.size(); i++) -->Line_24 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_14 $$ System.out.println(Arrays.toString(str_groups))[ CD ]
Line_23 $$ for (int i = 0; i < g3.size(); i++) -->Line_24 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_5 $$ String user = UserGroupInformation.getCurrentUser().getUserName()[ CD ]
Line_12 $$ List<String> g2 = groups.getGroups(user)-->Line_16 $$ assertEquals("Should be same group ", g1.get(i), g2.get(i))[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_9 $$ g1.toArray(str_groups)[ CD ]
Line_12 $$ List<String> g2 = groups.getGroups(user)-->Line_13 $$ g2.toArray(str_groups)[ FD ]
Line_15 $$ for (int i = 0; i < g2.size(); i++) -->Line_23 $$ for (int i = 0; i < g3.size(); i++) [ FD ]
Line_4 $$ Groups groups = Groups.getUserToGroupsMappingService(conf)-->Line_7 $$ List<String> g1 = groups.getGroups(user)[ FD ]
Line_3 $$ String[] args = new String[] -->Line_18 $$ hsAdminClient.run(args)[ FD ]
Line_8 $$ String[] str_groups = new String[g1.size()]-->Line_21 $$ g3.toArray(str_groups)[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_22 $$ System.out.println(Arrays.toString(str_groups))[ CD ]
Line_15 $$ for (int i = 0; i < g2.size(); i++) -->Line_16 $$ assertEquals("Should be same group ", g1.get(i), g2.get(i))[ CD ]
Line_4 $$ Groups groups = Groups.getUserToGroupsMappingService(conf)-->Line_20 $$ List<String> g3 = groups.getGroups(user)[ FD ]
Line_7 $$ List<String> g1 = groups.getGroups(user)-->Line_9 $$ g1.toArray(str_groups)[ FD ]
Line_15 $$ for (int i = 0; i < g2.size(); i++) -->Line_16 $$ assertEquals("Should be same group ", g1.get(i), g2.get(i))[ FD ]
Line_4 $$ Groups groups = Groups.getUserToGroupsMappingService(conf)-->Line_12 $$ List<String> g2 = groups.getGroups(user)[ FD ]
Line_12 $$ List<String> g2 = groups.getGroups(user)-->Line_15 $$ for (int i = 0; i < g2.size(); i++) [ FD ]
Line_8 $$ String[] str_groups = new String[g1.size()]-->Line_10 $$ System.out.println(Arrays.toString(str_groups))[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_19 $$ System.out.println("third attempt(after refresh command), should be different:")[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_21 $$ g3.toArray(str_groups)[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_7 $$ List<String> g1 = groups.getGroups(user)[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_11 $$ System.out.println("second attempt, should be same:")[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_6 $$ System.out.println("first attempt:")[ CD ]
Line_20 $$ List<String> g3 = groups.getGroups(user)-->Line_23 $$ for (int i = 0; i < g3.size(); i++) [ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_3 $$ String[] args = new String[] [ CD ]
Line_15 $$ for (int i = 0; i < g2.size(); i++) -->Line_24 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_13 $$ g2.toArray(str_groups)[ CD ]
Line_7 $$ List<String> g1 = groups.getGroups(user)-->Line_8 $$ String[] str_groups = new String[g1.size()][ FD ]
Line_8 $$ String[] str_groups = new String[g1.size()]-->Line_9 $$ g1.toArray(str_groups)[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappings() throws Exception -->Line_8 $$ String[] str_groups = new String[g1.size()][ CD ]
