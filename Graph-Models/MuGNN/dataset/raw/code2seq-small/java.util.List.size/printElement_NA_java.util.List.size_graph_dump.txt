Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_4 $$ List content = element.getContent()[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_17 $$ int previouslyDeclaredNamespaces = namespaces.size()[ FD ]
Line_22 $$ int start = skipLeadingWhite(content, 0)-->Line_28 $$ if (nextNonText(content, start) < size) [ FD ]
Line_22 $$ int start = skipLeadingWhite(content, 0)-->Line_30 $$ printContentRange(out, content, start, size, level + 1, namespaces)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_3 $$ List attributes = element.getAttributes()[ CD ]
Line_3 $$ List attributes = element.getAttributes()-->Line_6 $$ if (attributes != null) [ FD ]
Line_23 $$ int size = content.size()-->Line_30 $$ printContentRange(out, content, start, size, level + 1, namespaces)[ FD ]
Line_5 $$ String space = null-->Line_10 $$ if ("default".equals(space)) [ FD ]
Line_22 $$ int start = skipLeadingWhite(content, 0)-->Line_34 $$ printTextRange(out, content, start, size)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_15 $$ out.write("<")[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_16 $$ printQualifiedName(out, element)[ CD ]
Line_3 $$ List attributes = element.getAttributes()-->Line_21 $$ printAttributes(out, attributes, element, namespaces)[ FD ]
Line_24 $$ if (start >= size) -->Line_25 $$ out.write("/>")[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_29 $$ newline(out)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_41 $$ namespaces.pop()[ FD ]
Line_3 $$ List attributes = element.getAttributes()-->Line_20 $$ if (attributes != null)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_19 $$ printAdditionalNamespaces(out, element, namespaces)[ FD ]
Line_24 $$ if (start >= size) -->Line_38 $$ out.write(">")[ CD ]
Line_10 $$ if ("default".equals(space)) -->Line_12 $$ if ("preserve".equals(space)) [ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_7 $$ space = element.getAttributeValue("space", Namespace.XML_NAMESPACE)[ FD ]
Line_4 $$ List content = element.getContent()-->Line_22 $$ int start = skipLeadingWhite(content, 0)[ FD ]
Line_23 $$ int size = content.size()-->Line_28 $$ if (nextNonText(content, start) < size) [ FD ]
Line_28 $$ if (nextNonText(content, start) < size) -->Line_30 $$ printContentRange(out, content, start, size, level + 1, namespaces)[ CD ]
Line_40 $$ while (namespaces.size() > previouslyDeclaredNamespaces) -->Line_41 $$ namespaces.pop()[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_34 $$ printTextRange(out, content, start, size)[ FD ]
Line_7 $$ space = element.getAttributeValue("space", Namespace.XML_NAMESPACE)-->Line_10 $$ if ("default".equals(space)) [ FD ]
Line_24 $$ if (start >= size) -->Line_28 $$ if (nextNonText(content, start) < size) [ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_6 $$ if (attributes != null) [ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_37 $$ printQualifiedName(out, element)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_22 $$ int start = skipLeadingWhite(content, 0)[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_19 $$ printAdditionalNamespaces(out, element, namespaces)[ CD ]
Line_23 $$ int size = content.size()-->Line_24 $$ if (start >= size) [ FD ]
Line_4 $$ List content = element.getContent()-->Line_28 $$ if (nextNonText(content, start) < size) [ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_38 $$ out.write(">")[ FD ]
Line_7 $$ space = element.getAttributeValue("space", Namespace.XML_NAMESPACE)-->Line_12 $$ if ("preserve".equals(space)) [ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_23 $$ int size = content.size()[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_24 $$ if (start >= size) [ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_25 $$ out.write("/>")[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_10 $$ if ("default".equals(space)) [ CD ]
Line_5 $$ String space = null-->Line_12 $$ if ("preserve".equals(space)) [ FD ]
Line_28 $$ if (nextNonText(content, start) < size) -->Line_34 $$ printTextRange(out, content, start, size)[ CD ]
Line_6 $$ if (attributes != null) -->Line_7 $$ space = element.getAttributeValue("space", Namespace.XML_NAMESPACE)[ CD ]
Line_23 $$ int size = content.size()-->Line_34 $$ printTextRange(out, content, start, size)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_30 $$ printContentRange(out, content, start, size, level + 1, namespaces)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_40 $$ while (namespaces.size() > previouslyDeclaredNamespaces) [ FD ]
Line_28 $$ if (nextNonText(content, start) < size) -->Line_29 $$ newline(out)[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_18 $$ printElementNamespace(out, element, namespaces)[ FD ]
Line_24 $$ if (start >= size) -->Line_36 $$ out.write("</")[ CD ]
Line_22 $$ int start = skipLeadingWhite(content, 0)-->Line_24 $$ if (start >= size) [ FD ]
Line_4 $$ List content = element.getContent()-->Line_34 $$ printTextRange(out, content, start, size)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_40 $$ while (namespaces.size() > previouslyDeclaredNamespaces) [ CD ]
Line_20 $$ if (attributes != null)-->Line_21 $$ printAttributes(out, attributes, element, namespaces)[ CD ]
Line_24 $$ if (start >= size) -->Line_37 $$ printQualifiedName(out, element)[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_16 $$ printQualifiedName(out, element)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_32 $$ indent(out, level)[ FD ]
Line_28 $$ if (nextNonText(content, start) < size) -->Line_32 $$ indent(out, level)[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_20 $$ if (attributes != null)[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_18 $$ printElementNamespace(out, element, namespaces)[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_27 $$ out.write(">")[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_4 $$ List content = element.getContent()[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_9 $$ Format previousFormat = currentFormat[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_15 $$ out.write("<")[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_3 $$ List attributes = element.getAttributes()[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_21 $$ printAttributes(out, attributes, element, namespaces)[ FD ]
Line_4 $$ List content = element.getContent()-->Line_23 $$ int size = content.size()[ FD ]
Line_24 $$ if (start >= size) -->Line_27 $$ out.write(">")[ CD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_31 $$ newline(out)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_17 $$ int previouslyDeclaredNamespaces = namespaces.size()[ CD ]
Line_28 $$ if (nextNonText(content, start) < size) -->Line_31 $$ newline(out)[ CD ]
Line_4 $$ List content = element.getContent()-->Line_30 $$ printContentRange(out, content, start, size, level + 1, namespaces)[ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_36 $$ out.write("</")[ FD ]
Line_5 $$ String space = null-->Line_7 $$ space = element.getAttributeValue("space", Namespace.XML_NAMESPACE)[ FD ]
Line_17 $$ int previouslyDeclaredNamespaces = namespaces.size()-->Line_40 $$ while (namespaces.size() > previouslyDeclaredNamespaces) [ FD ]
Line_2 $$ protected void printElement(Writer out, Element element, int level, EclipseNamespaceStack namespaces) throws IOException -->Line_5 $$ String space = null[ CD ]
