Line_4 $$ if (download(checksumURL, checksumFile, progress, timeout)) -->Line_6 $$ List<String> checksumLines = Files.readAllLines(checksumFile, StandardCharsets.UTF_8)[ CD ]
Line_2 $$ public boolean downloadAndVerifyChecksum(URL checksumURL, Path originalFile, Path checksumFile, @Nullable DownloadProgress progress, TimeValue timeout, Checksummer hashFunc) throws Exception -->Line_6 $$ List<String> checksumLines = Files.readAllLines(checksumFile, StandardCharsets.UTF_8)[ FD ]
Line_4 $$ if (download(checksumURL, checksumFile, progress, timeout)) -->Line_5 $$ byte[] fileBytes = Files.readAllBytes(originalFile)[ CD ]
Line_2 $$ public boolean downloadAndVerifyChecksum(URL checksumURL, Path originalFile, Path checksumFile, @Nullable DownloadProgress progress, TimeValue timeout, Checksummer hashFunc) throws Exception -->Line_11 $$ String fileHex = hashFunc.checksum(fileBytes)[ FD ]
Line_4 $$ if (download(checksumURL, checksumFile, progress, timeout)) -->Line_10 $$ String checksumHex = checksumLines.get(0)[ CD ]
Line_4 $$ if (download(checksumURL, checksumFile, progress, timeout)) -->Line_7 $$ if (checksumLines.size() != 1) [ CD ]
Line_10 $$ String checksumHex = checksumLines.get(0)-->Line_12 $$ if (fileHex.equals(checksumHex) == false) [ FD ]
Line_2 $$ public boolean downloadAndVerifyChecksum(URL checksumURL, Path originalFile, Path checksumFile, @Nullable DownloadProgress progress, TimeValue timeout, Checksummer hashFunc) throws Exception -->Line_20 $$ IOUtils.deleteFilesIgnoringExceptions(checksumFile)[ FD ]
Line_11 $$ String fileHex = hashFunc.checksum(fileBytes)-->Line_12 $$ if (fileHex.equals(checksumHex) == false) [ FD ]
Line_2 $$ public boolean downloadAndVerifyChecksum(URL checksumURL, Path originalFile, Path checksumFile, @Nullable DownloadProgress progress, TimeValue timeout, Checksummer hashFunc) throws Exception -->Line_13 $$ throw new ElasticsearchCorruptionException("incorrect hash (" + hashFunc.name() + "), file hash: [" + fileHex + "], expected: [" + checksumHex + "]")[ FD ]
Line_2 $$ public boolean downloadAndVerifyChecksum(URL checksumURL, Path originalFile, Path checksumFile, @Nullable DownloadProgress progress, TimeValue timeout, Checksummer hashFunc) throws Exception -->Line_4 $$ if (download(checksumURL, checksumFile, progress, timeout)) [ FD ]
Line_6 $$ List<String> checksumLines = Files.readAllLines(checksumFile, StandardCharsets.UTF_8)-->Line_8 $$ throw new ElasticsearchCorruptionException("invalid format for checksum file (" + hashFunc.name() + "), expected 1 line, got: " + checksumLines.size())[ FD ]
Line_6 $$ List<String> checksumLines = Files.readAllLines(checksumFile, StandardCharsets.UTF_8)-->Line_7 $$ if (checksumLines.size() != 1) [ FD ]
Line_4 $$ if (download(checksumURL, checksumFile, progress, timeout)) -->Line_11 $$ String fileHex = hashFunc.checksum(fileBytes)[ CD ]
Line_2 $$ public boolean downloadAndVerifyChecksum(URL checksumURL, Path originalFile, Path checksumFile, @Nullable DownloadProgress progress, TimeValue timeout, Checksummer hashFunc) throws Exception -->Line_22 $$ return false[ CD ]
Line_2 $$ public boolean downloadAndVerifyChecksum(URL checksumURL, Path originalFile, Path checksumFile, @Nullable DownloadProgress progress, TimeValue timeout, Checksummer hashFunc) throws Exception -->Line_8 $$ throw new ElasticsearchCorruptionException("invalid format for checksum file (" + hashFunc.name() + "), expected 1 line, got: " + checksumLines.size())[ FD ]
Line_6 $$ List<String> checksumLines = Files.readAllLines(checksumFile, StandardCharsets.UTF_8)-->Line_10 $$ String checksumHex = checksumLines.get(0)[ FD ]
Line_4 $$ if (download(checksumURL, checksumFile, progress, timeout)) -->Line_15 $$ return true[ CD ]
Line_4 $$ if (download(checksumURL, checksumFile, progress, timeout)) -->Line_12 $$ if (fileHex.equals(checksumHex) == false) [ CD ]
Line_2 $$ public boolean downloadAndVerifyChecksum(URL checksumURL, Path originalFile, Path checksumFile, @Nullable DownloadProgress progress, TimeValue timeout, Checksummer hashFunc) throws Exception -->Line_5 $$ byte[] fileBytes = Files.readAllBytes(originalFile)[ FD ]
Line_5 $$ byte[] fileBytes = Files.readAllBytes(originalFile)-->Line_11 $$ String fileHex = hashFunc.checksum(fileBytes)[ FD ]
