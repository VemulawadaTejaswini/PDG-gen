Line_2 $$ public static Pattern createFileMaskRegExp(@Nullable String filter) -->Line_3 $$ if (filter == null) [ FD ]
Line_2 $$ public static Pattern createFileMaskRegExp(@Nullable String filter) -->Line_3 $$ if (filter == null) [ CD ]
Line_2 $$ public static Pattern createFileMaskRegExp(@Nullable String filter) -->Line_7 $$ final List<String> strings = StringUtil.split(filter, ",")[ CD ]
Line_9 $$ pattern = PatternUtil.convertToRegex(filter.trim())-->Line_11 $$ pattern = StringUtil.join(strings, new Function<String, String>() [ FD ]
Line_2 $$ public static Pattern createFileMaskRegExp(@Nullable String filter) -->Line_7 $$ final List<String> strings = StringUtil.split(filter, ",")[ FD ]
Line_11 $$ pattern = StringUtil.join(strings, new Function<String, String>() -->Line_13 $$ return "(" + PatternUtil.convertToRegex(s.trim()) + ")"[ FD ]
Line_6 $$ String pattern-->Line_9 $$ pattern = PatternUtil.convertToRegex(filter.trim())[ FD ]
Line_8 $$ if (strings.size() == 1) -->Line_11 $$ pattern = StringUtil.join(strings, new Function<String, String>() [ CD ]
Line_6 $$ String pattern-->Line_11 $$ pattern = StringUtil.join(strings, new Function<String, String>() [ FD ]
Line_3 $$ if (filter == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public static Pattern createFileMaskRegExp(@Nullable String filter) -->Line_9 $$ pattern = PatternUtil.convertToRegex(filter.trim())[ FD ]
Line_7 $$ final List<String> strings = StringUtil.split(filter, ",")-->Line_11 $$ pattern = StringUtil.join(strings, new Function<String, String>() [ FD ]
Line_2 $$ public static Pattern createFileMaskRegExp(@Nullable String filter) -->Line_17 $$ return Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)[ CD ]
Line_8 $$ if (strings.size() == 1) -->Line_9 $$ pattern = PatternUtil.convertToRegex(filter.trim())[ CD ]
Line_6 $$ String pattern-->Line_17 $$ return Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)[ FD ]
Line_7 $$ final List<String> strings = StringUtil.split(filter, ",")-->Line_8 $$ if (strings.size() == 1) [ FD ]
Line_11 $$ pattern = StringUtil.join(strings, new Function<String, String>() -->Line_13 $$ return "(" + PatternUtil.convertToRegex(s.trim()) + ")"[ CD ]
Line_2 $$ public static Pattern createFileMaskRegExp(@Nullable String filter) -->Line_6 $$ String pattern[ CD ]
Line_2 $$ public static Pattern createFileMaskRegExp(@Nullable String filter) -->Line_8 $$ if (strings.size() == 1) [ CD ]
Line_11 $$ pattern = StringUtil.join(strings, new Function<String, String>() -->Line_17 $$ return Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)[ FD ]
Line_9 $$ pattern = PatternUtil.convertToRegex(filter.trim())-->Line_17 $$ return Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)[ FD ]
