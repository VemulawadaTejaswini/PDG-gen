Line_11 $$ final List<String> strings = StringUtil.split(filter, ",")-->Line_12 $$ if (strings.size() == 1) [ FD ]
Line_11 $$ final List<String> strings = StringUtil.split(filter, ",")-->Line_15 $$ pattern = StringUtil.join(strings, new Function<String, String>() [ FD ]
Line_12 $$ if (strings.size() == 1) -->Line_15 $$ pattern = StringUtil.join(strings, new Function<String, String>() [ CD ]
Line_10 $$ String pattern-->Line_13 $$ pattern = PatternUtil.convertToRegex(filter.trim())[ FD ]
Line_15 $$ pattern = StringUtil.join(strings, new Function<String, String>() -->Line_20 $$ return "(" + PatternUtil.convertToRegex(s.trim()) + ")"[ CD ]
Line_10 $$ String pattern-->Line_15 $$ pattern = StringUtil.join(strings, new Function<String, String>() [ FD ]
Line_13 $$ pattern = PatternUtil.convertToRegex(filter.trim())-->Line_15 $$ pattern = StringUtil.join(strings, new Function<String, String>() [ FD ]
Line_12 $$ if (strings.size() == 1) -->Line_13 $$ pattern = PatternUtil.convertToRegex(filter.trim())[ CD ]
Line_7 $$ if (filter == null) -->Line_8 $$ return null[ CD ]
Line_13 $$ pattern = PatternUtil.convertToRegex(filter.trim())-->Line_24 $$ return Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)[ FD ]
Line_15 $$ pattern = StringUtil.join(strings, new Function<String, String>() -->Line_20 $$ return "(" + PatternUtil.convertToRegex(s.trim()) + ")"[ FD ]
Line_10 $$ String pattern-->Line_24 $$ return Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)[ FD ]
Line_15 $$ pattern = StringUtil.join(strings, new Function<String, String>() -->Line_24 $$ return Pattern.compile(pattern, Pattern.CASE_INSENSITIVE)[ FD ]
