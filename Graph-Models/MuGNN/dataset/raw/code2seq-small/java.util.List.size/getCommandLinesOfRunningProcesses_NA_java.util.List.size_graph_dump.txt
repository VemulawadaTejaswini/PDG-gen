Line_15 $$ String[] cmd = UnixProcessManager.getPSCmd(true)-->Line_20 $$ throw new IOException(Arrays.toString(cmd) + " failed: " + StringUtil.join(errorLines, "\n"))[ FD ]
Line_7 $$ for (WinProcess process : WinProcess.all()) -->Line_17 $$ List<String> outputLines = readLines(process.getInputStream(), false)[ FD ]
Line_5 $$ if (SystemInfo.isWindows) -->Line_16 $$ Process process = Runtime.getRuntime().exec(cmd)[ CD ]
Line_7 $$ for (WinProcess process : WinProcess.all()) -->Line_18 $$ List<String> errorLines = readLines(process.getErrorStream(), false)[ FD ]
Line_18 $$ List<String> errorLines = readLines(process.getErrorStream(), false)-->Line_20 $$ throw new IOException(Arrays.toString(cmd) + " failed: " + StringUtil.join(errorLines, "\n"))[ FD ]
Line_6 $$ List<String> commandLines = new ArrayList<String>()-->Line_9 $$ commandLines.add(process.getCommandLine())[ FD ]
Line_5 $$ if (SystemInfo.isWindows) -->Line_19 $$ if (!errorLines.isEmpty()) [ CD ]
Line_5 $$ if (SystemInfo.isWindows) -->Line_15 $$ String[] cmd = UnixProcessManager.getPSCmd(true)[ CD ]
Line_5 $$ if (SystemInfo.isWindows) -->Line_6 $$ List<String> commandLines = new ArrayList<String>()[ CD ]
Line_18 $$ List<String> errorLines = readLines(process.getErrorStream(), false)-->Line_19 $$ if (!errorLines.isEmpty()) [ FD ]
Line_5 $$ if (SystemInfo.isWindows) -->Line_18 $$ List<String> errorLines = readLines(process.getErrorStream(), false)[ CD ]
Line_15 $$ String[] cmd = UnixProcessManager.getPSCmd(true)-->Line_16 $$ Process process = Runtime.getRuntime().exec(cmd)[ FD ]
Line_7 $$ for (WinProcess process : WinProcess.all()) -->Line_9 $$ commandLines.add(process.getCommandLine())[ FD ]
Line_5 $$ if (SystemInfo.isWindows) -->Line_13 $$ return commandLines[ CD ]
Line_5 $$ if (SystemInfo.isWindows) -->Line_17 $$ List<String> outputLines = readLines(process.getInputStream(), false)[ CD ]
