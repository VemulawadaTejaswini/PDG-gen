Line_28 $$ for (int i = newDependencies.size() - 1; i >= 0; i--) -->Line_30 $$ if (dependency.state == ModelGoal.State.Achieved) [ CD ]
Line_3 $$ LinkedList<ModelGoal> queue = new LinkedList<ModelGoal>()-->Line_6 $$ ModelGoal goal = queue.getFirst()[ FD ]
Line_5 $$ while (!queue.isEmpty()) -->Line_27 $$ goal.state = done || newDependencies.isEmpty() ? ModelGoal.State.VisitingDependencies : ModelGoal.State.DiscoveringDependencies[ CD ]
Line_3 $$ LinkedList<ModelGoal> queue = new LinkedList<ModelGoal>()-->Line_14 $$ queue.removeFirst()[ FD ]
Line_2 $$ private void transitionTo(GoalGraph goalGraph, ModelGoal targetGoal) -->Line_4 $$ queue.add(targetGoal)[ CD ]
Line_5 $$ while (!queue.isEmpty()) -->Line_7 $$ if (goal.state == ModelGoal.State.Achieved) [ CD ]
Line_24 $$ List<ModelGoal> newDependencies = new ArrayList<ModelGoal>()-->Line_29 $$ ModelGoal dependency = newDependencies.get(i)[ FD ]
Line_6 $$ ModelGoal goal = queue.getFirst()-->Line_26 $$ boolean done = goal.calculateDependencies(goalGraph, newDependencies)[ FD ]
Line_5 $$ while (!queue.isEmpty()) -->Line_6 $$ ModelGoal goal = queue.getFirst()[ CD ]
Line_6 $$ ModelGoal goal = queue.getFirst()-->Line_12 $$ if (goal.isAchieved()) [ FD ]
Line_18 $$ if (goal.state == ModelGoal.State.VisitingDependencies) -->Line_20 $$ goal.state = ModelGoal.State.Achieved[ CD ]
Line_29 $$ ModelGoal dependency = newDependencies.get(i)-->Line_34 $$ queue.addFirst(dependency)[ FD ]
Line_5 $$ while (!queue.isEmpty()) -->Line_25 $$ goal.attachNode()[ CD ]
Line_6 $$ ModelGoal goal = queue.getFirst()-->Line_25 $$ goal.attachNode()[ FD ]
Line_2 $$ private void transitionTo(GoalGraph goalGraph, ModelGoal targetGoal) -->Line_5 $$ while (!queue.isEmpty()) [ CD ]
Line_6 $$ ModelGoal goal = queue.getFirst()-->Line_19 $$ goal.apply()[ FD ]
Line_5 $$ while (!queue.isEmpty()) -->Line_18 $$ if (goal.state == ModelGoal.State.VisitingDependencies) [ CD ]
Line_5 $$ while (!queue.isEmpty()) -->Line_24 $$ List<ModelGoal> newDependencies = new ArrayList<ModelGoal>()[ CD ]
Line_2 $$ private void transitionTo(GoalGraph goalGraph, ModelGoal targetGoal) -->Line_3 $$ LinkedList<ModelGoal> queue = new LinkedList<ModelGoal>()[ CD ]
Line_33 $$ if (dependency.state == ModelGoal.State.NotSeen) -->Line_34 $$ queue.addFirst(dependency)[ CD ]
Line_29 $$ ModelGoal dependency = newDependencies.get(i)-->Line_37 $$ throw ruleCycle(dependency, queue)[ FD ]
Line_3 $$ LinkedList<ModelGoal> queue = new LinkedList<ModelGoal>()-->Line_4 $$ queue.add(targetGoal)[ FD ]
Line_3 $$ LinkedList<ModelGoal> queue = new LinkedList<ModelGoal>()-->Line_8 $$ queue.removeFirst()[ FD ]
Line_3 $$ LinkedList<ModelGoal> queue = new LinkedList<ModelGoal>()-->Line_37 $$ throw ruleCycle(dependency, queue)[ FD ]
Line_3 $$ LinkedList<ModelGoal> queue = new LinkedList<ModelGoal>()-->Line_34 $$ queue.addFirst(dependency)[ FD ]
Line_3 $$ LinkedList<ModelGoal> queue = new LinkedList<ModelGoal>()-->Line_5 $$ while (!queue.isEmpty()) [ FD ]
Line_5 $$ while (!queue.isEmpty()) -->Line_26 $$ boolean done = goal.calculateDependencies(goalGraph, newDependencies)[ CD ]
Line_5 $$ while (!queue.isEmpty()) -->Line_11 $$ if (goal.state == ModelGoal.State.NotSeen) [ CD ]
Line_12 $$ if (goal.isAchieved()) -->Line_14 $$ queue.removeFirst()[ CD ]
Line_28 $$ for (int i = newDependencies.size() - 1; i >= 0; i--) -->Line_29 $$ ModelGoal dependency = newDependencies.get(i)[ FD ]
Line_2 $$ private void transitionTo(GoalGraph goalGraph, ModelGoal targetGoal) -->Line_26 $$ boolean done = goal.calculateDependencies(goalGraph, newDependencies)[ FD ]
Line_5 $$ while (!queue.isEmpty()) -->Line_28 $$ for (int i = newDependencies.size() - 1; i >= 0; i--) [ CD ]
Line_7 $$ if (goal.state == ModelGoal.State.Achieved) -->Line_8 $$ queue.removeFirst()[ CD ]
Line_28 $$ for (int i = newDependencies.size() - 1; i >= 0; i--) -->Line_29 $$ ModelGoal dependency = newDependencies.get(i)[ CD ]
Line_3 $$ LinkedList<ModelGoal> queue = new LinkedList<ModelGoal>()-->Line_21 $$ queue.removeFirst()[ FD ]
Line_18 $$ if (goal.state == ModelGoal.State.VisitingDependencies) -->Line_21 $$ queue.removeFirst()[ CD ]
Line_12 $$ if (goal.isAchieved()) -->Line_13 $$ goal.state = ModelGoal.State.Achieved[ CD ]
Line_18 $$ if (goal.state == ModelGoal.State.VisitingDependencies) -->Line_19 $$ goal.apply()[ CD ]
Line_11 $$ if (goal.state == ModelGoal.State.NotSeen) -->Line_12 $$ if (goal.isAchieved()) [ CD ]
Line_28 $$ for (int i = newDependencies.size() - 1; i >= 0; i--) -->Line_33 $$ if (dependency.state == ModelGoal.State.NotSeen) [ CD ]
Line_24 $$ List<ModelGoal> newDependencies = new ArrayList<ModelGoal>()-->Line_26 $$ boolean done = goal.calculateDependencies(goalGraph, newDependencies)[ FD ]
Line_24 $$ List<ModelGoal> newDependencies = new ArrayList<ModelGoal>()-->Line_28 $$ for (int i = newDependencies.size() - 1; i >= 0; i--) [ FD ]
Line_24 $$ List<ModelGoal> newDependencies = new ArrayList<ModelGoal>()-->Line_27 $$ goal.state = done || newDependencies.isEmpty() ? ModelGoal.State.VisitingDependencies : ModelGoal.State.DiscoveringDependencies[ FD ]
Line_2 $$ private void transitionTo(GoalGraph goalGraph, ModelGoal targetGoal) -->Line_4 $$ queue.add(targetGoal)[ FD ]
