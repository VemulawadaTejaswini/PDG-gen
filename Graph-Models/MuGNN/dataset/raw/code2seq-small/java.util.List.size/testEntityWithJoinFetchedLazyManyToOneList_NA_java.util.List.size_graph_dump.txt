Line_23 $$ CriteriaExecutor criteriaExecutorAliased3 = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_33 $$ HqlExecutor hqlExecutorAliased = new HqlExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.preferredCourse pCourse order by s.studentNumber")[ CD ]
Line_23 $$ CriteriaExecutor criteriaExecutorAliased3 = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.preferredCourse pCourse order by s.studentNumber")[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.preferredCourse pCourse order by s.studentNumber")[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_41 $$ assertEquals(2, resultList.size())[ CD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyManyToOneList() throws Exception -->Line_49 $$ runTest(hqlExecutorAliased, criteriaExecutorAliased1, checker, false)[ CD ]
Line_40 $$ List resultList = (List) results-->Line_42 $$ assertEquals(yogiExpected, resultList.get(0))[ FD ]
Line_33 $$ HqlExecutor hqlExecutorAliased = new HqlExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.preferredCourse pCourse order by s.studentNumber")[ FD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_28 $$ CriteriaExecutor criteriaExecutorAliased4 = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.preferredCourse pCourse order by s.studentNumber")[ FD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyManyToOneList() throws Exception -->Line_48 $$ runTest(hqlExecutorUnaliased, criteriaExecutorUnaliased, checker, false)[ CD ]
Line_40 $$ List resultList = (List) results-->Line_44 $$ assertEquals(yogiExpected.getPreferredCourse().getCourseCode(), ((Student) resultList.get(0)).getPreferredCourse().getCourseCode())[ FD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyManyToOneList() throws Exception -->Line_50 $$ runTest(null, criteriaExecutorAliased2, checker, false)[ CD ]
Line_23 $$ CriteriaExecutor criteriaExecutorAliased3 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_28 $$ CriteriaExecutor criteriaExecutorAliased4 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("from Student s left join fetch s.preferredCourse order by s.studentNumber")[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_40 $$ List resultList = (List) results[ CD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.preferredCourse pCourse order by s.studentNumber")[ FD ]
Line_40 $$ List resultList = (List) results-->Line_41 $$ assertEquals(2, resultList.size())[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_42 $$ assertEquals(yogiExpected, resultList.get(0))[ CD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyManyToOneList() throws Exception -->Line_51 $$ runTest(null, criteriaExecutorAliased3, checker, false)[ CD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_40 $$ List resultList = (List) results-->Line_43 $$ assertEquals(shermanExpected, resultList.get(1))[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_43 $$ assertEquals(shermanExpected, resultList.get(1))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_48 $$ runTest(hqlExecutorUnaliased, criteriaExecutorUnaliased, checker, false)[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_44 $$ assertEquals(yogiExpected.getPreferredCourse().getCourseCode(), ((Student) resultList.get(0)).getPreferredCourse().getCourseCode())[ CD ]
Line_23 $$ CriteriaExecutor criteriaExecutorAliased3 = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyManyToOneList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() [ CD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyManyToOneList() throws Exception -->Line_52 $$ runTest(null, criteriaExecutorAliased4, checker, false)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student s left join fetch s.preferredCourse order by s.studentNumber")[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_45 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ CD ]
Line_28 $$ CriteriaExecutor criteriaExecutorAliased4 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.preferredCourse pCourse order by s.studentNumber")[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_40 $$ List resultList = (List) results-->Line_45 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ FD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("pCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student s left join fetch s.preferredCourse order by s.studentNumber")[ CD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pCourse", Criteria.LEFT_JOIN).setFetchMode("preferredCourse", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.preferredCourse pCourse order by s.studentNumber")[ FD ]
