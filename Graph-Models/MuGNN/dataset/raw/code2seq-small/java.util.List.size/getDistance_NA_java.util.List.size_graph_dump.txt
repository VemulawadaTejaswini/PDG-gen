Line_6 $$ for (int i = idxStart; i < myLines.size() && cnt < lines.size(); i++, cnt++) -->Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))[ FD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_3 $$ if (idxStart >= myLines.size())[ CD ]
Line_5 $$ int cnt = 0-->Line_6 $$ for (int i = idxStart; i < myLines.size() && cnt < lines.size(); i++, cnt++) [ FD ]
Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))-->Line_8 $$ return (lines.size() - cnt)[ CD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_6 $$ for (int i = idxStart; i < myLines.size() && cnt < lines.size(); i++, cnt++) [ CD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_3 $$ if (idxStart >= myLines.size())[ FD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))[ FD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_5 $$ int cnt = 0[ CD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_8 $$ return (lines.size() - cnt)[ FD ]
Line_3 $$ if (idxStart >= myLines.size())-->Line_4 $$ return lines.size()[ CD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_6 $$ for (int i = idxStart; i < myLines.size() && cnt < lines.size(); i++, cnt++) [ FD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_10 $$ return lines.size() - cnt[ CD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_10 $$ return lines.size() - cnt[ FD ]
Line_5 $$ int cnt = 0-->Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))[ FD ]
Line_2 $$ private int getDistance(final int idxStart, final List<String> lines) -->Line_4 $$ return lines.size()[ FD ]
Line_6 $$ for (int i = idxStart; i < myLines.size() && cnt < lines.size(); i++, cnt++) -->Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))[ CD ]
