Line_18 $$ Student leonardo = new Student()-->Line_49 $$ session.delete(leonardo)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_5 $$ Course courseA = new Course()[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_31 $$ assertEquals("HIB-A", result.get(1))[ FD ]
Line_5 $$ Course courseA = new Course()-->Line_16 $$ gavin.setPreferredCourse(courseA)[ FD ]
Line_13 $$ Student gavin = new Student()-->Line_16 $$ gavin.setPreferredCourse(courseA)[ FD ]
Line_13 $$ Student gavin = new Student()-->Line_48 $$ session.delete(gavin)[ FD ]
Line_23 $$ Student johnDoe = new Student()-->Line_27 $$ session.persist(johnDoe)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_22 $$ session.persist(leonardo)[ CD ]
Line_3 $$ Session session = openSession()-->Line_50 $$ session.delete(johnDoe)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_23 $$ Student johnDoe = new Student()[ CD ]
Line_30 $$ if (result.get(0) == null) -->Line_35 $$ assertEquals("HIB-A", result.get(0))[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_34 $$ assertNull(result.get(2))[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_18 $$ Student leonardo = new Student()[ CD ]
Line_3 $$ Session session = openSession()-->Line_12 $$ session.persist(courseB)[ FD ]
Line_18 $$ Student leonardo = new Student()-->Line_22 $$ session.persist(leonardo)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_25 $$ johnDoe.setStudentNumber(235)[ CD ]
Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_39 $$ assertEquals(3, result.size())[ FD ]
Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_43 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()[ FD ]
Line_3 $$ Session session = openSession()-->Line_54 $$ session.close()[ FD ]
Line_4 $$ Transaction t = session.beginTransaction()-->Line_53 $$ t.commit()[ FD ]
Line_3 $$ Session session = openSession()-->Line_49 $$ session.delete(leonardo)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_21 $$ leonardo.setPreferredCourse(courseB)[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()[ CD ]
Line_3 $$ Session session = openSession()-->Line_27 $$ session.persist(johnDoe)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_51 $$ session.delete(courseA)[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_17 $$ session.persist(gavin)[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_36 $$ assertEquals("HIB-B", result.get(1))[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_29 $$ assertEquals(3, result.size())[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_35 $$ assertEquals("HIB-A", result.get(0))[ FD ]
Line_5 $$ Course courseA = new Course()-->Line_7 $$ courseA.setDescription("Hibernate Training A")[ FD ]
Line_3 $$ Session session = openSession()-->Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()[ FD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_41 $$ assertNotNull(result.get(1))[ FD ]
Line_23 $$ Student johnDoe = new Student()-->Line_25 $$ johnDoe.setStudentNumber(235)[ FD ]
Line_3 $$ Session session = openSession()-->Line_43 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()[ FD ]
Line_3 $$ Session session = openSession()-->Line_51 $$ session.delete(courseA)[ FD ]
Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_44 $$ assertEquals(3, result.size())[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_44 $$ assertEquals(3, result.size())[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_32 $$ assertEquals("HIB-B", result.get(2))[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_45 $$ assertNotNull(result.get(0))[ CD ]
Line_5 $$ Course courseA = new Course()-->Line_51 $$ session.delete(courseA)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_53 $$ t.commit()[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_12 $$ session.persist(courseB)[ CD ]
Line_5 $$ Course courseA = new Course()-->Line_8 $$ session.persist(courseA)[ FD ]
Line_9 $$ Course courseB = new Course()-->Line_11 $$ courseB.setDescription("Hibernate Training B")[ FD ]
Line_23 $$ Student johnDoe = new Student()-->Line_24 $$ johnDoe.setName("John Doe")[ FD ]
Line_43 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()-->Line_46 $$ assertNotNull(result.get(1))[ FD ]
Line_30 $$ if (result.get(0) == null) -->Line_34 $$ assertNull(result.get(2))[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_26 $$ johnDoe.setPreferredCourse(null)[ CD ]
Line_30 $$ if (result.get(0) == null) -->Line_31 $$ assertEquals("HIB-A", result.get(1))[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_43 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()[ FD ]
Line_3 $$ Session session = openSession()-->Line_48 $$ session.delete(gavin)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_8 $$ session.persist(courseA)[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_19 $$ leonardo.setName("Leonardo Quijano")[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_39 $$ assertEquals(3, result.size())[ FD ]
Line_23 $$ Student johnDoe = new Student()-->Line_26 $$ johnDoe.setPreferredCourse(null)[ FD ]
Line_9 $$ Course courseB = new Course()-->Line_21 $$ leonardo.setPreferredCourse(courseB)[ FD ]
Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_42 $$ assertNotNull(result.get(2))[ FD ]
Line_43 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()-->Line_44 $$ assertEquals(3, result.size())[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_16 $$ gavin.setPreferredCourse(courseA)[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_43 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_40 $$ assertNotNull(result.get(0))[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_3 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_40 $$ assertNotNull(result.get(0))[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_41 $$ assertNotNull(result.get(1))[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_39 $$ assertEquals(3, result.size())[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_15 $$ gavin.setStudentNumber(232)[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_45 $$ assertNotNull(result.get(0))[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_47 $$ assertNotNull(result.get(2))[ CD ]
Line_18 $$ Student leonardo = new Student()-->Line_21 $$ leonardo.setPreferredCourse(courseB)[ FD ]
Line_43 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()-->Line_47 $$ assertNotNull(result.get(2))[ FD ]
Line_9 $$ Course courseB = new Course()-->Line_10 $$ courseB.setCourseCode("HIB-B")[ FD ]
Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_41 $$ assertNotNull(result.get(1))[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_14 $$ gavin.setName("Gavin King")[ CD ]
Line_3 $$ Session session = openSession()-->Line_17 $$ session.persist(gavin)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_24 $$ johnDoe.setName("John Doe")[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_46 $$ assertNotNull(result.get(1))[ FD ]
Line_3 $$ Session session = openSession()-->Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()[ FD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_29 $$ assertEquals(3, result.size())[ FD ]
Line_23 $$ Student johnDoe = new Student()-->Line_50 $$ session.delete(johnDoe)[ FD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_30 $$ if (result.get(0) == null) [ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_54 $$ session.close()[ CD ]
Line_13 $$ Student gavin = new Student()-->Line_14 $$ gavin.setName("Gavin King")[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_20 $$ leonardo.setStudentNumber(233)[ CD ]
Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_46 $$ assertNotNull(result.get(1))[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_52 $$ session.delete(courseB)[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_30 $$ if (result.get(0) == null) [ CD ]
Line_3 $$ Session session = openSession()-->Line_4 $$ Transaction t = session.beginTransaction()[ FD ]
Line_3 $$ Session session = openSession()-->Line_22 $$ session.persist(leonardo)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_46 $$ assertNotNull(result.get(1))[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_11 $$ courseB.setDescription("Hibernate Training B")[ CD ]
Line_3 $$ Session session = openSession()-->Line_8 $$ session.persist(courseA)[ FD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_9 $$ Course courseB = new Course()[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_49 $$ session.delete(leonardo)[ CD ]
Line_43 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()-->Line_45 $$ assertNotNull(result.get(0))[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_10 $$ courseB.setCourseCode("HIB-B")[ CD ]
Line_13 $$ Student gavin = new Student()-->Line_15 $$ gavin.setStudentNumber(232)[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_13 $$ Student gavin = new Student()[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_42 $$ assertNotNull(result.get(2))[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_4 $$ Transaction t = session.beginTransaction()[ CD ]
Line_3 $$ Session session = openSession()-->Line_52 $$ session.delete(courseB)[ FD ]
Line_30 $$ if (result.get(0) == null) -->Line_36 $$ assertEquals("HIB-B", result.get(1))[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_27 $$ session.persist(johnDoe)[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_48 $$ session.delete(gavin)[ CD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_6 $$ courseA.setCourseCode("HIB-A")[ CD ]
Line_18 $$ Student leonardo = new Student()-->Line_19 $$ leonardo.setName("Leonardo Quijano")[ FD ]
Line_9 $$ Course courseB = new Course()-->Line_52 $$ session.delete(courseB)[ FD ]
Line_9 $$ Course courseB = new Course()-->Line_12 $$ session.persist(courseB)[ FD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_42 $$ assertNotNull(result.get(2))[ FD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_44 $$ assertEquals(3, result.size())[ FD ]
Line_30 $$ if (result.get(0) == null) -->Line_32 $$ assertEquals("HIB-B", result.get(2))[ CD ]
Line_5 $$ Course courseA = new Course()-->Line_6 $$ courseA.setCourseCode("HIB-A")[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_7 $$ courseA.setDescription("Hibernate Training A")[ CD ]
Line_18 $$ Student leonardo = new Student()-->Line_20 $$ leonardo.setStudentNumber(233)[ FD ]
Line_13 $$ Student gavin = new Student()-->Line_17 $$ session.persist(gavin)[ FD ]
Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_40 $$ assertNotNull(result.get(0))[ FD ]
Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_45 $$ assertNotNull(result.get(0))[ FD ]
Line_38 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_47 $$ assertNotNull(result.get(2))[ FD ]
Line_2 $$ public void testSubcriteriaJoinTypes() -->Line_50 $$ session.delete(johnDoe)[ CD ]
Line_28 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_47 $$ assertNotNull(result.get(2))[ FD ]
