Line_6 $$ Course courseA = new Course()-->Line_7 $$ courseA.setCourseCode("HIB-A")[ FD ]
Line_10 $$ Course courseB = new Course()-->Line_55 $$ session.delete(courseB)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_48 $$ assertNotNull(result.get(0))[ FD ]
Line_19 $$ Student leonardo = new Student()-->Line_20 $$ leonardo.setName("Leonardo Quijano")[ FD ]
Line_14 $$ Student gavin = new Student()-->Line_15 $$ gavin.setName("Gavin King")[ FD ]
Line_19 $$ Student leonardo = new Student()-->Line_21 $$ leonardo.setStudentNumber(233)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_34 $$ assertEquals("HIB-A", result.get(1))[ FD ]
Line_6 $$ Course courseA = new Course()-->Line_54 $$ session.delete(courseA)[ FD ]
Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_48 $$ assertNotNull(result.get(0))[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_42 $$ assertEquals(3, result.size())[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_35 $$ assertEquals("HIB-B", result.get(2))[ FD ]
Line_4 $$ Session session = openSession()-->Line_5 $$ Transaction t = session.beginTransaction()[ FD ]
Line_10 $$ Course courseB = new Course()-->Line_13 $$ session.persist(courseB)[ FD ]
Line_6 $$ Course courseA = new Course()-->Line_9 $$ session.persist(courseA)[ FD ]
Line_19 $$ Student leonardo = new Student()-->Line_23 $$ session.persist(leonardo)[ FD ]
Line_6 $$ Course courseA = new Course()-->Line_17 $$ gavin.setPreferredCourse(courseA)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_37 $$ assertNull(result.get(2))[ FD ]
Line_24 $$ Student johnDoe = new Student()-->Line_28 $$ session.persist(johnDoe)[ FD ]
Line_10 $$ Course courseB = new Course()-->Line_22 $$ leonardo.setPreferredCourse(courseB)[ FD ]
Line_14 $$ Student gavin = new Student()-->Line_18 $$ session.persist(gavin)[ FD ]
Line_24 $$ Student johnDoe = new Student()-->Line_27 $$ johnDoe.setPreferredCourse(null)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_45 $$ assertNotNull(result.get(2))[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_46 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_39 $$ assertEquals("HIB-B", result.get(1))[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_30 $$ assertEquals(3, result.size())[ FD ]
Line_4 $$ Session session = openSession()-->Line_18 $$ session.persist(gavin)[ FD ]
Line_4 $$ Session session = openSession()-->Line_9 $$ session.persist(courseA)[ FD ]
Line_4 $$ Session session = openSession()-->Line_54 $$ session.delete(courseA)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_38 $$ assertEquals("HIB-A", result.get(0))[ FD ]
Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_49 $$ assertNotNull(result.get(1))[ FD ]
Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_44 $$ assertNotNull(result.get(1))[ FD ]
Line_14 $$ Student gavin = new Student()-->Line_16 $$ gavin.setStudentNumber(232)[ FD ]
Line_6 $$ Course courseA = new Course()-->Line_8 $$ courseA.setDescription("Hibernate Training A")[ FD ]
Line_4 $$ Session session = openSession()-->Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()[ FD ]
Line_4 $$ Session session = openSession()-->Line_23 $$ session.persist(leonardo)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_50 $$ assertNotNull(result.get(2))[ FD ]
Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_50 $$ assertNotNull(result.get(2))[ FD ]
Line_24 $$ Student johnDoe = new Student()-->Line_25 $$ johnDoe.setName("John Doe")[ FD ]
Line_4 $$ Session session = openSession()-->Line_53 $$ session.delete(johnDoe)[ FD ]
Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_47 $$ assertEquals(3, result.size())[ FD ]
Line_46 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()-->Line_50 $$ assertNotNull(result.get(2))[ FD ]
Line_4 $$ Session session = openSession()-->Line_52 $$ session.delete(leonardo)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_49 $$ assertNotNull(result.get(1))[ FD ]
Line_14 $$ Student gavin = new Student()-->Line_51 $$ session.delete(gavin)[ FD ]
Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_43 $$ assertNotNull(result.get(0))[ FD ]
Line_46 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()-->Line_49 $$ assertNotNull(result.get(1))[ FD ]
Line_4 $$ Session session = openSession()-->Line_13 $$ session.persist(courseB)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_43 $$ assertNotNull(result.get(0))[ FD ]
Line_4 $$ Session session = openSession()-->Line_46 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()[ FD ]
Line_4 $$ Session session = openSession()-->Line_51 $$ session.delete(gavin)[ FD ]
Line_4 $$ Session session = openSession()-->Line_28 $$ session.persist(johnDoe)[ FD ]
Line_4 $$ Session session = openSession()-->Line_55 $$ session.delete(courseB)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_44 $$ assertNotNull(result.get(1))[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_47 $$ assertEquals(3, result.size())[ FD ]
Line_19 $$ Student leonardo = new Student()-->Line_52 $$ session.delete(leonardo)[ FD ]
Line_24 $$ Student johnDoe = new Student()-->Line_53 $$ session.delete(johnDoe)[ FD ]
Line_29 $$ List result = session.createCriteria(Student.class).setProjection(Property.forName("preferredCourse.courseCode")).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()[ FD ]
Line_46 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()-->Line_48 $$ assertNotNull(result.get(0))[ FD ]
Line_4 $$ Session session = openSession()-->Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()[ FD ]
Line_4 $$ Session session = openSession()-->Line_57 $$ session.close()[ FD ]
Line_24 $$ Student johnDoe = new Student()-->Line_26 $$ johnDoe.setStudentNumber(235)[ FD ]
Line_10 $$ Course courseB = new Course()-->Line_11 $$ courseB.setCourseCode("HIB-B")[ FD ]
Line_10 $$ Course courseB = new Course()-->Line_12 $$ courseB.setDescription("Hibernate Training B")[ FD ]
Line_5 $$ Transaction t = session.beginTransaction()-->Line_56 $$ t.commit()[ FD ]
Line_46 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()-->Line_47 $$ assertEquals(3, result.size())[ FD ]
Line_19 $$ Student leonardo = new Student()-->Line_22 $$ leonardo.setPreferredCourse(courseB)[ FD ]
Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_42 $$ assertEquals(3, result.size())[ FD ]
Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_45 $$ assertNotNull(result.get(2))[ FD ]
Line_41 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createCriteria("preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("courseCode")).list()-->Line_46 $$ result = session.createCriteria(Student.class).setFetchMode("preferredCourse", FetchMode.JOIN).createAlias("preferredCourse", "pc", Criteria.LEFT_JOIN).addOrder(Order.asc("pc.courseCode")).list()[ FD ]
Line_14 $$ Student gavin = new Student()-->Line_17 $$ gavin.setPreferredCourse(courseA)[ FD ]
