Line_20 $$ List resultList = (List) results-->Line_24 $$ assertEquals(yogiExpected.getPreferredCourse().getCourseCode(), ((Student) resultList.get(0)).getPreferredCourse().getCourseCode())[ FD ]
Line_2 $$ public void testEntityWithJoinedLazyManyToOneListCriteria() throws Exception -->Line_29 $$ runTest(null, criteriaExecutorAliased1, checker, false)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_10 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "p", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_2 $$ public void testEntityWithJoinedLazyManyToOneListCriteria() throws Exception -->Line_28 $$ runTest(null, criteriaExecutorUnaliased, checker, false)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_28 $$ runTest(null, criteriaExecutorUnaliased, checker, false)[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(yogiExpected, resultList.get(0))[ CD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "p", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_8 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "p", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_20 $$ List resultList = (List) results-->Line_21 $$ assertEquals(2, resultList.size())[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "p", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "p", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ List resultList = (List) results[ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(yogiExpected.getPreferredCourse().getCourseCode(), ((Student) resultList.get(0)).getPreferredCourse().getCourseCode())[ CD ]
Line_2 $$ public void testEntityWithJoinedLazyManyToOneListCriteria() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() [ CD ]
Line_2 $$ public void testEntityWithJoinedLazyManyToOneListCriteria() throws Exception -->Line_30 $$ runTest(null, criteriaExecutorAliased2, checker, false)[ CD ]
Line_20 $$ List resultList = (List) results-->Line_23 $$ assertEquals(shermanExpected, resultList.get(1))[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(2, resultList.size())[ CD ]
Line_20 $$ List resultList = (List) results-->Line_25 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ FD ]
Line_8 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_10 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "p", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_20 $$ List resultList = (List) results-->Line_22 $$ assertEquals(yogiExpected, resultList.get(0))[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(shermanExpected, resultList.get(1))[ CD ]
Line_8 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_10 $$ return s.createCriteria(Student.class, "s").createCriteria("s.preferredCourse", "p", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
