Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_6 $$ Future<?>[] results = new Future[NUM_THREADS][ CD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_7 $$ for (int i = 0; i < NUM_THREADS; i++) [ CD ]
Line_7 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_8 $$ results[i] = nextTenInvocations.submit(new LongWritesSingletonBeanInvoker(longWritesSingletonBean))[ CD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_10 $$ final List<Object> passed = new ArrayList<Object>()[ CD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_23 $$ assertEquals(1, passed.size())[ CD ]
Line_4 $$ final int NUM_THREADS = 10-->Line_5 $$ final ExecutorService nextTenInvocations = Executors.newFixedThreadPool(NUM_THREADS)[ FD ]
Line_11 $$ final List<Throwable> throwables = new ArrayList<Throwable>()-->Line_16 $$ throwables.add(ee.getCause())[ FD ]
Line_5 $$ final ExecutorService nextTenInvocations = Executors.newFixedThreadPool(NUM_THREADS)-->Line_8 $$ results[i] = nextTenInvocations.submit(new LongWritesSingletonBeanInvoker(longWritesSingletonBean))[ FD ]
Line_11 $$ final List<Throwable> throwables = new ArrayList<Throwable>()-->Line_24 $$ assertEquals(NUM_THREADS - 1, throwables.size())[ FD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_5 $$ final ExecutorService nextTenInvocations = Executors.newFixedThreadPool(NUM_THREADS)[ CD ]
Line_20 $$ for (Throwable t : throwables) -->Line_21 $$ assertTrue(t.toString(), t instanceof ConcurrentAccessTimeoutException)[ FD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_11 $$ final List<Throwable> throwables = new ArrayList<Throwable>()[ CD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_4 $$ final int NUM_THREADS = 10[ CD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_24 $$ assertEquals(NUM_THREADS - 1, throwables.size())[ CD ]
Line_4 $$ final int NUM_THREADS = 10-->Line_7 $$ for (int i = 0; i < NUM_THREADS; i++) [ FD ]
Line_10 $$ final List<Object> passed = new ArrayList<Object>()-->Line_14 $$ passed.add(results[i].get(10, TimeUnit.SECONDS))[ FD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_19 $$ Assert.assertEquals("Unexpected count on singleton bean after invocation on method with WRITE lock semantic: ", 1, this.longWritesSingletonBean.getCount())[ CD ]
Line_7 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_12 $$ for (int i = 0; i < NUM_THREADS; i++) [ FD ]
Line_4 $$ final int NUM_THREADS = 10-->Line_12 $$ for (int i = 0; i < NUM_THREADS; i++) [ FD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_12 $$ for (int i = 0; i < NUM_THREADS; i++) [ CD ]
Line_10 $$ final List<Object> passed = new ArrayList<Object>()-->Line_23 $$ assertEquals(1, passed.size())[ FD ]
Line_2 $$ public void testLongWritesSingleton() throws Exception -->Line_3 $$ final ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor()[ CD ]
