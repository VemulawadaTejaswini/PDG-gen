Line_15 $$ EntityWithFunctionAsColumnHolder holder1 = new EntityWithFunctionAsColumnHolder()-->Line_16 $$ holder1.getEntityWithNoArgFunctionAsColumns().add(e1)[ FD ]
Line_9 $$ Session s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_23 $$ s = openSession()-->Line_25 $$ List results = s.createQuery("select str(current_date), currentDate from EntityWithNoArgFunctionAsColumn").list()[ FD ]
Line_13 $$ EntityWithNoArgFunctionAsColumn e2 = new EntityWithNoArgFunctionAsColumn()-->Line_14 $$ e2.setCurrentDate("yadda yadda yadda")[ FD ]
Line_17 $$ EntityWithFunctionAsColumnHolder holder2 = new EntityWithFunctionAsColumnHolder()-->Line_18 $$ holder2.getEntityWithNoArgFunctionAsColumns().add(e2)[ FD ]
Line_5 $$ if (function == null || function.hasParenthesesIfNoArguments()) -->Line_6 $$ SkipLog.reportSkip("current_date reuires ()", "tests noarg function that does not require ()")[ CD ]
Line_9 $$ Session s = openSession()-->Line_23 $$ s = openSession()[ FD ]
Line_17 $$ EntityWithFunctionAsColumnHolder holder2 = new EntityWithFunctionAsColumnHolder()-->Line_19 $$ holder1.setNextHolder(holder2)[ FD ]
Line_15 $$ EntityWithFunctionAsColumnHolder holder1 = new EntityWithFunctionAsColumnHolder()-->Line_20 $$ s.save(holder1)[ FD ]
Line_13 $$ EntityWithNoArgFunctionAsColumn e2 = new EntityWithNoArgFunctionAsColumn()-->Line_30 $$ assertTrue(((Object[]) results.get(0))[1].equals(e1.getCurrentDate()) || ((Object[]) results.get(0))[1].equals(e2.getCurrentDate()))[ FD ]
Line_10 $$ Transaction t = s.beginTransaction()-->Line_24 $$ t = s.beginTransaction()[ FD ]
Line_25 $$ List results = s.createQuery("select str(current_date), currentDate from EntityWithNoArgFunctionAsColumn").list()-->Line_30 $$ assertTrue(((Object[]) results.get(0))[1].equals(e1.getCurrentDate()) || ((Object[]) results.get(0))[1].equals(e2.getCurrentDate()))[ FD ]
Line_9 $$ Session s = openSession()-->Line_24 $$ t = s.beginTransaction()[ FD ]
Line_9 $$ Session s = openSession()-->Line_25 $$ List results = s.createQuery("select str(current_date), currentDate from EntityWithNoArgFunctionAsColumn").list()[ FD ]
Line_11 $$ EntityWithNoArgFunctionAsColumn e1 = new EntityWithNoArgFunctionAsColumn()-->Line_12 $$ e1.setCurrentDate("blah blah blah")[ FD ]
Line_25 $$ List results = s.createQuery("select str(current_date), currentDate from EntityWithNoArgFunctionAsColumn").list()-->Line_31 $$ assertTrue(((Object[]) results.get(1))[1].equals(e1.getCurrentDate()) || ((Object[]) results.get(1))[1].equals(e2.getCurrentDate()))[ FD ]
Line_24 $$ t = s.beginTransaction()-->Line_33 $$ t.commit()[ FD ]
Line_9 $$ Session s = openSession()-->Line_20 $$ s.save(holder1)[ FD ]
Line_11 $$ EntityWithNoArgFunctionAsColumn e1 = new EntityWithNoArgFunctionAsColumn()-->Line_16 $$ holder1.getEntityWithNoArgFunctionAsColumns().add(e1)[ FD ]
Line_25 $$ List results = s.createQuery("select str(current_date), currentDate from EntityWithNoArgFunctionAsColumn").list()-->Line_26 $$ assertEquals(2, results.size())[ FD ]
Line_25 $$ List results = s.createQuery("select str(current_date), currentDate from EntityWithNoArgFunctionAsColumn").list()-->Line_27 $$ assertEquals(((Object[]) results.get(0))[0], ((Object[]) results.get(1))[0])[ FD ]
Line_9 $$ Session s = openSession()-->Line_22 $$ s.close()[ FD ]
Line_23 $$ s = openSession()-->Line_24 $$ t = s.beginTransaction()[ FD ]
Line_25 $$ List results = s.createQuery("select str(current_date), currentDate from EntityWithNoArgFunctionAsColumn").list()-->Line_32 $$ assertFalse(((Object[]) results.get(0))[1].equals(((Object[]) results.get(1))[1]))[ FD ]
Line_10 $$ Transaction t = s.beginTransaction()-->Line_33 $$ t.commit()[ FD ]
Line_23 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_4 $$ SQLFunction function = sessionFactory().getSqlFunctionRegistry().findSQLFunction("current_date")-->Line_5 $$ if (function == null || function.hasParenthesesIfNoArguments()) [ FD ]
Line_25 $$ List results = s.createQuery("select str(current_date), currentDate from EntityWithNoArgFunctionAsColumn").list()-->Line_28 $$ assertTrue(!((Object[]) results.get(0))[0].equals(((Object[]) results.get(0))[1]))[ FD ]
Line_10 $$ Transaction t = s.beginTransaction()-->Line_21 $$ t.commit()[ FD ]
Line_25 $$ List results = s.createQuery("select str(current_date), currentDate from EntityWithNoArgFunctionAsColumn").list()-->Line_29 $$ assertTrue(!((Object[]) results.get(1))[0].equals(((Object[]) results.get(1))[1]))[ FD ]
Line_9 $$ Session s = openSession()-->Line_10 $$ Transaction t = s.beginTransaction()[ FD ]
Line_11 $$ EntityWithNoArgFunctionAsColumn e1 = new EntityWithNoArgFunctionAsColumn()-->Line_31 $$ assertTrue(((Object[]) results.get(1))[1].equals(e1.getCurrentDate()) || ((Object[]) results.get(1))[1].equals(e2.getCurrentDate()))[ FD ]
Line_13 $$ EntityWithNoArgFunctionAsColumn e2 = new EntityWithNoArgFunctionAsColumn()-->Line_18 $$ holder2.getEntityWithNoArgFunctionAsColumns().add(e2)[ FD ]
Line_15 $$ EntityWithFunctionAsColumnHolder holder1 = new EntityWithFunctionAsColumnHolder()-->Line_19 $$ holder1.setNextHolder(holder2)[ FD ]
Line_5 $$ if (function == null || function.hasParenthesesIfNoArguments()) -->Line_7 $$ return[ CD ]
Line_11 $$ EntityWithNoArgFunctionAsColumn e1 = new EntityWithNoArgFunctionAsColumn()-->Line_30 $$ assertTrue(((Object[]) results.get(0))[1].equals(e1.getCurrentDate()) || ((Object[]) results.get(0))[1].equals(e2.getCurrentDate()))[ FD ]
Line_13 $$ EntityWithNoArgFunctionAsColumn e2 = new EntityWithNoArgFunctionAsColumn()-->Line_31 $$ assertTrue(((Object[]) results.get(1))[1].equals(e1.getCurrentDate()) || ((Object[]) results.get(1))[1].equals(e2.getCurrentDate()))[ FD ]
