Line_6 $$ Set<String> lines = ContainerUtil.newHashSet(StringUtil.convertLineSeparators(output).split("\n"))-->Line_9 $$ assertTrue("\"" + str + "\" should be in " + lines, lines.contains(str))[ FD ]
Line_7 $$ for (Map.Entry<String, String> entry : expectedOutputEnv.entrySet()) -->Line_8 $$ String str = CommandTestHelper.format(entry)[ FD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_20 $$ if (passParentEnv && pctMissed > 25 || !passParentEnv && pctMissed < 75) [ FD ]
Line_11 $$ Map<String, String> parentEnv = System.getenv()-->Line_13 $$ for (Map.Entry<String, String> entry : parentEnv.entrySet()) [ FD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_12 $$ List<String> missed = new ArrayList<String>()[ CD ]
Line_8 $$ String str = CommandTestHelper.format(entry)-->Line_9 $$ assertTrue("\"" + str + "\" should be in " + lines, lines.contains(str))[ FD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_3 $$ command.first.withEnvironment(testEnv)[ FD ]
Line_5 $$ String output = execHelper(command)-->Line_6 $$ Set<String> lines = ContainerUtil.newHashSet(StringUtil.convertLineSeparators(output).split("\n"))[ FD ]
Line_12 $$ List<String> missed = new ArrayList<String>()-->Line_19 $$ long pctMissed = Math.round((100.0 * missed.size()) / parentEnv.size())[ FD ]
Line_7 $$ for (Map.Entry<String, String> entry : expectedOutputEnv.entrySet()) -->Line_14 $$ String str = CommandTestHelper.format(entry)[ FD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_4 $$ command.first.withParentEnvironmentType(passParentEnv ? ParentEnvironmentType.SYSTEM : ParentEnvironmentType.NONE)[ CD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_7 $$ for (Map.Entry<String, String> entry : expectedOutputEnv.entrySet()) [ FD ]
Line_8 $$ String str = CommandTestHelper.format(entry)-->Line_15 $$ if (!lines.contains(str)) [ FD ]
Line_6 $$ Set<String> lines = ContainerUtil.newHashSet(StringUtil.convertLineSeparators(output).split("\n"))-->Line_15 $$ if (!lines.contains(str)) [ FD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_19 $$ long pctMissed = Math.round((100.0 * missed.size()) / parentEnv.size())[ CD ]
Line_11 $$ Map<String, String> parentEnv = System.getenv()-->Line_19 $$ long pctMissed = Math.round((100.0 * missed.size()) / parentEnv.size())[ FD ]
Line_20 $$ if (passParentEnv && pctMissed > 25 || !passParentEnv && pctMissed < 75) -->Line_21 $$ fail("% missed: " + pctMissed + ", missed: " + missed + ", passed: " + lines)[ CD ]
Line_12 $$ List<String> missed = new ArrayList<String>()-->Line_16 $$ missed.add(str)[ FD ]
Line_15 $$ if (!lines.contains(str)) -->Line_16 $$ missed.add(str)[ CD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_5 $$ String output = execHelper(command)[ CD ]
Line_8 $$ String str = CommandTestHelper.format(entry)-->Line_16 $$ missed.add(str)[ FD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_11 $$ Map<String, String> parentEnv = System.getenv()[ CD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_3 $$ command.first.withEnvironment(testEnv)[ CD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_20 $$ if (passParentEnv && pctMissed > 25 || !passParentEnv && pctMissed < 75) [ CD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_5 $$ String output = execHelper(command)[ FD ]
Line_2 $$ private static void checkEnvPassing(Pair<GeneralCommandLine, File> command, Map<String, String> testEnv, Map<String, String> expectedOutputEnv, boolean passParentEnv) throws ExecutionException, IOException -->Line_6 $$ Set<String> lines = ContainerUtil.newHashSet(StringUtil.convertLineSeparators(output).split("\n"))[ CD ]
