Line_2 $$ private void initTest() throws IOException -->Line_16 $$ File dir = mkdir("dir")[ CD ]
Line_33 $$ if (details.length > 2) -->Line_36 $$ parents = ArrayUtil.EMPTY_STRING_ARRAY[ CD ]
Line_16 $$ File dir = mkdir("dir")-->Line_17 $$ bfile = new File(dir.getPath(), "b.txt")[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_20 $$ assertTrue("File " + bfile + " was not created by mv command", bfile.exists())[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_18 $$ assertFalse("File " + bfile + " shouldn't have existed", bfile.exists())[ CD ]
Line_23 $$ for (int i = 0; i < 4; i++) -->Line_26 $$ commitIndex++[ CD ]
Line_23 $$ for (int i = 0; i < 4; i++) -->Line_30 $$ for (int i = revisions.length - 1, j = 0; i >= 0; i--, j++) [ FD ]
Line_32 $$ String[] parents-->Line_34 $$ parents = details[2].split(" ")[ FD ]
Line_38 $$ final GitTestRevision revision = new GitTestRevision(details[0], details[1], parents, commitMessages[i], USER_NAME, USER_EMAIL, USER_NAME, USER_EMAIL, null, contents[i])-->Line_39 $$ myRevisions.add(revision)[ FD ]
Line_30 $$ for (int i = revisions.length - 1, j = 0; i >= 0; i--, j++) -->Line_40 $$ if (i > RENAME_COMMIT_INDEX) [ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_22 $$ commitIndex++[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_44 $$ assertEquals(myRevisionsAfterRename.size(), 5)[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_45 $$ cd(myProjectPath)[ CD ]
Line_34 $$ parents = details[2].split(" ")-->Line_36 $$ parents = ArrayUtil.EMPTY_STRING_ARRAY[ FD ]
Line_9 $$ File afile = touch("a.txt", contents[commitIndex])-->Line_12 $$ overwrite(afile, contents[commitIndex])[ FD ]
Line_8 $$ int commitIndex = 0-->Line_15 $$ commitIndex++[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_13 $$ addCommit(commitMessages[commitIndex])[ CD ]
Line_8 $$ int commitIndex = 0-->Line_11 $$ commitIndex++[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_12 $$ overwrite(afile, contents[commitIndex])[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_30 $$ for (int i = revisions.length - 1, j = 0; i >= 0; i--, j++) [ CD ]
Line_23 $$ for (int i = 0; i < 4; i++) -->Line_40 $$ if (i > RENAME_COMMIT_INDEX) [ FD ]
Line_30 $$ for (int i = revisions.length - 1, j = 0; i >= 0; i--, j++) -->Line_39 $$ myRevisions.add(revision)[ CD ]
Line_30 $$ for (int i = revisions.length - 1, j = 0; i >= 0; i--, j++) -->Line_40 $$ if (i > RENAME_COMMIT_INDEX) [ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_19 $$ mv(afile, bfile)[ CD ]
Line_30 $$ for (int i = revisions.length - 1, j = 0; i >= 0; i--, j++) -->Line_32 $$ String[] parents[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_15 $$ commitIndex++[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_23 $$ for (int i = 0; i < 4; i++) [ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_5 $$ final String[] commitMessages = [ CD ]
Line_14 $$ int RENAME_COMMIT_INDEX = commitIndex-->Line_40 $$ if (i > RENAME_COMMIT_INDEX) [ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_9 $$ File afile = touch("a.txt", contents[commitIndex])[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_6 $$ final String[] contents = [ CD ]
Line_38 $$ final GitTestRevision revision = new GitTestRevision(details[0], details[1], parents, commitMessages[i], USER_NAME, USER_EMAIL, USER_NAME, USER_EMAIL, null, contents[i])-->Line_41 $$ myRevisionsAfterRename.add(revision)[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_8 $$ int commitIndex = 0[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_11 $$ commitIndex++[ CD ]
Line_9 $$ File afile = touch("a.txt", contents[commitIndex])-->Line_19 $$ mv(afile, bfile)[ FD ]
Line_30 $$ for (int i = revisions.length - 1, j = 0; i >= 0; i--, j++) -->Line_38 $$ final GitTestRevision revision = new GitTestRevision(details[0], details[1], parents, commitMessages[i], USER_NAME, USER_EMAIL, USER_NAME, USER_EMAIL, null, contents[i])[ CD ]
Line_8 $$ int commitIndex = 0-->Line_22 $$ commitIndex++[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_14 $$ int RENAME_COMMIT_INDEX = commitIndex[ CD ]
Line_40 $$ if (i > RENAME_COMMIT_INDEX) -->Line_41 $$ myRevisionsAfterRename.add(revision)[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_28 $$ String[] revisions = log("--pretty=format:%H#%at#%P", "-M").split("\n")[ CD ]
Line_30 $$ for (int i = revisions.length - 1, j = 0; i >= 0; i--, j++) -->Line_31 $$ String[] details = revisions[j].trim().split("#")[ CD ]
Line_33 $$ if (details.length > 2) -->Line_34 $$ parents = details[2].split(" ")[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_29 $$ assertEquals("Incorrect number of revisions", commitMessages.length, revisions.length)[ CD ]
Line_8 $$ int commitIndex = 0-->Line_26 $$ commitIndex++[ FD ]
Line_23 $$ for (int i = 0; i < 4; i++) -->Line_24 $$ overwrite(bfile, contents[commitIndex])[ CD ]
Line_32 $$ String[] parents-->Line_36 $$ parents = ArrayUtil.EMPTY_STRING_ARRAY[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_10 $$ addCommit(commitMessages[commitIndex])[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_21 $$ commit(commitMessages[commitIndex])[ CD ]
Line_23 $$ for (int i = 0; i < 4; i++) -->Line_25 $$ addCommit(commitMessages[commitIndex])[ CD ]
Line_30 $$ for (int i = revisions.length - 1, j = 0; i >= 0; i--, j++) -->Line_33 $$ if (details.length > 2) [ CD ]
