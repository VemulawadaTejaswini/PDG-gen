Line_13 $$ final List<?> list = (List<?>) result-->Line_14 $$ if (!list.isEmpty()) [ FD ]
Line_12 $$ if (result instanceof List<?>) -->Line_13 $$ final List<?> list = (List<?>) result[ CD ]
Line_13 $$ final List<?> list = (List<?>) result-->Line_22 $$ final String s = StringUtil.pluralize("match", list.size())[ FD ]
Line_13 $$ final List<?> list = (List<?>) result-->Line_23 $$ Messages.showInfoMessage(project, "Expression produced " + list.size() + " " + s, "XPath Result")[ FD ]
Line_3 $$ final Project project = editor.getProject()-->Line_23 $$ Messages.showInfoMessage(project, "Expression produced " + list.size() + " " + s, "XPath Result")[ FD ]
Line_14 $$ if (!list.isEmpty()) -->Line_26 $$ return Messages.showOkCancelDialog(project, "Sorry, your expression did not return any result", "XPath Result", "OK", "Edit Expression", Messages.getInformationIcon()) != Messages.OK[ CD ]
Line_13 $$ final List<?> list = (List<?>) result-->Line_16 $$ highlightResult(contextNode, editor, list)[ FD ]
Line_15 $$ if (cfg.HIGHLIGHT_RESULTS) -->Line_16 $$ highlightResult(contextNode, editor, list)[ CD ]
Line_32 $$ if (result instanceof Boolean) -->Line_33 $$ Messages.showMessageDialog(result.toString(), "XPath result (Boolean)", Messages.getInformationIcon())[ CD ]
Line_14 $$ if (!list.isEmpty()) -->Line_18 $$ if (cfg.SHOW_USAGE_VIEW) [ CD ]
Line_3 $$ final Project project = editor.getProject()-->Line_40 $$ return Messages.showOkCancelDialog(project, e.getMultilineMessage(), "XPath syntax error", "Edit Expression", "Cancel", Messages.getErrorIcon()) == Messages.OK[ FD ]
Line_28 $$ if (result instanceof String) -->Line_29 $$ Messages.showMessageDialog("'" + result.toString() + "'", "XPath result (String)", Messages.getInformationIcon())[ CD ]
Line_2 $$ private boolean evaluateExpression(EvalExpressionDialog.Context context, XmlElement contextNode, Editor editor, Config cfg) -->Line_19 $$ showUsageView(editor, xpath, contextNode, list)[ FD ]
Line_12 $$ if (result instanceof List<?>) -->Line_14 $$ if (!list.isEmpty()) [ CD ]
Line_32 $$ if (result instanceof Boolean) -->Line_35 $$ LOG.error("Unknown XPath result: " + result)[ CD ]
Line_3 $$ final Project project = editor.getProject()-->Line_43 $$ Messages.showMessageDialog(project, e.getMessage(), "XPath error", Messages.getErrorIcon())[ FD ]
Line_2 $$ private boolean evaluateExpression(EvalExpressionDialog.Context context, XmlElement contextNode, Editor editor, Config cfg) -->Line_3 $$ final Project project = editor.getProject()[ CD ]
Line_14 $$ if (!list.isEmpty()) -->Line_15 $$ if (cfg.HIGHLIGHT_RESULTS) [ CD ]
Line_2 $$ private boolean evaluateExpression(EvalExpressionDialog.Context context, XmlElement contextNode, Editor editor, Config cfg) -->Line_6 $$ final XPath xpath = support.createXPath((XmlFile) contextNode.getContainingFile(), context.input.expression, context.input.namespaces)[ FD ]
Line_14 $$ if (!list.isEmpty()) -->Line_21 $$ if (!cfg.SHOW_USAGE_VIEW && !cfg.HIGHLIGHT_RESULTS) [ CD ]
Line_30 $$ if (result instanceof Number) -->Line_31 $$ Messages.showMessageDialog(result.toString(), "XPath result (Number)", Messages.getInformationIcon())[ CD ]
Line_21 $$ if (!cfg.SHOW_USAGE_VIEW && !cfg.HIGHLIGHT_RESULTS) -->Line_23 $$ Messages.showInfoMessage(project, "Expression produced " + list.size() + " " + s, "XPath Result")[ CD ]
Line_2 $$ private boolean evaluateExpression(EvalExpressionDialog.Context context, XmlElement contextNode, Editor editor, Config cfg) -->Line_16 $$ highlightResult(contextNode, editor, list)[ FD ]
Line_5 $$ final XPathSupport support = XPathSupport.getInstance()-->Line_6 $$ final XPath xpath = support.createXPath((XmlFile) contextNode.getContainingFile(), context.input.expression, context.input.namespaces)[ FD ]
Line_13 $$ final List<?> list = (List<?>) result-->Line_19 $$ showUsageView(editor, xpath, contextNode, list)[ FD ]
Line_2 $$ private boolean evaluateExpression(EvalExpressionDialog.Context context, XmlElement contextNode, Editor editor, Config cfg) -->Line_15 $$ if (cfg.HIGHLIGHT_RESULTS) [ FD ]
Line_30 $$ if (result instanceof Number) -->Line_32 $$ if (result instanceof Boolean) [ CD ]
Line_21 $$ if (!cfg.SHOW_USAGE_VIEW && !cfg.HIGHLIGHT_RESULTS) -->Line_22 $$ final String s = StringUtil.pluralize("match", list.size())[ CD ]
Line_3 $$ final Project project = editor.getProject()-->Line_26 $$ return Messages.showOkCancelDialog(project, "Sorry, your expression did not return any result", "XPath Result", "OK", "Edit Expression", Messages.getInformationIcon()) != Messages.OK[ FD ]
Line_2 $$ private boolean evaluateExpression(EvalExpressionDialog.Context context, XmlElement contextNode, Editor editor, Config cfg) -->Line_18 $$ if (cfg.SHOW_USAGE_VIEW) [ FD ]
Line_28 $$ if (result instanceof String) -->Line_30 $$ if (result instanceof Number) [ CD ]
Line_18 $$ if (cfg.SHOW_USAGE_VIEW) -->Line_19 $$ showUsageView(editor, xpath, contextNode, list)[ CD ]
Line_6 $$ final XPath xpath = support.createXPath((XmlFile) contextNode.getContainingFile(), context.input.expression, context.input.namespaces)-->Line_19 $$ showUsageView(editor, xpath, contextNode, list)[ FD ]
Line_2 $$ private boolean evaluateExpression(EvalExpressionDialog.Context context, XmlElement contextNode, Editor editor, Config cfg) -->Line_45 $$ return false[ CD ]
Line_2 $$ private boolean evaluateExpression(EvalExpressionDialog.Context context, XmlElement contextNode, Editor editor, Config cfg) -->Line_3 $$ final Project project = editor.getProject()[ FD ]
Line_6 $$ final XPath xpath = support.createXPath((XmlFile) contextNode.getContainingFile(), context.input.expression, context.input.namespaces)-->Line_7 $$ xpath.setVariableContext(new CachedVariableContext(context.input.variables, xpath, contextNode))[ FD ]
Line_12 $$ if (result instanceof List<?>) -->Line_28 $$ if (result instanceof String) [ CD ]
