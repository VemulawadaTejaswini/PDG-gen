Line_3 $$ final PsiClass aClass = myFixture.addClass("package a; " + "import org.testng.annotations.DataProvider;\n" + "import org.testng.annotations.Test;\n" + "\n" + "import static org.testng.Assert.assertEquals;\n" + "\n" + "public class ATest -->Line_14 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)[ FD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_6 $$ final GlobalSearchScope projectScope = GlobalSearchScope.projectScope(getProject())[ CD ]
Line_7 $$ final SMTestProxy testProxy = new SMTestProxy("test", false, "java:test://a.ATest.test[0]")-->Line_9 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy)[ FD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_19 $$ assertContainsElements(paramsToRerun, "0", "1")[ CD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_3 $$ final PsiClass aClass = myFixture.addClass("package a; " + "import org.testng.annotations.DataProvider;\n" + "import org.testng.annotations.Test;\n" + "\n" + "import static org.testng.Assert.assertEquals;\n" + "\n" + "public class ATest [ CD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_12 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy2)[ CD ]
Line_15 $$ final PsiMethod[] tests = aClass.findMethodsByName("test", false)-->Line_16 $$ assertContainsElements(params.keySet(), tests)[ FD ]
Line_4 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()-->Line_13 $$ assertEquals(1, classes.size())[ FD ]
Line_10 $$ final SMTestProxy testProxy2 = new SMTestProxy("test", false, "java:test://a.ATest.test[1]")-->Line_11 $$ testProxy2.setLocator(new JavaTestLocator())[ FD ]
Line_7 $$ final SMTestProxy testProxy = new SMTestProxy("test", false, "java:test://a.ATest.test[0]")-->Line_8 $$ testProxy.setLocator(new JavaTestLocator())[ FD ]
Line_4 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()-->Line_12 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy2)[ FD ]
Line_3 $$ final PsiClass aClass = myFixture.addClass("package a; " + "import org.testng.annotations.DataProvider;\n" + "import org.testng.annotations.Test;\n" + "\n" + "import static org.testng.Assert.assertEquals;\n" + "\n" + "public class ATest -->Line_15 $$ final PsiMethod[] tests = aClass.findMethodsByName("test", false)[ FD ]
Line_4 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()-->Line_5 $$ classes.put(aClass, new HashMap<PsiMethod, List<String>>())[ FD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_8 $$ testProxy.setLocator(new JavaTestLocator())[ CD ]
Line_3 $$ final PsiClass aClass = myFixture.addClass("package a; " + "import org.testng.annotations.DataProvider;\n" + "import org.testng.annotations.Test;\n" + "\n" + "import static org.testng.Assert.assertEquals;\n" + "\n" + "public class ATest -->Line_5 $$ classes.put(aClass, new HashMap<PsiMethod, List<String>>())[ FD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_7 $$ final SMTestProxy testProxy = new SMTestProxy("test", false, "java:test://a.ATest.test[0]")[ CD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_9 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy)[ CD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_13 $$ assertEquals(1, classes.size())[ CD ]
Line_4 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()-->Line_14 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)[ FD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_4 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()[ CD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_18 $$ assertEquals(2, paramsToRerun.size())[ CD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_10 $$ final SMTestProxy testProxy2 = new SMTestProxy("test", false, "java:test://a.ATest.test[1]")[ CD ]
Line_17 $$ final List<String> paramsToRerun = params.get(tests[0])-->Line_19 $$ assertContainsElements(paramsToRerun, "0", "1")[ FD ]
Line_17 $$ final List<String> paramsToRerun = params.get(tests[0])-->Line_18 $$ assertEquals(2, paramsToRerun.size())[ FD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_5 $$ classes.put(aClass, new HashMap<PsiMethod, List<String>>())[ CD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_11 $$ testProxy2.setLocator(new JavaTestLocator())[ CD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_15 $$ final PsiMethod[] tests = aClass.findMethodsByName("test", false)[ CD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_16 $$ assertContainsElements(params.keySet(), tests)[ CD ]
Line_6 $$ final GlobalSearchScope projectScope = GlobalSearchScope.projectScope(getProject())-->Line_12 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy2)[ FD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_17 $$ final List<String> paramsToRerun = params.get(tests[0])[ CD ]
Line_14 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)-->Line_17 $$ final List<String> paramsToRerun = params.get(tests[0])[ FD ]
Line_6 $$ final GlobalSearchScope projectScope = GlobalSearchScope.projectScope(getProject())-->Line_9 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy)[ FD ]
Line_4 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()-->Line_9 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy)[ FD ]
Line_2 $$ public void testRerunFailedParameterized() throws Exception -->Line_14 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)[ CD ]
Line_10 $$ final SMTestProxy testProxy2 = new SMTestProxy("test", false, "java:test://a.ATest.test[1]")-->Line_12 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy2)[ FD ]
Line_14 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)-->Line_16 $$ assertContainsElements(params.keySet(), tests)[ FD ]
