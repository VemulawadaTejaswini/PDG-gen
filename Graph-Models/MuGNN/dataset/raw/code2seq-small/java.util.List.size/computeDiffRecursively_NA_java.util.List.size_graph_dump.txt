Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_6 $$ if (node.isDirectory()) [ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_6 $$ if (node.isDirectory()) [ CD ]
Line_6 $$ if (node.isDirectory()) -->Line_7 $$ final ChildrenDiff diff = new ChildrenDiff()[ CD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_13 $$ diffReport.addDirDiff(dir, relativePath, diff)[ FD ]
Line_22 $$ if (renameTargetPath != null) -->Line_23 $$ toProcess = true[ CD ]
Line_6 $$ if (node.isDirectory()) -->Line_8 $$ INodeDirectory dir = node.asDirectory()[ CD ]
Line_8 $$ INodeDirectory dir = node.asDirectory()-->Line_9 $$ DirectoryWithSnapshotFeature sf = dir.getDirectoryWithSnapshotFeature()[ FD ]
Line_8 $$ INodeDirectory dir = node.asDirectory()-->Line_16 $$ ReadOnlyList<INode> children = dir.getChildrenList(earlierSnapshot.getId())[ FD ]
Line_19 $$ boolean toProcess = diff.searchIndex(ListType.DELETED, name) < 0-->Line_20 $$ if (!toProcess && child instanceof INodeReference.WithName) [ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_5 $$ byte[][] relativePath = parentPath.toArray(new byte[parentPath.size()][])[ CD ]
Line_4 $$ final Snapshot laterSnapshot = diffReport.isFromEarlier() ? diffReport.getTo() : diffReport.getFrom()-->Line_21 $$ byte[][] renameTargetPath = findRenameTargetPath(snapshotRoot, (WithName) child, laterSnapshot == null ? Snapshot.CURRENT_STATE_ID : laterSnapshot.getId())[ FD ]
Line_10 $$ if (sf != null) -->Line_12 $$ if (change) [ CD ]
Line_4 $$ final Snapshot laterSnapshot = diffReport.isFromEarlier() ? diffReport.getTo() : diffReport.getFrom()-->Line_11 $$ boolean change = sf.computeDiffBetweenSnapshots(earlierSnapshot, laterSnapshot, diff, dir)[ FD ]
Line_5 $$ byte[][] relativePath = parentPath.toArray(new byte[parentPath.size()][])-->Line_37 $$ diffReport.addFileDiff(file, relativePath)[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_21 $$ byte[][] renameTargetPath = findRenameTargetPath(snapshotRoot, (WithName) child, laterSnapshot == null ? Snapshot.CURRENT_STATE_ID : laterSnapshot.getId())[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_3 $$ final Snapshot earlierSnapshot = diffReport.isFromEarlier() ? diffReport.getFrom() : diffReport.getTo()[ FD ]
Line_6 $$ if (node.isDirectory()) -->Line_10 $$ if (sf != null) [ CD ]
Line_21 $$ byte[][] renameTargetPath = findRenameTargetPath(snapshotRoot, (WithName) child, laterSnapshot == null ? Snapshot.CURRENT_STATE_ID : laterSnapshot.getId())-->Line_24 $$ diffReport.setRenameTarget(child.getId(), renameTargetPath)[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_8 $$ INodeDirectory dir = node.asDirectory()[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_3 $$ final Snapshot earlierSnapshot = diffReport.isFromEarlier() ? diffReport.getFrom() : diffReport.getTo()[ CD ]
Line_5 $$ byte[][] relativePath = parentPath.toArray(new byte[parentPath.size()][])-->Line_13 $$ diffReport.addDirDiff(dir, relativePath, diff)[ FD ]
Line_33 $$ if (node.isFile() && node.asFile().isWithSnapshot()) -->Line_34 $$ INodeFile file = node.asFile()[ CD ]
Line_6 $$ if (node.isDirectory()) -->Line_16 $$ ReadOnlyList<INode> children = dir.getChildrenList(earlierSnapshot.getId())[ CD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_33 $$ if (node.isFile() && node.asFile().isWithSnapshot()) [ FD ]
Line_19 $$ boolean toProcess = diff.searchIndex(ListType.DELETED, name) < 0-->Line_23 $$ toProcess = true[ FD ]
Line_34 $$ INodeFile file = node.asFile()-->Line_37 $$ diffReport.addFileDiff(file, relativePath)[ FD ]
Line_18 $$ final byte[] name = child.getLocalNameBytes()-->Line_19 $$ boolean toProcess = diff.searchIndex(ListType.DELETED, name) < 0[ FD ]
Line_27 $$ if (toProcess) -->Line_28 $$ parentPath.add(name)[ CD ]
Line_27 $$ if (toProcess) -->Line_29 $$ computeDiffRecursively(snapshotRoot, child, parentPath, diffReport)[ CD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_4 $$ final Snapshot laterSnapshot = diffReport.isFromEarlier() ? diffReport.getTo() : diffReport.getFrom()[ FD ]
Line_7 $$ final ChildrenDiff diff = new ChildrenDiff()-->Line_19 $$ boolean toProcess = diff.searchIndex(ListType.DELETED, name) < 0[ FD ]
Line_6 $$ if (node.isDirectory()) -->Line_9 $$ DirectoryWithSnapshotFeature sf = dir.getDirectoryWithSnapshotFeature()[ CD ]
Line_3 $$ final Snapshot earlierSnapshot = diffReport.isFromEarlier() ? diffReport.getFrom() : diffReport.getTo()-->Line_35 $$ boolean change = file.getFileWithSnapshotFeature().changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot)[ FD ]
Line_33 $$ if (node.isFile() && node.asFile().isWithSnapshot()) -->Line_35 $$ boolean change = file.getFileWithSnapshotFeature().changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot)[ CD ]
Line_8 $$ INodeDirectory dir = node.asDirectory()-->Line_11 $$ boolean change = sf.computeDiffBetweenSnapshots(earlierSnapshot, laterSnapshot, diff, dir)[ FD ]
Line_7 $$ final ChildrenDiff diff = new ChildrenDiff()-->Line_13 $$ diffReport.addDirDiff(dir, relativePath, diff)[ FD ]
Line_9 $$ DirectoryWithSnapshotFeature sf = dir.getDirectoryWithSnapshotFeature()-->Line_11 $$ boolean change = sf.computeDiffBetweenSnapshots(earlierSnapshot, laterSnapshot, diff, dir)[ FD ]
Line_17 $$ for (INode child : children) -->Line_29 $$ computeDiffRecursively(snapshotRoot, child, parentPath, diffReport)[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_37 $$ diffReport.addFileDiff(file, relativePath)[ FD ]
Line_10 $$ if (sf != null) -->Line_11 $$ boolean change = sf.computeDiffBetweenSnapshots(earlierSnapshot, laterSnapshot, diff, dir)[ CD ]
Line_3 $$ final Snapshot earlierSnapshot = diffReport.isFromEarlier() ? diffReport.getFrom() : diffReport.getTo()-->Line_16 $$ ReadOnlyList<INode> children = dir.getChildrenList(earlierSnapshot.getId())[ FD ]
Line_18 $$ final byte[] name = child.getLocalNameBytes()-->Line_28 $$ parentPath.add(name)[ FD ]
Line_20 $$ if (!toProcess && child instanceof INodeReference.WithName) -->Line_21 $$ byte[][] renameTargetPath = findRenameTargetPath(snapshotRoot, (WithName) child, laterSnapshot == null ? Snapshot.CURRENT_STATE_ID : laterSnapshot.getId())[ CD ]
Line_34 $$ INodeFile file = node.asFile()-->Line_35 $$ boolean change = file.getFileWithSnapshotFeature().changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot)[ FD ]
Line_36 $$ if (change) -->Line_37 $$ diffReport.addFileDiff(file, relativePath)[ CD ]
Line_9 $$ DirectoryWithSnapshotFeature sf = dir.getDirectoryWithSnapshotFeature()-->Line_10 $$ if (sf != null) [ FD ]
Line_8 $$ INodeDirectory dir = node.asDirectory()-->Line_13 $$ diffReport.addDirDiff(dir, relativePath, diff)[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_30 $$ parentPath.remove(parentPath.size() - 1)[ FD ]
Line_4 $$ final Snapshot laterSnapshot = diffReport.isFromEarlier() ? diffReport.getTo() : diffReport.getFrom()-->Line_35 $$ boolean change = file.getFileWithSnapshotFeature().changedBetweenSnapshots(file, earlierSnapshot, laterSnapshot)[ FD ]
Line_7 $$ final ChildrenDiff diff = new ChildrenDiff()-->Line_11 $$ boolean change = sf.computeDiffBetweenSnapshots(earlierSnapshot, laterSnapshot, diff, dir)[ FD ]
Line_6 $$ if (node.isDirectory()) -->Line_33 $$ if (node.isFile() && node.asFile().isWithSnapshot()) [ CD ]
Line_33 $$ if (node.isFile() && node.asFile().isWithSnapshot()) -->Line_36 $$ if (change) [ CD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_4 $$ final Snapshot laterSnapshot = diffReport.isFromEarlier() ? diffReport.getTo() : diffReport.getFrom()[ CD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_28 $$ parentPath.add(name)[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_34 $$ INodeFile file = node.asFile()[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_24 $$ diffReport.setRenameTarget(child.getId(), renameTargetPath)[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_5 $$ byte[][] relativePath = parentPath.toArray(new byte[parentPath.size()][])[ FD ]
Line_2 $$ private void computeDiffRecursively(final INodeDirectory snapshotRoot, INode node, List<byte[]> parentPath, SnapshotDiffInfo diffReport) -->Line_29 $$ computeDiffRecursively(snapshotRoot, child, parentPath, diffReport)[ FD ]
Line_3 $$ final Snapshot earlierSnapshot = diffReport.isFromEarlier() ? diffReport.getFrom() : diffReport.getTo()-->Line_11 $$ boolean change = sf.computeDiffBetweenSnapshots(earlierSnapshot, laterSnapshot, diff, dir)[ FD ]
Line_21 $$ byte[][] renameTargetPath = findRenameTargetPath(snapshotRoot, (WithName) child, laterSnapshot == null ? Snapshot.CURRENT_STATE_ID : laterSnapshot.getId())-->Line_22 $$ if (renameTargetPath != null) [ FD ]
Line_12 $$ if (change) -->Line_13 $$ diffReport.addDirDiff(dir, relativePath, diff)[ CD ]
Line_22 $$ if (renameTargetPath != null) -->Line_24 $$ diffReport.setRenameTarget(child.getId(), renameTargetPath)[ CD ]
Line_27 $$ if (toProcess) -->Line_30 $$ parentPath.remove(parentPath.size() - 1)[ CD ]
Line_17 $$ for (INode child : children) -->Line_24 $$ diffReport.setRenameTarget(child.getId(), renameTargetPath)[ FD ]
Line_17 $$ for (INode child : children) -->Line_18 $$ final byte[] name = child.getLocalNameBytes()[ FD ]
Line_20 $$ if (!toProcess && child instanceof INodeReference.WithName) -->Line_22 $$ if (renameTargetPath != null) [ CD ]
