Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_29 $$ List<String> g4 = groups.getGroups(user)[ CD ]
Line_6 $$ String user = UserGroupInformation.getCurrentUser().getUserName()-->Line_21 $$ List<String> g3 = groups.getGroups(user)[ FD ]
Line_9 $$ String[] str_groups = new String[g1.size()]-->Line_23 $$ System.out.println(Arrays.toString(str_groups))[ FD ]
Line_32 $$ for (int i = 0; i < g4.size(); i++) -->Line_33 $$ assertFalse("Should be different group ", g3.get(i).equals(g4.get(i)))[ CD ]
Line_5 $$ Groups groups = Groups.getUserToGroupsMappingService(config)-->Line_13 $$ List<String> g2 = groups.getGroups(user)[ FD ]
Line_16 $$ for (int i = 0; i < g2.size(); i++) -->Line_32 $$ for (int i = 0; i < g4.size(); i++) [ FD ]
Line_5 $$ Groups groups = Groups.getUserToGroupsMappingService(config)-->Line_21 $$ List<String> g3 = groups.getGroups(user)[ FD ]
Line_6 $$ String user = UserGroupInformation.getCurrentUser().getUserName()-->Line_13 $$ List<String> g2 = groups.getGroups(user)[ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_24 $$ for (int i = 0; i < g3.size(); i++) [ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_15 $$ System.out.println(Arrays.toString(str_groups))[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_32 $$ for (int i = 0; i < g4.size(); i++) [ CD ]
Line_6 $$ String user = UserGroupInformation.getCurrentUser().getUserName()-->Line_29 $$ List<String> g4 = groups.getGroups(user)[ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_13 $$ List<String> g2 = groups.getGroups(user)[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_23 $$ System.out.println(Arrays.toString(str_groups))[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_27 $$ Thread.sleep(groupRefreshTimeoutSec * 1100)[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_5 $$ Groups groups = Groups.getUserToGroupsMappingService(config)[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_11 $$ System.out.println(Arrays.toString(str_groups))[ CD ]
Line_9 $$ String[] str_groups = new String[g1.size()]-->Line_15 $$ System.out.println(Arrays.toString(str_groups))[ FD ]
Line_24 $$ for (int i = 0; i < g3.size(); i++) -->Line_32 $$ for (int i = 0; i < g4.size(); i++) [ FD ]
Line_8 $$ List<String> g1 = groups.getGroups(user)-->Line_9 $$ String[] str_groups = new String[g1.size()][ FD ]
Line_24 $$ for (int i = 0; i < g3.size(); i++) -->Line_33 $$ assertFalse("Should be different group ", g3.get(i).equals(g4.get(i)))[ FD ]
Line_29 $$ List<String> g4 = groups.getGroups(user)-->Line_33 $$ assertFalse("Should be different group ", g3.get(i).equals(g4.get(i)))[ FD ]
Line_29 $$ List<String> g4 = groups.getGroups(user)-->Line_30 $$ g4.toArray(str_groups)[ FD ]
Line_21 $$ List<String> g3 = groups.getGroups(user)-->Line_33 $$ assertFalse("Should be different group ", g3.get(i).equals(g4.get(i)))[ FD ]
Line_5 $$ Groups groups = Groups.getUserToGroupsMappingService(config)-->Line_8 $$ List<String> g1 = groups.getGroups(user)[ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_3 $$ DFSAdmin admin = new DFSAdmin(config)[ CD ]
Line_32 $$ for (int i = 0; i < g4.size(); i++) -->Line_33 $$ assertFalse("Should be different group ", g3.get(i).equals(g4.get(i)))[ FD ]
Line_16 $$ for (int i = 0; i < g2.size(); i++) -->Line_24 $$ for (int i = 0; i < g3.size(); i++) [ FD ]
Line_9 $$ String[] str_groups = new String[g1.size()]-->Line_14 $$ g2.toArray(str_groups)[ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_22 $$ g3.toArray(str_groups)[ CD ]
Line_21 $$ List<String> g3 = groups.getGroups(user)-->Line_24 $$ for (int i = 0; i < g3.size(); i++) [ FD ]
Line_9 $$ String[] str_groups = new String[g1.size()]-->Line_11 $$ System.out.println(Arrays.toString(str_groups))[ FD ]
Line_8 $$ List<String> g1 = groups.getGroups(user)-->Line_17 $$ assertEquals("Should be same group ", g1.get(i), g2.get(i))[ FD ]
Line_8 $$ List<String> g1 = groups.getGroups(user)-->Line_25 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ FD ]
Line_24 $$ for (int i = 0; i < g3.size(); i++) -->Line_25 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ CD ]
Line_13 $$ List<String> g2 = groups.getGroups(user)-->Line_17 $$ assertEquals("Should be same group ", g1.get(i), g2.get(i))[ FD ]
Line_5 $$ Groups groups = Groups.getUserToGroupsMappingService(config)-->Line_29 $$ List<String> g4 = groups.getGroups(user)[ FD ]
Line_9 $$ String[] str_groups = new String[g1.size()]-->Line_30 $$ g4.toArray(str_groups)[ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_7 $$ System.out.println("first attempt:")[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_28 $$ System.out.println("fourth attempt(after timeout), should be different:")[ CD ]
Line_13 $$ List<String> g2 = groups.getGroups(user)-->Line_14 $$ g2.toArray(str_groups)[ FD ]
Line_9 $$ String[] str_groups = new String[g1.size()]-->Line_22 $$ g3.toArray(str_groups)[ FD ]
Line_21 $$ List<String> g3 = groups.getGroups(user)-->Line_25 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ FD ]
Line_4 $$ String[] args = new String[] -->Line_19 $$ admin.run(args)[ FD ]
Line_29 $$ List<String> g4 = groups.getGroups(user)-->Line_32 $$ for (int i = 0; i < g4.size(); i++) [ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_21 $$ List<String> g3 = groups.getGroups(user)[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_9 $$ String[] str_groups = new String[g1.size()][ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_6 $$ String user = UserGroupInformation.getCurrentUser().getUserName()[ CD ]
Line_6 $$ String user = UserGroupInformation.getCurrentUser().getUserName()-->Line_8 $$ List<String> g1 = groups.getGroups(user)[ FD ]
Line_3 $$ DFSAdmin admin = new DFSAdmin(config)-->Line_19 $$ admin.run(args)[ FD ]
Line_9 $$ String[] str_groups = new String[g1.size()]-->Line_31 $$ System.out.println(Arrays.toString(str_groups))[ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_12 $$ System.out.println("second attempt, should be same:")[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_10 $$ g1.toArray(str_groups)[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_16 $$ for (int i = 0; i < g2.size(); i++) [ CD ]
Line_13 $$ List<String> g2 = groups.getGroups(user)-->Line_16 $$ for (int i = 0; i < g2.size(); i++) [ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_20 $$ System.out.println("third attempt(after refresh command), should be different:")[ CD ]
Line_16 $$ for (int i = 0; i < g2.size(); i++) -->Line_25 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ FD ]
Line_16 $$ for (int i = 0; i < g2.size(); i++) -->Line_33 $$ assertFalse("Should be different group ", g3.get(i).equals(g4.get(i)))[ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_8 $$ List<String> g1 = groups.getGroups(user)[ CD ]
Line_16 $$ for (int i = 0; i < g2.size(); i++) -->Line_17 $$ assertEquals("Should be same group ", g1.get(i), g2.get(i))[ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_19 $$ admin.run(args)[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_14 $$ g2.toArray(str_groups)[ CD ]
Line_16 $$ for (int i = 0; i < g2.size(); i++) -->Line_17 $$ assertEquals("Should be same group ", g1.get(i), g2.get(i))[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_30 $$ g4.toArray(str_groups)[ CD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_4 $$ String[] args = new String[] [ CD ]
Line_24 $$ for (int i = 0; i < g3.size(); i++) -->Line_25 $$ assertFalse("Should be different group: " + g1.get(i) + " and " + g3.get(i), g1.get(i).equals(g3.get(i)))[ FD ]
Line_9 $$ String[] str_groups = new String[g1.size()]-->Line_10 $$ g1.toArray(str_groups)[ FD ]
Line_21 $$ List<String> g3 = groups.getGroups(user)-->Line_22 $$ g3.toArray(str_groups)[ FD ]
Line_2 $$ public void testGroupMappingRefresh() throws Exception -->Line_31 $$ System.out.println(Arrays.toString(str_groups))[ CD ]
Line_8 $$ List<String> g1 = groups.getGroups(user)-->Line_10 $$ g1.toArray(str_groups)[ FD ]
