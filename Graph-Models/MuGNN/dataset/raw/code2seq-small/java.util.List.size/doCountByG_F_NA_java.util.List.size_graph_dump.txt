Line_2 $$ protected int doCountByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ Session session = null[ CD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_22 $$ if (itr.hasNext()) -->Line_23 $$ Long count = itr.next()[ CD ]
Line_2 $$ protected int doCountByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_21 $$ Iterator<Long> itr = q.iterate()-->Line_22 $$ if (itr.hasNext()) [ FD ]
Line_21 $$ Iterator<Long> itr = q.iterate()-->Line_23 $$ Long count = itr.next()[ FD ]
Line_23 $$ Long count = itr.next()-->Line_24 $$ if (count != null) [ FD ]
Line_8 $$ if (inlineSQLHelper) -->Line_9 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ CD ]
Line_2 $$ protected int doCountByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_16 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_12 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_14 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_14 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_16 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_18 $$ Long folderId = folderIds.get(i)-->Line_19 $$ qPos.add(folderId)[ FD ]
Line_2 $$ protected int doCountByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_9 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_24 $$ if (count != null) -->Line_25 $$ return count.intValue()[ CD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_12 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_17 $$ for (int i = 0; i < folderIds.size(); i++) -->Line_18 $$ Long folderId = folderIds.get(i)[ CD ]
Line_2 $$ protected int doCountByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)[ FD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_9 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))-->Line_12 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_15 $$ qPos.add(groupId)[ FD ]
Line_23 $$ Long count = itr.next()-->Line_25 $$ return count.intValue()[ FD ]
Line_5 $$ session = openSession()-->Line_12 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_3 $$ Session session = null-->Line_12 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_F, queryDefinition, "JournalArticle")-->Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_F, queryDefinition, "JournalArticle")-->Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_14 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_15 $$ qPos.add(groupId)[ FD ]
Line_2 $$ protected int doCountByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_17 $$ for (int i = 0; i < folderIds.size(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < folderIds.size(); i++) -->Line_18 $$ Long folderId = folderIds.get(i)[ FD ]
Line_5 $$ session = openSession()-->Line_32 $$ closeSession(session)[ FD ]
Line_17 $$ for (int i = 0; i < folderIds.size(); i++) -->Line_19 $$ qPos.add(folderId)[ CD ]
Line_9 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)-->Line_11 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_F, queryDefinition, "JournalArticle")-->Line_12 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_F, queryDefinition, "JournalArticle")-->Line_9 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_2 $$ protected int doCountByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_18 $$ Long folderId = folderIds.get(i)[ FD ]
Line_22 $$ if (itr.hasNext()) -->Line_24 $$ if (count != null) [ CD ]
Line_12 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_21 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_9 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)-->Line_12 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_12 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_13 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_14 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_19 $$ qPos.add(folderId)[ FD ]
Line_2 $$ protected int doCountByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_F, queryDefinition, "JournalArticle")[ FD ]
Line_3 $$ Session session = null-->Line_32 $$ closeSession(session)[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
