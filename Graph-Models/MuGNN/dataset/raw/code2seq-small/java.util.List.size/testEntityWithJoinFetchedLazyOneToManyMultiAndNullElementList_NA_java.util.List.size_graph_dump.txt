Line_40 $$ List resultList = (List) results-->Line_43 $$ assertSame(resultList.get(0), resultList.get(1))[ FD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyOneToManyMultiAndNullElementList() throws Exception -->Line_56 $$ runTest(hqlExecutorAliased, criteriaExecutorAliased1, checker, false)[ CD ]
Line_40 $$ List resultList = (List) results-->Line_47 $$ assertNotNull(((Student) resultList.get(2)).getAddresses())[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_55 $$ runTest(hqlExecutorUnaliased, criteriaExecutorUnaliased, checker, false)[ FD ]
Line_40 $$ List resultList = (List) results-->Line_45 $$ assertNotNull(((Student) resultList.get(0)).getAddresses())[ FD ]
Line_33 $$ HqlExecutor hqlExecutorAliased = new HqlExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ CD ]
Line_33 $$ HqlExecutor hqlExecutorAliased = new HqlExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_48 $$ if (areDynamicNonLazyAssociationsChecked()) [ CD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_40 $$ List resultList = (List) results-->Line_42 $$ assertEquals(yogiExpected, resultList.get(0))[ FD ]
Line_40 $$ List resultList = (List) results-->Line_41 $$ assertEquals(3, resultList.size())[ FD ]
Line_23 $$ CriteriaExecutor criteriaExecutorAliased3 = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_45 $$ assertNotNull(((Student) resultList.get(0)).getAddresses())[ CD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyOneToManyMultiAndNullElementList() throws Exception -->Line_55 $$ runTest(hqlExecutorUnaliased, criteriaExecutorUnaliased, checker, false)[ CD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyOneToManyMultiAndNullElementList() throws Exception -->Line_58 $$ runTest(null, criteriaExecutorAliased3, checker, false)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_48 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_50 $$ assertEquals(yogiExpected.getAddresses(), ((Student) resultList.get(0)).getAddresses())[ CD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_28 $$ CriteriaExecutor criteriaExecutorAliased4 = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_40 $$ List resultList = (List) results[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_35 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("from Student s left join fetch s.addresses order by s.studentNumber")[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_41 $$ assertEquals(3, resultList.size())[ CD ]
Line_48 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_51 $$ assertTrue(((Student) resultList.get(2)).getAddresses().isEmpty())[ CD ]
Line_40 $$ List resultList = (List) results-->Line_51 $$ assertTrue(((Student) resultList.get(2)).getAddresses().isEmpty())[ FD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student s left join fetch s.addresses order by s.studentNumber")[ CD ]
Line_23 $$ CriteriaExecutor criteriaExecutorAliased3 = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_46 $$ assertNotNull(((Student) resultList.get(1)).getAddresses())[ CD ]
Line_40 $$ List resultList = (List) results-->Line_49 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(0)).getAddresses()))[ FD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyOneToManyMultiAndNullElementList() throws Exception -->Line_59 $$ runTest(null, criteriaExecutorAliased4, checker, false)[ CD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_23 $$ CriteriaExecutor criteriaExecutorAliased3 = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student s left join fetch s.addresses order by s.studentNumber")[ FD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_20 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_48 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_49 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(0)).getAddresses()))[ CD ]
Line_40 $$ List resultList = (List) results-->Line_50 $$ assertEquals(yogiExpected.getAddresses(), ((Student) resultList.get(0)).getAddresses())[ FD ]
Line_40 $$ List resultList = (List) results-->Line_44 $$ assertEquals(shermanExpected, resultList.get(2))[ FD ]
Line_23 $$ CriteriaExecutor criteriaExecutorAliased3 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_47 $$ assertNotNull(((Student) resultList.get(2)).getAddresses())[ CD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyOneToManyMultiAndNullElementList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() [ CD ]
Line_28 $$ CriteriaExecutor criteriaExecutorAliased4 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_40 $$ List resultList = (List) results-->Line_46 $$ assertNotNull(((Student) resultList.get(1)).getAddresses())[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_8 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_44 $$ assertEquals(shermanExpected, resultList.get(2))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_25 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("addresses", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_43 $$ assertSame(resultList.get(0), resultList.get(1))[ CD ]
Line_28 $$ CriteriaExecutor criteriaExecutorAliased4 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_18 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_30 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).setFetchMode("a", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyOneToManyMultiAndNullElementList() throws Exception -->Line_57 $$ runTest(null, criteriaExecutorAliased2, checker, false)[ CD ]
Line_38 $$ ResultChecker checker = new ResultChecker() -->Line_42 $$ assertEquals(yogiExpected, resultList.get(0))[ CD ]
