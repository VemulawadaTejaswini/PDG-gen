Line_26 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_50 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_33 $$ CriteriaExecutor criteriaExecutorAliased3 = new CriteriaExecutor() -->Line_50 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_47 $$ HqlExecutor hqlExecutorAliased = new HqlExecutor() -->Line_50 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ CD ]
Line_12 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_50 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_53 $$ ResultChecker checker = new ResultChecker() -->Line_56 $$ List resultList = (List) results[ CD ]
Line_64 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_66 $$ assertEquals(yogiExpected.getAddresses(), ((Student) resultList.get(0)).getAddresses())[ CD ]
Line_53 $$ ResultChecker checker = new ResultChecker() -->Line_62 $$ assertNotNull(((Student) resultList.get(1)).getAddresses())[ CD ]
Line_64 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_65 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(0)).getAddresses()))[ CD ]
Line_53 $$ ResultChecker checker = new ResultChecker() -->Line_58 $$ assertEquals(yogiExpected, resultList.get(0))[ CD ]
Line_56 $$ List resultList = (List) results-->Line_58 $$ assertEquals(yogiExpected, resultList.get(0))[ FD ]
Line_53 $$ ResultChecker checker = new ResultChecker() -->Line_57 $$ assertEquals(3, resultList.size())[ CD ]
Line_40 $$ CriteriaExecutor criteriaExecutorAliased4 = new CriteriaExecutor() -->Line_50 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_12 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_15 $$ return s.createQuery("from Student s left join fetch s.addresses order by s.studentNumber")[ CD ]
Line_53 $$ ResultChecker checker = new ResultChecker() -->Line_61 $$ assertNotNull(((Student) resultList.get(0)).getAddresses())[ CD ]
Line_56 $$ List resultList = (List) results-->Line_62 $$ assertNotNull(((Student) resultList.get(1)).getAddresses())[ FD ]
Line_56 $$ List resultList = (List) results-->Line_67 $$ assertTrue(((Student) resultList.get(2)).getAddresses().isEmpty())[ FD ]
Line_56 $$ List resultList = (List) results-->Line_65 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(0)).getAddresses()))[ FD ]
Line_56 $$ List resultList = (List) results-->Line_60 $$ assertEquals(shermanExpected, resultList.get(2))[ FD ]
Line_53 $$ ResultChecker checker = new ResultChecker() -->Line_60 $$ assertEquals(shermanExpected, resultList.get(2))[ CD ]
Line_64 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_67 $$ assertTrue(((Student) resultList.get(2)).getAddresses().isEmpty())[ CD ]
Line_56 $$ List resultList = (List) results-->Line_59 $$ assertSame(resultList.get(0), resultList.get(1))[ FD ]
Line_53 $$ ResultChecker checker = new ResultChecker() -->Line_59 $$ assertSame(resultList.get(0), resultList.get(1))[ CD ]
Line_47 $$ HqlExecutor hqlExecutorAliased = new HqlExecutor() -->Line_50 $$ return s.createQuery("from Student s left join fetch s.addresses a order by s.studentNumber")[ FD ]
Line_56 $$ List resultList = (List) results-->Line_57 $$ assertEquals(3, resultList.size())[ FD ]
Line_56 $$ List resultList = (List) results-->Line_61 $$ assertNotNull(((Student) resultList.get(0)).getAddresses())[ FD ]
Line_53 $$ ResultChecker checker = new ResultChecker() -->Line_63 $$ assertNotNull(((Student) resultList.get(2)).getAddresses())[ CD ]
Line_12 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_15 $$ return s.createQuery("from Student s left join fetch s.addresses order by s.studentNumber")[ FD ]
Line_56 $$ List resultList = (List) results-->Line_66 $$ assertEquals(yogiExpected.getAddresses(), ((Student) resultList.get(0)).getAddresses())[ FD ]
Line_56 $$ List resultList = (List) results-->Line_63 $$ assertNotNull(((Student) resultList.get(2)).getAddresses())[ FD ]
Line_53 $$ ResultChecker checker = new ResultChecker() -->Line_64 $$ if (areDynamicNonLazyAssociationsChecked()) [ CD ]
