Line_2 $$ public <E> TimingResult<E> snap(Callable<E> call) throws InterruptedException -->Line_8 $$ final CountDownLatch ready = new CountDownLatch(timerCount)[ CD ]
Line_8 $$ final CountDownLatch ready = new CountDownLatch(timerCount)-->Line_12 $$ timer.requestReport(ready)[ FD ]
Line_2 $$ public <E> TimingResult<E> snap(Callable<E> call) throws InterruptedException -->Line_41 $$ return new TimingResult(extra, result)[ CD ]
Line_31 $$ List<TimingInterval> operationIntervals = new ArrayList()-->Line_33 $$ operationIntervals.add(timer.report)[ FD ]
Line_30 $$ for (Map.Entry<String, List<Timer>> entry : timers.entrySet()) -->Line_36 $$ intervals.put(entry.getKey(), TimingInterval.merge(operationIntervals, reportSampleCount, history.get(entry.getKey()).endNanos()))[ FD ]
Line_2 $$ public <E> TimingResult<E> snap(Callable<E> call) throws InterruptedException -->Line_38 $$ TimingIntervals result = new TimingIntervals(intervals)[ CD ]
Line_2 $$ public <E> TimingResult<E> snap(Callable<E> call) throws InterruptedException -->Line_39 $$ this.done = done[ CD ]
Line_2 $$ public <E> TimingResult<E> snap(Callable<E> call) throws InterruptedException -->Line_17 $$ extra = call.call()[ FD ]
Line_5 $$ for (List<Timer> timersForOperation : timers.values()) -->Line_6 $$ timerCount += timersForOperation.size()[ FD ]
Line_38 $$ TimingIntervals result = new TimingIntervals(intervals)-->Line_40 $$ history = history.merge(result, historySampleCount, history.startNanos())[ FD ]
Line_34 $$ done &= !timer.running()-->Line_39 $$ this.done = done[ FD ]
Line_30 $$ for (Map.Entry<String, List<Timer>> entry : timers.entrySet()) -->Line_32 $$ for (Timer timer : entry.getValue()) [ FD ]
Line_2 $$ public <E> TimingResult<E> snap(Callable<E> call) throws InterruptedException -->Line_40 $$ history = history.merge(result, historySampleCount, history.startNanos())[ CD ]
Line_2 $$ public <E> TimingResult<E> snap(Callable<E> call) throws InterruptedException -->Line_27 $$ boolean done = true[ CD ]
Line_11 $$ for (Timer timer : timersForOperation) -->Line_12 $$ timer.requestReport(ready)[ FD ]
Line_2 $$ public <E> TimingResult<E> snap(Callable<E> call) throws InterruptedException -->Line_15 $$ E extra[ CD ]
Line_31 $$ List<TimingInterval> operationIntervals = new ArrayList()-->Line_36 $$ intervals.put(entry.getKey(), TimingInterval.merge(operationIntervals, reportSampleCount, history.get(entry.getKey()).endNanos()))[ FD ]
Line_15 $$ E extra-->Line_17 $$ extra = call.call()[ FD ]
Line_27 $$ boolean done = true-->Line_34 $$ done &= !timer.running()[ FD ]
Line_27 $$ boolean done = true-->Line_39 $$ this.done = done[ FD ]
Line_11 $$ for (Timer timer : timersForOperation) -->Line_34 $$ done &= !timer.running()[ FD ]
