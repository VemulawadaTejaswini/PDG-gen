Line_15 $$ List<String> runBuildURLs = new ArrayList()-->Line_32 $$ sb.append(runBuildURLs.size())[ FD ]
Line_4 $$ String buildURL = project.getProperty("build.url")-->Line_61 $$ sb.append(FailureMessageUtil.getFailureMessage(project, buildURL))[ FD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_51 $$ sb.append(JenkinsResultsParserUtil.fixJSON(failureJSONObject.getString("fullDisplayName")))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ sb.append(" Test")[ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_53 $$ sb.append(FailureMessageUtil.getFailureMessage(project, failureBuildURL))[ FD ]
Line_69 $$ String javacOutputFileContent = JenkinsResultsParserUtil.read(javacOutputFile)-->Line_71 $$ javacOutputFileContent = javacOutputFileContent.substring(javacOutputFileContent.length() - 5000)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_41 $$ sb.append("s")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_37 $$ sb.append(" Passed.<br />")[ FD ]
Line_46 $$ String failureBuildURL = failureBuildURLs.get(i)-->Line_53 $$ sb.append(FailureMessageUtil.getFailureMessage(project, failureBuildURL))[ FD ]
Line_34 $$ if (runBuildURLs.size() != 1) -->Line_35 $$ sb.append("s")[ CD ]
Line_65 $$ if (javacOutputFile.exists()) -->Line_73 $$ sb.append(JenkinsResultsParserUtil.fixJSON(javacOutputFileContent))[ CD ]
Line_16 $$ List<String> failureBuildURLs = new ArrayList()-->Line_26 $$ failureBuildURLs.add(runBuildURL)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append(runBuildURLs.size())[ FD ]
Line_14 $$ JSONArray runsJSONArray = jsonObject.getJSONArray("runs")-->Line_18 $$ JSONObject runsJSONObject = runsJSONArray.getJSONObject(i)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_76 $$ project.setProperty("report.html.content", sb.toString())[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ sb.append("s")[ FD ]
Line_25 $$ if (!runBuildURLResult.equals("SUCCESS")) -->Line_26 $$ failureBuildURLs.add(runBuildURL)[ CD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_24 $$ String runBuildURLResult = runBuildURLJSONObject.getString("result")[ CD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_4 $$ String buildURL = project.getProperty("build.url")[ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_9 $$ String result = jsonObject.getString("result")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_52 $$ sb.append("</a></strong>")[ FD ]
Line_8 $$ File javacOutputFile = new File(topLevelSharedDir + "/javac.output.txt")-->Line_65 $$ if (javacOutputFile.exists()) [ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_8 $$ File javacOutputFile = new File(topLevelSharedDir + "/javac.output.txt")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_54 $$ sb.append("</li>")[ FD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_16 $$ List<String> failureBuildURLs = new ArrayList()[ CD ]
Line_23 $$ JSONObject runBuildURLJSONObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(runBuildURL + "api/json"))-->Line_24 $$ String runBuildURLResult = runBuildURLJSONObject.getString("result")[ FD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_37 $$ sb.append(" Passed.<br />")[ CD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_46 $$ String failureBuildURL = failureBuildURLs.get(i)[ CD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_48 $$ sb.append("<li><strong><a href=\\\"")[ CD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_15 $$ List<String> runBuildURLs = new ArrayList()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_64 $$ sb.append(UnstableMessageUtil.getUnstableMessage(buildURL))[ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_10 $$ if (result.equals("ABORTED")) [ CD ]
Line_16 $$ List<String> failureBuildURLs = new ArrayList()-->Line_40 $$ if (failureBuildURLs.size() != 1) [ FD ]
Line_65 $$ if (javacOutputFile.exists()) -->Line_68 $$ sb.append("<pre>")[ CD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_18 $$ JSONObject runsJSONObject = runsJSONArray.getJSONObject(i)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_44 $$ sb.append("<ol>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_38 $$ sb.append(failureBuildURLs.size())[ FD ]
Line_14 $$ JSONArray runsJSONArray = jsonObject.getJSONArray("runs")-->Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_19 $$ String runBuildURL = runsJSONObject.getString("url")[ CD ]
Line_9 $$ String result = jsonObject.getString("result")-->Line_63 $$ if (result.equals("UNSTABLE")) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_48 $$ sb.append("<li><strong><a href=\\\"")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_51 $$ sb.append(JenkinsResultsParserUtil.fixJSON(failureJSONObject.getString("fullDisplayName")))[ FD ]
Line_8 $$ File javacOutputFile = new File(topLevelSharedDir + "/javac.output.txt")-->Line_69 $$ String javacOutputFileContent = JenkinsResultsParserUtil.read(javacOutputFile)[ FD ]
Line_65 $$ if (javacOutputFile.exists()) -->Line_70 $$ if (javacOutputFileContent.length() > 5000) [ CD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_38 $$ sb.append(failureBuildURLs.size())[ CD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_33 $$ sb.append(" Test")[ CD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_7 $$ topLevelSharedDir = topLevelSharedDir.replace("$[ CD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_61 $$ sb.append(FailureMessageUtil.getFailureMessage(project, buildURL))[ CD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) [ CD ]
Line_9 $$ String result = jsonObject.getString("result")-->Line_10 $$ if (result.equals("ABORTED")) [ FD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_32 $$ sb.append(runBuildURLs.size())[ CD ]
Line_4 $$ String buildURL = project.getProperty("build.url")-->Line_64 $$ sb.append(UnstableMessageUtil.getUnstableMessage(buildURL))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_66 $$ sb.append("<h6>Job Results:</h6>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_49 $$ sb.append(failureBuildURL)[ FD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_54 $$ sb.append("</li>")[ CD ]
Line_63 $$ if (result.equals("UNSTABLE")) -->Line_65 $$ if (javacOutputFile.exists()) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ sb.append("<h6>Job Results:</h6>")[ FD ]
Line_63 $$ if (result.equals("UNSTABLE")) -->Line_64 $$ sb.append(UnstableMessageUtil.getUnstableMessage(buildURL))[ CD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_43 $$ sb.append(" Failed.</p>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append("<p>")[ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_6 $$ String topLevelSharedDir = project.getProperty("top.level.shared.dir")[ FD ]
Line_71 $$ javacOutputFileContent = javacOutputFileContent.substring(javacOutputFileContent.length() - 5000)-->Line_73 $$ sb.append(JenkinsResultsParserUtil.fixJSON(javacOutputFileContent))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_59 $$ sb.append("</ol>")[ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_61 $$ sb.append(FailureMessageUtil.getFailureMessage(project, buildURL))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_61 $$ sb.append(FailureMessageUtil.getFailureMessage(project, buildURL))[ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_4 $$ String buildURL = project.getProperty("build.url")[ CD ]
Line_12 $$ if (result.equals("FAILURE")) -->Line_63 $$ if (result.equals("UNSTABLE")) [ CD ]
Line_10 $$ if (result.equals("ABORTED")) -->Line_12 $$ if (result.equals("FAILURE")) [ CD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_52 $$ sb.append("</a></strong>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_67 $$ sb.append("<p>0 Tests Passed.<br />1 Test Failed.</p>")[ FD ]
Line_15 $$ List<String> runBuildURLs = new ArrayList()-->Line_34 $$ if (runBuildURLs.size() != 1) [ FD ]
Line_40 $$ if (failureBuildURLs.size() != 1) -->Line_41 $$ sb.append("s")[ CD ]
Line_5 $$ JSONObject jsonObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(buildURL + "api/json"))-->Line_14 $$ JSONArray runsJSONArray = jsonObject.getJSONArray("runs")[ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_14 $$ JSONArray runsJSONArray = jsonObject.getJSONArray("runs")[ CD ]
Line_19 $$ String runBuildURL = runsJSONObject.getString("url")-->Line_26 $$ failureBuildURLs.add(runBuildURL)[ FD ]
Line_19 $$ String runBuildURL = runsJSONObject.getString("url")-->Line_20 $$ if (!runBuildURL.endsWith("/" + jsonObject.get("number") + "/")) [ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_76 $$ project.setProperty("report.html.content", sb.toString())[ CD ]
Line_5 $$ JSONObject jsonObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(buildURL + "api/json"))-->Line_9 $$ String result = jsonObject.getString("result")[ FD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_39 $$ sb.append(" Test")[ CD ]
Line_5 $$ JSONObject jsonObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(buildURL + "api/json"))-->Line_13 $$ if (jsonObject.has("runs")) [ FD ]
Line_46 $$ String failureBuildURL = failureBuildURLs.get(i)-->Line_49 $$ sb.append(failureBuildURL)[ FD ]
Line_65 $$ if (javacOutputFile.exists()) -->Line_74 $$ sb.append("</pre>")[ CD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_47 $$ JSONObject failureJSONObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(failureBuildURL + "api/json"))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append("<pre>Build was aborted</pre>")[ FD ]
Line_16 $$ List<String> failureBuildURLs = new ArrayList()-->Line_46 $$ String failureBuildURL = failureBuildURLs.get(i)[ FD ]
Line_65 $$ if (javacOutputFile.exists()) -->Line_69 $$ String javacOutputFileContent = JenkinsResultsParserUtil.read(javacOutputFile)[ CD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_55 $$ if (i >= 2) [ FD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_23 $$ JSONObject runBuildURLJSONObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(runBuildURL + "api/json"))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_53 $$ sb.append(FailureMessageUtil.getFailureMessage(project, failureBuildURL))[ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_6 $$ String topLevelSharedDir = project.getProperty("top.level.shared.dir")[ CD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_59 $$ sb.append("</ol>")[ CD ]
Line_5 $$ JSONObject jsonObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(buildURL + "api/json"))-->Line_20 $$ if (!runBuildURL.endsWith("/" + jsonObject.get("number") + "/")) [ FD ]
Line_47 $$ JSONObject failureJSONObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(failureBuildURL + "api/json"))-->Line_51 $$ sb.append(JenkinsResultsParserUtil.fixJSON(failureJSONObject.getString("fullDisplayName")))[ FD ]
Line_69 $$ String javacOutputFileContent = JenkinsResultsParserUtil.read(javacOutputFile)-->Line_73 $$ sb.append(JenkinsResultsParserUtil.fixJSON(javacOutputFileContent))[ FD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_50 $$ sb.append("\\\">")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_50 $$ sb.append("\\\">")[ FD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_40 $$ if (failureBuildURLs.size() != 1) [ CD ]
Line_16 $$ List<String> failureBuildURLs = new ArrayList()-->Line_38 $$ sb.append(failureBuildURLs.size())[ FD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_25 $$ if (!runBuildURLResult.equals("SUCCESS")) [ CD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_30 $$ sb.append("<h6>Job Results:</h6>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_73 $$ sb.append(JenkinsResultsParserUtil.fixJSON(javacOutputFileContent))[ FD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) [ FD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_49 $$ sb.append(failureBuildURL)[ CD ]
Line_70 $$ if (javacOutputFileContent.length() > 5000) -->Line_71 $$ javacOutputFileContent = javacOutputFileContent.substring(javacOutputFileContent.length() - 5000)[ CD ]
Line_18 $$ JSONObject runsJSONObject = runsJSONArray.getJSONObject(i)-->Line_19 $$ String runBuildURL = runsJSONObject.getString("url")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_43 $$ sb.append(" Failed.</p>")[ FD ]
Line_65 $$ if (javacOutputFile.exists()) -->Line_66 $$ sb.append("<h6>Job Results:</h6>")[ CD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_20 $$ if (!runBuildURL.endsWith("/" + jsonObject.get("number") + "/")) [ CD ]
Line_19 $$ String runBuildURL = runsJSONObject.getString("url")-->Line_28 $$ runBuildURLs.add(runBuildURL)[ FD ]
Line_24 $$ String runBuildURLResult = runBuildURLJSONObject.getString("result")-->Line_25 $$ if (!runBuildURLResult.equals("SUCCESS")) [ FD ]
Line_6 $$ String topLevelSharedDir = project.getProperty("top.level.shared.dir")-->Line_7 $$ topLevelSharedDir = topLevelSharedDir.replace("$[ FD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_28 $$ runBuildURLs.add(runBuildURL)[ CD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_76 $$ project.setProperty("report.html.content", sb.toString())[ FD ]
Line_2 $$ public static void getGitHubJobMessage(Project project) throws Exception -->Line_5 $$ JSONObject jsonObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(buildURL + "api/json"))[ CD ]
Line_69 $$ String javacOutputFileContent = JenkinsResultsParserUtil.read(javacOutputFile)-->Line_70 $$ if (javacOutputFileContent.length() > 5000) [ FD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) [ CD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_55 $$ if (i >= 2) [ CD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_18 $$ JSONObject runsJSONObject = runsJSONArray.getJSONObject(i)[ FD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_55 $$ if (i >= 2) [ FD ]
Line_12 $$ if (result.equals("FAILURE")) -->Line_13 $$ if (jsonObject.has("runs")) [ CD ]
Line_65 $$ if (javacOutputFile.exists()) -->Line_67 $$ sb.append("<p>0 Tests Passed.<br />1 Test Failed.</p>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_74 $$ sb.append("</pre>")[ FD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_53 $$ sb.append(FailureMessageUtil.getFailureMessage(project, failureBuildURL))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_39 $$ sb.append(" Test")[ FD ]
Line_15 $$ List<String> runBuildURLs = new ArrayList()-->Line_28 $$ runBuildURLs.add(runBuildURL)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_68 $$ sb.append("<pre>")[ FD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_34 $$ if (runBuildURLs.size() != 1) [ CD ]
Line_9 $$ String result = jsonObject.getString("result")-->Line_12 $$ if (result.equals("FAILURE")) [ FD ]
Line_10 $$ if (result.equals("ABORTED")) -->Line_11 $$ sb.append("<pre>Build was aborted</pre>")[ CD ]
Line_16 $$ List<String> failureBuildURLs = new ArrayList()-->Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) [ FD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_44 $$ sb.append("<ol>")[ CD ]
Line_45 $$ for (int i = 0; i < failureBuildURLs.size(); i++) -->Line_46 $$ String failureBuildURL = failureBuildURLs.get(i)[ FD ]
Line_17 $$ for (int i = 0; i < runsJSONArray.length(); i++) -->Line_46 $$ String failureBuildURL = failureBuildURLs.get(i)[ FD ]
Line_13 $$ if (jsonObject.has("runs")) -->Line_31 $$ sb.append("<p>")[ CD ]
