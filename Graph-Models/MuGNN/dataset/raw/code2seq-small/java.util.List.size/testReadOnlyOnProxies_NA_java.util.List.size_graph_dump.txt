Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_25 $$ assertTrue("was not initialized during mod", Hibernate.isInitialized(dp))[ FD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ s.setCacheMode(CacheMode.IGNORE)[ FD ]
Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_24 $$ dp.setDescription("changed")[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ assertTrue(s.isDefaultReadOnly())[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_21 $$ assertFalse("was initialized", Hibernate.isInitialized(dp))[ FD ]
Line_30 $$ s = openSession()-->Line_32 $$ List list = s.createQuery("from DataPoint where description = 'changed'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ s.flush()[ FD ]
Line_14 $$ s = openSession()-->Line_34 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_14 $$ s = openSession()-->Line_36 $$ s.close()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_27 $$ s.flush()[ CD ]
Line_14 $$ s = openSession()-->Line_17 $$ s.setDefaultReadOnly(true)[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_35 $$ s.getTransaction().commit()[ CD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_23 $$ assertFalse("was initialized during isReadOnly", Hibernate.isInitialized(dp))[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_30 $$ s = openSession()[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_26 $$ assertEquals("desc not changed in memory", "changed", dp.getDescription())[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_32 $$ List list = s.createQuery("from DataPoint where description = 'changed'").list()[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_36 $$ s.close()[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_15 $$ s.setCacheMode(CacheMode.IGNORE)[ CD ]
Line_30 $$ s = openSession()-->Line_35 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_13 $$ s.close()[ CD ]
Line_14 $$ s = openSession()-->Line_16 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ assertTrue(s.isReadOnly(dp))[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_9 $$ dp.setDescription("original")[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_4 $$ s.setCacheMode(CacheMode.IGNORE)[ CD ]
Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_22 $$ assertTrue(s.isReadOnly(dp))[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_20 $$ s.setDefaultReadOnly(false)[ CD ]
Line_14 $$ s = openSession()-->Line_27 $$ s.flush()[ FD ]
Line_14 $$ s = openSession()-->Line_28 $$ s.getTransaction().commit()[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_11 $$ long dpId = dp.getId()[ FD ]
Line_14 $$ s = openSession()-->Line_30 $$ s = openSession()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_28 $$ s.getTransaction().commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ s.close()[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_26 $$ assertEquals("desc not changed in memory", "changed", dp.getDescription())[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_33 $$ assertEquals("change written to database", 0, list.size())[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_11 $$ long dpId = dp.getId()[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_3 $$ Session s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_5 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_16 $$ s.beginTransaction()[ CD ]
Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_23 $$ assertFalse("was initialized during isReadOnly", Hibernate.isInitialized(dp))[ FD ]
Line_32 $$ List list = s.createQuery("from DataPoint where description = 'changed'").list()-->Line_33 $$ assertEquals("change written to database", 0, list.size())[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_21 $$ assertFalse("was initialized", Hibernate.isInitialized(dp))[ CD ]
Line_30 $$ s = openSession()-->Line_36 $$ s.close()[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_10 $$ s.save(dp)[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_10 $$ s.save(dp)[ CD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.close()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_29 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_23 $$ assertFalse("was initialized during isReadOnly", Hibernate.isInitialized(dp))[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_31 $$ s.beginTransaction()[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_6 $$ DataPoint dp = new DataPoint()[ CD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s.setDefaultReadOnly(false)[ FD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.setDefaultReadOnly(true)[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_8 $$ dp.setY(new BigDecimal(Math.cos(dp.getX().doubleValue())).setScale(19, BigDecimal.ROUND_DOWN))[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_12 $$ s.getTransaction().commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.save(dp)[ FD ]
Line_14 $$ s = openSession()-->Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_7 $$ dp.setX(new BigDecimal(0.1d).setScale(19, BigDecimal.ROUND_DOWN))[ CD ]
Line_14 $$ s = openSession()-->Line_15 $$ s.setCacheMode(CacheMode.IGNORE)[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_7 $$ dp.setX(new BigDecimal(0.1d).setScale(19, BigDecimal.ROUND_DOWN))[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.setCacheMode(CacheMode.IGNORE)[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_22 $$ assertTrue(s.isReadOnly(dp))[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_25 $$ assertTrue("was not initialized during mod", Hibernate.isInitialized(dp))[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_24 $$ dp.setDescription("changed")[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_17 $$ s.setDefaultReadOnly(true)[ CD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_5 $$ s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ s = openSession()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_18 $$ assertTrue(s.isDefaultReadOnly())[ CD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_22 $$ assertTrue(s.isReadOnly(dp))[ CD ]
Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_21 $$ assertFalse("was initialized", Hibernate.isInitialized(dp))[ FD ]
Line_30 $$ s = openSession()-->Line_31 $$ s.beginTransaction()[ FD ]
Line_30 $$ s = openSession()-->Line_34 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_14 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_8 $$ dp.setY(new BigDecimal(Math.cos(dp.getX().doubleValue())).setScale(19, BigDecimal.ROUND_DOWN))[ FD ]
Line_14 $$ s = openSession()-->Line_35 $$ s.getTransaction().commit()[ FD ]
Line_14 $$ s = openSession()-->Line_31 $$ s.beginTransaction()[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_25 $$ assertTrue("was not initialized during mod", Hibernate.isInitialized(dp))[ FD ]
Line_14 $$ s = openSession()-->Line_20 $$ s.setDefaultReadOnly(false)[ FD ]
Line_14 $$ s = openSession()-->Line_32 $$ List list = s.createQuery("from DataPoint where description = 'changed'").list()[ FD ]
Line_19 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_26 $$ assertEquals("desc not changed in memory", "changed", dp.getDescription())[ FD ]
Line_14 $$ s = openSession()-->Line_18 $$ assertTrue(s.isDefaultReadOnly())[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ List list = s.createQuery("from DataPoint where description = 'changed'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.getTransaction().commit()[ FD ]
Line_6 $$ DataPoint dp = new DataPoint()-->Line_24 $$ dp.setDescription("changed")[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_34 $$ s.createQuery("delete from DataPoint").executeUpdate()[ CD ]
Line_14 $$ s = openSession()-->Line_22 $$ assertTrue(s.isReadOnly(dp))[ FD ]
Line_14 $$ s = openSession()-->Line_29 $$ s.close()[ FD ]
Line_2 $$ public void testReadOnlyOnProxies() -->Line_9 $$ dp.setDescription("original")[ CD ]
