Line_33 $$ List list = s.createQuery("from DataPoint where description = 'changed'").list()-->Line_34 $$ assertEquals("change written to database", 0, list.size())[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ s.setCacheMode(CacheMode.IGNORE)[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_8 $$ dp.setX(new BigDecimal(0.1d).setScale(19, BigDecimal.ROUND_DOWN))[ FD ]
Line_15 $$ s = openSession()-->Line_32 $$ s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_28 $$ s.flush()[ FD ]
Line_20 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_22 $$ assertFalse("was initialized", Hibernate.isInitialized(dp))[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_26 $$ assertTrue("was not initialized during mod", Hibernate.isInitialized(dp))[ FD ]
Line_31 $$ s = openSession()-->Line_36 $$ s.getTransaction().commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_21 $$ s.setDefaultReadOnly(false)[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_20 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_10 $$ dp.setDescription("original")[ FD ]
Line_31 $$ s = openSession()-->Line_35 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_23 $$ assertTrue(s.isReadOnly(dp))[ FD ]
Line_20 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_27 $$ assertEquals("desc not changed in memory", "changed", dp.getDescription())[ FD ]
Line_4 $$ Session s = openSession()-->Line_33 $$ List list = s.createQuery("from DataPoint where description = 'changed'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_19 $$ assertTrue(s.isDefaultReadOnly())[ FD ]
Line_15 $$ s = openSession()-->Line_30 $$ s.close()[ FD ]
Line_15 $$ s = openSession()-->Line_21 $$ s.setDefaultReadOnly(false)[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_9 $$ dp.setY(new BigDecimal(Math.cos(dp.getX().doubleValue())).setScale(19, BigDecimal.ROUND_DOWN))[ FD ]
Line_20 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_26 $$ assertTrue("was not initialized during mod", Hibernate.isInitialized(dp))[ FD ]
Line_15 $$ s = openSession()-->Line_18 $$ s.setDefaultReadOnly(true)[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_24 $$ assertFalse("was initialized during isReadOnly", Hibernate.isInitialized(dp))[ FD ]
Line_4 $$ Session s = openSession()-->Line_36 $$ s.getTransaction().commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_35 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_27 $$ assertEquals("desc not changed in memory", "changed", dp.getDescription())[ FD ]
Line_20 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_25 $$ dp.setDescription("changed")[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_22 $$ assertFalse("was initialized", Hibernate.isInitialized(dp))[ FD ]
Line_4 $$ Session s = openSession()-->Line_6 $$ s.beginTransaction()[ FD ]
Line_15 $$ s = openSession()-->Line_19 $$ assertTrue(s.isDefaultReadOnly())[ FD ]
Line_20 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_23 $$ assertTrue(s.isReadOnly(dp))[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_25 $$ dp.setDescription("changed")[ FD ]
Line_15 $$ s = openSession()-->Line_28 $$ s.flush()[ FD ]
Line_4 $$ Session s = openSession()-->Line_30 $$ s.close()[ FD ]
Line_15 $$ s = openSession()-->Line_33 $$ List list = s.createQuery("from DataPoint where description = 'changed'").list()[ FD ]
Line_15 $$ s = openSession()-->Line_35 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_4 $$ Session s = openSession()-->Line_11 $$ s.save(dp)[ FD ]
Line_4 $$ Session s = openSession()-->Line_16 $$ s.setCacheMode(CacheMode.IGNORE)[ FD ]
Line_31 $$ s = openSession()-->Line_32 $$ s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_14 $$ s.close()[ FD ]
Line_15 $$ s = openSession()-->Line_36 $$ s.getTransaction().commit()[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_12 $$ long dpId = dp.getId()[ FD ]
Line_4 $$ Session s = openSession()-->Line_17 $$ s.beginTransaction()[ FD ]
Line_15 $$ s = openSession()-->Line_37 $$ s.close()[ FD ]
Line_15 $$ s = openSession()-->Line_16 $$ s.setCacheMode(CacheMode.IGNORE)[ FD ]
Line_15 $$ s = openSession()-->Line_23 $$ assertTrue(s.isReadOnly(dp))[ FD ]
Line_31 $$ s = openSession()-->Line_33 $$ List list = s.createQuery("from DataPoint where description = 'changed'").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_23 $$ assertTrue(s.isReadOnly(dp))[ FD ]
Line_20 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))-->Line_24 $$ assertFalse("was initialized during isReadOnly", Hibernate.isInitialized(dp))[ FD ]
Line_31 $$ s = openSession()-->Line_37 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession()-->Line_32 $$ s.beginTransaction()[ FD ]
Line_15 $$ s = openSession()-->Line_17 $$ s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_15 $$ s = openSession()[ FD ]
Line_7 $$ DataPoint dp = new DataPoint()-->Line_11 $$ s.save(dp)[ FD ]
Line_15 $$ s = openSession()-->Line_20 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))[ FD ]
Line_4 $$ Session s = openSession()-->Line_37 $$ s.close()[ FD ]
Line_15 $$ s = openSession()-->Line_29 $$ s.getTransaction().commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_13 $$ s.getTransaction().commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_18 $$ s.setDefaultReadOnly(true)[ FD ]
Line_4 $$ Session s = openSession()-->Line_31 $$ s = openSession()[ FD ]
Line_4 $$ Session s = openSession()-->Line_20 $$ dp = (DataPoint) s.load(DataPoint.class, new Long(dpId))[ FD ]
Line_4 $$ Session s = openSession()-->Line_29 $$ s.getTransaction().commit()[ FD ]
Line_15 $$ s = openSession()-->Line_31 $$ s = openSession()[ FD ]
