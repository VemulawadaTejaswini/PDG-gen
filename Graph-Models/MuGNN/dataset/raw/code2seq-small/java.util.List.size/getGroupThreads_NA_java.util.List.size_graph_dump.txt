Line_12 $$ if (userId <= 0) -->Line_13 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)[ CD ]
Line_26 $$ List<MBThread> threads = new ArrayList(threadIds.size())-->Line_29 $$ threads.add(thread)[ FD ]
Line_19 $$ if (includeAnonymous) -->Line_22 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ CD ]
Line_7 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)-->Line_22 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ FD ]
Line_22 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)-->Line_26 $$ List<MBThread> threads = new ArrayList(threadIds.size())[ FD ]
Line_13 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)-->Line_20 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)[ FD ]
Line_20 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)-->Line_26 $$ List<MBThread> threads = new ArrayList(threadIds.size())[ FD ]
Line_16 $$ QueryDefinition<MBThread> queryDefinition = new QueryDefinition(status, start, end, null)-->Line_17 $$ return mbThreadFinder.filterFindByS_G_U_C(groupId, userId, categoryIds, queryDefinition)[ FD ]
Line_20 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)-->Line_22 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ FD ]
Line_11 $$ List<Long> threadIds = null-->Line_22 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ FD ]
Line_7 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)-->Line_17 $$ return mbThreadFinder.filterFindByS_G_U_C(groupId, userId, categoryIds, queryDefinition)[ FD ]
Line_13 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)-->Line_26 $$ List<MBThread> threads = new ArrayList(threadIds.size())[ FD ]
Line_28 $$ MBThread thread = mbThreadPersistence.findByPrimaryKey(threadId)-->Line_29 $$ threads.add(thread)[ FD ]
Line_19 $$ if (includeAnonymous) -->Line_20 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)[ CD ]
Line_4 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) -->Line_5 $$ return doGetGroupThreads(groupId, userId, status, subscribed, includeAnonymous, start, end)[ CD ]
Line_11 $$ List<Long> threadIds = null-->Line_13 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)[ FD ]
Line_12 $$ if (userId <= 0) -->Line_15 $$ if (subscribed) [ CD ]
Line_13 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)-->Line_22 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ FD ]
Line_8 $$ if (categoryIds.length == 0) -->Line_9 $$ return Collections.emptyList()[ CD ]
Line_15 $$ if (subscribed) -->Line_16 $$ QueryDefinition<MBThread> queryDefinition = new QueryDefinition(status, start, end, null)[ CD ]
Line_11 $$ List<Long> threadIds = null-->Line_20 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)[ FD ]
Line_15 $$ if (subscribed) -->Line_19 $$ if (includeAnonymous) [ CD ]
Line_11 $$ List<Long> threadIds = null-->Line_26 $$ List<MBThread> threads = new ArrayList(threadIds.size())[ FD ]
Line_7 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)-->Line_13 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)[ FD ]
Line_15 $$ if (subscribed) -->Line_17 $$ return mbThreadFinder.filterFindByS_G_U_C(groupId, userId, categoryIds, queryDefinition)[ CD ]
Line_7 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)-->Line_20 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)[ FD ]
Line_27 $$ for (long threadId : threadIds) -->Line_28 $$ MBThread thread = mbThreadPersistence.findByPrimaryKey(threadId)[ FD ]
