Line_8 $$ if (currentPosition < sourceList.size() - 1) -->Line_9 $$ T occupyingObject = sourceList.get(currentPosition + 1)[ CD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_11 $$ moveAfter(sourceList, objectToMove)[ FD ]
Line_5 $$ for (int i = objectsToMove.size() - 1; i >= 0; i--) -->Line_8 $$ if (currentPosition < sourceList.size() - 1) [ CD ]
Line_4 $$ List<T> triedToMove = new ArrayList<T>()-->Line_14 $$ triedToMove.add(objectToMove)[ FD ]
Line_9 $$ T occupyingObject = sourceList.get(currentPosition + 1)-->Line_10 $$ if (!triedToMove.contains(occupyingObject)) [ FD ]
Line_5 $$ for (int i = objectsToMove.size() - 1; i >= 0; i--) -->Line_7 $$ int currentPosition = sourceList.indexOf(objectToMove)[ CD ]
Line_10 $$ if (!triedToMove.contains(occupyingObject)) -->Line_11 $$ moveAfter(sourceList, objectToMove)[ CD ]
Line_6 $$ T objectToMove = objectsToMove.get(i)-->Line_14 $$ triedToMove.add(objectToMove)[ FD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_4 $$ List<T> triedToMove = new ArrayList<T>()[ CD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_5 $$ for (int i = objectsToMove.size() - 1; i >= 0; i--) [ CD ]
Line_6 $$ T objectToMove = objectsToMove.get(i)-->Line_11 $$ moveAfter(sourceList, objectToMove)[ FD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_9 $$ T occupyingObject = sourceList.get(currentPosition + 1)[ FD ]
Line_8 $$ if (currentPosition < sourceList.size() - 1) -->Line_10 $$ if (!triedToMove.contains(occupyingObject)) [ CD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_8 $$ if (currentPosition < sourceList.size() - 1) [ FD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_3 $$ sortMoveListByRelativeOrder(sourceList, objectsToMove)[ CD ]
Line_5 $$ for (int i = objectsToMove.size() - 1; i >= 0; i--) -->Line_14 $$ triedToMove.add(objectToMove)[ CD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_6 $$ T objectToMove = objectsToMove.get(i)[ FD ]
Line_5 $$ for (int i = objectsToMove.size() - 1; i >= 0; i--) -->Line_6 $$ T objectToMove = objectsToMove.get(i)[ CD ]
Line_5 $$ for (int i = objectsToMove.size() - 1; i >= 0; i--) -->Line_6 $$ T objectToMove = objectsToMove.get(i)[ FD ]
Line_7 $$ int currentPosition = sourceList.indexOf(objectToMove)-->Line_8 $$ if (currentPosition < sourceList.size() - 1) [ FD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_3 $$ sortMoveListByRelativeOrder(sourceList, objectsToMove)[ FD ]
Line_6 $$ T objectToMove = objectsToMove.get(i)-->Line_7 $$ int currentPosition = sourceList.indexOf(objectToMove)[ FD ]
Line_4 $$ List<T> triedToMove = new ArrayList<T>()-->Line_10 $$ if (!triedToMove.contains(occupyingObject)) [ FD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_5 $$ for (int i = objectsToMove.size() - 1; i >= 0; i--) [ FD ]
Line_2 $$ public static <T> void moveAfter(List<T> sourceList, List<T> objectsToMove) -->Line_7 $$ int currentPosition = sourceList.indexOf(objectToMove)[ FD ]
