Line_26 $$ HashSet nameList = new HashSet()-->Line_27 $$ nameList.add("bar")[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_53 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_51 $$ list = q.list()-->Line_55 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_51 $$ list = q.list()[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_32 $$ list = q.list()[ FD ]
Line_51 $$ list = q.list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_5 $$ Bar bar2 = new Bar()-->Line_9 $$ bar2.setX(1000)[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_22 $$ list = q.list()[ FD ]
Line_4 $$ Bar bar = new Bar()-->Line_12 $$ baz.getCascadingBars().add(bar)[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")[ FD ]
Line_5 $$ Bar bar2 = new Bar()-->Line_55 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_46 $$ list = q.list()[ FD ]
Line_46 $$ list = q.list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")[ FD ]
Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_50 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_46 $$ list = q.list()-->Line_54 $$ list = q.list()[ FD ]
Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_45 $$ q.setString("name", "Bar%")[ FD ]
Line_4 $$ Bar bar = new Bar()-->Line_8 $$ bar.setX(10)[ FD ]
Line_32 $$ list = q.list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")[ FD ]
Line_14 $$ Session s = openSession()-->Line_59 $$ s.close()[ FD ]
Line_32 $$ list = q.list()-->Line_47 $$ assertTrue(list.size() == 1)[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_36 $$ q.setParameterList("nameList", (Collection) null)[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_46 $$ list = q.list()[ FD ]
Line_32 $$ list = q.list()-->Line_46 $$ list = q.list()[ FD ]
Line_22 $$ list = q.list()-->Line_55 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_54 $$ list = q.list()[ FD ]
Line_14 $$ Session s = openSession()-->Line_15 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_23 $$ if (!(getDialect() instanceof SAPDBDialect))-->Line_24 $$ assertTrue(list.size() == 2)[ CD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_54 $$ list = q.list()[ FD ]
Line_10 $$ Baz baz = new Baz()-->Line_13 $$ bar.setBaz(baz)[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_50 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_14 $$ Session s = openSession()-->Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")[ FD ]
Line_4 $$ Bar bar = new Bar()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_14 $$ Session s = openSession()-->Line_56 $$ s.delete(baz)[ FD ]
Line_14 $$ Session s = openSession()-->Line_16 $$ s.save(baz)[ FD ]
Line_14 $$ Session s = openSession()-->Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")[ FD ]
Line_22 $$ list = q.list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_22 $$ list = q.list()-->Line_46 $$ list = q.list()[ FD ]
Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_54 $$ list = q.list()[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_22 $$ list = q.list()[ FD ]
Line_22 $$ list = q.list()-->Line_34 $$ assertTrue(list.size() == 2)[ FD ]
Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_42 $$ Object result = q.uniqueResult()[ FD ]
Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_51 $$ list = q.list()[ FD ]
Line_10 $$ Baz baz = new Baz()-->Line_16 $$ s.save(baz)[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_30 $$ q.setParameterList("nameList", nameList)[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_31 $$ q.setParameter("stringVal", "a string")[ FD ]
Line_14 $$ Session s = openSession()-->Line_57 $$ s.delete(bar2)[ FD ]
Line_5 $$ Bar bar2 = new Bar()-->Line_53 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_14 $$ Session s = openSession()-->Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_24 $$ assertTrue(list.size() == 2)[ FD ]
Line_26 $$ HashSet nameList = new HashSet()-->Line_29 $$ nameList.add("Bar Two")[ FD ]
Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_51 $$ list = q.list()[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_42 $$ Object result = q.uniqueResult()[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_32 $$ list = q.list()[ FD ]
Line_22 $$ list = q.list()-->Line_47 $$ assertTrue(list.size() == 1)[ FD ]
Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_53 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_42 $$ Object result = q.uniqueResult()[ FD ]
Line_54 $$ list = q.list()-->Line_55 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_51 $$ list = q.list()[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_45 $$ q.setString("name", "Bar%")[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_50 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_14 $$ Session s = openSession()-->Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")[ FD ]
Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_46 $$ list = q.list()[ FD ]
Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")[ FD ]
Line_32 $$ list = q.list()-->Line_54 $$ list = q.list()[ FD ]
Line_5 $$ Bar bar2 = new Bar()-->Line_7 $$ bar2.setName("Bar Two")[ FD ]
Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_53 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_22 $$ list = q.list()-->Line_51 $$ list = q.list()[ FD ]
Line_22 $$ list = q.list()-->Line_32 $$ list = q.list()[ FD ]
Line_32 $$ list = q.list()-->Line_34 $$ assertTrue(list.size() == 2)[ FD ]
Line_4 $$ Bar bar = new Bar()-->Line_50 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_51 $$ list = q.list()[ FD ]
Line_51 $$ list = q.list()-->Line_54 $$ list = q.list()[ FD ]
Line_46 $$ list = q.list()-->Line_47 $$ assertTrue(list.size() == 1)[ FD ]
Line_32 $$ list = q.list()-->Line_55 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_50 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_5 $$ Bar bar2 = new Bar()-->Line_17 $$ s.save(bar2)[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_36 $$ q.setParameterList("nameList", (Collection) null)[ FD ]
Line_32 $$ list = q.list()-->Line_51 $$ list = q.list()[ FD ]
Line_46 $$ list = q.list()-->Line_51 $$ list = q.list()[ FD ]
Line_4 $$ Bar bar = new Bar()-->Line_6 $$ bar.setName("Bar")[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")[ FD ]
Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_54 $$ list = q.list()[ FD ]
Line_10 $$ Baz baz = new Baz()-->Line_11 $$ baz.setCascadingBars(new HashSet())[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_53 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_19 $$ Object row = list.iterator().next()[ FD ]
Line_10 $$ Baz baz = new Baz()-->Line_56 $$ s.delete(baz)[ FD ]
Line_4 $$ Bar bar = new Bar()-->Line_13 $$ bar.setBaz(baz)[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_45 $$ q.setString("name", "Bar%")[ FD ]
Line_33 $$ if (!(getDialect() instanceof SAPDBDialect))-->Line_34 $$ assertTrue(list.size() == 2)[ CD ]
Line_22 $$ list = q.list()-->Line_54 $$ list = q.list()[ FD ]
Line_21 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_30 $$ q.setParameterList("nameList", nameList)[ FD ]
Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_46 $$ list = q.list()[ FD ]
Line_14 $$ Session s = openSession()-->Line_17 $$ s.save(bar2)[ FD ]
Line_14 $$ Session s = openSession()-->Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_41 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_32 $$ list = q.list()[ FD ]
Line_10 $$ Baz baz = new Baz()-->Line_12 $$ baz.getCascadingBars().add(bar)[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_31 $$ q.setParameter("stringVal", "a string")[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_55 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_5 $$ Bar bar2 = new Bar()-->Line_57 $$ s.delete(bar2)[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_47 $$ assertTrue(list.size() == 1)[ FD ]
Line_46 $$ list = q.list()-->Line_55 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_26 $$ HashSet nameList = new HashSet()-->Line_28 $$ nameList.add("Bar")[ FD ]
Line_22 $$ list = q.list()-->Line_24 $$ assertTrue(list.size() == 2)[ FD ]
Line_26 $$ HashSet nameList = new HashSet()-->Line_30 $$ q.setParameterList("nameList", nameList)[ FD ]
Line_44 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_45 $$ q.setString("name", "Bar%")[ FD ]
Line_15 $$ Transaction txn = s.beginTransaction()-->Line_58 $$ txn.commit()[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_54 $$ list = q.list()[ FD ]
Line_25 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_46 $$ list = q.list()[ FD ]
Line_18 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_34 $$ assertTrue(list.size() == 2)[ FD ]
