Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_50 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_44 $$ list = q.list()-->Line_48 $$ list = q.list()[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_44 $$ list = q.list()[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_11 $$ baz.getCascadingBars().add(bar)[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_22 $$ if (!(getDialect() instanceof SAPDBDialect))[ CD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_48 $$ list = q.list()[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_3 $$ Bar bar = new Bar()[ CD ]
Line_31 $$ list = q.list()-->Line_51 $$ list = q.list()[ FD ]
Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_48 $$ list = q.list()[ FD ]
Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")-->Line_48 $$ list = q.list()[ FD ]
Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")-->Line_50 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_56 $$ s.close()[ CD ]
Line_13 $$ Session s = openSession()-->Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_25 $$ HashSet nameList = new HashSet()[ CD ]
Line_25 $$ HashSet nameList = new HashSet()-->Line_26 $$ nameList.add("bar")[ FD ]
Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_43 $$ q.setString("name", "Bar%")[ FD ]
Line_13 $$ Session s = openSession()-->Line_56 $$ s.close()[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_40 $$ Object result = q.uniqueResult()[ FD ]
Line_31 $$ list = q.list()-->Line_48 $$ list = q.list()[ FD ]
Line_4 $$ Bar bar2 = new Bar()-->Line_54 $$ s.delete(bar2)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_50 $$ q.setInteger("valueX", bar2.getX() + 1)[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_14 $$ Transaction txn = s.beginTransaction()[ CD ]
Line_22 $$ if (!(getDialect() instanceof SAPDBDialect))-->Line_23 $$ assertTrue(list.size() == 2)[ CD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_21 $$ list = q.list()[ FD ]
Line_3 $$ Bar bar = new Bar()-->Line_12 $$ bar.setBaz(baz)[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_51 $$ list = q.list()[ FD ]
Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_44 $$ list = q.list()[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_5 $$ bar.setName("Bar")[ CD ]
Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_50 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_40 $$ Object result = q.uniqueResult()[ CD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_44 $$ list = q.list()[ FD ]
Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_51 $$ list = q.list()[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")[ FD ]
Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_47 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_9 $$ Baz baz = new Baz()[ CD ]
Line_48 $$ list = q.list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_31 $$ list = q.list()[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_10 $$ baz.setCascadingBars(new HashSet())[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_7 $$ bar.setX(10)[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_43 $$ q.setString("name", "Bar%")[ CD ]
Line_3 $$ Bar bar = new Bar()-->Line_47 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_53 $$ s.delete(baz)[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_12 $$ bar.setBaz(baz)[ CD ]
Line_21 $$ list = q.list()-->Line_23 $$ assertTrue(list.size() == 2)[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_50 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_27 $$ nameList.add("Bar")[ CD ]
Line_21 $$ list = q.list()-->Line_51 $$ list = q.list()[ FD ]
Line_21 $$ list = q.list()-->Line_44 $$ list = q.list()[ FD ]
Line_13 $$ Session s = openSession()-->Line_15 $$ s.save(baz)[ FD ]
Line_4 $$ Bar bar2 = new Bar()-->Line_50 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_44 $$ list = q.list()-->Line_51 $$ list = q.list()[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_29 $$ q.setParameterList("nameList", nameList)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()[ CD ]
Line_44 $$ list = q.list()-->Line_49 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_3 $$ Bar bar = new Bar()-->Line_11 $$ baz.getCascadingBars().add(bar)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_6 $$ bar2.setName("Bar Two")[ CD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_21 $$ list = q.list()[ FD ]
Line_13 $$ Session s = openSession()-->Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")[ FD ]
Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_40 $$ Object result = q.uniqueResult()[ FD ]
Line_13 $$ Session s = openSession()-->Line_54 $$ s.delete(bar2)[ FD ]
Line_13 $$ Session s = openSession()-->Line_14 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_28 $$ nameList.add("Bar Two")[ CD ]
Line_13 $$ Session s = openSession()-->Line_53 $$ s.delete(baz)[ FD ]
Line_9 $$ Baz baz = new Baz()-->Line_10 $$ baz.setCascadingBars(new HashSet())[ FD ]
Line_25 $$ HashSet nameList = new HashSet()-->Line_27 $$ nameList.add("Bar")[ FD ]
Line_31 $$ list = q.list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")[ FD ]
Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_47 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_55 $$ txn.commit()[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_4 $$ Bar bar2 = new Bar()[ CD ]
Line_3 $$ Bar bar = new Bar()-->Line_7 $$ bar.setX(10)[ FD ]
Line_4 $$ Bar bar2 = new Bar()-->Line_16 $$ s.save(bar2)[ FD ]
Line_31 $$ list = q.list()-->Line_49 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_4 $$ Bar bar2 = new Bar()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_54 $$ s.delete(bar2)[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_15 $$ s.save(baz)[ CD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_23 $$ assertTrue(list.size() == 2)[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_35 $$ q.setParameterList("nameList", (Collection) null)[ FD ]
Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_43 $$ q.setString("name", "Bar%")[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_21 $$ list = q.list()[ CD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")[ FD ]
Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")-->Line_51 $$ list = q.list()[ FD ]
Line_44 $$ list = q.list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_43 $$ q.setString("name", "Bar%")[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_19 $$ assertTrue(row instanceof Object[] && ((Object[]) row).length == 3)[ CD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_31 $$ list = q.list()[ FD ]
Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")[ FD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_18 $$ Object row = list.iterator().next()[ FD ]
Line_9 $$ Baz baz = new Baz()-->Line_53 $$ s.delete(baz)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_47 $$ q.setInteger("valueX", bar.getX() + 1)[ CD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_50 $$ q.setInteger("valueX", bar2.getX() + 1)[ FD ]
Line_21 $$ list = q.list()-->Line_31 $$ list = q.list()[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_31 $$ list = q.list()[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_30 $$ q.setParameter("stringVal", "a string")[ FD ]
Line_48 $$ list = q.list()-->Line_51 $$ list = q.list()[ FD ]
Line_48 $$ list = q.list()-->Line_49 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_44 $$ list = q.list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_21 $$ list = q.list()-->Line_49 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_21 $$ list = q.list()-->Line_33 $$ assertTrue(list.size() == 2)[ FD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_51 $$ list = q.list()[ FD ]
Line_51 $$ list = q.list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_30 $$ q.setParameter("stringVal", "a string")[ CD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_35 $$ q.setParameterList("nameList", (Collection) null)[ FD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_44 $$ list = q.list()[ FD ]
Line_14 $$ Transaction txn = s.beginTransaction()-->Line_55 $$ txn.commit()[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_26 $$ nameList.add("bar")[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")[ CD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_40 $$ Object result = q.uniqueResult()[ FD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_33 $$ assertTrue(list.size() == 2)[ FD ]
Line_9 $$ Baz baz = new Baz()-->Line_12 $$ bar.setBaz(baz)[ FD ]
Line_13 $$ Session s = openSession()-->Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_43 $$ q.setString("name", "Bar%")[ FD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_30 $$ q.setParameter("stringVal", "a string")[ FD ]
Line_3 $$ Bar bar = new Bar()-->Line_49 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_8 $$ bar2.setX(1000)[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_48 $$ list = q.list()[ CD ]
Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_44 $$ list = q.list()[ FD ]
Line_21 $$ list = q.list()-->Line_48 $$ list = q.list()[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_16 $$ s.save(bar2)[ CD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_29 $$ q.setParameterList("nameList", nameList)[ FD ]
Line_31 $$ list = q.list()-->Line_33 $$ assertTrue(list.size() == 2)[ FD ]
Line_13 $$ Session s = openSession()-->Line_16 $$ s.save(bar2)[ FD ]
Line_4 $$ Bar bar2 = new Bar()-->Line_8 $$ bar2.setX(1000)[ FD ]
Line_13 $$ Session s = openSession()-->Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ CD ]
Line_13 $$ Session s = openSession()-->Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")[ CD ]
Line_21 $$ list = q.list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_31 $$ list = q.list()[ CD ]
Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_51 $$ list = q.list()[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")[ CD ]
Line_42 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name")-->Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_48 $$ list = q.list()[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")[ FD ]
Line_31 $$ list = q.list()-->Line_45 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")[ CD ]
Line_25 $$ HashSet nameList = new HashSet()-->Line_28 $$ nameList.add("Bar Two")[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_47 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_20 $$ Query q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_48 $$ list = q.list()[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_18 $$ Object row = list.iterator().next()[ CD ]
Line_9 $$ Baz baz = new Baz()-->Line_15 $$ s.save(baz)[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_29 $$ q.setParameterList("nameList", nameList)[ CD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_44 $$ list = q.list()[ FD ]
Line_13 $$ Session s = openSession()-->Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")[ FD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_49 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_51 $$ list = q.list()[ FD ]
Line_31 $$ list = q.list()-->Line_44 $$ list = q.list()[ FD ]
Line_3 $$ Bar bar = new Bar()-->Line_5 $$ bar.setName("Bar")[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_51 $$ list = q.list()[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_32 $$ if (!(getDialect() instanceof SAPDBDialect))[ CD ]
Line_9 $$ Baz baz = new Baz()-->Line_11 $$ baz.getCascadingBars().add(bar)[ FD ]
Line_25 $$ HashSet nameList = new HashSet()-->Line_29 $$ q.setParameterList("nameList", nameList)[ FD ]
Line_4 $$ Bar bar2 = new Bar()-->Line_6 $$ bar2.setName("Bar Two")[ FD ]
Line_32 $$ if (!(getDialect() instanceof SAPDBDialect))-->Line_33 $$ assertTrue(list.size() == 2)[ CD ]
Line_21 $$ list = q.list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_45 $$ assertTrue(list.size() == 1)[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_13 $$ Session s = openSession()[ CD ]
Line_39 $$ q = s.createQuery("select bar, b from Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%'")-->Line_48 $$ list = q.list()[ FD ]
Line_17 $$ List list = s.createQuery("from Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %'").list()-->Line_52 $$ assertTrue(((Bar) list.get(0)).getX() == bar2.getX())[ FD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_49 $$ assertTrue(((Bar) list.get(0)).getX() == bar.getX())[ CD ]
Line_2 $$ public void testNamedParams() throws Exception -->Line_41 $$ assertTrue(result != null)[ CD ]
Line_46 $$ q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))")-->Line_47 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
Line_24 $$ q = s.createQuery("select bar, b from Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList) or bar.name in (:nameList) ) and bar.string = :stringVal")-->Line_47 $$ q.setInteger("valueX", bar.getX() + 1)[ FD ]
