Line_14 $$ Variable leftBlockPosition = scope.declareVariable(int.class, "leftBlockPosition")-->Line_15 $$ compareToMethod.getBody().comment("int leftBlockPosition = decodePosition(leftPageAddress)").append(leftBlockPosition.set(invokeStatic(SyntheticAddress.class, "decodePosition", int.class, leftPageAddress)))[ FD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_23 $$ int sortChannel = sortChannels.get(i)[ FD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_24 $$ SortOrder sortOrder = sortOrders.get(i)[ FD ]
Line_7 $$ Scope scope = compareToMethod.getScope()-->Line_14 $$ Variable leftBlockPosition = scope.declareVariable(int.class, "leftBlockPosition")[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_24 $$ SortOrder sortOrder = sortOrders.get(i)[ FD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_7 $$ Scope scope = compareToMethod.getScope()[ FD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_28 $$ ByteCodeExpression rightBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, rightBlockIndex).cast(Block.class)[ CD ]
Line_27 $$ ByteCodeExpression leftBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, leftBlockIndex).cast(Block.class)-->Line_29 $$ block.append(getStatic(SortOrder.class, sortOrder.name()).invoke("compareBlockValue", int.class, ImmutableList.of(Type.class, Block.class, int.class, Block.class, int.class), constantType(callSiteBinder, sortType), leftBlock, leftBlockPosition, rightBlock, rightBlockPosition))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_15 $$ compareToMethod.getBody().comment("int leftBlockPosition = decodePosition(leftPageAddress)").append(leftBlockPosition.set(invokeStatic(SyntheticAddress.class, "decodePosition", int.class, leftPageAddress)))[ CD ]
Line_18 $$ Variable rightBlockIndex = scope.declareVariable(int.class, "rightBlockIndex")-->Line_28 $$ ByteCodeExpression rightBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, rightBlockIndex).cast(Block.class)[ FD ]
Line_20 $$ Variable rightBlockPosition = scope.declareVariable(int.class, "rightBlockPosition")-->Line_21 $$ compareToMethod.getBody().comment("int rightBlockPosition = decodePosition(rightPageAddress)").append(rightBlockPosition.set(invokeStatic(SyntheticAddress.class, "decodePosition", int.class, rightPageAddress)))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_34 $$ compareToMethod.getBody().push(0).retInt()[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_13 $$ compareToMethod.getBody().comment("int leftBlockIndex = decodeSliceIndex(leftPageAddress)").append(leftBlockIndex.set(invokeStatic(SyntheticAddress.class, "decodeSliceIndex", int.class, leftPageAddress)))[ CD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_34 $$ compareToMethod.getBody().push(0).retInt()[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_11 $$ compareToMethod.getBody().comment("long leftPageAddress = valueAddresses.getLong(leftPosition)").append(leftPageAddress.set(valueAddresses.invoke("getLong", long.class, leftPosition)))[ CD ]
Line_3 $$ Parameter pagesIndex = arg("pagesIndex", PagesIndex.class)-->Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_4 $$ Parameter leftPosition = arg("leftPosition", int.class)[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_5 $$ Parameter rightPosition = arg("rightPosition", int.class)[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_3 $$ Parameter pagesIndex = arg("pagesIndex", PagesIndex.class)[ CD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_26 $$ Type sortType = sortTypes.get(i)[ FD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_11 $$ compareToMethod.getBody().comment("long leftPageAddress = valueAddresses.getLong(leftPosition)").append(leftPageAddress.set(valueAddresses.invoke("getLong", long.class, leftPosition)))[ FD ]
Line_10 $$ Variable leftPageAddress = scope.declareVariable(long.class, "leftPageAddress")-->Line_13 $$ compareToMethod.getBody().comment("int leftBlockIndex = decodeSliceIndex(leftPageAddress)").append(leftBlockIndex.set(invokeStatic(SyntheticAddress.class, "decodeSliceIndex", int.class, leftPageAddress)))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_20 $$ Variable rightBlockPosition = scope.declareVariable(int.class, "rightBlockPosition")[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_26 $$ Type sortType = sortTypes.get(i)[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_14 $$ Variable leftBlockPosition = scope.declareVariable(int.class, "leftBlockPosition")[ CD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_31 $$ block.comment("if (compare != 0) return compare").dup().ifZeroGoto(equal).retInt().visitLabel(equal).pop(int.class)[ CD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_19 $$ compareToMethod.getBody().comment("int rightBlockIndex = decodeSliceIndex(rightPageAddress)").append(rightBlockIndex.set(invokeStatic(SyntheticAddress.class, "decodeSliceIndex", int.class, rightPageAddress)))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_8 $$ Variable valueAddresses = scope.declareVariable(LongArrayList.class, "valueAddresses")[ CD ]
Line_3 $$ Parameter pagesIndex = arg("pagesIndex", PagesIndex.class)-->Line_28 $$ ByteCodeExpression rightBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, rightBlockIndex).cast(Block.class)[ FD ]
Line_23 $$ int sortChannel = sortChannels.get(i)-->Line_28 $$ ByteCodeExpression rightBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, rightBlockIndex).cast(Block.class)[ FD ]
Line_3 $$ Parameter pagesIndex = arg("pagesIndex", PagesIndex.class)-->Line_27 $$ ByteCodeExpression leftBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, leftBlockIndex).cast(Block.class)[ FD ]
Line_10 $$ Variable leftPageAddress = scope.declareVariable(long.class, "leftPageAddress")-->Line_15 $$ compareToMethod.getBody().comment("int leftBlockPosition = decodePosition(leftPageAddress)").append(leftBlockPosition.set(invokeStatic(SyntheticAddress.class, "decodePosition", int.class, leftPageAddress)))[ FD ]
Line_16 $$ Variable rightPageAddress = scope.declareVariable(long.class, "rightPageAddress")-->Line_17 $$ compareToMethod.getBody().comment("long rightPageAddress = valueAddresses.getLong(rightPosition);").append(rightPageAddress.set(valueAddresses.invoke("getLong", long.class, rightPosition)))[ FD ]
Line_8 $$ Variable valueAddresses = scope.declareVariable(LongArrayList.class, "valueAddresses")-->Line_11 $$ compareToMethod.getBody().comment("long leftPageAddress = valueAddresses.getLong(leftPosition)").append(leftPageAddress.set(valueAddresses.invoke("getLong", long.class, leftPosition)))[ FD ]
Line_26 $$ Type sortType = sortTypes.get(i)-->Line_29 $$ block.append(getStatic(SortOrder.class, sortOrder.name()).invoke("compareBlockValue", int.class, ImmutableList.of(Type.class, Block.class, int.class, Block.class, int.class), constantType(callSiteBinder, sortType), leftBlock, leftBlockPosition, rightBlock, rightBlockPosition))[ FD ]
Line_5 $$ Parameter rightPosition = arg("rightPosition", int.class)-->Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)[ FD ]
Line_3 $$ Parameter pagesIndex = arg("pagesIndex", PagesIndex.class)-->Line_9 $$ compareToMethod.getBody().comment("LongArrayList valueAddresses = pagesIndex.valueAddresses").append(valueAddresses.set(pagesIndex.invoke("getValueAddresses", LongArrayList.class)))[ FD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_9 $$ compareToMethod.getBody().comment("LongArrayList valueAddresses = pagesIndex.valueAddresses").append(valueAddresses.set(pagesIndex.invoke("getValueAddresses", LongArrayList.class)))[ FD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_26 $$ Type sortType = sortTypes.get(i)[ CD ]
Line_5 $$ Parameter rightPosition = arg("rightPosition", int.class)-->Line_17 $$ compareToMethod.getBody().comment("long rightPageAddress = valueAddresses.getLong(rightPosition);").append(rightPageAddress.set(valueAddresses.invoke("getLong", long.class, rightPosition)))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_17 $$ compareToMethod.getBody().comment("long rightPageAddress = valueAddresses.getLong(rightPosition);").append(rightPageAddress.set(valueAddresses.invoke("getLong", long.class, rightPosition)))[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_12 $$ Variable leftBlockIndex = scope.declareVariable(int.class, "leftBlockIndex")[ CD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_27 $$ ByteCodeExpression leftBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, leftBlockIndex).cast(Block.class)[ CD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_15 $$ compareToMethod.getBody().comment("int leftBlockPosition = decodePosition(leftPageAddress)").append(leftBlockPosition.set(invokeStatic(SyntheticAddress.class, "decodePosition", int.class, leftPageAddress)))[ FD ]
Line_10 $$ Variable leftPageAddress = scope.declareVariable(long.class, "leftPageAddress")-->Line_11 $$ compareToMethod.getBody().comment("long leftPageAddress = valueAddresses.getLong(leftPosition)").append(leftPageAddress.set(valueAddresses.invoke("getLong", long.class, leftPosition)))[ FD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_24 $$ SortOrder sortOrder = sortOrders.get(i)[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_16 $$ Variable rightPageAddress = scope.declareVariable(long.class, "rightPageAddress")[ CD ]
Line_14 $$ Variable leftBlockPosition = scope.declareVariable(int.class, "leftBlockPosition")-->Line_29 $$ block.append(getStatic(SortOrder.class, sortOrder.name()).invoke("compareBlockValue", int.class, ImmutableList.of(Type.class, Block.class, int.class, Block.class, int.class), constantType(callSiteBinder, sortType), leftBlock, leftBlockPosition, rightBlock, rightBlockPosition))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_29 $$ block.append(getStatic(SortOrder.class, sortOrder.name()).invoke("compareBlockValue", int.class, ImmutableList.of(Type.class, Block.class, int.class, Block.class, int.class), constantType(callSiteBinder, sortType), leftBlock, leftBlockPosition, rightBlock, rightBlockPosition))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)[ FD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_17 $$ compareToMethod.getBody().comment("long rightPageAddress = valueAddresses.getLong(rightPosition);").append(rightPageAddress.set(valueAddresses.invoke("getLong", long.class, rightPosition)))[ FD ]
Line_4 $$ Parameter leftPosition = arg("leftPosition", int.class)-->Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)[ FD ]
Line_7 $$ Scope scope = compareToMethod.getScope()-->Line_20 $$ Variable rightBlockPosition = scope.declareVariable(int.class, "rightBlockPosition")[ FD ]
Line_25 $$ ByteCodeBlock block = new ByteCodeBlock().setDescription("compare channel " + sortChannel + " " + sortOrder)-->Line_29 $$ block.append(getStatic(SortOrder.class, sortOrder.name()).invoke("compareBlockValue", int.class, ImmutableList.of(Type.class, Block.class, int.class, Block.class, int.class), constantType(callSiteBinder, sortType), leftBlock, leftBlockPosition, rightBlock, rightBlockPosition))[ FD ]
Line_7 $$ Scope scope = compareToMethod.getScope()-->Line_10 $$ Variable leftPageAddress = scope.declareVariable(long.class, "leftPageAddress")[ FD ]
Line_25 $$ ByteCodeBlock block = new ByteCodeBlock().setDescription("compare channel " + sortChannel + " " + sortOrder)-->Line_31 $$ block.comment("if (compare != 0) return compare").dup().ifZeroGoto(equal).retInt().visitLabel(equal).pop(int.class)[ FD ]
Line_12 $$ Variable leftBlockIndex = scope.declareVariable(int.class, "leftBlockIndex")-->Line_13 $$ compareToMethod.getBody().comment("int leftBlockIndex = decodeSliceIndex(leftPageAddress)").append(leftBlockIndex.set(invokeStatic(SyntheticAddress.class, "decodeSliceIndex", int.class, leftPageAddress)))[ FD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_25 $$ ByteCodeBlock block = new ByteCodeBlock().setDescription("compare channel " + sortChannel + " " + sortOrder)[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_9 $$ compareToMethod.getBody().comment("LongArrayList valueAddresses = pagesIndex.valueAddresses").append(valueAddresses.set(pagesIndex.invoke("getValueAddresses", LongArrayList.class)))[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_21 $$ compareToMethod.getBody().comment("int rightBlockPosition = decodePosition(rightPageAddress)").append(rightBlockPosition.set(invokeStatic(SyntheticAddress.class, "decodePosition", int.class, rightPageAddress)))[ CD ]
Line_28 $$ ByteCodeExpression rightBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, rightBlockIndex).cast(Block.class)-->Line_29 $$ block.append(getStatic(SortOrder.class, sortOrder.name()).invoke("compareBlockValue", int.class, ImmutableList.of(Type.class, Block.class, int.class, Block.class, int.class), constantType(callSiteBinder, sortType), leftBlock, leftBlockPosition, rightBlock, rightBlockPosition))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_7 $$ Scope scope = compareToMethod.getScope()[ CD ]
Line_24 $$ SortOrder sortOrder = sortOrders.get(i)-->Line_29 $$ block.append(getStatic(SortOrder.class, sortOrder.name()).invoke("compareBlockValue", int.class, ImmutableList.of(Type.class, Block.class, int.class, Block.class, int.class), constantType(callSiteBinder, sortType), leftBlock, leftBlockPosition, rightBlock, rightBlockPosition))[ FD ]
Line_8 $$ Variable valueAddresses = scope.declareVariable(LongArrayList.class, "valueAddresses")-->Line_9 $$ compareToMethod.getBody().comment("LongArrayList valueAddresses = pagesIndex.valueAddresses").append(valueAddresses.set(pagesIndex.invoke("getValueAddresses", LongArrayList.class)))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_19 $$ compareToMethod.getBody().comment("int rightBlockIndex = decodeSliceIndex(rightPageAddress)").append(rightBlockIndex.set(invokeStatic(SyntheticAddress.class, "decodeSliceIndex", int.class, rightPageAddress)))[ CD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_29 $$ block.append(getStatic(SortOrder.class, sortOrder.name()).invoke("compareBlockValue", int.class, ImmutableList.of(Type.class, Block.class, int.class, Block.class, int.class), constantType(callSiteBinder, sortType), leftBlock, leftBlockPosition, rightBlock, rightBlockPosition))[ CD ]
Line_25 $$ ByteCodeBlock block = new ByteCodeBlock().setDescription("compare channel " + sortChannel + " " + sortOrder)-->Line_32 $$ compareToMethod.getBody().append(block)[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) [ CD ]
Line_30 $$ LabelNode equal = new LabelNode("equal")-->Line_31 $$ block.comment("if (compare != 0) return compare").dup().ifZeroGoto(equal).retInt().visitLabel(equal).pop(int.class)[ FD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_13 $$ compareToMethod.getBody().comment("int leftBlockIndex = decodeSliceIndex(leftPageAddress)").append(leftBlockIndex.set(invokeStatic(SyntheticAddress.class, "decodeSliceIndex", int.class, leftPageAddress)))[ FD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_32 $$ compareToMethod.getBody().append(block)[ CD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) [ FD ]
Line_7 $$ Scope scope = compareToMethod.getScope()-->Line_16 $$ Variable rightPageAddress = scope.declareVariable(long.class, "rightPageAddress")[ FD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_21 $$ compareToMethod.getBody().comment("int rightBlockPosition = decodePosition(rightPageAddress)").append(rightBlockPosition.set(invokeStatic(SyntheticAddress.class, "decodePosition", int.class, rightPageAddress)))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_18 $$ Variable rightBlockIndex = scope.declareVariable(int.class, "rightBlockIndex")[ CD ]
Line_16 $$ Variable rightPageAddress = scope.declareVariable(long.class, "rightPageAddress")-->Line_19 $$ compareToMethod.getBody().comment("int rightBlockIndex = decodeSliceIndex(rightPageAddress)").append(rightBlockIndex.set(invokeStatic(SyntheticAddress.class, "decodeSliceIndex", int.class, rightPageAddress)))[ FD ]
Line_20 $$ Variable rightBlockPosition = scope.declareVariable(int.class, "rightBlockPosition")-->Line_29 $$ block.append(getStatic(SortOrder.class, sortOrder.name()).invoke("compareBlockValue", int.class, ImmutableList.of(Type.class, Block.class, int.class, Block.class, int.class), constantType(callSiteBinder, sortType), leftBlock, leftBlockPosition, rightBlock, rightBlockPosition))[ FD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_23 $$ int sortChannel = sortChannels.get(i)[ CD ]
Line_22 $$ for (int i = 0; i < sortChannels.size(); i++) -->Line_30 $$ LabelNode equal = new LabelNode("equal")[ CD ]
Line_4 $$ Parameter leftPosition = arg("leftPosition", int.class)-->Line_11 $$ compareToMethod.getBody().comment("long leftPageAddress = valueAddresses.getLong(leftPosition)").append(leftPageAddress.set(valueAddresses.invoke("getLong", long.class, leftPosition)))[ FD ]
Line_23 $$ int sortChannel = sortChannels.get(i)-->Line_27 $$ ByteCodeExpression leftBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, leftBlockIndex).cast(Block.class)[ FD ]
Line_16 $$ Variable rightPageAddress = scope.declareVariable(long.class, "rightPageAddress")-->Line_21 $$ compareToMethod.getBody().comment("int rightBlockPosition = decodePosition(rightPageAddress)").append(rightBlockPosition.set(invokeStatic(SyntheticAddress.class, "decodePosition", int.class, rightPageAddress)))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_10 $$ Variable leftPageAddress = scope.declareVariable(long.class, "leftPageAddress")[ CD ]
Line_12 $$ Variable leftBlockIndex = scope.declareVariable(int.class, "leftBlockIndex")-->Line_27 $$ ByteCodeExpression leftBlock = pagesIndex.invoke("getChannel", ObjectArrayList.class, constantInt(sortChannel)).invoke("get", Object.class, leftBlockIndex).cast(Block.class)[ FD ]
Line_6 $$ MethodDefinition compareToMethod = classDefinition.declareMethod(a(PUBLIC), "compareTo", type(int.class), pagesIndex, leftPosition, rightPosition)-->Line_32 $$ compareToMethod.getBody().append(block)[ FD ]
Line_7 $$ Scope scope = compareToMethod.getScope()-->Line_8 $$ Variable valueAddresses = scope.declareVariable(LongArrayList.class, "valueAddresses")[ FD ]
Line_7 $$ Scope scope = compareToMethod.getScope()-->Line_18 $$ Variable rightBlockIndex = scope.declareVariable(int.class, "rightBlockIndex")[ FD ]
Line_7 $$ Scope scope = compareToMethod.getScope()-->Line_12 $$ Variable leftBlockIndex = scope.declareVariable(int.class, "leftBlockIndex")[ FD ]
Line_8 $$ Variable valueAddresses = scope.declareVariable(LongArrayList.class, "valueAddresses")-->Line_17 $$ compareToMethod.getBody().comment("long rightPageAddress = valueAddresses.getLong(rightPosition);").append(rightPageAddress.set(valueAddresses.invoke("getLong", long.class, rightPosition)))[ FD ]
Line_2 $$ private void generateCompareTo(ClassDefinition classDefinition, CallSiteBinder callSiteBinder, List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_23 $$ int sortChannel = sortChannels.get(i)[ FD ]
Line_18 $$ Variable rightBlockIndex = scope.declareVariable(int.class, "rightBlockIndex")-->Line_19 $$ compareToMethod.getBody().comment("int rightBlockIndex = decodeSliceIndex(rightPageAddress)").append(rightBlockIndex.set(invokeStatic(SyntheticAddress.class, "decodeSliceIndex", int.class, rightPageAddress)))[ FD ]
