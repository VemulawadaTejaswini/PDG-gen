Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_18 $$ int numRequestedPayloadFields = randomIntBetween(2, numPayloadFields)[ CD ]
Line_20 $$ for (int i = 0; i < numRequestedPayloadFields; i++) -->Line_21 $$ payloadFields[i] = "test_field" + i[ CD ]
Line_8 $$ for (int i = 1; i <= numDocs; i++) -->Line_10 $$ for (int j = 0; j < numPayloadFields; j++) [ CD ]
Line_8 $$ for (int i = 1; i <= numDocs; i++) -->Line_14 $$ indexRequestBuilders.add(client().prepareIndex(INDEX, TYPE, "" + i).setSource(source))[ CD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_27 $$ CompletionSuggestion.Entry options = completionSuggestion.getEntries().get(0)[ CD ]
Line_5 $$ int numDocs = randomIntBetween(10, 100)-->Line_8 $$ for (int i = 1; i <= numDocs; i++) [ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_20 $$ for (int i = 0; i < numRequestedPayloadFields; i++) [ CD ]
Line_17 $$ int suggestionSize = randomIntBetween(1, numDocs)-->Line_23 $$ CompletionSuggestionBuilder prefix = SuggestBuilders.completionSuggestion("foo").field(FIELD).prefix("sugg").size(suggestionSize).payload(payloadFields)[ FD ]
Line_30 $$ for (CompletionSuggestion.Entry.Option option : options) -->Line_31 $$ assertThat(option.getText().toString(), equalTo("suggestion" + id))[ FD ]
Line_29 $$ int id = numDocs-->Line_39 $$ id--[ FD ]
Line_10 $$ for (int j = 0; j < numPayloadFields; j++) -->Line_11 $$ source.field("test_field" + j, j + "value" + i)[ CD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_17 $$ int suggestionSize = randomIntBetween(1, numDocs)[ CD ]
Line_33 $$ for (int i = 0; i < numRequestedPayloadFields; i++) -->Line_37 $$ assertThat((String) fieldValue.get(0), equalTo(i + "value" + id))[ CD ]
Line_8 $$ for (int i = 1; i <= numDocs; i++) -->Line_9 $$ XContentBuilder source = jsonBuilder().startObject().startObject(FIELD).field("input", "suggestion" + i).field("weight", i).endObject()[ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_29 $$ int id = numDocs[ CD ]
Line_9 $$ XContentBuilder source = jsonBuilder().startObject().startObject(FIELD).field("input", "suggestion" + i).field("weight", i).endObject()-->Line_13 $$ source.endObject()[ FD ]
Line_23 $$ CompletionSuggestionBuilder prefix = SuggestBuilders.completionSuggestion("foo").field(FIELD).prefix("sugg").size(suggestionSize).payload(payloadFields)-->Line_24 $$ SuggestResponse suggestResponse = client().prepareSuggest(INDEX).addSuggestion(prefix).execute().actionGet()[ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_28 $$ assertThat(options.getOptions().size(), equalTo(suggestionSize))[ CD ]
Line_34 $$ List<Object> fieldValue = option.getPayload().get("test_field" + i)-->Line_37 $$ assertThat((String) fieldValue.get(0), equalTo(i + "value" + id))[ FD ]
Line_20 $$ for (int i = 0; i < numRequestedPayloadFields; i++) -->Line_33 $$ for (int i = 0; i < numRequestedPayloadFields; i++) [ FD ]
Line_20 $$ for (int i = 0; i < numRequestedPayloadFields; i++) -->Line_21 $$ payloadFields[i] = "test_field" + i[ FD ]
Line_33 $$ for (int i = 0; i < numRequestedPayloadFields; i++) -->Line_35 $$ assertNotNull(fieldValue)[ CD ]
Line_5 $$ int numDocs = randomIntBetween(10, 100)-->Line_17 $$ int suggestionSize = randomIntBetween(1, numDocs)[ FD ]
Line_18 $$ int numRequestedPayloadFields = randomIntBetween(2, numPayloadFields)-->Line_32 $$ assertThat(option.getPayload().size(), equalTo(numRequestedPayloadFields))[ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_5 $$ int numDocs = randomIntBetween(10, 100)[ CD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_8 $$ for (int i = 1; i <= numDocs; i++) [ CD ]
Line_34 $$ List<Object> fieldValue = option.getPayload().get("test_field" + i)-->Line_36 $$ assertThat(fieldValue.size(), equalTo(1))[ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_26 $$ CompletionSuggestion completionSuggestion = suggestResponse.getSuggest().getSuggestion("foo")[ CD ]
Line_17 $$ int suggestionSize = randomIntBetween(1, numDocs)-->Line_28 $$ assertThat(options.getOptions().size(), equalTo(suggestionSize))[ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_24 $$ SuggestResponse suggestResponse = client().prepareSuggest(INDEX).addSuggestion(prefix).execute().actionGet()[ CD ]
Line_30 $$ for (CompletionSuggestion.Entry.Option option : options) -->Line_32 $$ assertThat(option.getPayload().size(), equalTo(numRequestedPayloadFields))[ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_23 $$ CompletionSuggestionBuilder prefix = SuggestBuilders.completionSuggestion("foo").field(FIELD).prefix("sugg").size(suggestionSize).payload(payloadFields)[ CD ]
Line_18 $$ int numRequestedPayloadFields = randomIntBetween(2, numPayloadFields)-->Line_20 $$ for (int i = 0; i < numRequestedPayloadFields; i++) [ FD ]
Line_33 $$ for (int i = 0; i < numRequestedPayloadFields; i++) -->Line_34 $$ List<Object> fieldValue = option.getPayload().get("test_field" + i)[ CD ]
Line_7 $$ List<IndexRequestBuilder> indexRequestBuilders = new ArrayList()-->Line_16 $$ indexRandom(true, indexRequestBuilders)[ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_16 $$ indexRandom(true, indexRequestBuilders)[ CD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_3 $$ final CompletionMappingBuilder mapping = new CompletionMappingBuilder()[ CD ]
Line_24 $$ SuggestResponse suggestResponse = client().prepareSuggest(INDEX).addSuggestion(prefix).execute().actionGet()-->Line_25 $$ assertNoFailures(suggestResponse)[ FD ]
Line_27 $$ CompletionSuggestion.Entry options = completionSuggestion.getEntries().get(0)-->Line_28 $$ assertThat(options.getOptions().size(), equalTo(suggestionSize))[ FD ]
Line_9 $$ XContentBuilder source = jsonBuilder().startObject().startObject(FIELD).field("input", "suggestion" + i).field("weight", i).endObject()-->Line_14 $$ indexRequestBuilders.add(client().prepareIndex(INDEX, TYPE, "" + i).setSource(source))[ FD ]
Line_8 $$ for (int i = 1; i <= numDocs; i++) -->Line_21 $$ payloadFields[i] = "test_field" + i[ FD ]
Line_18 $$ int numRequestedPayloadFields = randomIntBetween(2, numPayloadFields)-->Line_33 $$ for (int i = 0; i < numRequestedPayloadFields; i++) [ FD ]
Line_8 $$ for (int i = 1; i <= numDocs; i++) -->Line_20 $$ for (int i = 0; i < numRequestedPayloadFields; i++) [ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_25 $$ assertNoFailures(suggestResponse)[ CD ]
Line_8 $$ for (int i = 1; i <= numDocs; i++) -->Line_9 $$ XContentBuilder source = jsonBuilder().startObject().startObject(FIELD).field("input", "suggestion" + i).field("weight", i).endObject()[ CD ]
Line_6 $$ int numPayloadFields = randomIntBetween(2, 5)-->Line_10 $$ for (int j = 0; j < numPayloadFields; j++) [ FD ]
Line_24 $$ SuggestResponse suggestResponse = client().prepareSuggest(INDEX).addSuggestion(prefix).execute().actionGet()-->Line_26 $$ CompletionSuggestion completionSuggestion = suggestResponse.getSuggest().getSuggestion("foo")[ FD ]
Line_3 $$ final CompletionMappingBuilder mapping = new CompletionMappingBuilder()-->Line_4 $$ createIndexAndMapping(mapping)[ FD ]
Line_9 $$ XContentBuilder source = jsonBuilder().startObject().startObject(FIELD).field("input", "suggestion" + i).field("weight", i).endObject()-->Line_11 $$ source.field("test_field" + j, j + "value" + i)[ FD ]
Line_34 $$ List<Object> fieldValue = option.getPayload().get("test_field" + i)-->Line_35 $$ assertNotNull(fieldValue)[ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_7 $$ List<IndexRequestBuilder> indexRequestBuilders = new ArrayList()[ CD ]
Line_33 $$ for (int i = 0; i < numRequestedPayloadFields; i++) -->Line_36 $$ assertThat(fieldValue.size(), equalTo(1))[ CD ]
Line_8 $$ for (int i = 1; i <= numDocs; i++) -->Line_33 $$ for (int i = 0; i < numRequestedPayloadFields; i++) [ FD ]
Line_19 $$ String[] payloadFields = new String[numRequestedPayloadFields]-->Line_23 $$ CompletionSuggestionBuilder prefix = SuggestBuilders.completionSuggestion("foo").field(FIELD).prefix("sugg").size(suggestionSize).payload(payloadFields)[ FD ]
Line_7 $$ List<IndexRequestBuilder> indexRequestBuilders = new ArrayList()-->Line_14 $$ indexRequestBuilders.add(client().prepareIndex(INDEX, TYPE, "" + i).setSource(source))[ FD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_19 $$ String[] payloadFields = new String[numRequestedPayloadFields][ CD ]
Line_6 $$ int numPayloadFields = randomIntBetween(2, 5)-->Line_18 $$ int numRequestedPayloadFields = randomIntBetween(2, numPayloadFields)[ FD ]
Line_30 $$ for (CompletionSuggestion.Entry.Option option : options) -->Line_34 $$ List<Object> fieldValue = option.getPayload().get("test_field" + i)[ FD ]
Line_26 $$ CompletionSuggestion completionSuggestion = suggestResponse.getSuggest().getSuggestion("foo")-->Line_27 $$ CompletionSuggestion.Entry options = completionSuggestion.getEntries().get(0)[ FD ]
Line_8 $$ for (int i = 1; i <= numDocs; i++) -->Line_13 $$ source.endObject()[ CD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_6 $$ int numPayloadFields = randomIntBetween(2, 5)[ CD ]
Line_2 $$ public void testSuggestWithPayload() throws Exception -->Line_4 $$ createIndexAndMapping(mapping)[ CD ]
