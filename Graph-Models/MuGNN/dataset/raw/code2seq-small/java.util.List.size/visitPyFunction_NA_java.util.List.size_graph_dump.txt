Line_19 $$ if (suffixIndex == 0) -->Line_22 $$ checkDeleter(node, markable)[ CD ]
Line_2 $$ public void visitPyFunction(PyFunction node) -->Line_5 $$ PyClass cls = node.getContainingClass()[ FD ]
Line_2 $$ public void visitPyFunction(PyFunction node) -->Line_3 $$ super.visitPyFunction(node)[ CD ]
Line_15 $$ final int suffixIndex = SUFFIXES.indexOf(nameParts.get(1))-->Line_19 $$ if (suffixIndex == 0) [ FD ]
Line_5 $$ PyClass cls = node.getContainingClass()-->Line_6 $$ if (cls != null) [ FD ]
Line_4 $$ if (myLevel.isAtLeast(LanguageLevel.PYTHON26)) -->Line_6 $$ if (cls != null) [ CD ]
Line_17 $$ if (Comparing.equal(name, nameParts.get(0))) -->Line_18 $$ PsiElement markable = getFunctionMarkingElement(node)[ CD ]
Line_10 $$ for (PyDecorator deco : decos.getDecorators()) -->Line_25 $$ registerProblem(deco, PyBundle.message("INSP.func.property.name.mismatch"))[ FD ]
Line_14 $$ if (nameParts.size() == 2) -->Line_15 $$ final int suffixIndex = SUFFIXES.indexOf(nameParts.get(1))[ CD ]
Line_15 $$ final int suffixIndex = SUFFIXES.indexOf(nameParts.get(1))-->Line_16 $$ if (suffixIndex >= 0) [ FD ]
Line_2 $$ public void visitPyFunction(PyFunction node) -->Line_4 $$ if (myLevel.isAtLeast(LanguageLevel.PYTHON26)) [ CD ]
Line_18 $$ PsiElement markable = getFunctionMarkingElement(node)-->Line_22 $$ checkDeleter(node, markable)[ FD ]
Line_2 $$ public void visitPyFunction(PyFunction node) -->Line_3 $$ super.visitPyFunction(node)[ FD ]
Line_12 $$ if (qName != null) -->Line_13 $$ List<String> nameParts = qName.getComponents()[ CD ]
Line_2 $$ public void visitPyFunction(PyFunction node) -->Line_9 $$ String name = node.getName()[ FD ]
Line_2 $$ public void visitPyFunction(PyFunction node) -->Line_20 $$ checkSetter(node, markable)[ FD ]
Line_2 $$ public void visitPyFunction(PyFunction node) -->Line_18 $$ PsiElement markable = getFunctionMarkingElement(node)[ FD ]
Line_9 $$ String name = node.getName()-->Line_17 $$ if (Comparing.equal(name, nameParts.get(0))) [ FD ]
Line_16 $$ if (suffixIndex >= 0) -->Line_17 $$ if (Comparing.equal(name, nameParts.get(0))) [ CD ]
Line_7 $$ final PyDecoratorList decos = node.getDecoratorList()-->Line_8 $$ if (decos != null) [ FD ]
Line_18 $$ PsiElement markable = getFunctionMarkingElement(node)-->Line_20 $$ checkSetter(node, markable)[ FD ]
Line_2 $$ public void visitPyFunction(PyFunction node) -->Line_22 $$ checkDeleter(node, markable)[ FD ]
Line_17 $$ if (Comparing.equal(name, nameParts.get(0))) -->Line_19 $$ if (suffixIndex == 0) [ CD ]
Line_10 $$ for (PyDecorator deco : decos.getDecorators()) -->Line_11 $$ final QualifiedName qName = deco.getQualifiedName()[ FD ]
Line_14 $$ if (nameParts.size() == 2) -->Line_16 $$ if (suffixIndex >= 0) [ CD ]
Line_11 $$ final QualifiedName qName = deco.getQualifiedName()-->Line_12 $$ if (qName != null) [ FD ]
Line_6 $$ if (cls != null) -->Line_7 $$ final PyDecoratorList decos = node.getDecoratorList()[ CD ]
Line_17 $$ if (Comparing.equal(name, nameParts.get(0))) -->Line_25 $$ registerProblem(deco, PyBundle.message("INSP.func.property.name.mismatch"))[ CD ]
Line_19 $$ if (suffixIndex == 0) -->Line_20 $$ checkSetter(node, markable)[ CD ]
Line_6 $$ if (cls != null) -->Line_8 $$ if (decos != null) [ CD ]
Line_8 $$ if (decos != null) -->Line_9 $$ String name = node.getName()[ CD ]
Line_4 $$ if (myLevel.isAtLeast(LanguageLevel.PYTHON26)) -->Line_5 $$ PyClass cls = node.getContainingClass()[ CD ]
Line_13 $$ List<String> nameParts = qName.getComponents()-->Line_17 $$ if (Comparing.equal(name, nameParts.get(0))) [ FD ]
Line_11 $$ final QualifiedName qName = deco.getQualifiedName()-->Line_13 $$ List<String> nameParts = qName.getComponents()[ FD ]
Line_7 $$ final PyDecoratorList decos = node.getDecoratorList()-->Line_10 $$ for (PyDecorator deco : decos.getDecorators()) [ FD ]
Line_13 $$ List<String> nameParts = qName.getComponents()-->Line_15 $$ final int suffixIndex = SUFFIXES.indexOf(nameParts.get(1))[ FD ]
Line_2 $$ public void visitPyFunction(PyFunction node) -->Line_7 $$ final PyDecoratorList decos = node.getDecoratorList()[ FD ]
Line_12 $$ if (qName != null) -->Line_14 $$ if (nameParts.size() == 2) [ CD ]
Line_13 $$ List<String> nameParts = qName.getComponents()-->Line_14 $$ if (nameParts.size() == 2) [ FD ]
