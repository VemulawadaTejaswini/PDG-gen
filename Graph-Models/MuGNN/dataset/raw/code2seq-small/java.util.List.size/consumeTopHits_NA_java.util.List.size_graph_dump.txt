Line_12 $$ if (getId().startsWith(id) || pattern.startsWith(" ")) -->Line_13 $$ if (pattern.startsWith(" ")) [ CD ]
Line_18 $$ final MinusculeMatcher matcher = NameUtil.buildMatcher("*" + pattern, NameUtil.MatchingCaseSensitivity.NONE)-->Line_20 $$ if (matcher.matches(option.getOption())) [ FD ]
Line_11 $$ String id = parts.get(0)-->Line_12 $$ if (getId().startsWith(id) || pattern.startsWith(" ")) [ FD ]
Line_13 $$ if (pattern.startsWith(" ")) -->Line_14 $$ pattern = pattern.trim()[ CD ]
Line_7 $$ final List<String> parts = StringUtil.split(pattern, " ")-->Line_11 $$ String id = parts.get(0)[ FD ]
Line_11 $$ String id = parts.get(0)-->Line_16 $$ pattern = pattern.substring(id.length()).trim().toLowerCase()[ FD ]
Line_19 $$ for (BooleanOptionDescription option : getOptions(project)) -->Line_20 $$ if (matcher.matches(option.getOption())) [ FD ]
Line_4 $$ if (!pattern.startsWith("#"))-->Line_5 $$ return[ CD ]
Line_12 $$ if (getId().startsWith(id) || pattern.startsWith(" ")) -->Line_18 $$ final MinusculeMatcher matcher = NameUtil.buildMatcher("*" + pattern, NameUtil.MatchingCaseSensitivity.NONE)[ CD ]
Line_20 $$ if (matcher.matches(option.getOption())) -->Line_21 $$ collector.consume(option)[ CD ]
Line_8 $$ if (parts.size() == 0) -->Line_9 $$ return[ CD ]
Line_7 $$ final List<String> parts = StringUtil.split(pattern, " ")-->Line_8 $$ if (parts.size() == 0) [ FD ]
Line_19 $$ for (BooleanOptionDescription option : getOptions(project)) -->Line_21 $$ collector.consume(option)[ FD ]
Line_13 $$ if (pattern.startsWith(" ")) -->Line_16 $$ pattern = pattern.substring(id.length()).trim().toLowerCase()[ CD ]
