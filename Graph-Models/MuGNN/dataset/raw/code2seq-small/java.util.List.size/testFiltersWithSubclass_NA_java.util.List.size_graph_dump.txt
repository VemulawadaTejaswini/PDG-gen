Line_10 $$ results = s.createQuery("from Person").list()-->Line_17 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_3 $$ Session s = openSession()-->Line_45 $$ s.createQuery("delete Person").executeUpdate()[ FD ]
Line_13 $$ results = s.createQuery("from Employee").list()-->Line_18 $$ itr = results.iterator()[ FD ]
Line_10 $$ results = s.createQuery("from Person").list()-->Line_29 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_9 $$ Iterator itr-->Line_30 $$ itr = results.iterator()[ FD ]
Line_8 $$ List results-->Line_18 $$ itr = results.iterator()[ FD ]
Line_42 $$ t = s.beginTransaction()-->Line_46 $$ t.commit()[ FD ]
Line_41 $$ s = openSession()-->Line_45 $$ s.createQuery("delete Person").executeUpdate()[ FD ]
Line_13 $$ results = s.createQuery("from Employee").list()-->Line_28 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_18 $$ itr = results.iterator()-->Line_31 $$ while (itr.hasNext()) [ FD ]
Line_30 $$ itr = results.iterator()-->Line_32 $$ final Person p = (Person) itr.next()[ FD ]
Line_13 $$ results = s.createQuery("from Employee").list()-->Line_29 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_18 $$ itr = results.iterator()-->Line_19 $$ while (itr.hasNext()) [ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_11 $$ assertEquals("Incorrect qry result count", 4, results.size())[ CD ]
Line_21 $$ if (p.getName().equals("John Doe")) -->Line_23 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_30 $$ itr = results.iterator()[ CD ]
Line_22 $$ Employee john = (Employee) p-->Line_35 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_17 $$ assertEquals("Incorrect qry result count", 4, results.size())[ CD ]
Line_41 $$ s = openSession()-->Line_44 $$ s.createQuery("delete Employee where manager is not null").executeUpdate()[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_7 $$ s.clear()[ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_27 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_6 $$ prepareTestData(s)[ FD ]
Line_3 $$ Session s = openSession()-->Line_5 $$ Transaction t = s.beginTransaction()[ FD ]
Line_30 $$ itr = results.iterator()-->Line_31 $$ while (itr.hasNext()) [ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s = openSession()[ FD ]
Line_8 $$ List results-->Line_17 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_8 $$ List results[ CD ]
Line_8 $$ List results-->Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_41 $$ s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_8 $$ List results-->Line_30 $$ itr = results.iterator()[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_6 $$ prepareTestData(s)[ CD ]
Line_10 $$ results = s.createQuery("from Person").list()-->Line_30 $$ itr = results.iterator()[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_28 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ CD ]
Line_33 $$ if (p.getName().equals("John Doe")) -->Line_35 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_44 $$ s.createQuery("delete Employee where manager is not null").executeUpdate()[ CD ]
Line_10 $$ results = s.createQuery("from Person").list()-->Line_11 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_29 $$ assertEquals("Incorrect qry result count", 2, results.size())[ CD ]
Line_8 $$ List results-->Line_11 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_8 $$ List results-->Line_14 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_21 $$ if (p.getName().equals("John Doe")) -->Line_22 $$ Employee john = (Employee) p[ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ CD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ s.createQuery("delete Employee where manager is not null").executeUpdate()[ FD ]
Line_13 $$ results = s.createQuery("from Employee").list()-->Line_14 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ s.close()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_46 $$ t.commit()[ FD ]
Line_18 $$ itr = results.iterator()-->Line_32 $$ final Person p = (Person) itr.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ s.clear()[ FD ]
Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_29 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_10 $$ results = s.createQuery("from Person").list()[ CD ]
Line_34 $$ Employee john = (Employee) p-->Line_35 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_41 $$ s = openSession()[ CD ]
Line_9 $$ Iterator itr-->Line_31 $$ while (itr.hasNext()) [ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_13 $$ results = s.createQuery("from Employee").list()[ CD ]
Line_31 $$ while (itr.hasNext()) -->Line_32 $$ final Person p = (Person) itr.next()[ CD ]
Line_28 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))-->Line_30 $$ itr = results.iterator()[ FD ]
Line_9 $$ Iterator itr-->Line_32 $$ final Person p = (Person) itr.next()[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_43 $$ s.createQuery("delete Customer where contactOwner is not null").executeUpdate()[ CD ]
Line_41 $$ s = openSession()-->Line_47 $$ s.close()[ FD ]
Line_8 $$ List results-->Line_13 $$ results = s.createQuery("from Employee").list()[ FD ]
Line_10 $$ results = s.createQuery("from Person").list()-->Line_14 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_12 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_22 $$ Employee john = (Employee) p-->Line_23 $$ assertEquals("Incorrect fecthed minions count", 1, john.getMinions().size())[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_46 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ results = s.createQuery("from Employee").list()[ FD ]
Line_31 $$ while (itr.hasNext()) -->Line_33 $$ if (p.getName().equals("John Doe")) [ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_18 $$ itr = results.iterator()[ CD ]
Line_32 $$ final Person p = (Person) itr.next()-->Line_33 $$ if (p.getName().equals("John Doe")) [ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_31 $$ while (itr.hasNext()) [ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_19 $$ while (itr.hasNext()) [ CD ]
Line_13 $$ results = s.createQuery("from Employee").list()-->Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_7 $$ s.clear()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ while (itr.hasNext()) -->Line_20 $$ final Person p = (Person) itr.next()[ CD ]
Line_8 $$ List results-->Line_29 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ results = s.createQuery("from Person").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ s.close()[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_9 $$ Iterator itr[ CD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ s.clear()[ FD ]
Line_10 $$ results = s.createQuery("from Person").list()-->Line_28 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ s.createQuery("delete Customer where contactOwner is not null").executeUpdate()[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_4 $$ s.enableFilter("region").setParameter("userRegion", "US")[ CD ]
Line_20 $$ final Person p = (Person) itr.next()-->Line_21 $$ if (p.getName().equals("John Doe")) [ FD ]
Line_13 $$ results = s.createQuery("from Employee").list()-->Line_17 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_9 $$ Iterator itr-->Line_20 $$ final Person p = (Person) itr.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_42 $$ t = s.beginTransaction()[ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_39 $$ t.commit()[ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_5 $$ Transaction t = s.beginTransaction()[ CD ]
Line_20 $$ final Person p = (Person) itr.next()-->Line_33 $$ if (p.getName().equals("John Doe")) [ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_14 $$ assertEquals("Incorrect qry result count", 2, results.size())[ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_3 $$ Session s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_28 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_40 $$ s.close()[ CD ]
Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_17 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_28 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))-->Line_29 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_18 $$ itr = results.iterator()[ FD ]
Line_8 $$ List results-->Line_28 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_45 $$ s.createQuery("delete Person").executeUpdate()[ CD ]
Line_9 $$ Iterator itr-->Line_19 $$ while (itr.hasNext()) [ FD ]
Line_10 $$ results = s.createQuery("from Person").list()-->Line_18 $$ itr = results.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.enableFilter("region").setParameter("userRegion", "US")[ FD ]
Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_30 $$ itr = results.iterator()[ FD ]
Line_18 $$ itr = results.iterator()-->Line_20 $$ final Person p = (Person) itr.next()[ FD ]
Line_10 $$ results = s.createQuery("from Person").list()-->Line_13 $$ results = s.createQuery("from Employee").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.clear()[ FD ]
Line_8 $$ List results-->Line_10 $$ results = s.createQuery("from Person").list()[ FD ]
Line_33 $$ if (p.getName().equals("John Doe")) -->Line_34 $$ Employee john = (Employee) p[ CD ]
Line_9 $$ Iterator itr-->Line_18 $$ itr = results.iterator()[ FD ]
Line_10 $$ results = s.createQuery("from Person").list()-->Line_16 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_13 $$ results = s.createQuery("from Employee").list()-->Line_30 $$ itr = results.iterator()[ FD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_47 $$ s.close()[ CD ]
Line_41 $$ s = openSession()-->Line_43 $$ s.createQuery("delete Customer where contactOwner is not null").executeUpdate()[ FD ]
Line_19 $$ while (itr.hasNext()) -->Line_21 $$ if (p.getName().equals("John Doe")) [ CD ]
Line_2 $$ public void testFiltersWithSubclass() -->Line_15 $$ s.clear()[ CD ]
Line_18 $$ itr = results.iterator()-->Line_30 $$ itr = results.iterator()[ FD ]
