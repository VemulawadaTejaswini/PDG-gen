Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)[ CD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_8 $$ List<SinglePartitionReadCommand> commands = new ArrayList(keys.size())[ CD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_6 $$ org.apache.cassandra.db.ConsistencyLevel consistencyLevel = ThriftConversion.fromThrift(consistency_level)[ CD ]
Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)-->Line_9 $$ ColumnFilter columnFilter = makeColumnFilter(metadata, column_parent, predicate)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_10 $$ ClusteringIndexFilter filter = toInternalFilter(metadata, column_parent, predicate)[ CD ]
Line_11 $$ DataLimits limits = getLimits(1, metadata.isSuper() && !column_parent.isSetSuper_column(), predicate)-->Line_17 $$ return getSlice(commands, column_parent.isSetSuper_column(), limits.perPartitionCount(), consistencyLevel, cState)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_7 $$ consistencyLevel.validateForRead(keyspace)[ FD ]
Line_14 $$ DecoratedKey dk = metadata.decorateKey(key)-->Line_15 $$ commands.add(SinglePartitionReadCommand.create(true, metadata, nowInSec, columnFilter, RowFilter.NONE, limits, dk, filter))[ FD ]
Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)-->Line_5 $$ ThriftValidation.validatePredicate(metadata, column_parent, predicate)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_10 $$ ClusteringIndexFilter filter = toInternalFilter(metadata, column_parent, predicate)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_7 $$ consistencyLevel.validateForRead(keyspace)[ CD ]
Line_8 $$ List<SinglePartitionReadCommand> commands = new ArrayList(keys.size())-->Line_15 $$ commands.add(SinglePartitionReadCommand.create(true, metadata, nowInSec, columnFilter, RowFilter.NONE, limits, dk, filter))[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_11 $$ DataLimits limits = getLimits(1, metadata.isSuper() && !column_parent.isSetSuper_column(), predicate)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_8 $$ List<SinglePartitionReadCommand> commands = new ArrayList(keys.size())[ FD ]
Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)-->Line_13 $$ ThriftValidation.validateKey(metadata, key)[ FD ]
Line_12 $$ for (ByteBuffer key : keys) -->Line_14 $$ DecoratedKey dk = metadata.decorateKey(key)[ FD ]
Line_11 $$ DataLimits limits = getLimits(1, metadata.isSuper() && !column_parent.isSetSuper_column(), predicate)-->Line_15 $$ commands.add(SinglePartitionReadCommand.create(true, metadata, nowInSec, columnFilter, RowFilter.NONE, limits, dk, filter))[ FD ]
Line_10 $$ ClusteringIndexFilter filter = toInternalFilter(metadata, column_parent, predicate)-->Line_15 $$ commands.add(SinglePartitionReadCommand.create(true, metadata, nowInSec, columnFilter, RowFilter.NONE, limits, dk, filter))[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_17 $$ return getSlice(commands, column_parent.isSetSuper_column(), limits.perPartitionCount(), consistencyLevel, cState)[ CD ]
Line_6 $$ org.apache.cassandra.db.ConsistencyLevel consistencyLevel = ThriftConversion.fromThrift(consistency_level)-->Line_7 $$ consistencyLevel.validateForRead(keyspace)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_9 $$ ColumnFilter columnFilter = makeColumnFilter(metadata, column_parent, predicate)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_6 $$ org.apache.cassandra.db.ConsistencyLevel consistencyLevel = ThriftConversion.fromThrift(consistency_level)[ FD ]
Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)-->Line_11 $$ DataLimits limits = getLimits(1, metadata.isSuper() && !column_parent.isSetSuper_column(), predicate)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_9 $$ ColumnFilter columnFilter = makeColumnFilter(metadata, column_parent, predicate)[ CD ]
Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)-->Line_4 $$ ThriftValidation.validateColumnParent(metadata, column_parent)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_5 $$ ThriftValidation.validatePredicate(metadata, column_parent, predicate)[ CD ]
Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)-->Line_15 $$ commands.add(SinglePartitionReadCommand.create(true, metadata, nowInSec, columnFilter, RowFilter.NONE, limits, dk, filter))[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_4 $$ ThriftValidation.validateColumnParent(metadata, column_parent)[ CD ]
Line_9 $$ ColumnFilter columnFilter = makeColumnFilter(metadata, column_parent, predicate)-->Line_15 $$ commands.add(SinglePartitionReadCommand.create(true, metadata, nowInSec, columnFilter, RowFilter.NONE, limits, dk, filter))[ FD ]
Line_6 $$ org.apache.cassandra.db.ConsistencyLevel consistencyLevel = ThriftConversion.fromThrift(consistency_level)-->Line_17 $$ return getSlice(commands, column_parent.isSetSuper_column(), limits.perPartitionCount(), consistencyLevel, cState)[ FD ]
Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)-->Line_14 $$ DecoratedKey dk = metadata.decorateKey(key)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)[ FD ]
Line_8 $$ List<SinglePartitionReadCommand> commands = new ArrayList(keys.size())-->Line_17 $$ return getSlice(commands, column_parent.isSetSuper_column(), limits.perPartitionCount(), consistencyLevel, cState)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_17 $$ return getSlice(commands, column_parent.isSetSuper_column(), limits.perPartitionCount(), consistencyLevel, cState)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_5 $$ ThriftValidation.validatePredicate(metadata, column_parent, predicate)[ FD ]
Line_3 $$ CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family)-->Line_10 $$ ClusteringIndexFilter filter = toInternalFilter(metadata, column_parent, predicate)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_11 $$ DataLimits limits = getLimits(1, metadata.isSuper() && !column_parent.isSetSuper_column(), predicate)[ CD ]
Line_12 $$ for (ByteBuffer key : keys) -->Line_13 $$ ThriftValidation.validateKey(metadata, key)[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_15 $$ commands.add(SinglePartitionReadCommand.create(true, metadata, nowInSec, columnFilter, RowFilter.NONE, limits, dk, filter))[ FD ]
Line_2 $$ private Map<ByteBuffer, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<ByteBuffer> keys, ColumnParent column_parent, int nowInSec, SlicePredicate predicate, ConsistencyLevel consistency_level, ClientState cState) throws org.apache.cassandra.exceptions.InvalidRequestException, UnavailableException, TimedOutException -->Line_4 $$ ThriftValidation.validateColumnParent(metadata, column_parent)[ FD ]
