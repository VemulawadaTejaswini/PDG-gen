Line_4 $$ processSortedListsInOrder(list1, list2, comparator, mergeEqualItems, new Processor<T>() -->Line_6 $$ result.add(t)[ CD ]
Line_2 $$ public static <T> List<T> mergeSortedLists(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems) -->Line_3 $$ final List<T> result = new ArrayList<T>(list1.size() + list2.size())[ FD ]
Line_4 $$ processSortedListsInOrder(list1, list2, comparator, mergeEqualItems, new Processor<T>() -->Line_6 $$ result.add(t)[ FD ]
Line_4 $$ processSortedListsInOrder(list1, list2, comparator, mergeEqualItems, new Processor<T>() -->Line_7 $$ return true[ CD ]
Line_2 $$ public static <T> List<T> mergeSortedLists(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems) -->Line_4 $$ processSortedListsInOrder(list1, list2, comparator, mergeEqualItems, new Processor<T>() [ CD ]
Line_2 $$ public static <T> List<T> mergeSortedLists(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems) -->Line_3 $$ final List<T> result = new ArrayList<T>(list1.size() + list2.size())[ CD ]
Line_3 $$ final List<T> result = new ArrayList<T>(list1.size() + list2.size())-->Line_6 $$ result.add(t)[ FD ]
Line_2 $$ public static <T> List<T> mergeSortedLists(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems) -->Line_10 $$ return result[ CD ]
Line_2 $$ public static <T> List<T> mergeSortedLists(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems) -->Line_4 $$ processSortedListsInOrder(list1, list2, comparator, mergeEqualItems, new Processor<T>() [ FD ]
