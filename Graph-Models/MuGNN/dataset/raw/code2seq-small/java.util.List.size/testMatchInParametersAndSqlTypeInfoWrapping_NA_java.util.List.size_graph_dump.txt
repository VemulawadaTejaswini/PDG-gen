Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_13 $$ given(columnsResultSet.getString("COLUMN_NAME")).willReturn("id", "name", "customersince", "version")[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_15 $$ given(columnsResultSet.getBoolean("NULLABLE")).willReturn(false, true, true, false)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_10 $$ given(metaDataResultSet.getString("TABLE_TYPE")).willReturn("TABLE")[ FD ]
Line_22 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_31 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)[ FD ]
Line_22 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_27 $$ map.registerSqlType("customersince", Types.DATE)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_20 $$ given(databaseMetaData.getTables(null, null, TABLE, null)).willReturn(metaDataResultSet)[ FD ]
Line_5 $$ final String USER = "me"-->Line_18 $$ given(databaseMetaData.getUserName()).willReturn(USER)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_14 $$ given(columnsResultSet.getInt("DATA_TYPE")).willReturn(Types.INTEGER, Types.VARCHAR, Types.DATE, Types.NUMERIC)[ FD ]
Line_4 $$ final String TABLE = "customers"-->Line_9 $$ given(metaDataResultSet.getString("TABLE_NAME")).willReturn(TABLE)[ FD ]
Line_31 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_32 $$ assertEquals("wrong number of parameters: ", 4, values.size())[ FD ]
Line_5 $$ final String USER = "me"-->Line_21 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_21 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_40 $$ verify(columnsResultSet).close()[ FD ]
Line_31 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_35 $$ assertTrue("date wrapped with type info", values.get(2) instanceof SqlParameterValue)[ FD ]
Line_31 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_36 $$ assertTrue("version wrapped with type info", values.get(3) instanceof SqlParameterValue)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_37 $$ verify(metaDataResultSet, atLeastOnce()).next()[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_38 $$ verify(columnsResultSet, atLeastOnce()).next()[ FD ]
Line_31 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_33 $$ assertTrue("id not wrapped with type info", values.get(0) instanceof Number)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_7 $$ given(metaDataResultSet.next()).willReturn(true, false)[ FD ]
Line_4 $$ final String TABLE = "customers"-->Line_29 $$ context.setTableName(TABLE)[ FD ]
Line_4 $$ final String TABLE = "customers"-->Line_20 $$ given(databaseMetaData.getTables(null, null, TABLE, null)).willReturn(metaDataResultSet)[ FD ]
Line_22 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_24 $$ map.addValue("name", "Sven")[ FD ]
Line_31 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_34 $$ assertTrue("name not wrapped with type info", values.get(1) instanceof String)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_39 $$ verify(metaDataResultSet).close()[ FD ]
Line_22 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_26 $$ map.addValue("version", 0)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_12 $$ given(columnsResultSet.next()).willReturn(true, true, true, true, false)[ FD ]
Line_4 $$ final String TABLE = "customers"-->Line_21 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ FD ]
Line_22 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_28 $$ map.registerSqlType("version", Types.NUMERIC)[ FD ]
Line_5 $$ final String USER = "me"-->Line_8 $$ given(metaDataResultSet.getString("TABLE_SCHEM")).willReturn(USER)[ FD ]
Line_22 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_23 $$ map.addValue("id", 1)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_8 $$ given(metaDataResultSet.getString("TABLE_SCHEM")).willReturn(USER)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_9 $$ given(metaDataResultSet.getString("TABLE_NAME")).willReturn(TABLE)[ FD ]
Line_22 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_25 $$ map.addValue("customersince", new Date())[ FD ]
