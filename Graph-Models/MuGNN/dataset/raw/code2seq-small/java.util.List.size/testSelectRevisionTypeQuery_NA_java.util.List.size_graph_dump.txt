Line_3 $$ List result = getAuditReader().createQuery().forRevisionsOfEntity(StrIntTestEntity.class, false, true).addProjection(AuditEntity.revisionType()).add(AuditEntity.id().eq(id1)).getResultList()-->Line_5 $$ assert result.get(0).equals(RevisionType.ADD)[ FD ]
Line_3 $$ List result = getAuditReader().createQuery().forRevisionsOfEntity(StrIntTestEntity.class, false, true).addProjection(AuditEntity.revisionType()).add(AuditEntity.id().eq(id1)).getResultList()-->Line_7 $$ assert result.get(2).equals(RevisionType.DEL)[ FD ]
Line_3 $$ List result = getAuditReader().createQuery().forRevisionsOfEntity(StrIntTestEntity.class, false, true).addProjection(AuditEntity.revisionType()).add(AuditEntity.id().eq(id1)).getResultList()-->Line_4 $$ assert result.size() == 3[ FD ]
Line_2 $$ public void testSelectRevisionTypeQuery() -->Line_3 $$ List result = getAuditReader().createQuery().forRevisionsOfEntity(StrIntTestEntity.class, false, true).addProjection(AuditEntity.revisionType()).add(AuditEntity.id().eq(id1)).getResultList()[ CD ]
Line_3 $$ List result = getAuditReader().createQuery().forRevisionsOfEntity(StrIntTestEntity.class, false, true).addProjection(AuditEntity.revisionType()).add(AuditEntity.id().eq(id1)).getResultList()-->Line_6 $$ assert result.get(1).equals(RevisionType.MOD)[ FD ]
