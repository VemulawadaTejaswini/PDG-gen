Line_2 $$ private static void runPatchers(List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, CompilationUnit unit, final AstAwareResourceLoader loader, List<File> srcFiles) -->Line_3 $$ if (!patchers.isEmpty()) [ CD ]
Line_4 $$ for (CompilationUnitPatcher patcher : patchers) -->Line_6 $$ patcher.patchCompilationUnit(unit, loader, srcFiles.toArray(new File[srcFiles.size()]))[ FD ]
Line_2 $$ private static void runPatchers(List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, CompilationUnit unit, final AstAwareResourceLoader loader, List<File> srcFiles) -->Line_6 $$ patcher.patchCompilationUnit(unit, loader, srcFiles.toArray(new File[srcFiles.size()]))[ FD ]
Line_4 $$ for (CompilationUnitPatcher patcher : patchers) -->Line_8 $$ addExceptionInfo(compilerMessages, e, "Couldn't run " + patcher.getClass().getName())[ FD ]
Line_2 $$ private static void runPatchers(List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, CompilationUnit unit, final AstAwareResourceLoader loader, List<File> srcFiles) -->Line_3 $$ if (!patchers.isEmpty()) [ FD ]
Line_2 $$ private static void runPatchers(List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, CompilationUnit unit, final AstAwareResourceLoader loader, List<File> srcFiles) -->Line_8 $$ addExceptionInfo(compilerMessages, e, "Couldn't run " + patcher.getClass().getName())[ FD ]
