Line_20 $$ if (doUnion) -->Line_24 $$ params3 = new LinkedHashMap(params1)[ CD ]
Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_39 $$ if (sql == null) -->Line_46 $$ findByC_PG_N_D_SQL = replaceOrderBy(findByC_PG_N_D_SQL, obc)[ CD ]
Line_15 $$ LinkedHashMap<String, Object> params3 = null-->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)-->Line_73 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_81 $$ qPos.add(companyId)[ FD ]
Line_85 $$ if (doUnion) -->Line_87 $$ qPos.add(companyId)[ CD ]
Line_42 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "AND (Group_.classNameId = ?)", StringPool.BLANK)-->Line_49 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params1))[ FD ]
Line_27 $$ params4 = new LinkedHashMap(params1)-->Line_96 $$ setJoin(qPos, params4)[ FD ]
Line_10 $$ if (params == null) -->Line_11 $$ params = _emptyLinkedHashMap[ CD ]
Line_64 $$ sql = sb.toString()-->Line_72 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_8 $$ names = CustomSQLUtil.keywords(names)-->Line_94 $$ qPos.add(names, 2)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_64 $$ sql = sb.toString()[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params2 = null-->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_40 $$ String findByC_PG_N_D_SQL = CustomSQLUtil.get(FIND_BY_C_C_PG_N_D)-->Line_53 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params2))[ FD ]
Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)-->Line_67 $$ _findByC_C_PG_N_DSQLCache.put(sqlKey, sql)[ FD ]
Line_6 $$ parentGroupIdComparator = StringPool.NOT_EQUAL-->Line_70 $$ sql = StringUtil.replace(sql, "[$PARENT_GROUP_ID_COMPARATOR$]", parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_21 $$ params2 = new LinkedHashMap(params1)-->Line_22 $$ params2.remove("usersGroups")[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params2 = null-->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_32 $$ obc = new GroupNameComparator(true)-->Line_60 $$ if (obc != null) [ FD ]
Line_16 $$ LinkedHashMap<String, Object> params4 = null-->Line_29 $$ params4.put("groupsUserGroups", userId)[ FD ]
Line_17 $$ Long userId = (Long) params.get("usersGroups")-->Line_19 $$ boolean doUnion = Validator.isNotNull(userId) && inherit[ FD ]
Line_20 $$ if (doUnion) -->Line_26 $$ params3.put("groupsOrgs", userId)[ CD ]
Line_14 $$ LinkedHashMap<String, Object> params2 = null-->Line_23 $$ params2.put("groupOrg", userId)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_84 $$ qPos.add(descriptions, 2)[ FD ]
Line_64 $$ sql = sb.toString()-->Line_70 $$ sql = StringUtil.replace(sql, "[$PARENT_GROUP_ID_COMPARATOR$]", parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_60 $$ if (obc != null) -->Line_62 $$ sb.append(obc.toString())[ CD ]
Line_70 $$ sql = StringUtil.replace(sql, "[$PARENT_GROUP_ID_COMPARATOR$]", parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_71 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.name)", StringPool.LIKE, false, names)[ FD ]
Line_85 $$ if (doUnion) -->Line_96 $$ setJoin(qPos, params4)[ CD ]
Line_16 $$ LinkedHashMap<String, Object> params4 = null-->Line_28 $$ params4.remove("usersGroups")[ FD ]
Line_39 $$ if (sql == null) -->Line_64 $$ sql = sb.toString()[ CD ]
Line_15 $$ LinkedHashMap<String, Object> params3 = null-->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_34 $$ String sql = null-->Line_67 $$ _findByC_C_PG_N_DSQLCache.put(sqlKey, sql)[ FD ]
Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)-->Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_20 $$ if (doUnion) -->Line_23 $$ params2.put("groupOrg", userId)[ CD ]
Line_85 $$ if (doUnion) -->Line_91 $$ setJoin(qPos, params3)[ CD ]
Line_64 $$ sql = sb.toString()-->Line_71 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.name)", StringPool.LIKE, false, names)[ FD ]
Line_34 $$ String sql = null-->Line_72 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_8 $$ names = CustomSQLUtil.keywords(names)-->Line_89 $$ qPos.add(names, 2)[ FD ]
Line_44 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(classNameIds, " OR Group_.classNameId = ")))-->Line_53 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params2))[ FD ]
Line_85 $$ if (doUnion) -->Line_88 $$ qPos.add(parentGroupId)[ CD ]
Line_11 $$ params = _emptyLinkedHashMap-->Line_18 $$ boolean inherit = GetterUtil.getBoolean(params.get("inherit"), true)[ FD ]
Line_4 $$ String parentGroupIdComparator = StringPool.EQUAL-->Line_6 $$ parentGroupIdComparator = StringPool.NOT_EQUAL[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_91 $$ setJoin(qPos, params3)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_97 $$ qPos.add(companyId)[ FD ]
Line_85 $$ if (doUnion) -->Line_100 $$ qPos.add(descriptions, 2)[ CD ]
Line_39 $$ if (sql == null) -->Line_47 $$ StringBundler sb = new StringBundler(12)[ CD ]
Line_16 $$ LinkedHashMap<String, Object> params4 = null-->Line_27 $$ params4 = new LinkedHashMap(params1)[ FD ]
Line_46 $$ findByC_PG_N_D_SQL = replaceOrderBy(findByC_PG_N_D_SQL, obc)-->Line_55 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params3))[ FD ]
Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_78 $$ q.addScalar("groupId", Type.LONG)[ FD ]
Line_40 $$ String findByC_PG_N_D_SQL = CustomSQLUtil.get(FIND_BY_C_C_PG_N_D)-->Line_44 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(classNameIds, " OR Group_.classNameId = ")))[ FD ]
Line_39 $$ if (sql == null) -->Line_50 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)-->Line_39 $$ if (sql == null) [ FD ]
Line_19 $$ boolean doUnion = Validator.isNotNull(userId) && inherit-->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_21 $$ params2 = new LinkedHashMap(params1)-->Line_53 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params2))[ FD ]
Line_24 $$ params3 = new LinkedHashMap(params1)-->Line_55 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params3))[ FD ]
Line_73 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_85 $$ if (doUnion) -->Line_95 $$ qPos.add(descriptions, 2)[ CD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_48 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_51 $$ if (doUnion) -->Line_57 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params4))[ CD ]
Line_40 $$ String findByC_PG_N_D_SQL = CustomSQLUtil.get(FIND_BY_C_C_PG_N_D)-->Line_57 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params4))[ FD ]
Line_24 $$ params3 = new LinkedHashMap(params1)-->Line_91 $$ setJoin(qPos, params3)[ FD ]
Line_16 $$ LinkedHashMap<String, Object> params4 = null-->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_20 $$ if (doUnion) -->Line_28 $$ params4.remove("usersGroups")[ CD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_96 $$ setJoin(qPos, params4)[ FD ]
Line_76 $$ session = openSession()-->Line_112 $$ closeSession(session)[ FD ]
Line_34 $$ String sql = null-->Line_70 $$ sql = StringUtil.replace(sql, "[$PARENT_GROUP_ID_COMPARATOR$]", parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_51 $$ if (doUnion) -->Line_52 $$ sb.append(" UNION (")[ CD ]
Line_21 $$ params2 = new LinkedHashMap(params1)-->Line_23 $$ params2.put("groupOrg", userId)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_82 $$ qPos.add(parentGroupId)[ FD ]
Line_34 $$ String sql = null-->Line_73 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_85 $$ if (doUnion) -->Line_97 $$ qPos.add(companyId)[ CD ]
Line_70 $$ sql = StringUtil.replace(sql, "[$PARENT_GROUP_ID_COMPARATOR$]", parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_72 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_27 $$ params4 = new LinkedHashMap(params1)-->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_71 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.name)", StringPool.LIKE, false, names)-->Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_70 $$ sql = StringUtil.replace(sql, "[$PARENT_GROUP_ID_COMPARATOR$]", parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_73 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_93 $$ qPos.add(parentGroupId)[ FD ]
Line_15 $$ LinkedHashMap<String, Object> params3 = null-->Line_55 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params3))[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_99 $$ qPos.add(names, 2)[ FD ]
Line_41 $$ if (classNameIds == null) -->Line_42 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "AND (Group_.classNameId = ?)", StringPool.BLANK)[ CD ]
Line_51 $$ if (doUnion) -->Line_58 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_86 $$ setJoin(qPos, params2)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_94 $$ qPos.add(names, 2)[ FD ]
Line_20 $$ if (doUnion) -->Line_25 $$ params3.remove("usersGroups")[ CD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_52 $$ sb.append(" UNION (")[ FD ]
Line_46 $$ findByC_PG_N_D_SQL = replaceOrderBy(findByC_PG_N_D_SQL, obc)-->Line_53 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params2))[ FD ]
Line_71 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.name)", StringPool.LIKE, false, names)-->Line_72 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_80 $$ setJoin(qPos, params1)[ FD ]
Line_44 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(classNameIds, " OR Group_.classNameId = ")))-->Line_55 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params3))[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_83 $$ qPos.add(names, 2)[ FD ]
Line_31 $$ if (obc == null) -->Line_32 $$ obc = new GroupNameComparator(true)[ CD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_58 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_15 $$ LinkedHashMap<String, Object> params3 = null-->Line_25 $$ params3.remove("usersGroups")[ FD ]
Line_21 $$ params2 = new LinkedHashMap(params1)-->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_85 $$ if (doUnion) -->Line_90 $$ qPos.add(descriptions, 2)[ CD ]
Line_76 $$ session = openSession()-->Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params2 = null-->Line_21 $$ params2 = new LinkedHashMap(params1)[ FD ]
Line_24 $$ params3 = new LinkedHashMap(params1)-->Line_26 $$ params3.put("groupsOrgs", userId)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_55 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params3))[ FD ]
Line_85 $$ if (doUnion) -->Line_89 $$ qPos.add(names, 2)[ CD ]
Line_72 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.description)", StringPool.LIKE, true, descriptions)-->Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_17 $$ Long userId = (Long) params.get("usersGroups")-->Line_26 $$ params3.put("groupsOrgs", userId)[ FD ]
Line_42 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "AND (Group_.classNameId = ?)", StringPool.BLANK)-->Line_57 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params4))[ FD ]
Line_9 $$ descriptions = CustomSQLUtil.keywords(descriptions)-->Line_90 $$ qPos.add(descriptions, 2)[ FD ]
Line_51 $$ if (doUnion) -->Line_53 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params2))[ CD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_57 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params4))[ FD ]
Line_16 $$ LinkedHashMap<String, Object> params4 = null-->Line_57 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params4))[ FD ]
Line_5 $$ if (parentGroupId == GroupConstants.ANY_PARENT_GROUP_ID) -->Line_6 $$ parentGroupIdComparator = StringPool.NOT_EQUAL[ CD ]
Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)-->Line_64 $$ sql = sb.toString()[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_50 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_60 $$ if (obc != null) -->Line_61 $$ sb.append(" ORDER BY ")[ CD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_56 $$ sb.append(") UNION (")[ FD ]
Line_44 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(classNameIds, " OR Group_.classNameId = ")))-->Line_57 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params4))[ FD ]
Line_46 $$ findByC_PG_N_D_SQL = replaceOrderBy(findByC_PG_N_D_SQL, obc)-->Line_57 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params4))[ FD ]
Line_102 $$ List<Long> groupIds = (List<Long>) QueryUtil.list(q, getDialect(), start, end)-->Line_103 $$ List<Group> groups = new ArrayList(groupIds.size())[ FD ]
Line_27 $$ params4 = new LinkedHashMap(params1)-->Line_29 $$ params4.put("groupsUserGroups", userId)[ FD ]
Line_17 $$ Long userId = (Long) params.get("usersGroups")-->Line_23 $$ params2.put("groupOrg", userId)[ FD ]
Line_21 $$ params2 = new LinkedHashMap(params1)-->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params1 = params-->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_9 $$ descriptions = CustomSQLUtil.keywords(descriptions)-->Line_84 $$ qPos.add(descriptions, 2)[ FD ]
Line_16 $$ LinkedHashMap<String, Object> params4 = null-->Line_96 $$ setJoin(qPos, params4)[ FD ]
Line_64 $$ sql = sb.toString()-->Line_67 $$ _findByC_C_PG_N_DSQLCache.put(sqlKey, sql)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_90 $$ qPos.add(descriptions, 2)[ FD ]
Line_42 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "AND (Group_.classNameId = ?)", StringPool.BLANK)-->Line_55 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params3))[ FD ]
Line_20 $$ if (doUnion) -->Line_21 $$ params2 = new LinkedHashMap(params1)[ CD ]
Line_19 $$ boolean doUnion = Validator.isNotNull(userId) && inherit-->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_39 $$ if (sql == null) -->Line_40 $$ String findByC_PG_N_D_SQL = CustomSQLUtil.get(FIND_BY_C_C_PG_N_D)[ CD ]
Line_64 $$ sql = sb.toString()-->Line_73 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_85 $$ if (doUnion) -->Line_94 $$ qPos.add(names, 2)[ CD ]
Line_39 $$ if (sql == null) -->Line_41 $$ if (classNameIds == null) [ CD ]
Line_42 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "AND (Group_.classNameId = ?)", StringPool.BLANK)-->Line_53 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params2))[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params2 = null-->Line_22 $$ params2.remove("usersGroups")[ FD ]
Line_8 $$ names = CustomSQLUtil.keywords(names)-->Line_71 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.name)", StringPool.LIKE, false, names)[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params2 = null-->Line_53 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params2))[ FD ]
Line_104 $$ for (Long groupId : groupIds) -->Line_105 $$ Group group = GroupUtil.findByPrimaryKey(groupId)[ FD ]
Line_15 $$ LinkedHashMap<String, Object> params3 = null-->Line_26 $$ params3.put("groupsOrgs", userId)[ FD ]
Line_8 $$ names = CustomSQLUtil.keywords(names)-->Line_99 $$ qPos.add(names, 2)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_98 $$ qPos.add(parentGroupId)[ FD ]
Line_32 $$ obc = new GroupNameComparator(true)-->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_20 $$ if (doUnion) -->Line_29 $$ params4.put("groupsUserGroups", userId)[ CD ]
Line_42 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "AND (Group_.classNameId = ?)", StringPool.BLANK)-->Line_44 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(classNameIds, " OR Group_.classNameId = ")))[ FD ]
Line_39 $$ if (sql == null) -->Line_65 $$ if (classNameIds == _getGroupOrganizationClassNameIds()) [ CD ]
Line_44 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(classNameIds, " OR Group_.classNameId = ")))-->Line_46 $$ findByC_PG_N_D_SQL = replaceOrderBy(findByC_PG_N_D_SQL, obc)[ FD ]
Line_39 $$ if (sql == null) -->Line_51 $$ if (doUnion) [ CD ]
Line_34 $$ String sql = null-->Line_64 $$ sql = sb.toString()[ FD ]
Line_9 $$ descriptions = CustomSQLUtil.keywords(descriptions)-->Line_72 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_102 $$ List<Long> groupIds = (List<Long>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)-->Line_72 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.description)", StringPool.LIKE, true, descriptions)[ FD ]
Line_15 $$ LinkedHashMap<String, Object> params3 = null-->Line_24 $$ params3 = new LinkedHashMap(params1)[ FD ]
Line_24 $$ params3 = new LinkedHashMap(params1)-->Line_25 $$ params3.remove("usersGroups")[ FD ]
Line_41 $$ if (classNameIds == null) -->Line_44 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(classNameIds, " OR Group_.classNameId = ")))[ CD ]
Line_15 $$ LinkedHashMap<String, Object> params3 = null-->Line_91 $$ setJoin(qPos, params3)[ FD ]
Line_39 $$ if (sql == null) -->Line_60 $$ if (obc != null) [ CD ]
Line_24 $$ params3 = new LinkedHashMap(params1)-->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_61 $$ sb.append(" ORDER BY ")[ FD ]
Line_51 $$ if (doUnion) -->Line_56 $$ sb.append(") UNION (")[ CD ]
Line_32 $$ obc = new GroupNameComparator(true)-->Line_62 $$ sb.append(obc.toString())[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_89 $$ qPos.add(names, 2)[ FD ]
Line_40 $$ String findByC_PG_N_D_SQL = CustomSQLUtil.get(FIND_BY_C_C_PG_N_D)-->Line_46 $$ findByC_PG_N_D_SQL = replaceOrderBy(findByC_PG_N_D_SQL, obc)[ FD ]
Line_27 $$ params4 = new LinkedHashMap(params1)-->Line_28 $$ params4.remove("usersGroups")[ FD ]
Line_65 $$ if (classNameIds == _getGroupOrganizationClassNameIds()) -->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ CD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_92 $$ qPos.add(companyId)[ FD ]
Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)-->Line_70 $$ sql = StringUtil.replace(sql, "[$PARENT_GROUP_ID_COMPARATOR$]", parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_27 $$ params4 = new LinkedHashMap(params1)-->Line_57 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params4))[ FD ]
Line_35 $$ if (classNameIds == _getGroupOrganizationClassNameIds()) -->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ CD ]
Line_35 $$ if (classNameIds == _getGroupOrganizationClassNameIds()) -->Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)[ CD ]
Line_17 $$ Long userId = (Long) params.get("usersGroups")-->Line_29 $$ params4.put("groupsUserGroups", userId)[ FD ]
Line_16 $$ LinkedHashMap<String, Object> params4 = null-->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_34 $$ String sql = null-->Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)[ FD ]
Line_85 $$ if (doUnion) -->Line_98 $$ qPos.add(parentGroupId)[ CD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_87 $$ qPos.add(companyId)[ FD ]
Line_9 $$ descriptions = CustomSQLUtil.keywords(descriptions)-->Line_95 $$ qPos.add(descriptions, 2)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_88 $$ qPos.add(parentGroupId)[ FD ]
Line_27 $$ params4 = new LinkedHashMap(params1)-->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)-->Line_71 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.name)", StringPool.LIKE, false, names)[ FD ]
Line_74 $$ Session session = null-->Line_76 $$ session = openSession()[ FD ]
Line_71 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.name)", StringPool.LIKE, false, names)-->Line_73 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_40 $$ String findByC_PG_N_D_SQL = CustomSQLUtil.get(FIND_BY_C_C_PG_N_D)-->Line_49 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params1))[ FD ]
Line_72 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.description)", StringPool.LIKE, true, descriptions)-->Line_73 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_24 $$ params3 = new LinkedHashMap(params1)-->Line_66 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_39 $$ if (sql == null) -->Line_48 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_8 $$ names = CustomSQLUtil.keywords(names)-->Line_83 $$ qPos.add(names, 2)[ FD ]
Line_85 $$ if (doUnion) -->Line_86 $$ setJoin(qPos, params2)[ CD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_100 $$ qPos.add(descriptions, 2)[ FD ]
Line_103 $$ List<Group> groups = new ArrayList(groupIds.size())-->Line_106 $$ groups.add(group)[ FD ]
Line_21 $$ params2 = new LinkedHashMap(params1)-->Line_86 $$ setJoin(qPos, params2)[ FD ]
Line_44 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(classNameIds, " OR Group_.classNameId = ")))-->Line_49 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params1))[ FD ]
Line_74 $$ Session session = null-->Line_112 $$ closeSession(session)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_62 $$ sb.append(obc.toString())[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_49 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params1))[ FD ]
Line_20 $$ if (doUnion) -->Line_22 $$ params2.remove("usersGroups")[ CD ]
Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)-->Line_67 $$ _findByC_C_PG_N_DSQLCache.put(sqlKey, sql)[ FD ]
Line_9 $$ descriptions = CustomSQLUtil.keywords(descriptions)-->Line_100 $$ qPos.add(descriptions, 2)[ FD ]
Line_40 $$ String findByC_PG_N_D_SQL = CustomSQLUtil.get(FIND_BY_C_C_PG_N_D)-->Line_42 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "AND (Group_.classNameId = ?)", StringPool.BLANK)[ FD ]
Line_4 $$ String parentGroupIdComparator = StringPool.EQUAL-->Line_70 $$ sql = StringUtil.replace(sql, "[$PARENT_GROUP_ID_COMPARATOR$]", parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_54 $$ sb.append(") UNION (")[ FD ]
Line_65 $$ if (classNameIds == _getGroupOrganizationClassNameIds()) -->Line_67 $$ _findByC_C_PG_N_DSQLCache.put(sqlKey, sql)[ CD ]
Line_46 $$ findByC_PG_N_D_SQL = replaceOrderBy(findByC_PG_N_D_SQL, obc)-->Line_49 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params1))[ FD ]
Line_74 $$ Session session = null-->Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_51 $$ if (doUnion) -->Line_55 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params3))[ CD ]
Line_40 $$ String findByC_PG_N_D_SQL = CustomSQLUtil.get(FIND_BY_C_C_PG_N_D)-->Line_55 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params3))[ FD ]
Line_32 $$ obc = new GroupNameComparator(true)-->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_79 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_95 $$ qPos.add(descriptions, 2)[ FD ]
Line_42 $$ findByC_PG_N_D_SQL = StringUtil.replace(findByC_PG_N_D_SQL, "AND (Group_.classNameId = ?)", StringPool.BLANK)-->Line_46 $$ findByC_PG_N_D_SQL = replaceOrderBy(findByC_PG_N_D_SQL, obc)[ FD ]
Line_70 $$ sql = StringUtil.replace(sql, "[$PARENT_GROUP_ID_COMPARATOR$]", parentGroupIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_64 $$ sql = sb.toString()-->Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_85 $$ if (doUnion) -->Line_92 $$ qPos.add(companyId)[ CD ]
Line_13 $$ LinkedHashMap<String, Object> params1 = params-->Line_80 $$ setJoin(qPos, params1)[ FD ]
Line_20 $$ if (doUnion) -->Line_27 $$ params4 = new LinkedHashMap(params1)[ CD ]
Line_51 $$ if (doUnion) -->Line_54 $$ sb.append(") UNION (")[ CD ]
Line_34 $$ String sql = null-->Line_71 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Group_.name)", StringPool.LIKE, false, names)[ FD ]
Line_85 $$ if (doUnion) -->Line_93 $$ qPos.add(parentGroupId)[ CD ]
Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)-->Line_37 $$ sql = _findByC_C_PG_N_DSQLCache.get(sqlKey)[ FD ]
Line_105 $$ Group group = GroupUtil.findByPrimaryKey(groupId)-->Line_106 $$ groups.add(group)[ FD ]
Line_39 $$ if (sql == null) -->Line_49 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params1))[ CD ]
Line_34 $$ String sql = null-->Line_39 $$ if (sql == null) [ FD ]
Line_34 $$ String sql = null-->Line_77 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params1 = params-->Line_36 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_47 $$ StringBundler sb = new StringBundler(12)-->Line_53 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params2))[ FD ]
Line_11 $$ params = _emptyLinkedHashMap-->Line_17 $$ Long userId = (Long) params.get("usersGroups")[ FD ]
Line_85 $$ if (doUnion) -->Line_99 $$ qPos.add(names, 2)[ CD ]
Line_14 $$ LinkedHashMap<String, Object> params2 = null-->Line_86 $$ setJoin(qPos, params2)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params1 = params-->Line_49 $$ sb.append(replaceJoinAndWhere(findByC_PG_N_D_SQL, params1))[ FD ]
Line_32 $$ obc = new GroupNameComparator(true)-->Line_46 $$ findByC_PG_N_D_SQL = replaceOrderBy(findByC_PG_N_D_SQL, obc)[ FD ]
