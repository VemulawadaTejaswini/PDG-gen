Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_140 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_271 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_19 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_103 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_199 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_30 $$ channelContext.setReadingDatagram(Datagram.createReceiveDatagram())[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_255 $$ assertMessageStartWith(logRecord, "Unable to dispatch")[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_80 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_178 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_97 $$ assertMessageStartWith(logRecord, "Dropped ownerless ACK response ")[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_33 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(false), channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_234 $$ requestDatagram.setAckRequest(true)[ FD ]
Line_24 $$ logRecord = logRecords.get(0)-->Line_73 $$ assertMessageStartWith(logRecord, "Dropped ownerless request ")[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_24 $$ logRecord = logRecords.get(0)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_9 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_103 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_198 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_24 $$ logRecord = logRecords.get(0)-->Line_255 $$ assertMessageStartWith(logRecord, "Unable to dispatch")[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_9 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_127 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_199 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_213 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_240 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_79 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_64 $$ while (receiveDatagram == channelContext.getReadingDatagram()) -->Line_65 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ CD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_159 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_19 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_43 $$ final ByteBuffer byteBuffer = ByteBuffer.allocate(_data.length + 14)-->Line_53 $$ for (byte b : byteBuffer.array()) [ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_175 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_19 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_215 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_268 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_270 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_63 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_65 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_118 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_198 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_243 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_64 $$ while (receiveDatagram == channelContext.getReadingDatagram()) [ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_141 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_159 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_54 $$ sinkChannel.write(ByteBuffer.wrap(new byte[] [ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_92 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_103 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_90 $$ ackResponseDatagram.writeTo(sinkChannel)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_127 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_140 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_243 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_64 $$ while (receiveDatagram == channelContext.getReadingDatagram()) [ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_104 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_224 $$ assertMessageStartWith(logRecord, "Dropped ownerless request ")[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_79 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_216 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_270 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_24 $$ logRecord = logRecords.get(0)-->Line_256 $$ Assert.assertTrue(logRecord.getThrown() instanceof RuntimeException)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_185 $$ assertMessageStartWith(logRecord, "Dropped unconcerned response ")[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_64 $$ while (receiveDatagram == channelContext.getReadingDatagram()) [ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_101 $$ ackResponseDatagram.writeTo(sinkChannel)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_141 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_11 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_19 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_225 $$ Assert.assertSame(mockRegistrationReference, _mockIntraband.getRegistrationReference())[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_243 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_189 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_215 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_42 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_124 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_77 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_109 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_155 $$ responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_268 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_225 $$ Assert.assertSame(mockRegistrationReference, _mockIntraband.getRegistrationReference())[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_47 $$ sourceChannel.configureBlocking(false)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_240 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_216 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_18 $$ channelContext = new ChannelContext(null)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_158 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_104 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_79 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_138 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_194 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_93 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_77 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_215 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_92 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ assertMessageStartWith(logRecord, "Broken read channel, unregister ")[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_127 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_216 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_65 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_43 $$ final ByteBuffer byteBuffer = ByteBuffer.allocate(_data.length + 14)-->Line_44 $$ while (byteBuffer.hasRemaining()) [ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_80 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_24 $$ logRecord = logRecords.get(0)-->Line_97 $$ assertMessageStartWith(logRecord, "Dropped ownerless ACK response ")[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_210 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_34 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_126 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_127 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_239 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_210 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_117 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_118 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_30 $$ channelContext.setReadingDatagram(Datagram.createReceiveDatagram())[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_63 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_49 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_67 $$ syncThrowableThread.sync()[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_126 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_178 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_209 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_19 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_20 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_20 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_242 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_256 $$ Assert.assertTrue(logRecord.getThrown() instanceof RuntimeException)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_242 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_44 $$ while (byteBuffer.hasRemaining()) -->Line_45 $$ sourceChannel.read(byteBuffer)[ CD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_104 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_215 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_49 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_60 $$ syncThrowableThread.start()[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_21 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(true), channelContext)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_93 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_267 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_20 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_134 $$ assertMessageStartWith(logRecord, "Dropped ownerless response ")[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_271 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_213 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_168 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_173 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_242 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_33 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(false), channelContext)[ FD ]
Line_24 $$ logRecord = logRecords.get(0)-->Line_25 $$ assertMessageStartWith(logRecord, "Broken read channel, unregister ")[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_196 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_235 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_263 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_141 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_65 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_24 $$ logRecord = logRecords.get(0)-->Line_26 $$ Assert.assertNull(logRecord.getThrown())[ FD ]
Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_215 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_271 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_42 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_25 $$ assertMessageStartWith(logRecord, "Broken read channel, unregister ")[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_158 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_20 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_104 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_63 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_80 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_177 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ Assert.assertTrue(logRecord.getThrown() instanceof IOException)[ FD ]
Line_19 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_34 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_113 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_29 $$ channelContext = new ChannelContext(null)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_118 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_141 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_38 $$ Pipe pipe = Pipe.open()-->Line_39 $$ try (SourceChannel sourceChannel = pipe.source();[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_156 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_24 $$ logRecord = logRecords.get(0)-->Line_185 $$ assertMessageStartWith(logRecord, "Dropped unconcerned response ")[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_126 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_199 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_149 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_177 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_158 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_118 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_208 $$ requestDatagram.setAckRequest(true)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_262 $$ requestDatagram.setAckRequest(true)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_65 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_243 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_30 $$ channelContext.setReadingDatagram(Datagram.createReceiveDatagram())[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_271 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_225 $$ Assert.assertSame(mockRegistrationReference, _mockIntraband.getRegistrationReference())[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_34 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_117 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_178 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_19 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_22 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_198 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_216 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_24 $$ logRecord = logRecords.get(0)-->Line_134 $$ assertMessageStartWith(logRecord, "Dropped ownerless response ")[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_159 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_199 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_48 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_80 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_29 $$ channelContext = new ChannelContext(null)-->Line_140 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_31 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_123 $$ Datagram responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_154 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_29 $$ channelContext = new ChannelContext(null)[ FD ]
Line_49 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_57 $$ return null[ CD ]
Line_24 $$ logRecord = logRecords.get(0)-->Line_224 $$ assertMessageStartWith(logRecord, "Dropped ownerless request ")[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_178 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_117 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_33 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(false), channelContext)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_45 $$ sourceChannel.read(byteBuffer)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_73 $$ assertMessageStartWith(logRecord, "Dropped ownerless request ")[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_92 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_115 $$ ackResponseDatagram.writeTo(sinkChannel)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_174 $$ responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_213 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_26 $$ Assert.assertNull(logRecord.getThrown())[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_159 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_43 $$ final ByteBuffer byteBuffer = ByteBuffer.allocate(_data.length + 14)-->Line_45 $$ sourceChannel.read(byteBuffer)[ FD ]
Line_39 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_93 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_195 $$ responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_270 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_19 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_32 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_10 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(false), channelContext)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_21 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(true), channelContext)[ FD ]
Line_8 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_22 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_41 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_137 $$ responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_177 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_93 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_18 $$ channelContext = new ChannelContext(null)-->Line_215 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
