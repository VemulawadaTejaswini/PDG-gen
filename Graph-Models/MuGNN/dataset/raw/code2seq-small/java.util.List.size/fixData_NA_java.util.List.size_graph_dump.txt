Line_10 $$ List<Object> newRow = new ArrayList()-->Line_14 $$ rows.add(unmodifiableList(newRow))[ FD ]
Line_2 $$ private static Iterable<List<Object>> fixData(List<Column> columns, List<List<Object>> data) -->Line_7 $$ ImmutableList.Builder<List<Object>> rows = ImmutableList.builder()[ CD ]
Line_2 $$ private static Iterable<List<Object>> fixData(List<Column> columns, List<List<Object>> data) -->Line_16 $$ return rows.build()[ CD ]
Line_3 $$ if (data == null) -->Line_4 $$ return null[ CD ]
Line_8 $$ for (List<Object> row : data) -->Line_9 $$ checkArgument(row.size() == columns.size(), "row/column size mismatch")[ FD ]
Line_2 $$ private static Iterable<List<Object>> fixData(List<Column> columns, List<List<Object>> data) -->Line_3 $$ if (data == null) [ FD ]
Line_7 $$ ImmutableList.Builder<List<Object>> rows = ImmutableList.builder()-->Line_14 $$ rows.add(unmodifiableList(newRow))[ FD ]
Line_10 $$ List<Object> newRow = new ArrayList()-->Line_12 $$ newRow.add(fixValue(columns.get(i).getType(), row.get(i)))[ FD ]
Line_7 $$ ImmutableList.Builder<List<Object>> rows = ImmutableList.builder()-->Line_16 $$ return rows.build()[ FD ]
Line_2 $$ private static Iterable<List<Object>> fixData(List<Column> columns, List<List<Object>> data) -->Line_6 $$ requireNonNull(columns, "columns is null")[ CD ]
Line_2 $$ private static Iterable<List<Object>> fixData(List<Column> columns, List<List<Object>> data) -->Line_9 $$ checkArgument(row.size() == columns.size(), "row/column size mismatch")[ FD ]
Line_8 $$ for (List<Object> row : data) -->Line_11 $$ for (int i = 0; i < row.size(); i++) [ FD ]
Line_8 $$ for (List<Object> row : data) -->Line_12 $$ newRow.add(fixValue(columns.get(i).getType(), row.get(i)))[ FD ]
Line_11 $$ for (int i = 0; i < row.size(); i++) -->Line_12 $$ newRow.add(fixValue(columns.get(i).getType(), row.get(i)))[ CD ]
Line_2 $$ private static Iterable<List<Object>> fixData(List<Column> columns, List<List<Object>> data) -->Line_3 $$ if (data == null) [ CD ]
Line_2 $$ private static Iterable<List<Object>> fixData(List<Column> columns, List<List<Object>> data) -->Line_12 $$ newRow.add(fixValue(columns.get(i).getType(), row.get(i)))[ FD ]
Line_11 $$ for (int i = 0; i < row.size(); i++) -->Line_12 $$ newRow.add(fixValue(columns.get(i).getType(), row.get(i)))[ FD ]
Line_2 $$ private static Iterable<List<Object>> fixData(List<Column> columns, List<List<Object>> data) -->Line_6 $$ requireNonNull(columns, "columns is null")[ FD ]
