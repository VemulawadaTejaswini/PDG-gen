Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_11 $$ Assert.assertEquals("Remote file " + remoteFilePath + " is not found", logRecord.getMessage())[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_15 $$ _asyncBroker.takeWithResult(remoteFilePath, new FileResponse(remoteFilePath, FileResponse.FILE_NOT_FOUND, 0, false))[ FD ]
Line_2 $$ public void testGetFileFileNotFound() throws Exception -->Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")[ CD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_6 $$ _asyncBroker.takeWithResult(remoteFilePath, new FileResponse(remoteFilePath, FileResponse.FILE_NOT_FOUND, 0, false))[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.WARNING)) -->Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_9 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.WARNING)) -->Line_17 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_5 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)[ FD ]
Line_5 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)-->Line_7 $$ Assert.assertNull(noticeableFuture.get())[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_14 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)[ FD ]
Line_5 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)-->Line_16 $$ Assert.assertNull(noticeableFuture.get())[ FD ]
