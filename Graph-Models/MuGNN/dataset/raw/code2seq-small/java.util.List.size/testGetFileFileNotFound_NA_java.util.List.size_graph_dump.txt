Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_22 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_8 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)-->Line_20 $$ Assert.assertNull(noticeableFuture.get())[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ Assert.assertEquals("Remote file " + remoteFilePath + " is not found", logRecord.getMessage())[ FD ]
Line_8 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)-->Line_10 $$ Assert.assertNull(noticeableFuture.get())[ FD ]
Line_7 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.WARNING)) -->Line_21 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_7 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.WARNING)) -->Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
