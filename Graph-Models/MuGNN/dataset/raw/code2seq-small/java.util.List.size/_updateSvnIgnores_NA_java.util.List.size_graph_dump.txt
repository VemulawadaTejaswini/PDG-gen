Line_8 $$ if (gitIgnoreFile.exists() && !svnDir.exists()) -->Line_9 $$ System.out.println("Invalid SVN directory " + destDirName + dirName)[ CD ]
Line_14 $$ ignores = new ArrayList()-->Line_33 $$ Collections.sort(ignores)[ FD ]
Line_12 $$ List<String> ignores = null-->Line_33 $$ Collections.sort(ignores)[ FD ]
Line_27 $$ if (dirName.endsWith("/docroot/WEB-INF/")) -->Line_28 $$ if (!ignores.contains("classes")) [ CD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_7 $$ File svnDir = new File(destDirName + dirName + ".svn")[ CD ]
Line_12 $$ List<String> ignores = null-->Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)[ FD ]
Line_21 $$ String ignore = ignores.get(i)-->Line_22 $$ if (ignore.startsWith("/")) [ FD ]
Line_12 $$ List<String> ignores = null-->Line_28 $$ if (!ignores.contains("classes")) [ FD ]
Line_12 $$ List<String> ignores = null-->Line_20 $$ for (int i = 0; i < ignores.size(); i++) [ FD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_37 $$ if (ignores.isEmpty()) [ CD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_12 $$ List<String> ignores = null[ CD ]
Line_14 $$ ignores = new ArrayList()-->Line_20 $$ for (int i = 0; i < ignores.size(); i++) [ FD ]
Line_48 $$ File tempFile = _fileUtil.createTempFile("svn-ignores-", "tmp")-->Line_54 $$ _fileUtil.delete(tempFile)[ FD ]
Line_14 $$ ignores = new ArrayList()-->Line_17 $$ ignores.add("tmp")[ FD ]
Line_20 $$ for (int i = 0; i < ignores.size(); i++) -->Line_22 $$ if (ignore.startsWith("/")) [ CD ]
Line_14 $$ ignores = new ArrayList()-->Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)[ FD ]
Line_6 $$ File gitIgnoreFile = new File(srcDirName + dirName + ".gitignore")-->Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)[ FD ]
Line_20 $$ for (int i = 0; i < ignores.size(); i++) -->Line_21 $$ String ignore = ignores.get(i)[ CD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_6 $$ File gitIgnoreFile = new File(srcDirName + dirName + ".gitignore")[ CD ]
Line_12 $$ List<String> ignores = null-->Line_16 $$ ignores.add("classes")[ FD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_27 $$ if (dirName.endsWith("/docroot/WEB-INF/")) [ FD ]
Line_14 $$ ignores = new ArrayList()-->Line_34 $$ if (ignores.isEmpty() && !svnDir.exists()) [ FD ]
Line_21 $$ String ignore = ignores.get(i)-->Line_23 $$ ignore = ignore.substring(1)[ FD ]
Line_13 $$ if (!dirName.contains("/docroot")) -->Line_16 $$ ignores.add("classes")[ CD ]
Line_13 $$ if (!dirName.contains("/docroot")) -->Line_17 $$ ignores.add("tmp")[ CD ]
Line_12 $$ List<String> ignores = null-->Line_14 $$ ignores = new ArrayList()[ FD ]
Line_13 $$ if (!dirName.contains("/docroot")) -->Line_20 $$ for (int i = 0; i < ignores.size(); i++) [ CD ]
Line_12 $$ List<String> ignores = null-->Line_34 $$ if (ignores.isEmpty() && !svnDir.exists()) [ FD ]
Line_34 $$ if (ignores.isEmpty() && !svnDir.exists()) -->Line_35 $$ return[ CD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_48 $$ File tempFile = _fileUtil.createTempFile("svn-ignores-", "tmp")[ CD ]
Line_13 $$ if (!dirName.contains("/docroot")) -->Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)[ CD ]
Line_14 $$ ignores = new ArrayList()-->Line_28 $$ if (!ignores.contains("classes")) [ FD ]
Line_14 $$ ignores = new ArrayList()-->Line_25 $$ ignores.set(i, ignore)[ FD ]
Line_23 $$ ignore = ignore.substring(1)-->Line_22 $$ if (ignore.startsWith("/")) [ FD ]
Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)-->Line_25 $$ ignores.set(i, ignore)[ FD ]
Line_20 $$ for (int i = 0; i < ignores.size(); i++) -->Line_25 $$ ignores.set(i, ignore)[ CD ]
Line_7 $$ File svnDir = new File(destDirName + dirName + ".svn")-->Line_8 $$ if (gitIgnoreFile.exists() && !svnDir.exists()) [ FD ]
Line_14 $$ ignores = new ArrayList()-->Line_15 $$ ignores.add("bin")[ FD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_13 $$ if (!dirName.contains("/docroot")) [ CD ]
Line_50 $$ String[] ignoresArray = ignores.toArray(new String[ignores.size()])-->Line_51 $$ _fileUtil.write(tempFile, StringUtil.merge(ignoresArray, "\n"))[ FD ]
Line_14 $$ ignores = new ArrayList()-->Line_29 $$ ignores.add("classes")[ FD ]
Line_3 $$ if (!_fileUtil.exists(destDirName + dirName)) -->Line_4 $$ return[ CD ]
Line_12 $$ List<String> ignores = null-->Line_21 $$ String ignore = ignores.get(i)[ FD ]
Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)-->Line_50 $$ String[] ignoresArray = ignores.toArray(new String[ignores.size()])[ FD ]
Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)-->Line_29 $$ ignores.add("classes")[ FD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_8 $$ if (gitIgnoreFile.exists() && !svnDir.exists()) [ CD ]
Line_6 $$ File gitIgnoreFile = new File(srcDirName + dirName + ".gitignore")-->Line_8 $$ if (gitIgnoreFile.exists() && !svnDir.exists()) [ FD ]
Line_13 $$ if (!dirName.contains("/docroot")) -->Line_14 $$ ignores = new ArrayList()[ CD ]
Line_22 $$ if (ignore.startsWith("/")) -->Line_23 $$ ignore = ignore.substring(1)[ CD ]
Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)-->Line_33 $$ Collections.sort(ignores)[ FD ]
Line_13 $$ if (!dirName.contains("/docroot")) -->Line_15 $$ ignores.add("bin")[ CD ]
Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)-->Line_21 $$ String ignore = ignores.get(i)[ FD ]
Line_14 $$ ignores = new ArrayList()-->Line_16 $$ ignores.add("classes")[ FD ]
Line_12 $$ List<String> ignores = null-->Line_50 $$ String[] ignoresArray = ignores.toArray(new String[ignores.size()])[ FD ]
Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)-->Line_37 $$ if (ignores.isEmpty()) [ FD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_3 $$ if (!_fileUtil.exists(destDirName + dirName)) [ CD ]
Line_21 $$ String ignore = ignores.get(i)-->Line_25 $$ ignores.set(i, ignore)[ FD ]
Line_23 $$ ignore = ignore.substring(1)-->Line_25 $$ ignores.set(i, ignore)[ FD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_34 $$ if (ignores.isEmpty() && !svnDir.exists()) [ CD ]
Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)-->Line_28 $$ if (!ignores.contains("classes")) [ FD ]
Line_14 $$ ignores = new ArrayList()-->Line_21 $$ String ignore = ignores.get(i)[ FD ]
Line_28 $$ if (!ignores.contains("classes")) -->Line_29 $$ ignores.add("classes")[ CD ]
Line_20 $$ for (int i = 0; i < ignores.size(); i++) -->Line_25 $$ ignores.set(i, ignore)[ FD ]
Line_14 $$ ignores = new ArrayList()-->Line_37 $$ if (ignores.isEmpty()) [ FD ]
Line_48 $$ File tempFile = _fileUtil.createTempFile("svn-ignores-", "tmp")-->Line_51 $$ _fileUtil.write(tempFile, StringUtil.merge(ignoresArray, "\n"))[ FD ]
Line_7 $$ File svnDir = new File(destDirName + dirName + ".svn")-->Line_34 $$ if (ignores.isEmpty() && !svnDir.exists()) [ FD ]
Line_12 $$ List<String> ignores = null-->Line_25 $$ ignores.set(i, ignore)[ FD ]
Line_14 $$ ignores = new ArrayList()-->Line_50 $$ String[] ignoresArray = ignores.toArray(new String[ignores.size()])[ FD ]
Line_48 $$ File tempFile = _fileUtil.createTempFile("svn-ignores-", "tmp")-->Line_52 $$ _exec(_SVN_SET_IGNORES + "-F \"" + tempFile.getCanonicalPath() + "\" \"" + destDirName + dirName + "\"")[ FD ]
Line_8 $$ if (gitIgnoreFile.exists() && !svnDir.exists()) -->Line_10 $$ return[ CD ]
Line_12 $$ List<String> ignores = null-->Line_29 $$ ignores.add("classes")[ FD ]
Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)-->Line_20 $$ for (int i = 0; i < ignores.size(); i++) [ FD ]
Line_41 $$ String message = e.getMessage()-->Line_42 $$ if (!message.contains("svn: Attempting to delete nonexistent property " + "'svn:ignore'")) [ FD ]
Line_37 $$ if (ignores.isEmpty()) -->Line_46 $$ return[ CD ]
Line_12 $$ List<String> ignores = null-->Line_15 $$ ignores.add("bin")[ FD ]
Line_20 $$ for (int i = 0; i < ignores.size(); i++) -->Line_21 $$ String ignore = ignores.get(i)[ FD ]
Line_19 $$ ignores = ListUtil.fromFile(gitIgnoreFile)-->Line_34 $$ if (ignores.isEmpty() && !svnDir.exists()) [ FD ]
Line_13 $$ if (!dirName.contains("/docroot")) -->Line_27 $$ if (dirName.endsWith("/docroot/WEB-INF/")) [ CD ]
Line_12 $$ List<String> ignores = null-->Line_37 $$ if (ignores.isEmpty()) [ FD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_33 $$ Collections.sort(ignores)[ CD ]
Line_2 $$ private void _updateSvnIgnores(String srcDirName, String destDirName, String dirName) throws Exception -->Line_13 $$ if (!dirName.contains("/docroot")) [ FD ]
Line_12 $$ List<String> ignores = null-->Line_17 $$ ignores.add("tmp")[ FD ]
