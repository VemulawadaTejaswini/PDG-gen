Line_17 $$ Runnable runnable-->Line_18 $$ while ((runnable = tasksQueue.poll()) != null) runnable.run()[ FD ]
Line_8 $$ final ConcurrentLinkedQueue<Runnable> tasksQueue = new ConcurrentLinkedQueue<Runnable>(tasks)-->Line_26 $$ while ((runnable = tasksQueue.poll()) != null) runnable.run()[ FD ]
Line_2 $$ public static void invokeConcurrentlyIfPossible(final List<Runnable> tasks) -->Line_3 $$ if (tasks.size() == 1 || ApplicationManager.getApplication().isWriteAccessAllowed() || !Registry.is("idea.concurrent.scanning.files.to.index")) [ CD ]
Line_9 $$ List<Future<?>> results = ContainerUtil.newArrayList()-->Line_13 $$ results.add(ApplicationManager.getApplication().executeOnPooledThread(new Runnable() [ FD ]
Line_2 $$ public static void invokeConcurrentlyIfPossible(final List<Runnable> tasks) -->Line_8 $$ final ConcurrentLinkedQueue<Runnable> tasksQueue = new ConcurrentLinkedQueue<Runnable>(tasks)[ CD ]
Line_15 $$ ProgressManager.getInstance().runProcess(new Runnable() -->Line_18 $$ while ((runnable = tasksQueue.poll()) != null) runnable.run()[ CD ]
Line_17 $$ Runnable runnable-->Line_26 $$ runnable.run()[ FD ]
Line_10 $$ if (tasks.size() > 1) -->Line_12 $$ for (int i = 0; i < numThreads; ++i) [ CD ]
Line_2 $$ public static void invokeConcurrentlyIfPossible(final List<Runnable> tasks) -->Line_7 $$ final ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_10 $$ if (tasks.size() > 1) -->Line_11 $$ int numThreads = Math.max(Math.min(CacheUpdateRunner.indexingThreadCount() - 1, tasks.size() - 1), 1)[ CD ]
Line_2 $$ public static void invokeConcurrentlyIfPossible(final List<Runnable> tasks) -->Line_10 $$ if (tasks.size() > 1) [ CD ]
Line_2 $$ public static void invokeConcurrentlyIfPossible(final List<Runnable> tasks) -->Line_9 $$ List<Future<?>> results = ContainerUtil.newArrayList()[ CD ]
Line_17 $$ Runnable runnable-->Line_26 $$ while ((runnable = tasksQueue.poll()) != null) runnable.run()[ FD ]
Line_18 $$ while ((runnable = tasksQueue.poll()) != null) runnable.run()-->Line_26 $$ runnable.run()[ FD ]
Line_2 $$ public static void invokeConcurrentlyIfPossible(final List<Runnable> tasks) -->Line_11 $$ int numThreads = Math.max(Math.min(CacheUpdateRunner.indexingThreadCount() - 1, tasks.size() - 1), 1)[ FD ]
Line_2 $$ public static void invokeConcurrentlyIfPossible(final List<Runnable> tasks) -->Line_26 $$ while ((runnable = tasksQueue.poll()) != null) runnable.run()[ CD ]
Line_7 $$ final ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_15 $$ ProgressManager.getInstance().runProcess(new Runnable() [ FD ]
Line_3 $$ if (tasks.size() == 1 || ApplicationManager.getApplication().isWriteAccessAllowed() || !Registry.is("idea.concurrent.scanning.files.to.index")) -->Line_5 $$ return[ CD ]
Line_13 $$ results.add(ApplicationManager.getApplication().executeOnPooledThread(new Runnable() -->Line_15 $$ ProgressManager.getInstance().runProcess(new Runnable() [ CD ]
Line_18 $$ while ((runnable = tasksQueue.poll()) != null) runnable.run()-->Line_26 $$ while ((runnable = tasksQueue.poll()) != null) runnable.run()[ FD ]
Line_2 $$ public static void invokeConcurrentlyIfPossible(final List<Runnable> tasks) -->Line_10 $$ if (tasks.size() > 1) [ FD ]
Line_2 $$ public static void invokeConcurrentlyIfPossible(final List<Runnable> tasks) -->Line_3 $$ if (tasks.size() == 1 || ApplicationManager.getApplication().isWriteAccessAllowed() || !Registry.is("idea.concurrent.scanning.files.to.index")) [ FD ]
Line_12 $$ for (int i = 0; i < numThreads; ++i) -->Line_13 $$ results.add(ApplicationManager.getApplication().executeOnPooledThread(new Runnable() [ CD ]
Line_8 $$ final ConcurrentLinkedQueue<Runnable> tasksQueue = new ConcurrentLinkedQueue<Runnable>(tasks)-->Line_18 $$ while ((runnable = tasksQueue.poll()) != null) runnable.run()[ FD ]
Line_11 $$ int numThreads = Math.max(Math.min(CacheUpdateRunner.indexingThreadCount() - 1, tasks.size() - 1), 1)-->Line_12 $$ for (int i = 0; i < numThreads; ++i) [ FD ]
Line_17 $$ Runnable runnable-->Line_18 $$ runnable.run()[ FD ]
Line_15 $$ ProgressManager.getInstance().runProcess(new Runnable() -->Line_17 $$ Runnable runnable[ CD ]
