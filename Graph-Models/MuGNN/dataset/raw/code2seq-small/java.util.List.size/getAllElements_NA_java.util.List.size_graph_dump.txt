Line_24 $$ for (int i = 0; i < paths.length; i++) -->Line_25 $$ paths[i] = myComponent.getPathForRow(i)[ CD ]
Line_6 $$ if (root instanceof DefaultMutableTreeNode || root instanceof PathAwareTreeNode) -->Line_8 $$ TreeUtil.traverseDepth((TreeNode) root, new TreeUtil.Traverse() [ CD ]
Line_12 $$ if (node instanceof DefaultMutableTreeNode) -->Line_14 $$ if (node instanceof PathAwareTreeNode) [ CD ]
Line_8 $$ TreeUtil.traverseDepth((TreeNode) root, new TreeUtil.Traverse() -->Line_12 $$ if (node instanceof DefaultMutableTreeNode) [ FD ]
Line_6 $$ if (root instanceof DefaultMutableTreeNode || root instanceof PathAwareTreeNode) -->Line_20 $$ return paths.toArray(new TreePath[paths.size()])[ CD ]
Line_8 $$ TreeUtil.traverseDepth((TreeNode) root, new TreeUtil.Traverse() -->Line_12 $$ if (node instanceof DefaultMutableTreeNode) [ CD ]
Line_7 $$ final List<TreePath> paths = new ArrayList<TreePath>()-->Line_15 $$ paths.add(((PathAwareTreeNode) node).getPath())[ FD ]
Line_14 $$ if (node instanceof PathAwareTreeNode) -->Line_15 $$ paths.add(((PathAwareTreeNode) node).getPath())[ CD ]
Line_7 $$ final List<TreePath> paths = new ArrayList<TreePath>()-->Line_20 $$ return paths.toArray(new TreePath[paths.size()])[ FD ]
Line_12 $$ if (node instanceof DefaultMutableTreeNode) -->Line_13 $$ paths.add(new TreePath(((DefaultMutableTreeNode) node).getPath()))[ CD ]
Line_24 $$ for (int i = 0; i < paths.length; i++) -->Line_25 $$ paths[i] = myComponent.getPathForRow(i)[ FD ]
Line_6 $$ if (root instanceof DefaultMutableTreeNode || root instanceof PathAwareTreeNode) -->Line_7 $$ final List<TreePath> paths = new ArrayList<TreePath>()[ CD ]
Line_4 $$ if (myCanExpand) -->Line_5 $$ final Object root = myComponent.getModel().getRoot()[ CD ]
Line_8 $$ TreeUtil.traverseDepth((TreeNode) root, new TreeUtil.Traverse() -->Line_14 $$ if (node instanceof PathAwareTreeNode) [ FD ]
Line_4 $$ if (myCanExpand) -->Line_6 $$ if (root instanceof DefaultMutableTreeNode || root instanceof PathAwareTreeNode) [ CD ]
Line_7 $$ final List<TreePath> paths = new ArrayList<TreePath>()-->Line_13 $$ paths.add(new TreePath(((DefaultMutableTreeNode) node).getPath()))[ FD ]
Line_8 $$ TreeUtil.traverseDepth((TreeNode) root, new TreeUtil.Traverse() -->Line_17 $$ return true[ CD ]
