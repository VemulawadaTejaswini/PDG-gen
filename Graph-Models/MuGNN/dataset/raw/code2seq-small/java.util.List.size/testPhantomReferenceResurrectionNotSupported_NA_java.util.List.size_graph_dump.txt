Line_12 $$ if (withLog) -->Line_16 $$ Assert.assertSame(throwable, logRecord.getThrown())[ CD ]
Line_3 $$ Throwable throwable = new Throwable()-->Line_4 $$ ReflectionUtilAdvice.setDeclaredFieldThrowable(throwable)[ FD ]
Line_2 $$ protected void testPhantomReferenceResurrectionNotSupported(boolean withLog) throws ClassNotFoundException -->Line_6 $$ if (withLog) [ CD ]
Line_12 $$ if (withLog) -->Line_15 $$ Assert.assertEquals("Cancellation of orphaned noticeable futures is disabled " + "because the JVM does not support phantom reference " + "resurrection", logRecord.getMessage())[ CD ]
Line_2 $$ protected void testPhantomReferenceResurrectionNotSupported(boolean withLog) throws ClassNotFoundException -->Line_4 $$ ReflectionUtilAdvice.setDeclaredFieldThrowable(throwable)[ CD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ Assert.assertEquals("Cancellation of orphaned noticeable futures is disabled " + "because the JVM does not support phantom reference " + "resurrection", logRecord.getMessage())[ FD ]
Line_6 $$ if (withLog) -->Line_7 $$ level = Level.WARNING[ CD ]
Line_12 $$ if (withLog) -->Line_18 $$ Assert.assertTrue(logRecords.isEmpty())[ CD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(), level)) -->Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_12 $$ if (withLog) -->Line_13 $$ Assert.assertEquals(1, logRecords.size())[ CD ]
Line_2 $$ protected void testPhantomReferenceResurrectionNotSupported(boolean withLog) throws ClassNotFoundException -->Line_5 $$ Level level = Level.OFF[ CD ]
Line_3 $$ Throwable throwable = new Throwable()-->Line_16 $$ Assert.assertSame(throwable, logRecord.getThrown())[ FD ]
Line_2 $$ protected void testPhantomReferenceResurrectionNotSupported(boolean withLog) throws ClassNotFoundException -->Line_3 $$ Throwable throwable = new Throwable()[ CD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Assert.assertSame(throwable, logRecord.getThrown())[ FD ]
Line_5 $$ Level level = Level.OFF-->Line_7 $$ level = Level.WARNING[ FD ]
Line_7 $$ level = Level.WARNING-->Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(), level)) [ FD ]
Line_12 $$ if (withLog) -->Line_14 $$ LogRecord logRecord = logRecords.get(0)[ CD ]
Line_5 $$ Level level = Level.OFF-->Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(), level)) [ FD ]
