Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_5 $$ Person person = new Person()[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_22 $$ Person personWork = ExtraAssertions.assertTyping(Person.class, result)[ CD ]
Line_3 $$ Session session = openSession()-->Line_29 $$ session.beginTransaction()[ FD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_21 $$ assertNotNull(result)[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_15 $$ session.save(person)[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_6 $$ person.id = 1[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_10 $$ person.address.city = "Pleasantville"[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_31 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_7 $$ person.name = "Joe Blow"[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_11 $$ person.address.country = "USA"[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_9 $$ person.address.address1 = "1313 Mockingbird Lane"[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_26 $$ assertEquals(person.address.country, personWork.address.country)[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_27 $$ assertEquals(person.address.type.typeName, person.address.type.typeName)[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_17 $$ session.close()[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_29 $$ session.beginTransaction()[ CD ]
Line_3 $$ Session session = openSession()-->Line_15 $$ session.save(person)[ FD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_19 $$ assertEquals(1, results.size())[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_13 $$ addressType.typeName = "snail mail"[ CD ]
Line_3 $$ Session session = openSession()-->Line_28 $$ session = openSession()[ FD ]
Line_3 $$ Session session = openSession()-->Line_4 $$ session.beginTransaction()[ FD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_20 $$ Object result = results.get(0)[ CD ]
Line_18 $$ List results = getResults(sessionFactory().getEntityPersister(Person.class.getName()))-->Line_19 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_30 $$ session.createQuery("delete Person").executeUpdate()[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_16 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_18 $$ List results = getResults(sessionFactory().getEntityPersister(Person.class.getName()))[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_28 $$ session = openSession()[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_8 $$ person.address = new Address()[ CD ]
Line_5 $$ Person person = new Person()-->Line_15 $$ session.save(person)[ FD ]
Line_3 $$ Session session = openSession()-->Line_16 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_23 $$ assertEquals(person.id, personWork.id)[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_32 $$ session.close()[ CD ]
Line_18 $$ List results = getResults(sessionFactory().getEntityPersister(Person.class.getName()))-->Line_20 $$ Object result = results.get(0)[ FD ]
Line_28 $$ session = openSession()-->Line_29 $$ session.beginTransaction()[ FD ]
Line_20 $$ Object result = results.get(0)-->Line_21 $$ assertNotNull(result)[ FD ]
Line_20 $$ Object result = results.get(0)-->Line_22 $$ Person personWork = ExtraAssertions.assertTyping(Person.class, result)[ FD ]
Line_3 $$ Session session = openSession()-->Line_32 $$ session.close()[ FD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_25 $$ assertEquals(person.address.city, personWork.address.city)[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_3 $$ Session session = openSession()[ CD ]
Line_3 $$ Session session = openSession()-->Line_30 $$ session.createQuery("delete Person").executeUpdate()[ FD ]
Line_3 $$ Session session = openSession()-->Line_31 $$ session.getTransaction().commit()[ FD ]
Line_3 $$ Session session = openSession()-->Line_17 $$ session.close()[ FD ]
Line_28 $$ session = openSession()-->Line_31 $$ session.getTransaction().commit()[ FD ]
Line_28 $$ session = openSession()-->Line_32 $$ session.close()[ FD ]
Line_12 $$ AddressType addressType = new AddressType()-->Line_14 $$ person.address.type = addressType[ FD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_4 $$ session.beginTransaction()[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_12 $$ AddressType addressType = new AddressType()[ CD ]
Line_28 $$ session = openSession()-->Line_30 $$ session.createQuery("delete Person").executeUpdate()[ FD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_24 $$ assertEquals(person.address.address1, personWork.address.address1)[ CD ]
Line_2 $$ public void testSimpleNestedCompositeAttributeProcessing() throws Exception -->Line_14 $$ person.address.type = addressType[ CD ]
