Line_7 $$ Module module = ModuleUtilCore.findModuleForPsiElement(property.getPsiElement())-->Line_12 $$ modules.add(module)[ FD ]
Line_15 $$ if (modules.isEmpty())-->Line_16 $$ return null[ CD ]
Line_7 $$ Module module = ModuleUtilCore.findModuleForPsiElement(property.getPsiElement())-->Line_8 $$ if (module == null) [ FD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_17 $$ List<Module> list = ContainerUtil.newArrayList(modules)[ CD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_5 $$ Set<Module> modules = ContainerUtil.newLinkedHashSet()[ CD ]
Line_3 $$ if (key == null)-->Line_4 $$ return null[ CD ]
Line_6 $$ for (IProperty property : PropertiesImplUtil.findPropertiesByKey(project, key)) -->Line_7 $$ Module module = ModuleUtilCore.findModuleForPsiElement(property.getPsiElement())[ FD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_6 $$ for (IProperty property : PropertiesImplUtil.findPropertiesByKey(project, key)) [ FD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_15 $$ if (modules.isEmpty())[ CD ]
Line_5 $$ Set<Module> modules = ContainerUtil.newLinkedHashSet()-->Line_17 $$ List<Module> list = ContainerUtil.newArrayList(modules)[ FD ]
Line_11 $$ if (module != ownModule) -->Line_12 $$ modules.add(module)[ CD ]
Line_18 $$ GlobalSearchScope result = GlobalSearchScope.moduleWithDependentsScope(list.get(0))-->Line_20 $$ result = result.uniteWith(GlobalSearchScope.moduleWithDependentsScope(list.get(i)))[ FD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_19 $$ for (int i = 1; i < list.size(); i++) [ CD ]
Line_7 $$ Module module = ModuleUtilCore.findModuleForPsiElement(property.getPsiElement())-->Line_11 $$ if (module != ownModule) [ FD ]
Line_17 $$ List<Module> list = ContainerUtil.newArrayList(modules)-->Line_19 $$ for (int i = 1; i < list.size(); i++) [ FD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_22 $$ return result[ CD ]
Line_5 $$ Set<Module> modules = ContainerUtil.newLinkedHashSet()-->Line_15 $$ if (modules.isEmpty())[ FD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_3 $$ if (key == null)[ CD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_9 $$ return GlobalSearchScope.allScope(project)[ FD ]
Line_19 $$ for (int i = 1; i < list.size(); i++) -->Line_20 $$ result = result.uniteWith(GlobalSearchScope.moduleWithDependentsScope(list.get(i)))[ FD ]
Line_8 $$ if (module == null) -->Line_9 $$ return GlobalSearchScope.allScope(project)[ CD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_3 $$ if (key == null)[ FD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_18 $$ GlobalSearchScope result = GlobalSearchScope.moduleWithDependentsScope(list.get(0))[ CD ]
Line_19 $$ for (int i = 1; i < list.size(); i++) -->Line_20 $$ result = result.uniteWith(GlobalSearchScope.moduleWithDependentsScope(list.get(i)))[ CD ]
Line_17 $$ List<Module> list = ContainerUtil.newArrayList(modules)-->Line_18 $$ GlobalSearchScope result = GlobalSearchScope.moduleWithDependentsScope(list.get(0))[ FD ]
Line_5 $$ Set<Module> modules = ContainerUtil.newLinkedHashSet()-->Line_12 $$ modules.add(module)[ FD ]
Line_2 $$ private static GlobalSearchScope getWidestUseScope(@Nullable String key, @NotNull Project project, @NotNull Module ownModule) -->Line_11 $$ if (module != ownModule) [ FD ]
Line_17 $$ List<Module> list = ContainerUtil.newArrayList(modules)-->Line_20 $$ result = result.uniteWith(GlobalSearchScope.moduleWithDependentsScope(list.get(i)))[ FD ]
