Line_15 $$ for (int i = 0; i < count; i++) -->Line_16 $$ checkCanceled()[ CD ]
Line_15 $$ for (int i = 0; i < count; i++) -->Line_17 $$ if (myIndicator != null) [ CD ]
Line_17 $$ if (myIndicator != null) -->Line_18 $$ myIndicator.setFraction((double) i / count)[ CD ]
Line_15 $$ for (int i = 0; i < count; i++) -->Line_20 $$ final String name = names.get(i)[ FD ]
Line_11 $$ final List<String> names = Lists.newArrayList(modules.keySet())-->Line_14 $$ final int count = names.size()[ FD ]
Line_15 $$ for (int i = 0; i < count; i++) -->Line_21 $$ final PyBinaryItem module = modules.get(name)[ CD ]
Line_14 $$ final int count = names.size()-->Line_15 $$ for (int i = 0; i < count; i++) [ FD ]
Line_21 $$ final PyBinaryItem module = modules.get(name)-->Line_22 $$ if (module != null) [ FD ]
Line_15 $$ for (int i = 0; i < count; i++) -->Line_22 $$ if (module != null) [ CD ]
Line_22 $$ if (module != null) -->Line_23 $$ updateOrCreateSkeleton(module, results)[ CD ]
Line_15 $$ for (int i = 0; i < count; i++) -->Line_20 $$ final String name = names.get(i)[ CD ]
Line_21 $$ final PyBinaryItem module = modules.get(name)-->Line_23 $$ updateOrCreateSkeleton(module, results)[ FD ]
Line_13 $$ final List<UpdateResult> results = new ArrayList<UpdateResult>()-->Line_23 $$ updateOrCreateSkeleton(module, results)[ FD ]
Line_11 $$ final List<String> names = Lists.newArrayList(modules.keySet())-->Line_20 $$ final String name = names.get(i)[ FD ]
Line_11 $$ final List<String> names = Lists.newArrayList(modules.keySet())-->Line_12 $$ Collections.sort(names)[ FD ]
Line_20 $$ final String name = names.get(i)-->Line_21 $$ final PyBinaryItem module = modules.get(name)[ FD ]
