Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_5 $$ Collections.sort(names)[ CD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_20 $$ long doneInMs = System.currentTimeMillis() - startTime[ CD ]
Line_8 $$ for (int i = 0; i < count; i++) -->Line_14 $$ final PyBinaryItem module = modules.get(name)[ CD ]
Line_8 $$ for (int i = 0; i < count; i++) -->Line_10 $$ if (myIndicator != null) [ CD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_4 $$ final List<String> names = Lists.newArrayList(modules.keySet())[ CD ]
Line_8 $$ for (int i = 0; i < count; i++) -->Line_13 $$ final String name = names.get(i)[ FD ]
Line_6 $$ final List<UpdateResult> results = new ArrayList<UpdateResult>()-->Line_16 $$ updateOrCreateSkeleton(module, results)[ FD ]
Line_8 $$ for (int i = 0; i < count; i++) -->Line_13 $$ final String name = names.get(i)[ CD ]
Line_4 $$ final List<String> names = Lists.newArrayList(modules.keySet())-->Line_13 $$ final String name = names.get(i)[ FD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_14 $$ final PyBinaryItem module = modules.get(name)[ FD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_7 $$ final int count = names.size()[ CD ]
Line_4 $$ final List<String> names = Lists.newArrayList(modules.keySet())-->Line_7 $$ final int count = names.size()[ FD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_4 $$ final List<String> names = Lists.newArrayList(modules.keySet())[ FD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_3 $$ long startTime = System.currentTimeMillis()[ CD ]
Line_13 $$ final String name = names.get(i)-->Line_14 $$ final PyBinaryItem module = modules.get(name)[ FD ]
Line_10 $$ if (myIndicator != null) -->Line_11 $$ myIndicator.setFraction((double) i / count)[ CD ]
Line_14 $$ final PyBinaryItem module = modules.get(name)-->Line_15 $$ if (module != null) [ FD ]
Line_15 $$ if (module != null) -->Line_16 $$ updateOrCreateSkeleton(module, results)[ CD ]
Line_14 $$ final PyBinaryItem module = modules.get(name)-->Line_16 $$ updateOrCreateSkeleton(module, results)[ FD ]
Line_8 $$ for (int i = 0; i < count; i++) -->Line_15 $$ if (module != null) [ CD ]
Line_7 $$ final int count = names.size()-->Line_8 $$ for (int i = 0; i < count; i++) [ FD ]
Line_4 $$ final List<String> names = Lists.newArrayList(modules.keySet())-->Line_5 $$ Collections.sort(names)[ FD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_22 $$ return results[ CD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_6 $$ final List<UpdateResult> results = new ArrayList<UpdateResult>()[ CD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_21 $$ LOG.info("Rebuilding skeletons for binaries took " + doneInMs + " ms")[ CD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_8 $$ for (int i = 0; i < count; i++) [ CD ]
Line_2 $$ private List<UpdateResult> updateOrCreateSkeletons(Map<String, PyBinaryItem> modules) throws InvalidSdkException -->Line_19 $$ finishSkeletonsGeneration()[ CD ]
Line_8 $$ for (int i = 0; i < count; i++) -->Line_9 $$ checkCanceled()[ CD ]
