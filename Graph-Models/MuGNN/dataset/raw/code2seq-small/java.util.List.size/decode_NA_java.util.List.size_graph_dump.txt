Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_9 $$ if (mapping != null) [ CD ]
Line_11 $$ if (!fields.isEmpty()) -->Line_12 $$ start = Integer.parseInt(fields.get(0))[ CD ]
Line_9 $$ if (mapping != null) -->Line_11 $$ if (!fields.isEmpty()) [ CD ]
Line_14 $$ if (fields.size() > 1) -->Line_16 $$ checkState(end > 0 && end <= value.length, "Found end %s, but only 1..%s is legal", end, value.length)[ CD ]
Line_5 $$ String mapping = columnHandle.getMapping()-->Line_9 $$ if (mapping != null) [ FD ]
Line_5 $$ String mapping = columnHandle.getMapping()-->Line_10 $$ List<String> fields = ImmutableList.copyOf(Splitter.on(':').limit(2).split(mapping))[ FD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_3 $$ requireNonNull(columnHandle, "columnHandle is null")[ FD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_5 $$ String mapping = columnHandle.getMapping()[ CD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_21 $$ return new RawValueProvider(ByteBuffer.wrap(value, start, end - start), columnHandle, fieldType)[ CD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_4 $$ requireNonNull(value, "value is null")[ CD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_21 $$ return new RawValueProvider(ByteBuffer.wrap(value, start, end - start), columnHandle, fieldType)[ FD ]
Line_10 $$ List<String> fields = ImmutableList.copyOf(Splitter.on(':').limit(2).split(mapping))-->Line_11 $$ if (!fields.isEmpty()) [ FD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_6 $$ FieldType fieldType = columnHandle.getDataFormat() == null ? FieldType.BYTE : FieldType.forString(columnHandle.getDataFormat())[ FD ]
Line_14 $$ if (fields.size() > 1) -->Line_15 $$ end = Integer.parseInt(fields.get(1))[ CD ]
Line_7 $$ int start = 0-->Line_20 $$ checkState(start <= end, "Found start %s and end %s. start must be smaller than end", start, end)[ FD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_3 $$ requireNonNull(columnHandle, "columnHandle is null")[ CD ]
Line_12 $$ start = Integer.parseInt(fields.get(0))-->Line_21 $$ return new RawValueProvider(ByteBuffer.wrap(value, start, end - start), columnHandle, fieldType)[ FD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_4 $$ requireNonNull(value, "value is null")[ FD ]
Line_7 $$ int start = 0-->Line_21 $$ return new RawValueProvider(ByteBuffer.wrap(value, start, end - start), columnHandle, fieldType)[ FD ]
Line_12 $$ start = Integer.parseInt(fields.get(0))-->Line_13 $$ checkState(start >= 0 && start < value.length, "Found start %s, but only 0..%s is legal", start, value.length)[ FD ]
Line_7 $$ int start = 0-->Line_12 $$ start = Integer.parseInt(fields.get(0))[ FD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_5 $$ String mapping = columnHandle.getMapping()[ FD ]
Line_11 $$ if (!fields.isEmpty()) -->Line_13 $$ checkState(start >= 0 && start < value.length, "Found start %s, but only 0..%s is legal", start, value.length)[ CD ]
Line_10 $$ List<String> fields = ImmutableList.copyOf(Splitter.on(':').limit(2).split(mapping))-->Line_15 $$ end = Integer.parseInt(fields.get(1))[ FD ]
Line_15 $$ end = Integer.parseInt(fields.get(1))-->Line_20 $$ checkState(start <= end, "Found start %s and end %s. start must be smaller than end", start, end)[ FD ]
Line_8 $$ int end = value.length-->Line_20 $$ checkState(start <= end, "Found start %s and end %s. start must be smaller than end", start, end)[ FD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_8 $$ int end = value.length[ CD ]
Line_7 $$ int start = 0-->Line_13 $$ checkState(start >= 0 && start < value.length, "Found start %s, but only 0..%s is legal", start, value.length)[ FD ]
Line_8 $$ int end = value.length-->Line_15 $$ end = Integer.parseInt(fields.get(1))[ FD ]
Line_12 $$ start = Integer.parseInt(fields.get(0))-->Line_20 $$ checkState(start <= end, "Found start %s and end %s. start must be smaller than end", start, end)[ FD ]
Line_10 $$ List<String> fields = ImmutableList.copyOf(Splitter.on(':').limit(2).split(mapping))-->Line_14 $$ if (fields.size() > 1) [ FD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_7 $$ int start = 0[ CD ]
Line_8 $$ int end = value.length-->Line_16 $$ checkState(end > 0 && end <= value.length, "Found end %s, but only 1..%s is legal", end, value.length)[ FD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_20 $$ checkState(start <= end, "Found start %s and end %s. start must be smaller than end", start, end)[ CD ]
Line_15 $$ end = Integer.parseInt(fields.get(1))-->Line_16 $$ checkState(end > 0 && end <= value.length, "Found end %s, but only 1..%s is legal", end, value.length)[ FD ]
Line_11 $$ if (!fields.isEmpty()) -->Line_14 $$ if (fields.size() > 1) [ CD ]
Line_2 $$ public FieldValueProvider decode(byte[] value, DecoderColumnHandle columnHandle) -->Line_6 $$ FieldType fieldType = columnHandle.getDataFormat() == null ? FieldType.BYTE : FieldType.forString(columnHandle.getDataFormat())[ CD ]
Line_9 $$ if (mapping != null) -->Line_10 $$ List<String> fields = ImmutableList.copyOf(Splitter.on(':').limit(2).split(mapping))[ CD ]
Line_10 $$ List<String> fields = ImmutableList.copyOf(Splitter.on(':').limit(2).split(mapping))-->Line_12 $$ start = Integer.parseInt(fields.get(0))[ FD ]
