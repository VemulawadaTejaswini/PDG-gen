Line_9 $$ final String className = BUILT_IN_TASKS.get(taskName)-->Line_10 $$ if (className != null) [ FD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_7 $$ if (canBeMethodOf(GroovyPropertyUtils.getGetterNameNonBoolean(taskName), gradleApiProjectClass))[ FD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_3 $$ final GroovyPsiManager psiManager = GroovyPsiManager.getInstance(place.getProject())[ FD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_4 $$ PsiClass gradleApiProjectClass = psiManager.findClassWithCache(GRADLE_API_PROJECT, place.getResolveScope())[ CD ]
Line_3 $$ final GroovyPsiManager psiManager = GroovyPsiManager.getInstance(place.getProject())-->Line_4 $$ PsiClass gradleApiProjectClass = psiManager.findClassWithCache(GRADLE_API_PROJECT, place.getResolveScope())[ FD ]
Line_5 $$ if (canBeMethodOf(taskName, gradleApiProjectClass))-->Line_6 $$ return[ CD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_9 $$ final String className = BUILT_IN_TASKS.get(taskName)[ FD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_5 $$ if (canBeMethodOf(taskName, gradleApiProjectClass))[ FD ]
Line_9 $$ final String className = BUILT_IN_TASKS.get(taskName)-->Line_11 $$ GradleResolverUtil.processDeclarations(methodCallInfo.size() > 0 ? methodCallInfo.get(0) : null, psiManager, processor, state, place, className)[ FD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_5 $$ if (canBeMethodOf(taskName, gradleApiProjectClass))[ CD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_11 $$ GradleResolverUtil.processDeclarations(methodCallInfo.size() > 0 ? methodCallInfo.get(0) : null, psiManager, processor, state, place, className)[ FD ]
Line_4 $$ PsiClass gradleApiProjectClass = psiManager.findClassWithCache(GRADLE_API_PROJECT, place.getResolveScope())-->Line_7 $$ if (canBeMethodOf(GroovyPropertyUtils.getGetterNameNonBoolean(taskName), gradleApiProjectClass))[ FD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_3 $$ final GroovyPsiManager psiManager = GroovyPsiManager.getInstance(place.getProject())[ CD ]
Line_7 $$ if (canBeMethodOf(GroovyPropertyUtils.getGetterNameNonBoolean(taskName), gradleApiProjectClass))-->Line_8 $$ return[ CD ]
Line_3 $$ final GroovyPsiManager psiManager = GroovyPsiManager.getInstance(place.getProject())-->Line_11 $$ GradleResolverUtil.processDeclarations(methodCallInfo.size() > 0 ? methodCallInfo.get(0) : null, psiManager, processor, state, place, className)[ FD ]
Line_4 $$ PsiClass gradleApiProjectClass = psiManager.findClassWithCache(GRADLE_API_PROJECT, place.getResolveScope())-->Line_5 $$ if (canBeMethodOf(taskName, gradleApiProjectClass))[ FD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_4 $$ PsiClass gradleApiProjectClass = psiManager.findClassWithCache(GRADLE_API_PROJECT, place.getResolveScope())[ FD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_7 $$ if (canBeMethodOf(GroovyPropertyUtils.getGetterNameNonBoolean(taskName), gradleApiProjectClass))[ CD ]
Line_10 $$ if (className != null) -->Line_11 $$ GradleResolverUtil.processDeclarations(methodCallInfo.size() > 0 ? methodCallInfo.get(0) : null, psiManager, processor, state, place, className)[ CD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_9 $$ final String className = BUILT_IN_TASKS.get(taskName)[ CD ]
Line_2 $$ private static void processAvailableTasks(List<String> methodCallInfo, @NotNull String taskName, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_10 $$ if (className != null) [ CD ]
