Line_38 $$ if (stub.isMethod) -->Line_48 $$ pbn(") /*-[ CD ]
Line_17 $$ String paramType = stub.parameterTypes.get(i)-->Line_21 $$ if (paramType.startsWith("long") || paramType.contains("java.lang.Long")) [ FD ]
Line_18 $$ if (paramType == null) -->Line_20 $$ return ""[ CD ]
Line_38 $$ if (stub.isMethod) -->Line_79 $$ pbn(";")[ CD ]
Line_51 $$ if (stub.isStatic)-->Line_54 $$ pbn("obj.@" + stub.enclosingType + "::" + stub.name + "(" + stub.jnsi + ")(")[ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_38 $$ if (stub.isMethod) [ FD ]
Line_32 $$ if (stub.returnType.startsWith("long") || stub.returnType.contains("java.lang.Long")) -->Line_34 $$ return ""[ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_8 $$ if ((stub.enclosingType.startsWith("java") && !stub.enclosingType.startsWith("java.util")) || stub.enclosingType.contains("google")) [ CD ]
Line_8 $$ if ((stub.enclosingType.startsWith("java") && !stub.enclosingType.startsWith("java.util")) || stub.enclosingType.contains("google")) -->Line_9 $$ logger.log(Type.INFO, "not emitting code for accessing method " + stub.name + " in class '" + stub.enclosingType + ", either in java.* or GWT related class")[ CD ]
Line_17 $$ String paramType = stub.parameterTypes.get(i)-->Line_18 $$ if (paramType == null) [ FD ]
Line_18 $$ if (paramType == null) -->Line_21 $$ if (paramType.startsWith("long") || paramType.contains("java.lang.Long")) [ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_28 $$ if (stub.returnType == null) [ CD ]
Line_4 $$ if (stub.enclosingType == null) -->Line_6 $$ return ""[ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_12 $$ if (stub.enclosingType.contains("[]")) [ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_32 $$ if (stub.returnType.startsWith("long") || stub.returnType.contains("java.lang.Long")) [ CD ]
Line_38 $$ if (stub.isMethod) -->Line_43 $$ int i = 0[ CD ]
Line_55 $$ for (i = 0; i < stub.parameterTypes.size(); i++) -->Line_56 $$ pbn("p" + i + (i < stub.parameterTypes.size() - 1 ? ", " : ""))[ CD ]
Line_59 $$ if (isVoid)-->Line_60 $$ pbn("return null;")[ CD ]
Line_38 $$ if (stub.isMethod) -->Line_70 $$ pbn("return new " + stub.returnType + "(")[ CD ]
Line_38 $$ if (stub.isMethod) -->Line_80 $$ pbn("}")[ CD ]
Line_38 $$ if (stub.isMethod) -->Line_69 $$ pbn(") [ CD ]
Line_38 $$ if (stub.isMethod) -->Line_51 $$ if (stub.isStatic)[ CD ]
Line_43 $$ int i = 0-->Line_71 $$ for (i = 0; i < stub.parameterTypes.size(); i++) [ FD ]
Line_55 $$ for (i = 0; i < stub.parameterTypes.size(); i++) -->Line_67 $$ i++[ FD ]
Line_38 $$ if (stub.isMethod) -->Line_55 $$ for (i = 0; i < stub.parameterTypes.size(); i++) [ CD ]
Line_43 $$ int i = 0-->Line_55 $$ for (i = 0; i < stub.parameterTypes.size(); i++) [ FD ]
Line_38 $$ if (stub.isMethod) -->Line_75 $$ if (!stub.isPublic) [ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_4 $$ if (stub.enclosingType == null) [ CD ]
Line_38 $$ if (stub.isMethod) -->Line_61 $$ pbn("}-*/;")[ CD ]
Line_38 $$ if (stub.isMethod) -->Line_58 $$ pbn(");")[ CD ]
Line_12 $$ if (stub.enclosingType.contains("[]")) -->Line_14 $$ return ""[ CD ]
Line_55 $$ for (i = 0; i < stub.parameterTypes.size(); i++) -->Line_71 $$ for (i = 0; i < stub.parameterTypes.size(); i++) [ FD ]
Line_18 $$ if (paramType == null) -->Line_19 $$ logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + "' is not invokable because one of its argument types is not visible")[ CD ]
Line_16 $$ for (int i = 0; i < stub.parameterTypes.size(); i++) -->Line_18 $$ if (paramType == null) [ CD ]
Line_16 $$ for (int i = 0; i < stub.parameterTypes.size(); i++) -->Line_17 $$ String paramType = stub.parameterTypes.get(i)[ CD ]
Line_21 $$ if (paramType.startsWith("long") || paramType.contains("java.lang.Long")) -->Line_23 $$ return ""[ CD ]
Line_38 $$ if (stub.isMethod) -->Line_71 $$ for (i = 0; i < stub.parameterTypes.size(); i++) [ CD ]
Line_4 $$ if (stub.enclosingType == null) -->Line_5 $$ logger.log(Type.INFO, "method '" + stub.name + "' of invisible class is not invokable")[ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_36 $$ stub.enclosingType = stub.enclosingType.replace(".class", "")[ CD ]
Line_49 $$ if (!isVoid)-->Line_50 $$ pbn("return ")[ CD ]
Line_38 $$ if (stub.isMethod) -->Line_40 $$ pbn("private native " + (isVoid ? "Object" : stub.returnType) + " m" + stub.methodId + "(")[ CD ]
Line_71 $$ for (i = 0; i < stub.parameterTypes.size(); i++) -->Line_72 $$ pbn("p" + i + (i < stub.parameterTypes.size() - 1 ? ", " : ""))[ CD ]
Line_39 $$ boolean isVoid = stub.returnType.equals("void")-->Line_49 $$ if (!isVoid)[ FD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_82 $$ return buffer.toString()[ CD ]
Line_16 $$ for (int i = 0; i < stub.parameterTypes.size(); i++) -->Line_25 $$ stub.parameterTypes.set(i, paramType.replace(".class", ""))[ FD ]
Line_16 $$ for (int i = 0; i < stub.parameterTypes.size(); i++) -->Line_17 $$ String paramType = stub.parameterTypes.get(i)[ FD ]
Line_41 $$ if (!stub.isStatic)-->Line_42 $$ pbn(stub.enclosingType + " obj" + (stub.parameterTypes.size() > 0 ? ", " : ""))[ CD ]
Line_16 $$ for (int i = 0; i < stub.parameterTypes.size(); i++) -->Line_71 $$ for (i = 0; i < stub.parameterTypes.size(); i++) [ FD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_16 $$ for (int i = 0; i < stub.parameterTypes.size(); i++) [ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_37 $$ stub.returnType = stub.returnType.replace(".class", "")[ CD ]
Line_38 $$ if (stub.isMethod) -->Line_59 $$ if (isVoid)[ CD ]
Line_21 $$ if (paramType.startsWith("long") || paramType.contains("java.lang.Long")) -->Line_25 $$ stub.parameterTypes.set(i, paramType.replace(".class", ""))[ CD ]
Line_28 $$ if (stub.returnType == null) -->Line_30 $$ return ""[ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_51 $$ if (stub.isStatic)[ FD ]
Line_38 $$ if (stub.isMethod) -->Line_74 $$ pbn(")")[ CD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_38 $$ if (stub.isMethod) [ CD ]
Line_28 $$ if (stub.returnType == null) -->Line_29 $$ logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + "' is not invokable because its return type is not visible")[ CD ]
Line_43 $$ int i = 0-->Line_46 $$ i++[ FD ]
Line_21 $$ if (paramType.startsWith("long") || paramType.contains("java.lang.Long")) -->Line_22 $$ logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + " has long parameter, prohibited in JSNI")[ CD ]
Line_32 $$ if (stub.returnType.startsWith("long") || stub.returnType.contains("java.lang.Long")) -->Line_33 $$ logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + " has long return type, prohibited in JSNI")[ CD ]
Line_8 $$ if ((stub.enclosingType.startsWith("java") && !stub.enclosingType.startsWith("java.util")) || stub.enclosingType.contains("google")) -->Line_10 $$ return ""[ CD ]
Line_51 $$ if (stub.isStatic)-->Line_52 $$ pbn("@" + stub.enclosingType + "::" + stub.name + "(" + stub.jnsi + ")(")[ CD ]
Line_38 $$ if (stub.isMethod) -->Line_41 $$ if (!stub.isStatic)[ CD ]
Line_17 $$ String paramType = stub.parameterTypes.get(i)-->Line_25 $$ stub.parameterTypes.set(i, paramType.replace(".class", ""))[ FD ]
Line_16 $$ for (int i = 0; i < stub.parameterTypes.size(); i++) -->Line_46 $$ i++[ FD ]
Line_38 $$ if (stub.isMethod) -->Line_39 $$ boolean isVoid = stub.returnType.equals("void")[ CD ]
Line_43 $$ int i = 0-->Line_67 $$ i++[ FD ]
Line_2 $$ private String generateMethodStub(MethodStub stub) -->Line_3 $$ buffer.setLength(0)[ CD ]
Line_16 $$ for (int i = 0; i < stub.parameterTypes.size(); i++) -->Line_55 $$ for (i = 0; i < stub.parameterTypes.size(); i++) [ FD ]
Line_38 $$ if (stub.isMethod) -->Line_63 $$ pbn("private static " + stub.returnType + " m" + stub.methodId + "(")[ CD ]
Line_12 $$ if (stub.enclosingType.contains("[]")) -->Line_13 $$ logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + "' is not invokable because the class is an array type")[ CD ]
Line_16 $$ for (int i = 0; i < stub.parameterTypes.size(); i++) -->Line_67 $$ i++[ FD ]
Line_38 $$ if (stub.isMethod) -->Line_49 $$ if (!isVoid)[ CD ]
