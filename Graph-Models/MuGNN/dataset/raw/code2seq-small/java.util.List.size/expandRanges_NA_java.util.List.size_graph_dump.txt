Line_2 $$ private static FairDiffIterable expandRanges(@NotNull List<Line> lines1, @NotNull List<Line> lines2, @NotNull FairDiffIterable iterable, @NotNull ProgressIndicator indicator) -->Line_4 $$ for (Range ch : iterable.iterateChanges()) [ FD ]
Line_5 $$ Range expanded = TrimUtil.expand(lines1, lines2, ch.start1, ch.start2, ch.end1, ch.end2)-->Line_7 $$ changes.add(expanded)[ FD ]
Line_2 $$ private static FairDiffIterable expandRanges(@NotNull List<Line> lines1, @NotNull List<Line> lines2, @NotNull FairDiffIterable iterable, @NotNull ProgressIndicator indicator) -->Line_9 $$ return fair(create(changes, lines1.size(), lines2.size()))[ FD ]
Line_5 $$ Range expanded = TrimUtil.expand(lines1, lines2, ch.start1, ch.start2, ch.end1, ch.end2)-->Line_6 $$ if (!expanded.isEmpty())[ FD ]
Line_6 $$ if (!expanded.isEmpty())-->Line_7 $$ changes.add(expanded)[ CD ]
Line_3 $$ List<Range> changes = new ArrayList<Range>()-->Line_7 $$ changes.add(expanded)[ FD ]
Line_3 $$ List<Range> changes = new ArrayList<Range>()-->Line_9 $$ return fair(create(changes, lines1.size(), lines2.size()))[ FD ]
Line_2 $$ private static FairDiffIterable expandRanges(@NotNull List<Line> lines1, @NotNull List<Line> lines2, @NotNull FairDiffIterable iterable, @NotNull ProgressIndicator indicator) -->Line_3 $$ List<Range> changes = new ArrayList<Range>()[ CD ]
Line_2 $$ private static FairDiffIterable expandRanges(@NotNull List<Line> lines1, @NotNull List<Line> lines2, @NotNull FairDiffIterable iterable, @NotNull ProgressIndicator indicator) -->Line_9 $$ return fair(create(changes, lines1.size(), lines2.size()))[ CD ]
Line_2 $$ private static FairDiffIterable expandRanges(@NotNull List<Line> lines1, @NotNull List<Line> lines2, @NotNull FairDiffIterable iterable, @NotNull ProgressIndicator indicator) -->Line_5 $$ Range expanded = TrimUtil.expand(lines1, lines2, ch.start1, ch.start2, ch.end1, ch.end2)[ FD ]
