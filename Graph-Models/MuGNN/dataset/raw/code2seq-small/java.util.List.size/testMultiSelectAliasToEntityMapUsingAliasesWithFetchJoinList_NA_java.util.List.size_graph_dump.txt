Line_24 $$ Map shermanMap = (Map) resultList.get(1)-->Line_31 $$ assertTrue(Hibernate.isInitialized(((Student) shermanMap.get("s")).getEnrolments()))[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(yogiExpected, yogiMap.get("s"))[ CD ]
Line_27 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_31 $$ assertTrue(Hibernate.isInitialized(((Student) shermanMap.get("s")).getEnrolments()))[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pc", Criteria.LEFT_JOIN).setFetchMode("enrolments", FetchMode.JOIN).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ List resultList = (List) results[ CD ]
Line_24 $$ Map shermanMap = (Map) resultList.get(1)-->Line_25 $$ assertEquals(shermanExpected, shermanMap.get("s"))[ FD ]
Line_10 $$ HqlExecutor hqlAliasToEntityMapExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select s as s, pc as pc from Student s left join s.preferredCourse pc left join fetch s.enrolments order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_19 $$ List resultList = (List) results-->Line_21 $$ Map yogiMap = (Map) resultList.get(0)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ Map yogiMap = (Map) resultList.get(0)[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertEquals(shermanExpected, shermanMap.get("s"))[ CD ]
Line_24 $$ Map shermanMap = (Map) resultList.get(1)-->Line_32 $$ assertEquals(shermanExpected.getEnrolments(), (((Student) shermanMap.get("s")).getEnrolments()))[ FD ]
Line_19 $$ List resultList = (List) results-->Line_24 $$ Map shermanMap = (Map) resultList.get(1)[ FD ]
Line_27 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_30 $$ assertEquals(yogiExpected.getEnrolments(), ((Student) yogiMap.get("s")).getEnrolments())[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(yogiExpected.getPreferredCourse().getCourseCode(), ((Course) yogiMap.get("pc")).getCourseCode())[ CD ]
Line_24 $$ Map shermanMap = (Map) resultList.get(1)-->Line_26 $$ assertNull(shermanMap.get("pc"))[ FD ]
Line_21 $$ Map yogiMap = (Map) resultList.get(0)-->Line_28 $$ assertEquals(yogiExpected.getPreferredCourse(), yogiMap.get("pc"))[ FD ]
Line_21 $$ Map yogiMap = (Map) resultList.get(0)-->Line_30 $$ assertEquals(yogiExpected.getEnrolments(), ((Student) yogiMap.get("s")).getEnrolments())[ FD ]
Line_27 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_29 $$ assertTrue(Hibernate.isInitialized(((Student) yogiMap.get("s")).getEnrolments()))[ CD ]
Line_19 $$ List resultList = (List) results-->Line_20 $$ assertEquals(2, resultList.size())[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(2, resultList.size())[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ Map shermanMap = (Map) resultList.get(1)[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pc", Criteria.LEFT_JOIN).setFetchMode("enrolments", FetchMode.JOIN).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_27 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_28 $$ assertEquals(yogiExpected.getPreferredCourse(), yogiMap.get("pc"))[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertNull(shermanMap.get("pc"))[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ if (areDynamicNonLazyAssociationsChecked()) [ CD ]
Line_21 $$ Map yogiMap = (Map) resultList.get(0)-->Line_29 $$ assertTrue(Hibernate.isInitialized(((Student) yogiMap.get("s")).getEnrolments()))[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_13 $$ return s.createQuery("select s as s, pc as pc from Student s left join s.preferredCourse pc left join fetch s.enrolments order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_21 $$ Map yogiMap = (Map) resultList.get(0)-->Line_23 $$ assertEquals(yogiExpected.getPreferredCourse().getCourseCode(), ((Course) yogiMap.get("pc")).getCourseCode())[ FD ]
Line_21 $$ Map yogiMap = (Map) resultList.get(0)-->Line_22 $$ assertEquals(yogiExpected, yogiMap.get("s"))[ FD ]
Line_10 $$ HqlExecutor hqlAliasToEntityMapExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select s as s, pc as pc from Student s left join s.preferredCourse pc left join fetch s.enrolments order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_27 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_32 $$ assertEquals(shermanExpected.getEnrolments(), (((Student) shermanMap.get("s")).getEnrolments()))[ CD ]
