Line_2 $$ public void testSubclassing() throws Exception -->Line_6 $$ D d = new D()[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_33 $$ t.commit()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_49 $$ t.commit()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_8 $$ c1.setAddress("foo bar")[ FD ]
Line_42 $$ t = s.beginTransaction()-->Line_49 $$ t.commit()[ FD ]
Line_28 $$ s = openSession()-->Line_47 $$ s.delete(b.getD())[ FD ]
Line_29 $$ t = s.beginTransaction()-->Line_49 $$ t.commit()[ FD ]
Line_28 $$ s = openSession()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_14 $$ d.setId(c1.getId())[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_9 $$ c1.setCount(23432)[ CD ]
Line_28 $$ s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_38 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_32 $$ assertEquals("a funny name", c1.getBName())[ FD ]
Line_28 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_36 $$ t = s.beginTransaction()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_23 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_5 $$ C1 c1 = new C1()[ CD ]
Line_6 $$ D d = new D()-->Line_14 $$ d.setId(c1.getId())[ FD ]
Line_29 $$ t = s.beginTransaction()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_44 $$ for (int i = 0; i < bs.size(); i++) -->Line_46 $$ s.delete(b)[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_36 $$ t = s.beginTransaction()[ CD ]
Line_20 $$ s = openSession()-->Line_29 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_21 $$ t = s.beginTransaction()[ CD ]
Line_5 $$ C1 c1 = new C1()-->Line_10 $$ c1.setName("c1")[ FD ]
Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_35 $$ s = openSession()[ CD ]
Line_20 $$ s = openSession()-->Line_37 $$ c1 = (C1) s.load(C1.class, c1.getId())[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_15 $$ s.save(d)[ CD ]
Line_35 $$ s = openSession()-->Line_43 $$ List bs = s.createQuery("from B").list()[ FD ]
Line_28 $$ s = openSession()-->Line_40 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ t = s.beginTransaction()[ FD ]
Line_41 $$ s = openSession()-->Line_50 $$ s.close()[ FD ]
Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_37 $$ c1 = (C1) s.load(C1.class, c1.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_50 $$ s.close()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_25 $$ t.commit()[ FD ]
Line_20 $$ s = openSession()-->Line_21 $$ t = s.beginTransaction()[ FD ]
Line_28 $$ s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_12 $$ c1.setD(d)[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_17 $$ t.commit()[ CD ]
Line_35 $$ s = openSession()-->Line_40 $$ s.close()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_21 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_29 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_31 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_18 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.close()[ FD ]
Line_28 $$ s = openSession()-->Line_43 $$ List bs = s.createQuery("from B").list()[ FD ]
Line_20 $$ s = openSession()-->Line_43 $$ List bs = s.createQuery("from B").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s = openSession()[ FD ]
Line_43 $$ List bs = s.createQuery("from B").list()-->Line_45 $$ C1 b = (C1) bs.get(i)[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())[ CD ]
Line_20 $$ s = openSession()-->Line_41 $$ s = openSession()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_13 $$ s.save(c1)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ t = s.beginTransaction()-->Line_25 $$ t.commit()[ FD ]
Line_41 $$ s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_11 $$ c1.setBName("a funny name")[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_28 $$ s = openSession()[ CD ]
Line_28 $$ s = openSession()-->Line_29 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ D d = new D()-->Line_7 $$ d.setAmount(213.34f)[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_20 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())[ FD ]
Line_29 $$ t = s.beginTransaction()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_17 $$ t.commit()[ FD ]
Line_21 $$ t = s.beginTransaction()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_20 $$ s = openSession()-->Line_50 $$ s.close()[ FD ]
Line_35 $$ s = openSession()-->Line_37 $$ c1 = (C1) s.load(C1.class, c1.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ List bs = s.createQuery("from B").list()[ FD ]
Line_20 $$ s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_45 $$ C1 b = (C1) bs.get(i)-->Line_47 $$ s.delete(b.getD())[ FD ]
Line_20 $$ s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())-->Line_38 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ FD ]
Line_35 $$ s = openSession()-->Line_50 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_41 $$ s = openSession()-->Line_46 $$ s.delete(b)[ FD ]
Line_35 $$ s = openSession()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_10 $$ c1.setName("c1")[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_40 $$ s.close()[ CD ]
Line_20 $$ s = openSession()-->Line_46 $$ s.delete(b)[ FD ]
Line_44 $$ for (int i = 0; i < bs.size(); i++) -->Line_45 $$ C1 b = (C1) bs.get(i)[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())[ CD ]
Line_20 $$ s = openSession()-->Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_33 $$ t.commit()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_42 $$ t = s.beginTransaction()[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_39 $$ t.commit()[ CD ]
Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_24 $$ assertEquals("a funny name", c1.getBName())[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_43 $$ List bs = s.createQuery("from B").list()[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_25 $$ t.commit()[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_34 $$ s.close()[ CD ]
Line_5 $$ C1 c1 = new C1()-->Line_38 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_31 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_8 $$ c1.setAddress("foo bar")[ CD ]
Line_29 $$ t = s.beginTransaction()-->Line_33 $$ t.commit()[ FD ]
Line_21 $$ t = s.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_31 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ FD ]
Line_28 $$ s = openSession()-->Line_46 $$ s.delete(b)[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_19 $$ sessionFactory().getCache().evictEntityRegion(A.class)[ CD ]
Line_36 $$ t = s.beginTransaction()-->Line_49 $$ t.commit()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_24 $$ assertEquals("a funny name", c1.getBName())[ CD ]
Line_5 $$ C1 c1 = new C1()-->Line_11 $$ c1.setBName("a funny name")[ FD ]
Line_21 $$ t = s.beginTransaction()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ c1 = (C1) s.load(C1.class, c1.getId())[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_49 $$ t.commit()[ CD ]
Line_5 $$ C1 c1 = new C1()-->Line_37 $$ c1 = (C1) s.load(C1.class, c1.getId())[ FD ]
Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())-->Line_37 $$ c1 = (C1) s.load(C1.class, c1.getId())[ FD ]
Line_28 $$ s = openSession()-->Line_50 $$ s.close()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_38 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ CD ]
Line_5 $$ C1 c1 = new C1()-->Line_9 $$ c1.setCount(23432)[ FD ]
Line_20 $$ s = openSession()-->Line_26 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_26 $$ s.close()[ CD ]
Line_20 $$ s = openSession()-->Line_47 $$ s.delete(b.getD())[ FD ]
Line_20 $$ s = openSession()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_37 $$ c1 = (C1) s.load(C1.class, c1.getId())[ CD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ s.close()[ FD ]
Line_20 $$ s = openSession()-->Line_40 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.save(c1)[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_16 $$ assertTrue(s.createQuery("from C2 c where 1=1 or 1=1").list().size() == 0)[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_32 $$ assertEquals("a funny name", c1.getBName())[ CD ]
Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())-->Line_31 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_50 $$ s.close()[ CD ]
Line_44 $$ for (int i = 0; i < bs.size(); i++) -->Line_47 $$ s.delete(b.getD())[ CD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ s = openSession()[ FD ]
Line_36 $$ t = s.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_14 $$ d.setId(c1.getId())[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_45 $$ C1 b = (C1) bs.get(i)-->Line_46 $$ s.delete(b)[ FD ]
Line_20 $$ s = openSession()-->Line_28 $$ s = openSession()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_41 $$ s = openSession()[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_29 $$ t = s.beginTransaction()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_27 $$ sessionFactory().getCache().evictEntityRegion(A.class)[ CD ]
Line_6 $$ D d = new D()-->Line_15 $$ s.save(d)[ FD ]
Line_21 $$ t = s.beginTransaction()-->Line_33 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_7 $$ d.setAmount(213.34f)[ CD ]
Line_35 $$ s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_32 $$ assertEquals("a funny name", c1.getBName())[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ assertTrue(s.createQuery("from C2 c where 1=1 or 1=1").list().size() == 0)[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_24 $$ assertEquals("a funny name", c1.getBName())[ FD ]
Line_28 $$ s = openSession()-->Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())[ FD ]
Line_21 $$ t = s.beginTransaction()-->Line_29 $$ t = s.beginTransaction()[ FD ]
Line_41 $$ s = openSession()-->Line_43 $$ List bs = s.createQuery("from B").list()[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_12 $$ c1.setD(d)[ CD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_44 $$ for (int i = 0; i < bs.size(); i++) [ CD ]
Line_28 $$ s = openSession()-->Line_37 $$ c1 = (C1) s.load(C1.class, c1.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ s.delete(b)[ FD ]
Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())-->Line_32 $$ assertEquals("a funny name", c1.getBName())[ FD ]
Line_28 $$ s = openSession()-->Line_41 $$ s = openSession()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_23 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ FD ]
Line_35 $$ s = openSession()-->Line_46 $$ s.delete(b)[ FD ]
Line_20 $$ s = openSession()-->Line_30 $$ c1 = (C1) s.get(B.class, c1.getId())[ FD ]
Line_43 $$ List bs = s.createQuery("from B").list()-->Line_44 $$ for (int i = 0; i < bs.size(); i++) [ FD ]
Line_21 $$ t = s.beginTransaction()-->Line_49 $$ t.commit()[ FD ]
Line_29 $$ t = s.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_6 $$ D d = new D()-->Line_12 $$ c1.setD(d)[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ s.save(d)[ FD ]
Line_35 $$ s = openSession()-->Line_41 $$ s = openSession()[ FD ]
Line_37 $$ c1 = (C1) s.load(C1.class, c1.getId())-->Line_38 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ FD ]
Line_44 $$ for (int i = 0; i < bs.size(); i++) -->Line_45 $$ C1 b = (C1) bs.get(i)[ CD ]
Line_35 $$ s = openSession()-->Line_47 $$ s.delete(b.getD())[ FD ]
Line_22 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_23 $$ assertTrue(c1.getAddress().equals("foo bar") && (c1.getCount() == 23432) && c1.getName().equals("c1") && c1.getD().getAmount() > 213.3f)[ FD ]
Line_41 $$ s = openSession()-->Line_47 $$ s.delete(b.getD())[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_13 $$ s.save(c1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ s.delete(b.getD())[ FD ]
Line_2 $$ public void testSubclassing() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_20 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
