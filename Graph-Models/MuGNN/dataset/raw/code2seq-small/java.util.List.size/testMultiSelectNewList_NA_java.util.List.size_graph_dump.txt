Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").setProjection(Projections.projectionList().add(Property.forName("s.studentNumber").as("studentNumber")).add(Property.forName("s.name").as("name"))).addOrder(Order.asc("s.studentNumber")).setResultTransformer(new AliasToBeanConstructorResultTransformer(getConstructor()))[ FD ]
Line_23 $$ Student sherman = (Student) resultList.get(1)-->Line_24 $$ assertEquals(shermanExpected.getStudentNumber(), sherman.getStudentNumber())[ FD ]
Line_18 $$ List resultList = (List) results-->Line_20 $$ Student yogi = (Student) resultList.get(0)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertEquals(2, resultList.size())[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ Student sherman = (Student) resultList.get(1)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_13 $$ return s.createQuery("select new Student(s.studentNumber, s.name) from Student s order by s.studentNumber")[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ Student yogi = (Student) resultList.get(0)[ CD ]
Line_2 $$ public void testMultiSelectNewList() throws Exception -->Line_28 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_8 $$ return Student.class.getConstructor(long.class, PersonName.class)[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(shermanExpected.getStudentNumber(), sherman.getStudentNumber())[ CD ]
Line_11 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select new Student(s.studentNumber, s.name) from Student s order by s.studentNumber")[ FD ]
Line_18 $$ List resultList = (List) results-->Line_23 $$ Student sherman = (Student) resultList.get(1)[ FD ]
Line_20 $$ Student yogi = (Student) resultList.get(0)-->Line_22 $$ assertEquals(yogiExpected.getName(), yogi.getName())[ FD ]
Line_18 $$ List resultList = (List) results-->Line_19 $$ assertEquals(2, resultList.size())[ FD ]
Line_11 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select new Student(s.studentNumber, s.name) from Student s order by s.studentNumber")[ CD ]
Line_23 $$ Student sherman = (Student) resultList.get(1)-->Line_25 $$ assertEquals(shermanExpected.getName(), sherman.getName())[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(yogiExpected.getName(), yogi.getName())[ CD ]
Line_2 $$ public void testMultiSelectNewList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_20 $$ Student yogi = (Student) resultList.get(0)-->Line_21 $$ assertEquals(yogiExpected.getStudentNumber(), yogi.getStudentNumber())[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_28 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertEquals(shermanExpected.getName(), sherman.getName())[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(yogiExpected.getStudentNumber(), yogi.getStudentNumber())[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").setProjection(Projections.projectionList().add(Property.forName("s.studentNumber").as("studentNumber")).add(Property.forName("s.name").as("name"))).addOrder(Order.asc("s.studentNumber")).setResultTransformer(new AliasToBeanConstructorResultTransformer(getConstructor()))[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ List resultList = (List) results[ CD ]
