Line_16 $$ size = preferences.getSize(fontFamilies.get(0))-->Line_19 $$ result = doGetFontAbleToDisplay(codePoint, size, style, FontPreferences.DEFAULT_FONT_NAME)[ FD ]
Line_19 $$ result = doGetFontAbleToDisplay(codePoint, size, style, FontPreferences.DEFAULT_FONT_NAME)-->Line_20 $$ if (result != null) [ FD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_8 $$ result = doGetFontAbleToDisplay(codePoint, preferences.getSize(fontFamily), style, fontFamily)[ FD ]
Line_4 $$ List<String> fontFamilies = preferences.getEffectiveFontFamilies()-->Line_7 $$ final String fontFamily = fontFamilies.get(i)[ FD ]
Line_8 $$ result = doGetFontAbleToDisplay(codePoint, preferences.getSize(fontFamily), style, fontFamily)-->Line_9 $$ if (result != null) [ FD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_16 $$ size = preferences.getSize(fontFamilies.get(0))[ FD ]
Line_4 $$ List<String> fontFamilies = preferences.getEffectiveFontFamilies()-->Line_16 $$ size = preferences.getSize(fontFamilies.get(0))[ FD ]
Line_5 $$ FontInfo result-->Line_8 $$ result = doGetFontAbleToDisplay(codePoint, preferences.getSize(fontFamily), style, fontFamily)[ FD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_6 $$ for (int i = 0, len = fontFamilies.size(); i < len; ++i) [ CD ]
Line_5 $$ FontInfo result-->Line_9 $$ if (result != null) [ FD ]
Line_6 $$ for (int i = 0, len = fontFamilies.size(); i < len; ++i) -->Line_7 $$ final String fontFamily = fontFamilies.get(i)[ FD ]
Line_14 $$ int size = FontPreferences.DEFAULT_FONT_SIZE-->Line_24 $$ return doGetFontAbleToDisplay(codePoint, size, style)[ FD ]
Line_15 $$ if (!fontFamilies.isEmpty()) -->Line_16 $$ size = preferences.getSize(fontFamilies.get(0))[ CD ]
Line_6 $$ for (int i = 0, len = fontFamilies.size(); i < len; ++i) -->Line_8 $$ result = doGetFontAbleToDisplay(codePoint, preferences.getSize(fontFamily), style, fontFamily)[ CD ]
Line_3 $$ boolean tryDefaultFont = true-->Line_12 $$ tryDefaultFont &= !FontPreferences.DEFAULT_FONT_NAME.equals(fontFamily)[ FD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_5 $$ FontInfo result[ CD ]
Line_6 $$ for (int i = 0, len = fontFamilies.size(); i < len; ++i) -->Line_9 $$ if (result != null) [ CD ]
Line_5 $$ FontInfo result-->Line_19 $$ result = doGetFontAbleToDisplay(codePoint, size, style, FontPreferences.DEFAULT_FONT_NAME)[ FD ]
Line_8 $$ result = doGetFontAbleToDisplay(codePoint, preferences.getSize(fontFamily), style, fontFamily)-->Line_20 $$ if (result != null) [ FD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_3 $$ boolean tryDefaultFont = true[ CD ]
Line_5 $$ FontInfo result-->Line_20 $$ if (result != null) [ FD ]
Line_20 $$ if (result != null) -->Line_21 $$ return result[ CD ]
Line_7 $$ final String fontFamily = fontFamilies.get(i)-->Line_12 $$ tryDefaultFont &= !FontPreferences.DEFAULT_FONT_NAME.equals(fontFamily)[ FD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_4 $$ List<String> fontFamilies = preferences.getEffectiveFontFamilies()[ FD ]
Line_8 $$ result = doGetFontAbleToDisplay(codePoint, preferences.getSize(fontFamily), style, fontFamily)-->Line_19 $$ result = doGetFontAbleToDisplay(codePoint, size, style, FontPreferences.DEFAULT_FONT_NAME)[ FD ]
Line_14 $$ int size = FontPreferences.DEFAULT_FONT_SIZE-->Line_19 $$ result = doGetFontAbleToDisplay(codePoint, size, style, FontPreferences.DEFAULT_FONT_NAME)[ FD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_24 $$ return doGetFontAbleToDisplay(codePoint, size, style)[ FD ]
Line_18 $$ if (tryDefaultFont) -->Line_20 $$ if (result != null) [ CD ]
Line_6 $$ for (int i = 0, len = fontFamilies.size(); i < len; ++i) -->Line_12 $$ tryDefaultFont &= !FontPreferences.DEFAULT_FONT_NAME.equals(fontFamily)[ CD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_18 $$ if (tryDefaultFont) [ CD ]
Line_7 $$ final String fontFamily = fontFamilies.get(i)-->Line_8 $$ result = doGetFontAbleToDisplay(codePoint, preferences.getSize(fontFamily), style, fontFamily)[ FD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_14 $$ int size = FontPreferences.DEFAULT_FONT_SIZE[ CD ]
Line_4 $$ List<String> fontFamilies = preferences.getEffectiveFontFamilies()-->Line_6 $$ for (int i = 0, len = fontFamilies.size(); i < len; ++i) [ FD ]
Line_18 $$ if (tryDefaultFont) -->Line_19 $$ result = doGetFontAbleToDisplay(codePoint, size, style, FontPreferences.DEFAULT_FONT_NAME)[ CD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_4 $$ List<String> fontFamilies = preferences.getEffectiveFontFamilies()[ CD ]
Line_6 $$ for (int i = 0, len = fontFamilies.size(); i < len; ++i) -->Line_7 $$ final String fontFamily = fontFamilies.get(i)[ CD ]
Line_9 $$ if (result != null) -->Line_10 $$ return result[ CD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_24 $$ return doGetFontAbleToDisplay(codePoint, size, style)[ CD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_19 $$ result = doGetFontAbleToDisplay(codePoint, size, style, FontPreferences.DEFAULT_FONT_NAME)[ FD ]
Line_14 $$ int size = FontPreferences.DEFAULT_FONT_SIZE-->Line_16 $$ size = preferences.getSize(fontFamilies.get(0))[ FD ]
Line_2 $$ public static FontInfo getFontAbleToDisplay(int codePoint, @JdkConstants.FontStyle int style, @NotNull FontPreferences preferences) -->Line_15 $$ if (!fontFamilies.isEmpty()) [ CD ]
Line_4 $$ List<String> fontFamilies = preferences.getEffectiveFontFamilies()-->Line_15 $$ if (!fontFamilies.isEmpty()) [ FD ]
Line_16 $$ size = preferences.getSize(fontFamilies.get(0))-->Line_24 $$ return doGetFontAbleToDisplay(codePoint, size, style)[ FD ]
