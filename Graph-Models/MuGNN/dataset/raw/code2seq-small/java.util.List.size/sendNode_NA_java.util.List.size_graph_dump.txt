Line_2 $$ private static void sendNode(IdeaTestRunner runner, Object test, Packet packet, Collection objectPackets) -->Line_6 $$ sendNode(runner, children.get(i), packet, objectPackets)[ FD ]
Line_3 $$ final List children = runner.getChildTests(test)-->Line_6 $$ sendNode(runner, children.get(i), packet, objectPackets)[ FD ]
Line_5 $$ for (int i = 0; i < children.size(); i++) -->Line_6 $$ sendNode(runner, children.get(i), packet, objectPackets)[ FD ]
Line_3 $$ final List children = runner.getChildTests(test)-->Line_5 $$ for (int i = 0; i < children.size(); i++) [ FD ]
Line_2 $$ private static void sendNode(IdeaTestRunner runner, Object test, Packet packet, Collection objectPackets) -->Line_5 $$ for (int i = 0; i < children.size(); i++) [ CD ]
Line_2 $$ private static void sendNode(IdeaTestRunner runner, Object test, Packet packet, Collection objectPackets) -->Line_4 $$ packet.addObject(test, objectPackets).addLong(children.size())[ CD ]
Line_2 $$ private static void sendNode(IdeaTestRunner runner, Object test, Packet packet, Collection objectPackets) -->Line_4 $$ packet.addObject(test, objectPackets).addLong(children.size())[ FD ]
Line_2 $$ private static void sendNode(IdeaTestRunner runner, Object test, Packet packet, Collection objectPackets) -->Line_3 $$ final List children = runner.getChildTests(test)[ CD ]
Line_5 $$ for (int i = 0; i < children.size(); i++) -->Line_6 $$ sendNode(runner, children.get(i), packet, objectPackets)[ CD ]
Line_2 $$ private static void sendNode(IdeaTestRunner runner, Object test, Packet packet, Collection objectPackets) -->Line_3 $$ final List children = runner.getChildTests(test)[ FD ]
Line_3 $$ final List children = runner.getChildTests(test)-->Line_4 $$ packet.addObject(test, objectPackets).addLong(children.size())[ FD ]
