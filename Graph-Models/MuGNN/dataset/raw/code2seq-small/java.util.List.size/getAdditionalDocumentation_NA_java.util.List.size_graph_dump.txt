Line_13 $$ final XmlTag tag = antElement.getXmlTag()-->Line_16 $$ builder.append(tag.getName())[ FD ]
Line_14 $$ if (tag != null) -->Line_15 $$ builder.append("<b>")[ CD ]
Line_11 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_25 $$ return builder.toString()[ FD ]
Line_11 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_15 $$ builder.append("<b>")[ FD ]
Line_11 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_23 $$ builder.append(file.getPath())[ FD ]
Line_2 $$ private static String getAdditionalDocumentation(PsiElement elem) -->Line_3 $$ final XmlTag xmlTag = PsiTreeUtil.getParentOfType(elem, XmlTag.class)[ FD ]
Line_2 $$ private static String getAdditionalDocumentation(PsiElement elem) -->Line_8 $$ if (antElement instanceof AntFilesProvider) [ CD ]
Line_14 $$ if (tag != null) -->Line_16 $$ builder.append(tag.getName())[ CD ]
Line_2 $$ private static String getAdditionalDocumentation(PsiElement elem) -->Line_3 $$ final XmlTag xmlTag = PsiTreeUtil.getParentOfType(elem, XmlTag.class)[ CD ]
Line_8 $$ if (antElement instanceof AntFilesProvider) -->Line_9 $$ final List<File> list = ((AntFilesProvider) antElement).getFiles(new HashSet<AntFilesProvider>())[ CD ]
Line_14 $$ if (tag != null) -->Line_17 $$ builder.append(":</b>")[ CD ]
Line_2 $$ private static String getAdditionalDocumentation(PsiElement elem) -->Line_4 $$ if (xmlTag == null) [ CD ]
Line_11 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_17 $$ builder.append(":</b>")[ FD ]
Line_11 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_27 $$ StringBuilderSpinAllocator.dispose(builder)[ FD ]
Line_2 $$ private static String getAdditionalDocumentation(PsiElement elem) -->Line_31 $$ return null[ CD ]
Line_2 $$ private static String getAdditionalDocumentation(PsiElement elem) -->Line_7 $$ final AntDomElement antElement = AntSupport.getAntDomElement(xmlTag)[ CD ]
Line_20 $$ if (builder.length() > 0) -->Line_21 $$ builder.append("<br>")[ CD ]
Line_10 $$ if (list.size() > 0) -->Line_11 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()[ CD ]
Line_11 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_21 $$ builder.append("<br>")[ FD ]
Line_11 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_16 $$ builder.append(tag.getName())[ FD ]
Line_3 $$ final XmlTag xmlTag = PsiTreeUtil.getParentOfType(elem, XmlTag.class)-->Line_7 $$ final AntDomElement antElement = AntSupport.getAntDomElement(xmlTag)[ FD ]
Line_7 $$ final AntDomElement antElement = AntSupport.getAntDomElement(xmlTag)-->Line_8 $$ if (antElement instanceof AntFilesProvider) [ FD ]
Line_11 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_20 $$ if (builder.length() > 0) [ FD ]
Line_4 $$ if (xmlTag == null) -->Line_5 $$ return null[ CD ]
Line_8 $$ if (antElement instanceof AntFilesProvider) -->Line_10 $$ if (list.size() > 0) [ CD ]
Line_19 $$ for (File file : list) -->Line_23 $$ builder.append(file.getPath())[ FD ]
Line_3 $$ final XmlTag xmlTag = PsiTreeUtil.getParentOfType(elem, XmlTag.class)-->Line_4 $$ if (xmlTag == null) [ FD ]
Line_13 $$ final XmlTag tag = antElement.getXmlTag()-->Line_14 $$ if (tag != null) [ FD ]
Line_7 $$ final AntDomElement antElement = AntSupport.getAntDomElement(xmlTag)-->Line_13 $$ final XmlTag tag = antElement.getXmlTag()[ FD ]
Line_9 $$ final List<File> list = ((AntFilesProvider) antElement).getFiles(new HashSet<AntFilesProvider>())-->Line_10 $$ if (list.size() > 0) [ FD ]
