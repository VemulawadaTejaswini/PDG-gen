Line_36 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()-->Line_40 $$ secondAnimal = (Animal) results.get(1)[ FD ]
Line_5 $$ String query = "select an.description as description, an.bodyWeight as bodyWeight from Animal an order by bodyWeight desc"-->Line_27 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_10 $$ assertTrue("Incorrect return type", results.get(0) instanceof Animal)[ FD ]
Line_12 $$ Animal secondAnimal = (Animal) results.get(1)-->Line_40 $$ secondAnimal = (Animal) results.get(1)[ FD ]
Line_18 $$ session = openSession()-->Line_30 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_40 $$ secondAnimal = (Animal) results.get(1)-->Line_42 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ FD ]
Line_11 $$ Animal firstAnimal = (Animal) results.get(0)-->Line_13 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_19 $$ t = session.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_5 $$ String query = "select an.description as description, an.bodyWeight as bodyWeight from Animal an order by bodyWeight desc"-->Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()[ FD ]
Line_19 $$ t = session.beginTransaction()-->Line_23 $$ t.commit()[ FD ]
Line_25 $$ session = openSession()-->Line_35 $$ t = session.beginTransaction()[ FD ]
Line_25 $$ session = openSession()-->Line_26 $$ t = session.beginTransaction()[ FD ]
Line_34 $$ session = openSession()-->Line_36 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_6 $$ Session session = openSession()-->Line_7 $$ Transaction t = session.beginTransaction()[ FD ]
Line_11 $$ Animal firstAnimal = (Animal) results.get(0)-->Line_41 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_6 $$ Session session = openSession()-->Line_19 $$ t = session.beginTransaction()[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_32 $$ t.commit()[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_19 $$ t = session.beginTransaction()[ FD ]
Line_34 $$ session = openSession()-->Line_35 $$ t = session.beginTransaction()[ FD ]
Line_25 $$ session = openSession()-->Line_30 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_20 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()-->Line_22 $$ assertTrue("Incorrect return type", iter.next() instanceof Animal)[ FD ]
Line_6 $$ Session session = openSession()-->Line_44 $$ session.close()[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_23 $$ t.commit()[ FD ]
Line_12 $$ Animal secondAnimal = (Animal) results.get(1)-->Line_14 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_12 $$ Animal secondAnimal = (Animal) results.get(1)[ FD ]
Line_18 $$ session = openSession()-->Line_26 $$ t = session.beginTransaction()[ FD ]
Line_18 $$ session = openSession()-->Line_27 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()[ FD ]
Line_34 $$ session = openSession()-->Line_44 $$ session.close()[ FD ]
Line_6 $$ Session session = openSession()-->Line_33 $$ session.close()[ FD ]
Line_18 $$ session = openSession()-->Line_34 $$ session = openSession()[ FD ]
Line_19 $$ t = session.beginTransaction()-->Line_35 $$ t = session.beginTransaction()[ FD ]
Line_26 $$ t = session.beginTransaction()-->Line_35 $$ t = session.beginTransaction()[ FD ]
Line_6 $$ Session session = openSession()-->Line_18 $$ session = openSession()[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_36 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_18 $$ session = openSession()-->Line_44 $$ session.close()[ FD ]
Line_6 $$ Session session = openSession()-->Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()[ FD ]
Line_36 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()-->Line_39 $$ firstAnimal = (Animal) results.get(0)[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_37 $$ assertEquals("Incorrect result size", 2, results.size())[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_16 $$ t.commit()[ FD ]
Line_18 $$ session = openSession()-->Line_19 $$ t = session.beginTransaction()[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_38 $$ assertTrue("Incorrect return type", results.get(0) instanceof Animal)[ FD ]
Line_19 $$ t = session.beginTransaction()-->Line_32 $$ t.commit()[ FD ]
Line_26 $$ t = session.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_35 $$ t = session.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_6 $$ Session session = openSession()-->Line_35 $$ t = session.beginTransaction()[ FD ]
Line_25 $$ session = openSession()-->Line_34 $$ session = openSession()[ FD ]
Line_6 $$ Session session = openSession()-->Line_25 $$ session = openSession()[ FD ]
Line_25 $$ session = openSession()-->Line_33 $$ session.close()[ FD ]
Line_6 $$ Session session = openSession()-->Line_27 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()[ FD ]
Line_25 $$ session = openSession()-->Line_36 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_25 $$ session = openSession()-->Line_27 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()[ FD ]
Line_27 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()-->Line_29 $$ assertTrue("Incorrect return type", sr.get(0) instanceof Animal)[ FD ]
Line_39 $$ firstAnimal = (Animal) results.get(0)-->Line_41 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_39 $$ firstAnimal = (Animal) results.get(0)[ FD ]
Line_18 $$ session = openSession()-->Line_20 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()[ FD ]
Line_5 $$ String query = "select an.description as description, an.bodyWeight as bodyWeight from Animal an order by bodyWeight desc"-->Line_20 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()[ FD ]
Line_18 $$ session = openSession()-->Line_25 $$ session = openSession()[ FD ]
Line_27 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()-->Line_31 $$ sr.close()[ FD ]
Line_6 $$ Session session = openSession()-->Line_34 $$ session = openSession()[ FD ]
Line_6 $$ Session session = openSession()-->Line_17 $$ session.close()[ FD ]
Line_36 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()-->Line_38 $$ assertTrue("Incorrect return type", results.get(0) instanceof Animal)[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_40 $$ secondAnimal = (Animal) results.get(1)[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_11 $$ Animal firstAnimal = (Animal) results.get(0)[ FD ]
Line_11 $$ Animal firstAnimal = (Animal) results.get(0)-->Line_39 $$ firstAnimal = (Animal) results.get(0)[ FD ]
Line_6 $$ Session session = openSession()-->Line_15 $$ assertFalse(session.contains(firstAnimal))[ FD ]
Line_27 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()-->Line_30 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_18 $$ session = openSession()-->Line_35 $$ t = session.beginTransaction()[ FD ]
Line_27 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).scroll()-->Line_28 $$ assertTrue("Incorrect result size", sr.next())[ FD ]
Line_36 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()-->Line_37 $$ assertEquals("Incorrect result size", 2, results.size())[ FD ]
Line_18 $$ session = openSession()-->Line_24 $$ session.close()[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_26 $$ t = session.beginTransaction()[ FD ]
Line_25 $$ session = openSession()-->Line_44 $$ session.close()[ FD ]
Line_6 $$ Session session = openSession()-->Line_26 $$ t = session.beginTransaction()[ FD ]
Line_18 $$ session = openSession()-->Line_36 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_12 $$ Animal secondAnimal = (Animal) results.get(1)-->Line_42 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ FD ]
Line_26 $$ t = session.beginTransaction()-->Line_32 $$ t.commit()[ FD ]
Line_6 $$ Session session = openSession()-->Line_20 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()[ FD ]
Line_19 $$ t = session.beginTransaction()-->Line_26 $$ t = session.beginTransaction()[ FD ]
Line_6 $$ Session session = openSession()-->Line_36 $$ results = session.createQuery("select a from Animal a, Animal b order by a.id").setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE).list()[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_35 $$ t = session.beginTransaction()[ FD ]
Line_11 $$ Animal firstAnimal = (Animal) results.get(0)-->Line_15 $$ assertFalse(session.contains(firstAnimal))[ FD ]
Line_6 $$ Session session = openSession()-->Line_30 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_6 $$ Session session = openSession()-->Line_24 $$ session.close()[ FD ]
Line_18 $$ session = openSession()-->Line_33 $$ session.close()[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).list()-->Line_9 $$ assertEquals("Incorrect result size", results.size(), 2)[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_20 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.aliasToBean(Animal.class)).iterate()-->Line_21 $$ assertTrue("Incorrect result size", iter.hasNext())[ FD ]
