Line_2 $$ public Slice.Bound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive) -->Line_6 $$ return Slice.Bound.create(Slice.Bound.boundKind(isStart, isInclusive), buffers)[ FD ]
Line_2 $$ public Slice.Bound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive) -->Line_3 $$ ByteBuffer[] buffers = Arrays.copyOf(values, size + newValues.size())[ CD ]
Line_2 $$ public Slice.Bound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive) -->Line_3 $$ ByteBuffer[] buffers = Arrays.copyOf(values, size + newValues.size())[ FD ]
Line_2 $$ public Slice.Bound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive) -->Line_6 $$ return Slice.Bound.create(Slice.Bound.boundKind(isStart, isInclusive), buffers)[ CD ]
Line_4 $$ int newSize = size-->Line_5 $$ buffers[newSize++] = value[ FD ]
Line_2 $$ public Slice.Bound buildBoundWith(List<ByteBuffer> newValues, boolean isStart, boolean isInclusive) -->Line_4 $$ int newSize = size[ CD ]
Line_3 $$ ByteBuffer[] buffers = Arrays.copyOf(values, size + newValues.size())-->Line_6 $$ return Slice.Bound.create(Slice.Bound.boundKind(isStart, isInclusive), buffers)[ FD ]
