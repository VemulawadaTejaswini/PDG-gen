Line_13 $$ SpeculativeRetryParam retry = cfs.metadata.params.speculativeRetry-->Line_29 $$ if (retry.equals(SpeculativeRetryParam.ALWAYS))[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_5 $$ ReadRepairDecision repairDecision = command.metadata().newReadRepairDecision()[ CD ]
Line_5 $$ ReadRepairDecision repairDecision = command.metadata().newReadRepairDecision()-->Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_19 $$ InetAddress extraReplica = allReplicas.get(targetReplicas.size())[ CD ]
Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)-->Line_7 $$ consistencyLevel.assureSufficientLiveNodes(keyspace, targetReplicas)[ FD ]
Line_16 $$ if (targetReplicas.size() == allReplicas.size()) -->Line_17 $$ return new AlwaysSpeculatingReadExecutor(keyspace, cfs, command, consistencyLevel, targetReplicas)[ CD ]
Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)-->Line_16 $$ if (targetReplicas.size() == allReplicas.size()) [ FD ]
Line_5 $$ ReadRepairDecision repairDecision = command.metadata().newReadRepairDecision()-->Line_9 $$ Tracing.trace("Read-repair [ FD ]
Line_4 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())-->Line_19 $$ InetAddress extraReplica = allReplicas.get(targetReplicas.size())[ FD ]
Line_22 $$ if (!targetReplicas.contains(address)) -->Line_23 $$ extraReplica = address[ CD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_4 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())[ CD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_29 $$ if (retry.equals(SpeculativeRetryParam.ALWAYS))[ CD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_14 $$ if (retry.equals(SpeculativeRetryParam.NONE) || consistencyLevel.blockFor(keyspace) == allReplicas.size())[ FD ]
Line_19 $$ InetAddress extraReplica = allReplicas.get(targetReplicas.size())-->Line_23 $$ extraReplica = address[ FD ]
Line_4 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())-->Line_14 $$ if (retry.equals(SpeculativeRetryParam.NONE) || consistencyLevel.blockFor(keyspace) == allReplicas.size())[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_7 $$ consistencyLevel.assureSufficientLiveNodes(keyspace, targetReplicas)[ CD ]
Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)-->Line_20 $$ if (repairDecision == ReadRepairDecision.DC_LOCAL && targetReplicas.contains(extraReplica)) [ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)[ FD ]
Line_4 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())-->Line_16 $$ if (targetReplicas.size() == allReplicas.size()) [ FD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)-->Line_7 $$ consistencyLevel.assureSufficientLiveNodes(keyspace, targetReplicas)[ FD ]
Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)-->Line_28 $$ targetReplicas.add(extraReplica)[ FD ]
Line_5 $$ ReadRepairDecision repairDecision = command.metadata().newReadRepairDecision()-->Line_8 $$ if (repairDecision != ReadRepairDecision.NONE) [ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_4 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_8 $$ if (repairDecision != ReadRepairDecision.NONE) [ CD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)[ CD ]
Line_19 $$ InetAddress extraReplica = allReplicas.get(targetReplicas.size())-->Line_28 $$ targetReplicas.add(extraReplica)[ FD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)-->Line_14 $$ if (retry.equals(SpeculativeRetryParam.NONE) || consistencyLevel.blockFor(keyspace) == allReplicas.size())[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_28 $$ targetReplicas.add(extraReplica)[ CD ]
Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)-->Line_19 $$ InetAddress extraReplica = allReplicas.get(targetReplicas.size())[ FD ]
Line_8 $$ if (repairDecision != ReadRepairDecision.NONE) -->Line_9 $$ Tracing.trace("Read-repair [ CD ]
Line_8 $$ if (repairDecision != ReadRepairDecision.NONE) -->Line_10 $$ ReadRepairMetrics.attempted.mark()[ CD ]
Line_23 $$ extraReplica = address-->Line_28 $$ targetReplicas.add(extraReplica)[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_7 $$ consistencyLevel.assureSufficientLiveNodes(keyspace, targetReplicas)[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_16 $$ if (targetReplicas.size() == allReplicas.size()) [ CD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_20 $$ if (repairDecision == ReadRepairDecision.DC_LOCAL && targetReplicas.contains(extraReplica)) [ CD ]
Line_29 $$ if (retry.equals(SpeculativeRetryParam.ALWAYS))-->Line_32 $$ return new SpeculatingReadExecutor(keyspace, cfs, command, consistencyLevel, targetReplicas)[ CD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)-->Line_4 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_12 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(command.metadata().cfId)[ FD ]
Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)-->Line_22 $$ if (!targetReplicas.contains(address)) [ FD ]
Line_14 $$ if (retry.equals(SpeculativeRetryParam.NONE) || consistencyLevel.blockFor(keyspace) == allReplicas.size())-->Line_15 $$ return new NeverSpeculatingReadExecutor(keyspace, command, consistencyLevel, targetReplicas)[ CD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_3 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)[ CD ]
Line_21 $$ for (InetAddress address : allReplicas) -->Line_23 $$ extraReplica = address[ FD ]
Line_13 $$ SpeculativeRetryParam retry = cfs.metadata.params.speculativeRetry-->Line_14 $$ if (retry.equals(SpeculativeRetryParam.NONE) || consistencyLevel.blockFor(keyspace) == allReplicas.size())[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_3 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)[ FD ]
Line_21 $$ for (InetAddress address : allReplicas) -->Line_22 $$ if (!targetReplicas.contains(address)) [ FD ]
Line_4 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())-->Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_5 $$ ReadRepairDecision repairDecision = command.metadata().newReadRepairDecision()[ FD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)-->Line_12 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(command.metadata().cfId)[ FD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_13 $$ SpeculativeRetryParam retry = cfs.metadata.params.speculativeRetry[ CD ]
Line_19 $$ InetAddress extraReplica = allReplicas.get(targetReplicas.size())-->Line_20 $$ if (repairDecision == ReadRepairDecision.DC_LOCAL && targetReplicas.contains(extraReplica)) [ FD ]
Line_29 $$ if (retry.equals(SpeculativeRetryParam.ALWAYS))-->Line_30 $$ return new AlwaysSpeculatingReadExecutor(keyspace, cfs, command, consistencyLevel, targetReplicas)[ CD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_14 $$ if (retry.equals(SpeculativeRetryParam.NONE) || consistencyLevel.blockFor(keyspace) == allReplicas.size())[ CD ]
Line_2 $$ public static AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel) throws UnavailableException -->Line_12 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(command.metadata().cfId)[ CD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)-->Line_6 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)[ FD ]
