Line_33 $$ if (!targetReplicas.contains(address)) -->Line_34 $$ extraReplica = address[ CD ]
Line_8 $$ ReadRepairDecision repairDecision = command.metadata().newReadRepairDecision()-->Line_13 $$ Tracing.trace("Read-repair [ FD ]
Line_12 $$ if (repairDecision != ReadRepairDecision.NONE) -->Line_13 $$ Tracing.trace("Read-repair [ CD ]
Line_12 $$ if (repairDecision != ReadRepairDecision.NONE) -->Line_14 $$ ReadRepairMetrics.attempted.mark()[ CD ]
Line_6 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)-->Line_7 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())[ FD ]
Line_32 $$ for (InetAddress address : allReplicas) -->Line_33 $$ if (!targetReplicas.contains(address)) [ FD ]
Line_8 $$ ReadRepairDecision repairDecision = command.metadata().newReadRepairDecision()-->Line_9 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)[ FD ]
Line_17 $$ SpeculativeRetryParam retry = cfs.metadata.params.speculativeRetry-->Line_40 $$ if (retry.equals(SpeculativeRetryParam.ALWAYS))[ FD ]
Line_9 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)-->Line_33 $$ if (!targetReplicas.contains(address)) [ FD ]
Line_6 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)-->Line_9 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)[ FD ]
Line_9 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)-->Line_21 $$ if (targetReplicas.size() == allReplicas.size()) [ FD ]
Line_8 $$ ReadRepairDecision repairDecision = command.metadata().newReadRepairDecision()-->Line_12 $$ if (repairDecision != ReadRepairDecision.NONE) [ FD ]
Line_7 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())-->Line_9 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)[ FD ]
Line_7 $$ List<InetAddress> allReplicas = StorageProxy.getLiveSortedEndpoints(keyspace, command.partitionKey())-->Line_21 $$ if (targetReplicas.size() == allReplicas.size()) [ FD ]
Line_32 $$ for (InetAddress address : allReplicas) -->Line_34 $$ extraReplica = address[ FD ]
Line_40 $$ if (retry.equals(SpeculativeRetryParam.ALWAYS))-->Line_41 $$ return new AlwaysSpeculatingReadExecutor(keyspace, cfs, command, consistencyLevel, targetReplicas)[ CD ]
Line_34 $$ extraReplica = address-->Line_39 $$ targetReplicas.add(extraReplica)[ FD ]
Line_6 $$ Keyspace keyspace = Keyspace.open(command.metadata().ksName)-->Line_16 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(command.metadata().cfId)[ FD ]
Line_9 $$ List<InetAddress> targetReplicas = consistencyLevel.filterForQuery(keyspace, allReplicas, repairDecision)-->Line_39 $$ targetReplicas.add(extraReplica)[ FD ]
