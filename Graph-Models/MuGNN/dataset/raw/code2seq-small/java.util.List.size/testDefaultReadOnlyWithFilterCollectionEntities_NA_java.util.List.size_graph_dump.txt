Line_7 $$ Set expectedReadOnlyObjects = new HashSet()-->Line_12 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_8 $$ Session s = openSession()-->Line_9 $$ assertFalse(s.isDefaultReadOnly())[ FD ]
Line_8 $$ Session s = openSession()-->Line_15 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_18 $$ s = openSession()-->Line_35 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_38 $$ s = openSession()-->Line_39 $$ t = s.beginTransaction()[ FD ]
Line_8 $$ Session s = openSession()-->Line_22 $$ Container c = (Container) s.get(Container.class, cOrig.getId())[ FD ]
Line_18 $$ s = openSession()-->Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_7 $$ Set expectedReadOnlyObjects = new HashSet()-->Line_25 $$ expectedReadOnlyObjects = new HashSet(//c.getLazyDataPoints(),[ FD ]
Line_8 $$ Session s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_38 $$ s = openSession()-->Line_40 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_31 $$ assertEquals(1, list.size())[ FD ]
Line_10 $$ Transaction t = s.beginTransaction()-->Line_36 $$ t.commit()[ FD ]
Line_18 $$ s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_8 $$ Session s = openSession()-->Line_33 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_6 $$ Set expectedInitializedObjects = new HashSet(Arrays.asList(cOrig, cOrig.getNoProxyInfo(), cOrig.getProxyInfo(), cOrig.getNonLazyInfo(), cOrig.getNoProxyOwner(), cOrig.getProxyOwner(), cOrig.getNonLazyOwner(), cOrig.getLazyDataPoints().iterator().next(), cOrig.getNonLazyJoinDataPoints().iterator().next(), cOrig.getNonLazySelectDataPoints().iterator().next()))-->Line_24 $$ expectedInitializedObjects = new HashSet(Arrays.asList(c, c.getNonLazyInfo(), c.getNoProxyOwner(), c.getProxyOwner(), c.getNonLazyOwner(), c.getNonLazyJoinDataPoints().iterator().next(), c.getNonLazySelectDataPoints().iterator().next()))[ FD ]
Line_8 $$ Session s = openSession()-->Line_11 $$ s.save(cOrig)[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_10 $$ Transaction t = s.beginTransaction()-->Line_19 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ Set expectedInitializedObjects = new HashSet(Arrays.asList(cOrig, cOrig.getNoProxyInfo(), cOrig.getProxyInfo(), cOrig.getNonLazyInfo(), cOrig.getNoProxyOwner(), cOrig.getProxyOwner(), cOrig.getNonLazyOwner(), cOrig.getLazyDataPoints().iterator().next(), cOrig.getNonLazyJoinDataPoints().iterator().next(), cOrig.getNonLazySelectDataPoints().iterator().next()))-->Line_12 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_38 $$ s = openSession()-->Line_45 $$ s.close()[ FD ]
Line_6 $$ Set expectedInitializedObjects = new HashSet(Arrays.asList(cOrig, cOrig.getNoProxyInfo(), cOrig.getProxyInfo(), cOrig.getNonLazyInfo(), cOrig.getNoProxyOwner(), cOrig.getProxyOwner(), cOrig.getNonLazyOwner(), cOrig.getLazyDataPoints().iterator().next(), cOrig.getNonLazyJoinDataPoints().iterator().next(), cOrig.getNonLazySelectDataPoints().iterator().next()))-->Line_15 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_5 $$ Container cOrig = createContainer()-->Line_12 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_29 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_30 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_33 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_8 $$ Session s = openSession()-->Line_37 $$ s.close()[ FD ]
Line_18 $$ s = openSession()-->Line_32 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_18 $$ s = openSession()-->Line_20 $$ s.setDefaultReadOnly(true)[ FD ]
Line_8 $$ Session s = openSession()-->Line_20 $$ s.setDefaultReadOnly(true)[ FD ]
Line_10 $$ Transaction t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_8 $$ Session s = openSession()-->Line_12 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_10 $$ Transaction t = s.beginTransaction()-->Line_16 $$ t.commit()[ FD ]
Line_8 $$ Session s = openSession()-->Line_39 $$ t = s.beginTransaction()[ FD ]
Line_18 $$ s = openSession()-->Line_33 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_8 $$ Session s = openSession()-->Line_40 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_8 $$ Session s = openSession()-->Line_19 $$ t = s.beginTransaction()[ FD ]
Line_7 $$ Set expectedReadOnlyObjects = new HashSet()-->Line_15 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_22 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_24 $$ expectedInitializedObjects = new HashSet(Arrays.asList(c, c.getNonLazyInfo(), c.getNoProxyOwner(), c.getProxyOwner(), c.getNonLazyOwner(), c.getNonLazyJoinDataPoints().iterator().next(), c.getNonLazySelectDataPoints().iterator().next()))[ FD ]
Line_38 $$ s = openSession()-->Line_42 $$ s.createQuery("delete from Info").executeUpdate()[ FD ]
Line_8 $$ Session s = openSession()-->Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_18 $$ s = openSession()-->Line_29 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_5 $$ Container cOrig = createContainer()-->Line_11 $$ s.save(cOrig)[ FD ]
Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_35 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_8 $$ Session s = openSession()-->Line_10 $$ Transaction t = s.beginTransaction()[ FD ]
Line_18 $$ s = openSession()-->Line_22 $$ Container c = (Container) s.get(Container.class, cOrig.getId())[ FD ]
Line_8 $$ Session s = openSession()-->Line_14 $$ assertTrue(s.isDefaultReadOnly())[ FD ]
Line_8 $$ Session s = openSession()-->Line_13 $$ s.setDefaultReadOnly(true)[ FD ]
Line_33 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()-->Line_35 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_8 $$ Session s = openSession()-->Line_42 $$ s.createQuery("delete from Info").executeUpdate()[ FD ]
Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_30 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_8 $$ Session s = openSession()-->Line_43 $$ s.createQuery("delete from Owner").executeUpdate()[ FD ]
Line_8 $$ Session s = openSession()-->Line_17 $$ s.close()[ FD ]
Line_39 $$ t = s.beginTransaction()-->Line_44 $$ t.commit()[ FD ]
Line_8 $$ Session s = openSession()-->Line_30 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_28 $$ assertEquals(1, list.size())[ FD ]
Line_18 $$ s = openSession()-->Line_30 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_8 $$ Session s = openSession()-->Line_38 $$ s = openSession()[ FD ]
Line_8 $$ Session s = openSession()-->Line_41 $$ s.createQuery("delete from Container").executeUpdate()[ FD ]
Line_18 $$ s = openSession()-->Line_19 $$ t = s.beginTransaction()[ FD ]
Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_32 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_30 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_35 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_18 $$ s = openSession()-->Line_40 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_8 $$ Session s = openSession()-->Line_21 $$ assertTrue(s.isDefaultReadOnly())[ FD ]
Line_10 $$ Transaction t = s.beginTransaction()-->Line_39 $$ t = s.beginTransaction()[ FD ]
Line_18 $$ s = openSession()-->Line_43 $$ s.createQuery("delete from Owner").executeUpdate()[ FD ]
Line_30 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_31 $$ assertEquals(1, list.size())[ FD ]
Line_8 $$ Session s = openSession()-->Line_29 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_33 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_33 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()-->Line_34 $$ assertEquals(1, list.size())[ FD ]
Line_30 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_32 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_5 $$ Container cOrig = createContainer()-->Line_6 $$ Set expectedInitializedObjects = new HashSet(Arrays.asList(cOrig, cOrig.getNoProxyInfo(), cOrig.getProxyInfo(), cOrig.getNonLazyInfo(), cOrig.getNoProxyOwner(), cOrig.getProxyOwner(), cOrig.getNonLazyOwner(), cOrig.getLazyDataPoints().iterator().next(), cOrig.getNonLazyJoinDataPoints().iterator().next(), cOrig.getNonLazySelectDataPoints().iterator().next()))[ FD ]
Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_34 $$ assertEquals(1, list.size())[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_39 $$ t = s.beginTransaction()[ FD ]
Line_38 $$ s = openSession()-->Line_41 $$ s.createQuery("delete from Container").executeUpdate()[ FD ]
Line_8 $$ Session s = openSession()-->Line_35 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_22 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_30 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_8 $$ Session s = openSession()-->Line_18 $$ s = openSession()[ FD ]
Line_19 $$ t = s.beginTransaction()-->Line_36 $$ t.commit()[ FD ]
Line_22 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_33 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_18 $$ s = openSession()-->Line_21 $$ assertTrue(s.isDefaultReadOnly())[ FD ]
Line_22 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_23 $$ assertNotSame(cOrig, c)[ FD ]
Line_18 $$ s = openSession()-->Line_37 $$ s.close()[ FD ]
Line_22 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_27 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_18 $$ s = openSession()-->Line_38 $$ s = openSession()[ FD ]
Line_38 $$ s = openSession()-->Line_43 $$ s.createQuery("delete from Owner").executeUpdate()[ FD ]
Line_5 $$ Container cOrig = createContainer()-->Line_15 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_18 $$ s = openSession()-->Line_42 $$ s.createQuery("delete from Info").executeUpdate()[ FD ]
Line_5 $$ Container cOrig = createContainer()-->Line_23 $$ assertNotSame(cOrig, c)[ FD ]
Line_5 $$ Container cOrig = createContainer()-->Line_22 $$ Container c = (Container) s.get(Container.class, cOrig.getId())[ FD ]
Line_18 $$ s = openSession()-->Line_39 $$ t = s.beginTransaction()[ FD ]
Line_18 $$ s = openSession()-->Line_41 $$ s.createQuery("delete from Container").executeUpdate()[ FD ]
Line_8 $$ Session s = openSession()-->Line_32 $$ assertTrue(s.isReadOnly(list.get(0)))[ FD ]
Line_22 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_25 $$ expectedReadOnlyObjects = new HashSet(//c.getLazyDataPoints(),[ FD ]
Line_30 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_34 $$ assertEquals(1, list.size())[ FD ]
