Line_2 $$ private static void doTest(Map<String, String> graph, final String start, final String finish, final int k, String... expectedPaths) -->Line_11 $$ if (sizes.size() != paths.size()) [ CD ]
Line_2 $$ private static void doTest(Map<String, String> graph, final String start, final String finish, final int k, String... expectedPaths) -->Line_3 $$ final Graph<String> generator = initGraph(graph)[ FD ]
Line_6 $$ Set<Integer> sizes = new HashSet<Integer>()-->Line_11 $$ if (sizes.size() != paths.size()) [ FD ]
Line_4 $$ final List<List<String>> paths = getAlgorithmsInstance().findKShortestPaths(generator, start, finish, k, new EmptyProgressIndicator())-->Line_11 $$ if (sizes.size() != paths.size()) [ FD ]
Line_7 $$ for (List<String> path : paths) -->Line_8 $$ pathStrings.add(StringUtil.join(path, ""))[ FD ]
Line_2 $$ private static void doTest(Map<String, String> graph, final String start, final String finish, final int k, String... expectedPaths) -->Line_12 $$ UsefulTestCase.assertSameElements(pathStrings, expectedPaths)[ FD ]
Line_2 $$ private static void doTest(Map<String, String> graph, final String start, final String finish, final int k, String... expectedPaths) -->Line_4 $$ final List<List<String>> paths = getAlgorithmsInstance().findKShortestPaths(generator, start, finish, k, new EmptyProgressIndicator())[ CD ]
Line_6 $$ Set<Integer> sizes = new HashSet<Integer>()-->Line_9 $$ sizes.add(path.size())[ FD ]
Line_11 $$ if (sizes.size() != paths.size()) -->Line_14 $$ UsefulTestCase.assertOrderedEquals(pathStrings, expectedPaths)[ CD ]
Line_2 $$ private static void doTest(Map<String, String> graph, final String start, final String finish, final int k, String... expectedPaths) -->Line_14 $$ UsefulTestCase.assertOrderedEquals(pathStrings, expectedPaths)[ FD ]
Line_7 $$ for (List<String> path : paths) -->Line_9 $$ sizes.add(path.size())[ FD ]
Line_3 $$ final Graph<String> generator = initGraph(graph)-->Line_4 $$ final List<List<String>> paths = getAlgorithmsInstance().findKShortestPaths(generator, start, finish, k, new EmptyProgressIndicator())[ FD ]
Line_2 $$ private static void doTest(Map<String, String> graph, final String start, final String finish, final int k, String... expectedPaths) -->Line_5 $$ List<String> pathStrings = new ArrayList<String>()[ CD ]
Line_2 $$ private static void doTest(Map<String, String> graph, final String start, final String finish, final int k, String... expectedPaths) -->Line_3 $$ final Graph<String> generator = initGraph(graph)[ CD ]
Line_5 $$ List<String> pathStrings = new ArrayList<String>()-->Line_14 $$ UsefulTestCase.assertOrderedEquals(pathStrings, expectedPaths)[ FD ]
Line_5 $$ List<String> pathStrings = new ArrayList<String>()-->Line_8 $$ pathStrings.add(StringUtil.join(path, ""))[ FD ]
Line_2 $$ private static void doTest(Map<String, String> graph, final String start, final String finish, final int k, String... expectedPaths) -->Line_4 $$ final List<List<String>> paths = getAlgorithmsInstance().findKShortestPaths(generator, start, finish, k, new EmptyProgressIndicator())[ FD ]
Line_11 $$ if (sizes.size() != paths.size()) -->Line_12 $$ UsefulTestCase.assertSameElements(pathStrings, expectedPaths)[ CD ]
Line_2 $$ private static void doTest(Map<String, String> graph, final String start, final String finish, final int k, String... expectedPaths) -->Line_6 $$ Set<Integer> sizes = new HashSet<Integer>()[ CD ]
Line_5 $$ List<String> pathStrings = new ArrayList<String>()-->Line_12 $$ UsefulTestCase.assertSameElements(pathStrings, expectedPaths)[ FD ]
