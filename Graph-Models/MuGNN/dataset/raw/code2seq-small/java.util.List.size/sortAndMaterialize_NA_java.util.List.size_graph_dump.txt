Line_10 $$ for (int i = 0; i < columnTypes.size(); i++) -->Line_11 $$ columnTypes.get(i).appendTo(page.getBlock(i), positionIndex, pageBuilder.getBlockBuilder(i))[ FD ]
Line_4 $$ PageBuilder pageBuilder = new PageBuilder(columnTypes)-->Line_11 $$ columnTypes.get(i).appendTo(page.getBlock(i), positionIndex, pageBuilder.getBlockBuilder(i))[ FD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_3 $$ long[] orderedAddresses = PAGE_SORTER.sort(columnTypes, pages, sortIndexes, sortOrders, 10_000)[ CD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_8 $$ Page page = pages.get(pageIndex)[ FD ]
Line_5 $$ for (long orderedAddress : orderedAddresses) -->Line_6 $$ int pageIndex = PAGE_SORTER.decodePageIndex(orderedAddress)[ FD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_16 $$ for (int i = 0; i < sortIndexes.size(); i++) [ CD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_17 $$ outputBlocks[i] = blocks[sortIndexes.get(i)][ FD ]
Line_19 $$ MaterializedResult.Builder resultBuilder = MaterializedResult.resultBuilder(SESSION, sortTypes)-->Line_21 $$ return resultBuilder.build()[ FD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_19 $$ MaterializedResult.Builder resultBuilder = MaterializedResult.resultBuilder(SESSION, sortTypes)[ CD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_20 $$ resultBuilder.page(new Page(outputBlocks))[ CD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_15 $$ Block[] outputBlocks = new Block[blocks.length][ CD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_10 $$ for (int i = 0; i < columnTypes.size(); i++) [ FD ]
Line_16 $$ for (int i = 0; i < sortIndexes.size(); i++) -->Line_17 $$ outputBlocks[i] = blocks[sortIndexes.get(i)][ CD ]
Line_16 $$ for (int i = 0; i < sortIndexes.size(); i++) -->Line_17 $$ outputBlocks[i] = blocks[sortIndexes.get(i)][ FD ]
Line_19 $$ MaterializedResult.Builder resultBuilder = MaterializedResult.resultBuilder(SESSION, sortTypes)-->Line_20 $$ resultBuilder.page(new Page(outputBlocks))[ FD ]
Line_6 $$ int pageIndex = PAGE_SORTER.decodePageIndex(orderedAddress)-->Line_8 $$ Page page = pages.get(pageIndex)[ FD ]
Line_7 $$ int positionIndex = PAGE_SORTER.decodePositionIndex(orderedAddress)-->Line_11 $$ columnTypes.get(i).appendTo(page.getBlock(i), positionIndex, pageBuilder.getBlockBuilder(i))[ FD ]
Line_4 $$ PageBuilder pageBuilder = new PageBuilder(columnTypes)-->Line_9 $$ pageBuilder.declarePosition()[ FD ]
Line_8 $$ Page page = pages.get(pageIndex)-->Line_11 $$ columnTypes.get(i).appendTo(page.getBlock(i), positionIndex, pageBuilder.getBlockBuilder(i))[ FD ]
Line_10 $$ for (int i = 0; i < columnTypes.size(); i++) -->Line_17 $$ outputBlocks[i] = blocks[sortIndexes.get(i)][ FD ]
Line_5 $$ for (long orderedAddress : orderedAddresses) -->Line_7 $$ int positionIndex = PAGE_SORTER.decodePositionIndex(orderedAddress)[ FD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_11 $$ columnTypes.get(i).appendTo(page.getBlock(i), positionIndex, pageBuilder.getBlockBuilder(i))[ FD ]
Line_4 $$ PageBuilder pageBuilder = new PageBuilder(columnTypes)-->Line_14 $$ Block[] blocks = pageBuilder.build().getBlocks()[ FD ]
Line_10 $$ for (int i = 0; i < columnTypes.size(); i++) -->Line_16 $$ for (int i = 0; i < sortIndexes.size(); i++) [ FD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_21 $$ return resultBuilder.build()[ CD ]
Line_10 $$ for (int i = 0; i < columnTypes.size(); i++) -->Line_11 $$ columnTypes.get(i).appendTo(page.getBlock(i), positionIndex, pageBuilder.getBlockBuilder(i))[ CD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_19 $$ MaterializedResult.Builder resultBuilder = MaterializedResult.resultBuilder(SESSION, sortTypes)[ FD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_3 $$ long[] orderedAddresses = PAGE_SORTER.sort(columnTypes, pages, sortIndexes, sortOrders, 10_000)[ FD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_16 $$ for (int i = 0; i < sortIndexes.size(); i++) [ FD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_4 $$ PageBuilder pageBuilder = new PageBuilder(columnTypes)[ CD ]
Line_2 $$ private static MaterializedResult sortAndMaterialize(List<Page> pages, List<Type> columnTypes, List<Integer> sortIndexes, List<SortOrder> sortOrders, List<Type> sortTypes) -->Line_14 $$ Block[] blocks = pageBuilder.build().getBlocks()[ CD ]
