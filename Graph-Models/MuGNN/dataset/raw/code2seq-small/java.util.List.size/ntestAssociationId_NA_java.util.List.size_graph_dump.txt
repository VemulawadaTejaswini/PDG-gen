Line_22 $$ s = openSession()-->Line_49 $$ doDelete(s, "from Foo foo")[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_41 $$ Stuff stuff = new Stuff()[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_47 $$ assertTrue(stuff.getMoreStuff().getName().equals("More Stuff"))[ CD ]
Line_23 $$ t = s.beginTransaction()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_23 $$ t = s.beginTransaction()-->Line_50 $$ t.commit()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_33 $$ s = openSession()[ CD ]
Line_41 $$ Stuff stuff = new Stuff()-->Line_46 $$ assertTrue(stuff.getProperty().equals(TimeZone.getDefault()))[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_36 $$ s.load(more, more)[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_10 $$ more.setIntId(12)[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_26 $$ results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.name = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, "More Stuff", StandardBasicTypes.STRING).list()[ CD ]
Line_12 $$ Stuff stuf = new Stuff()-->Line_13 $$ stuf.setMoreStuff(more)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_45 $$ s.load(stuff, stuff)[ CD ]
Line_39 $$ s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_33 $$ s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_39 $$ s = openSession()-->Line_48 $$ doDelete(s, "from MoreStuff")[ FD ]
Line_39 $$ s = openSession()-->Line_49 $$ doDelete(s, "from Foo foo")[ FD ]
Line_8 $$ MoreStuff more = new MoreStuff()-->Line_11 $$ more.setStringId("id")[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_39 $$ s = openSession()[ CD ]
Line_33 $$ s = openSession()-->Line_39 $$ s = openSession()[ FD ]
Line_23 $$ t = s.beginTransaction()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ s = openSession()-->Line_36 $$ s.load(more, more)[ FD ]
Line_39 $$ s = openSession()-->Line_45 $$ s.load(stuff, stuff)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_28 $$ s.createQuery("from Stuff as s where s.foo.string is not null").list()[ CD ]
Line_8 $$ MoreStuff more = new MoreStuff()-->Line_10 $$ more.setIntId(12)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_50 $$ t.commit()[ CD ]
Line_33 $$ s = openSession()-->Line_49 $$ doDelete(s, "from Foo foo")[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_22 $$ s = openSession()[ CD ]
Line_22 $$ s = openSession()-->Line_45 $$ s.load(stuff, stuff)[ FD ]
Line_8 $$ MoreStuff more = new MoreStuff()-->Line_19 $$ s.save(more)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_48 $$ doDelete(s, "from MoreStuff")[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_6 $$ Bar bar = new Bar()[ CD ]
Line_24 $$ List results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.id.intId = ? and s.moreStuff.id.stringId = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, new Integer(12), StandardBasicTypes.INTEGER).setParameter(3, "id", StandardBasicTypes.STRING).list()-->Line_27 $$ assertEquals(1, results.size())[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_23 $$ t = s.beginTransaction()[ CD ]
Line_33 $$ s = openSession()-->Line_48 $$ doDelete(s, "from MoreStuff")[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_44 $$ stuff.setMoreStuff(more)[ CD ]
Line_41 $$ Stuff stuff = new Stuff()-->Line_47 $$ assertTrue(stuff.getMoreStuff().getName().equals("More Stuff"))[ FD ]
Line_41 $$ Stuff stuff = new Stuff()-->Line_44 $$ stuff.setMoreStuff(more)[ FD ]
Line_22 $$ s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_7 $$ String id = (String) s.save(bar)[ CD ]
Line_8 $$ MoreStuff more = new MoreStuff()-->Line_36 $$ s.load(more, more)[ FD ]
Line_22 $$ s = openSession()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_12 $$ Stuff stuf = new Stuff()-->Line_17 $$ stuf.setId(1234)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_20 $$ t.commit()[ FD ]
Line_40 $$ t = s.beginTransaction()-->Line_50 $$ t.commit()[ FD ]
Line_41 $$ Stuff stuff = new Stuff()-->Line_43 $$ stuff.setId(1234)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_46 $$ assertTrue(stuff.getProperty().equals(TimeZone.getDefault()))[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_49 $$ doDelete(s, "from Foo foo")[ CD ]
Line_22 $$ s = openSession()-->Line_33 $$ s = openSession()[ FD ]
Line_22 $$ s = openSession()-->Line_28 $$ s.createQuery("from Stuff as s where s.foo.string is not null").list()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_51 $$ s.close()[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_16 $$ stuf.setFoo(bar)[ CD ]
Line_34 $$ t = s.beginTransaction()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_9 $$ more.setName("More Stuff")[ CD ]
Line_12 $$ Stuff stuf = new Stuff()-->Line_16 $$ stuf.setFoo(bar)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_11 $$ more.setStringId("id")[ CD ]
Line_41 $$ Stuff stuff = new Stuff()-->Line_45 $$ s.load(stuff, stuff)[ FD ]
Line_22 $$ s = openSession()-->Line_39 $$ s = openSession()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_25 $$ assertEquals(1, results.size())[ CD ]
Line_33 $$ s = openSession()-->Line_35 $$ FooProxy foo = (FooProxy) s.load(Foo.class, id)[ FD ]
Line_23 $$ t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_29 $$ assertTrue(s.createQuery("from Stuff as s where s.foo > '0' order by s.foo").list().size() == 1)[ CD ]
Line_7 $$ String id = (String) s.save(bar)-->Line_35 $$ FooProxy foo = (FooProxy) s.load(Foo.class, id)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_50 $$ t.commit()[ FD ]
Line_6 $$ Bar bar = new Bar()-->Line_26 $$ results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.name = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, "More Stuff", StandardBasicTypes.STRING).list()[ FD ]
Line_8 $$ MoreStuff more = new MoreStuff()-->Line_14 $$ more.setStuffs(new ArrayList())[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_34 $$ t = s.beginTransaction()[ CD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_23 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ s = openSession()-->Line_32 $$ s.close()[ FD ]
Line_34 $$ t = s.beginTransaction()-->Line_50 $$ t.commit()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_24 $$ List results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.id.intId = ? and s.moreStuff.id.stringId = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, new Integer(12), StandardBasicTypes.INTEGER).setParameter(3, "id", StandardBasicTypes.STRING).list()[ CD ]
Line_33 $$ s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_33 $$ s = openSession()-->Line_45 $$ s.load(stuff, stuff)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_26 $$ results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.name = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, "More Stuff", StandardBasicTypes.STRING).list()-->Line_27 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_37 $$ t.commit()[ CD ]
Line_12 $$ Stuff stuf = new Stuff()-->Line_15 $$ more.getStuffs().add(stuf)[ FD ]
Line_6 $$ Bar bar = new Bar()-->Line_16 $$ stuf.setFoo(bar)[ FD ]
Line_22 $$ s = openSession()-->Line_29 $$ assertTrue(s.createQuery("from Stuff as s where s.foo > '0' order by s.foo").list().size() == 1)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_17 $$ stuf.setId(1234)[ CD ]
Line_22 $$ s = openSession()-->Line_26 $$ results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.name = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, "More Stuff", StandardBasicTypes.STRING).list()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_8 $$ MoreStuff more = new MoreStuff()[ CD ]
Line_41 $$ Stuff stuff = new Stuff()-->Line_42 $$ stuff.setFoo(foo)[ FD ]
Line_33 $$ s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_8 $$ MoreStuff more = new MoreStuff()-->Line_15 $$ more.getStuffs().add(stuf)[ FD ]
Line_6 $$ Bar bar = new Bar()-->Line_7 $$ String id = (String) s.save(bar)[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_19 $$ s.save(more)[ CD ]
Line_24 $$ List results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.id.intId = ? and s.moreStuff.id.stringId = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, new Integer(12), StandardBasicTypes.INTEGER).setParameter(3, "id", StandardBasicTypes.STRING).list()-->Line_25 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_27 $$ assertEquals(1, results.size())[ CD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_5 $$ Transaction t = s.beginTransaction()[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_42 $$ stuff.setFoo(foo)[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_14 $$ more.setStuffs(new ArrayList())[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_15 $$ more.getStuffs().add(stuf)[ CD ]
Line_12 $$ Stuff stuf = new Stuff()-->Line_18 $$ stuf.setProperty(TimeZone.getDefault())[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_12 $$ Stuff stuf = new Stuff()[ CD ]
Line_35 $$ FooProxy foo = (FooProxy) s.load(Foo.class, id)-->Line_42 $$ stuff.setFoo(foo)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_20 $$ t.commit()[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_13 $$ stuf.setMoreStuff(more)[ CD ]
Line_8 $$ MoreStuff more = new MoreStuff()-->Line_44 $$ stuff.setMoreStuff(more)[ FD ]
Line_22 $$ s = openSession()-->Line_23 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_40 $$ t = s.beginTransaction()[ CD ]
Line_39 $$ s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_24 $$ List results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.id.intId = ? and s.moreStuff.id.stringId = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, new Integer(12), StandardBasicTypes.INTEGER).setParameter(3, "id", StandardBasicTypes.STRING).list()-->Line_26 $$ results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.name = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, "More Stuff", StandardBasicTypes.STRING).list()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_21 $$ s.close()[ CD ]
Line_22 $$ s = openSession()-->Line_48 $$ doDelete(s, "from MoreStuff")[ FD ]
Line_22 $$ s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_22 $$ s = openSession()-->Line_35 $$ FooProxy foo = (FooProxy) s.load(Foo.class, id)[ FD ]
Line_8 $$ MoreStuff more = new MoreStuff()-->Line_9 $$ more.setName("More Stuff")[ FD ]
Line_33 $$ s = openSession()-->Line_36 $$ s.load(more, more)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_18 $$ stuf.setProperty(TimeZone.getDefault())[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_32 $$ s.close()[ CD ]
Line_6 $$ Bar bar = new Bar()-->Line_24 $$ List results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.id.intId = ? and s.moreStuff.id.stringId = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, new Integer(12), StandardBasicTypes.INTEGER).setParameter(3, "id", StandardBasicTypes.STRING).list()[ FD ]
Line_33 $$ s = openSession()-->Line_34 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_38 $$ s.close()[ CD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_43 $$ stuff.setId(1234)[ CD ]
Line_8 $$ MoreStuff more = new MoreStuff()-->Line_13 $$ stuf.setMoreStuff(more)[ FD ]
Line_2 $$ public void ntestAssociationId() throws Exception -->Line_35 $$ FooProxy foo = (FooProxy) s.load(Foo.class, id)[ CD ]
Line_22 $$ s = openSession()-->Line_24 $$ List results = s.createQuery("from Stuff as s where s.foo.id = ? and s.id.id = ? and s.moreStuff.id.intId = ? and s.moreStuff.id.stringId = ?").setParameter(0, bar, s.getTypeHelper().entity(Foo.class)).setParameter(1, new Long(1234), StandardBasicTypes.LONG).setParameter(2, new Integer(12), StandardBasicTypes.INTEGER).setParameter(3, "id", StandardBasicTypes.STRING).list()[ FD ]
