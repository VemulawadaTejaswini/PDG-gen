Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_7 $$ bpp.setBeanFactory(bf)[ FD ]
Line_14 $$ GenericRepository gr = new GenericRepositorySubclass()-->Line_26 $$ assertSame(gr, bean.integerRepositoryList.get(0))[ FD ]
Line_12 $$ StringRepository sr = new StringRepository()-->Line_17 $$ assertSame(sr, bean.stringRepository)[ FD ]
Line_9 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class)-->Line_11 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_11 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_14 $$ GenericRepository gr = new GenericRepositorySubclass()-->Line_22 $$ assertSame(gr, bean.integerRepositoryArray[0])[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_8 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_14 $$ GenericRepository gr = new GenericRepositorySubclass()-->Line_30 $$ assertSame(gr, bean.integerRepositoryMap.get("genericRepo"))[ FD ]
Line_6 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_8 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_16 $$ RepositoryConstructorInjectionBean bean = (RepositoryConstructorInjectionBean) bf.getBean("annotatedBean")[ FD ]
Line_12 $$ StringRepository sr = new StringRepository()-->Line_21 $$ assertSame(sr, bean.stringRepositoryArray[0])[ FD ]
Line_14 $$ GenericRepository gr = new GenericRepositorySubclass()-->Line_15 $$ bf.registerSingleton("genericRepo", gr)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_5 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ FD ]
Line_12 $$ StringRepository sr = new StringRepository()-->Line_25 $$ assertSame(sr, bean.stringRepositoryList.get(0))[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_13 $$ bf.registerSingleton("stringRepo", sr)[ FD ]
Line_12 $$ StringRepository sr = new StringRepository()-->Line_13 $$ bf.registerSingleton("stringRepo", sr)[ FD ]
Line_12 $$ StringRepository sr = new StringRepository()-->Line_29 $$ assertSame(sr, bean.stringRepositoryMap.get("stringRepo"))[ FD ]
Line_14 $$ GenericRepository gr = new GenericRepositorySubclass()-->Line_18 $$ assertSame(gr, bean.integerRepository)[ FD ]
Line_9 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class)-->Line_10 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_6 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_7 $$ bpp.setBeanFactory(bf)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_15 $$ bf.registerSingleton("genericRepo", gr)[ FD ]
