Line_31 $$ Collections.sort(keys, new Comparator<Key>() -->Line_34 $$ List<String> o2 = k2.words[ CD ]
Line_7 $$ parentPrefix = ((PropertiesPrefixGroup) parent.getValue()).getPrefix()-->Line_8 $$ parentPrefixLength = StringUtil.split(parentPrefix, mySeparator).size()[ FD ]
Line_42 $$ int res = s1.compareTo(s2)-->Line_43 $$ if (res != 0)[ FD ]
Line_11 $$ parentPrefixLength = 0-->Line_52 $$ if (!isEndOfGroup(i, keys, parentPrefixLength)) [ FD ]
Line_6 $$ if (parent.getValue() instanceof PropertiesPrefixGroup) -->Line_8 $$ parentPrefixLength = StringUtil.split(parentPrefix, mySeparator).size()[ CD ]
Line_60 $$ for (int k = parentPrefixLength; k < prefixLen; k++) -->Line_64 $$ prefixLen = k[ FD ]
Line_6 $$ if (parent.getValue() instanceof PropertiesPrefixGroup) -->Line_7 $$ parentPrefix = ((PropertiesPrefixGroup) parent.getValue()).getPrefix()[ CD ]
Line_73 $$ if (i - groupStart > 1) -->Line_75 $$ if (groupStart != keys.size()) [ CD ]
Line_5 $$ int parentPrefixLength-->Line_8 $$ parentPrefixLength = StringUtil.split(parentPrefix, mySeparator).size()[ FD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_56 $$ int prefixLen = firstKey.size()[ CD ]
Line_58 $$ List<String> prevKey = keys.get(j - 1).words-->Line_62 $$ String wordInPrevKey = k < prevKey.size() ? prevKey.get(k) : null[ FD ]
Line_33 $$ List<String> o1 = k1.words-->Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) [ FD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_57 $$ for (int j = groupStart + 1; j < i; j++) [ CD ]
Line_64 $$ prefixLen = k-->Line_60 $$ for (int k = parentPrefixLength; k < prefixLen; k++) [ FD ]
Line_2 $$ public Collection<Group> group(@NotNull final AbstractTreeNode parent, @NotNull Collection<TreeElement> children) -->Line_3 $$ List<Key> keys = new ArrayList<Key>()[ CD ]
Line_2 $$ public Collection<Group> group(@NotNull final AbstractTreeNode parent, @NotNull Collection<TreeElement> children) -->Line_5 $$ int parentPrefixLength[ CD ]
Line_5 $$ int parentPrefixLength-->Line_52 $$ if (!isEndOfGroup(i, keys, parentPrefixLength)) [ FD ]
Line_33 $$ List<String> o1 = k1.words-->Line_36 $$ if (i == o1.size())[ FD ]
Line_38 $$ if (i == o2.size())-->Line_39 $$ return -1[ CD ]
Line_63 $$ if (!Comparing.strEqual(word, wordInPrevKey)) -->Line_64 $$ prefixLen = k[ CD ]
Line_10 $$ parentPrefix = ""-->Line_71 $$ String presentableName = prefix.substring(parentPrefix.length())[ FD ]
Line_3 $$ List<Key> keys = new ArrayList<Key>()-->Line_31 $$ Collections.sort(keys, new Comparator<Key>() [ FD ]
Line_4 $$ String parentPrefix-->Line_27 $$ LOG.assertTrue(text.startsWith(parentPrefix) || text.startsWith(mySeparator))[ FD ]
Line_31 $$ Collections.sort(keys, new Comparator<Key>() -->Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) [ CD ]
Line_64 $$ prefixLen = k-->Line_69 $$ String[] strings = firstKey.subList(0, prefixLen).toArray(new String[prefixLen])[ FD ]
Line_4 $$ String parentPrefix-->Line_71 $$ String presentableName = prefix.substring(parentPrefix.length())[ FD ]
Line_60 $$ for (int k = parentPrefixLength; k < prefixLen; k++) -->Line_62 $$ String wordInPrevKey = k < prevKey.size() ? prevKey.get(k) : null[ FD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_40 $$ String s1 = o1.get(i)[ FD ]
Line_3 $$ List<Key> keys = new ArrayList<Key>()-->Line_76 $$ TreeElement node = keys.get(groupStart).node[ FD ]
Line_55 $$ List<String> firstKey = groupStart == keys.size() ? Collections.<String>emptyList() : keys.get(groupStart).words-->Line_56 $$ int prefixLen = firstKey.size()[ FD ]
Line_6 $$ if (parent.getValue() instanceof PropertiesPrefixGroup) -->Line_10 $$ parentPrefix = ""[ CD ]
Line_59 $$ List<String> nextKey = keys.get(j).words-->Line_61 $$ String word = k < nextKey.size() ? nextKey.get(k) : null[ FD ]
Line_2 $$ public Collection<Group> group(@NotNull final AbstractTreeNode parent, @NotNull Collection<TreeElement> children) -->Line_51 $$ for (int i = 0; i <= keys.size(); i++) [ CD ]
Line_3 $$ List<Key> keys = new ArrayList<Key>()-->Line_51 $$ for (int i = 0; i <= keys.size(); i++) [ FD ]
Line_3 $$ List<Key> keys = new ArrayList<Key>()-->Line_55 $$ List<String> firstKey = groupStart == keys.size() ? Collections.<String>emptyList() : keys.get(groupStart).words[ FD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_72 $$ presentableName = StringUtil.trimStart(presentableName, mySeparator)[ CD ]
Line_4 $$ String parentPrefix-->Line_10 $$ parentPrefix = ""[ FD ]
Line_5 $$ int parentPrefixLength-->Line_11 $$ parentPrefixLength = 0[ FD ]
Line_3 $$ List<Key> keys = new ArrayList<Key>()-->Line_75 $$ if (groupStart != keys.size()) [ FD ]
Line_73 $$ if (i - groupStart > 1) -->Line_74 $$ groups.add(new PropertiesPrefixGroup(children, prefix, presentableName, mySeparator))[ CD ]
Line_62 $$ String wordInPrevKey = k < prevKey.size() ? prevKey.get(k) : null-->Line_63 $$ if (!Comparing.strEqual(word, wordInPrevKey)) [ FD ]
Line_56 $$ int prefixLen = firstKey.size()-->Line_69 $$ String[] strings = firstKey.subList(0, prefixLen).toArray(new String[prefixLen])[ FD ]
Line_2 $$ public Collection<Group> group(@NotNull final AbstractTreeNode parent, @NotNull Collection<TreeElement> children) -->Line_31 $$ Collections.sort(keys, new Comparator<Key>() [ CD ]
Line_2 $$ public Collection<Group> group(@NotNull final AbstractTreeNode parent, @NotNull Collection<TreeElement> children) -->Line_4 $$ String parentPrefix[ CD ]
Line_57 $$ for (int j = groupStart + 1; j < i; j++) -->Line_60 $$ for (int k = parentPrefixLength; k < prefixLen; k++) [ CD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_41 $$ String s2 = o2.get(i)[ FD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_36 $$ if (i == o1.size())[ FD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_71 $$ String presentableName = prefix.substring(parentPrefix.length())[ CD ]
Line_60 $$ for (int k = parentPrefixLength; k < prefixLen; k++) -->Line_61 $$ String word = k < nextKey.size() ? nextKey.get(k) : null[ FD ]
Line_10 $$ parentPrefix = ""-->Line_27 $$ LOG.assertTrue(text.startsWith(parentPrefix) || text.startsWith(mySeparator))[ FD ]
Line_18 $$ if (value instanceof PropertiesAnchorizer.PropertyAnchor) -->Line_19 $$ value = ((PropertiesAnchorizer.PropertyAnchor) value).getRepresentative()[ CD ]
Line_34 $$ List<String> o2 = k2.words-->Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) [ FD ]
Line_31 $$ Collections.sort(keys, new Comparator<Key>() -->Line_46 $$ return 0[ CD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_57 $$ for (int j = groupStart + 1; j < i; j++) [ FD ]
Line_17 $$ Object value = ((StructureViewTreeElement) element).getValue()-->Line_19 $$ value = ((PropertiesAnchorizer.PropertyAnchor) value).getRepresentative()[ FD ]
Line_55 $$ List<String> firstKey = groupStart == keys.size() ? Collections.<String>emptyList() : keys.get(groupStart).words-->Line_69 $$ String[] strings = firstKey.subList(0, prefixLen).toArray(new String[prefixLen])[ FD ]
Line_24 $$ final String text = ((IProperty) value).getUnescapedKey()-->Line_27 $$ LOG.assertTrue(text.startsWith(parentPrefix) || text.startsWith(mySeparator))[ FD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_70 $$ String prefix = StringUtil.join(strings, mySeparator)[ CD ]
Line_3 $$ List<Key> keys = new ArrayList<Key>()-->Line_52 $$ if (!isEndOfGroup(i, keys, parentPrefixLength)) [ FD ]
Line_61 $$ String word = k < nextKey.size() ? nextKey.get(k) : null-->Line_63 $$ if (!Comparing.strEqual(word, wordInPrevKey)) [ FD ]
Line_31 $$ Collections.sort(keys, new Comparator<Key>() -->Line_33 $$ List<String> o1 = k1.words[ CD ]
Line_8 $$ parentPrefixLength = StringUtil.split(parentPrefix, mySeparator).size()-->Line_52 $$ if (!isEndOfGroup(i, keys, parentPrefixLength)) [ FD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_36 $$ if (i == o1.size())[ CD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_52 $$ if (!isEndOfGroup(i, keys, parentPrefixLength)) [ CD ]
Line_36 $$ if (i == o1.size())-->Line_37 $$ return 1[ CD ]
Line_2 $$ public Collection<Group> group(@NotNull final AbstractTreeNode parent, @NotNull Collection<TreeElement> children) -->Line_6 $$ if (parent.getValue() instanceof PropertiesPrefixGroup) [ FD ]
Line_41 $$ String s2 = o2.get(i)-->Line_42 $$ int res = s1.compareTo(s2)[ FD ]
Line_7 $$ parentPrefix = ((PropertiesPrefixGroup) parent.getValue()).getPrefix()-->Line_71 $$ String presentableName = prefix.substring(parentPrefix.length())[ FD ]
Line_56 $$ int prefixLen = firstKey.size()-->Line_60 $$ for (int k = parentPrefixLength; k < prefixLen; k++) [ FD ]
Line_24 $$ final String text = ((IProperty) value).getUnescapedKey()-->Line_25 $$ if (text == null)[ FD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_73 $$ if (i - groupStart > 1) [ CD ]
Line_60 $$ for (int k = parentPrefixLength; k < prefixLen; k++) -->Line_61 $$ String word = k < nextKey.size() ? nextKey.get(k) : null[ CD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_69 $$ String[] strings = firstKey.subList(0, prefixLen).toArray(new String[prefixLen])[ CD ]
Line_7 $$ parentPrefix = ((PropertiesPrefixGroup) parent.getValue()).getPrefix()-->Line_27 $$ LOG.assertTrue(text.startsWith(parentPrefix) || text.startsWith(mySeparator))[ FD ]
Line_6 $$ if (parent.getValue() instanceof PropertiesPrefixGroup) -->Line_11 $$ parentPrefixLength = 0[ CD ]
Line_60 $$ for (int k = parentPrefixLength; k < prefixLen; k++) -->Line_63 $$ if (!Comparing.strEqual(word, wordInPrevKey)) [ CD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_41 $$ String s2 = o2.get(i)[ CD ]
Line_8 $$ parentPrefixLength = StringUtil.split(parentPrefix, mySeparator).size()-->Line_11 $$ parentPrefixLength = 0[ FD ]
Line_77 $$ if (node instanceof PropertiesStructureViewElement) -->Line_80 $$ ((ResourceBundlePropertyStructureViewElement) node).setPresentableName(presentableName)[ CD ]
Line_60 $$ for (int k = parentPrefixLength; k < prefixLen; k++) -->Line_62 $$ String wordInPrevKey = k < prevKey.size() ? prevKey.get(k) : null[ CD ]
Line_43 $$ if (res != 0)-->Line_44 $$ return res[ CD ]
Line_24 $$ final String text = ((IProperty) value).getUnescapedKey()-->Line_28 $$ List<String> words = StringUtil.split(text, mySeparator)[ FD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_43 $$ if (res != 0)[ CD ]
Line_57 $$ for (int j = groupStart + 1; j < i; j++) -->Line_59 $$ List<String> nextKey = keys.get(j).words[ CD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_40 $$ String s1 = o1.get(i)[ CD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_38 $$ if (i == o2.size())[ CD ]
Line_3 $$ List<Key> keys = new ArrayList<Key>()-->Line_58 $$ List<String> prevKey = keys.get(j - 1).words[ FD ]
Line_3 $$ List<Key> keys = new ArrayList<Key>()-->Line_29 $$ keys.add(new Key(words, element))[ FD ]
Line_7 $$ parentPrefix = ((PropertiesPrefixGroup) parent.getValue()).getPrefix()-->Line_10 $$ parentPrefix = ""[ FD ]
Line_75 $$ if (groupStart != keys.size()) -->Line_77 $$ if (node instanceof PropertiesStructureViewElement) [ CD ]
Line_57 $$ for (int j = groupStart + 1; j < i; j++) -->Line_58 $$ List<String> prevKey = keys.get(j - 1).words[ CD ]
Line_2 $$ public Collection<Group> group(@NotNull final AbstractTreeNode parent, @NotNull Collection<TreeElement> children) -->Line_6 $$ if (parent.getValue() instanceof PropertiesPrefixGroup) [ CD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_42 $$ int res = s1.compareTo(s2)[ CD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_38 $$ if (i == o2.size())[ FD ]
Line_77 $$ if (node instanceof PropertiesStructureViewElement) -->Line_78 $$ ((PropertiesStructureViewElement) node).setPresentableName(presentableName)[ CD ]
Line_33 $$ List<String> o1 = k1.words-->Line_40 $$ String s1 = o1.get(i)[ FD ]
Line_4 $$ String parentPrefix-->Line_8 $$ parentPrefixLength = StringUtil.split(parentPrefix, mySeparator).size()[ FD ]
Line_17 $$ Object value = ((StructureViewTreeElement) element).getValue()-->Line_18 $$ if (value instanceof PropertiesAnchorizer.PropertyAnchor) [ FD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_52 $$ if (!isEndOfGroup(i, keys, parentPrefixLength)) [ FD ]
Line_56 $$ int prefixLen = firstKey.size()-->Line_64 $$ prefixLen = k[ FD ]
Line_3 $$ List<Key> keys = new ArrayList<Key>()-->Line_59 $$ List<String> nextKey = keys.get(j).words[ FD ]
Line_2 $$ public Collection<Group> group(@NotNull final AbstractTreeNode parent, @NotNull Collection<TreeElement> children) -->Line_7 $$ parentPrefix = ((PropertiesPrefixGroup) parent.getValue()).getPrefix()[ FD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_55 $$ List<String> firstKey = groupStart == keys.size() ? Collections.<String>emptyList() : keys.get(groupStart).words[ CD ]
Line_34 $$ List<String> o2 = k2.words-->Line_38 $$ if (i == o2.size())[ FD ]
Line_4 $$ String parentPrefix-->Line_7 $$ parentPrefix = ((PropertiesPrefixGroup) parent.getValue()).getPrefix()[ FD ]
Line_51 $$ for (int i = 0; i <= keys.size(); i++) -->Line_52 $$ if (!isEndOfGroup(i, keys, parentPrefixLength)) [ FD ]
Line_34 $$ List<String> o2 = k2.words-->Line_41 $$ String s2 = o2.get(i)[ FD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_57 $$ for (int j = groupStart + 1; j < i; j++) [ FD ]
Line_35 $$ for (int i = 0; i < Math.max(o1.size(), o2.size()); i++) -->Line_51 $$ for (int i = 0; i <= keys.size(); i++) [ FD ]
Line_2 $$ public Collection<Group> group(@NotNull final AbstractTreeNode parent, @NotNull Collection<TreeElement> children) -->Line_85 $$ return groups[ CD ]
Line_40 $$ String s1 = o1.get(i)-->Line_42 $$ int res = s1.compareTo(s2)[ FD ]
Line_57 $$ for (int j = groupStart + 1; j < i; j++) -->Line_59 $$ List<String> nextKey = keys.get(j).words[ FD ]
