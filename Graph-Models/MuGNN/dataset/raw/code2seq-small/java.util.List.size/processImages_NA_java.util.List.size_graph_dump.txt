Line_9 $$ List<String> entries = zipReader.getEntries()-->Line_27 $$ for (int i = 0; i < entries.size(); i++) [ FD ]
Line_29 $$ String key = entry-->Line_31 $$ String[] paths = StringUtil.split(key, CharPool.SLASH)[ FD ]
Line_45 $$ percentage = Math.min(50 + (i * 50) / total, 99)-->Line_47 $$ progressTracker.setPercent(percentage)[ FD ]
Line_61 $$ if (_log.isInfoEnabled()) -->Line_62 $$ _log.info("Imported " + count + " images into " + node.getName())[ CD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_14 $$ if (total > 0) [ CD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_39 $$ ObjectValuePair<String, InputStream> inputStreamOVP = new ObjectValuePair(fileName, inputStream)[ CD ]
Line_56 $$ InputStream inputStream = inputStreamOVP.getValue()-->Line_57 $$ StreamUtil.cleanUp(inputStream)[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_8 $$ ZipReader zipReader = ZipReaderFactoryUtil.getZipReader(imagesInputStream)[ FD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_28 $$ String entry = entries.get(i)[ FD ]
Line_42 $$ if ((i % 5) == 0) -->Line_43 $$ _wikiPageLocalService.addPageAttachments(userId, node.getNodeId(), SHARED_IMAGES_TITLE, inputStreamOVPs)[ CD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_16 $$ _wikiPageLocalService.getPage(node.getNodeId(), SHARED_IMAGES_TITLE)[ FD ]
Line_9 $$ List<String> entries = zipReader.getEntries()-->Line_10 $$ if (entries == null) [ FD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_40 $$ inputStreamOVPs.add(inputStreamOVP)[ CD ]
Line_18 $$ ServiceContext serviceContext = new ServiceContext()-->Line_19 $$ serviceContext.setAddGroupPermissions(true)[ FD ]
Line_31 $$ String[] paths = StringUtil.split(key, CharPool.SLASH)-->Line_32 $$ if (!isValidImage(paths, inputStream)) [ FD ]
Line_55 $$ for (ObjectValuePair<String, InputStream> inputStreamOVP : inputStreamOVPs) -->Line_56 $$ InputStream inputStream = inputStreamOVP.getValue()[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_3 $$ if (imagesInputStream == null) [ CD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_30 $$ InputStream inputStream = zipReader.getEntryAsInputStream(entry)[ CD ]
Line_33 $$ if (_log.isInfoEnabled()) -->Line_34 $$ _log.info("Ignoring " + key)[ CD ]
Line_24 $$ List<ObjectValuePair<String, InputStream>> inputStreamOVPs = new ArrayList()-->Line_43 $$ _wikiPageLocalService.addPageAttachments(userId, node.getNodeId(), SHARED_IMAGES_TITLE, inputStreamOVPs)[ FD ]
Line_8 $$ ZipReader zipReader = ZipReaderFactoryUtil.getZipReader(imagesInputStream)-->Line_30 $$ InputStream inputStream = zipReader.getEntryAsInputStream(entry)[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_62 $$ _log.info("Imported " + count + " images into " + node.getName())[ FD ]
Line_24 $$ List<ObjectValuePair<String, InputStream>> inputStreamOVPs = new ArrayList()-->Line_44 $$ inputStreamOVPs.clear()[ FD ]
Line_46 $$ if (progressTracker != null) -->Line_47 $$ progressTracker.setPercent(percentage)[ CD ]
Line_32 $$ if (!isValidImage(paths, inputStream)) -->Line_33 $$ if (_log.isInfoEnabled()) [ CD ]
Line_26 $$ int percentage = 50-->Line_45 $$ percentage = Math.min(50 + (i * 50) / total, 99)[ FD ]
Line_39 $$ ObjectValuePair<String, InputStream> inputStreamOVP = new ObjectValuePair(fileName, inputStream)-->Line_56 $$ InputStream inputStream = inputStreamOVP.getValue()[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_43 $$ _wikiPageLocalService.addPageAttachments(userId, node.getNodeId(), SHARED_IMAGES_TITLE, inputStreamOVPs)[ FD ]
Line_42 $$ if ((i % 5) == 0) -->Line_44 $$ inputStreamOVPs.clear()[ CD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_61 $$ if (_log.isInfoEnabled()) [ CD ]
Line_7 $$ int count = 0-->Line_41 $$ count++[ FD ]
Line_26 $$ int percentage = 50-->Line_47 $$ progressTracker.setPercent(percentage)[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_6 $$ ProgressTracker progressTracker = ProgressTrackerThreadLocal.getProgressTracker()[ CD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_7 $$ int count = 0[ CD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_29 $$ String key = entry[ CD ]
Line_6 $$ ProgressTracker progressTracker = ProgressTrackerThreadLocal.getProgressTracker()-->Line_46 $$ if (progressTracker != null) [ FD ]
Line_9 $$ List<String> entries = zipReader.getEntries()-->Line_13 $$ int total = entries.size()[ FD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_31 $$ String[] paths = StringUtil.split(key, CharPool.SLASH)[ CD ]
Line_30 $$ InputStream inputStream = zipReader.getEntryAsInputStream(entry)-->Line_32 $$ if (!isValidImage(paths, inputStream)) [ FD ]
Line_18 $$ ServiceContext serviceContext = new ServiceContext()-->Line_21 $$ _wikiPageLocalService.addPage(userId, node.getNodeId(), SHARED_IMAGES_TITLE, SHARED_IMAGES_CONTENT, null, true, serviceContext)[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_52 $$ _wikiPageLocalService.addPageAttachments(userId, node.getNodeId(), SHARED_IMAGES_TITLE, inputStreamOVPs)[ FD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_41 $$ count++[ CD ]
Line_8 $$ ZipReader zipReader = ZipReaderFactoryUtil.getZipReader(imagesInputStream)-->Line_60 $$ zipReader.close()[ FD ]
Line_3 $$ if (imagesInputStream == null) -->Line_4 $$ return[ CD ]
Line_39 $$ ObjectValuePair<String, InputStream> inputStreamOVP = new ObjectValuePair(fileName, inputStream)-->Line_40 $$ inputStreamOVPs.add(inputStreamOVP)[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_3 $$ if (imagesInputStream == null) [ FD ]
Line_6 $$ ProgressTracker progressTracker = ProgressTrackerThreadLocal.getProgressTracker()-->Line_47 $$ progressTracker.setPercent(percentage)[ FD ]
Line_30 $$ InputStream inputStream = zipReader.getEntryAsInputStream(entry)-->Line_57 $$ StreamUtil.cleanUp(inputStream)[ FD ]
Line_18 $$ ServiceContext serviceContext = new ServiceContext()-->Line_20 $$ serviceContext.setAddGuestPermissions(true)[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_9 $$ List<String> entries = zipReader.getEntries()[ CD ]
Line_9 $$ List<String> entries = zipReader.getEntries()-->Line_28 $$ String entry = entries.get(i)[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_10 $$ if (entries == null) [ CD ]
Line_42 $$ if ((i % 5) == 0) -->Line_46 $$ if (progressTracker != null) [ CD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_21 $$ _wikiPageLocalService.addPage(userId, node.getNodeId(), SHARED_IMAGES_TITLE, SHARED_IMAGES_CONTENT, null, true, serviceContext)[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_8 $$ ZipReader zipReader = ZipReaderFactoryUtil.getZipReader(imagesInputStream)[ CD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_32 $$ if (!isValidImage(paths, inputStream)) [ CD ]
Line_24 $$ List<ObjectValuePair<String, InputStream>> inputStreamOVPs = new ArrayList()-->Line_51 $$ if (!inputStreamOVPs.isEmpty()) [ FD ]
Line_8 $$ ZipReader zipReader = ZipReaderFactoryUtil.getZipReader(imagesInputStream)-->Line_9 $$ List<String> entries = zipReader.getEntries()[ FD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_28 $$ String entry = entries.get(i)[ CD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_38 $$ String fileName = StringUtil.toLowerCase(paths[paths.length - 1])[ CD ]
Line_13 $$ int total = entries.size()-->Line_14 $$ if (total > 0) [ FD ]
Line_51 $$ if (!inputStreamOVPs.isEmpty()) -->Line_52 $$ _wikiPageLocalService.addPageAttachments(userId, node.getNodeId(), SHARED_IMAGES_TITLE, inputStreamOVPs)[ CD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_24 $$ List<ObjectValuePair<String, InputStream>> inputStreamOVPs = new ArrayList()[ CD ]
Line_27 $$ for (int i = 0; i < entries.size(); i++) -->Line_42 $$ if ((i % 5) == 0) [ CD ]
Line_24 $$ List<ObjectValuePair<String, InputStream>> inputStreamOVPs = new ArrayList()-->Line_52 $$ _wikiPageLocalService.addPageAttachments(userId, node.getNodeId(), SHARED_IMAGES_TITLE, inputStreamOVPs)[ FD ]
Line_42 $$ if ((i % 5) == 0) -->Line_45 $$ percentage = Math.min(50 + (i * 50) / total, 99)[ CD ]
Line_28 $$ String entry = entries.get(i)-->Line_30 $$ InputStream inputStream = zipReader.getEntryAsInputStream(entry)[ FD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_60 $$ zipReader.close()[ CD ]
Line_2 $$ protected void processImages(long userId, WikiNode node, InputStream imagesInputStream) throws Exception -->Line_13 $$ int total = entries.size()[ CD ]
Line_24 $$ List<ObjectValuePair<String, InputStream>> inputStreamOVPs = new ArrayList()-->Line_40 $$ inputStreamOVPs.add(inputStreamOVP)[ FD ]
