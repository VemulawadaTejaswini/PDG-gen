Line_14 $$ final List<String> paramsToRerun = params.get(aClass.findMethodsByName("testOne", false)[0])-->Line_16 $$ assertContainsElements(paramsToRerun, "a")[ FD ]
Line_14 $$ final List<String> paramsToRerun = params.get(aClass.findMethodsByName("testOne", false)[0])-->Line_15 $$ assertEquals(1, paramsToRerun.size())[ FD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_6 $$ classes.put(aClass, new HashMap<PsiMethod, List<String>>())[ CD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_3 $$ final PsiClass aClass = myFixture.addClass(//parameterized[ CD ]
Line_5 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()-->Line_12 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)[ FD ]
Line_5 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()-->Line_10 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy)[ FD ]
Line_3 $$ final PsiClass aClass = myFixture.addClass(//parameterized-->Line_12 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)[ FD ]
Line_5 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()-->Line_6 $$ classes.put(aClass, new HashMap<PsiMethod, List<String>>())[ FD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_13 $$ assertContainsElements(params.keySet(), aClass.getMethods())[ CD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_11 $$ assertEquals(1, classes.size())[ CD ]
Line_5 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()-->Line_11 $$ assertEquals(1, classes.size())[ FD ]
Line_8 $$ final SMTestProxy testProxy = new SMTestProxy("testOne", false, "java:test://a.ATest.testOne[a]")-->Line_9 $$ testProxy.setLocator(new JavaTestLocator())[ FD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_12 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)[ CD ]
Line_12 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)-->Line_14 $$ final List<String> paramsToRerun = params.get(aClass.findMethodsByName("testOne", false)[0])[ FD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_9 $$ testProxy.setLocator(new JavaTestLocator())[ CD ]
Line_8 $$ final SMTestProxy testProxy = new SMTestProxy("testOne", false, "java:test://a.ATest.testOne[a]")-->Line_10 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy)[ FD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_14 $$ final List<String> paramsToRerun = params.get(aClass.findMethodsByName("testOne", false)[0])[ CD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_15 $$ assertEquals(1, paramsToRerun.size())[ CD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_10 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy)[ CD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_5 $$ final LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>> classes = new LinkedHashMap<PsiClass, Map<PsiMethod, List<String>>>()[ CD ]
Line_3 $$ final PsiClass aClass = myFixture.addClass(//parameterized-->Line_6 $$ classes.put(aClass, new HashMap<PsiMethod, List<String>>())[ FD ]
Line_3 $$ final PsiClass aClass = myFixture.addClass(//parameterized-->Line_14 $$ final List<String> paramsToRerun = params.get(aClass.findMethodsByName("testOne", false)[0])[ FD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_16 $$ assertContainsElements(paramsToRerun, "a")[ CD ]
Line_12 $$ final Map<PsiMethod, List<String>> params = classes.get(aClass)-->Line_13 $$ assertContainsElements(params.keySet(), aClass.getMethods())[ FD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_7 $$ final GlobalSearchScope projectScope = GlobalSearchScope.projectScope(getProject())[ CD ]
Line_7 $$ final GlobalSearchScope projectScope = GlobalSearchScope.projectScope(getProject())-->Line_10 $$ RerunFailedTestsAction.includeFailedTestWithDependencies(classes, projectScope, getProject(), testProxy)[ FD ]
Line_3 $$ final PsiClass aClass = myFixture.addClass(//parameterized-->Line_13 $$ assertContainsElements(params.keySet(), aClass.getMethods())[ FD ]
Line_2 $$ public void testRerunFailedTestWithDependency() throws Exception -->Line_8 $$ final SMTestProxy testProxy = new SMTestProxy("testOne", false, "java:test://a.ATest.testOne[a]")[ CD ]
