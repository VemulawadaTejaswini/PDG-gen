Line_17 $$ List yogiList = (List) resultList.get(0)-->Line_18 $$ assertEquals(yogiExpected.getStudentNumber(), yogiList.get(0))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").setProjection(Projections.projectionList().add(Property.forName("s.studentNumber").as("studentNumber")).add(Property.forName("s.name").as("name"))).addOrder(Order.asc("s.studentNumber")).setResultTransformer(Transformers.TO_LIST)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(shermanExpected.getName(), shermanList.get(1))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ List shermanList = (List) resultList.get(1)[ CD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ List yogiList = (List) resultList.get(0)[ FD ]
Line_20 $$ List shermanList = (List) resultList.get(1)-->Line_22 $$ assertEquals(shermanExpected.getName(), shermanList.get(1))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_15 $$ List resultList = (List) results-->Line_20 $$ List shermanList = (List) resultList.get(1)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ List yogiList = (List) resultList.get(0)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_20 $$ List shermanList = (List) resultList.get(1)-->Line_21 $$ assertEquals(shermanExpected.getStudentNumber(), shermanList.get(0))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select new list(s.studentNumber, s.name) from Student s order by s.studentNumber")[ FD ]
Line_2 $$ public void testMultiSelectNewListList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").setProjection(Projections.projectionList().add(Property.forName("s.studentNumber").as("studentNumber")).add(Property.forName("s.name").as("name"))).addOrder(Order.asc("s.studentNumber")).setResultTransformer(Transformers.TO_LIST)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(shermanExpected.getStudentNumber(), shermanList.get(0))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ assertEquals(yogiExpected.getStudentNumber(), yogiList.get(0))[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select new list(s.studentNumber, s.name) from Student s order by s.studentNumber")[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertEquals(yogiExpected.getName(), yogiList.get(1))[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select new list(s.studentNumber, s.name) from Student s order by s.studentNumber")[ CD ]
Line_17 $$ List yogiList = (List) resultList.get(0)-->Line_19 $$ assertEquals(yogiExpected.getName(), yogiList.get(1))[ FD ]
Line_2 $$ public void testMultiSelectNewListList() throws Exception -->Line_25 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_25 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
