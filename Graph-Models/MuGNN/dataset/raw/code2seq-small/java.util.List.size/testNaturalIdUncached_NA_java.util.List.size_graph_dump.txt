Line_12 $$ Statistics stats = sessionFactory().getStatistics()-->Line_25 $$ assertEquals("Query execution count should be one", 1, stats.getNaturalIdQueryExecutionCount())[ FD ]
Line_5 $$ Session s = openSession()-->Line_6 $$ Transaction tx = s.beginTransaction()[ FD ]
Line_5 $$ Session s = openSession()-->Line_8 $$ Criteria criteria = s.createCriteria(Citizen.class)[ FD ]
Line_12 $$ Statistics stats = sessionFactory().getStatistics()-->Line_14 $$ stats.clear()[ FD ]
Line_12 $$ Statistics stats = sessionFactory().getStatistics()-->Line_20 $$ assertEquals("Query execution count should be one", 1, stats.getNaturalIdQueryExecutionCount())[ FD ]
Line_7 $$ State france = this.getState(s, "Ile de France")-->Line_9 $$ criteria.add(Restrictions.naturalId().set("ssn", "1234").set("state", france))[ FD ]
Line_5 $$ Session s = openSession()-->Line_7 $$ State france = this.getState(s, "Ile de France")[ FD ]
Line_8 $$ Criteria criteria = s.createCriteria(Citizen.class)-->Line_10 $$ criteria.setCacheable(false)[ FD ]
Line_5 $$ Session s = openSession()-->Line_28 $$ s.close()[ FD ]
Line_12 $$ Statistics stats = sessionFactory().getStatistics()-->Line_23 $$ assertEquals("Cache hits should be empty", 0, stats.getNaturalIdCacheHitCount())[ FD ]
Line_12 $$ Statistics stats = sessionFactory().getStatistics()-->Line_24 $$ assertEquals("Second query should not be a miss", 1, stats.getNaturalIdCacheMissCount())[ FD ]
Line_12 $$ Statistics stats = sessionFactory().getStatistics()-->Line_19 $$ assertEquals("Cache hits should be empty", 0, stats.getNaturalIdCacheHitCount())[ FD ]
Line_12 $$ Statistics stats = sessionFactory().getStatistics()-->Line_15 $$ assertEquals("Cache hits should be empty", 0, stats.getNaturalIdCacheHitCount())[ FD ]
Line_12 $$ Statistics stats = sessionFactory().getStatistics()-->Line_13 $$ stats.setStatisticsEnabled(true)[ FD ]
Line_8 $$ Criteria criteria = s.createCriteria(Citizen.class)-->Line_9 $$ criteria.add(Restrictions.naturalId().set("ssn", "1234").set("state", france))[ FD ]
