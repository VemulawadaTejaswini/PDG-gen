Line_2 $$ public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op) -->Line_3 $$ final int strictnessOfLessThan = strictnessOfLessThan(op)[ CD ]
Line_7 $$ int m = (lb + ub) / 2-->Line_8 $$ int c = compareAsymmetric(searchIn.get(m), searchFor)[ FD ]
Line_5 $$ int ub = searchIn.size()-->Line_14 $$ return selectBoundary(op, lb, ub)[ FD ]
Line_5 $$ int ub = searchIn.size()-->Line_6 $$ while (lb + 1 < ub) [ FD ]
Line_3 $$ final int strictnessOfLessThan = strictnessOfLessThan(op)-->Line_9 $$ if (c < strictnessOfLessThan)[ FD ]
Line_2 $$ public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op) -->Line_5 $$ int ub = searchIn.size()[ FD ]
Line_6 $$ while (lb + 1 < ub) -->Line_9 $$ if (c < strictnessOfLessThan)[ CD ]
Line_12 $$ ub = m-->Line_6 $$ while (lb + 1 < ub) [ FD ]
Line_12 $$ ub = m-->Line_14 $$ return selectBoundary(op, lb, ub)[ FD ]
Line_5 $$ int ub = searchIn.size()-->Line_12 $$ ub = m[ FD ]
Line_6 $$ while (lb + 1 < ub) -->Line_8 $$ int c = compareAsymmetric(searchIn.get(m), searchFor)[ CD ]
Line_8 $$ int c = compareAsymmetric(searchIn.get(m), searchFor)-->Line_9 $$ if (c < strictnessOfLessThan)[ FD ]
Line_2 $$ public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op) -->Line_8 $$ int c = compareAsymmetric(searchIn.get(m), searchFor)[ FD ]
Line_9 $$ if (c < strictnessOfLessThan)-->Line_12 $$ ub = m[ CD ]
Line_2 $$ public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op) -->Line_6 $$ while (lb + 1 < ub) [ CD ]
Line_2 $$ public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op) -->Line_14 $$ return selectBoundary(op, lb, ub)[ FD ]
Line_4 $$ int lb = -1-->Line_10 $$ lb = m[ FD ]
Line_2 $$ public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op) -->Line_3 $$ final int strictnessOfLessThan = strictnessOfLessThan(op)[ FD ]
Line_2 $$ public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op) -->Line_5 $$ int ub = searchIn.size()[ CD ]
Line_7 $$ int m = (lb + ub) / 2-->Line_12 $$ ub = m[ FD ]
Line_2 $$ public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op) -->Line_14 $$ return selectBoundary(op, lb, ub)[ CD ]
Line_7 $$ int m = (lb + ub) / 2-->Line_10 $$ lb = m[ FD ]
Line_2 $$ public int binarySearchAsymmetric(List<? extends T1> searchIn, T2 searchFor, Op op) -->Line_4 $$ int lb = -1[ CD ]
Line_6 $$ while (lb + 1 < ub) -->Line_7 $$ int m = (lb + ub) / 2[ CD ]
Line_9 $$ if (c < strictnessOfLessThan)-->Line_10 $$ lb = m[ CD ]
Line_4 $$ int lb = -1-->Line_14 $$ return selectBoundary(op, lb, ub)[ FD ]
Line_10 $$ lb = m-->Line_14 $$ return selectBoundary(op, lb, ub)[ FD ]
