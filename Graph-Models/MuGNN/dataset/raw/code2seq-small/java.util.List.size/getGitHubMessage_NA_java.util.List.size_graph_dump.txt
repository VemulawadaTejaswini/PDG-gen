Line_47 $$ File file = new File(reportFileName)-->Line_97 $$ String content = JenkinsResultsParserUtil.read(file)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append(rebaseBranchGitCommit)[ FD ]
Line_101 $$ if (isHighPriorityJobFailure(content)) -->Line_102 $$ highPriorityJobFailureContents.add(content)[ CD ]
Line_49 $$ Matcher matcher = _pattern.matcher(content)-->Line_57 $$ sb.append(matcher.group(1))[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_80 $$ if (topLevelPassCount != 1) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ sb.append(project.getProperty("branch.name"))[ FD ]
Line_10 $$ String rebaseBranchGitCommit = project.getProperty("rebase.branch.git.commit")-->Line_24 $$ sb.append(rebaseBranchGitCommit)[ FD ]
Line_32 $$ String topLevelResult = project.getProperty("top.level.result")-->Line_66 $$ if (!topLevelResult.equals("SUCCESS")) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_42 $$ sb.append("</strong></strike>")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_45 $$ String reportFileNames = project.getProperty("top.level.report.files")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_71 $$ sb.append(project.getProperty("env.BUILD_URL"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.append(rebaseBranchGitCommit)[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_63 $$ sb.append("<h5>For more details click <a href=\\\"")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_118 $$ sb.append("</ol>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_64 $$ sb.append(project.getProperty("top.level.shared.dir.url"))[ FD ]
Line_49 $$ Matcher matcher = _pattern.matcher(content)-->Line_50 $$ if (matcher.find()) [ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_72 $$ sb.append("\\\">")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_38 $$ sb.append("\\\">")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_74 $$ sb.append("</a></h5>")[ FD ]
Line_109 $$ for (int i = 0; i < jobFailureContents.size(); i++) -->Line_110 $$ if (i == 4) [ CD ]
Line_51 $$ if (content.contains("job-result=\\\"SUCCESS\\\"")) -->Line_52 $$ sb.append("<li>")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_66 $$ if (!topLevelResult.equals("SUCCESS")) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append("/commit/")[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_77 $$ sb.append("<p>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_85 $$ sb.append(topLevelFailCount)[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_29 $$ sb.append("<h4>Job Summary:</h4>")[ CD ]
Line_47 $$ File file = new File(reportFileName)-->Line_48 $$ String content = JenkinsResultsParserUtil.read(file)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_57 $$ sb.append(matcher.group(1))[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_93 $$ List<String> highPriorityJobFailureContents = new ArrayList()[ CD ]
Line_32 $$ String topLevelResult = project.getProperty("top.level.result")-->Line_41 $$ if (!topLevelResult.equals("SUCCESS")) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_120 $$ project.setProperty("github.post.comment.body", sb.toString())[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append("<strike><strong>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append(project.getProperty("branch.name"))[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_30 $$ sb.append("<ul>")[ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_19 $$ sb.append(project.getProperty("branch.name"))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_54 $$ sb.append("</li>")[ FD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_14 $$ sb.append("<a href=\\\"https://github.com/liferay/")[ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_13 $$ sb.append("<p>Branch Name: ")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_41 $$ if (!topLevelResult.equals("SUCCESS")) [ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_26 $$ sb.append(rebaseBranchGitCommit)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append("\\\">")[ FD ]
Line_51 $$ if (content.contains("job-result=\\\"SUCCESS\\\"")) -->Line_53 $$ sb.append(matcher.group(1))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_92 $$ sb.append(".</pre></li>")[ FD ]
Line_48 $$ String content = JenkinsResultsParserUtil.read(file)-->Line_104 $$ normalPriorityJobFailureContents.add(content)[ FD ]
Line_80 $$ if (topLevelPassCount != 1) -->Line_81 $$ sb.append("s")[ CD ]
Line_48 $$ String content = JenkinsResultsParserUtil.read(file)-->Line_98 $$ if (content.contains("job-result=\\\"SUCCESS\\\"")) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_69 $$ sb.append("<ol>")[ FD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_25 $$ sb.append("\\\">")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_84 $$ int topLevelFailCount = Integer.parseInt(project.getProperty("top.level.fail.count")) + 1[ FD ]
Line_110 $$ if (i == 4) -->Line_111 $$ sb.append("<li>...</li>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_114 $$ sb.append("<li>")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_73 $$ sb.append(project.getProperty("top.level.build.name"))[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_62 $$ sb.append("</ul>")[ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_17 $$ sb.append(project.getProperty("branch.name"))[ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_27 $$ sb.append("</a></p>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_67 $$ sb.append("<hr />")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append("<p>Build Time: ")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_75 $$ sb.append("<h6>Job Results:</h6>")[ FD ]
Line_107 $$ List<String> jobFailureContents = new ArrayList(highPriorityJobFailureContents)-->Line_109 $$ for (int i = 0; i < jobFailureContents.size(); i++) [ FD ]
Line_45 $$ String reportFileNames = project.getProperty("top.level.report.files")-->Line_95 $$ for (String reportFileName : reportFileNames.split(" ")) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append("<a href=\\\"")[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_94 $$ List<String> normalPriorityJobFailureContents = new ArrayList()[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_37 $$ sb.append(project.getProperty("env.BUILD_URL"))[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_39 $$ sb.append(project.getProperty("top.level.build.name"))[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_68 $$ sb.append("<h4>Failed Jobs:</h4>")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_79 $$ sb.append(" Job")[ FD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_24 $$ sb.append(rebaseBranchGitCommit)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_77 $$ sb.append("<p>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_72 $$ sb.append("\\\">")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_4 $$ sb.append("<h1>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_71 $$ sb.append(project.getProperty("env.BUILD_URL"))[ FD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_18 $$ sb.append("\\\">")[ CD ]
Line_107 $$ List<String> jobFailureContents = new ArrayList(highPriorityJobFailureContents)-->Line_108 $$ jobFailureContents.addAll(normalPriorityJobFailureContents)[ FD ]
Line_51 $$ if (content.contains("job-result=\\\"SUCCESS\\\"")) -->Line_54 $$ sb.append("</li>")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_64 $$ sb.append(project.getProperty("top.level.shared.dir.url"))[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_17 $$ sb.append(project.getProperty("branch.name"))[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_15 $$ sb.append(project.getProperty("repository"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append("<h4>Job Summary:</h4>")[ FD ]
Line_109 $$ for (int i = 0; i < jobFailureContents.size(); i++) -->Line_110 $$ if (i == 4) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_37 $$ sb.append(project.getProperty("env.BUILD_URL"))[ FD ]
Line_87 $$ if (topLevelFailCount != 1) -->Line_88 $$ sb.append("s")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ sb.append("<ul>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_62 $$ sb.append("</ul>")[ FD ]
Line_93 $$ List<String> highPriorityJobFailureContents = new ArrayList()-->Line_102 $$ highPriorityJobFailureContents.add(content)[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_75 $$ sb.append("<h6>Job Results:</h6>")[ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_20 $$ sb.append("</a><br />")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_83 $$ sb.append(" Passed.<br />")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_7 $$ sb.append("<p>Build Time: ")[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_79 $$ sb.append(" Job")[ CD ]
Line_109 $$ for (int i = 0; i < jobFailureContents.size(); i++) -->Line_114 $$ sb.append("<li>")[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_74 $$ sb.append("</a></h5>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append("/tree/")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_88 $$ sb.append("s")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append("<a href=\\\"https://github.com/liferay/")[ FD ]
Line_50 $$ if (matcher.find()) -->Line_51 $$ if (content.contains("job-result=\\\"SUCCESS\\\"")) [ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_69 $$ sb.append("<ol>")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_76 $$ int topLevelPassCount = Integer.parseInt(project.getProperty("top.level.pass.count"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append(project.getProperty("repository"))[ FD ]
Line_84 $$ int topLevelFailCount = Integer.parseInt(project.getProperty("top.level.fail.count")) + 1-->Line_87 $$ if (topLevelFailCount != 1) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_52 $$ sb.append("<li>")[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_78 $$ sb.append(topLevelPassCount)[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_11 $$ if (!rebaseBranchGitCommit.equals("")) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_39 $$ sb.append(project.getProperty("top.level.build.name"))[ FD ]
Line_51 $$ if (content.contains("job-result=\\\"SUCCESS\\\"")) -->Line_58 $$ sb.append("</strong></strike></li>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_111 $$ sb.append("<li>...</li>")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_9 $$ sb.append("</p>")[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_92 $$ sb.append(".</pre></li>")[ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_22 $$ sb.append(project.getProperty("repository"))[ CD ]
Line_32 $$ String topLevelResult = project.getProperty("top.level.result")-->Line_91 $$ sb.append(topLevelResult)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append("<p>Branch Name: ")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append("<h4>Base Branch:</h4>")[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_85 $$ sb.append(topLevelFailCount)[ CD ]
Line_109 $$ for (int i = 0; i < jobFailureContents.size(); i++) -->Line_115 $$ sb.append(jobFailureContents.get(i))[ FD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_12 $$ sb.append("<h4>Base Branch:</h4>")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_22 $$ sb.append(project.getProperty("repository"))[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_44 $$ sb.append("</li>")[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_109 $$ for (int i = 0; i < jobFailureContents.size(); i++) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_5 $$ sb.append(project.getProperty("top.level.result.message"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_58 $$ sb.append("</strong></strike></li>")[ FD ]
Line_10 $$ String rebaseBranchGitCommit = project.getProperty("rebase.branch.git.commit")-->Line_26 $$ sb.append(rebaseBranchGitCommit)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_6 $$ sb.append("</h1>")[ FD ]
Line_109 $$ for (int i = 0; i < jobFailureContents.size(); i++) -->Line_115 $$ sb.append(jobFailureContents.get(i))[ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_23 $$ sb.append("/commit/")[ CD ]
Line_51 $$ if (content.contains("job-result=\\\"SUCCESS\\\"")) -->Line_57 $$ sb.append(matcher.group(1))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_40 $$ sb.append("</a>")[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_84 $$ int topLevelFailCount = Integer.parseInt(project.getProperty("top.level.fail.count")) + 1[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_70 $$ sb.append("<li><h5><a href=\\\"")[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_76 $$ int topLevelPassCount = Integer.parseInt(project.getProperty("top.level.pass.count"))[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_39 $$ sb.append(project.getProperty("top.level.build.name"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append("\\\">")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append("<li>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_44 $$ sb.append("</li>")[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_118 $$ sb.append("</ol>")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_120 $$ project.setProperty("github.post.comment.body", sb.toString())[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_115 $$ sb.append(jobFailureContents.get(i))[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_31 $$ sb.append("<li>")[ CD ]
Line_76 $$ int topLevelPassCount = Integer.parseInt(project.getProperty("top.level.pass.count"))-->Line_80 $$ if (topLevelPassCount != 1) [ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_36 $$ sb.append("<a href=\\\"")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_56 $$ sb.append("<li><strike><strong>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_73 $$ sb.append(project.getProperty("top.level.build.name"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_8 $$ sb.append(project.getProperty("top.level.build.time"))[ FD ]
Line_94 $$ List<String> normalPriorityJobFailureContents = new ArrayList()-->Line_108 $$ jobFailureContents.addAll(normalPriorityJobFailureContents)[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_38 $$ sb.append("\\\">")[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_87 $$ if (topLevelFailCount != 1) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_53 $$ sb.append(matcher.group(1))[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_71 $$ sb.append(project.getProperty("env.BUILD_URL"))[ CD ]
Line_107 $$ List<String> jobFailureContents = new ArrayList(highPriorityJobFailureContents)-->Line_115 $$ sb.append(jobFailureContents.get(i))[ FD ]
Line_49 $$ Matcher matcher = _pattern.matcher(content)-->Line_53 $$ sb.append(matcher.group(1))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append("</p>")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_8 $$ sb.append(project.getProperty("top.level.build.time"))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_63 $$ sb.append("<h5>For more details click <a href=\\\"")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_6 $$ sb.append("</h1>")[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_86 $$ sb.append(" Job")[ CD ]
Line_10 $$ String rebaseBranchGitCommit = project.getProperty("rebase.branch.git.commit")-->Line_11 $$ if (!rebaseBranchGitCommit.equals("")) [ FD ]
Line_84 $$ int topLevelFailCount = Integer.parseInt(project.getProperty("top.level.fail.count")) + 1-->Line_85 $$ sb.append(topLevelFailCount)[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_8 $$ sb.append(project.getProperty("top.level.build.time"))[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_90 $$ sb.append(" Failed.</p><pre>Completed with the status of ")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_32 $$ String topLevelResult = project.getProperty("top.level.result")[ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_15 $$ sb.append(project.getProperty("repository"))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append("</a><br />")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_33 $$ if (!topLevelResult.equals("SUCCESS")) [ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_70 $$ sb.append("<li><h5><a href=\\\"")[ CD ]
Line_41 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_42 $$ sb.append("</strong></strike>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_116 $$ sb.append("</li>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ sb.append("</a></p>")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_81 $$ sb.append("s")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_45 $$ String reportFileNames = project.getProperty("top.level.report.files")[ CD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_16 $$ sb.append("/tree/")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_10 $$ String rebaseBranchGitCommit = project.getProperty("rebase.branch.git.commit")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_19 $$ sb.append(project.getProperty("branch.name"))[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_5 $$ sb.append(project.getProperty("top.level.result.message"))[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_67 $$ sb.append("<hr />")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_65 $$ sb.append("/jenkins-report.html\\\">here</a>.</h5>")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_37 $$ sb.append(project.getProperty("env.BUILD_URL"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_86 $$ sb.append(" Job")[ FD ]
Line_33 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_34 $$ sb.append("<strike><strong>")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_78 $$ sb.append(topLevelPassCount)[ FD ]
Line_45 $$ String reportFileNames = project.getProperty("top.level.report.files")-->Line_46 $$ for (String reportFileName : reportFileNames.split(" ")) [ FD ]
Line_101 $$ if (isHighPriorityJobFailure(content)) -->Line_104 $$ normalPriorityJobFailureContents.add(content)[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_120 $$ project.setProperty("github.post.comment.body", sb.toString())[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append(project.getProperty("repository"))[ FD ]
Line_48 $$ String content = JenkinsResultsParserUtil.read(file)-->Line_51 $$ if (content.contains("job-result=\\\"SUCCESS\\\"")) [ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_5 $$ sb.append(project.getProperty("top.level.result.message"))[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_4 $$ sb.append("<h1>")[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_83 $$ sb.append(" Passed.<br />")[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_107 $$ List<String> jobFailureContents = new ArrayList(highPriorityJobFailureContents)[ CD ]
Line_51 $$ if (content.contains("job-result=\\\"SUCCESS\\\"")) -->Line_56 $$ sb.append("<li><strike><strong>")[ CD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_32 $$ String topLevelResult = project.getProperty("top.level.result")[ FD ]
Line_48 $$ String content = JenkinsResultsParserUtil.read(file)-->Line_49 $$ Matcher matcher = _pattern.matcher(content)[ FD ]
Line_48 $$ String content = JenkinsResultsParserUtil.read(file)-->Line_101 $$ if (isHighPriorityJobFailure(content)) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_91 $$ sb.append(topLevelResult)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_90 $$ sb.append(" Failed.</p><pre>Completed with the status of ")[ FD ]
Line_11 $$ if (!rebaseBranchGitCommit.equals("")) -->Line_21 $$ sb.append("Branch GIT ID: <a href=\\\"https://github.com/liferay/")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_68 $$ sb.append("<h4>Failed Jobs:</h4>")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_40 $$ sb.append("</a>")[ CD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_91 $$ sb.append(topLevelResult)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_21 $$ sb.append("Branch GIT ID: <a href=\\\"https://github.com/liferay/")[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_10 $$ String rebaseBranchGitCommit = project.getProperty("rebase.branch.git.commit")[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_73 $$ sb.append(project.getProperty("top.level.build.name"))[ CD ]
Line_109 $$ for (int i = 0; i < jobFailureContents.size(); i++) -->Line_116 $$ sb.append("</li>")[ CD ]
Line_48 $$ String content = JenkinsResultsParserUtil.read(file)-->Line_102 $$ highPriorityJobFailureContents.add(content)[ FD ]
Line_66 $$ if (!topLevelResult.equals("SUCCESS")) -->Line_108 $$ jobFailureContents.addAll(normalPriorityJobFailureContents)[ CD ]
Line_76 $$ int topLevelPassCount = Integer.parseInt(project.getProperty("top.level.pass.count"))-->Line_78 $$ sb.append(topLevelPassCount)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_65 $$ sb.append("/jenkins-report.html\\\">here</a>.</h5>")[ FD ]
Line_32 $$ String topLevelResult = project.getProperty("top.level.result")-->Line_33 $$ if (!topLevelResult.equals("SUCCESS")) [ FD ]
Line_94 $$ List<String> normalPriorityJobFailureContents = new ArrayList()-->Line_104 $$ normalPriorityJobFailureContents.add(content)[ FD ]
Line_2 $$ public static void getGitHubMessage(Project project) throws Exception -->Line_64 $$ sb.append(project.getProperty("top.level.shared.dir.url"))[ FD ]
