Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_19 $$ double minValue = Double.POSITIVE_INFINITY[ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).subAggregation(minBucket("min_bucket").setBucketsPaths("histo>sum"))).execute().actionGet()-->Line_5 $$ Terms terms = response.getAggregations().get("terms")[ FD ]
Line_2 $$ public void testMetricAsSubAgg() throws Exception -->Line_7 $$ assertThat(terms.getName(), equalTo("terms"))[ CD ]
Line_18 $$ List<String> minKeys = new ArrayList()-->Line_32 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_40 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ CD ]
Line_18 $$ List<String> minKeys = new ArrayList()-->Line_40 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ FD ]
Line_21 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_23 $$ assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) j * interval))[ FD ]
Line_19 $$ double minValue = Double.POSITIVE_INFINITY-->Line_31 $$ if (sum.value() == minValue) [ FD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_12 $$ assertThat(termsBucket, notNullValue())[ CD ]
Line_20 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_24 $$ if (bucket.getDocCount() != 0) [ CD ]
Line_5 $$ Terms terms = response.getAggregations().get("terms")-->Line_6 $$ assertThat(terms, notNullValue())[ FD ]
Line_21 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_25 $$ Sum sum = bucket.getAggregations().get("sum")[ FD ]
Line_21 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_24 $$ if (bucket.getDocCount() != 0) [ FD ]
Line_14 $$ Histogram histo = termsBucket.getAggregations().get("histo")-->Line_15 $$ assertThat(histo, notNullValue())[ FD ]
Line_11 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_13 $$ assertThat((String) termsBucket.getKey(), equalTo("tag" + (i % interval)))[ FD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_39 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ CD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_11 $$ Terms.Bucket termsBucket = termsBuckets.get(i)[ FD ]
Line_14 $$ Histogram histo = termsBucket.getAggregations().get("histo")-->Line_16 $$ assertThat(histo.getName(), equalTo("histo"))[ FD ]
Line_2 $$ public void testMetricAsSubAgg() throws Exception -->Line_9 $$ assertThat(termsBuckets.size(), equalTo(interval))[ CD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_15 $$ assertThat(histo, notNullValue())[ CD ]
Line_2 $$ public void testMetricAsSubAgg() throws Exception -->Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).subAggregation(minBucket("min_bucket").setBucketsPaths("histo>sum"))).execute().actionGet()[ CD ]
Line_18 $$ List<String> minKeys = new ArrayList()-->Line_29 $$ minKeys = new ArrayList()[ FD ]
Line_31 $$ if (sum.value() == minValue) -->Line_32 $$ minKeys.add(bucket.getKeyAsString())[ CD ]
Line_25 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_27 $$ if (sum.value() < minValue) [ FD ]
Line_2 $$ public void testMetricAsSubAgg() throws Exception -->Line_8 $$ List<Terms.Bucket> termsBuckets = terms.getBuckets()[ CD ]
Line_29 $$ minKeys = new ArrayList()-->Line_32 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_20 $$ for (int j = 0; j < numValueBuckets; ++j) [ CD ]
Line_27 $$ if (sum.value() < minValue) -->Line_29 $$ minKeys = new ArrayList()[ CD ]
Line_17 $$ List<? extends Bucket> buckets = histo.getBuckets()-->Line_21 $$ Histogram.Bucket bucket = buckets.get(j)[ FD ]
Line_19 $$ double minValue = Double.POSITIVE_INFINITY-->Line_27 $$ if (sum.value() < minValue) [ FD ]
Line_14 $$ Histogram histo = termsBucket.getAggregations().get("histo")-->Line_17 $$ List<? extends Bucket> buckets = histo.getBuckets()[ FD ]
Line_27 $$ if (sum.value() < minValue) -->Line_30 $$ minKeys.add(bucket.getKeyAsString())[ CD ]
Line_2 $$ public void testMetricAsSubAgg() throws Exception -->Line_4 $$ assertSearchResponse(response)[ CD ]
Line_25 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_31 $$ if (sum.value() == minValue) [ FD ]
Line_2 $$ public void testMetricAsSubAgg() throws Exception -->Line_10 $$ for (int i = 0; i < interval; ++i) [ CD ]
Line_27 $$ if (sum.value() < minValue) -->Line_28 $$ minValue = sum.value()[ CD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_36 $$ InternalBucketMetricValue minBucketValue = termsBucket.getAggregations().get("min_bucket")[ CD ]
Line_24 $$ if (bucket.getDocCount() != 0) -->Line_27 $$ if (sum.value() < minValue) [ CD ]
Line_21 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_22 $$ assertThat(bucket, notNullValue())[ FD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_18 $$ List<String> minKeys = new ArrayList()[ CD ]
Line_29 $$ minKeys = new ArrayList()-->Line_30 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_20 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_23 $$ assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) j * interval))[ CD ]
Line_24 $$ if (bucket.getDocCount() != 0) -->Line_26 $$ assertThat(sum, notNullValue())[ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).subAggregation(minBucket("min_bucket").setBucketsPaths("histo>sum"))).execute().actionGet()-->Line_4 $$ assertSearchResponse(response)[ FD ]
Line_2 $$ public void testMetricAsSubAgg() throws Exception -->Line_5 $$ Terms terms = response.getAggregations().get("terms")[ CD ]
Line_20 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_21 $$ Histogram.Bucket bucket = buckets.get(j)[ FD ]
Line_27 $$ if (sum.value() < minValue) -->Line_31 $$ if (sum.value() == minValue) [ CD ]
Line_28 $$ minValue = sum.value()-->Line_39 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ FD ]
Line_20 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_22 $$ assertThat(bucket, notNullValue())[ CD ]
Line_25 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_28 $$ minValue = sum.value()[ FD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_13 $$ assertThat((String) termsBucket.getKey(), equalTo("tag" + (i % interval)))[ CD ]
Line_11 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_36 $$ InternalBucketMetricValue minBucketValue = termsBucket.getAggregations().get("min_bucket")[ FD ]
Line_28 $$ minValue = sum.value()-->Line_27 $$ if (sum.value() < minValue) [ FD ]
Line_21 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_32 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_17 $$ List<? extends Bucket> buckets = histo.getBuckets()[ CD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_38 $$ assertThat(minBucketValue.getName(), equalTo("min_bucket"))[ CD ]
Line_5 $$ Terms terms = response.getAggregations().get("terms")-->Line_7 $$ assertThat(terms.getName(), equalTo("terms"))[ FD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_14 $$ Histogram histo = termsBucket.getAggregations().get("histo")[ CD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_16 $$ assertThat(histo.getName(), equalTo("histo"))[ CD ]
Line_8 $$ List<Terms.Bucket> termsBuckets = terms.getBuckets()-->Line_11 $$ Terms.Bucket termsBucket = termsBuckets.get(i)[ FD ]
Line_29 $$ minKeys = new ArrayList()-->Line_40 $$ assertThat(minBucketValue.keys(), equalTo(minKeys.toArray(new String[minKeys.size()])))[ FD ]
Line_2 $$ public void testMetricAsSubAgg() throws Exception -->Line_6 $$ assertThat(terms, notNullValue())[ CD ]
Line_11 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_12 $$ assertThat(termsBucket, notNullValue())[ FD ]
Line_11 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_14 $$ Histogram histo = termsBucket.getAggregations().get("histo")[ FD ]
Line_25 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_26 $$ assertThat(sum, notNullValue())[ FD ]
Line_19 $$ double minValue = Double.POSITIVE_INFINITY-->Line_28 $$ minValue = sum.value()[ FD ]
Line_24 $$ if (bucket.getDocCount() != 0) -->Line_25 $$ Sum sum = bucket.getAggregations().get("sum")[ CD ]
Line_18 $$ List<String> minKeys = new ArrayList()-->Line_30 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_21 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_30 $$ minKeys.add(bucket.getKeyAsString())[ FD ]
Line_28 $$ minValue = sum.value()-->Line_31 $$ if (sum.value() == minValue) [ FD ]
Line_20 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_21 $$ Histogram.Bucket bucket = buckets.get(j)[ CD ]
Line_5 $$ Terms terms = response.getAggregations().get("terms")-->Line_8 $$ List<Terms.Bucket> termsBuckets = terms.getBuckets()[ FD ]
Line_19 $$ double minValue = Double.POSITIVE_INFINITY-->Line_39 $$ assertThat(minBucketValue.value(), equalTo(minValue))[ FD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_11 $$ Terms.Bucket termsBucket = termsBuckets.get(i)[ CD ]
Line_10 $$ for (int i = 0; i < interval; ++i) -->Line_37 $$ assertThat(minBucketValue, notNullValue())[ CD ]
Line_8 $$ List<Terms.Bucket> termsBuckets = terms.getBuckets()-->Line_9 $$ assertThat(termsBuckets.size(), equalTo(interval))[ FD ]
