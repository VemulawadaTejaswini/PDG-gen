Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_46 $$ Assert.assertNotNull(scheduledFuture)[ FD ]
Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_42 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ FD ]
Line_3 $$ MockEventLoopGroup mockEventLoopGroup = new MockEventLoopGroup()-->Line_4 $$ ReflectionTestUtil.setFieldValue(_embeddedChannel, "eventLoop", mockEventLoopGroup.next())[ FD ]
Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_44 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, 0)[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_23 $$ defaultNoticeableFuture.set(new Object())[ FD ]
Line_3 $$ MockEventLoopGroup mockEventLoopGroup = new MockEventLoopGroup()-->Line_34 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_37 $$ Assert.assertFalse(scheduledFuture.isCancelled())[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_38 $$ Assert.assertTrue(defaultNoticeableFuture.isCancelled())[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_49 $$ Assert.assertTrue(defaultNoticeableFuture.isCancelled())[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_31 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_47 $$ scheduledFuture.get(1, TimeUnit.HOURS)[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ FD ]
Line_3 $$ MockEventLoopGroup mockEventLoopGroup = new MockEventLoopGroup()-->Line_20 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_7 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, Time.HOUR)[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_22 $$ Assert.assertFalse(scheduledFuture.isDone())[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_28 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_2 $$ public void testScheduleCancellation() throws Exception -->Line_42 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ CD ]
Line_31 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_44 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, 0)[ FD ]
Line_42 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_49 $$ Assert.assertTrue(defaultNoticeableFuture.isCancelled())[ FD ]
Line_3 $$ MockEventLoopGroup mockEventLoopGroup = new MockEventLoopGroup()-->Line_55 $$ mockEventLoopGroup.shutdownGracefully()[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_33 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, 0)[ FD ]
Line_2 $$ public void testScheduleCancellation() throws Exception -->Line_55 $$ mockEventLoopGroup.shutdownGracefully()[ CD ]
Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_31 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ FD ]
Line_31 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_33 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, 0)[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_25 $$ Assert.assertTrue(scheduledFuture.isCancelled())[ FD ]
Line_2 $$ public void testScheduleCancellation() throws Exception -->Line_4 $$ ReflectionTestUtil.setFieldValue(_embeddedChannel, "eventLoop", mockEventLoopGroup.next())[ CD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_48 $$ Assert.assertFalse(scheduledFuture.isCancelled())[ FD ]
Line_31 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_38 $$ Assert.assertTrue(defaultNoticeableFuture.isCancelled())[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_33 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, 0)[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_40 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_31 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_42 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ FD ]
Line_28 $$ LogRecord logRecord = logRecords.get(0)-->Line_53 $$ Assert.assertEquals("Cancelled timeout " + defaultNoticeableFuture, logRecord.getMessage())[ FD ]
Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_49 $$ Assert.assertTrue(defaultNoticeableFuture.isCancelled())[ FD ]
Line_2 $$ public void testScheduleCancellation() throws Exception -->Line_31 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ CD ]
Line_2 $$ public void testScheduleCancellation() throws Exception -->Line_3 $$ MockEventLoopGroup mockEventLoopGroup = new MockEventLoopGroup()[ CD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_13 $$ Assert.assertTrue(scheduledFuture.isCancelled())[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_9 $$ Assert.assertNotNull(scheduledFuture)[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_10 $$ Assert.assertFalse(scheduledFuture.isDone())[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_19 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, Time.HOUR)[ FD ]
Line_3 $$ MockEventLoopGroup mockEventLoopGroup = new MockEventLoopGroup()-->Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()[ FD ]
Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_19 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, Time.HOUR)[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_51 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_24 $$ Assert.assertTrue(scheduledFuture.isDone())[ FD ]
Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_38 $$ Assert.assertTrue(defaultNoticeableFuture.isCancelled())[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_36 $$ scheduledFuture.get(1, TimeUnit.HOURS)[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_21 $$ Assert.assertNotNull(scheduledFuture)[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_44 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, 0)[ FD ]
Line_31 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_49 $$ Assert.assertTrue(defaultNoticeableFuture.isCancelled())[ FD ]
Line_28 $$ LogRecord logRecord = logRecords.get(0)-->Line_29 $$ Assert.assertEquals("Cancelled scheduled cancellation for " + defaultNoticeableFuture, logRecord.getMessage())[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_52 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyUtil.class.getName(), Level.OFF)) -->Line_39 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_2 $$ public void testScheduleCancellation() throws Exception -->Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()[ CD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_11 $$ defaultNoticeableFuture.set(new Object())[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyUtil.class.getName(), Level.OFF)) -->Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_35 $$ Assert.assertNotNull(scheduledFuture)[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyUtil.class.getName(), Level.OFF)) -->Line_26 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_3 $$ MockEventLoopGroup mockEventLoopGroup = new MockEventLoopGroup()-->Line_45 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()[ FD ]
Line_5 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_42 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ FD ]
Line_2 $$ public void testScheduleCancellation() throws Exception -->Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ CD ]
Line_42 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_44 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, 0)[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_27 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyUtil.class.getName(), Level.OFF)) -->Line_50 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_17 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_23 $$ defaultNoticeableFuture.set(new Object())[ FD ]
Line_8 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_12 $$ Assert.assertTrue(scheduledFuture.isDone())[ FD ]
