Line_7 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_37 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, 0)[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_15 $$ Assert.assertTrue(scheduledFuture.isCancelled())[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_57 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_7 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_54 $$ Assert.assertTrue(defaultNoticeableFuture.isCancelled())[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_24 $$ Assert.assertNotNull(scheduledFuture)[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_40 $$ scheduledFuture.get(1, TimeUnit.HOURS)[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_53 $$ Assert.assertFalse(scheduledFuture.isCancelled())[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_14 $$ Assert.assertTrue(scheduledFuture.isDone())[ FD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyUtil.class.getName(), Level.OFF)) -->Line_29 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_52 $$ scheduledFuture.get(1, TimeUnit.HOURS)[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_12 $$ Assert.assertFalse(scheduledFuture.isDone())[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_30 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyUtil.class.getName(), Level.OFF)) -->Line_43 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyUtil.class.getName(), Level.OFF)) -->Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_28 $$ Assert.assertTrue(scheduledFuture.isCancelled())[ FD ]
Line_7 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_13 $$ defaultNoticeableFuture.set(new Object())[ FD ]
Line_7 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_9 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, Time.HOUR)[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_41 $$ Assert.assertFalse(scheduledFuture.isCancelled())[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_51 $$ Assert.assertNotNull(scheduledFuture)[ FD ]
Line_7 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_26 $$ defaultNoticeableFuture.set(new Object())[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_39 $$ Assert.assertNotNull(scheduledFuture)[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_44 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_7 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_42 $$ Assert.assertTrue(defaultNoticeableFuture.isCancelled())[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_11 $$ Assert.assertNotNull(scheduledFuture)[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_25 $$ Assert.assertFalse(scheduledFuture.isDone())[ FD ]
Line_10 $$ ScheduledFuture<?> scheduledFuture = mockEventLoopGroup.getScheduledFuture()-->Line_27 $$ Assert.assertTrue(scheduledFuture.isDone())[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_31 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_31 $$ LogRecord logRecord = logRecords.get(0)-->Line_32 $$ Assert.assertEquals("Cancelled scheduled cancellation for " + defaultNoticeableFuture, logRecord.getMessage())[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_56 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyUtil.class.getName(), Level.OFF)) -->Line_55 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_31 $$ LogRecord logRecord = logRecords.get(0)-->Line_58 $$ Assert.assertEquals("Cancelled timeout " + defaultNoticeableFuture, logRecord.getMessage())[ FD ]
Line_7 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_22 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, Time.HOUR)[ FD ]
Line_7 $$ DefaultNoticeableFuture<Object> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_49 $$ NettyUtil.scheduleCancellation(_embeddedChannel, defaultNoticeableFuture, 0)[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
