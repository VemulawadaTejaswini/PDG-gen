Line_2 $$ public void testDetachedCriteria() -->Line_3 $$ DetachedCriteria dc = DetachedCriteria.forClass(Student.class).add(Property.forName("name").eq("Gavin King")).addOrder(Order.asc("studentNumber"))[ CD ]
Line_6 $$ Session session = openSession()-->Line_14 $$ session.persist(bizarroGavin)[ FD ]
Line_8 $$ Student gavin = new Student()-->Line_15 $$ session.persist(gavin)[ FD ]
Line_18 $$ session = openSession()-->Line_29 $$ session.delete(bizarroGavin)[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_24 $$ assertEquals(232, gavin.getStudentNumber())[ CD ]
Line_11 $$ Student bizarroGavin = new Student()-->Line_14 $$ session.persist(bizarroGavin)[ FD ]
Line_18 $$ session = openSession()-->Line_20 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_19 $$ t = session.beginTransaction()[ CD ]
Line_2 $$ public void testDetachedCriteria() -->Line_23 $$ bizarroGavin = (Student) result.get(1)[ CD ]
Line_3 $$ DetachedCriteria dc = DetachedCriteria.forClass(Student.class).add(Property.forName("name").eq("Gavin King")).addOrder(Order.asc("studentNumber"))-->Line_4 $$ byte[] bytes = SerializationHelper.serialize(dc)[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_15 $$ session.persist(gavin)[ CD ]
Line_22 $$ gavin = (Student) result.get(0)-->Line_24 $$ assertEquals(232, gavin.getStudentNumber())[ FD ]
Line_6 $$ Session session = openSession()-->Line_31 $$ session.close()[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_31 $$ session.close()[ CD ]
Line_2 $$ public void testDetachedCriteria() -->Line_21 $$ assertEquals(result.size(), 2)[ CD ]
Line_2 $$ public void testDetachedCriteria() -->Line_16 $$ t.commit()[ CD ]
Line_6 $$ Session session = openSession()-->Line_19 $$ t = session.beginTransaction()[ FD ]
Line_3 $$ DetachedCriteria dc = DetachedCriteria.forClass(Student.class).add(Property.forName("name").eq("Gavin King")).addOrder(Order.asc("studentNumber"))-->Line_5 $$ dc = (DetachedCriteria) SerializationHelper.deserialize(bytes)[ FD ]
Line_18 $$ session = openSession()-->Line_26 $$ assertTrue(session.isReadOnly(gavin))[ FD ]
Line_18 $$ session = openSession()-->Line_19 $$ t = session.beginTransaction()[ FD ]
Line_22 $$ gavin = (Student) result.get(0)-->Line_26 $$ assertTrue(session.isReadOnly(gavin))[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_30 $$ t.commit()[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_22 $$ gavin = (Student) result.get(0)[ CD ]
Line_8 $$ Student gavin = new Student()-->Line_26 $$ assertTrue(session.isReadOnly(gavin))[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_18 $$ session = openSession()[ CD ]
Line_23 $$ bizarroGavin = (Student) result.get(1)-->Line_27 $$ assertTrue(session.isReadOnly(bizarroGavin))[ FD ]
Line_11 $$ Student bizarroGavin = new Student()-->Line_23 $$ bizarroGavin = (Student) result.get(1)[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_26 $$ assertTrue(session.isReadOnly(gavin))[ CD ]
Line_11 $$ Student bizarroGavin = new Student()-->Line_13 $$ bizarroGavin.setStudentNumber(666)[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_16 $$ t.commit()[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_5 $$ dc = (DetachedCriteria) SerializationHelper.deserialize(bytes)[ CD ]
Line_2 $$ public void testDetachedCriteria() -->Line_8 $$ Student gavin = new Student()[ CD ]
Line_2 $$ public void testDetachedCriteria() -->Line_29 $$ session.delete(bizarroGavin)[ CD ]
Line_20 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()-->Line_23 $$ bizarroGavin = (Student) result.get(1)[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_9 $$ gavin.setName("Gavin King")[ CD ]
Line_18 $$ session = openSession()-->Line_28 $$ session.delete(gavin)[ FD ]
Line_8 $$ Student gavin = new Student()-->Line_24 $$ assertEquals(232, gavin.getStudentNumber())[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_17 $$ session.close()[ CD ]
Line_6 $$ Session session = openSession()-->Line_29 $$ session.delete(bizarroGavin)[ FD ]
Line_5 $$ dc = (DetachedCriteria) SerializationHelper.deserialize(bytes)-->Line_20 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()[ FD ]
Line_6 $$ Session session = openSession()-->Line_20 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()[ FD ]
Line_6 $$ Session session = openSession()-->Line_15 $$ session.persist(gavin)[ FD ]
Line_11 $$ Student bizarroGavin = new Student()-->Line_27 $$ assertTrue(session.isReadOnly(bizarroGavin))[ FD ]
Line_6 $$ Session session = openSession()-->Line_18 $$ session = openSession()[ FD ]
Line_20 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()-->Line_21 $$ assertEquals(result.size(), 2)[ FD ]
Line_11 $$ Student bizarroGavin = new Student()-->Line_29 $$ session.delete(bizarroGavin)[ FD ]
Line_18 $$ session = openSession()-->Line_31 $$ session.close()[ FD ]
Line_6 $$ Session session = openSession()-->Line_26 $$ assertTrue(session.isReadOnly(gavin))[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_7 $$ Transaction t = session.beginTransaction()[ CD ]
Line_8 $$ Student gavin = new Student()-->Line_28 $$ session.delete(gavin)[ FD ]
Line_3 $$ DetachedCriteria dc = DetachedCriteria.forClass(Student.class).add(Property.forName("name").eq("Gavin King")).addOrder(Order.asc("studentNumber"))-->Line_20 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()[ FD ]
Line_19 $$ t = session.beginTransaction()-->Line_30 $$ t.commit()[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_28 $$ session.delete(gavin)[ CD ]
Line_6 $$ Session session = openSession()-->Line_7 $$ Transaction t = session.beginTransaction()[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_27 $$ assertTrue(session.isReadOnly(bizarroGavin))[ CD ]
Line_2 $$ public void testDetachedCriteria() -->Line_13 $$ bizarroGavin.setStudentNumber(666)[ CD ]
Line_2 $$ public void testDetachedCriteria() -->Line_4 $$ byte[] bytes = SerializationHelper.serialize(dc)[ CD ]
Line_2 $$ public void testDetachedCriteria() -->Line_30 $$ t.commit()[ CD ]
Line_23 $$ bizarroGavin = (Student) result.get(1)-->Line_29 $$ session.delete(bizarroGavin)[ FD ]
Line_11 $$ Student bizarroGavin = new Student()-->Line_12 $$ bizarroGavin.setName("Gavin King")[ FD ]
Line_6 $$ Session session = openSession()-->Line_27 $$ assertTrue(session.isReadOnly(bizarroGavin))[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_25 $$ assertEquals(666, bizarroGavin.getStudentNumber())[ CD ]
Line_6 $$ Session session = openSession()-->Line_17 $$ session.close()[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_20 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()[ CD ]
Line_11 $$ Student bizarroGavin = new Student()-->Line_25 $$ assertEquals(666, bizarroGavin.getStudentNumber())[ FD ]
Line_22 $$ gavin = (Student) result.get(0)-->Line_28 $$ session.delete(gavin)[ FD ]
Line_8 $$ Student gavin = new Student()-->Line_9 $$ gavin.setName("Gavin King")[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_11 $$ Student bizarroGavin = new Student()[ CD ]
Line_20 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()-->Line_22 $$ gavin = (Student) result.get(0)[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_6 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testDetachedCriteria() -->Line_14 $$ session.persist(bizarroGavin)[ CD ]
Line_4 $$ byte[] bytes = SerializationHelper.serialize(dc)-->Line_5 $$ dc = (DetachedCriteria) SerializationHelper.deserialize(bytes)[ FD ]
Line_6 $$ Session session = openSession()-->Line_28 $$ session.delete(gavin)[ FD ]
Line_8 $$ Student gavin = new Student()-->Line_22 $$ gavin = (Student) result.get(0)[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_12 $$ bizarroGavin.setName("Gavin King")[ CD ]
Line_23 $$ bizarroGavin = (Student) result.get(1)-->Line_25 $$ assertEquals(666, bizarroGavin.getStudentNumber())[ FD ]
Line_18 $$ session = openSession()-->Line_27 $$ assertTrue(session.isReadOnly(bizarroGavin))[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_19 $$ t = session.beginTransaction()[ FD ]
Line_2 $$ public void testDetachedCriteria() -->Line_10 $$ gavin.setStudentNumber(232)[ CD ]
Line_8 $$ Student gavin = new Student()-->Line_10 $$ gavin.setStudentNumber(232)[ FD ]
