Line_19 $$ session = openSession()-->Line_21 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()[ FD ]
Line_12 $$ Student bizarroGavin = new Student()-->Line_26 $$ assertEquals(666, bizarroGavin.getStudentNumber())[ FD ]
Line_7 $$ Session session = openSession()-->Line_32 $$ session.close()[ FD ]
Line_7 $$ Session session = openSession()-->Line_28 $$ assertTrue(session.isReadOnly(bizarroGavin))[ FD ]
Line_19 $$ session = openSession()-->Line_27 $$ assertTrue(session.isReadOnly(gavin))[ FD ]
Line_7 $$ Session session = openSession()-->Line_21 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()[ FD ]
Line_4 $$ DetachedCriteria dc = DetachedCriteria.forClass(Student.class).add(Property.forName("name").eq("Gavin King")).addOrder(Order.asc("studentNumber"))-->Line_5 $$ byte[] bytes = SerializationHelper.serialize(dc)[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_25 $$ assertEquals(232, gavin.getStudentNumber())[ FD ]
Line_7 $$ Session session = openSession()-->Line_16 $$ session.persist(gavin)[ FD ]
Line_19 $$ session = openSession()-->Line_28 $$ assertTrue(session.isReadOnly(bizarroGavin))[ FD ]
Line_5 $$ byte[] bytes = SerializationHelper.serialize(dc)-->Line_6 $$ dc = (DetachedCriteria) SerializationHelper.deserialize(bytes)[ FD ]
Line_8 $$ Transaction t = session.beginTransaction()-->Line_17 $$ t.commit()[ FD ]
Line_7 $$ Session session = openSession()-->Line_15 $$ session.persist(bizarroGavin)[ FD ]
Line_12 $$ Student bizarroGavin = new Student()-->Line_15 $$ session.persist(bizarroGavin)[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_11 $$ gavin.setStudentNumber(232)[ FD ]
Line_24 $$ bizarroGavin = (Student) result.get(1)-->Line_30 $$ session.delete(bizarroGavin)[ FD ]
Line_23 $$ gavin = (Student) result.get(0)-->Line_25 $$ assertEquals(232, gavin.getStudentNumber())[ FD ]
Line_8 $$ Transaction t = session.beginTransaction()-->Line_31 $$ t.commit()[ FD ]
Line_20 $$ t = session.beginTransaction()-->Line_31 $$ t.commit()[ FD ]
Line_19 $$ session = openSession()-->Line_20 $$ t = session.beginTransaction()[ FD ]
Line_12 $$ Student bizarroGavin = new Student()-->Line_30 $$ session.delete(bizarroGavin)[ FD ]
Line_7 $$ Session session = openSession()-->Line_19 $$ session = openSession()[ FD ]
Line_7 $$ Session session = openSession()-->Line_18 $$ session.close()[ FD ]
Line_7 $$ Session session = openSession()-->Line_30 $$ session.delete(bizarroGavin)[ FD ]
Line_19 $$ session = openSession()-->Line_29 $$ session.delete(gavin)[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_23 $$ gavin = (Student) result.get(0)[ FD ]
Line_4 $$ DetachedCriteria dc = DetachedCriteria.forClass(Student.class).add(Property.forName("name").eq("Gavin King")).addOrder(Order.asc("studentNumber"))-->Line_6 $$ dc = (DetachedCriteria) SerializationHelper.deserialize(bytes)[ FD ]
Line_24 $$ bizarroGavin = (Student) result.get(1)-->Line_28 $$ assertTrue(session.isReadOnly(bizarroGavin))[ FD ]
Line_21 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()-->Line_22 $$ assertEquals(result.size(), 2)[ FD ]
Line_19 $$ session = openSession()-->Line_32 $$ session.close()[ FD ]
Line_12 $$ Student bizarroGavin = new Student()-->Line_14 $$ bizarroGavin.setStudentNumber(666)[ FD ]
Line_21 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()-->Line_23 $$ gavin = (Student) result.get(0)[ FD ]
Line_7 $$ Session session = openSession()-->Line_29 $$ session.delete(gavin)[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_16 $$ session.persist(gavin)[ FD ]
Line_6 $$ dc = (DetachedCriteria) SerializationHelper.deserialize(bytes)-->Line_21 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()[ FD ]
Line_21 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()-->Line_24 $$ bizarroGavin = (Student) result.get(1)[ FD ]
Line_19 $$ session = openSession()-->Line_30 $$ session.delete(bizarroGavin)[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_29 $$ session.delete(gavin)[ FD ]
Line_7 $$ Session session = openSession()-->Line_27 $$ assertTrue(session.isReadOnly(gavin))[ FD ]
Line_12 $$ Student bizarroGavin = new Student()-->Line_28 $$ assertTrue(session.isReadOnly(bizarroGavin))[ FD ]
Line_23 $$ gavin = (Student) result.get(0)-->Line_29 $$ session.delete(gavin)[ FD ]
Line_24 $$ bizarroGavin = (Student) result.get(1)-->Line_26 $$ assertEquals(666, bizarroGavin.getStudentNumber())[ FD ]
Line_8 $$ Transaction t = session.beginTransaction()-->Line_20 $$ t = session.beginTransaction()[ FD ]
Line_4 $$ DetachedCriteria dc = DetachedCriteria.forClass(Student.class).add(Property.forName("name").eq("Gavin King")).addOrder(Order.asc("studentNumber"))-->Line_21 $$ List result = dc.getExecutableCriteria(session).setMaxResults(3).setReadOnly(true).list()[ FD ]
Line_12 $$ Student bizarroGavin = new Student()-->Line_24 $$ bizarroGavin = (Student) result.get(1)[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_27 $$ assertTrue(session.isReadOnly(gavin))[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_10 $$ gavin.setName("Gavin King")[ FD ]
Line_12 $$ Student bizarroGavin = new Student()-->Line_13 $$ bizarroGavin.setName("Gavin King")[ FD ]
Line_7 $$ Session session = openSession()-->Line_20 $$ t = session.beginTransaction()[ FD ]
Line_23 $$ gavin = (Student) result.get(0)-->Line_27 $$ assertTrue(session.isReadOnly(gavin))[ FD ]
Line_7 $$ Session session = openSession()-->Line_8 $$ Transaction t = session.beginTransaction()[ FD ]
