Line_3 $$ for (int i = 0, argsLength = children.size(); i < argsLength; i++) -->Line_7 $$ if (childTests.isEmpty() || !forkTillMethod) [ CD ]
Line_5 $$ final List childTests = getChildren(child)-->Line_7 $$ if (childTests.isEmpty() || !forkTillMethod) [ FD ]
Line_12 $$ result = Math.min(childResult, result)-->Line_10 $$ childResult = splitChildren(childTests, result, forkTillMethod, workingDir, classpath)[ FD ]
Line_2 $$ protected int splitChildren(List children, int result, boolean forkTillMethod, File workingDir, String classpath) throws IOException, InterruptedException -->Line_8 $$ childResult = startChildFork(createChildArgs(child), workingDir, classpath)[ FD ]
Line_3 $$ for (int i = 0, argsLength = children.size(); i < argsLength; i++) -->Line_4 $$ final Object child = children.get(i)[ FD ]
Line_2 $$ protected int splitChildren(List children, int result, boolean forkTillMethod, File workingDir, String classpath) throws IOException, InterruptedException -->Line_3 $$ for (int i = 0, argsLength = children.size(); i < argsLength; i++) [ FD ]
Line_5 $$ final List childTests = getChildren(child)-->Line_10 $$ childResult = splitChildren(childTests, result, forkTillMethod, workingDir, classpath)[ FD ]
Line_3 $$ for (int i = 0, argsLength = children.size(); i < argsLength; i++) -->Line_4 $$ final Object child = children.get(i)[ CD ]
Line_2 $$ protected int splitChildren(List children, int result, boolean forkTillMethod, File workingDir, String classpath) throws IOException, InterruptedException -->Line_4 $$ final Object child = children.get(i)[ FD ]
Line_2 $$ protected int splitChildren(List children, int result, boolean forkTillMethod, File workingDir, String classpath) throws IOException, InterruptedException -->Line_12 $$ result = Math.min(childResult, result)[ FD ]
Line_6 $$ final int childResult-->Line_8 $$ childResult = startChildFork(createChildArgs(child), workingDir, classpath)[ FD ]
Line_10 $$ childResult = splitChildren(childTests, result, forkTillMethod, workingDir, classpath)-->Line_12 $$ result = Math.min(childResult, result)[ FD ]
Line_3 $$ for (int i = 0, argsLength = children.size(); i < argsLength; i++) -->Line_6 $$ final int childResult[ CD ]
Line_6 $$ final int childResult-->Line_10 $$ childResult = splitChildren(childTests, result, forkTillMethod, workingDir, classpath)[ FD ]
Line_2 $$ protected int splitChildren(List children, int result, boolean forkTillMethod, File workingDir, String classpath) throws IOException, InterruptedException -->Line_10 $$ childResult = splitChildren(childTests, result, forkTillMethod, workingDir, classpath)[ FD ]
Line_4 $$ final Object child = children.get(i)-->Line_8 $$ childResult = startChildFork(createChildArgs(child), workingDir, classpath)[ FD ]
Line_8 $$ childResult = startChildFork(createChildArgs(child), workingDir, classpath)-->Line_12 $$ result = Math.min(childResult, result)[ FD ]
Line_2 $$ protected int splitChildren(List children, int result, boolean forkTillMethod, File workingDir, String classpath) throws IOException, InterruptedException -->Line_14 $$ return result[ CD ]
Line_3 $$ for (int i = 0, argsLength = children.size(); i < argsLength; i++) -->Line_5 $$ final List childTests = getChildren(child)[ CD ]
Line_8 $$ childResult = startChildFork(createChildArgs(child), workingDir, classpath)-->Line_10 $$ childResult = splitChildren(childTests, result, forkTillMethod, workingDir, classpath)[ FD ]
Line_2 $$ protected int splitChildren(List children, int result, boolean forkTillMethod, File workingDir, String classpath) throws IOException, InterruptedException -->Line_7 $$ if (childTests.isEmpty() || !forkTillMethod) [ FD ]
Line_7 $$ if (childTests.isEmpty() || !forkTillMethod) -->Line_8 $$ childResult = startChildFork(createChildArgs(child), workingDir, classpath)[ CD ]
Line_3 $$ for (int i = 0, argsLength = children.size(); i < argsLength; i++) -->Line_12 $$ result = Math.min(childResult, result)[ CD ]
Line_4 $$ final Object child = children.get(i)-->Line_5 $$ final List childTests = getChildren(child)[ FD ]
Line_6 $$ final int childResult-->Line_12 $$ result = Math.min(childResult, result)[ FD ]
Line_7 $$ if (childTests.isEmpty() || !forkTillMethod) -->Line_10 $$ childResult = splitChildren(childTests, result, forkTillMethod, workingDir, classpath)[ CD ]
Line_2 $$ protected int splitChildren(List children, int result, boolean forkTillMethod, File workingDir, String classpath) throws IOException, InterruptedException -->Line_3 $$ for (int i = 0, argsLength = children.size(); i < argsLength; i++) [ CD ]
