Line_46 $$ if (childAttributes != null) -->Line_47 $$ checkAndScheduleChildRefresh(dir, child, childAttributes)[ CD ]
Line_29 $$ for (String name : wanted) -->Line_57 $$ scheduleCreation(dir, name, childAttributes.isDirectory(), false)[ FD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_10 $$ wanted = dir.getSuspiciousNames()[ FD ]
Line_15 $$ if (!fs.isCaseSensitive()) -->Line_16 $$ actualNames = new OpenTHashSet<String>(strategy, VfsUtil.filterNames(fs.list(dir)))[ CD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_32 $$ checkCancelled(dir)[ FD ]
Line_3 $$ while (true) -->Line_7 $$ AccessToken token = ApplicationManager.getApplication().acquireReadActionLock()[ CD ]
Line_3 $$ while (true) -->Line_15 $$ if (!fs.isCaseSensitive()) [ CD ]
Line_10 $$ wanted = dir.getSuspiciousNames()-->Line_38 $$ if (!cached.equals(dir.getCachedChildren()) || !wanted.equals(dir.getSuspiciousNames())) [ FD ]
Line_39 $$ if (LOG.isDebugEnabled())-->Line_40 $$ LOG.debug("retry: " + dir)[ CD ]
Line_18 $$ if (LOG.isTraceEnabled()) -->Line_19 $$ LOG.trace("cached=" + cached + " actual=" + actualNames)[ CD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_38 $$ if (!cached.equals(dir.getCachedChildren()) || !wanted.equals(dir.getSuspiciousNames())) [ FD ]
Line_3 $$ while (true) -->Line_14 $$ OpenTHashSet<String> actualNames = null[ CD ]
Line_38 $$ if (!cached.equals(dir.getCachedChildren()) || !wanted.equals(dir.getSuspiciousNames())) -->Line_39 $$ if (LOG.isDebugEnabled())[ CD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_16 $$ actualNames = new OpenTHashSet<String>(strategy, VfsUtil.filterNames(fs.list(dir)))[ FD ]
Line_16 $$ actualNames = new OpenTHashSet<String>(strategy, VfsUtil.filterNames(fs.list(dir)))-->Line_48 $$ checkAndScheduleFileNameChange(actualNames, child)[ FD ]
Line_6 $$ List<String> wanted-->Line_10 $$ wanted = dir.getSuspiciousNames()[ FD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_26 $$ existingMap.add(pair(child, fs.getAttributes(child)))[ FD ]
Line_3 $$ while (true) -->Line_28 $$ List<Pair<String, FileAttributes>> wantedMap = ContainerUtil.newArrayListWithCapacity(wanted.size())[ CD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_47 $$ checkAndScheduleChildRefresh(dir, child, childAttributes)[ FD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_33 $$ wantedMap.add(pair(name, fs.getAttributes(new FakeVirtualFile(dir, name))))[ FD ]
Line_24 $$ for (VirtualFile child : cached) -->Line_48 $$ checkAndScheduleFileNameChange(actualNames, child)[ FD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_25 $$ checkCancelled(dir)[ FD ]
Line_7 $$ AccessToken token = ApplicationManager.getApplication().acquireReadActionLock()-->Line_12 $$ token.finish()[ FD ]
Line_45 $$ FileAttributes childAttributes = pair.second-->Line_56 $$ if (childAttributes != null) [ FD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_15 $$ if (!fs.isCaseSensitive()) [ FD ]
Line_46 $$ if (childAttributes != null) -->Line_48 $$ checkAndScheduleFileNameChange(actualNames, child)[ CD ]
Line_46 $$ if (childAttributes != null) -->Line_50 $$ scheduleDeletion(child)[ CD ]
Line_29 $$ for (String name : wanted) -->Line_30 $$ if (name.isEmpty())[ FD ]
Line_29 $$ for (String name : wanted) -->Line_33 $$ wantedMap.add(pair(name, fs.getAttributes(new FakeVirtualFile(dir, name))))[ FD ]
Line_6 $$ List<String> wanted-->Line_28 $$ List<Pair<String, FileAttributes>> wantedMap = ContainerUtil.newArrayListWithCapacity(wanted.size())[ FD ]
Line_28 $$ List<Pair<String, FileAttributes>> wantedMap = ContainerUtil.newArrayListWithCapacity(wanted.size())-->Line_33 $$ wantedMap.add(pair(name, fs.getAttributes(new FakeVirtualFile(dir, name))))[ FD ]
Line_3 $$ while (true) -->Line_6 $$ List<String> wanted[ CD ]
Line_24 $$ for (VirtualFile child : cached) -->Line_50 $$ scheduleDeletion(child)[ FD ]
Line_14 $$ OpenTHashSet<String> actualNames = null-->Line_48 $$ checkAndScheduleFileNameChange(actualNames, child)[ FD ]
Line_3 $$ while (true) -->Line_18 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_18 $$ if (LOG.isTraceEnabled()) -->Line_20 $$ LOG.trace("suspicious=" + wanted)[ CD ]
Line_24 $$ for (VirtualFile child : cached) -->Line_26 $$ existingMap.add(pair(child, fs.getAttributes(child)))[ FD ]
Line_45 $$ FileAttributes childAttributes = pair.second-->Line_47 $$ checkAndScheduleChildRefresh(dir, child, childAttributes)[ FD ]
Line_45 $$ FileAttributes childAttributes = pair.second-->Line_57 $$ scheduleCreation(dir, name, childAttributes.isDirectory(), false)[ FD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_9 $$ cached = dir.getCachedChildren()[ FD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_3 $$ while (true) [ CD ]
Line_6 $$ List<String> wanted-->Line_38 $$ if (!cached.equals(dir.getCachedChildren()) || !wanted.equals(dir.getSuspiciousNames())) [ FD ]
Line_9 $$ cached = dir.getCachedChildren()-->Line_38 $$ if (!cached.equals(dir.getCachedChildren()) || !wanted.equals(dir.getSuspiciousNames())) [ FD ]
Line_56 $$ if (childAttributes != null) -->Line_57 $$ scheduleCreation(dir, name, childAttributes.isDirectory(), false)[ CD ]
Line_45 $$ FileAttributes childAttributes = pair.second-->Line_46 $$ if (childAttributes != null) [ FD ]
Line_2 $$ private void partialDirRefresh(NewVirtualFileSystem fs, TObjectHashingStrategy<String> strategy, VirtualDirectoryImpl dir) -->Line_57 $$ scheduleCreation(dir, name, childAttributes.isDirectory(), false)[ FD ]
Line_10 $$ wanted = dir.getSuspiciousNames()-->Line_28 $$ List<Pair<String, FileAttributes>> wantedMap = ContainerUtil.newArrayListWithCapacity(wanted.size())[ FD ]
Line_24 $$ for (VirtualFile child : cached) -->Line_47 $$ checkAndScheduleChildRefresh(dir, child, childAttributes)[ FD ]
Line_7 $$ AccessToken token = ApplicationManager.getApplication().acquireReadActionLock()-->Line_62 $$ token.finish()[ FD ]
Line_14 $$ OpenTHashSet<String> actualNames = null-->Line_16 $$ actualNames = new OpenTHashSet<String>(strategy, VfsUtil.filterNames(fs.list(dir)))[ FD ]
