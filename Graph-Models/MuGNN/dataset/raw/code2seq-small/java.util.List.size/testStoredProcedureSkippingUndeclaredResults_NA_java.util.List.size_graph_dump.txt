Line_19 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_20 $$ assertEquals(2, rs1.size())[ FD ]
Line_5 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_23 $$ verify(resultSet).close()[ FD ]
Line_14 $$ JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource)-->Line_15 $$ jdbcTemplate.setSkipUndeclaredResults(true)[ FD ]
Line_5 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_10 $$ given(callableStatement.getResultSet()).willReturn(resultSet)[ FD ]
Line_5 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_7 $$ given(resultSet.getString(2)).willReturn("Foo", "Bar")[ FD ]
Line_17 $$ Map<String, Object> res = sproc.execute()-->Line_18 $$ assertEquals("incorrect number of returns", 1, res.size())[ FD ]
Line_17 $$ Map<String, Object> res = sproc.execute()-->Line_19 $$ List<String> rs1 = (List<String>) res.get("rs")[ FD ]
Line_19 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_21 $$ assertEquals("Foo", rs1.get(0))[ FD ]
Line_16 $$ StoredProcedureWithResultSetMapped sproc = new StoredProcedureWithResultSetMapped(jdbcTemplate)-->Line_17 $$ Map<String, Object> res = sproc.execute()[ FD ]
Line_19 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_22 $$ assertEquals("Bar", rs1.get(1))[ FD ]
Line_5 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_6 $$ given(resultSet.next()).willReturn(true, true, false)[ FD ]
