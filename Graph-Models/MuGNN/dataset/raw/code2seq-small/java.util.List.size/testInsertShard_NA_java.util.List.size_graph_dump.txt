Line_8 $$ Map<String, Object> shard = shards.get(0)-->Line_11 $$ assertEquals(shard.get("compressed_size"), 42L)[ FD ]
Line_6 $$ List<Map<String, Object>> shards = dbi.withHandle( handle -> handle.select(sql, shardId))-->Line_7 $$ assertEquals(shards.size(), 1)[ FD ]
Line_3 $$ long tableId = createTable("test")-->Line_4 $$ long shardId = dao.insertShard(UUID.randomUUID(), tableId, 13, 42, 84)[ FD ]
Line_2 $$ public void testInsertShard() -->Line_9 $$ assertEquals(shard.get("table_id"), tableId)[ CD ]
Line_2 $$ public void testInsertShard() -->Line_6 $$ List<Map<String, Object>> shards = dbi.withHandle( handle -> handle.select(sql, shardId))[ CD ]
Line_2 $$ public void testInsertShard() -->Line_12 $$ assertEquals(shard.get("uncompressed_size"), 84L)[ CD ]
Line_8 $$ Map<String, Object> shard = shards.get(0)-->Line_12 $$ assertEquals(shard.get("uncompressed_size"), 84L)[ FD ]
Line_3 $$ long tableId = createTable("test")-->Line_9 $$ assertEquals(shard.get("table_id"), tableId)[ FD ]
Line_8 $$ Map<String, Object> shard = shards.get(0)-->Line_10 $$ assertEquals(shard.get("row_count"), 13L)[ FD ]
Line_2 $$ public void testInsertShard() -->Line_3 $$ long tableId = createTable("test")[ CD ]
Line_8 $$ Map<String, Object> shard = shards.get(0)-->Line_9 $$ assertEquals(shard.get("table_id"), tableId)[ FD ]
Line_2 $$ public void testInsertShard() -->Line_10 $$ assertEquals(shard.get("row_count"), 13L)[ CD ]
Line_2 $$ public void testInsertShard() -->Line_8 $$ Map<String, Object> shard = shards.get(0)[ CD ]
Line_4 $$ long shardId = dao.insertShard(UUID.randomUUID(), tableId, 13, 42, 84)-->Line_6 $$ handle.select(sql, shardId)[ FD ]
Line_5 $$ String sql = "SELECT table_id, row_count, compressed_size, uncompressed_size " + "FROM shards WHERE shard_id = ?"-->Line_6 $$ handle.select(sql, shardId)[ FD ]
Line_6 $$ List<Map<String, Object>> shards = dbi.withHandle( handle -> handle.select(sql, shardId))-->Line_8 $$ Map<String, Object> shard = shards.get(0)[ FD ]
Line_2 $$ public void testInsertShard() -->Line_5 $$ String sql = "SELECT table_id, row_count, compressed_size, uncompressed_size " + "FROM shards WHERE shard_id = ?"[ CD ]
Line_2 $$ public void testInsertShard() -->Line_11 $$ assertEquals(shard.get("compressed_size"), 42L)[ CD ]
Line_2 $$ public void testInsertShard() -->Line_7 $$ assertEquals(shards.size(), 1)[ CD ]
Line_2 $$ public void testInsertShard() -->Line_4 $$ long shardId = dao.insertShard(UUID.randomUUID(), tableId, 13, 42, 84)[ CD ]
