Line_2 $$ public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root, @NotNull String parentCommit, @NotNull List<String> olderCommits) throws VcsException -->Line_11 $$ GitRebaseEditorService rebaseEditorService = GitRebaseEditorService.getInstance()[ CD ]
Line_17 $$ final PushRebaseEditor pushRebaseEditor = new PushRebaseEditor(rebaseEditorService, root, olderCommits, false, h)-->Line_18 $$ rebaseEditorNo = pushRebaseEditor.getHandlerNo()[ FD ]
Line_20 $$ final GitTask rebaseTask = new GitTask(myProject, h, "Reordering commits")-->Line_21 $$ rebaseTask.setProgressIndicator(myProgressIndicator)[ FD ]
Line_15 $$ final GitRebaseProblemDetector rebaseConflictDetector = new GitRebaseProblemDetector()-->Line_22 $$ return executeRebaseTaskInBackground(root, h, rebaseConflictDetector, rebaseTask)[ FD ]
Line_2 $$ public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root, @NotNull String parentCommit, @NotNull List<String> olderCommits) throws VcsException -->Line_4 $$ if (olderCommits.isEmpty() || olderCommits.size() == allCommits.size()) [ CD ]
Line_4 $$ if (olderCommits.isEmpty() || olderCommits.size() == allCommits.size()) -->Line_6 $$ return true[ CD ]
Line_2 $$ public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root, @NotNull String parentCommit, @NotNull List<String> olderCommits) throws VcsException -->Line_4 $$ if (olderCommits.isEmpty() || olderCommits.size() == allCommits.size()) [ FD ]
Line_20 $$ final GitTask rebaseTask = new GitTask(myProject, h, "Reordering commits")-->Line_22 $$ return executeRebaseTaskInBackground(root, h, rebaseConflictDetector, rebaseTask)[ FD ]
Line_8 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_19 $$ rebaseEditorService.configureHandler(h, rebaseEditorNo)[ FD ]
Line_4 $$ if (olderCommits.isEmpty() || olderCommits.size() == allCommits.size()) -->Line_5 $$ LOG.info("Nothing to reorder. olderCommits: " + olderCommits + " allCommits: " + allCommits)[ CD ]
Line_18 $$ rebaseEditorNo = pushRebaseEditor.getHandlerNo()-->Line_19 $$ rebaseEditorService.configureHandler(h, rebaseEditorNo)[ FD ]
Line_2 $$ public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root, @NotNull String parentCommit, @NotNull List<String> olderCommits) throws VcsException -->Line_10 $$ Integer rebaseEditorNo = null[ CD ]
Line_8 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_13 $$ h.addParameters("-i", "-m", "-v")[ FD ]
Line_11 $$ GitRebaseEditorService rebaseEditorService = GitRebaseEditorService.getInstance()-->Line_25 $$ rebaseEditorService.unregisterHandler(rebaseEditorNo)[ FD ]
Line_2 $$ public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root, @NotNull String parentCommit, @NotNull List<String> olderCommits) throws VcsException -->Line_14 $$ h.addParameters(parentCommit)[ FD ]
Line_8 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_9 $$ h.setStdoutSuppressed(false)[ FD ]
Line_8 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_14 $$ h.addParameters(parentCommit)[ FD ]
Line_2 $$ public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root, @NotNull String parentCommit, @NotNull List<String> olderCommits) throws VcsException -->Line_22 $$ return executeRebaseTaskInBackground(root, h, rebaseConflictDetector, rebaseTask)[ FD ]
Line_2 $$ public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root, @NotNull String parentCommit, @NotNull List<String> olderCommits) throws VcsException -->Line_8 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)[ CD ]
Line_10 $$ Integer rebaseEditorNo = null-->Line_25 $$ rebaseEditorService.unregisterHandler(rebaseEditorNo)[ FD ]
Line_24 $$ if (rebaseEditorNo != null) -->Line_25 $$ rebaseEditorService.unregisterHandler(rebaseEditorNo)[ CD ]
Line_18 $$ rebaseEditorNo = pushRebaseEditor.getHandlerNo()-->Line_24 $$ if (rebaseEditorNo != null) [ FD ]
Line_2 $$ public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root, @NotNull String parentCommit, @NotNull List<String> olderCommits) throws VcsException -->Line_9 $$ h.setStdoutSuppressed(false)[ CD ]
Line_18 $$ rebaseEditorNo = pushRebaseEditor.getHandlerNo()-->Line_25 $$ rebaseEditorService.unregisterHandler(rebaseEditorNo)[ FD ]
Line_2 $$ public boolean reoderCommitsIfNeeded(@NotNull final VirtualFile root, @NotNull String parentCommit, @NotNull List<String> olderCommits) throws VcsException -->Line_3 $$ List<String> allCommits = new ArrayList<String>()[ CD ]
Line_8 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_22 $$ return executeRebaseTaskInBackground(root, h, rebaseConflictDetector, rebaseTask)[ FD ]
Line_3 $$ List<String> allCommits = new ArrayList<String>()-->Line_4 $$ if (olderCommits.isEmpty() || olderCommits.size() == allCommits.size()) [ FD ]
Line_10 $$ Integer rebaseEditorNo = null-->Line_24 $$ if (rebaseEditorNo != null) [ FD ]
Line_11 $$ GitRebaseEditorService rebaseEditorService = GitRebaseEditorService.getInstance()-->Line_19 $$ rebaseEditorService.configureHandler(h, rebaseEditorNo)[ FD ]
Line_10 $$ Integer rebaseEditorNo = null-->Line_19 $$ rebaseEditorService.configureHandler(h, rebaseEditorNo)[ FD ]
Line_8 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_16 $$ h.addLineListener(rebaseConflictDetector)[ FD ]
Line_10 $$ Integer rebaseEditorNo = null-->Line_18 $$ rebaseEditorNo = pushRebaseEditor.getHandlerNo()[ FD ]
Line_15 $$ final GitRebaseProblemDetector rebaseConflictDetector = new GitRebaseProblemDetector()-->Line_16 $$ h.addLineListener(rebaseConflictDetector)[ FD ]
