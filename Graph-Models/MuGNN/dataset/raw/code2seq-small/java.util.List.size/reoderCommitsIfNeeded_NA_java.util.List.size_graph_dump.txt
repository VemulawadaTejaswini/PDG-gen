Line_28 $$ final GitTask rebaseTask = new GitTask(myProject, h, "Reordering commits")-->Line_29 $$ rebaseTask.setProgressIndicator(myProgressIndicator)[ FD ]
Line_16 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_17 $$ h.setStdoutSuppressed(false)[ FD ]
Line_23 $$ final GitRebaseProblemDetector rebaseConflictDetector = new GitRebaseProblemDetector()-->Line_30 $$ return executeRebaseTaskInBackground(root, h, rebaseConflictDetector, rebaseTask)[ FD ]
Line_18 $$ Integer rebaseEditorNo = null-->Line_35 $$ rebaseEditorService.unregisterHandler(rebaseEditorNo)[ FD ]
Line_26 $$ rebaseEditorNo = pushRebaseEditor.getHandlerNo()-->Line_35 $$ rebaseEditorService.unregisterHandler(rebaseEditorNo)[ FD ]
Line_16 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_21 $$ h.addParameters("-i", "-m", "-v")[ FD ]
Line_28 $$ final GitTask rebaseTask = new GitTask(myProject, h, "Reordering commits")-->Line_30 $$ return executeRebaseTaskInBackground(root, h, rebaseConflictDetector, rebaseTask)[ FD ]
Line_16 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_30 $$ return executeRebaseTaskInBackground(root, h, rebaseConflictDetector, rebaseTask)[ FD ]
Line_26 $$ rebaseEditorNo = pushRebaseEditor.getHandlerNo()-->Line_27 $$ rebaseEditorService.configureHandler(h, rebaseEditorNo)[ FD ]
Line_25 $$ final PushRebaseEditor pushRebaseEditor = new PushRebaseEditor(rebaseEditorService, root, olderCommits, false, h)-->Line_26 $$ rebaseEditorNo = pushRebaseEditor.getHandlerNo()[ FD ]
Line_16 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_27 $$ rebaseEditorService.configureHandler(h, rebaseEditorNo)[ FD ]
Line_19 $$ GitRebaseEditorService rebaseEditorService = GitRebaseEditorService.getInstance()-->Line_35 $$ rebaseEditorService.unregisterHandler(rebaseEditorNo)[ FD ]
Line_19 $$ GitRebaseEditorService rebaseEditorService = GitRebaseEditorService.getInstance()-->Line_27 $$ rebaseEditorService.configureHandler(h, rebaseEditorNo)[ FD ]
Line_16 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_24 $$ h.addLineListener(rebaseConflictDetector)[ FD ]
Line_23 $$ final GitRebaseProblemDetector rebaseConflictDetector = new GitRebaseProblemDetector()-->Line_24 $$ h.addLineListener(rebaseConflictDetector)[ FD ]
Line_16 $$ final GitLineHandler h = new GitLineHandler(myProject, root, GitCommand.REBASE)-->Line_22 $$ h.addParameters(parentCommit)[ FD ]
Line_12 $$ if (olderCommits.isEmpty() || olderCommits.size() == allCommits.size()) -->Line_14 $$ return true[ CD ]
Line_18 $$ Integer rebaseEditorNo = null-->Line_26 $$ rebaseEditorNo = pushRebaseEditor.getHandlerNo()[ FD ]
Line_18 $$ Integer rebaseEditorNo = null-->Line_27 $$ rebaseEditorService.configureHandler(h, rebaseEditorNo)[ FD ]
Line_12 $$ if (olderCommits.isEmpty() || olderCommits.size() == allCommits.size()) -->Line_13 $$ LOG.info("Nothing to reorder. olderCommits: " + olderCommits + " allCommits: " + allCommits)[ CD ]
