Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_15 $$ a.setName("Paris")[ CD ]
Line_17 $$ Session s = openSession()-->Line_39 $$ s.delete(n2)[ FD ]
Line_4 $$ Night n = new Night()-->Line_16 $$ n.setArea(a)[ FD ]
Line_23 $$ s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_25 $$ Statistics stats = sessionFactory().getStatistics()-->Line_35 $$ assertEquals(1, stats.getQueryCacheHitCount())[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_10 $$ c.add(Calendar.MONTH, 2)[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_38 $$ s.delete(n2.getArea())[ CD ]
Line_28 $$ Query q = s.getNamedQuery("night&areaCached")-->Line_34 $$ q.list()[ FD ]
Line_17 $$ Session s = openSession()-->Line_19 $$ s.persist(a)[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_3 $$ cleanupCache()[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_21 $$ tx.commit()[ CD ]
Line_18 $$ Transaction tx = s.beginTransaction()-->Line_24 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_8 $$ c.add(Calendar.MONTH, -1)[ CD ]
Line_14 $$ Area a = new Area()-->Line_16 $$ n.setArea(a)[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_11 $$ Date inAMonth = c.getTime()[ CD ]
Line_23 $$ s = openSession()-->Line_38 $$ s.delete(n2.getArea())[ FD ]
Line_4 $$ Night n = new Night()-->Line_12 $$ n.setDate(now)[ FD ]
Line_17 $$ Session s = openSession()-->Line_18 $$ Transaction tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_35 $$ assertEquals(1, stats.getQueryCacheHitCount())[ CD ]
Line_25 $$ Statistics stats = sessionFactory().getStatistics()-->Line_32 $$ assertEquals(1, stats.getQueryCachePutCount())[ FD ]
Line_36 $$ Night n2 = (Night) ((Object[]) result.get(0))[0]-->Line_39 $$ s.delete(n2)[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_28 $$ Query q = s.getNamedQuery("night&areaCached")[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_16 $$ n.setArea(a)[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_5 $$ Calendar c = new GregorianCalendar()[ CD ]
Line_17 $$ Session s = openSession()-->Line_22 $$ s.close()[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_23 $$ s = openSession()[ CD ]
Line_30 $$ List result = q.list()-->Line_31 $$ assertEquals(1, result.size())[ FD ]
Line_7 $$ Date now = c.getTime()-->Line_12 $$ n.setDate(now)[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_6 $$ c.set(2000, 2, 2)[ CD ]
Line_14 $$ Area a = new Area()-->Line_19 $$ s.persist(a)[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_19 $$ s.persist(a)[ CD ]
Line_28 $$ Query q = s.getNamedQuery("night&areaCached")-->Line_33 $$ q.setCacheable(true)[ FD ]
Line_5 $$ Calendar c = new GregorianCalendar()-->Line_9 $$ Date aMonthAgo = c.getTime()[ FD ]
Line_14 $$ Area a = new Area()-->Line_15 $$ a.setName("Paris")[ FD ]
Line_28 $$ Query q = s.getNamedQuery("night&areaCached")-->Line_29 $$ q.setCacheable(true)[ FD ]
Line_5 $$ Calendar c = new GregorianCalendar()-->Line_6 $$ c.set(2000, 2, 2)[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_30 $$ List result = q.list()[ CD ]
Line_24 $$ tx = s.beginTransaction()-->Line_40 $$ tx.commit()[ FD ]
Line_4 $$ Night n = new Night()-->Line_20 $$ s.persist(n)[ FD ]
Line_30 $$ List result = q.list()-->Line_36 $$ Night n2 = (Night) ((Object[]) result.get(0))[0][ FD ]
Line_23 $$ s = openSession()-->Line_39 $$ s.delete(n2)[ FD ]
Line_17 $$ Session s = openSession()-->Line_38 $$ s.delete(n2.getArea())[ FD ]
Line_4 $$ Night n = new Night()-->Line_37 $$ assertEquals(n2.getDuration(), n.getDuration())[ FD ]
Line_36 $$ Night n2 = (Night) ((Object[]) result.get(0))[0]-->Line_37 $$ assertEquals(n2.getDuration(), n.getDuration())[ FD ]
Line_18 $$ Transaction tx = s.beginTransaction()-->Line_40 $$ tx.commit()[ FD ]
Line_25 $$ Statistics stats = sessionFactory().getStatistics()-->Line_26 $$ stats.setStatisticsEnabled(true)[ FD ]
Line_17 $$ Session s = openSession()-->Line_23 $$ s = openSession()[ FD ]
Line_23 $$ s = openSession()-->Line_24 $$ tx = s.beginTransaction()[ FD ]
Line_17 $$ Session s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_17 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_37 $$ assertEquals(n2.getDuration(), n.getDuration())[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_22 $$ s.close()[ CD ]
Line_5 $$ Calendar c = new GregorianCalendar()-->Line_11 $$ Date inAMonth = c.getTime()[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_41 $$ s.close()[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_26 $$ stats.setStatisticsEnabled(true)[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_13 $$ n.setDuration(9999)[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_12 $$ n.setDate(now)[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_34 $$ q.list()[ CD ]
Line_28 $$ Query q = s.getNamedQuery("night&areaCached")-->Line_30 $$ List result = q.list()[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_24 $$ tx = s.beginTransaction()[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_36 $$ Night n2 = (Night) ((Object[]) result.get(0))[0][ CD ]
Line_17 $$ Session s = openSession()-->Line_20 $$ s.persist(n)[ FD ]
Line_5 $$ Calendar c = new GregorianCalendar()-->Line_8 $$ c.add(Calendar.MONTH, -1)[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_4 $$ Night n = new Night()[ CD ]
Line_17 $$ Session s = openSession()-->Line_28 $$ Query q = s.getNamedQuery("night&areaCached")[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_27 $$ stats.clear()[ CD ]
Line_4 $$ Night n = new Night()-->Line_13 $$ n.setDuration(9999)[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_9 $$ Date aMonthAgo = c.getTime()[ CD ]
Line_25 $$ Statistics stats = sessionFactory().getStatistics()-->Line_27 $$ stats.clear()[ FD ]
Line_23 $$ s = openSession()-->Line_28 $$ Query q = s.getNamedQuery("night&areaCached")[ FD ]
Line_17 $$ Session s = openSession()-->Line_24 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_39 $$ s.delete(n2)[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_7 $$ Date now = c.getTime()[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_25 $$ Statistics stats = sessionFactory().getStatistics()[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_14 $$ Area a = new Area()[ CD ]
Line_18 $$ Transaction tx = s.beginTransaction()-->Line_21 $$ tx.commit()[ FD ]
Line_5 $$ Calendar c = new GregorianCalendar()-->Line_7 $$ Date now = c.getTime()[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_40 $$ tx.commit()[ CD ]
Line_5 $$ Calendar c = new GregorianCalendar()-->Line_10 $$ c.add(Calendar.MONTH, 2)[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_29 $$ q.setCacheable(true)[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_31 $$ assertEquals(1, result.size())[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_32 $$ assertEquals(1, stats.getQueryCachePutCount())[ CD ]
Line_36 $$ Night n2 = (Night) ((Object[]) result.get(0))[0]-->Line_38 $$ s.delete(n2.getArea())[ FD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_18 $$ Transaction tx = s.beginTransaction()[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_20 $$ s.persist(n)[ CD ]
Line_2 $$ public void testSQLQueryWithManyToOne() -->Line_33 $$ q.setCacheable(true)[ CD ]
