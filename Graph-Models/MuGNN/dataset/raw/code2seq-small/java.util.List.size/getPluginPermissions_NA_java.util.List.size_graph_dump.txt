Line_2 $$ static Map<String, Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException -->Line_13 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(environment.modulesFile())) [ FD ]
Line_28 $$ Policy policy = readPolicy(policyFile.toUri().toURL(), codebases.toArray(new URL[codebases.size()]))-->Line_30 $$ if (map.put(url.getFile(), policy) != null) [ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException -->Line_36 $$ return Collections.unmodifiableMap(map)[ CD ]
Line_22 $$ List<URL> codebases = new ArrayList()-->Line_25 $$ codebases.add(jar.toRealPath().toUri().toURL())[ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException -->Line_5 $$ if (Files.exists(environment.pluginsFile())) [ CD ]
Line_4 $$ List<Path> pluginsAndModules = new ArrayList()-->Line_15 $$ pluginsAndModules.add(plugin)[ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException -->Line_6 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(environment.pluginsFile())) [ FD ]
Line_4 $$ List<Path> pluginsAndModules = new ArrayList()-->Line_8 $$ pluginsAndModules.add(plugin)[ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException -->Line_12 $$ if (Files.exists(environment.modulesFile())) [ FD ]
Line_7 $$ for (Path plugin : stream) -->Line_8 $$ pluginsAndModules.add(plugin)[ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException -->Line_5 $$ if (Files.exists(environment.pluginsFile())) [ FD ]
Line_21 $$ if (Files.exists(policyFile)) -->Line_22 $$ List<URL> codebases = new ArrayList()[ CD ]
Line_20 $$ Path policyFile = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY)-->Line_21 $$ if (Files.exists(policyFile)) [ FD ]
Line_20 $$ Path policyFile = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY)-->Line_28 $$ Policy policy = readPolicy(policyFile.toUri().toURL(), codebases.toArray(new URL[codebases.size()]))[ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException -->Line_4 $$ List<Path> pluginsAndModules = new ArrayList()[ CD ]
Line_7 $$ for (Path plugin : stream) -->Line_23 $$ try (DirectoryStream<Path> jarStream = Files.newDirectoryStream(plugin, "*.jar")) [ FD ]
Line_21 $$ if (Files.exists(policyFile)) -->Line_28 $$ Policy policy = readPolicy(policyFile.toUri().toURL(), codebases.toArray(new URL[codebases.size()]))[ CD ]
Line_7 $$ for (Path plugin : stream) -->Line_20 $$ Path policyFile = plugin.resolve(PluginInfo.ES_PLUGIN_POLICY)[ FD ]
Line_7 $$ for (Path plugin : stream) -->Line_15 $$ pluginsAndModules.add(plugin)[ FD ]
Line_3 $$ Map<String, Policy> map = new HashMap()-->Line_30 $$ if (map.put(url.getFile(), policy) != null) [ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException -->Line_12 $$ if (Files.exists(environment.modulesFile())) [ CD ]
Line_3 $$ Map<String, Policy> map = new HashMap()-->Line_36 $$ return Collections.unmodifiableMap(map)[ FD ]
Line_22 $$ List<URL> codebases = new ArrayList()-->Line_28 $$ Policy policy = readPolicy(policyFile.toUri().toURL(), codebases.toArray(new URL[codebases.size()]))[ FD ]
Line_24 $$ for (Path jar : jarStream) -->Line_25 $$ codebases.add(jar.toRealPath().toUri().toURL())[ FD ]
Line_29 $$ for (URL url : codebases) -->Line_30 $$ if (map.put(url.getFile(), policy) != null) [ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions(Environment environment) throws IOException, NoSuchAlgorithmException -->Line_3 $$ Map<String, Policy> map = new HashMap()[ CD ]
