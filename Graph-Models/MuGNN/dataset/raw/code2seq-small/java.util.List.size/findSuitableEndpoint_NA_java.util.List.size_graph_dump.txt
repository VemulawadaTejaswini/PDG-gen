Line_4 $$ IEndpointSnitch snitch = DatabaseDescriptor.getEndpointSnitch()-->Line_14 $$ snitch.sortByProximity(FBUtilities.getBroadcastAddress(), endpoints)[ FD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_5 $$ List<InetAddress> endpoints = StorageService.instance.getLiveNaturalEndpoints(keyspace, key)[ CD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_6 $$ if (endpoints.isEmpty())[ CD ]
Line_5 $$ List<InetAddress> endpoints = StorageService.instance.getLiveNaturalEndpoints(keyspace, key)-->Line_15 $$ return endpoints.get(0)[ FD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_7 $$ throw new UnavailableException(cl, cl.blockFor(keyspace), 0)[ FD ]
Line_13 $$ if (localEndpoints.isEmpty()) -->Line_17 $$ return localEndpoints.get(ThreadLocalRandom.current().nextInt(localEndpoints.size()))[ CD ]
Line_8 $$ List<InetAddress> localEndpoints = new ArrayList<InetAddress>()-->Line_13 $$ if (localEndpoints.isEmpty()) [ FD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_4 $$ IEndpointSnitch snitch = DatabaseDescriptor.getEndpointSnitch()[ CD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_13 $$ if (localEndpoints.isEmpty()) [ CD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_5 $$ List<InetAddress> endpoints = StorageService.instance.getLiveNaturalEndpoints(keyspace, key)[ FD ]
Line_9 $$ for (InetAddress endpoint : endpoints) -->Line_11 $$ localEndpoints.add(endpoint)[ FD ]
Line_8 $$ List<InetAddress> localEndpoints = new ArrayList<InetAddress>()-->Line_17 $$ return localEndpoints.get(ThreadLocalRandom.current().nextInt(localEndpoints.size()))[ FD ]
Line_5 $$ List<InetAddress> endpoints = StorageService.instance.getLiveNaturalEndpoints(keyspace, key)-->Line_6 $$ if (endpoints.isEmpty())[ FD ]
Line_9 $$ for (InetAddress endpoint : endpoints) -->Line_10 $$ if (snitch.getDatacenter(endpoint).equals(localDataCenter))[ FD ]
Line_8 $$ List<InetAddress> localEndpoints = new ArrayList<InetAddress>()-->Line_11 $$ localEndpoints.add(endpoint)[ FD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_8 $$ List<InetAddress> localEndpoints = new ArrayList<InetAddress>()[ CD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(keyspaceName)-->Line_7 $$ throw new UnavailableException(cl, cl.blockFor(keyspace), 0)[ FD ]
Line_10 $$ if (snitch.getDatacenter(endpoint).equals(localDataCenter))-->Line_11 $$ localEndpoints.add(endpoint)[ CD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_10 $$ if (snitch.getDatacenter(endpoint).equals(localDataCenter))[ FD ]
Line_13 $$ if (localEndpoints.isEmpty()) -->Line_15 $$ return endpoints.get(0)[ CD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_3 $$ Keyspace keyspace = Keyspace.open(keyspaceName)[ FD ]
Line_13 $$ if (localEndpoints.isEmpty()) -->Line_14 $$ snitch.sortByProximity(FBUtilities.getBroadcastAddress(), endpoints)[ CD ]
Line_5 $$ List<InetAddress> endpoints = StorageService.instance.getLiveNaturalEndpoints(keyspace, key)-->Line_14 $$ snitch.sortByProximity(FBUtilities.getBroadcastAddress(), endpoints)[ FD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(keyspaceName)-->Line_5 $$ List<InetAddress> endpoints = StorageService.instance.getLiveNaturalEndpoints(keyspace, key)[ FD ]
Line_4 $$ IEndpointSnitch snitch = DatabaseDescriptor.getEndpointSnitch()-->Line_10 $$ if (snitch.getDatacenter(endpoint).equals(localDataCenter))[ FD ]
Line_2 $$ private static InetAddress findSuitableEndpoint(String keyspaceName, DecoratedKey key, String localDataCenter, ConsistencyLevel cl) throws UnavailableException -->Line_3 $$ Keyspace keyspace = Keyspace.open(keyspaceName)[ CD ]
