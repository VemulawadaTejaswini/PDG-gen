Line_2 $$ private String getEventPath(TestDescriptor descriptor) -->Line_5 $$ while (current != null) [ CD ]
Line_2 $$ private String getEventPath(TestDescriptor descriptor) -->Line_3 $$ List<String> names = Lists.newArrayList()[ CD ]
Line_4 $$ TestDescriptor current = descriptor-->Line_5 $$ while (current != null) [ FD ]
Line_2 $$ private String getEventPath(TestDescriptor descriptor) -->Line_14 $$ List<String> displayedNames = Lists.reverse(names).subList(effectiveDisplayGranularity, names.size())[ CD ]
Line_2 $$ private String getEventPath(TestDescriptor descriptor) -->Line_15 $$ return Joiner.on(" > ").join(displayedNames) + " "[ CD ]
Line_11 $$ current = current.getParent()-->Line_9 $$ names.add(current.getName())[ FD ]
Line_3 $$ List<String> names = Lists.newArrayList()-->Line_9 $$ names.add(current.getName())[ FD ]
Line_6 $$ if (isAtomicTestWhoseParentIsNotTheTestClass(current)) -->Line_7 $$ names.add(current.getClassName() + "." + current.getName())[ CD ]
Line_3 $$ List<String> names = Lists.newArrayList()-->Line_13 $$ int effectiveDisplayGranularity = displayGranularity == -1 ? names.size() - 1 : Math.min(displayGranularity, names.size() - 1)[ FD ]
Line_3 $$ List<String> names = Lists.newArrayList()-->Line_7 $$ names.add(current.getClassName() + "." + current.getName())[ FD ]
Line_11 $$ current = current.getParent()-->Line_7 $$ names.add(current.getClassName() + "." + current.getName())[ FD ]
Line_11 $$ current = current.getParent()-->Line_6 $$ if (isAtomicTestWhoseParentIsNotTheTestClass(current)) [ FD ]
Line_5 $$ while (current != null) -->Line_6 $$ if (isAtomicTestWhoseParentIsNotTheTestClass(current)) [ CD ]
Line_14 $$ List<String> displayedNames = Lists.reverse(names).subList(effectiveDisplayGranularity, names.size())-->Line_15 $$ return Joiner.on(" > ").join(displayedNames) + " "[ FD ]
Line_11 $$ current = current.getParent()-->Line_5 $$ while (current != null) [ FD ]
Line_13 $$ int effectiveDisplayGranularity = displayGranularity == -1 ? names.size() - 1 : Math.min(displayGranularity, names.size() - 1)-->Line_14 $$ List<String> displayedNames = Lists.reverse(names).subList(effectiveDisplayGranularity, names.size())[ FD ]
Line_3 $$ List<String> names = Lists.newArrayList()-->Line_14 $$ List<String> displayedNames = Lists.reverse(names).subList(effectiveDisplayGranularity, names.size())[ FD ]
Line_4 $$ TestDescriptor current = descriptor-->Line_11 $$ current = current.getParent()[ FD ]
Line_6 $$ if (isAtomicTestWhoseParentIsNotTheTestClass(current)) -->Line_9 $$ names.add(current.getName())[ CD ]
Line_2 $$ private String getEventPath(TestDescriptor descriptor) -->Line_4 $$ TestDescriptor current = descriptor[ CD ]
Line_4 $$ TestDescriptor current = descriptor-->Line_7 $$ names.add(current.getClassName() + "." + current.getName())[ FD ]
Line_4 $$ TestDescriptor current = descriptor-->Line_6 $$ if (isAtomicTestWhoseParentIsNotTheTestClass(current)) [ FD ]
Line_4 $$ TestDescriptor current = descriptor-->Line_9 $$ names.add(current.getName())[ FD ]
Line_5 $$ while (current != null) -->Line_11 $$ current = current.getParent()[ CD ]
Line_2 $$ private String getEventPath(TestDescriptor descriptor) -->Line_13 $$ int effectiveDisplayGranularity = displayGranularity == -1 ? names.size() - 1 : Math.min(displayGranularity, names.size() - 1)[ CD ]
