Line_2 $$ public void response(MessageIn<ReadResponse> message) -->Line_5 $$ if (n >= blockfor && resolver.isDataPresent()) [ CD ]
Line_5 $$ if (n >= blockfor && resolver.isDataPresent()) -->Line_6 $$ condition.signalAll()[ CD ]
Line_7 $$ if (blockfor < endpoints.size() && n == endpoints.size()) -->Line_11 $$ StageManager.getStage(Stage.READ_REPAIR).execute(new AsyncRepairRunner(traceState))[ CD ]
Line_7 $$ if (blockfor < endpoints.size() && n == endpoints.size()) -->Line_9 $$ if (traceState != null)[ CD ]
Line_8 $$ TraceState traceState = Tracing.instance.get()-->Line_9 $$ if (traceState != null)[ FD ]
Line_2 $$ public void response(MessageIn<ReadResponse> message) -->Line_3 $$ resolver.preprocess(message)[ CD ]
Line_2 $$ public void response(MessageIn<ReadResponse> message) -->Line_3 $$ resolver.preprocess(message)[ FD ]
Line_7 $$ if (blockfor < endpoints.size() && n == endpoints.size()) -->Line_8 $$ TraceState traceState = Tracing.instance.get()[ CD ]
Line_5 $$ if (n >= blockfor && resolver.isDataPresent()) -->Line_7 $$ if (blockfor < endpoints.size() && n == endpoints.size()) [ CD ]
Line_8 $$ TraceState traceState = Tracing.instance.get()-->Line_10 $$ traceState.trace("Initiating read-repair")[ FD ]
Line_2 $$ public void response(MessageIn<ReadResponse> message) -->Line_4 $$ int n = waitingFor(message.from) ? recievedUpdater.incrementAndGet(this) : received[ CD ]
Line_9 $$ if (traceState != null)-->Line_10 $$ traceState.trace("Initiating read-repair")[ CD ]
