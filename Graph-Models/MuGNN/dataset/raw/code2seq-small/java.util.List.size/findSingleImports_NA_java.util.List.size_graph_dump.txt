Line_41 $$ if (isStatic) -->Line_64 $$ if (aClass != null) [ CD ]
Line_18 $$ String prefix = getPackageOrClassName(name)-->Line_21 $$ final boolean isImplicitlyImported = implicitlyImportedPackages.contains(prefix)[ FD ]
Line_21 $$ final boolean isImplicitlyImported = implicitlyImportedPackages.contains(prefix)-->Line_30 $$ if (!isImplicitlyImported) [ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_10 $$ List<String> onDemandImportsList = new ArrayList<String>(onDemandImports)[ CD ]
Line_44 $$ if (aClass != null) -->Line_46 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_7 $$ final PsiManager manager = file.getManager()-->Line_26 $$ if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass, resolveScope) != null) [ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_5 $$ final String thisPackageName = file.getPackageName()[ FD ]
Line_32 $$ if (facade.findClass(langPackageClass, resolveScope) != null) -->Line_33 $$ namesToUseSingle.add(name)[ CD ]
Line_16 $$ String name = pair.getFirst()-->Line_56 $$ namesToUseSingle.add(name)[ FD ]
Line_4 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_51 $$ namesToUseSingle.add(name)[ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_3 $$ final GlobalSearchScope resolveScope = file.getResolveScope()[ FD ]
Line_37 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_38 $$ String onDemandName = onDemandImportsList.get(i)[ CD ]
Line_43 $$ PsiClass aClass = (PsiClass) element-->Line_49 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)[ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_22 $$ if (!onDemandImports.contains(prefix) && !isImplicitlyImported)[ FD ]
Line_9 $$ List<PsiElement> onDemandElements = new ArrayList<PsiElement>(onDemandImports.size())-->Line_13 $$ onDemandElements.add(aClass)[ FD ]
Line_16 $$ String name = pair.getFirst()-->Line_47 $$ namesToUseSingle.add(name)[ FD ]
Line_16 $$ String name = pair.getFirst()-->Line_65 $$ namesToUseSingle.add(name)[ FD ]
Line_30 $$ if (!isImplicitlyImported) -->Line_31 $$ String langPackageClass = JAVA_LANG_PACKAGE + "." + shortName[ CD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_4 $$ Set<String> namesToUseSingle = new THashSet<String>()[ CD ]
Line_43 $$ PsiClass aClass = (PsiClass) element-->Line_45 $$ PsiField field = aClass.findFieldByName(shortName, true)[ FD ]
Line_12 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_45 $$ PsiField field = aClass.findFieldByName(shortName, true)[ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_6 $$ final Set<String> implicitlyImportedPackages = new THashSet<String>(Arrays.asList(file.getImplicitlyImportedPackages()))[ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_3 $$ final GlobalSearchScope resolveScope = file.getResolveScope()[ CD ]
Line_9 $$ List<PsiElement> onDemandElements = new ArrayList<PsiElement>(onDemandImports.size())-->Line_42 $$ PsiElement element = onDemandElements.get(i)[ FD ]
Line_37 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_38 $$ String onDemandName = onDemandImportsList.get(i)[ FD ]
Line_21 $$ final boolean isImplicitlyImported = implicitlyImportedPackages.contains(prefix)-->Line_22 $$ if (!onDemandImports.contains(prefix) && !isImplicitlyImported)[ FD ]
Line_44 $$ if (aClass != null) -->Line_45 $$ PsiField field = aClass.findFieldByName(shortName, true)[ CD ]
Line_3 $$ final GlobalSearchScope resolveScope = file.getResolveScope()-->Line_12 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)[ FD ]
Line_8 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(manager.getProject())-->Line_63 $$ PsiClass aClass = facade.findClass(onDemandName + "." + shortName, resolveScope)[ FD ]
Line_46 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) -->Line_47 $$ namesToUseSingle.add(name)[ CD ]
Line_24 $$ String shortName = PsiNameHelper.getShortClassName(name)-->Line_53 $$ PsiMethod[] methods = aClass.findMethodsByName(shortName, true)[ FD ]
Line_50 $$ if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) -->Line_51 $$ namesToUseSingle.add(name)[ CD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_7 $$ final PsiManager manager = file.getManager()[ CD ]
Line_15 $$ for (Pair<String, Boolean> pair : names) -->Line_16 $$ String name = pair.getFirst()[ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_5 $$ final String thisPackageName = file.getPackageName()[ CD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_8 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(manager.getProject())[ CD ]
Line_4 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_47 $$ namesToUseSingle.add(name)[ FD ]
Line_41 $$ if (isStatic) -->Line_44 $$ if (aClass != null) [ CD ]
Line_8 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(manager.getProject())-->Line_32 $$ if (facade.findClass(langPackageClass, resolveScope) != null) [ FD ]
Line_50 $$ if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) -->Line_53 $$ PsiMethod[] methods = aClass.findMethodsByName(shortName, true)[ CD ]
Line_24 $$ String shortName = PsiNameHelper.getShortClassName(name)-->Line_45 $$ PsiField field = aClass.findFieldByName(shortName, true)[ FD ]
Line_18 $$ String prefix = getPackageOrClassName(name)-->Line_22 $$ if (!onDemandImports.contains(prefix) && !isImplicitlyImported)[ FD ]
Line_18 $$ String prefix = getPackageOrClassName(name)-->Line_19 $$ if (prefix.isEmpty())[ FD ]
Line_18 $$ String prefix = getPackageOrClassName(name)-->Line_39 $$ if (prefix.equals(onDemandName))[ FD ]
Line_46 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) -->Line_49 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)[ CD ]
Line_12 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_64 $$ if (aClass != null) [ FD ]
Line_7 $$ final PsiManager manager = file.getManager()-->Line_8 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(manager.getProject())[ FD ]
Line_26 $$ if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass, resolveScope) != null) -->Line_27 $$ namesToUseSingle.add(name)[ CD ]
Line_16 $$ String name = pair.getFirst()-->Line_24 $$ String shortName = PsiNameHelper.getShortClassName(name)[ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_7 $$ final PsiManager manager = file.getManager()[ FD ]
Line_10 $$ List<String> onDemandImportsList = new ArrayList<String>(onDemandImports)-->Line_38 $$ String onDemandName = onDemandImportsList.get(i)[ FD ]
Line_37 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_42 $$ PsiElement element = onDemandElements.get(i)[ FD ]
Line_64 $$ if (aClass != null) -->Line_65 $$ namesToUseSingle.add(name)[ CD ]
Line_12 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_13 $$ onDemandElements.add(aClass)[ FD ]
Line_12 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_49 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)[ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_70 $$ return namesToUseSingle[ CD ]
Line_41 $$ if (isStatic) -->Line_42 $$ PsiElement element = onDemandElements.get(i)[ CD ]
Line_25 $$ String thisPackageClass = !thisPackageName.isEmpty() ? thisPackageName + "." + shortName : shortName-->Line_26 $$ if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass, resolveScope) != null) [ FD ]
Line_4 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_56 $$ namesToUseSingle.add(name)[ FD ]
Line_43 $$ PsiClass aClass = (PsiClass) element-->Line_53 $$ PsiMethod[] methods = aClass.findMethodsByName(shortName, true)[ FD ]
Line_8 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(manager.getProject())-->Line_12 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)[ FD ]
Line_16 $$ String name = pair.getFirst()-->Line_33 $$ namesToUseSingle.add(name)[ FD ]
Line_12 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_44 $$ if (aClass != null) [ FD ]
Line_45 $$ PsiField field = aClass.findFieldByName(shortName, true)-->Line_46 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_43 $$ PsiClass aClass = (PsiClass) element-->Line_44 $$ if (aClass != null) [ FD ]
Line_55 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_56 $$ namesToUseSingle.add(name)[ CD ]
Line_41 $$ if (isStatic) -->Line_63 $$ PsiClass aClass = facade.findClass(onDemandName + "." + shortName, resolveScope)[ CD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_9 $$ List<PsiElement> onDemandElements = new ArrayList<PsiElement>(onDemandImports.size())[ FD ]
Line_15 $$ for (Pair<String, Boolean> pair : names) -->Line_17 $$ Boolean isStatic = pair.getSecond()[ FD ]
Line_6 $$ final Set<String> implicitlyImportedPackages = new THashSet<String>(Arrays.asList(file.getImplicitlyImportedPackages()))-->Line_21 $$ final boolean isImplicitlyImported = implicitlyImportedPackages.contains(prefix)[ FD ]
Line_3 $$ final GlobalSearchScope resolveScope = file.getResolveScope()-->Line_63 $$ PsiClass aClass = facade.findClass(onDemandName + "." + shortName, resolveScope)[ FD ]
Line_11 $$ for (String onDemandName : onDemandImportsList) -->Line_12 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)[ FD ]
Line_4 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_65 $$ namesToUseSingle.add(name)[ FD ]
Line_12 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_53 $$ PsiMethod[] methods = aClass.findMethodsByName(shortName, true)[ FD ]
Line_16 $$ String name = pair.getFirst()-->Line_18 $$ String prefix = getPackageOrClassName(name)[ FD ]
Line_4 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_27 $$ namesToUseSingle.add(name)[ FD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_6 $$ final Set<String> implicitlyImportedPackages = new THashSet<String>(Arrays.asList(file.getImplicitlyImportedPackages()))[ CD ]
Line_4 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_33 $$ namesToUseSingle.add(name)[ FD ]
Line_37 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_41 $$ if (isStatic) [ CD ]
Line_2 $$ private static Set<String> findSingleImports(@NotNull final PsiJavaFile file, @NotNull List<Pair<String, Boolean>> names, @NotNull final Set<String> onDemandImports) -->Line_9 $$ List<PsiElement> onDemandElements = new ArrayList<PsiElement>(onDemandImports.size())[ CD ]
Line_24 $$ String shortName = PsiNameHelper.getShortClassName(name)-->Line_49 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)[ FD ]
Line_49 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)-->Line_50 $$ if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_38 $$ String onDemandName = onDemandImportsList.get(i)-->Line_39 $$ if (prefix.equals(onDemandName))[ FD ]
Line_43 $$ PsiClass aClass = (PsiClass) element-->Line_64 $$ if (aClass != null) [ FD ]
Line_46 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) -->Line_50 $$ if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_11 $$ for (String onDemandName : onDemandImportsList) -->Line_39 $$ if (prefix.equals(onDemandName))[ FD ]
Line_31 $$ String langPackageClass = JAVA_LANG_PACKAGE + "." + shortName-->Line_32 $$ if (facade.findClass(langPackageClass, resolveScope) != null) [ FD ]
Line_10 $$ List<String> onDemandImportsList = new ArrayList<String>(onDemandImports)-->Line_37 $$ for (int i = 0; i < onDemandImportsList.size(); i++) [ FD ]
Line_5 $$ final String thisPackageName = file.getPackageName()-->Line_25 $$ String thisPackageClass = !thisPackageName.isEmpty() ? thisPackageName + "." + shortName : shortName[ FD ]
Line_3 $$ final GlobalSearchScope resolveScope = file.getResolveScope()-->Line_26 $$ if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass, resolveScope) != null) [ FD ]
Line_37 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_39 $$ if (prefix.equals(onDemandName))[ CD ]
Line_16 $$ String name = pair.getFirst()-->Line_51 $$ namesToUseSingle.add(name)[ FD ]
Line_16 $$ String name = pair.getFirst()-->Line_27 $$ namesToUseSingle.add(name)[ FD ]
Line_41 $$ if (isStatic) -->Line_43 $$ PsiClass aClass = (PsiClass) element[ CD ]
Line_30 $$ if (!isImplicitlyImported) -->Line_32 $$ if (facade.findClass(langPackageClass, resolveScope) != null) [ CD ]
Line_54 $$ for (PsiMethod method : methods) -->Line_55 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_3 $$ final GlobalSearchScope resolveScope = file.getResolveScope()-->Line_32 $$ if (facade.findClass(langPackageClass, resolveScope) != null) [ FD ]
