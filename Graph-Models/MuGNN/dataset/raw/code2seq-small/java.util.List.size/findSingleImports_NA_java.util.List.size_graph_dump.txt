Line_39 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_43 $$ if (isStatic) [ CD ]
Line_8 $$ final PsiManager manager = file.getManager()-->Line_27 $$ if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass, resolveScope) != null) [ FD ]
Line_4 $$ final GlobalSearchScope resolveScope = file.getResolveScope()-->Line_13 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)[ FD ]
Line_12 $$ for (String onDemandName : onDemandImportsList) -->Line_41 $$ if (prefix.equals(onDemandName))[ FD ]
Line_7 $$ final Set<String> implicitlyImportedPackages = new THashSet<String>(Arrays.asList(file.getImplicitlyImportedPackages()))-->Line_22 $$ final boolean isImplicitlyImported = implicitlyImportedPackages.contains(prefix)[ FD ]
Line_48 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) -->Line_52 $$ if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_43 $$ if (isStatic) -->Line_66 $$ if (aClass != null) [ CD ]
Line_19 $$ String prefix = getPackageOrClassName(name)-->Line_20 $$ if (prefix.isEmpty())[ FD ]
Line_66 $$ if (aClass != null) -->Line_67 $$ namesToUseSingle.add(name)[ CD ]
Line_25 $$ String shortName = PsiNameHelper.getShortClassName(name)-->Line_55 $$ PsiMethod[] methods = aClass.findMethodsByName(shortName, true)[ FD ]
Line_45 $$ PsiClass aClass = (PsiClass) element-->Line_66 $$ if (aClass != null) [ FD ]
Line_45 $$ PsiClass aClass = (PsiClass) element-->Line_46 $$ if (aClass != null) [ FD ]
Line_17 $$ String name = pair.getFirst()-->Line_49 $$ namesToUseSingle.add(name)[ FD ]
Line_39 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_41 $$ if (prefix.equals(onDemandName))[ CD ]
Line_11 $$ List<String> onDemandImportsList = new ArrayList<String>(onDemandImports)-->Line_40 $$ String onDemandName = onDemandImportsList.get(i)[ FD ]
Line_17 $$ String name = pair.getFirst()-->Line_67 $$ namesToUseSingle.add(name)[ FD ]
Line_19 $$ String prefix = getPackageOrClassName(name)-->Line_41 $$ if (prefix.equals(onDemandName))[ FD ]
Line_13 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_55 $$ PsiMethod[] methods = aClass.findMethodsByName(shortName, true)[ FD ]
Line_43 $$ if (isStatic) -->Line_44 $$ PsiElement element = onDemandElements.get(i)[ CD ]
Line_4 $$ final GlobalSearchScope resolveScope = file.getResolveScope()-->Line_27 $$ if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass, resolveScope) != null) [ FD ]
Line_51 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)-->Line_52 $$ if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_45 $$ PsiClass aClass = (PsiClass) element-->Line_47 $$ PsiField field = aClass.findFieldByName(shortName, true)[ FD ]
Line_34 $$ if (facade.findClass(langPackageClass, resolveScope) != null) -->Line_35 $$ namesToUseSingle.add(name)[ CD ]
Line_5 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_49 $$ namesToUseSingle.add(name)[ FD ]
Line_43 $$ if (isStatic) -->Line_45 $$ PsiClass aClass = (PsiClass) element[ CD ]
Line_47 $$ PsiField field = aClass.findFieldByName(shortName, true)-->Line_48 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_26 $$ String thisPackageClass = !thisPackageName.isEmpty() ? thisPackageName + "." + shortName : shortName-->Line_27 $$ if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass, resolveScope) != null) [ FD ]
Line_52 $$ if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) -->Line_55 $$ PsiMethod[] methods = aClass.findMethodsByName(shortName, true)[ CD ]
Line_45 $$ PsiClass aClass = (PsiClass) element-->Line_51 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)[ FD ]
Line_40 $$ String onDemandName = onDemandImportsList.get(i)-->Line_41 $$ if (prefix.equals(onDemandName))[ FD ]
Line_27 $$ if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass, resolveScope) != null) -->Line_28 $$ namesToUseSingle.add(name)[ CD ]
Line_48 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) -->Line_51 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)[ CD ]
Line_4 $$ final GlobalSearchScope resolveScope = file.getResolveScope()-->Line_65 $$ PsiClass aClass = facade.findClass(onDemandName + "." + shortName, resolveScope)[ FD ]
Line_5 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_67 $$ namesToUseSingle.add(name)[ FD ]
Line_9 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(manager.getProject())-->Line_34 $$ if (facade.findClass(langPackageClass, resolveScope) != null) [ FD ]
Line_9 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(manager.getProject())-->Line_13 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)[ FD ]
Line_25 $$ String shortName = PsiNameHelper.getShortClassName(name)-->Line_47 $$ PsiField field = aClass.findFieldByName(shortName, true)[ FD ]
Line_17 $$ String name = pair.getFirst()-->Line_28 $$ namesToUseSingle.add(name)[ FD ]
Line_57 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) -->Line_58 $$ namesToUseSingle.add(name)[ CD ]
Line_19 $$ String prefix = getPackageOrClassName(name)-->Line_23 $$ if (!onDemandImports.contains(prefix) && !isImplicitlyImported)[ FD ]
Line_13 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_51 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)[ FD ]
Line_10 $$ List<PsiElement> onDemandElements = new ArrayList<PsiElement>(onDemandImports.size())-->Line_44 $$ PsiElement element = onDemandElements.get(i)[ FD ]
Line_8 $$ final PsiManager manager = file.getManager()-->Line_9 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(manager.getProject())[ FD ]
Line_52 $$ if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) -->Line_53 $$ namesToUseSingle.add(name)[ CD ]
Line_13 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_14 $$ onDemandElements.add(aClass)[ FD ]
Line_16 $$ for (Pair<String, Boolean> pair : names) -->Line_18 $$ Boolean isStatic = pair.getSecond()[ FD ]
Line_5 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_28 $$ namesToUseSingle.add(name)[ FD ]
Line_17 $$ String name = pair.getFirst()-->Line_25 $$ String shortName = PsiNameHelper.getShortClassName(name)[ FD ]
Line_11 $$ List<String> onDemandImportsList = new ArrayList<String>(onDemandImports)-->Line_39 $$ for (int i = 0; i < onDemandImportsList.size(); i++) [ FD ]
Line_17 $$ String name = pair.getFirst()-->Line_53 $$ namesToUseSingle.add(name)[ FD ]
Line_22 $$ final boolean isImplicitlyImported = implicitlyImportedPackages.contains(prefix)-->Line_23 $$ if (!onDemandImports.contains(prefix) && !isImplicitlyImported)[ FD ]
Line_16 $$ for (Pair<String, Boolean> pair : names) -->Line_17 $$ String name = pair.getFirst()[ FD ]
Line_31 $$ if (!isImplicitlyImported) -->Line_34 $$ if (facade.findClass(langPackageClass, resolveScope) != null) [ CD ]
Line_39 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_40 $$ String onDemandName = onDemandImportsList.get(i)[ CD ]
Line_13 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_66 $$ if (aClass != null) [ FD ]
Line_10 $$ List<PsiElement> onDemandElements = new ArrayList<PsiElement>(onDemandImports.size())-->Line_14 $$ onDemandElements.add(aClass)[ FD ]
Line_5 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_58 $$ namesToUseSingle.add(name)[ FD ]
Line_39 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_40 $$ String onDemandName = onDemandImportsList.get(i)[ FD ]
Line_4 $$ final GlobalSearchScope resolveScope = file.getResolveScope()-->Line_34 $$ if (facade.findClass(langPackageClass, resolveScope) != null) [ FD ]
Line_5 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_35 $$ namesToUseSingle.add(name)[ FD ]
Line_5 $$ Set<String> namesToUseSingle = new THashSet<String>()-->Line_53 $$ namesToUseSingle.add(name)[ FD ]
Line_19 $$ String prefix = getPackageOrClassName(name)-->Line_22 $$ final boolean isImplicitlyImported = implicitlyImportedPackages.contains(prefix)[ FD ]
Line_12 $$ for (String onDemandName : onDemandImportsList) -->Line_13 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)[ FD ]
Line_13 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_46 $$ if (aClass != null) [ FD ]
Line_43 $$ if (isStatic) -->Line_65 $$ PsiClass aClass = facade.findClass(onDemandName + "." + shortName, resolveScope)[ CD ]
Line_17 $$ String name = pair.getFirst()-->Line_19 $$ String prefix = getPackageOrClassName(name)[ FD ]
Line_48 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) -->Line_49 $$ namesToUseSingle.add(name)[ CD ]
Line_39 $$ for (int i = 0; i < onDemandImportsList.size(); i++) -->Line_44 $$ PsiElement element = onDemandElements.get(i)[ FD ]
Line_17 $$ String name = pair.getFirst()-->Line_35 $$ namesToUseSingle.add(name)[ FD ]
Line_9 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(manager.getProject())-->Line_65 $$ PsiClass aClass = facade.findClass(onDemandName + "." + shortName, resolveScope)[ FD ]
Line_45 $$ PsiClass aClass = (PsiClass) element-->Line_55 $$ PsiMethod[] methods = aClass.findMethodsByName(shortName, true)[ FD ]
Line_56 $$ for (PsiMethod method : methods) -->Line_57 $$ if (method.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_46 $$ if (aClass != null) -->Line_47 $$ PsiField field = aClass.findFieldByName(shortName, true)[ CD ]
Line_43 $$ if (isStatic) -->Line_46 $$ if (aClass != null) [ CD ]
Line_22 $$ final boolean isImplicitlyImported = implicitlyImportedPackages.contains(prefix)-->Line_31 $$ if (!isImplicitlyImported) [ FD ]
Line_17 $$ String name = pair.getFirst()-->Line_58 $$ namesToUseSingle.add(name)[ FD ]
Line_6 $$ final String thisPackageName = file.getPackageName()-->Line_26 $$ String thisPackageClass = !thisPackageName.isEmpty() ? thisPackageName + "." + shortName : shortName[ FD ]
Line_46 $$ if (aClass != null) -->Line_48 $$ if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_13 $$ PsiElement aClass = facade.findClass(onDemandName, resolveScope)-->Line_47 $$ PsiField field = aClass.findFieldByName(shortName, true)[ FD ]
Line_25 $$ String shortName = PsiNameHelper.getShortClassName(name)-->Line_51 $$ PsiClass inner = aClass.findInnerClassByName(shortName, true)[ FD ]
