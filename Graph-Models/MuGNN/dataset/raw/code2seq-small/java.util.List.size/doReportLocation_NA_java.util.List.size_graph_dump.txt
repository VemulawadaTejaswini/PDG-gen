Line_3 $$ List<StackTraceElement> stack = usage.getStack()-->Line_13 $$ while (caller < stack.size() && stack.get(caller).getClassName().equals(directCaller.getClassName())) [ FD ]
Line_8 $$ if (scripts.containsKey(directCaller.getFileName())) -->Line_10 $$ return[ CD ]
Line_20 $$ if (scripts.containsKey(indirectCaller.getFileName())) -->Line_21 $$ reportStackTraceElement(indirectCaller, target)[ CD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_7 $$ StackTraceElement directCaller = stack.get(0)[ CD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_3 $$ List<StackTraceElement> stack = usage.getStack()[ CD ]
Line_16 $$ if (caller == stack.size()) -->Line_17 $$ return[ CD ]
Line_12 $$ int caller = 1-->Line_19 $$ StackTraceElement indirectCaller = stack.get(caller)[ FD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_12 $$ int caller = 1[ CD ]
Line_3 $$ List<StackTraceElement> stack = usage.getStack()-->Line_19 $$ StackTraceElement indirectCaller = stack.get(caller)[ FD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_13 $$ while (caller < stack.size() && stack.get(caller).getClassName().equals(directCaller.getClassName())) [ CD ]
Line_19 $$ StackTraceElement indirectCaller = stack.get(caller)-->Line_20 $$ if (scripts.containsKey(indirectCaller.getFileName())) [ FD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_9 $$ reportStackTraceElement(directCaller, target)[ FD ]
Line_7 $$ StackTraceElement directCaller = stack.get(0)-->Line_13 $$ while (caller < stack.size() && stack.get(caller).getClassName().equals(directCaller.getClassName())) [ FD ]
Line_12 $$ int caller = 1-->Line_13 $$ while (caller < stack.size() && stack.get(caller).getClassName().equals(directCaller.getClassName())) [ FD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_19 $$ StackTraceElement indirectCaller = stack.get(caller)[ CD ]
Line_7 $$ StackTraceElement directCaller = stack.get(0)-->Line_9 $$ reportStackTraceElement(directCaller, target)[ FD ]
Line_3 $$ List<StackTraceElement> stack = usage.getStack()-->Line_16 $$ if (caller == stack.size()) [ FD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_20 $$ if (scripts.containsKey(indirectCaller.getFileName())) [ CD ]
Line_12 $$ int caller = 1-->Line_16 $$ if (caller == stack.size()) [ FD ]
Line_3 $$ List<StackTraceElement> stack = usage.getStack()-->Line_4 $$ if (stack.isEmpty()) [ FD ]
Line_13 $$ while (caller < stack.size() && stack.get(caller).getClassName().equals(directCaller.getClassName())) -->Line_14 $$ caller++[ CD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_21 $$ reportStackTraceElement(indirectCaller, target)[ FD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_16 $$ if (caller == stack.size()) [ CD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_4 $$ if (stack.isEmpty()) [ CD ]
Line_4 $$ if (stack.isEmpty()) -->Line_5 $$ return[ CD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_3 $$ List<StackTraceElement> stack = usage.getStack()[ FD ]
Line_2 $$ private void doReportLocation(DeprecatedFeatureUsage usage, StringBuilder target) -->Line_8 $$ if (scripts.containsKey(directCaller.getFileName())) [ CD ]
Line_12 $$ int caller = 1-->Line_14 $$ caller++[ FD ]
Line_3 $$ List<StackTraceElement> stack = usage.getStack()-->Line_7 $$ StackTraceElement directCaller = stack.get(0)[ FD ]
Line_8 $$ if (scripts.containsKey(directCaller.getFileName())) -->Line_9 $$ reportStackTraceElement(directCaller, target)[ CD ]
Line_7 $$ StackTraceElement directCaller = stack.get(0)-->Line_8 $$ if (scripts.containsKey(directCaller.getFileName())) [ FD ]
Line_19 $$ StackTraceElement indirectCaller = stack.get(caller)-->Line_21 $$ reportStackTraceElement(indirectCaller, target)[ FD ]
