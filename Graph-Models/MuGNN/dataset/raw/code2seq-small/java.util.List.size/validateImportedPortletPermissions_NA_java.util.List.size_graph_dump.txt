Line_2 $$ protected void validateImportedPortletPermissions(Group importGroup, Role role, String importResourcePrimKey) throws Exception -->Line_5 $$ List<String> currentIndividualActions = new ArrayList()[ CD ]
Line_5 $$ List<String> currentIndividualActions = new ArrayList()-->Line_6 $$ ResourcePermissionUtil.populateResourcePermissionActionIds(importGroup.getGroupId(), role, resource, actions, currentIndividualActions, new ArrayList<String>(), new ArrayList<String>(), new ArrayList<String>())[ FD ]
Line_5 $$ List<String> currentIndividualActions = new ArrayList()-->Line_7 $$ Assert.assertEquals(_ACTION_IDS.length, currentIndividualActions.size())[ FD ]
Line_12 $$ foundActionId = true-->Line_16 $$ Assert.assertTrue("Unable to import permissions", foundActionId)[ FD ]
Line_2 $$ protected void validateImportedPortletPermissions(Group importGroup, Role role, String importResourcePrimKey) throws Exception -->Line_3 $$ List<String> actions = ResourceActionsUtil.getResourceActions(_PORTLET_ID, null)[ CD ]
Line_2 $$ protected void validateImportedPortletPermissions(Group importGroup, Role role, String importResourcePrimKey) throws Exception -->Line_6 $$ ResourcePermissionUtil.populateResourcePermissionActionIds(importGroup.getGroupId(), role, resource, actions, currentIndividualActions, new ArrayList<String>(), new ArrayList<String>(), new ArrayList<String>())[ CD ]
Line_2 $$ protected void validateImportedPortletPermissions(Group importGroup, Role role, String importResourcePrimKey) throws Exception -->Line_6 $$ ResourcePermissionUtil.populateResourcePermissionActionIds(importGroup.getGroupId(), role, resource, actions, currentIndividualActions, new ArrayList<String>(), new ArrayList<String>(), new ArrayList<String>())[ FD ]
Line_9 $$ boolean foundActionId = false-->Line_12 $$ foundActionId = true[ FD ]
Line_11 $$ if (action.equals(actionId)) -->Line_12 $$ foundActionId = true[ CD ]
Line_8 $$ for (String action : currentIndividualActions) -->Line_11 $$ if (action.equals(actionId)) [ FD ]
Line_2 $$ protected void validateImportedPortletPermissions(Group importGroup, Role role, String importResourcePrimKey) throws Exception -->Line_4 $$ Resource resource = ResourceLocalServiceUtil.getResource(TestPropsValues.getCompanyId(), _PORTLET_ID, ResourceConstants.SCOPE_INDIVIDUAL, importResourcePrimKey)[ FD ]
Line_3 $$ List<String> actions = ResourceActionsUtil.getResourceActions(_PORTLET_ID, null)-->Line_6 $$ ResourcePermissionUtil.populateResourcePermissionActionIds(importGroup.getGroupId(), role, resource, actions, currentIndividualActions, new ArrayList<String>(), new ArrayList<String>(), new ArrayList<String>())[ FD ]
Line_9 $$ boolean foundActionId = false-->Line_16 $$ Assert.assertTrue("Unable to import permissions", foundActionId)[ FD ]
Line_10 $$ for (String actionId : _ACTION_IDS) -->Line_11 $$ if (action.equals(actionId)) [ FD ]
Line_2 $$ protected void validateImportedPortletPermissions(Group importGroup, Role role, String importResourcePrimKey) throws Exception -->Line_4 $$ Resource resource = ResourceLocalServiceUtil.getResource(TestPropsValues.getCompanyId(), _PORTLET_ID, ResourceConstants.SCOPE_INDIVIDUAL, importResourcePrimKey)[ CD ]
Line_2 $$ protected void validateImportedPortletPermissions(Group importGroup, Role role, String importResourcePrimKey) throws Exception -->Line_7 $$ Assert.assertEquals(_ACTION_IDS.length, currentIndividualActions.size())[ CD ]
Line_4 $$ Resource resource = ResourceLocalServiceUtil.getResource(TestPropsValues.getCompanyId(), _PORTLET_ID, ResourceConstants.SCOPE_INDIVIDUAL, importResourcePrimKey)-->Line_6 $$ ResourcePermissionUtil.populateResourcePermissionActionIds(importGroup.getGroupId(), role, resource, actions, currentIndividualActions, new ArrayList<String>(), new ArrayList<String>(), new ArrayList<String>())[ FD ]
