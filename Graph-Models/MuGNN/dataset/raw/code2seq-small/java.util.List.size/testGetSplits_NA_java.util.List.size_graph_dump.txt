Line_2 $$ public void testGetSplits() throws Exception -->Line_3 $$ DistCpOptions options = getOptions()[ CD ]
Line_13 $$ RecordReader<Text, CopyListingFileStatus> recordReader = inputFormat.createRecordReader(split, null)-->Line_18 $$ while (recordReader.nextKeyValue()) [ FD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_23 $$ final float progress = recordReader.getProgress()[ CD ]
Line_10 $$ int nFiles = 0-->Line_28 $$ ++nFiles[ FD ]
Line_2 $$ public void testGetSplits() throws Exception -->Line_7 $$ JobContext jobContext = new JobContextImpl(configuration, new JobID())[ CD ]
Line_13 $$ RecordReader<Text, CopyListingFileStatus> recordReader = inputFormat.createRecordReader(split, null)-->Line_30 $$ Assert.assertTrue(recordReader.getProgress() == 1.0f)[ FD ]
Line_13 $$ RecordReader<Text, CopyListingFileStatus> recordReader = inputFormat.createRecordReader(split, null)-->Line_23 $$ final float progress = recordReader.getProgress()[ FD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_21 $$ System.out.println(source)[ CD ]
Line_20 $$ String source = fileStatus.getPath().toString()-->Line_21 $$ System.out.println(source)[ FD ]
Line_2 $$ public void testGetSplits() throws Exception -->Line_9 $$ List<InputSplit> splits = inputFormat.getSplits(jobContext)[ CD ]
Line_3 $$ DistCpOptions options = getOptions()-->Line_5 $$ configuration.set("mapred.map.tasks", String.valueOf(options.getMaxMaps()))[ FD ]
Line_11 $$ int taskId = 0-->Line_31 $$ ++taskId[ FD ]
Line_2 $$ public void testGetSplits() throws Exception -->Line_6 $$ CopyListing.getCopyListing(configuration, CREDENTIALS, options).buildListing(new Path(cluster.getFileSystem().getUri().toString() + "/tmp/testDynInputFormat/fileList.seq"), options)[ CD ]
Line_2 $$ public void testGetSplits() throws Exception -->Line_11 $$ int taskId = 0[ CD ]
Line_9 $$ List<InputSplit> splits = inputFormat.getSplits(jobContext)-->Line_16 $$ recordReader.initialize(splits.get(0), taskAttemptContext)[ FD ]
Line_12 $$ for (InputSplit split : splits) -->Line_13 $$ RecordReader<Text, CopyListingFileStatus> recordReader = inputFormat.createRecordReader(split, null)[ FD ]
Line_7 $$ JobContext jobContext = new JobContextImpl(configuration, new JobID())-->Line_9 $$ List<InputSplit> splits = inputFormat.getSplits(jobContext)[ FD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_28 $$ ++nFiles[ CD ]
Line_14 $$ StubContext stubContext = new StubContext(jobContext.getConfiguration(), recordReader, taskId)-->Line_15 $$ final TaskAttemptContext taskAttemptContext = stubContext.getContext()[ FD ]
Line_2 $$ public void testGetSplits() throws Exception -->Line_10 $$ int nFiles = 0[ CD ]
Line_13 $$ RecordReader<Text, CopyListingFileStatus> recordReader = inputFormat.createRecordReader(split, null)-->Line_19 $$ CopyListingFileStatus fileStatus = recordReader.getCurrentValue()[ FD ]
Line_19 $$ CopyListingFileStatus fileStatus = recordReader.getCurrentValue()-->Line_20 $$ String source = fileStatus.getPath().toString()[ FD ]
Line_8 $$ DynamicInputFormat<Text, CopyListingFileStatus> inputFormat = new DynamicInputFormat<Text, CopyListingFileStatus>()-->Line_9 $$ List<InputSplit> splits = inputFormat.getSplits(jobContext)[ FD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_27 $$ previousProgressValue = progress[ CD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_24 $$ Assert.assertTrue(progress >= previousProgressValue)[ CD ]
Line_20 $$ String source = fileStatus.getPath().toString()-->Line_22 $$ Assert.assertTrue(expectedFilePaths.contains(source))[ FD ]
Line_2 $$ public void testGetSplits() throws Exception -->Line_33 $$ Assert.assertEquals(expectedFilePaths.size(), nFiles)[ CD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_22 $$ Assert.assertTrue(expectedFilePaths.contains(source))[ CD ]
Line_2 $$ public void testGetSplits() throws Exception -->Line_8 $$ DynamicInputFormat<Text, CopyListingFileStatus> inputFormat = new DynamicInputFormat<Text, CopyListingFileStatus>()[ CD ]
Line_2 $$ public void testGetSplits() throws Exception -->Line_5 $$ configuration.set("mapred.map.tasks", String.valueOf(options.getMaxMaps()))[ CD ]
Line_15 $$ final TaskAttemptContext taskAttemptContext = stubContext.getContext()-->Line_16 $$ recordReader.initialize(splits.get(0), taskAttemptContext)[ FD ]
Line_23 $$ final float progress = recordReader.getProgress()-->Line_27 $$ previousProgressValue = progress[ FD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_25 $$ Assert.assertTrue(progress >= 0.0f)[ CD ]
Line_10 $$ int nFiles = 0-->Line_33 $$ Assert.assertEquals(expectedFilePaths.size(), nFiles)[ FD ]
Line_8 $$ DynamicInputFormat<Text, CopyListingFileStatus> inputFormat = new DynamicInputFormat<Text, CopyListingFileStatus>()-->Line_13 $$ RecordReader<Text, CopyListingFileStatus> recordReader = inputFormat.createRecordReader(split, null)[ FD ]
Line_4 $$ Configuration configuration = new Configuration()-->Line_5 $$ configuration.set("mapred.map.tasks", String.valueOf(options.getMaxMaps()))[ FD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_20 $$ String source = fileStatus.getPath().toString()[ CD ]
Line_17 $$ float previousProgressValue = 0f-->Line_27 $$ previousProgressValue = progress[ FD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_26 $$ Assert.assertTrue(progress <= 1.0f)[ CD ]
Line_4 $$ Configuration configuration = new Configuration()-->Line_6 $$ CopyListing.getCopyListing(configuration, CREDENTIALS, options).buildListing(new Path(cluster.getFileSystem().getUri().toString() + "/tmp/testDynInputFormat/fileList.seq"), options)[ FD ]
Line_13 $$ RecordReader<Text, CopyListingFileStatus> recordReader = inputFormat.createRecordReader(split, null)-->Line_16 $$ recordReader.initialize(splits.get(0), taskAttemptContext)[ FD ]
Line_2 $$ public void testGetSplits() throws Exception -->Line_4 $$ Configuration configuration = new Configuration()[ CD ]
Line_7 $$ JobContext jobContext = new JobContextImpl(configuration, new JobID())-->Line_14 $$ StubContext stubContext = new StubContext(jobContext.getConfiguration(), recordReader, taskId)[ FD ]
Line_3 $$ DistCpOptions options = getOptions()-->Line_6 $$ CopyListing.getCopyListing(configuration, CREDENTIALS, options).buildListing(new Path(cluster.getFileSystem().getUri().toString() + "/tmp/testDynInputFormat/fileList.seq"), options)[ FD ]
Line_18 $$ while (recordReader.nextKeyValue()) -->Line_19 $$ CopyListingFileStatus fileStatus = recordReader.getCurrentValue()[ CD ]
