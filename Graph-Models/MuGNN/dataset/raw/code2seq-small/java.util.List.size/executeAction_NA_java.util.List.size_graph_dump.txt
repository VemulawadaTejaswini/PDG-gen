Line_3 $$ List<TreeNodeOnVcsRevision> sel = getSelection()-->Line_14 $$ VcsFileRevision newestRevision = selectedRevisions.get(sel.size() - 1)[ FD ]
Line_4 $$ int selectionSize = sel.size()-->Line_5 $$ if (selectionSize > 1) [ FD ]
Line_21 $$ if (selectedRow == (flatView.getRowCount() - 1)) -->Line_25 $$ previousRevision = flatView.getRow(selectedRow + 1).getRevision()[ CD ]
Line_5 $$ if (selectionSize > 1) -->Line_14 $$ VcsFileRevision newestRevision = selectedRevisions.get(sel.size() - 1)[ CD ]
Line_16 $$ if (selectionSize == 1) -->Line_19 $$ VcsFileRevision revision = getFirstSelectedRevision()[ CD ]
Line_2 $$ protected void executeAction(AnActionEvent e) -->Line_3 $$ List<TreeNodeOnVcsRevision> sel = getSelection()[ CD ]
Line_16 $$ if (selectionSize == 1) -->Line_21 $$ if (selectedRow == (flatView.getRowCount() - 1)) [ CD ]
Line_2 $$ protected void executeAction(AnActionEvent e) -->Line_5 $$ if (selectionSize > 1) [ CD ]
Line_6 $$ List<VcsFileRevision> selectedRevisions = ContainerUtil.sorted(ContainerUtil.map(sel, new Function<TreeNodeOnVcsRevision, VcsFileRevision>() -->Line_13 $$ VcsFileRevision olderRevision = selectedRevisions.get(0)[ FD ]
Line_5 $$ if (selectionSize > 1) -->Line_13 $$ VcsFileRevision olderRevision = selectedRevisions.get(0)[ CD ]
Line_3 $$ List<TreeNodeOnVcsRevision> sel = getSelection()-->Line_6 $$ List<VcsFileRevision> selectedRevisions = ContainerUtil.sorted(ContainerUtil.map(sel, new Function<TreeNodeOnVcsRevision, VcsFileRevision>() [ FD ]
Line_5 $$ if (selectionSize > 1) -->Line_16 $$ if (selectionSize == 1) [ CD ]
Line_5 $$ if (selectionSize > 1) -->Line_15 $$ myDiffHandler.showDiffForTwo(e.getRequiredData(CommonDataKeys.PROJECT), myFilePath, olderRevision, newestRevision)[ CD ]
Line_2 $$ protected void executeAction(AnActionEvent e) -->Line_4 $$ int selectionSize = sel.size()[ CD ]
Line_16 $$ if (selectionSize == 1) -->Line_18 $$ final int selectedRow = flatView.getSelectedRow()[ CD ]
Line_5 $$ if (selectionSize > 1) -->Line_6 $$ List<VcsFileRevision> selectedRevisions = ContainerUtil.sorted(ContainerUtil.map(sel, new Function<TreeNodeOnVcsRevision, VcsFileRevision>() [ CD ]
Line_4 $$ int selectionSize = sel.size()-->Line_16 $$ if (selectionSize == 1) [ FD ]
Line_2 $$ protected void executeAction(AnActionEvent e) -->Line_15 $$ myDiffHandler.showDiffForTwo(e.getRequiredData(CommonDataKeys.PROJECT), myFilePath, olderRevision, newestRevision)[ FD ]
Line_16 $$ if (selectionSize == 1) -->Line_17 $$ final TableView<TreeNodeOnVcsRevision> flatView = myDualView.getFlatView()[ CD ]
Line_3 $$ List<TreeNodeOnVcsRevision> sel = getSelection()-->Line_4 $$ int selectionSize = sel.size()[ FD ]
Line_2 $$ protected void executeAction(AnActionEvent e) -->Line_28 $$ myDiffHandler.showDiffForOne(e, e.getRequiredData(CommonDataKeys.PROJECT), myFilePath, previousRevision, revision)[ FD ]
Line_6 $$ List<VcsFileRevision> selectedRevisions = ContainerUtil.sorted(ContainerUtil.map(sel, new Function<TreeNodeOnVcsRevision, VcsFileRevision>() -->Line_10 $$ return treeNode.getRevision()[ FD ]
Line_16 $$ if (selectionSize == 1) -->Line_27 $$ if (revision != null) [ CD ]
Line_6 $$ List<VcsFileRevision> selectedRevisions = ContainerUtil.sorted(ContainerUtil.map(sel, new Function<TreeNodeOnVcsRevision, VcsFileRevision>() -->Line_14 $$ VcsFileRevision newestRevision = selectedRevisions.get(sel.size() - 1)[ FD ]
Line_27 $$ if (revision != null) -->Line_28 $$ myDiffHandler.showDiffForOne(e, e.getRequiredData(CommonDataKeys.PROJECT), myFilePath, previousRevision, revision)[ CD ]
Line_6 $$ List<VcsFileRevision> selectedRevisions = ContainerUtil.sorted(ContainerUtil.map(sel, new Function<TreeNodeOnVcsRevision, VcsFileRevision>() -->Line_10 $$ return treeNode.getRevision()[ CD ]
