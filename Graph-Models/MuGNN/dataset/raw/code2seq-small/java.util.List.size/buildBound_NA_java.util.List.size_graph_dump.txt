Line_4 $$ if (hasMissingElements)-->Line_5 $$ return BTreeSet.empty(comparator)[ CD ]
Line_11 $$ for (int i = 0, m = elementsList.size(); i < m; i++) -->Line_12 $$ List<ByteBuffer> elements = elementsList.get(i)[ CD ]
Line_2 $$ public NavigableSet<Slice.Bound> buildBound(boolean isStart, boolean isInclusive) -->Line_6 $$ CBuilder builder = CBuilder.create(comparator)[ CD ]
Line_2 $$ public NavigableSet<Slice.Bound> buildBound(boolean isStart, boolean isInclusive) -->Line_4 $$ if (hasMissingElements)[ CD ]
Line_2 $$ public NavigableSet<Slice.Bound> buildBound(boolean isStart, boolean isInclusive) -->Line_7 $$ if (elementsList.isEmpty())[ CD ]
Line_2 $$ public NavigableSet<Slice.Bound> buildBound(boolean isStart, boolean isInclusive) -->Line_11 $$ for (int i = 0, m = elementsList.size(); i < m; i++) [ CD ]
Line_11 $$ for (int i = 0, m = elementsList.size(); i < m; i++) -->Line_13 $$ set.add(builder.buildBoundWith(elements, isStart, isInclusive))[ CD ]
Line_6 $$ CBuilder builder = CBuilder.create(comparator)-->Line_13 $$ set.add(builder.buildBoundWith(elements, isStart, isInclusive))[ FD ]
Line_2 $$ public NavigableSet<Slice.Bound> buildBound(boolean isStart, boolean isInclusive) -->Line_8 $$ return BTreeSet.of(comparator, builder.buildBound(isStart, isInclusive))[ FD ]
Line_12 $$ List<ByteBuffer> elements = elementsList.get(i)-->Line_13 $$ set.add(builder.buildBoundWith(elements, isStart, isInclusive))[ FD ]
Line_6 $$ CBuilder builder = CBuilder.create(comparator)-->Line_8 $$ return BTreeSet.of(comparator, builder.buildBound(isStart, isInclusive))[ FD ]
Line_7 $$ if (elementsList.isEmpty())-->Line_8 $$ return BTreeSet.of(comparator, builder.buildBound(isStart, isInclusive))[ CD ]
Line_2 $$ public NavigableSet<Slice.Bound> buildBound(boolean isStart, boolean isInclusive) -->Line_13 $$ set.add(builder.buildBoundWith(elements, isStart, isInclusive))[ FD ]
Line_11 $$ for (int i = 0, m = elementsList.size(); i < m; i++) -->Line_12 $$ List<ByteBuffer> elements = elementsList.get(i)[ FD ]
Line_2 $$ public NavigableSet<Slice.Bound> buildBound(boolean isStart, boolean isInclusive) -->Line_15 $$ return set.build()[ CD ]
