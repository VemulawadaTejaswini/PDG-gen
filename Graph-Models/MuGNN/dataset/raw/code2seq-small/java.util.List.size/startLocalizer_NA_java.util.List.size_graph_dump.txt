Line_6 $$ List<String> command = new ArrayList<String>()-->Line_20 $$ command.add(user)[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_22 $$ command.add(locId)[ FD ]
Line_5 $$ String runAsUser = getRunAsUser(user)-->Line_8 $$ command.addAll(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()), appId, nmPrivateContainerTokensPath.toUri().getPath().toString(), StringUtils.join(",", localDirs), StringUtils.join(",", logDirs)))[ FD ]
Line_28 $$ String[] commandArray = command.toArray(new String[command.size()])-->Line_31 $$ LOG.debug("initApplication: " + Arrays.toString(commandArray))[ FD ]
Line_29 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)-->Line_34 $$ shExec.execute()[ FD ]
Line_15 $$ String javaLibPath = System.getProperty("java.library.path")-->Line_16 $$ if (javaLibPath != null) [ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_13 $$ command.add("-classpath")[ FD ]
Line_25 $$ for (String dir : localDirs) -->Line_26 $$ command.add(dir)[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_23 $$ command.add(nmAddr.getHostName())[ FD ]
Line_29 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)-->Line_41 $$ logOutput(shExec.getOutput())[ FD ]
Line_29 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)-->Line_39 $$ int exitCode = shExec.getExitCode()[ FD ]
Line_35 $$ if (LOG.isDebugEnabled()) -->Line_36 $$ logOutput(shExec.getOutput())[ CD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_7 $$ addSchedPriorityCommand(command)[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_17 $$ command.add("-Djava.library.path=" + javaLibPath)[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_8 $$ command.addAll(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()), appId, nmPrivateContainerTokensPath.toUri().getPath().toString(), StringUtils.join(",", localDirs), StringUtils.join(",", logDirs)))[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_26 $$ command.add(dir)[ FD ]
Line_30 $$ if (LOG.isDebugEnabled()) -->Line_31 $$ LOG.debug("initApplication: " + Arrays.toString(commandArray))[ CD ]
Line_29 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)-->Line_36 $$ logOutput(shExec.getOutput())[ FD ]
Line_16 $$ if (javaLibPath != null) -->Line_17 $$ command.add("-Djava.library.path=" + javaLibPath)[ CD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_28 $$ String[] commandArray = command.toArray(new String[command.size()])[ FD ]
Line_29 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)-->Line_42 $$ throw new IOException("Application " + appId + " initialization failed" + " (exitCode=" + exitCode + ") with output: " + shExec.getOutput(), e)[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_24 $$ command.add(Integer.toString(nmAddr.getPort()))[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_12 $$ command.add(jvm.toString())[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_14 $$ command.add(System.getProperty("java.class.path"))[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_19 $$ command.add(ContainerLocalizer.class.getName())[ FD ]
Line_6 $$ List<String> command = new ArrayList<String>()-->Line_21 $$ command.add(appId)[ FD ]
