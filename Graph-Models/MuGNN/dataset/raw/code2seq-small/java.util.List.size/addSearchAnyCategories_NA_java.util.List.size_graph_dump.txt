Line_9 $$ if (filteredAnyCategoryIds.length == 0) -->Line_10 $$ addImpossibleTerm(queryBooleanFilter, Field.ASSET_CATEGORY_IDS)[ CD ]
Line_13 $$ TermsFilter categoryIdsTermsFilter = new TermsFilter(Field.ASSET_CATEGORY_IDS)-->Line_26 $$ categoryIdsTermsFilter.addValues(ArrayUtil.toStringArray(categoryIds.toArray(new Long[categoryIds.size()])))[ FD ]
Line_19 $$ List<Long> categoryIds = new ArrayList()-->Line_24 $$ categoryIds.add(anyCategoryId)[ FD ]
Line_19 $$ List<Long> categoryIds = new ArrayList()-->Line_21 $$ categoryIds.addAll(AssetCategoryLocalServiceUtil.getSubcategoryIds(anyCategoryId))[ FD ]
Line_2 $$ protected void addSearchAnyCategories(BooleanFilter queryBooleanFilter) throws Exception -->Line_4 $$ long[] anyCategoryIds = _assetEntryQuery.getAnyCategoryIds()[ CD ]
Line_5 $$ if (anyCategoryIds.length == 0) -->Line_6 $$ return[ CD ]
Line_2 $$ protected void addSearchAnyCategories(BooleanFilter queryBooleanFilter) throws Exception -->Line_28 $$ queryBooleanFilter.add(categoryIdsTermsFilter, BooleanClauseOccur.MUST)[ FD ]
Line_14 $$ for (long anyCategoryId : filteredAnyCategoryIds) -->Line_24 $$ categoryIds.add(anyCategoryId)[ FD ]
Line_20 $$ if (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) -->Line_21 $$ categoryIds.addAll(AssetCategoryLocalServiceUtil.getSubcategoryIds(anyCategoryId))[ CD ]
Line_3 $$ PermissionChecker permissionChecker = PermissionThreadLocal.getPermissionChecker()-->Line_8 $$ long[] filteredAnyCategoryIds = AssetUtil.filterCategoryIds(permissionChecker, anyCategoryIds)[ FD ]
Line_4 $$ long[] anyCategoryIds = _assetEntryQuery.getAnyCategoryIds()-->Line_8 $$ long[] filteredAnyCategoryIds = AssetUtil.filterCategoryIds(permissionChecker, anyCategoryIds)[ FD ]
Line_2 $$ protected void addSearchAnyCategories(BooleanFilter queryBooleanFilter) throws Exception -->Line_9 $$ if (filteredAnyCategoryIds.length == 0) [ CD ]
Line_2 $$ protected void addSearchAnyCategories(BooleanFilter queryBooleanFilter) throws Exception -->Line_5 $$ if (anyCategoryIds.length == 0) [ CD ]
Line_2 $$ protected void addSearchAnyCategories(BooleanFilter queryBooleanFilter) throws Exception -->Line_3 $$ PermissionChecker permissionChecker = PermissionThreadLocal.getPermissionChecker()[ CD ]
Line_13 $$ TermsFilter categoryIdsTermsFilter = new TermsFilter(Field.ASSET_CATEGORY_IDS)-->Line_28 $$ queryBooleanFilter.add(categoryIdsTermsFilter, BooleanClauseOccur.MUST)[ FD ]
Line_2 $$ protected void addSearchAnyCategories(BooleanFilter queryBooleanFilter) throws Exception -->Line_10 $$ addImpossibleTerm(queryBooleanFilter, Field.ASSET_CATEGORY_IDS)[ FD ]
Line_23 $$ if (categoryIds.isEmpty()) -->Line_24 $$ categoryIds.add(anyCategoryId)[ CD ]
Line_19 $$ List<Long> categoryIds = new ArrayList()-->Line_23 $$ if (categoryIds.isEmpty()) [ FD ]
Line_2 $$ protected void addSearchAnyCategories(BooleanFilter queryBooleanFilter) throws Exception -->Line_28 $$ queryBooleanFilter.add(categoryIdsTermsFilter, BooleanClauseOccur.MUST)[ CD ]
Line_14 $$ for (long anyCategoryId : filteredAnyCategoryIds) -->Line_15 $$ AssetCategory assetCategory = AssetCategoryLocalServiceUtil.fetchAssetCategory(anyCategoryId)[ FD ]
Line_15 $$ AssetCategory assetCategory = AssetCategoryLocalServiceUtil.fetchAssetCategory(anyCategoryId)-->Line_16 $$ if (assetCategory == null) [ FD ]
Line_14 $$ for (long anyCategoryId : filteredAnyCategoryIds) -->Line_21 $$ categoryIds.addAll(AssetCategoryLocalServiceUtil.getSubcategoryIds(anyCategoryId))[ FD ]
Line_2 $$ protected void addSearchAnyCategories(BooleanFilter queryBooleanFilter) throws Exception -->Line_8 $$ long[] filteredAnyCategoryIds = AssetUtil.filterCategoryIds(permissionChecker, anyCategoryIds)[ CD ]
Line_19 $$ List<Long> categoryIds = new ArrayList()-->Line_26 $$ categoryIdsTermsFilter.addValues(ArrayUtil.toStringArray(categoryIds.toArray(new Long[categoryIds.size()])))[ FD ]
Line_2 $$ protected void addSearchAnyCategories(BooleanFilter queryBooleanFilter) throws Exception -->Line_13 $$ TermsFilter categoryIdsTermsFilter = new TermsFilter(Field.ASSET_CATEGORY_IDS)[ CD ]
Line_9 $$ if (filteredAnyCategoryIds.length == 0) -->Line_11 $$ return[ CD ]
