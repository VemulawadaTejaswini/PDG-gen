Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_36 $$ assertEquals("Incorrect qry result count", 2, results.size())[ CD ]
Line_13 $$ Iterator itr = results.iterator()-->Line_38 $$ while (itr.hasNext()) [ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_35 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ CD ]
Line_23 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_24 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_13 $$ Iterator itr = results.iterator()-->Line_14 $$ while (itr.hasNext()) [ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_8 $$ List results = s.createQuery("from Person").list()[ CD ]
Line_39 $$ final Person p = (Person) itr.next()-->Line_40 $$ if (p.getName().equals("John Doe")) [ FD ]
Line_11 $$ results = s.createQuery("from Employee").list()-->Line_23 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_23 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_36 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_13 $$ Iterator itr = results.iterator()-->Line_27 $$ final Person p = (Person) itr.next()[ FD ]
Line_15 $$ final Person p = (Person) itr.next()-->Line_28 $$ if (p.getName().equals("John Doe")) [ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_9 $$ assertEquals("Incorrect qry result count", 4, results.size())[ CD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_22 $$ s.clear()[ CD ]
Line_29 $$ Employee john = (Employee) p-->Line_30 $$ assertEquals("Incorrect fecthed minions count", 2, john.getMinions().size())[ FD ]
Line_25 $$ itr = results.iterator()-->Line_26 $$ while (itr.hasNext()) [ FD ]
Line_11 $$ results = s.createQuery("from Employee").list()-->Line_13 $$ Iterator itr = results.iterator()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_13 $$ Iterator itr = results.iterator()[ CD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_7 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ List results = s.createQuery("from Person").list()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_51 $$ s.createQuery("delete Employee where manager is not null").executeUpdate()[ CD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.clear()[ FD ]
Line_3 $$ Session s = openSession()-->Line_6 $$ prepareTestData(s)[ FD ]
Line_3 $$ Session s = openSession()-->Line_5 $$ Transaction t = s.beginTransaction()[ FD ]
Line_13 $$ Iterator itr = results.iterator()-->Line_15 $$ final Person p = (Person) itr.next()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_52 $$ s.createQuery("delete Person").executeUpdate()[ CD ]
Line_27 $$ final Person p = (Person) itr.next()-->Line_28 $$ if (p.getName().equals("John Doe")) [ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_34 $$ s.clear()[ CD ]
Line_11 $$ results = s.createQuery("from Employee").list()-->Line_37 $$ itr = results.iterator()[ FD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_9 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_25 $$ itr = results.iterator()-->Line_37 $$ itr = results.iterator()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_3 $$ Session s = openSession()[ CD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_36 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_38 $$ while (itr.hasNext()) -->Line_39 $$ final Person p = (Person) itr.next()[ CD ]
Line_13 $$ Iterator itr = results.iterator()-->Line_25 $$ itr = results.iterator()[ FD ]
Line_37 $$ itr = results.iterator()-->Line_39 $$ final Person p = (Person) itr.next()[ FD ]
Line_37 $$ itr = results.iterator()-->Line_38 $$ while (itr.hasNext()) [ FD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ s.close()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_49 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_25 $$ itr = results.iterator()[ CD ]
Line_48 $$ s = openSession()-->Line_54 $$ s.close()[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_46 $$ t.commit()[ FD ]
Line_35 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))-->Line_37 $$ itr = results.iterator()[ FD ]
Line_11 $$ results = s.createQuery("from Employee").list()-->Line_12 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ s = openSession()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_49 $$ t = s.beginTransaction()[ CD ]
Line_27 $$ final Person p = (Person) itr.next()-->Line_40 $$ if (p.getName().equals("John Doe")) [ FD ]
Line_49 $$ t = s.beginTransaction()-->Line_53 $$ t.commit()[ FD ]
Line_13 $$ Iterator itr = results.iterator()-->Line_37 $$ itr = results.iterator()[ FD ]
Line_40 $$ if (p.getName().equals("John Doe")) -->Line_41 $$ Employee john = (Employee) p[ CD ]
Line_38 $$ while (itr.hasNext()) -->Line_40 $$ if (p.getName().equals("John Doe")) [ CD ]
Line_17 $$ Employee john = (Employee) p-->Line_42 $$ assertEquals("Incorrect fecthed minions count", 2, john.getMinions().size())[ FD ]
Line_26 $$ while (itr.hasNext()) -->Line_28 $$ if (p.getName().equals("John Doe")) [ CD ]
Line_3 $$ Session s = openSession()-->Line_50 $$ s.createQuery("delete Customer where contactOwner is not null").executeUpdate()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_38 $$ while (itr.hasNext()) [ CD ]
Line_40 $$ if (p.getName().equals("John Doe")) -->Line_42 $$ assertEquals("Incorrect fecthed minions count", 2, john.getMinions().size())[ CD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_53 $$ t.commit()[ FD ]
Line_23 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_37 $$ itr = results.iterator()[ FD ]
Line_48 $$ s = openSession()-->Line_51 $$ s.createQuery("delete Employee where manager is not null").executeUpdate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ results = s.createQuery("from Employee").list()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_37 $$ itr = results.iterator()[ CD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_35 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_50 $$ s.createQuery("delete Customer where contactOwner is not null").executeUpdate()[ CD ]
Line_41 $$ Employee john = (Employee) p-->Line_42 $$ assertEquals("Incorrect fecthed minions count", 2, john.getMinions().size())[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_10 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ s.createQuery("delete Employee where manager is not null").executeUpdate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_49 $$ t = s.beginTransaction()[ FD ]
Line_48 $$ s = openSession()-->Line_50 $$ s.createQuery("delete Customer where contactOwner is not null").executeUpdate()[ FD ]
Line_35 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))-->Line_36 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_23 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ CD ]
Line_48 $$ s = openSession()-->Line_49 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_7 $$ s.clear()[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s.clear()[ FD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.clear()[ FD ]
Line_11 $$ results = s.createQuery("from Employee").list()-->Line_36 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_25 $$ itr = results.iterator()-->Line_39 $$ final Person p = (Person) itr.next()[ FD ]
Line_11 $$ results = s.createQuery("from Employee").list()-->Line_35 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_17 $$ Employee john = (Employee) p-->Line_18 $$ assertEquals("Incorrect fecthed minions count", 2, john.getMinions().size())[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_6 $$ prepareTestData(s)[ CD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_4 $$ s.enableFilter("region").setParameter("userRegion", "US")[ CD ]
Line_13 $$ Iterator itr = results.iterator()-->Line_39 $$ final Person p = (Person) itr.next()[ FD ]
Line_28 $$ if (p.getName().equals("John Doe")) -->Line_29 $$ Employee john = (Employee) p[ CD ]
Line_28 $$ if (p.getName().equals("John Doe")) -->Line_30 $$ assertEquals("Incorrect fecthed minions count", 2, john.getMinions().size())[ CD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_11 $$ results = s.createQuery("from Employee").list()-->Line_24 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_15 $$ final Person p = (Person) itr.next()-->Line_40 $$ if (p.getName().equals("John Doe")) [ FD ]
Line_17 $$ Employee john = (Employee) p-->Line_30 $$ assertEquals("Incorrect fecthed minions count", 2, john.getMinions().size())[ FD ]
Line_13 $$ Iterator itr = results.iterator()-->Line_26 $$ while (itr.hasNext()) [ FD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_23 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_26 $$ while (itr.hasNext()) [ CD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_37 $$ itr = results.iterator()[ FD ]
Line_14 $$ while (itr.hasNext()) -->Line_15 $$ final Person p = (Person) itr.next()[ CD ]
Line_16 $$ if (p.getName().equals("John Doe")) -->Line_17 $$ Employee john = (Employee) p[ CD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_24 $$ assertEquals("Incorrect qry result count", 4, results.size())[ FD ]
Line_25 $$ itr = results.iterator()-->Line_27 $$ final Person p = (Person) itr.next()[ FD ]
Line_26 $$ while (itr.hasNext()) -->Line_27 $$ final Person p = (Person) itr.next()[ CD ]
Line_23 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_25 $$ itr = results.iterator()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_11 $$ results = s.createQuery("from Employee").list()[ CD ]
Line_15 $$ final Person p = (Person) itr.next()-->Line_16 $$ if (p.getName().equals("John Doe")) [ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_53 $$ t.commit()[ CD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_48 $$ s = openSession()[ CD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_12 $$ assertEquals("Incorrect qry result count", 2, results.size())[ CD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_47 $$ s.close()[ CD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_12 $$ assertEquals("Incorrect qry result count", 2, results.size())[ FD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_25 $$ itr = results.iterator()[ FD ]
Line_14 $$ while (itr.hasNext()) -->Line_16 $$ if (p.getName().equals("John Doe")) [ CD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_24 $$ assertEquals("Incorrect qry result count", 4, results.size())[ CD ]
Line_29 $$ Employee john = (Employee) p-->Line_42 $$ assertEquals("Incorrect fecthed minions count", 2, john.getMinions().size())[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_46 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ s.createQuery("delete Person").executeUpdate()[ FD ]
Line_23 $$ results = new ArrayList(new HashSet(s.createQuery("from Person as p left join fetch p.minions").list()))-->Line_35 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.enableFilter("region").setParameter("userRegion", "US")[ FD ]
Line_48 $$ s = openSession()-->Line_52 $$ s.createQuery("delete Person").executeUpdate()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_14 $$ while (itr.hasNext()) [ CD ]
Line_11 $$ results = s.createQuery("from Employee").list()-->Line_25 $$ itr = results.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ results = new ArrayList(new HashSet(s.createQuery("from Employee as p left join fetch p.minions").list()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_54 $$ s.close()[ FD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_13 $$ Iterator itr = results.iterator()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_5 $$ Transaction t = s.beginTransaction()[ CD ]
Line_25 $$ itr = results.iterator()-->Line_38 $$ while (itr.hasNext()) [ FD ]
Line_16 $$ if (p.getName().equals("John Doe")) -->Line_18 $$ assertEquals("Incorrect fecthed minions count", 2, john.getMinions().size())[ CD ]
Line_8 $$ List results = s.createQuery("from Person").list()-->Line_11 $$ results = s.createQuery("from Employee").list()[ FD ]
Line_2 $$ public void testFiltersWithJoinedSubclass() -->Line_54 $$ s.close()[ CD ]
