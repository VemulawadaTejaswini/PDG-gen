Line_22 $$ future = processChannel.getProcessNoticeableFuture()-->Line_24 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_21 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_36 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_36 $$ future = processChannel.getProcessNoticeableFuture()-->Line_39 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_36 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_20 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_35 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_12 $$ future.get()[ FD ]
Line_9 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_21 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_23 $$ future.get()[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_39 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_21 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_22 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_9 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_35 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_10 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_36 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_22 $$ future = processChannel.getProcessNoticeableFuture()-->Line_37 $$ future.get()[ FD ]
Line_36 $$ future = processChannel.getProcessNoticeableFuture()-->Line_37 $$ future.get()[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_24 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_14 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_30 $$ String message = logRecord2.getMessage()-->Line_31 $$ Assert.assertTrue(message.contains("Invoked generic process callable"))[ FD ]
Line_35 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_36 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_9 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_34 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)[ FD ]
Line_22 $$ future = processChannel.getProcessNoticeableFuture()-->Line_23 $$ future.get()[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_25 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_20 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_34 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)[ FD ]
Line_10 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_21 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_10 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_35 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_22 $$ future = processChannel.getProcessNoticeableFuture()-->Line_39 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_10 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_22 $$ future = processChannel.getProcessNoticeableFuture()-->Line_25 $$ Assert.assertTrue(future.isDone())[ FD ]
Line_21 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_35 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_9 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_20 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)[ FD ]
Line_20 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_21 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_34 $$ leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_35 $$ processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_36 $$ future = processChannel.getProcessNoticeableFuture()-->Line_38 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_29 $$ LogRecord logRecord2 = logRecords.get(1)-->Line_30 $$ String message = logRecord2.getMessage()[ FD ]
Line_10 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)-->Line_22 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_37 $$ future.get()[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_38 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_22 $$ future = processChannel.getProcessNoticeableFuture()-->Line_38 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_9 $$ LeadingLogProcessCallable leadingLogProcessCallable = new LeadingLogProcessCallable(leadingLog, bodyLog)-->Line_10 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), leadingLogProcessCallable)[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_22 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_27 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_28 $$ Assert.assertEquals("Found corrupt leading log " + leadingLog, logRecord1.getMessage())[ FD ]
Line_22 $$ future = processChannel.getProcessNoticeableFuture()-->Line_36 $$ future = processChannel.getProcessNoticeableFuture()[ FD ]
Line_11 $$ Future<Serializable> future = processChannel.getProcessNoticeableFuture()-->Line_13 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_16 $$ LogRecord logRecord = logRecords.get(0)-->Line_17 $$ Assert.assertEquals("Found corrupt leading log " + leadingLog, logRecord.getMessage())[ FD ]
