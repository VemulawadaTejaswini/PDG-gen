Line_4 $$ final ASTNode lastChild = getLastNonSpaceChild(myNode, false)-->Line_5 $$ if (lastChild != null && lastChild.getElementType() == PyElementTypes.STATEMENT_LIST && mySubBlocks.size() >= newChildIndex) [ FD ]
Line_31 $$ exprItem = exprItem.getNextSibling()-->Line_22 $$ while (exprItem != null) [ FD ]
Line_36 $$ if (doc != null) -->Line_37 $$ int lineNum = doc.getLineNumber(exprItem.getTextOffset())[ CD ]
Line_3 $$ final ASTNode afterNode = getAfterNode(newChildIndex)-->Line_51 $$ if (afterNode != null && afterNode.getElementType() == PyElementTypes.KEY_VALUE_EXPRESSION) [ FD ]
Line_37 $$ int lineNum = doc.getLineNumber(exprItem.getTextOffset())-->Line_41 $$ final int nodeCol = hereElt.getTextOffset() - doc.getLineStartOffset(lineNum)[ FD ]
Line_5 $$ if (lastChild != null && lastChild.getElementType() == PyElementTypes.STATEMENT_LIST && mySubBlocks.size() >= newChildIndex) -->Line_6 $$ if (afterNode == null) [ CD ]
Line_27 $$ if (exprItem instanceof PsiComment) -->Line_28 $$ found = true[ CD ]
Line_24 $$ found = true-->Line_28 $$ found = true[ FD ]
Line_19 $$ final PsiElement expr = lastChild.getPsi()-->Line_20 $$ PsiElement exprItem = expr.getFirstChild()[ FD ]
Line_33 $$ if (found) -->Line_36 $$ if (doc != null) [ CD ]
Line_5 $$ if (lastChild != null && lastChild.getElementType() == PyElementTypes.STATEMENT_LIST && mySubBlocks.size() >= newChildIndex) -->Line_13 $$ if (lastFirstChild != null && lastFirstChild == lastChild.getLastChildNode() && lastFirstChild.getPsi() instanceof PsiErrorElement) [ CD ]
Line_5 $$ if (lastChild != null && lastChild.getElementType() == PyElementTypes.STATEMENT_LIST && mySubBlocks.size() >= newChildIndex) -->Line_9 $$ if (afterNode.getElementType() == PyElementTypes.STATEMENT_LIST || afterNode.getElementType() == PyTokenTypes.COLON) [ CD ]
Line_9 $$ if (afterNode.getElementType() == PyElementTypes.STATEMENT_LIST || afterNode.getElementType() == PyTokenTypes.COLON) -->Line_10 $$ return Indent.getNormalIndent()[ CD ]
Line_57 $$ if (myNode.getElementType().equals(PyElementTypes.PARAMETER_LIST)) -->Line_58 $$ return Indent.getContinuationIndent()[ CD ]
Line_31 $$ exprItem = exprItem.getNextSibling()-->Line_23 $$ if (exprItem instanceof PyElement) [ FD ]
Line_31 $$ exprItem = exprItem.getNextSibling()-->Line_35 $$ final Document doc = docMgr.getDocument(exprItem.getContainingFile())[ FD ]
Line_18 $$ if (lastLastChild != null && lastLastChild.getPsi() instanceof PsiErrorElement) -->Line_33 $$ if (found) [ CD ]
Line_3 $$ final ASTNode afterNode = getAfterNode(newChildIndex)-->Line_63 $$ if (afterNode != null) [ FD ]
Line_17 $$ final ASTNode lastLastChild = lastChild.getLastChildNode()-->Line_18 $$ if (lastLastChild != null && lastLastChild.getPsi() instanceof PsiErrorElement) [ FD ]
Line_22 $$ while (exprItem != null) -->Line_23 $$ if (exprItem instanceof PyElement) [ CD ]
Line_20 $$ PsiElement exprItem = expr.getFirstChild()-->Line_34 $$ final PsiDocumentManager docMgr = PsiDocumentManager.getInstance(exprItem.getProject())[ FD ]
Line_65 $$ while (wsAfter != null && wsAfter.getElementType() == TokenType.WHITE_SPACE) -->Line_69 $$ wsAfter = wsAfter.getTreeNext()[ CD ]
Line_42 $$ final int padding = itemCol - nodeCol-->Line_44 $$ return Indent.getSpaceIndent(padding)[ FD ]
Line_3 $$ final ASTNode afterNode = getAfterNode(newChildIndex)-->Line_6 $$ if (afterNode == null) [ FD ]
Line_4 $$ final ASTNode lastChild = getLastNonSpaceChild(myNode, false)-->Line_16 $$ if (lastChild != null && PyElementTypes.LIST_LIKE_EXPRESSIONS.contains(lastChild.getElementType())) [ FD ]
Line_20 $$ PsiElement exprItem = expr.getFirstChild()-->Line_37 $$ int lineNum = doc.getLineNumber(exprItem.getTextOffset())[ FD ]
Line_16 $$ if (lastChild != null && PyElementTypes.LIST_LIKE_EXPRESSIONS.contains(lastChild.getElementType())) -->Line_18 $$ if (lastLastChild != null && lastLastChild.getPsi() instanceof PsiErrorElement) [ CD ]
Line_2 $$ private Indent getChildIndent(int newChildIndex) -->Line_60 $$ if (ourListElementTypes.contains(myNode.getElementType()) || myNode.getPsi() instanceof PyStatementPart) [ CD ]
Line_2 $$ private Indent getChildIndent(int newChildIndex) -->Line_5 $$ if (lastChild != null && lastChild.getElementType() == PyElementTypes.STATEMENT_LIST && mySubBlocks.size() >= newChildIndex) [ CD ]
Line_20 $$ PsiElement exprItem = expr.getFirstChild()-->Line_23 $$ if (exprItem instanceof PyElement) [ FD ]
Line_64 $$ ASTNode wsAfter = afterNode.getTreeNext()-->Line_69 $$ wsAfter = wsAfter.getTreeNext()[ FD ]
Line_35 $$ final Document doc = docMgr.getDocument(exprItem.getContainingFile())-->Line_40 $$ lineNum = doc.getLineNumber(hereElt.getTextOffset())[ FD ]
Line_16 $$ if (lastChild != null && PyElementTypes.LIST_LIKE_EXPRESSIONS.contains(lastChild.getElementType())) -->Line_17 $$ final ASTNode lastLastChild = lastChild.getLastChildNode()[ CD ]
Line_22 $$ while (exprItem != null) -->Line_31 $$ exprItem = exprItem.getNextSibling()[ CD ]
Line_31 $$ exprItem = exprItem.getNextSibling()-->Line_27 $$ if (exprItem instanceof PsiComment) [ FD ]
Line_20 $$ PsiElement exprItem = expr.getFirstChild()-->Line_27 $$ if (exprItem instanceof PsiComment) [ FD ]
Line_60 $$ if (ourListElementTypes.contains(myNode.getElementType()) || myNode.getPsi() instanceof PyStatementPart) -->Line_61 $$ return Indent.getNormalIndent()[ CD ]
Line_20 $$ PsiElement exprItem = expr.getFirstChild()-->Line_35 $$ final Document doc = docMgr.getDocument(exprItem.getContainingFile())[ FD ]
Line_31 $$ exprItem = exprItem.getNextSibling()-->Line_38 $$ final int itemCol = exprItem.getTextOffset() - doc.getLineStartOffset(lineNum)[ FD ]
Line_36 $$ if (doc != null) -->Line_38 $$ final int itemCol = exprItem.getTextOffset() - doc.getLineStartOffset(lineNum)[ CD ]
Line_65 $$ while (wsAfter != null && wsAfter.getElementType() == TokenType.WHITE_SPACE) -->Line_66 $$ if (wsAfter.getText().indexOf('\\') >= 0) [ CD ]
Line_35 $$ final Document doc = docMgr.getDocument(exprItem.getContainingFile())-->Line_36 $$ if (doc != null) [ FD ]
Line_5 $$ if (lastChild != null && lastChild.getElementType() == PyElementTypes.STATEMENT_LIST && mySubBlocks.size() >= newChildIndex) -->Line_12 $$ final ASTNode lastFirstChild = lastChild.getFirstChildNode()[ CD ]
Line_34 $$ final PsiDocumentManager docMgr = PsiDocumentManager.getInstance(exprItem.getProject())-->Line_35 $$ final Document doc = docMgr.getDocument(exprItem.getContainingFile())[ FD ]
Line_18 $$ if (lastLastChild != null && lastLastChild.getPsi() instanceof PsiErrorElement) -->Line_48 $$ return Indent.getContinuationIndent()[ CD ]
Line_63 $$ if (afterNode != null) -->Line_64 $$ ASTNode wsAfter = afterNode.getTreeNext()[ CD ]
Line_2 $$ private Indent getChildIndent(int newChildIndex) -->Line_72 $$ return Indent.getNoneIndent()[ CD ]
Line_51 $$ if (afterNode != null && afterNode.getElementType() == PyElementTypes.KEY_VALUE_EXPRESSION) -->Line_52 $$ final PyKeyValueExpression keyValue = (PyKeyValueExpression) afterNode.getPsi()[ CD ]
Line_42 $$ final int padding = itemCol - nodeCol-->Line_43 $$ if (padding > 0) [ FD ]
Line_5 $$ if (lastChild != null && lastChild.getElementType() == PyElementTypes.STATEMENT_LIST && mySubBlocks.size() >= newChildIndex) -->Line_16 $$ if (lastChild != null && PyElementTypes.LIST_LIKE_EXPRESSIONS.contains(lastChild.getElementType())) [ CD ]
Line_33 $$ if (found) -->Line_34 $$ final PsiDocumentManager docMgr = PsiDocumentManager.getInstance(exprItem.getProject())[ CD ]
Line_66 $$ if (wsAfter.getText().indexOf('\\') >= 0) -->Line_67 $$ return Indent.getNormalIndent()[ CD ]
Line_20 $$ PsiElement exprItem = expr.getFirstChild()-->Line_22 $$ while (exprItem != null) [ FD ]
Line_33 $$ if (found) -->Line_35 $$ final Document doc = docMgr.getDocument(exprItem.getContainingFile())[ CD ]
Line_64 $$ ASTNode wsAfter = afterNode.getTreeNext()-->Line_65 $$ while (wsAfter != null && wsAfter.getElementType() == TokenType.WHITE_SPACE) [ FD ]
Line_20 $$ PsiElement exprItem = expr.getFirstChild()-->Line_38 $$ final int itemCol = exprItem.getTextOffset() - doc.getLineStartOffset(lineNum)[ FD ]
Line_37 $$ int lineNum = doc.getLineNumber(exprItem.getTextOffset())-->Line_40 $$ lineNum = doc.getLineNumber(hereElt.getTextOffset())[ FD ]
Line_36 $$ if (doc != null) -->Line_41 $$ final int nodeCol = hereElt.getTextOffset() - doc.getLineStartOffset(lineNum)[ CD ]
Line_53 $$ if (keyValue != null && keyValue.getValue() == null) -->Line_54 $$ return Indent.getContinuationIndent()[ CD ]
Line_6 $$ if (afterNode == null) -->Line_7 $$ return Indent.getNoneIndent()[ CD ]
Line_21 $$ boolean found = false-->Line_24 $$ found = true[ FD ]
Line_13 $$ if (lastFirstChild != null && lastFirstChild == lastChild.getLastChildNode() && lastFirstChild.getPsi() instanceof PsiErrorElement) -->Line_14 $$ return Indent.getNormalIndent()[ CD ]
Line_3 $$ final ASTNode afterNode = getAfterNode(newChildIndex)-->Line_9 $$ if (afterNode.getElementType() == PyElementTypes.STATEMENT_LIST || afterNode.getElementType() == PyTokenTypes.COLON) [ FD ]
Line_39 $$ final PsiElement hereElt = getNode().getPsi()-->Line_40 $$ lineNum = doc.getLineNumber(hereElt.getTextOffset())[ FD ]
Line_23 $$ if (exprItem instanceof PyElement) -->Line_24 $$ found = true[ CD ]
Line_51 $$ if (afterNode != null && afterNode.getElementType() == PyElementTypes.KEY_VALUE_EXPRESSION) -->Line_53 $$ if (keyValue != null && keyValue.getValue() == null) [ CD ]
Line_35 $$ final Document doc = docMgr.getDocument(exprItem.getContainingFile())-->Line_41 $$ final int nodeCol = hereElt.getTextOffset() - doc.getLineStartOffset(lineNum)[ FD ]
Line_4 $$ final ASTNode lastChild = getLastNonSpaceChild(myNode, false)-->Line_12 $$ final ASTNode lastFirstChild = lastChild.getFirstChildNode()[ FD ]
Line_36 $$ if (doc != null) -->Line_42 $$ final int padding = itemCol - nodeCol[ CD ]
Line_2 $$ private Indent getChildIndent(int newChildIndex) -->Line_4 $$ final ASTNode lastChild = getLastNonSpaceChild(myNode, false)[ CD ]
Line_36 $$ if (doc != null) -->Line_40 $$ lineNum = doc.getLineNumber(hereElt.getTextOffset())[ CD ]
Line_4 $$ final ASTNode lastChild = getLastNonSpaceChild(myNode, false)-->Line_13 $$ if (lastFirstChild != null && lastFirstChild == lastChild.getLastChildNode() && lastFirstChild.getPsi() instanceof PsiErrorElement) [ FD ]
Line_2 $$ private Indent getChildIndent(int newChildIndex) -->Line_3 $$ final ASTNode afterNode = getAfterNode(newChildIndex)[ CD ]
Line_31 $$ exprItem = exprItem.getNextSibling()-->Line_37 $$ int lineNum = doc.getLineNumber(exprItem.getTextOffset())[ FD ]
Line_36 $$ if (doc != null) -->Line_39 $$ final PsiElement hereElt = getNode().getPsi()[ CD ]
Line_22 $$ while (exprItem != null) -->Line_27 $$ if (exprItem instanceof PsiComment) [ CD ]
Line_37 $$ int lineNum = doc.getLineNumber(exprItem.getTextOffset())-->Line_38 $$ final int itemCol = exprItem.getTextOffset() - doc.getLineStartOffset(lineNum)[ FD ]
Line_2 $$ private Indent getChildIndent(int newChildIndex) -->Line_3 $$ final ASTNode afterNode = getAfterNode(newChildIndex)[ FD ]
Line_2 $$ private Indent getChildIndent(int newChildIndex) -->Line_63 $$ if (afterNode != null) [ CD ]
Line_35 $$ final Document doc = docMgr.getDocument(exprItem.getContainingFile())-->Line_38 $$ final int itemCol = exprItem.getTextOffset() - doc.getLineStartOffset(lineNum)[ FD ]
Line_43 $$ if (padding > 0) -->Line_44 $$ return Indent.getSpaceIndent(padding)[ CD ]
Line_4 $$ final ASTNode lastChild = getLastNonSpaceChild(myNode, false)-->Line_19 $$ final PsiElement expr = lastChild.getPsi()[ FD ]
Line_63 $$ if (afterNode != null) -->Line_65 $$ while (wsAfter != null && wsAfter.getElementType() == TokenType.WHITE_SPACE) [ CD ]
Line_12 $$ final ASTNode lastFirstChild = lastChild.getFirstChildNode()-->Line_13 $$ if (lastFirstChild != null && lastFirstChild == lastChild.getLastChildNode() && lastFirstChild.getPsi() instanceof PsiErrorElement) [ FD ]
Line_2 $$ private Indent getChildIndent(int newChildIndex) -->Line_57 $$ if (myNode.getElementType().equals(PyElementTypes.PARAMETER_LIST)) [ CD ]
Line_18 $$ if (lastLastChild != null && lastLastChild.getPsi() instanceof PsiErrorElement) -->Line_20 $$ PsiElement exprItem = expr.getFirstChild()[ CD ]
Line_69 $$ wsAfter = wsAfter.getTreeNext()-->Line_65 $$ while (wsAfter != null && wsAfter.getElementType() == TokenType.WHITE_SPACE) [ FD ]
Line_18 $$ if (lastLastChild != null && lastLastChild.getPsi() instanceof PsiErrorElement) -->Line_21 $$ boolean found = false[ CD ]
Line_21 $$ boolean found = false-->Line_28 $$ found = true[ FD ]
Line_40 $$ lineNum = doc.getLineNumber(hereElt.getTextOffset())-->Line_41 $$ final int nodeCol = hereElt.getTextOffset() - doc.getLineStartOffset(lineNum)[ FD ]
Line_35 $$ final Document doc = docMgr.getDocument(exprItem.getContainingFile())-->Line_37 $$ int lineNum = doc.getLineNumber(exprItem.getTextOffset())[ FD ]
Line_36 $$ if (doc != null) -->Line_43 $$ if (padding > 0) [ CD ]
Line_3 $$ final ASTNode afterNode = getAfterNode(newChildIndex)-->Line_64 $$ ASTNode wsAfter = afterNode.getTreeNext()[ FD ]
Line_18 $$ if (lastLastChild != null && lastLastChild.getPsi() instanceof PsiErrorElement) -->Line_19 $$ final PsiElement expr = lastChild.getPsi()[ CD ]
Line_39 $$ final PsiElement hereElt = getNode().getPsi()-->Line_41 $$ final int nodeCol = hereElt.getTextOffset() - doc.getLineStartOffset(lineNum)[ FD ]
Line_4 $$ final ASTNode lastChild = getLastNonSpaceChild(myNode, false)-->Line_17 $$ final ASTNode lastLastChild = lastChild.getLastChildNode()[ FD ]
Line_31 $$ exprItem = exprItem.getNextSibling()-->Line_34 $$ final PsiDocumentManager docMgr = PsiDocumentManager.getInstance(exprItem.getProject())[ FD ]
Line_64 $$ ASTNode wsAfter = afterNode.getTreeNext()-->Line_66 $$ if (wsAfter.getText().indexOf('\\') >= 0) [ FD ]
Line_52 $$ final PyKeyValueExpression keyValue = (PyKeyValueExpression) afterNode.getPsi()-->Line_53 $$ if (keyValue != null && keyValue.getValue() == null) [ FD ]
Line_18 $$ if (lastLastChild != null && lastLastChild.getPsi() instanceof PsiErrorElement) -->Line_22 $$ while (exprItem != null) [ CD ]
Line_3 $$ final ASTNode afterNode = getAfterNode(newChildIndex)-->Line_52 $$ final PyKeyValueExpression keyValue = (PyKeyValueExpression) afterNode.getPsi()[ FD ]
Line_69 $$ wsAfter = wsAfter.getTreeNext()-->Line_66 $$ if (wsAfter.getText().indexOf('\\') >= 0) [ FD ]
Line_20 $$ PsiElement exprItem = expr.getFirstChild()-->Line_31 $$ exprItem = exprItem.getNextSibling()[ FD ]
Line_2 $$ private Indent getChildIndent(int newChildIndex) -->Line_51 $$ if (afterNode != null && afterNode.getElementType() == PyElementTypes.KEY_VALUE_EXPRESSION) [ CD ]
