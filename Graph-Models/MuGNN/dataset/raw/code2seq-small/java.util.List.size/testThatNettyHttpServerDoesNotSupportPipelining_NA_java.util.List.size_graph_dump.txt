Line_2 $$ public void testThatNettyHttpServerDoesNotSupportPipelining() throws Exception -->Line_5 $$ HttpServerTransport httpServerTransport = internalCluster().getInstance(HttpServerTransport.class)[ CD ]
Line_5 $$ HttpServerTransport httpServerTransport = internalCluster().getInstance(HttpServerTransport.class)-->Line_6 $$ InetSocketTransportAddress inetSocketTransportAddress = (InetSocketTransportAddress) randomFrom(httpServerTransport.boundAddress().boundAddresses())[ FD ]
Line_10 $$ List<String> opaqueIds = new ArrayList(returnOpaqueIds(responses))-->Line_11 $$ assertResponsesOutOfOrder(opaqueIds)[ FD ]
Line_2 $$ public void testThatNettyHttpServerDoesNotSupportPipelining() throws Exception -->Line_6 $$ InetSocketTransportAddress inetSocketTransportAddress = (InetSocketTransportAddress) randomFrom(httpServerTransport.boundAddress().boundAddresses())[ CD ]
Line_4 $$ List<String> requests = Arrays.asList("/", "/_nodes/stats", "/", "/_cluster/state", "/", "/_nodes", "/")-->Line_8 $$ Collection<HttpResponse> responses = nettyHttpClient.sendRequests(inetSocketTransportAddress.address(), requests.toArray(new String[] [ FD ]
Line_2 $$ public void testThatNettyHttpServerDoesNotSupportPipelining() throws Exception -->Line_4 $$ List<String> requests = Arrays.asList("/", "/_nodes/stats", "/", "/_cluster/state", "/", "/_nodes", "/")[ CD ]
Line_4 $$ List<String> requests = Arrays.asList("/", "/_nodes/stats", "/", "/_cluster/state", "/", "/_nodes", "/")-->Line_9 $$ assertThat(responses, hasSize(requests.size()))[ FD ]
Line_7 $$ try (NettyHttpClient nettyHttpClient = new NettyHttpClient()) -->Line_8 $$ Collection<HttpResponse> responses = nettyHttpClient.sendRequests(inetSocketTransportAddress.address(), requests.toArray(new String[] [ FD ]
Line_8 $$ Collection<HttpResponse> responses = nettyHttpClient.sendRequests(inetSocketTransportAddress.address(), requests.toArray(new String[] -->Line_10 $$ List<String> opaqueIds = new ArrayList(returnOpaqueIds(responses))[ FD ]
Line_2 $$ public void testThatNettyHttpServerDoesNotSupportPipelining() throws Exception -->Line_3 $$ ensureGreen()[ CD ]
Line_8 $$ Collection<HttpResponse> responses = nettyHttpClient.sendRequests(inetSocketTransportAddress.address(), requests.toArray(new String[] -->Line_9 $$ assertThat(responses, hasSize(requests.size()))[ FD ]
Line_6 $$ InetSocketTransportAddress inetSocketTransportAddress = (InetSocketTransportAddress) randomFrom(httpServerTransport.boundAddress().boundAddresses())-->Line_8 $$ Collection<HttpResponse> responses = nettyHttpClient.sendRequests(inetSocketTransportAddress.address(), requests.toArray(new String[] [ FD ]
