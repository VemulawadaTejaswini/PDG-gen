Line_22 $$ for (String className : classNames) -->Line_23 $$ wWriter.println(className)[ FD ]
Line_2 $$ protected void writeClassesPerModule(String packageName, JavaParameters javaParameters, Map<Module, List<String>> perModule) throws FileNotFoundException, UnsupportedEncodingException, CantRunException -->Line_3 $$ if (perModule != null && perModule.size() > 1) [ CD ]
Line_2 $$ protected void writeClassesPerModule(String packageName, JavaParameters javaParameters, Map<Module, List<String>> perModule) throws FileNotFoundException, UnsupportedEncodingException, CantRunException -->Line_20 $$ final List<String> classNames = perModule.get(module)[ FD ]
Line_8 $$ for (Module module : perModule.keySet()) -->Line_9 $$ wWriter.println(PathMacroUtil.getModuleDir(module.getModuleFilePath()))[ FD ]
Line_5 $$ final PrintWriter wWriter = new PrintWriter(myWorkingDirsFile, CharsetToolkit.UTF8)-->Line_16 $$ wWriter.println(parameters.getClassPath().getPathsString())[ FD ]
Line_4 $$ final String classpath = getScope() == TestSearchScope.WHOLE_PROJECT ? null : javaParameters.getClassPath().getPathsString()-->Line_11 $$ if (classpath == null) [ FD ]
Line_11 $$ if (classpath == null) -->Line_14 $$ configureRTClasspath(parameters)[ CD ]
Line_8 $$ for (Module module : perModule.keySet()) -->Line_10 $$ wWriter.println(module.getName())[ FD ]
Line_20 $$ final List<String> classNames = perModule.get(module)-->Line_21 $$ wWriter.println(classNames.size())[ FD ]
Line_8 $$ for (Module module : perModule.keySet()) -->Line_15 $$ JavaParametersUtil.configureModule(module, parameters, JavaParameters.JDK_AND_CLASSES_AND_TESTS, getConfiguration().isAlternativeJrePathEnabled() ? getConfiguration().getAlternativeJrePath() : null)[ FD ]
Line_2 $$ protected void writeClassesPerModule(String packageName, JavaParameters javaParameters, Map<Module, List<String>> perModule) throws FileNotFoundException, UnsupportedEncodingException, CantRunException -->Line_8 $$ for (Module module : perModule.keySet()) [ FD ]
Line_5 $$ final PrintWriter wWriter = new PrintWriter(myWorkingDirsFile, CharsetToolkit.UTF8)-->Line_23 $$ wWriter.println(className)[ FD ]
Line_12 $$ final JavaParameters parameters = new JavaParameters()-->Line_15 $$ JavaParametersUtil.configureModule(module, parameters, JavaParameters.JDK_AND_CLASSES_AND_TESTS, getConfiguration().isAlternativeJrePathEnabled() ? getConfiguration().getAlternativeJrePath() : null)[ FD ]
Line_5 $$ final PrintWriter wWriter = new PrintWriter(myWorkingDirsFile, CharsetToolkit.UTF8)-->Line_9 $$ wWriter.println(PathMacroUtil.getModuleDir(module.getModuleFilePath()))[ FD ]
Line_12 $$ final JavaParameters parameters = new JavaParameters()-->Line_13 $$ parameters.getClassPath().add(JavaSdkUtil.getIdeaRtJarPath())[ FD ]
Line_4 $$ final String classpath = getScope() == TestSearchScope.WHOLE_PROJECT ? null : javaParameters.getClassPath().getPathsString()-->Line_18 $$ wWriter.println(classpath)[ FD ]
Line_12 $$ final JavaParameters parameters = new JavaParameters()-->Line_14 $$ configureRTClasspath(parameters)[ FD ]
Line_2 $$ protected void writeClassesPerModule(String packageName, JavaParameters javaParameters, Map<Module, List<String>> perModule) throws FileNotFoundException, UnsupportedEncodingException, CantRunException -->Line_7 $$ wWriter.println(packageName)[ FD ]
Line_2 $$ protected void writeClassesPerModule(String packageName, JavaParameters javaParameters, Map<Module, List<String>> perModule) throws FileNotFoundException, UnsupportedEncodingException, CantRunException -->Line_3 $$ if (perModule != null && perModule.size() > 1) [ FD ]
Line_5 $$ final PrintWriter wWriter = new PrintWriter(myWorkingDirsFile, CharsetToolkit.UTF8)-->Line_27 $$ wWriter.close()[ FD ]
Line_5 $$ final PrintWriter wWriter = new PrintWriter(myWorkingDirsFile, CharsetToolkit.UTF8)-->Line_21 $$ wWriter.println(classNames.size())[ FD ]
Line_11 $$ if (classpath == null) -->Line_18 $$ wWriter.println(classpath)[ CD ]
Line_5 $$ final PrintWriter wWriter = new PrintWriter(myWorkingDirsFile, CharsetToolkit.UTF8)-->Line_18 $$ wWriter.println(classpath)[ FD ]
Line_3 $$ if (perModule != null && perModule.size() > 1) -->Line_5 $$ final PrintWriter wWriter = new PrintWriter(myWorkingDirsFile, CharsetToolkit.UTF8)[ CD ]
Line_8 $$ for (Module module : perModule.keySet()) -->Line_20 $$ final List<String> classNames = perModule.get(module)[ FD ]
Line_11 $$ if (classpath == null) -->Line_15 $$ JavaParametersUtil.configureModule(module, parameters, JavaParameters.JDK_AND_CLASSES_AND_TESTS, getConfiguration().isAlternativeJrePathEnabled() ? getConfiguration().getAlternativeJrePath() : null)[ CD ]
Line_11 $$ if (classpath == null) -->Line_13 $$ parameters.getClassPath().add(JavaSdkUtil.getIdeaRtJarPath())[ CD ]
Line_3 $$ if (perModule != null && perModule.size() > 1) -->Line_4 $$ final String classpath = getScope() == TestSearchScope.WHOLE_PROJECT ? null : javaParameters.getClassPath().getPathsString()[ CD ]
Line_11 $$ if (classpath == null) -->Line_12 $$ final JavaParameters parameters = new JavaParameters()[ CD ]
Line_5 $$ final PrintWriter wWriter = new PrintWriter(myWorkingDirsFile, CharsetToolkit.UTF8)-->Line_10 $$ wWriter.println(module.getName())[ FD ]
Line_2 $$ protected void writeClassesPerModule(String packageName, JavaParameters javaParameters, Map<Module, List<String>> perModule) throws FileNotFoundException, UnsupportedEncodingException, CantRunException -->Line_4 $$ final String classpath = getScope() == TestSearchScope.WHOLE_PROJECT ? null : javaParameters.getClassPath().getPathsString()[ FD ]
Line_11 $$ if (classpath == null) -->Line_16 $$ wWriter.println(parameters.getClassPath().getPathsString())[ CD ]
Line_12 $$ final JavaParameters parameters = new JavaParameters()-->Line_16 $$ wWriter.println(parameters.getClassPath().getPathsString())[ FD ]
Line_5 $$ final PrintWriter wWriter = new PrintWriter(myWorkingDirsFile, CharsetToolkit.UTF8)-->Line_7 $$ wWriter.println(packageName)[ FD ]
