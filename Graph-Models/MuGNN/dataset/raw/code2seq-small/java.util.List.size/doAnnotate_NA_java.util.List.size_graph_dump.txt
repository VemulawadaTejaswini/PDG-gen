Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_13 $$ Results results = new Results(collectedInfo.level)[ CD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_26 $$ return results[ CD ]
Line_3 $$ if (collectedInfo == null)-->Line_4 $$ return null[ CD ]
Line_12 $$ ProcessOutput output = PySdkUtil.getProcessOutput(cmd, new File(collectedInfo.interpreterPath).getParent(), ImmutableMap.of("PYTHONBUFFERED", "1"), 10000, collectedInfo.fileText.getBytes(), false)-->Line_14 $$ if (output.isTimeout()) [ FD ]
Line_16 $$ if (output.getStderrLines().isEmpty()) -->Line_23 $$ if (((ApplicationInfoImpl) ApplicationInfo.getInstance()).isEAP()) [ CD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_3 $$ if (collectedInfo == null)[ FD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_5 $$ ArrayList<String> options = Lists.newArrayList()[ CD ]
Line_19 $$ if (problem != null) -->Line_20 $$ results.problems.add(problem)[ CD ]
Line_5 $$ ArrayList<String> options = Lists.newArrayList()-->Line_11 $$ GeneralCommandLine cmd = PythonHelper.PEP8.newCommandLine(collectedInfo.interpreterPath, options)[ FD ]
Line_14 $$ if (output.isTimeout()) -->Line_16 $$ if (output.getStderrLines().isEmpty()) [ CD ]
Line_12 $$ ProcessOutput output = PySdkUtil.getProcessOutput(cmd, new File(collectedInfo.interpreterPath).getParent(), ImmutableMap.of("PYTHONBUFFERED", "1"), 10000, collectedInfo.fileText.getBytes(), false)-->Line_17 $$ for (String line : output.getStdoutLines()) [ FD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_10 $$ options.add("-")[ CD ]
Line_6 $$ if (collectedInfo.ignoredErrors.size() > 0) -->Line_7 $$ options.add("--ignore=" + StringUtil.join(collectedInfo.ignoredErrors, ","))[ CD ]
Line_11 $$ GeneralCommandLine cmd = PythonHelper.PEP8.newCommandLine(collectedInfo.interpreterPath, options)-->Line_12 $$ ProcessOutput output = PySdkUtil.getProcessOutput(cmd, new File(collectedInfo.interpreterPath).getParent(), ImmutableMap.of("PYTHONBUFFERED", "1"), 10000, collectedInfo.fileText.getBytes(), false)[ FD ]
Line_14 $$ if (output.isTimeout()) -->Line_15 $$ LOG.info("Timeout running pep8.py")[ CD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_3 $$ if (collectedInfo == null)[ CD ]
Line_12 $$ ProcessOutput output = PySdkUtil.getProcessOutput(cmd, new File(collectedInfo.interpreterPath).getParent(), ImmutableMap.of("PYTHONBUFFERED", "1"), 10000, collectedInfo.fileText.getBytes(), false)-->Line_24 $$ LOG.info("Error running pep8.py: " + output.getStderr())[ FD ]
Line_17 $$ for (String line : output.getStdoutLines()) -->Line_18 $$ final Problem problem = parseProblem(line)[ FD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_12 $$ ProcessOutput output = PySdkUtil.getProcessOutput(cmd, new File(collectedInfo.interpreterPath).getParent(), ImmutableMap.of("PYTHONBUFFERED", "1"), 10000, collectedInfo.fileText.getBytes(), false)[ CD ]
Line_18 $$ final Problem problem = parseProblem(line)-->Line_19 $$ if (problem != null) [ FD ]
Line_5 $$ ArrayList<String> options = Lists.newArrayList()-->Line_7 $$ options.add("--ignore=" + StringUtil.join(collectedInfo.ignoredErrors, ","))[ FD ]
Line_5 $$ ArrayList<String> options = Lists.newArrayList()-->Line_9 $$ options.add("--max-line-length=" + collectedInfo.margin)[ FD ]
Line_5 $$ ArrayList<String> options = Lists.newArrayList()-->Line_10 $$ options.add("-")[ FD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_6 $$ if (collectedInfo.ignoredErrors.size() > 0) [ CD ]
Line_12 $$ ProcessOutput output = PySdkUtil.getProcessOutput(cmd, new File(collectedInfo.interpreterPath).getParent(), ImmutableMap.of("PYTHONBUFFERED", "1"), 10000, collectedInfo.fileText.getBytes(), false)-->Line_16 $$ if (output.getStderrLines().isEmpty()) [ FD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_11 $$ GeneralCommandLine cmd = PythonHelper.PEP8.newCommandLine(collectedInfo.interpreterPath, options)[ CD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_14 $$ if (output.isTimeout()) [ CD ]
Line_18 $$ final Problem problem = parseProblem(line)-->Line_20 $$ results.problems.add(problem)[ FD ]
Line_23 $$ if (((ApplicationInfoImpl) ApplicationInfo.getInstance()).isEAP()) -->Line_24 $$ LOG.info("Error running pep8.py: " + output.getStderr())[ CD ]
Line_2 $$ public Results doAnnotate(State collectedInfo) -->Line_9 $$ options.add("--max-line-length=" + collectedInfo.margin)[ CD ]
