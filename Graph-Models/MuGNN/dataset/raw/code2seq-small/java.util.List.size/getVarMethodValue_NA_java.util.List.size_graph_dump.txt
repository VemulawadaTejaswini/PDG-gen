Line_34 $$ if (methodName.equals(commandName)) -->Line_36 $$ if (parameterTypes.length > 1) [ CD ]
Line_11 $$ String parameterValue = matcher.group()-->Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)[ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_25 $$ String commandName = getCommandNameFromClassCommandName(classCommandName)[ CD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_7 $$ String parameterString = classCommandName.substring(x + 1, y)[ FD ]
Line_6 $$ if ((x + 1) < y) -->Line_8 $$ Matcher matcher = _parameterPattern.matcher(parameterString)[ CD ]
Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)-->Line_45 $$ returnObject = ""[ FD ]
Line_36 $$ if (parameterTypes.length > 1) -->Line_41 $$ return returnObject.toString()[ CD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_4 $$ int y = classCommandName.lastIndexOf(")")[ FD ]
Line_60 $$ if (className.equals("selenium")) -->Line_63 $$ object = liferaySelenium[ CD ]
Line_39 $$ returnObject = ""-->Line_76 $$ return returnObject.toString()[ FD ]
Line_5 $$ String[] parameters = null-->Line_53 $$ if (parameters != null) [ FD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_27 $$ Integer[] integers = new Integer[parameters.length][ CD ]
Line_44 $$ if (returnObject == null) -->Line_45 $$ returnObject = ""[ CD ]
Line_12 $$ if (parameterValue.startsWith("'") && parameterValue.endsWith("'")) -->Line_14 $$ if (parameterValue.contains("#")) [ CD ]
Line_45 $$ returnObject = ""-->Line_76 $$ return returnObject.toString()[ FD ]
Line_32 $$ for (Method method : methods) -->Line_43 $$ Object returnObject = method.invoke(null, new Object[] [ FD ]
Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)-->Line_76 $$ return returnObject.toString()[ FD ]
Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)-->Line_47 $$ return returnObject.toString()[ FD ]
Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)-->Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)[ FD ]
Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")-->Line_20 $$ params.add(parameterValue)[ FD ]
Line_36 $$ if (parameterTypes.length > 1) -->Line_47 $$ return returnObject.toString()[ CD ]
Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)-->Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")[ FD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_73 $$ if (returnObject == null) [ CD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_29 $$ integers[i] = Integer.parseInt(parameters[i].trim())[ CD ]
Line_73 $$ if (returnObject == null) -->Line_74 $$ returnObject = ""[ CD ]
Line_36 $$ if (parameterTypes.length > 1) -->Line_38 $$ if (returnObject == null) [ CD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_71 $$ Method method = clazz.getMethod(commandName, parameterClasses.toArray(new Class[parameterClasses.size()]))[ CD ]
Line_24 $$ String className = getClassNameFromClassCommandName(classCommandName)-->Line_26 $$ if (className.equals("MathUtil")) [ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_3 $$ int x = classCommandName.indexOf("(")[ FD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_60 $$ if (className.equals("selenium")) [ CD ]
Line_58 $$ Class<?> clazz = null-->Line_71 $$ Method method = clazz.getMethod(commandName, parameterClasses.toArray(new Class[parameterClasses.size()]))[ FD ]
Line_11 $$ String parameterValue = matcher.group()-->Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)[ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_24 $$ String className = getClassNameFromClassCommandName(classCommandName)[ FD ]
Line_60 $$ if (className.equals("selenium")) -->Line_61 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()[ CD ]
Line_61 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()-->Line_62 $$ clazz = liferaySelenium.getClass()[ FD ]
Line_39 $$ returnObject = ""-->Line_74 $$ returnObject = ""[ FD ]
Line_7 $$ String parameterString = classCommandName.substring(x + 1, y)-->Line_8 $$ Matcher matcher = _parameterPattern.matcher(parameterString)[ FD ]
Line_38 $$ if (returnObject == null) -->Line_39 $$ returnObject = ""[ CD ]
Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")-->Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)[ FD ]
Line_6 $$ if ((x + 1) < y) -->Line_10 $$ while (matcher.find()) [ CD ]
Line_32 $$ for (Method method : methods) -->Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)[ FD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_76 $$ return returnObject.toString()[ CD ]
Line_32 $$ for (Method method : methods) -->Line_33 $$ String methodName = method.getName()[ FD ]
Line_62 $$ clazz = liferaySelenium.getClass()-->Line_71 $$ Method method = clazz.getMethod(commandName, parameterClasses.toArray(new Class[parameterClasses.size()]))[ FD ]
Line_39 $$ returnObject = ""-->Line_44 $$ if (returnObject == null) [ FD ]
Line_14 $$ if (parameterValue.contains("#")) -->Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)[ CD ]
Line_63 $$ object = liferaySelenium-->Line_72 $$ Object returnObject = method.invoke(object, (Object[]) parameters)[ FD ]
Line_12 $$ if (parameterValue.startsWith("'") && parameterValue.endsWith("'")) -->Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)[ CD ]
Line_33 $$ String methodName = method.getName()-->Line_34 $$ if (methodName.equals(commandName)) [ FD ]
Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)-->Line_44 $$ if (returnObject == null) [ FD ]
Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)-->Line_20 $$ params.add(parameterValue)[ FD ]
Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)-->Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")[ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_26 $$ if (className.equals("MathUtil")) [ CD ]
Line_58 $$ Class<?> clazz = null-->Line_62 $$ clazz = liferaySelenium.getClass()[ FD ]
Line_25 $$ String commandName = getCommandNameFromClassCommandName(classCommandName)-->Line_71 $$ Method method = clazz.getMethod(commandName, parameterClasses.toArray(new Class[parameterClasses.size()]))[ FD ]
Line_34 $$ if (methodName.equals(commandName)) -->Line_35 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ CD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_52 $$ List<Class<?>> parameterClasses = new ArrayList()[ CD ]
Line_11 $$ String parameterValue = matcher.group()-->Line_20 $$ params.add(parameterValue)[ FD ]
Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")-->Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)[ FD ]
Line_6 $$ if ((x + 1) < y) -->Line_9 $$ List<String> params = new ArrayList()[ CD ]
Line_52 $$ List<Class<?>> parameterClasses = new ArrayList()-->Line_71 $$ Method method = clazz.getMethod(commandName, parameterClasses.toArray(new Class[parameterClasses.size()]))[ FD ]
Line_25 $$ String commandName = getCommandNameFromClassCommandName(classCommandName)-->Line_34 $$ if (methodName.equals(commandName)) [ FD ]
Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)-->Line_38 $$ if (returnObject == null) [ FD ]
Line_10 $$ while (matcher.find()) -->Line_20 $$ params.add(parameterValue)[ CD ]
Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")-->Line_12 $$ if (parameterValue.startsWith("'") && parameterValue.endsWith("'")) [ FD ]
Line_39 $$ returnObject = ""-->Line_73 $$ if (returnObject == null) [ FD ]
Line_8 $$ Matcher matcher = _parameterPattern.matcher(parameterString)-->Line_11 $$ String parameterValue = matcher.group()[ FD ]
Line_61 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()-->Line_63 $$ object = liferaySelenium[ FD ]
Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)-->Line_14 $$ if (parameterValue.contains("#")) [ FD ]
Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)-->Line_12 $$ if (parameterValue.startsWith("'") && parameterValue.endsWith("'")) [ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_4 $$ int y = classCommandName.lastIndexOf(")")[ CD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_58 $$ Class<?> clazz = null[ CD ]
Line_10 $$ while (matcher.find()) -->Line_17 $$ if (parameterValue.contains("\'")) [ CD ]
Line_59 $$ Object object = null-->Line_72 $$ Object returnObject = method.invoke(object, (Object[]) parameters)[ FD ]
Line_60 $$ if (className.equals("selenium")) -->Line_62 $$ clazz = liferaySelenium.getClass()[ CD ]
Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)-->Line_39 $$ returnObject = ""[ FD ]
Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)-->Line_12 $$ if (parameterValue.startsWith("'") && parameterValue.endsWith("'")) [ FD ]
Line_32 $$ for (Method method : methods) -->Line_35 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)-->Line_74 $$ returnObject = ""[ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_6 $$ if ((x + 1) < y) [ CD ]
Line_6 $$ if ((x + 1) < y) -->Line_22 $$ parameters = params.toArray(new String[params.size()])[ CD ]
Line_9 $$ List<String> params = new ArrayList()-->Line_20 $$ params.add(parameterValue)[ FD ]
Line_53 $$ if (parameters != null) -->Line_54 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_66 $$ clazz = Class.forName("com.liferay.poshi.runner.util." + className)-->Line_71 $$ Method method = clazz.getMethod(commandName, parameterClasses.toArray(new Class[parameterClasses.size()]))[ FD ]
Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)-->Line_14 $$ if (parameterValue.contains("#")) [ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_24 $$ String className = getClassNameFromClassCommandName(classCommandName)[ CD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_25 $$ String commandName = getCommandNameFromClassCommandName(classCommandName)[ FD ]
Line_10 $$ while (matcher.find()) -->Line_12 $$ if (parameterValue.startsWith("'") && parameterValue.endsWith("'")) [ CD ]
Line_74 $$ returnObject = ""-->Line_76 $$ return returnObject.toString()[ FD ]
Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)-->Line_20 $$ params.add(parameterValue)[ FD ]
Line_6 $$ if ((x + 1) < y) -->Line_7 $$ String parameterString = classCommandName.substring(x + 1, y)[ CD ]
Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)-->Line_73 $$ if (returnObject == null) [ FD ]
Line_58 $$ Class<?> clazz = null-->Line_66 $$ clazz = Class.forName("com.liferay.poshi.runner.util." + className)[ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_78 $$ return null[ CD ]
Line_17 $$ if (parameterValue.contains("\'")) -->Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")[ CD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_72 $$ Object returnObject = method.invoke(object, (Object[]) parameters)[ CD ]
Line_5 $$ String[] parameters = null-->Line_22 $$ parameters = params.toArray(new String[params.size()])[ FD ]
Line_45 $$ returnObject = ""-->Line_74 $$ returnObject = ""[ FD ]
Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)-->Line_17 $$ if (parameterValue.contains("\'")) [ FD ]
Line_22 $$ parameters = params.toArray(new String[params.size()])-->Line_53 $$ if (parameters != null) [ FD ]
Line_10 $$ while (matcher.find()) -->Line_11 $$ String parameterValue = matcher.group()[ CD ]
Line_62 $$ clazz = liferaySelenium.getClass()-->Line_66 $$ clazz = Class.forName("com.liferay.poshi.runner.util." + className)[ FD ]
Line_36 $$ if (parameterTypes.length > 1) -->Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)[ CD ]
Line_36 $$ if (parameterTypes.length > 1) -->Line_44 $$ if (returnObject == null) [ CD ]
Line_9 $$ List<String> params = new ArrayList()-->Line_22 $$ parameters = params.toArray(new String[params.size()])[ FD ]
Line_59 $$ Object object = null-->Line_63 $$ object = liferaySelenium[ FD ]
Line_32 $$ for (Method method : methods) -->Line_72 $$ Object returnObject = method.invoke(object, (Object[]) parameters)[ FD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_31 $$ Method[] methods = MathUtil.class.getDeclaredMethods()[ CD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_28 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_36 $$ if (parameterTypes.length > 1) -->Line_43 $$ Object returnObject = method.invoke(null, new Object[] [ CD ]
Line_11 $$ String parameterValue = matcher.group()-->Line_12 $$ if (parameterValue.startsWith("'") && parameterValue.endsWith("'")) [ FD ]
Line_11 $$ String parameterValue = matcher.group()-->Line_14 $$ if (parameterValue.contains("#")) [ FD ]
Line_37 $$ Object returnObject = method.invoke(null, (Object[]) integers)-->Line_41 $$ return returnObject.toString()[ FD ]
Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)-->Line_17 $$ if (parameterValue.contains("\'")) [ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_3 $$ int x = classCommandName.indexOf("(")[ CD ]
Line_39 $$ returnObject = ""-->Line_47 $$ return returnObject.toString()[ FD ]
Line_24 $$ String className = getClassNameFromClassCommandName(classCommandName)-->Line_60 $$ if (className.equals("selenium")) [ FD ]
Line_39 $$ returnObject = ""-->Line_41 $$ return returnObject.toString()[ FD ]
Line_4 $$ int y = classCommandName.lastIndexOf(")")-->Line_7 $$ String parameterString = classCommandName.substring(x + 1, y)[ FD ]
Line_11 $$ String parameterValue = matcher.group()-->Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")[ FD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_59 $$ Object object = null[ CD ]
Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")-->Line_14 $$ if (parameterValue.contains("#")) [ FD ]
Line_45 $$ returnObject = ""-->Line_47 $$ return returnObject.toString()[ FD ]
Line_15 $$ parameterValue = PoshiRunnerContext.getPathLocator(parameterValue)-->Line_13 $$ parameterValue = parameterValue.substring(1, parameterValue.length() - 1)[ FD ]
Line_18 $$ parameterValue = parameterValue.replaceAll("\\\\'", "'")-->Line_17 $$ if (parameterValue.contains("\'")) [ FD ]
Line_8 $$ Matcher matcher = _parameterPattern.matcher(parameterString)-->Line_10 $$ while (matcher.find()) [ FD ]
Line_28 $$ for (int i = 0; i < parameters.length; i++) -->Line_54 $$ for (int i = 0; i < parameters.length; i++) [ FD ]
Line_4 $$ int y = classCommandName.lastIndexOf(")")-->Line_6 $$ if ((x + 1) < y) [ FD ]
Line_2 $$ public static String getVarMethodValue(String classCommandName) throws Exception -->Line_5 $$ String[] parameters = null[ CD ]
Line_26 $$ if (className.equals("MathUtil")) -->Line_53 $$ if (parameters != null) [ CD ]
Line_52 $$ List<Class<?>> parameterClasses = new ArrayList()-->Line_55 $$ parameterClasses.add(String.class)[ FD ]
Line_11 $$ String parameterValue = matcher.group()-->Line_17 $$ if (parameterValue.contains("\'")) [ FD ]
Line_39 $$ returnObject = ""-->Line_45 $$ returnObject = ""[ FD ]
Line_45 $$ returnObject = ""-->Line_73 $$ if (returnObject == null) [ FD ]
Line_54 $$ for (int i = 0; i < parameters.length; i++) -->Line_55 $$ parameterClasses.add(String.class)[ CD ]
