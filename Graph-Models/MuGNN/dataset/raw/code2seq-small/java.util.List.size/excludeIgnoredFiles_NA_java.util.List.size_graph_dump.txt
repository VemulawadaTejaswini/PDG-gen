Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_3 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)[ CD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_16 $$ return nonIgnoredFiles[ CD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_6 $$ handler.endOptions()[ CD ]
Line_11 $$ for (String pathToCheck : paths) -->Line_12 $$ if (!ignoredPaths.contains(pathToCheck)) [ FD ]
Line_9 $$ List<String> nonIgnoredFiles = new ArrayList<String>(paths.size())-->Line_13 $$ nonIgnoredFiles.add(pathToCheck)[ FD ]
Line_11 $$ for (String pathToCheck : paths) -->Line_13 $$ nonIgnoredFiles.add(pathToCheck)[ FD ]
Line_12 $$ if (!ignoredPaths.contains(pathToCheck)) -->Line_13 $$ nonIgnoredFiles.add(pathToCheck)[ CD ]
Line_8 $$ String output = handler.run()-->Line_10 $$ Set<String> ignoredPaths = new HashSet<String>(Arrays.asList(StringUtil.splitByLines(output)))[ FD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_9 $$ List<String> nonIgnoredFiles = new ArrayList<String>(paths.size())[ CD ]
Line_10 $$ Set<String> ignoredPaths = new HashSet<String>(Arrays.asList(StringUtil.splitByLines(output)))-->Line_12 $$ if (!ignoredPaths.contains(pathToCheck)) [ FD ]
Line_3 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_7 $$ handler.addParameters(paths)[ FD ]
Line_3 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_6 $$ handler.endOptions()[ FD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_7 $$ handler.addParameters(paths)[ FD ]
Line_3 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_4 $$ handler.setSilent(true)[ FD ]
Line_3 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_8 $$ String output = handler.run()[ FD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_7 $$ handler.addParameters(paths)[ CD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_10 $$ Set<String> ignoredPaths = new HashSet<String>(Arrays.asList(StringUtil.splitByLines(output)))[ CD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_4 $$ handler.setSilent(true)[ CD ]
Line_3 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_5 $$ handler.addParameters("--ignored", "--others", "--exclude-standard")[ FD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_5 $$ handler.addParameters("--ignored", "--others", "--exclude-standard")[ CD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_8 $$ String output = handler.run()[ CD ]
Line_2 $$ private static List<String> excludeIgnoredFiles(@NotNull Project project, @NotNull VirtualFile root, @NotNull List<String> paths) throws VcsException -->Line_9 $$ List<String> nonIgnoredFiles = new ArrayList<String>(paths.size())[ FD ]
