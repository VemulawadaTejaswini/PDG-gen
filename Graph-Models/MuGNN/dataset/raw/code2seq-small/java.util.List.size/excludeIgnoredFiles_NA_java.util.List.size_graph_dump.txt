Line_9 $$ String output = handler.run()-->Line_11 $$ Set<String> ignoredPaths = new HashSet<String>(Arrays.asList(StringUtil.splitByLines(output)))[ FD ]
Line_11 $$ Set<String> ignoredPaths = new HashSet<String>(Arrays.asList(StringUtil.splitByLines(output)))-->Line_13 $$ if (!ignoredPaths.contains(pathToCheck)) [ FD ]
Line_13 $$ if (!ignoredPaths.contains(pathToCheck)) -->Line_14 $$ nonIgnoredFiles.add(pathToCheck)[ CD ]
Line_4 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_8 $$ handler.addParameters(paths)[ FD ]
Line_10 $$ List<String> nonIgnoredFiles = new ArrayList<String>(paths.size())-->Line_14 $$ nonIgnoredFiles.add(pathToCheck)[ FD ]
Line_4 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_9 $$ String output = handler.run()[ FD ]
Line_12 $$ for (String pathToCheck : paths) -->Line_14 $$ nonIgnoredFiles.add(pathToCheck)[ FD ]
Line_4 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_5 $$ handler.setSilent(true)[ FD ]
Line_4 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_7 $$ handler.endOptions()[ FD ]
Line_12 $$ for (String pathToCheck : paths) -->Line_13 $$ if (!ignoredPaths.contains(pathToCheck)) [ FD ]
Line_4 $$ GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.LS_FILES)-->Line_6 $$ handler.addParameters("--ignored", "--others", "--exclude-standard")[ FD ]
