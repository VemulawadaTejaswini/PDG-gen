Line_5 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)-->Line_9 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)[ FD ]
Line_9 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)-->Line_11 $$ Object existingTemplateVersionId = result.get(0)[ FD ]
Line_7 $$ Object newTemplateVersionId = newDDMTemplateVersion.getTemplateVersionId()-->Line_12 $$ Assert.assertEquals(existingTemplateVersionId, newTemplateVersionId)[ FD ]
Line_9 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)-->Line_10 $$ Assert.assertEquals(1, result.size())[ FD ]
Line_11 $$ Object existingTemplateVersionId = result.get(0)-->Line_12 $$ Assert.assertEquals(existingTemplateVersionId, newTemplateVersionId)[ FD ]
Line_5 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)-->Line_8 $$ dynamicQuery.add(RestrictionsFactoryUtil.in("templateVersionId", new Object[] [ FD ]
Line_4 $$ DDMTemplateVersion newDDMTemplateVersion = addDDMTemplateVersion()-->Line_7 $$ Object newTemplateVersionId = newDDMTemplateVersion.getTemplateVersionId()[ FD ]
Line_5 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)-->Line_6 $$ dynamicQuery.setProjection(ProjectionFactoryUtil.property("templateVersionId"))[ FD ]
