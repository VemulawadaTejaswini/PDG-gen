Line_2 $$ public void testDynamicQueryByProjectionExisting() throws Exception -->Line_3 $$ DDMTemplateVersion newDDMTemplateVersion = addDDMTemplateVersion()[ CD ]
Line_2 $$ public void testDynamicQueryByProjectionExisting() throws Exception -->Line_6 $$ Object newTemplateVersionId = newDDMTemplateVersion.getTemplateVersionId()[ CD ]
Line_3 $$ DDMTemplateVersion newDDMTemplateVersion = addDDMTemplateVersion()-->Line_6 $$ Object newTemplateVersionId = newDDMTemplateVersion.getTemplateVersionId()[ FD ]
Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)-->Line_8 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)[ FD ]
Line_2 $$ public void testDynamicQueryByProjectionExisting() throws Exception -->Line_10 $$ Object existingTemplateVersionId = result.get(0)[ CD ]
Line_8 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)-->Line_9 $$ Assert.assertEquals(1, result.size())[ FD ]
Line_2 $$ public void testDynamicQueryByProjectionExisting() throws Exception -->Line_5 $$ dynamicQuery.setProjection(ProjectionFactoryUtil.property("templateVersionId"))[ CD ]
Line_8 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)-->Line_10 $$ Object existingTemplateVersionId = result.get(0)[ FD ]
Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)-->Line_5 $$ dynamicQuery.setProjection(ProjectionFactoryUtil.property("templateVersionId"))[ FD ]
Line_2 $$ public void testDynamicQueryByProjectionExisting() throws Exception -->Line_9 $$ Assert.assertEquals(1, result.size())[ CD ]
Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)-->Line_7 $$ dynamicQuery.add(RestrictionsFactoryUtil.in("templateVersionId", new Object[] [ FD ]
Line_2 $$ public void testDynamicQueryByProjectionExisting() throws Exception -->Line_11 $$ Assert.assertEquals(existingTemplateVersionId, newTemplateVersionId)[ CD ]
Line_2 $$ public void testDynamicQueryByProjectionExisting() throws Exception -->Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)[ CD ]
Line_2 $$ public void testDynamicQueryByProjectionExisting() throws Exception -->Line_8 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)[ CD ]
Line_10 $$ Object existingTemplateVersionId = result.get(0)-->Line_11 $$ Assert.assertEquals(existingTemplateVersionId, newTemplateVersionId)[ FD ]
Line_2 $$ public void testDynamicQueryByProjectionExisting() throws Exception -->Line_7 $$ dynamicQuery.add(RestrictionsFactoryUtil.in("templateVersionId", new Object[] [ CD ]
Line_6 $$ Object newTemplateVersionId = newDDMTemplateVersion.getTemplateVersionId()-->Line_11 $$ Assert.assertEquals(existingTemplateVersionId, newTemplateVersionId)[ FD ]
