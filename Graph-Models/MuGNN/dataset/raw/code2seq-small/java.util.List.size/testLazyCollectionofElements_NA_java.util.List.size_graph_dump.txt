Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_19 $$ boy.getCharacters().add(Character.CRAFTY)[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_34 $$ assertEquals(1, result.size())[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_26 $$ assertTrue(boy.getNickNames().contains("Thing"))[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_11 $$ boy.getScorePerNickName().put("Johnny", 3)[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_22 $$ s.clear()[ CD ]
Line_6 $$ Boy boy = new Boy()-->Line_29 $$ assertEquals(new Integer(5), boy.getScorePerNickName().get("Thing"))[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_20 $$ s.persist(boy)[ CD ]
Line_4 $$ Session s = openSession()-->Line_22 $$ s.clear()[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_17 $$ boy.setFavoriteNumbers(favNbrs)[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_4 $$ Session s = openSession()[ CD ]
Line_6 $$ Boy boy = new Boy()-->Line_18 $$ boy.getCharacters().add(Character.GENTLE)[ FD ]
Line_4 $$ Session s = openSession()-->Line_23 $$ Transaction tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_30 $$ assertNotNull(boy.getFavoriteNumbers())[ CD ]
Line_6 $$ Boy boy = new Boy()-->Line_20 $$ s.persist(boy)[ FD ]
Line_4 $$ Session s = openSession()-->Line_35 $$ s.delete(boy)[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_28 $$ assertTrue(boy.getScorePerNickName().containsKey("Thing"))[ FD ]
Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_29 $$ assertEquals(new Integer(5), boy.getScorePerNickName().get("Thing"))[ FD ]
Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_30 $$ assertNotNull(boy.getFavoriteNumbers())[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_21 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_32 $$ assertTrue(boy.getCharacters().contains(Character.CRAFTY))[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_37 $$ s.close()[ CD ]
Line_6 $$ Boy boy = new Boy()-->Line_25 $$ assertNotNull(boy.getNickNames())[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())[ FD ]
Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_26 $$ assertTrue(boy.getNickNames().contains("Thing"))[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_35 $$ s.delete(boy)[ CD ]
Line_23 $$ Transaction tx = s.beginTransaction()-->Line_36 $$ tx.commit()[ FD ]
Line_14 $$ for (int index = 0; index < favNbrs.length - 1; index++) -->Line_15 $$ favNbrs[index] = index * 3[ CD ]
Line_14 $$ for (int index = 0; index < favNbrs.length - 1; index++) -->Line_15 $$ favNbrs[index] = index * 3[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_9 $$ boy.getNickNames().add("Johnny")[ CD ]
Line_6 $$ Boy boy = new Boy()-->Line_32 $$ assertTrue(boy.getCharacters().contains(Character.CRAFTY))[ FD ]
Line_4 $$ Session s = openSession()-->Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())[ FD ]
Line_4 $$ Session s = openSession()-->Line_33 $$ List result = s.createQuery("select boy from Boy boy join boy.nickNames names where names = :name").setParameter("name", "Thing").list()[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_8 $$ boy.setLastName("Doe")[ CD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ s.getTransaction().begin()[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_18 $$ boy.getCharacters().add(Character.GENTLE)[ CD ]
Line_6 $$ Boy boy = new Boy()-->Line_19 $$ boy.getCharacters().add(Character.CRAFTY)[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_26 $$ assertTrue(boy.getNickNames().contains("Thing"))[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_10 $$ boy.getNickNames().add("Thing")[ CD ]
Line_6 $$ Boy boy = new Boy()-->Line_7 $$ boy.setFirstName("John")[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_9 $$ boy.getNickNames().add("Johnny")[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_10 $$ boy.getNickNames().add("Thing")[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_8 $$ boy.setLastName("Doe")[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_17 $$ boy.setFavoriteNumbers(favNbrs)[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_12 $$ boy.getScorePerNickName().put("Thing", 5)[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_13 $$ int[] favNbrs = new int[4][ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_23 $$ Transaction tx = s.beginTransaction()[ CD ]
Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_28 $$ assertTrue(boy.getScorePerNickName().containsKey("Thing"))[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_3 $$ assertEquals("BoyFavoriteNumbers", metadata().getCollectionBinding(Boy.class.getName() + '.' + "favoriteNumbers").getCollectionTable().getName())[ CD ]
Line_6 $$ Boy boy = new Boy()-->Line_35 $$ s.delete(boy)[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_5 $$ s.getTransaction().begin()[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_25 $$ assertNotNull(boy.getNickNames())[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_31 $$ assertEquals(3, boy.getFavoriteNumbers()[1])[ CD ]
Line_6 $$ Boy boy = new Boy()-->Line_30 $$ assertNotNull(boy.getFavoriteNumbers())[ FD ]
Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_25 $$ assertNotNull(boy.getNickNames())[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_31 $$ assertEquals(3, boy.getFavoriteNumbers()[1])[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_29 $$ assertEquals(new Integer(5), boy.getScorePerNickName().get("Thing"))[ CD ]
Line_33 $$ List result = s.createQuery("select boy from Boy boy join boy.nickNames names where names = :name").setParameter("name", "Thing").list()-->Line_34 $$ assertEquals(1, result.size())[ FD ]
Line_13 $$ int[] favNbrs = new int[4]-->Line_17 $$ boy.setFavoriteNumbers(favNbrs)[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_14 $$ for (int index = 0; index < favNbrs.length - 1; index++) [ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_33 $$ List result = s.createQuery("select boy from Boy boy join boy.nickNames names where names = :name").setParameter("name", "Thing").list()[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_36 $$ tx.commit()[ CD ]
Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_35 $$ s.delete(boy)[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_11 $$ boy.getScorePerNickName().put("Johnny", 3)[ FD ]
Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_27 $$ assertNotNull(boy.getScorePerNickName())[ FD ]
Line_4 $$ Session s = openSession()-->Line_37 $$ s.close()[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_6 $$ Boy boy = new Boy()[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_7 $$ boy.setFirstName("John")[ CD ]
Line_4 $$ Session s = openSession()-->Line_20 $$ s.persist(boy)[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_27 $$ assertNotNull(boy.getScorePerNickName())[ FD ]
Line_6 $$ Boy boy = new Boy()-->Line_12 $$ boy.getScorePerNickName().put("Thing", 5)[ FD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_27 $$ assertNotNull(boy.getScorePerNickName())[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_28 $$ assertTrue(boy.getScorePerNickName().containsKey("Thing"))[ CD ]
Line_2 $$ public void testLazyCollectionofElements() throws Exception -->Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())[ CD ]
Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_31 $$ assertEquals(3, boy.getFavoriteNumbers()[1])[ FD ]
Line_4 $$ Session s = openSession()-->Line_21 $$ s.getTransaction().commit()[ FD ]
Line_24 $$ boy = (Boy) s.get(Boy.class, boy.getId())-->Line_32 $$ assertTrue(boy.getCharacters().contains(Character.CRAFTY))[ FD ]
