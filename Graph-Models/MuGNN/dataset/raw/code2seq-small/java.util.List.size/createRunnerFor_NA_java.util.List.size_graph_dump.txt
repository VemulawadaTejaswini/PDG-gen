Line_3 $$ RunnerBuilder runnerBuilder = new RunnerBuilder() -->Line_16 $$ return filter(new BlockJUnit4ClassRunner(testClass))[ CD ]
Line_5 $$ for (Class<?> candidate = testClass; candidate != null; candidate = candidate.getSuperclass()) -->Line_6 $$ RunWith runWith = candidate.getAnnotation(RunWith.class)[ CD ]
Line_6 $$ RunWith runWith = candidate.getAnnotation(RunWith.class)-->Line_7 $$ if (runWith != null && !AbstractMultiTestRunner.class.isAssignableFrom(runWith.value())) [ FD ]
Line_5 $$ for (Class<?> candidate = testClass; candidate != null; candidate = candidate.getSuperclass()) -->Line_7 $$ if (runWith != null && !AbstractMultiTestRunner.class.isAssignableFrom(runWith.value())) [ CD ]
Line_3 $$ RunnerBuilder runnerBuilder = new RunnerBuilder() -->Line_25 $$ return r[ CD ]
Line_6 $$ RunWith runWith = candidate.getAnnotation(RunWith.class)-->Line_9 $$ Runner r = (Runner) runWith.value().getConstructors()[0].newInstance(testClass)[ FD ]
Line_3 $$ RunnerBuilder runnerBuilder = new RunnerBuilder() -->Line_9 $$ Runner r = (Runner) runWith.value().getConstructors()[0].newInstance(testClass)[ FD ]
Line_5 $$ for (Class<?> candidate = testClass; candidate != null; candidate = candidate.getSuperclass()) -->Line_6 $$ RunWith runWith = candidate.getAnnotation(RunWith.class)[ FD ]
Line_2 $$ private static Runner createRunnerFor(List<? extends Class<?>> targetClasses, final List<Filter> filters) throws InitializationError -->Line_3 $$ RunnerBuilder runnerBuilder = new RunnerBuilder() [ CD ]
Line_9 $$ Runner r = (Runner) runWith.value().getConstructors()[0].newInstance(testClass)-->Line_10 $$ return filter(r)[ FD ]
Line_2 $$ private static Runner createRunnerFor(List<? extends Class<?>> targetClasses, final List<Filter> filters) throws InitializationError -->Line_28 $$ return new Suite(runnerBuilder, targetClasses.toArray(new Class<?>[targetClasses.size()]))[ FD ]
Line_2 $$ private static Runner createRunnerFor(List<? extends Class<?>> targetClasses, final List<Filter> filters) throws InitializationError -->Line_28 $$ return new Suite(runnerBuilder, targetClasses.toArray(new Class<?>[targetClasses.size()]))[ CD ]
Line_3 $$ RunnerBuilder runnerBuilder = new RunnerBuilder() -->Line_5 $$ for (Class<?> candidate = testClass; candidate != null; candidate = candidate.getSuperclass()) [ CD ]
Line_19 $$ for (Filter filter : filters) -->Line_21 $$ ((Filterable) r).filter(filter)[ FD ]
