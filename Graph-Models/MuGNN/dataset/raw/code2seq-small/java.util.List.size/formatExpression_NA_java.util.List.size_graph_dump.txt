Line_19 $$ ImmutableList.Builder<String> expressions = ImmutableList.builder()-->Line_24 $$ return expressions.build()[ FD ]
Line_10 $$ value = "'" + value + "'"-->Line_8 $$ if (value != null) [ FD ]
Line_4 $$ List<Set<String>> unrolledValues = new ArrayList()-->Line_12 $$ unrolledValues.add(ImmutableSet.of(String.valueOf(value)))[ FD ]
Line_8 $$ if (value != null) -->Line_9 $$ if (type.equals("varchar")) [ CD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_5 $$ for (int i = 0; i < values.size(); i++) [ CD ]
Line_21 $$ for (List<String> valueList : valueLists) -->Line_22 $$ expressions.add(format(expressionPattern, valueList.toArray(new Object[valueList.size()])))[ FD ]
Line_4 $$ List<Set<String>> unrolledValues = new ArrayList()-->Line_20 $$ Set<List<String>> valueLists = Sets.cartesianProduct(unrolledValues)[ FD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_7 $$ String type = types.get(i)[ FD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_3 $$ Preconditions.checkArgument(values.size() == types.size())[ CD ]
Line_5 $$ for (int i = 0; i < values.size(); i++) -->Line_6 $$ Object value = values.get(i)[ FD ]
Line_9 $$ if (type.equals("varchar")) -->Line_10 $$ value = "'" + value + "'"[ CD ]
Line_7 $$ String type = types.get(i)-->Line_9 $$ if (type.equals("varchar")) [ FD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_20 $$ Set<List<String>> valueLists = Sets.cartesianProduct(unrolledValues)[ CD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_4 $$ List<Set<String>> unrolledValues = new ArrayList()[ CD ]
Line_6 $$ Object value = values.get(i)-->Line_8 $$ if (value != null) [ FD ]
Line_5 $$ for (int i = 0; i < values.size(); i++) -->Line_7 $$ String type = types.get(i)[ CD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_3 $$ Preconditions.checkArgument(values.size() == types.size())[ FD ]
Line_8 $$ if (value != null) -->Line_12 $$ unrolledValues.add(ImmutableSet.of(String.valueOf(value)))[ CD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_6 $$ Object value = values.get(i)[ FD ]
Line_5 $$ for (int i = 0; i < values.size(); i++) -->Line_6 $$ Object value = values.get(i)[ CD ]
Line_5 $$ for (int i = 0; i < values.size(); i++) -->Line_8 $$ if (value != null) [ CD ]
Line_6 $$ Object value = values.get(i)-->Line_10 $$ value = "'" + value + "'"[ FD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_5 $$ for (int i = 0; i < values.size(); i++) [ FD ]
Line_10 $$ value = "'" + value + "'"-->Line_12 $$ unrolledValues.add(ImmutableSet.of(String.valueOf(value)))[ FD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_24 $$ return expressions.build()[ CD ]
Line_19 $$ ImmutableList.Builder<String> expressions = ImmutableList.builder()-->Line_22 $$ expressions.add(format(expressionPattern, valueList.toArray(new Object[valueList.size()])))[ FD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_22 $$ expressions.add(format(expressionPattern, valueList.toArray(new Object[valueList.size()])))[ FD ]
Line_5 $$ for (int i = 0; i < values.size(); i++) -->Line_7 $$ String type = types.get(i)[ FD ]
Line_6 $$ Object value = values.get(i)-->Line_12 $$ unrolledValues.add(ImmutableSet.of(String.valueOf(value)))[ FD ]
Line_2 $$ private List<String> formatExpression(String expressionPattern, List<Object> values, List<String> types) -->Line_19 $$ ImmutableList.Builder<String> expressions = ImmutableList.builder()[ CD ]
