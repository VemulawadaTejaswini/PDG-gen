Line_11 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) -->Line_14 $$ if (start != previousBeginning)[ CD ]
Line_11 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) -->Line_16 $$ previousBeginning = start[ CD ]
Line_10 $$ for (Diff diff : myDiffs) -->Line_11 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) [ FD ]
Line_10 $$ for (Diff diff : myDiffs) -->Line_12 $$ Interval interval = diff.getInterval(side)[ FD ]
Line_9 $$ int previousBeginning = Integer.MIN_VALUE-->Line_16 $$ previousBeginning = start[ FD ]
Line_12 $$ Interval interval = diff.getInterval(side)-->Line_13 $$ int start = interval.getStart()[ FD ]
Line_13 $$ int start = interval.getStart()-->Line_16 $$ previousBeginning = start[ FD ]
Line_9 $$ int previousBeginning = Integer.MIN_VALUE-->Line_14 $$ if (start != previousBeginning)[ FD ]
Line_13 $$ int start = interval.getStart()-->Line_14 $$ if (start != previousBeginning)[ FD ]
Line_11 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) -->Line_12 $$ Interval interval = diff.getInterval(side)[ CD ]
Line_8 $$ List<Integer> result = new ArrayList<Integer>(myDiffs.size())-->Line_15 $$ result.add(start)[ FD ]
Line_8 $$ List<Integer> result = new ArrayList<Integer>(myDiffs.size())-->Line_19 $$ return ArrayUtil.toIntArray(result)[ FD ]
Line_14 $$ if (start != previousBeginning)-->Line_15 $$ result.add(start)[ CD ]
Line_11 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) -->Line_13 $$ int start = interval.getStart()[ CD ]
Line_13 $$ int start = interval.getStart()-->Line_15 $$ result.add(start)[ FD ]
