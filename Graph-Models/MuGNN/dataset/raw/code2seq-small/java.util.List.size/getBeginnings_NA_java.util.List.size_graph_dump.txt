Line_7 $$ Interval interval = diff.getInterval(side)-->Line_8 $$ int start = interval.getStart()[ FD ]
Line_5 $$ for (Diff diff : myDiffs) -->Line_6 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) [ FD ]
Line_8 $$ int start = interval.getStart()-->Line_10 $$ result.add(start)[ FD ]
Line_6 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) -->Line_8 $$ int start = interval.getStart()[ CD ]
Line_9 $$ if (start != previousBeginning)-->Line_10 $$ result.add(start)[ CD ]
Line_8 $$ int start = interval.getStart()-->Line_11 $$ previousBeginning = start[ FD ]
Line_4 $$ int previousBeginning = Integer.MIN_VALUE-->Line_9 $$ if (start != previousBeginning)[ FD ]
Line_8 $$ int start = interval.getStart()-->Line_9 $$ if (start != previousBeginning)[ FD ]
Line_2 $$ public int[] getBeginnings(FragmentSide side, boolean unappliedOnly) -->Line_6 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) [ FD ]
Line_2 $$ public int[] getBeginnings(FragmentSide side, boolean unappliedOnly) -->Line_7 $$ Interval interval = diff.getInterval(side)[ FD ]
Line_3 $$ List<Integer> result = new ArrayList<Integer>(myDiffs.size())-->Line_14 $$ return ArrayUtil.toIntArray(result)[ FD ]
Line_2 $$ public int[] getBeginnings(FragmentSide side, boolean unappliedOnly) -->Line_14 $$ return ArrayUtil.toIntArray(result)[ CD ]
Line_6 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) -->Line_9 $$ if (start != previousBeginning)[ CD ]
Line_2 $$ public int[] getBeginnings(FragmentSide side, boolean unappliedOnly) -->Line_4 $$ int previousBeginning = Integer.MIN_VALUE[ CD ]
Line_2 $$ public int[] getBeginnings(FragmentSide side, boolean unappliedOnly) -->Line_3 $$ List<Integer> result = new ArrayList<Integer>(myDiffs.size())[ CD ]
Line_5 $$ for (Diff diff : myDiffs) -->Line_7 $$ Interval interval = diff.getInterval(side)[ FD ]
Line_4 $$ int previousBeginning = Integer.MIN_VALUE-->Line_11 $$ previousBeginning = start[ FD ]
Line_6 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) -->Line_11 $$ previousBeginning = start[ CD ]
Line_6 $$ if (!unappliedOnly || !diff.getDiffType().isApplied()) -->Line_7 $$ Interval interval = diff.getInterval(side)[ CD ]
Line_3 $$ List<Integer> result = new ArrayList<Integer>(myDiffs.size())-->Line_10 $$ result.add(start)[ FD ]
