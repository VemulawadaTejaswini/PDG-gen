Line_10 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select key(s.addresses) from Student s")[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_25 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_19 $$ List resultList = (List) results-->Line_20 $$ assertEquals(2, resultList.size())[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(2, resultList.size())[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ List resultList = (List) results[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertTrue(resultList.contains("work"))[ CD ]
Line_10 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select key(s.addresses) from Student s")[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertTrue(resultList.contains("home"))[ CD ]
Line_19 $$ List resultList = (List) results-->Line_22 $$ assertTrue(resultList.contains("work"))[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a").setProjection(Projections.property("a.addressType"))[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a").setProjection(Projections.property("a.addressType"))[ CD ]
Line_19 $$ List resultList = (List) results-->Line_21 $$ assertTrue(resultList.contains("home"))[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_13 $$ return s.createQuery("select key(s.addresses) from Student s")[ FD ]
