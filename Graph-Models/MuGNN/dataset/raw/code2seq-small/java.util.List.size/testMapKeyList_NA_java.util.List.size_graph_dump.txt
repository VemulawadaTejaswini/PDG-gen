Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select key(s.addresses) from Student s")[ FD ]
Line_2 $$ public void testMapKeyList() throws Exception -->Line_21 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ assertTrue(resultList.contains("home"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a").setProjection(Projections.property("a.addressType"))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_18 $$ assertTrue(resultList.contains("work"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a").setProjection(Projections.property("a.addressType"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_21 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select key(s.addresses) from Student s")[ CD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select key(s.addresses) from Student s")[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ assertTrue(resultList.contains("work"))[ CD ]
Line_2 $$ public void testMapKeyList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ assertTrue(resultList.contains("home"))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
