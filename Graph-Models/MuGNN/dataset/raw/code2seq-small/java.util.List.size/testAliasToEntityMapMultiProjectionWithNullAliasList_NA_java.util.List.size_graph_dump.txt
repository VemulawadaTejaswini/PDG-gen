Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_33 $$ assertNull(shermanMap.get("year"))[ CD ]
Line_10 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select e.student as student, e.semester, e.year, e.course as course from Enrolment e order by e.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ List resultList = (List) results[ CD ]
Line_21 $$ Map yogiMap = (Map) resultList.get(0)-->Line_29 $$ assertNull(yogiMap.get("semester"))[ FD ]
Line_21 $$ Map yogiMap = (Map) resultList.get(0)-->Line_27 $$ assertEquals(yogiExpected.getStudentNumber(), ((Student) yogiMap.get("student")).getStudentNumber())[ FD ]
Line_19 $$ List resultList = (List) results-->Line_21 $$ Map yogiMap = (Map) resultList.get(0)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ Map yogiMap = (Map) resultList.get(0)[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertEquals(yogiExpected.getStudentNumber(), ((Student) yogiMap.get("student")).getStudentNumber())[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_28 $$ assertEquals(shermanExpected.getStudentNumber(), ((Student) shermanMap.get("student")).getStudentNumber())[ CD ]
Line_22 $$ Map shermanMap = (Map) resultList.get(1)-->Line_33 $$ assertNull(shermanMap.get("year"))[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_30 $$ assertNull(yogiMap.get("year"))[ CD ]
Line_21 $$ Map yogiMap = (Map) resultList.get(0)-->Line_30 $$ assertNull(yogiMap.get("year"))[ FD ]
Line_22 $$ Map shermanMap = (Map) resultList.get(1)-->Line_34 $$ assertEquals(courseExpected, shermanMap.get("course"))[ FD ]
Line_21 $$ Map yogiMap = (Map) resultList.get(0)-->Line_31 $$ assertEquals(courseExpected, yogiMap.get("course"))[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_37 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_31 $$ assertEquals(courseExpected, yogiMap.get("course"))[ CD ]
Line_19 $$ List resultList = (List) results-->Line_20 $$ assertEquals(2, resultList.size())[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_32 $$ assertNull(shermanMap.get("semester"))[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(2, resultList.size())[ CD ]
Line_19 $$ List resultList = (List) results-->Line_22 $$ Map shermanMap = (Map) resultList.get(1)[ FD ]
Line_22 $$ Map shermanMap = (Map) resultList.get(1)-->Line_32 $$ assertNull(shermanMap.get("semester"))[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_34 $$ assertEquals(courseExpected, shermanMap.get("course"))[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ Map shermanMap = (Map) resultList.get(1)[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.projectionList().add(Property.forName("e.student"), "student").add(Property.forName("e.semester")).add(Property.forName("e.year")).add(Property.forName("e.course"), "course")).addOrder(Order.asc("e.studentNumber")).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_13 $$ return s.createQuery("select e.student as student, e.semester, e.year, e.course as course from Enrolment e order by e.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_10 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_13 $$ return s.createQuery("select e.student as student, e.semester, e.year, e.course as course from Enrolment e order by e.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.projectionList().add(Property.forName("e.student"), "student").add(Property.forName("e.semester")).add(Property.forName("e.year")).add(Property.forName("e.course"), "course")).addOrder(Order.asc("e.studentNumber")).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_22 $$ Map shermanMap = (Map) resultList.get(1)-->Line_28 $$ assertEquals(shermanExpected.getStudentNumber(), ((Student) shermanMap.get("student")).getStudentNumber())[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_29 $$ assertNull(yogiMap.get("semester"))[ CD ]
