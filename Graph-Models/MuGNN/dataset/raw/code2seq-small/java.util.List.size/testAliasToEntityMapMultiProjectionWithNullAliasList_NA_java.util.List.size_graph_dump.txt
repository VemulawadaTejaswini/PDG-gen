Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.projectionList().add(Property.forName("e.student"), "student").add(Property.forName("e.semester")).add(Property.forName("e.year")).add(Property.forName("e.course"), "course")).addOrder(Order.asc("e.studentNumber")).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_18 $$ Map shermanMap = (Map) resultList.get(1)-->Line_26 $$ assertNull(shermanMap.get("year"))[ FD ]
Line_18 $$ Map shermanMap = (Map) resultList.get(1)-->Line_25 $$ assertNull(shermanMap.get("semester"))[ FD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_24 $$ assertEquals(courseExpected, yogiMap.get("course"))[ FD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_22 $$ assertNull(yogiMap.get("semester"))[ FD ]
Line_18 $$ Map shermanMap = (Map) resultList.get(1)-->Line_21 $$ assertEquals(shermanExpected.getStudentNumber(), ((Student) shermanMap.get("student")).getStudentNumber())[ FD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_23 $$ assertNull(yogiMap.get("year"))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ Map yogiMap = (Map) resultList.get(0)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ Map yogiMap = (Map) resultList.get(0)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertTrue(yogiMap.get("student") instanceof Student)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(courseExpected, yogiMap.get("course"))[ CD ]
Line_2 $$ public void testAliasToEntityMapMultiProjectionWithNullAliasList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_19 $$ assertTrue(yogiMap.get("student") instanceof Student)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(shermanExpected.getStudentNumber(), ((Student) shermanMap.get("student")).getStudentNumber())[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select e.student as student, e.semester, e.year, e.course as course from Enrolment e order by e.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select e.student as student, e.semester, e.year, e.course as course from Enrolment e order by e.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_30 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertNull(shermanMap.get("semester"))[ CD ]
Line_2 $$ public void testAliasToEntityMapMultiProjectionWithNullAliasList() throws Exception -->Line_30 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertNull(shermanMap.get("year"))[ CD ]
Line_18 $$ Map shermanMap = (Map) resultList.get(1)-->Line_27 $$ assertEquals(courseExpected, shermanMap.get("course"))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_18 $$ Map shermanMap = (Map) resultList.get(1)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertNull(yogiMap.get("semester"))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ Map shermanMap = (Map) resultList.get(1)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(yogiExpected.getStudentNumber(), ((Student) yogiMap.get("student")).getStudentNumber())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertNull(yogiMap.get("year"))[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select e.student as student, e.semester, e.year, e.course as course from Enrolment e order by e.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.projectionList().add(Property.forName("e.student"), "student").add(Property.forName("e.semester")).add(Property.forName("e.year")).add(Property.forName("e.course"), "course")).addOrder(Order.asc("e.studentNumber")).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertEquals(courseExpected, shermanMap.get("course"))[ CD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_20 $$ assertEquals(yogiExpected.getStudentNumber(), ((Student) yogiMap.get("student")).getStudentNumber())[ FD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
