Line_12 $$ for (int i = 0; i < scheduled.size(); i++) -->Line_13 $$ TextMergeChange change = scheduled.get(i)[ FD ]
Line_7 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_19 $$ if (!myScheduled.isEmpty()) [ CD ]
Line_7 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_18 $$ myStatusPanel.setBusy(false)[ CD ]
Line_3 $$ final List<List<MergeWordFragment>> result = new ArrayList<List<MergeWordFragment>>(data.size())-->Line_5 $$ result.add(DiffUtil.compareThreesideInner(chunkData.text, ComparisonPolicy.DEFAULT, indicator))[ FD ]
Line_7 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_12 $$ for (int i = 0; i < scheduled.size(); i++) [ CD ]
Line_12 $$ for (int i = 0; i < scheduled.size(); i++) -->Line_13 $$ TextMergeChange change = scheduled.get(i)[ CD ]
Line_2 $$ private void performRediff(@NotNull final List<TextMergeChange> scheduled, @NotNull final List<InnerChunkData> data, @NotNull final ProgressIndicator indicator) -->Line_13 $$ TextMergeChange change = scheduled.get(i)[ FD ]
Line_9 $$ if (!myEnabled || indicator.isCanceled())-->Line_10 $$ return[ CD ]
Line_2 $$ private void performRediff(@NotNull final List<TextMergeChange> scheduled, @NotNull final List<InnerChunkData> data, @NotNull final ProgressIndicator indicator) -->Line_12 $$ for (int i = 0; i < scheduled.size(); i++) [ FD ]
Line_13 $$ TextMergeChange change = scheduled.get(i)-->Line_16 $$ change.setInnerFragments(result.get(i))[ FD ]
Line_12 $$ for (int i = 0; i < scheduled.size(); i++) -->Line_16 $$ change.setInnerFragments(result.get(i))[ FD ]
Line_2 $$ private void performRediff(@NotNull final List<TextMergeChange> scheduled, @NotNull final List<InnerChunkData> data, @NotNull final ProgressIndicator indicator) -->Line_9 $$ if (!myEnabled || indicator.isCanceled())[ FD ]
Line_3 $$ final List<List<MergeWordFragment>> result = new ArrayList<List<MergeWordFragment>>(data.size())-->Line_16 $$ change.setInnerFragments(result.get(i))[ FD ]
Line_12 $$ for (int i = 0; i < scheduled.size(); i++) -->Line_16 $$ change.setInnerFragments(result.get(i))[ CD ]
Line_13 $$ TextMergeChange change = scheduled.get(i)-->Line_14 $$ if (myScheduled.contains(change))[ FD ]
Line_7 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_9 $$ if (!myEnabled || indicator.isCanceled())[ CD ]
Line_19 $$ if (!myScheduled.isEmpty()) -->Line_20 $$ launchRediff()[ CD ]
Line_2 $$ private void performRediff(@NotNull final List<TextMergeChange> scheduled, @NotNull final List<InnerChunkData> data, @NotNull final ProgressIndicator indicator) -->Line_7 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() [ CD ]
Line_2 $$ private void performRediff(@NotNull final List<TextMergeChange> scheduled, @NotNull final List<InnerChunkData> data, @NotNull final ProgressIndicator indicator) -->Line_5 $$ result.add(DiffUtil.compareThreesideInner(chunkData.text, ComparisonPolicy.DEFAULT, indicator))[ FD ]
Line_2 $$ private void performRediff(@NotNull final List<TextMergeChange> scheduled, @NotNull final List<InnerChunkData> data, @NotNull final ProgressIndicator indicator) -->Line_3 $$ final List<List<MergeWordFragment>> result = new ArrayList<List<MergeWordFragment>>(data.size())[ FD ]
Line_2 $$ private void performRediff(@NotNull final List<TextMergeChange> scheduled, @NotNull final List<InnerChunkData> data, @NotNull final ProgressIndicator indicator) -->Line_3 $$ final List<List<MergeWordFragment>> result = new ArrayList<List<MergeWordFragment>>(data.size())[ CD ]
Line_12 $$ for (int i = 0; i < scheduled.size(); i++) -->Line_14 $$ if (myScheduled.contains(change))[ CD ]
