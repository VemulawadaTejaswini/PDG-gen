Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_19 $$ if (injectConstructors.size() > 1) [ CD ]
Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_16 $$ if (injectConstructors.isEmpty()) [ CD ]
Line_10 $$ List<Constructor<?>> injectConstructors = new ArrayList<Constructor<?>>()-->Line_22 $$ return injectConstructors.get(0)[ FD ]
Line_4 $$ if (constructors.length == 1) -->Line_5 $$ Constructor<?> constructor = constructors[0][ CD ]
Line_10 $$ List<Constructor<?>> injectConstructors = new ArrayList<Constructor<?>>()-->Line_13 $$ injectConstructors.add(constructor)[ FD ]
Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_3 $$ Constructor<?>[] constructors = type.getDeclaredConstructors()[ CD ]
Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_4 $$ if (constructors.length == 1) [ CD ]
Line_5 $$ Constructor<?> constructor = constructors[0]-->Line_6 $$ if (constructor.getParameterTypes().length == 0 && isPublicOrPackageScoped(type, constructor)) [ FD ]
Line_6 $$ if (constructor.getParameterTypes().length == 0 && isPublicOrPackageScoped(type, constructor)) -->Line_7 $$ return constructor[ CD ]
Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_3 $$ Constructor<?>[] constructors = type.getDeclaredConstructors()[ FD ]
Line_10 $$ List<Constructor<?>> injectConstructors = new ArrayList<Constructor<?>>()-->Line_19 $$ if (injectConstructors.size() > 1) [ FD ]
Line_5 $$ Constructor<?> constructor = constructors[0]-->Line_12 $$ if (constructor.getAnnotation(Inject.class) != null) [ FD ]
Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_17 $$ throw new IllegalArgumentException(String.format("Class %s has no constructor that is annotated with @Inject.", type.getName()))[ FD ]
Line_4 $$ if (constructors.length == 1) -->Line_6 $$ if (constructor.getParameterTypes().length == 0 && isPublicOrPackageScoped(type, constructor)) [ CD ]
Line_12 $$ if (constructor.getAnnotation(Inject.class) != null) -->Line_13 $$ injectConstructors.add(constructor)[ CD ]
Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_10 $$ List<Constructor<?>> injectConstructors = new ArrayList<Constructor<?>>()[ CD ]
Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_6 $$ if (constructor.getParameterTypes().length == 0 && isPublicOrPackageScoped(type, constructor)) [ FD ]
Line_5 $$ Constructor<?> constructor = constructors[0]-->Line_13 $$ injectConstructors.add(constructor)[ FD ]
Line_10 $$ List<Constructor<?>> injectConstructors = new ArrayList<Constructor<?>>()-->Line_16 $$ if (injectConstructors.isEmpty()) [ FD ]
Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_20 $$ throw new IllegalArgumentException(String.format("Class %s has multiple constructors that are annotated with @Inject.", type.getName()))[ FD ]
Line_2 $$ private <T> Constructor<?> selectConstructor(Class<T> type) -->Line_22 $$ return injectConstructors.get(0)[ CD ]
