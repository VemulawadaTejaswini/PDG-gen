Line_2 $$ public void testProjections() -->Line_43 $$ assertEquals(new Long(2), result[0])[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_73 $$ s.delete(gavin)[ FD ]
Line_54 $$ Map m0 = (Map) resultWithMaps.get(0)-->Line_57 $$ assertEquals(new Long(667), m0.get("stNumber"))[ FD ]
Line_26 $$ enrolment = new Enrolment()-->Line_31 $$ enrolment.setStudent(gavin)[ FD ]
Line_2 $$ public void testProjections() -->Line_38 $$ assertEquals(count, new Long(2))[ CD ]
Line_2 $$ public void testProjections() -->Line_42 $$ Object[] result = (Object[]) object[ CD ]
Line_13 $$ Student xam = new Student()-->Line_23 $$ enrolment.setStudentNumber(xam.getStudentNumber())[ FD ]
Line_2 $$ public void testProjections() -->Line_31 $$ enrolment.setStudent(gavin)[ CD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_22 $$ enrolment.setStudent(xam)[ FD ]
Line_5 $$ Course course = new Course()-->Line_28 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_58 $$ List resultWithAliasedBean = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Projections.property("st.name"), "studentName").add(Projections.property("co.description"), "courseDescription")).addOrder(Order.desc("studentName")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class)).list()-->Line_60 $$ StudentDTO dto = (StudentDTO) resultWithAliasedBean.get(0)[ FD ]
Line_26 $$ enrolment = new Enrolment()-->Line_30 $$ enrolment.setYear((short) 1998)[ FD ]
Line_2 $$ public void testProjections() -->Line_39 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("courseCode").as("cnt")).uniqueResult()[ CD ]
Line_60 $$ StudentDTO dto = (StudentDTO) resultWithAliasedBean.get(0)-->Line_62 $$ assertNotNull(dto.getName())[ FD ]
Line_2 $$ public void testProjections() -->Line_26 $$ enrolment = new Enrolment()[ CD ]
Line_2 $$ public void testProjections() -->Line_23 $$ enrolment.setStudentNumber(xam.getStudentNumber())[ CD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_25 $$ s.save(enrolment)[ FD ]
Line_2 $$ public void testProjections() -->Line_51 $$ assertEquals(course.getCourseCode(), m1.get("cCode"))[ CD ]
Line_2 $$ public void testProjections() -->Line_72 $$ assertSame(g, gavin)[ CD ]
Line_2 $$ public void testProjections() -->Line_6 $$ course.setCourseCode("HIB")[ CD ]
Line_2 $$ public void testProjections() -->Line_69 $$ assertEquals(list.size(), 2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_75 $$ s.delete(course)[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("studentNumber")).uniqueResult()[ FD ]
Line_2 $$ public void testProjections() -->Line_60 $$ StudentDTO dto = (StudentDTO) resultWithAliasedBean.get(0)[ CD ]
Line_13 $$ Student xam = new Student()-->Line_16 $$ s.save(xam)[ FD ]
Line_2 $$ public void testProjections() -->Line_46 $$ assertEquals(384.0, ((Double) result[3]).doubleValue(), 0.01)[ CD ]
Line_2 $$ public void testProjections() -->Line_25 $$ s.save(enrolment)[ CD ]
Line_3 $$ Session s = openSession()-->Line_39 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("courseCode").as("cnt")).uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_70 $$ Object g = s.createCriteria(Student.class).add(Restrictions.idEq(new Long(667))).setFetchMode("enrolments", FetchMode.JOIN).uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_2 $$ public void testProjections() -->Line_28 $$ enrolment.setCourseCode(course.getCourseCode())[ CD ]
Line_2 $$ public void testProjections() -->Line_77 $$ s.close()[ CD ]
Line_2 $$ public void testProjections() -->Line_7 $$ course.setDescription("Hibernate Training")[ CD ]
Line_2 $$ public void testProjections() -->Line_8 $$ s.save(course)[ CD ]
Line_47 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("studentNumber"), "stNumber").add(Projections.property("courseCode"), "cCode"))).add(Restrictions.gt("studentNumber", new Long(665))).add(Restrictions.lt("studentNumber", new Long(668))).addOrder(Order.asc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_54 $$ Map m0 = (Map) resultWithMaps.get(0)[ FD ]
Line_2 $$ public void testProjections() -->Line_70 $$ Object g = s.createCriteria(Student.class).add(Restrictions.idEq(new Long(667))).setFetchMode("enrolments", FetchMode.JOIN).uniqueResult()[ CD ]
Line_2 $$ public void testProjections() -->Line_3 $$ Session s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_73 $$ s.delete(gavin)[ FD ]
Line_2 $$ public void testProjections() -->Line_52 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.property("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()[ CD ]
Line_2 $$ public void testProjections() -->Line_10 $$ gavin.setName("Gavin King")[ CD ]
Line_13 $$ Student xam = new Student()-->Line_24 $$ xam.getEnrolments().add(enrolment)[ FD ]
Line_2 $$ public void testProjections() -->Line_75 $$ s.delete(course)[ CD ]
Line_35 $$ Long count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.count("studentNumber").setDistinct()).uniqueResult()-->Line_37 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("studentNumber")).uniqueResult()[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_31 $$ enrolment.setStudent(gavin)[ FD ]
Line_2 $$ public void testProjections() -->Line_11 $$ gavin.setStudentNumber(667)[ CD ]
Line_3 $$ Session s = openSession()-->Line_66 $$ Object[] array = (Object[]) s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(p1).add(p2)).uniqueResult()[ FD ]
Line_47 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("studentNumber"), "stNumber").add(Projections.property("courseCode"), "cCode"))).add(Restrictions.gt("studentNumber", new Long(665))).add(Restrictions.lt("studentNumber", new Long(668))).addOrder(Order.asc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_55 $$ m1 = (Map) resultWithMaps.get(1)[ FD ]
Line_5 $$ Course course = new Course()-->Line_7 $$ course.setDescription("Hibernate Training")[ FD ]
Line_5 $$ Course course = new Course()-->Line_19 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ Object object = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Projections.count("studentNumber")).add(Projections.max("studentNumber")).add(Projections.min("studentNumber")).add(Projections.avg("studentNumber"))).uniqueResult()[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_32 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_2 $$ public void testProjections() -->Line_36 $$ assertEquals(count, new Long(2))[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_32 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_37 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("studentNumber")).uniqueResult()-->Line_40 $$ assertEquals(count, new Long(1))[ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.save(course)[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_19 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_47 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("studentNumber"), "stNumber").add(Projections.property("courseCode"), "cCode"))).add(Restrictions.gt("studentNumber", new Long(665))).add(Restrictions.lt("studentNumber", new Long(668))).addOrder(Order.asc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_52 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.property("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()[ FD ]
Line_35 $$ Long count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.count("studentNumber").setDistinct()).uniqueResult()-->Line_36 $$ assertEquals(count, new Long(2))[ FD ]
Line_2 $$ public void testProjections() -->Line_40 $$ assertEquals(count, new Long(1))[ CD ]
Line_2 $$ public void testProjections() -->Line_53 $$ assertEquals(2, resultWithMaps.size())[ CD ]
Line_2 $$ public void testProjections() -->Line_74 $$ s.delete(xam)[ CD ]
Line_3 $$ Session s = openSession()-->Line_58 $$ List resultWithAliasedBean = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Projections.property("st.name"), "studentName").add(Projections.property("co.description"), "courseDescription")).addOrder(Order.desc("studentName")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class)).list()[ FD ]
Line_47 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("studentNumber"), "stNumber").add(Projections.property("courseCode"), "cCode"))).add(Restrictions.gt("studentNumber", new Long(665))).add(Restrictions.lt("studentNumber", new Long(668))).addOrder(Order.asc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_48 $$ assertEquals(1, resultWithMaps.size())[ FD ]
Line_26 $$ enrolment = new Enrolment()-->Line_29 $$ enrolment.setSemester((short) 3)[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_21 $$ enrolment.setYear((short) 1999)[ FD ]
Line_47 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("studentNumber"), "stNumber").add(Projections.property("courseCode"), "cCode"))).add(Restrictions.gt("studentNumber", new Long(665))).add(Restrictions.lt("studentNumber", new Long(668))).addOrder(Order.asc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_53 $$ assertEquals(2, resultWithMaps.size())[ FD ]
Line_2 $$ public void testProjections() -->Line_61 $$ assertNotNull(dto.getDescription())[ CD ]
Line_2 $$ public void testProjections() -->Line_66 $$ Object[] array = (Object[]) s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(p1).add(p2)).uniqueResult()[ CD ]
Line_2 $$ public void testProjections() -->Line_21 $$ enrolment.setYear((short) 1999)[ CD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.save(gavin)[ FD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("studentNumber"), "stNumber").add(Projections.property("courseCode"), "cCode"))).add(Restrictions.gt("studentNumber", new Long(665))).add(Restrictions.lt("studentNumber", new Long(668))).addOrder(Order.asc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()[ FD ]
Line_2 $$ public void testProjections() -->Line_65 $$ Projection p2 = Projections.projectionList().add(Projections.min("studentNumber")).add(Projections.avg("studentNumber")).add(Projections.sqlProjection("1 as constOne, count(*) as countStar", new String[] [ CD ]
Line_2 $$ public void testProjections() -->Line_27 $$ enrolment.setCourse(course)[ CD ]
Line_5 $$ Course course = new Course()-->Line_51 $$ assertEquals(course.getCourseCode(), m1.get("cCode"))[ FD ]
Line_2 $$ public void testProjections() -->Line_55 $$ m1 = (Map) resultWithMaps.get(1)[ CD ]
Line_2 $$ public void testProjections() -->Line_63 $$ s.createCriteria(Student.class).add(Restrictions.like("name", "Gavin", MatchMode.START)).addOrder(Order.asc("name")).createCriteria("enrolments", "e").addOrder(Order.desc("year")).addOrder(Order.desc("semester")).createCriteria("course", "c").addOrder(Order.asc("description")).setProjection(Projections.projectionList().add(Projections.property("this.name")).add(Projections.property("e.year")).add(Projections.property("e.semester")).add(Projections.property("c.courseCode")).add(Projections.property("c.description"))).uniqueResult()[ CD ]
Line_3 $$ Session s = openSession()-->Line_77 $$ s.close()[ FD ]
Line_58 $$ List resultWithAliasedBean = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Projections.property("st.name"), "studentName").add(Projections.property("co.description"), "courseDescription")).addOrder(Order.desc("studentName")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class)).list()-->Line_59 $$ assertEquals(2, resultWithAliasedBean.size())[ FD ]
Line_2 $$ public void testProjections() -->Line_62 $$ assertNotNull(dto.getName())[ CD ]
Line_2 $$ public void testProjections() -->Line_5 $$ Course course = new Course()[ CD ]
Line_35 $$ Long count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.count("studentNumber").setDistinct()).uniqueResult()-->Line_38 $$ assertEquals(count, new Long(2))[ FD ]
Line_2 $$ public void testProjections() -->Line_19 $$ enrolment.setCourseCode(course.getCourseCode())[ CD ]
Line_60 $$ StudentDTO dto = (StudentDTO) resultWithAliasedBean.get(0)-->Line_61 $$ assertNotNull(dto.getDescription())[ FD ]
Line_2 $$ public void testProjections() -->Line_49 $$ Map m1 = (Map) resultWithMaps.get(0)[ CD ]
Line_2 $$ public void testProjections() -->Line_59 $$ assertEquals(2, resultWithAliasedBean.size())[ CD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.save(enrolment)[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_29 $$ enrolment.setSemester((short) 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_63 $$ s.createCriteria(Student.class).add(Restrictions.like("name", "Gavin", MatchMode.START)).addOrder(Order.asc("name")).createCriteria("enrolments", "e").addOrder(Order.desc("year")).addOrder(Order.desc("semester")).createCriteria("course", "c").addOrder(Order.asc("description")).setProjection(Projections.projectionList().add(Projections.property("this.name")).add(Projections.property("e.year")).add(Projections.property("e.semester")).add(Projections.property("c.courseCode")).add(Projections.property("c.description"))).uniqueResult()[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_20 $$ enrolment.setSemester((short) 1)[ FD ]
Line_2 $$ public void testProjections() -->Line_41 $$ Object object = s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Projections.count("studentNumber")).add(Projections.max("studentNumber")).add(Projections.min("studentNumber")).add(Projections.avg("studentNumber"))).uniqueResult()[ CD ]
Line_2 $$ public void testProjections() -->Line_37 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("studentNumber")).uniqueResult()[ CD ]
Line_13 $$ Student xam = new Student()-->Line_74 $$ s.delete(xam)[ FD ]
Line_2 $$ public void testProjections() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_33 $$ gavin.getEnrolments().add(enrolment)[ FD ]
Line_68 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Projections.groupProperty("co.courseCode")).add(Projections.count("st.studentNumber").setDistinct()).add(Projections.groupProperty("year"))).list()-->Line_69 $$ assertEquals(list.size(), 2)[ FD ]
Line_13 $$ Student xam = new Student()-->Line_14 $$ xam.setName("Max Rydahl Andersen")[ FD ]
Line_2 $$ public void testProjections() -->Line_56 $$ assertEquals(new Long(101), m1.get("stNumber"))[ CD ]
Line_2 $$ public void testProjections() -->Line_20 $$ enrolment.setSemester((short) 1)[ CD ]
Line_26 $$ enrolment = new Enrolment()-->Line_34 $$ s.save(enrolment)[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_10 $$ gavin.setName("Gavin King")[ FD ]
Line_3 $$ Session s = openSession()-->Line_74 $$ s.delete(xam)[ FD ]
Line_2 $$ public void testProjections() -->Line_30 $$ enrolment.setYear((short) 1998)[ CD ]
Line_47 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("studentNumber"), "stNumber").add(Projections.property("courseCode"), "cCode"))).add(Restrictions.gt("studentNumber", new Long(665))).add(Restrictions.lt("studentNumber", new Long(668))).addOrder(Order.asc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_49 $$ Map m1 = (Map) resultWithMaps.get(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.save(enrolment)[ FD ]
Line_26 $$ enrolment = new Enrolment()-->Line_27 $$ enrolment.setCourse(course)[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_30 $$ enrolment.setYear((short) 1998)[ FD ]
Line_13 $$ Student xam = new Student()-->Line_22 $$ enrolment.setStudent(xam)[ FD ]
Line_2 $$ public void testProjections() -->Line_50 $$ assertEquals(new Long(667), m1.get("stNumber"))[ CD ]
Line_5 $$ Course course = new Course()-->Line_8 $$ s.save(course)[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_24 $$ xam.getEnrolments().add(enrolment)[ FD ]
Line_64 $$ Projection p1 = Projections.projectionList().add(Projections.count("studentNumber")).add(Projections.max("studentNumber")).add(Projections.rowCount())-->Line_66 $$ Object[] array = (Object[]) s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(p1).add(p2)).uniqueResult()[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_72 $$ assertSame(g, gavin)[ FD ]
Line_2 $$ public void testProjections() -->Line_64 $$ Projection p1 = Projections.projectionList().add(Projections.count("studentNumber")).add(Projections.max("studentNumber")).add(Projections.rowCount())[ CD ]
Line_2 $$ public void testProjections() -->Line_44 $$ assertEquals(new Long(667), result[1])[ CD ]
Line_2 $$ public void testProjections() -->Line_45 $$ assertEquals(new Long(101), result[2])[ CD ]
Line_2 $$ public void testProjections() -->Line_48 $$ assertEquals(1, resultWithMaps.size())[ CD ]
Line_52 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.property("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_54 $$ Map m0 = (Map) resultWithMaps.get(0)[ FD ]
Line_5 $$ Course course = new Course()-->Line_27 $$ enrolment.setCourse(course)[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_31 $$ enrolment.setStudent(gavin)[ FD ]
Line_37 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("studentNumber")).uniqueResult()-->Line_38 $$ assertEquals(count, new Long(2))[ FD ]
Line_52 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.property("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_53 $$ assertEquals(2, resultWithMaps.size())[ FD ]
Line_26 $$ enrolment = new Enrolment()-->Line_32 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_12 $$ s.save(gavin)[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_33 $$ gavin.getEnrolments().add(enrolment)[ FD ]
Line_35 $$ Long count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.count("studentNumber").setDistinct()).uniqueResult()-->Line_39 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("courseCode").as("cnt")).uniqueResult()[ FD ]
Line_5 $$ Course course = new Course()-->Line_18 $$ enrolment.setCourse(course)[ FD ]
Line_65 $$ Projection p2 = Projections.projectionList().add(Projections.min("studentNumber")).add(Projections.avg("studentNumber")).add(Projections.sqlProjection("1 as constOne, count(*) as countStar", new String[] -->Line_66 $$ Object[] array = (Object[]) s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(p1).add(p2)).uniqueResult()[ FD ]
Line_70 $$ Object g = s.createCriteria(Student.class).add(Restrictions.idEq(new Long(667))).setFetchMode("enrolments", FetchMode.JOIN).uniqueResult()-->Line_72 $$ assertSame(g, gavin)[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_23 $$ enrolment.setStudentNumber(xam.getStudentNumber())[ FD ]
Line_52 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.property("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()-->Line_55 $$ m1 = (Map) resultWithMaps.get(1)[ FD ]
Line_2 $$ public void testProjections() -->Line_34 $$ s.save(enrolment)[ CD ]
Line_2 $$ public void testProjections() -->Line_13 $$ Student xam = new Student()[ CD ]
Line_13 $$ Student xam = new Student()-->Line_15 $$ xam.setStudentNumber(101)[ FD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_27 $$ enrolment.setCourse(course)[ FD ]
Line_2 $$ public void testProjections() -->Line_35 $$ Long count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.count("studentNumber").setDistinct()).uniqueResult()[ CD ]
Line_2 $$ public void testProjections() -->Line_15 $$ xam.setStudentNumber(101)[ CD ]
Line_5 $$ Course course = new Course()-->Line_6 $$ course.setCourseCode("HIB")[ FD ]
Line_49 $$ Map m1 = (Map) resultWithMaps.get(0)-->Line_56 $$ assertEquals(new Long(101), m1.get("stNumber"))[ FD ]
Line_2 $$ public void testProjections() -->Line_76 $$ t.commit()[ CD ]
Line_2 $$ public void testProjections() -->Line_16 $$ s.save(xam)[ CD ]
Line_2 $$ public void testProjections() -->Line_29 $$ enrolment.setSemester((short) 3)[ CD ]
Line_2 $$ public void testProjections() -->Line_73 $$ s.delete(gavin)[ CD ]
Line_35 $$ Long count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.count("studentNumber").setDistinct()).uniqueResult()-->Line_40 $$ assertEquals(count, new Long(1))[ FD ]
Line_49 $$ Map m1 = (Map) resultWithMaps.get(0)-->Line_50 $$ assertEquals(new Long(667), m1.get("stNumber"))[ FD ]
Line_3 $$ Session s = openSession()-->Line_68 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Projections.groupProperty("co.courseCode")).add(Projections.count("st.studentNumber").setDistinct()).add(Projections.groupProperty("year"))).list()[ FD ]
Line_2 $$ public void testProjections() -->Line_17 $$ Enrolment enrolment = new Enrolment()[ CD ]
Line_2 $$ public void testProjections() -->Line_47 $$ List resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.distinct(Projections.projectionList().add(Projections.property("studentNumber"), "stNumber").add(Projections.property("courseCode"), "cCode"))).add(Restrictions.gt("studentNumber", new Long(665))).add(Restrictions.lt("studentNumber", new Long(668))).addOrder(Order.asc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()[ CD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_28 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_2 $$ public void testProjections() -->Line_54 $$ Map m0 = (Map) resultWithMaps.get(0)[ CD ]
Line_2 $$ public void testProjections() -->Line_18 $$ enrolment.setCourse(course)[ CD ]
Line_2 $$ public void testProjections() -->Line_68 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Projections.groupProperty("co.courseCode")).add(Projections.count("st.studentNumber").setDistinct()).add(Projections.groupProperty("year"))).list()[ CD ]
Line_2 $$ public void testProjections() -->Line_12 $$ s.save(gavin)[ CD ]
Line_2 $$ public void testProjections() -->Line_32 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ CD ]
Line_39 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("courseCode").as("cnt")).uniqueResult()-->Line_40 $$ assertEquals(count, new Long(1))[ FD ]
Line_26 $$ enrolment = new Enrolment()-->Line_28 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ Long count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.count("studentNumber").setDistinct()).uniqueResult()[ FD ]
Line_2 $$ public void testProjections() -->Line_58 $$ List resultWithAliasedBean = s.createCriteria(Enrolment.class).createAlias("student", "st").createAlias("course", "co").setProjection(Projections.projectionList().add(Projections.property("st.name"), "studentName").add(Projections.property("co.description"), "courseDescription")).addOrder(Order.desc("studentName")).setResultTransformer(Transformers.aliasToBean(StudentDTO.class)).list()[ CD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_18 $$ enrolment.setCourse(course)[ FD ]
Line_2 $$ public void testProjections() -->Line_9 $$ Student gavin = new Student()[ CD ]
Line_2 $$ public void testProjections() -->Line_24 $$ xam.getEnrolments().add(enrolment)[ CD ]
Line_49 $$ Map m1 = (Map) resultWithMaps.get(0)-->Line_55 $$ m1 = (Map) resultWithMaps.get(1)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_76 $$ t.commit()[ FD ]
Line_55 $$ m1 = (Map) resultWithMaps.get(1)-->Line_56 $$ assertEquals(new Long(101), m1.get("stNumber"))[ FD ]
Line_2 $$ public void testProjections() -->Line_22 $$ enrolment.setStudent(xam)[ CD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_34 $$ s.save(enrolment)[ FD ]
Line_2 $$ public void testProjections() -->Line_14 $$ xam.setName("Max Rydahl Andersen")[ CD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ resultWithMaps = s.createCriteria(Enrolment.class).setProjection(Projections.property("studentNumber").as("stNumber")).addOrder(Order.desc("stNumber")).setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP).list()[ FD ]
Line_49 $$ Map m1 = (Map) resultWithMaps.get(0)-->Line_51 $$ assertEquals(course.getCourseCode(), m1.get("cCode"))[ FD ]
Line_26 $$ enrolment = new Enrolment()-->Line_33 $$ gavin.getEnrolments().add(enrolment)[ FD ]
Line_2 $$ public void testProjections() -->Line_33 $$ gavin.getEnrolments().add(enrolment)[ CD ]
Line_17 $$ Enrolment enrolment = new Enrolment()-->Line_26 $$ enrolment = new Enrolment()[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s.save(xam)[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_11 $$ gavin.setStudentNumber(667)[ FD ]
Line_37 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("studentNumber")).uniqueResult()-->Line_39 $$ count = (Long) s.createCriteria(Enrolment.class).setProjection(Projections.countDistinct("courseCode").as("cnt")).uniqueResult()[ FD ]
Line_2 $$ public void testProjections() -->Line_67 $$ assertEquals(array.length, 7)[ CD ]
Line_5 $$ Course course = new Course()-->Line_75 $$ s.delete(course)[ FD ]
Line_2 $$ public void testProjections() -->Line_57 $$ assertEquals(new Long(667), m0.get("stNumber"))[ CD ]
