Line_13 $$ for (int i = 0; i < abstractElements.size(); i++) -->Line_16 $$ assertEquals(String.valueOf(i), classes[i].getName(), abstractElement.getXmlTag().getAttributeValue("foo"))[ FD ]
Line_12 $$ final List<MyAbstractElement> abstractElements = element.getAbstractElements()-->Line_13 $$ for (int i = 0; i < abstractElements.size(); i++) [ FD ]
Line_14 $$ MyAbstractElement abstractElement = abstractElements.get(i)-->Line_15 $$ assertTrue(String.valueOf(i) + " " + abstractElement.getClass(), classes[i].isInstance(abstractElement))[ FD ]
Line_14 $$ MyAbstractElement abstractElement = abstractElements.get(i)-->Line_16 $$ assertEquals(String.valueOf(i), classes[i].getName(), abstractElement.getXmlTag().getAttributeValue("foo"))[ FD ]
Line_5 $$ MyElement element = createElement("<a/>")-->Line_7 $$ element.addFooChild()[ FD ]
Line_5 $$ MyElement element = createElement("<a/>")-->Line_8 $$ element.addAbstractElement(MyFooConcreteElement.class)[ FD ]
Line_13 $$ for (int i = 0; i < abstractElements.size(); i++) -->Line_14 $$ MyAbstractElement abstractElement = abstractElements.get(i)[ FD ]
Line_13 $$ for (int i = 0; i < abstractElements.size(); i++) -->Line_16 $$ assertEquals(String.valueOf(i), classes[i].getName(), abstractElement.getXmlTag().getAttributeValue("foo"))[ CD ]
Line_5 $$ MyElement element = createElement("<a/>")-->Line_12 $$ final List<MyAbstractElement> abstractElements = element.getAbstractElements()[ FD ]
Line_12 $$ final List<MyAbstractElement> abstractElements = element.getAbstractElements()-->Line_14 $$ MyAbstractElement abstractElement = abstractElements.get(i)[ FD ]
Line_5 $$ MyElement element = createElement("<a/>")-->Line_9 $$ element.addAbstractElement(MyFooConcreteElement.class, 1)[ FD ]
Line_5 $$ MyElement element = createElement("<a/>")-->Line_6 $$ element.addBarChild()[ FD ]
Line_13 $$ for (int i = 0; i < abstractElements.size(); i++) -->Line_15 $$ assertTrue(String.valueOf(i) + " " + abstractElement.getClass(), classes[i].isInstance(abstractElement))[ FD ]
Line_13 $$ for (int i = 0; i < abstractElements.size(); i++) -->Line_15 $$ assertTrue(String.valueOf(i) + " " + abstractElement.getClass(), classes[i].isInstance(abstractElement))[ CD ]
Line_5 $$ MyElement element = createElement("<a/>")-->Line_10 $$ element.addAbstractElement(2, MyBarConcreteElement.class)[ FD ]
Line_13 $$ for (int i = 0; i < abstractElements.size(); i++) -->Line_14 $$ MyAbstractElement abstractElement = abstractElements.get(i)[ CD ]
Line_2 $$ public void testAddConcreteElements() throws Throwable -->Line_3 $$ getTypeChooserManager().registerTypeChooser(MyAbstractElement.class, new MyTypeChooser())[ CD ]
