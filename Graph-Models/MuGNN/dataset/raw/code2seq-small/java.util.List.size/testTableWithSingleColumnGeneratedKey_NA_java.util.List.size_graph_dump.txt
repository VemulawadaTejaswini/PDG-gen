Line_27 $$ String insertString = context.createInsertString(keyCols)-->Line_29 $$ assertEquals("empty insert not generated correctly", "INSERT INTO customers () VALUES()", insertString)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_10 $$ given(metaDataResultSet.getString("TABLE_TYPE")).willReturn("TABLE")[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_20 $$ given(databaseMetaData.getTables(null, null, TABLE, null)).willReturn(metaDataResultSet)[ FD ]
Line_5 $$ final String USER = "me"-->Line_18 $$ given(databaseMetaData.getUserName()).willReturn(USER)[ FD ]
Line_4 $$ final String TABLE = "customers"-->Line_9 $$ given(metaDataResultSet.getString("TABLE_NAME")).willReturn(TABLE)[ FD ]
Line_5 $$ final String USER = "me"-->Line_21 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_21 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_14 $$ given(columnsResultSet.getInt("DATA_TYPE")).willReturn(Types.INTEGER)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_30 $$ verify(metaDataResultSet, atLeastOnce()).next()[ FD ]
Line_23 $$ String[] keyCols = new String[] -->Line_25 $$ context.processMetaData(dataSource, new ArrayList<String>(), keyCols)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_15 $$ given(columnsResultSet.getBoolean("NULLABLE")).willReturn(false)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_13 $$ given(columnsResultSet.getString("COLUMN_NAME")).willReturn("id")[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_7 $$ given(metaDataResultSet.next()).willReturn(true, false)[ FD ]
Line_4 $$ final String TABLE = "customers"-->Line_20 $$ given(databaseMetaData.getTables(null, null, TABLE, null)).willReturn(metaDataResultSet)[ FD ]
Line_26 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_28 $$ assertEquals("wrong number of parameters: ", 0, values.size())[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_32 $$ verify(metaDataResultSet).close()[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_33 $$ verify(columnsResultSet).close()[ FD ]
Line_23 $$ String[] keyCols = new String[] -->Line_27 $$ String insertString = context.createInsertString(keyCols)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_12 $$ given(columnsResultSet.next()).willReturn(true, false)[ FD ]
Line_4 $$ final String TABLE = "customers"-->Line_21 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ FD ]
Line_4 $$ final String TABLE = "customers"-->Line_24 $$ context.setTableName(TABLE)[ FD ]
Line_5 $$ final String USER = "me"-->Line_8 $$ given(metaDataResultSet.getString("TABLE_SCHEM")).willReturn(USER)[ FD ]
Line_11 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_31 $$ verify(columnsResultSet, atLeastOnce()).next()[ FD ]
Line_22 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_26 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_8 $$ given(metaDataResultSet.getString("TABLE_SCHEM")).willReturn(USER)[ FD ]
Line_6 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_9 $$ given(metaDataResultSet.getString("TABLE_NAME")).willReturn(TABLE)[ FD ]
