Line_8 $$ final List<Block> children-->Line_10 $$ children = new ArrayList<Block>(subWrappers)[ FD ]
Line_2 $$ private List<Block> buildBlocks() -->Line_7 $$ final List<DataLanguageBlockWrapper> subWrappers = BlockUtil.buildChildWrappers(myOriginal)[ CD ]
Line_11 $$ if (subWrappers.size() == 0) -->Line_15 $$ children = BlockUtil.mergeBlocks(myTlBlocks, subWrappers)[ CD ]
Line_7 $$ final List<DataLanguageBlockWrapper> subWrappers = BlockUtil.buildChildWrappers(myOriginal)-->Line_11 $$ if (subWrappers.size() == 0) [ FD ]
Line_8 $$ final List<Block> children-->Line_15 $$ children = BlockUtil.mergeBlocks(myTlBlocks, subWrappers)[ FD ]
Line_7 $$ final List<DataLanguageBlockWrapper> subWrappers = BlockUtil.buildChildWrappers(myOriginal)-->Line_15 $$ children = BlockUtil.mergeBlocks(myTlBlocks, subWrappers)[ FD ]
Line_10 $$ children = new ArrayList<Block>(subWrappers)-->Line_15 $$ children = BlockUtil.mergeBlocks(myTlBlocks, subWrappers)[ FD ]
Line_2 $$ private List<Block> buildBlocks() -->Line_4 $$ if (isLeaf()) [ CD ]
Line_4 $$ if (isLeaf()) -->Line_5 $$ return AbstractBlock.EMPTY[ CD ]
Line_2 $$ private List<Block> buildBlocks() -->Line_9 $$ if (myTlBlocks == null) [ CD ]
Line_2 $$ private List<Block> buildBlocks() -->Line_8 $$ final List<Block> children[ CD ]
Line_9 $$ if (myTlBlocks == null) -->Line_10 $$ children = new ArrayList<Block>(subWrappers)[ CD ]
Line_9 $$ if (myTlBlocks == null) -->Line_11 $$ if (subWrappers.size() == 0) [ CD ]
