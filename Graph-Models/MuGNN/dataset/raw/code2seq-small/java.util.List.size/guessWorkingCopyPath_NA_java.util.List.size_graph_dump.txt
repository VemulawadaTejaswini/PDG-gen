Line_11 $$ List<String> resultSegments = new ArrayList<String>()-->Line_17 $$ resultSegments.add(copyFromPathSegments.get(i))[ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_4 $$ String copyFromPath = SVNURL.parseURIEncoded(copyFromURL).getPath()[ CD ]
Line_12 $$ final int keepSegments = segments.size() - pathSegmentCount + ancestorSegmentCount-->Line_13 $$ for (int i = 0; i < keepSegments; i++) [ FD ]
Line_3 $$ String copiedPath = url.getPath()-->Line_5 $$ String commonPathAncestor = SVNPathUtil.getCommonPathAncestor(copiedPath, copyFromPath)[ FD ]
Line_16 $$ for (int i = ancestorSegmentCount; i < copyFromPathSegments.size(); i++) -->Line_17 $$ resultSegments.add(copyFromPathSegments.get(i))[ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_13 $$ for (int i = 0; i < keepSegments; i++) [ CD ]
Line_4 $$ String copyFromPath = SVNURL.parseURIEncoded(copyFromURL).getPath()-->Line_5 $$ String commonPathAncestor = SVNPathUtil.getCommonPathAncestor(copiedPath, copyFromPath)[ FD ]
Line_11 $$ List<String> resultSegments = new ArrayList<String>()-->Line_14 $$ resultSegments.add(segments.get(i))[ FD ]
Line_10 $$ List<String> copyFromPathSegments = StringUtil.split(copyFromPath, "/")-->Line_17 $$ resultSegments.add(copyFromPathSegments.get(i))[ FD ]
Line_11 $$ List<String> resultSegments = new ArrayList<String>()-->Line_19 $$ String result = StringUtil.join(resultSegments, "/")[ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_3 $$ String copiedPath = url.getPath()[ CD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_5 $$ String commonPathAncestor = SVNPathUtil.getCommonPathAncestor(copiedPath, copyFromPath)[ CD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_3 $$ String copiedPath = url.getPath()[ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_12 $$ final int keepSegments = segments.size() - pathSegmentCount + ancestorSegmentCount[ CD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_19 $$ String result = StringUtil.join(resultSegments, "/")[ CD ]
Line_19 $$ String result = StringUtil.join(resultSegments, "/")-->Line_20 $$ return new File(startsWithSlash ? SvnUtil.ensureStartSlash(result) : result)[ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_7 $$ int ancestorSegmentCount = SVNPathUtil.getSegmentsCount(commonPathAncestor)[ CD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_8 $$ boolean startsWithSlash = file.getAbsolutePath().startsWith("/")[ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_16 $$ for (int i = ancestorSegmentCount; i < copyFromPathSegments.size(); i++) [ CD ]
Line_13 $$ for (int i = 0; i < keepSegments; i++) -->Line_16 $$ for (int i = ancestorSegmentCount; i < copyFromPathSegments.size(); i++) [ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_10 $$ List<String> copyFromPathSegments = StringUtil.split(copyFromPath, "/")[ CD ]
Line_13 $$ for (int i = 0; i < keepSegments; i++) -->Line_17 $$ resultSegments.add(copyFromPathSegments.get(i))[ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_4 $$ String copyFromPath = SVNURL.parseURIEncoded(copyFromURL).getPath()[ FD ]
Line_10 $$ List<String> copyFromPathSegments = StringUtil.split(copyFromPath, "/")-->Line_16 $$ for (int i = ancestorSegmentCount; i < copyFromPathSegments.size(); i++) [ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_6 $$ int pathSegmentCount = SVNPathUtil.getSegmentsCount(copiedPath)[ CD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_8 $$ boolean startsWithSlash = file.getAbsolutePath().startsWith("/")[ CD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_9 $$ List<String> segments = StringUtil.split(file.getPath(), File.separator)[ FD ]
Line_3 $$ String copiedPath = url.getPath()-->Line_6 $$ int pathSegmentCount = SVNPathUtil.getSegmentsCount(copiedPath)[ FD ]
Line_4 $$ String copyFromPath = SVNURL.parseURIEncoded(copyFromURL).getPath()-->Line_10 $$ List<String> copyFromPathSegments = StringUtil.split(copyFromPath, "/")[ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_9 $$ List<String> segments = StringUtil.split(file.getPath(), File.separator)[ CD ]
Line_16 $$ for (int i = ancestorSegmentCount; i < copyFromPathSegments.size(); i++) -->Line_17 $$ resultSegments.add(copyFromPathSegments.get(i))[ CD ]
Line_9 $$ List<String> segments = StringUtil.split(file.getPath(), File.separator)-->Line_14 $$ resultSegments.add(segments.get(i))[ FD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_20 $$ return new File(startsWithSlash ? SvnUtil.ensureStartSlash(result) : result)[ CD ]
Line_13 $$ for (int i = 0; i < keepSegments; i++) -->Line_14 $$ resultSegments.add(segments.get(i))[ CD ]
Line_2 $$ private static File guessWorkingCopyPath(@NotNull File file, @NotNull SVNURL url, @NotNull String copyFromURL) throws SVNException -->Line_11 $$ List<String> resultSegments = new ArrayList<String>()[ CD ]
Line_5 $$ String commonPathAncestor = SVNPathUtil.getCommonPathAncestor(copiedPath, copyFromPath)-->Line_7 $$ int ancestorSegmentCount = SVNPathUtil.getSegmentsCount(commonPathAncestor)[ FD ]
Line_13 $$ for (int i = 0; i < keepSegments; i++) -->Line_14 $$ resultSegments.add(segments.get(i))[ FD ]
Line_9 $$ List<String> segments = StringUtil.split(file.getPath(), File.separator)-->Line_12 $$ final int keepSegments = segments.size() - pathSegmentCount + ancestorSegmentCount[ FD ]
