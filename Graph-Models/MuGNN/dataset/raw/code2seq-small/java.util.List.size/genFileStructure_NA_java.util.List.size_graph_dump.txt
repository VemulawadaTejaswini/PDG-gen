Line_5 $$ for (int i = 0; i < numOfFiles; i++) -->Line_7 $$ double fileSize[ CD ]
Line_2 $$ private void genFileStructure() -->Line_4 $$ int totalLeaves = leaves.size()[ CD ]
Line_2 $$ private void genFileStructure() -->Line_5 $$ for (int i = 0; i < numOfFiles; i++) [ CD ]
Line_4 $$ int totalLeaves = leaves.size()-->Line_6 $$ int leaveNum = r.nextInt(totalLeaves)[ FD ]
Line_5 $$ for (int i = 0; i < numOfFiles; i++) -->Line_6 $$ int leaveNum = r.nextInt(totalLeaves)[ CD ]
Line_3 $$ List<INode> leaves = getLeaves()-->Line_4 $$ int totalLeaves = leaves.size()[ FD ]
Line_7 $$ double fileSize-->Line_8 $$ do [ FD ]
Line_8 $$ do -->Line_9 $$ fileSize = r.nextGaussian() + avgFileSize[ CD ]
Line_5 $$ for (int i = 0; i < numOfFiles; i++) -->Line_8 $$ do [ CD ]
Line_7 $$ double fileSize-->Line_9 $$ fileSize = r.nextGaussian() + avgFileSize[ FD ]
Line_3 $$ List<INode> leaves = getLeaves()-->Line_11 $$ leaves.get(leaveNum).addChild(new FileINode(FILE_NAME_PREFIX + i, fileSize))[ FD ]
Line_6 $$ int leaveNum = r.nextInt(totalLeaves)-->Line_11 $$ leaves.get(leaveNum).addChild(new FileINode(FILE_NAME_PREFIX + i, fileSize))[ FD ]
Line_2 $$ private void genFileStructure() -->Line_3 $$ List<INode> leaves = getLeaves()[ CD ]
Line_9 $$ fileSize = r.nextGaussian() + avgFileSize-->Line_8 $$ do [ FD ]
Line_5 $$ for (int i = 0; i < numOfFiles; i++) -->Line_11 $$ leaves.get(leaveNum).addChild(new FileINode(FILE_NAME_PREFIX + i, fileSize))[ CD ]
