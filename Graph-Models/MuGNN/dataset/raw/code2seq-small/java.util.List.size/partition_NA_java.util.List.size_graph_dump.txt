Line_2 $$ private List<String> partition(String str) -->Line_21 $$ List<String> variations = new ArrayList()[ CD ]
Line_10 $$ while (tmpParts.size() > 0) -->Line_11 $$ StringBuilder part = new StringBuilder()[ CD ]
Line_23 $$ List variation = getVariations(parts.get(i))-->Line_25 $$ variations.addAll(variation)[ FD ]
Line_7 $$ List<String> tmpParts = new ArrayList()-->Line_10 $$ while (tmpParts.size() > 0) [ FD ]
Line_14 $$ if (!(i + 1 == numberOfParts)) -->Line_15 $$ parts.add(part.toString())[ CD ]
Line_7 $$ List<String> tmpParts = new ArrayList()-->Line_9 $$ int numberOfParts = tmpParts.size()[ FD ]
Line_4 $$ List<String> parts = new ArrayList()-->Line_23 $$ List variation = getVariations(parts.get(i))[ FD ]
Line_2 $$ private List<String> partition(String str) -->Line_6 $$ if (!primary) [ CD ]
Line_24 $$ if (variation != null) -->Line_25 $$ variations.addAll(variation)[ CD ]
Line_7 $$ List<String> tmpParts = new ArrayList()-->Line_12 $$ for (int i = 0; i < tmpParts.size(); i++) [ FD ]
Line_12 $$ for (int i = 0; i < tmpParts.size(); i++) -->Line_13 $$ part.append(tmpParts.get(i))[ CD ]
Line_21 $$ List<String> variations = new ArrayList()-->Line_25 $$ variations.addAll(variation)[ FD ]
Line_4 $$ List<String> parts = new ArrayList()-->Line_15 $$ parts.add(part.toString())[ FD ]
Line_7 $$ List<String> tmpParts = new ArrayList()-->Line_13 $$ part.append(tmpParts.get(i))[ FD ]
Line_11 $$ StringBuilder part = new StringBuilder()-->Line_15 $$ parts.add(part.toString())[ FD ]
Line_2 $$ private List<String> partition(String str) -->Line_5 $$ parts.add(primaryForm.replaceAll("[^\\p[ CD ]
Line_6 $$ if (!primary) -->Line_7 $$ List<String> tmpParts = new ArrayList()[ CD ]
Line_22 $$ for (int i = 0; i < parts.size(); i++) -->Line_23 $$ List variation = getVariations(parts.get(i))[ CD ]
Line_23 $$ List variation = getVariations(parts.get(i))-->Line_24 $$ if (variation != null) [ FD ]
Line_2 $$ private List<String> partition(String str) -->Line_4 $$ List<String> parts = new ArrayList()[ CD ]
Line_2 $$ private List<String> partition(String str) -->Line_3 $$ String primaryForm = str[ CD ]
Line_6 $$ if (!primary) -->Line_10 $$ while (tmpParts.size() > 0) [ CD ]
Line_11 $$ StringBuilder part = new StringBuilder()-->Line_13 $$ part.append(tmpParts.get(i))[ FD ]
Line_10 $$ while (tmpParts.size() > 0) -->Line_18 $$ tmpParts.remove(0)[ CD ]
Line_4 $$ List<String> parts = new ArrayList()-->Line_22 $$ for (int i = 0; i < parts.size(); i++) [ FD ]
Line_12 $$ for (int i = 0; i < tmpParts.size(); i++) -->Line_23 $$ List variation = getVariations(parts.get(i))[ FD ]
Line_12 $$ for (int i = 0; i < tmpParts.size(); i++) -->Line_13 $$ part.append(tmpParts.get(i))[ FD ]
Line_3 $$ String primaryForm = str-->Line_5 $$ parts.add(primaryForm.replaceAll("[^\\p[ FD ]
Line_6 $$ if (!primary) -->Line_8 $$ tmpParts.addAll((Arrays.asList(str.split("[\\p[ CD ]
Line_7 $$ List<String> tmpParts = new ArrayList()-->Line_8 $$ tmpParts.addAll((Arrays.asList(str.split("[\\p[ FD ]
Line_2 $$ private List<String> partition(String str) -->Line_8 $$ tmpParts.addAll((Arrays.asList(str.split("[\\p[ FD ]
Line_22 $$ for (int i = 0; i < parts.size(); i++) -->Line_24 $$ if (variation != null) [ CD ]
Line_10 $$ while (tmpParts.size() > 0) -->Line_12 $$ for (int i = 0; i < tmpParts.size(); i++) [ CD ]
Line_6 $$ if (!primary) -->Line_9 $$ int numberOfParts = tmpParts.size()[ CD ]
Line_12 $$ for (int i = 0; i < tmpParts.size(); i++) -->Line_22 $$ for (int i = 0; i < parts.size(); i++) [ FD ]
Line_4 $$ List<String> parts = new ArrayList()-->Line_5 $$ parts.add(primaryForm.replaceAll("[^\\p[ FD ]
Line_22 $$ for (int i = 0; i < parts.size(); i++) -->Line_23 $$ List variation = getVariations(parts.get(i))[ FD ]
Line_2 $$ private List<String> partition(String str) -->Line_28 $$ return variations[ CD ]
Line_12 $$ for (int i = 0; i < tmpParts.size(); i++) -->Line_14 $$ if (!(i + 1 == numberOfParts)) [ CD ]
Line_2 $$ private List<String> partition(String str) -->Line_22 $$ for (int i = 0; i < parts.size(); i++) [ CD ]
Line_7 $$ List<String> tmpParts = new ArrayList()-->Line_18 $$ tmpParts.remove(0)[ FD ]
