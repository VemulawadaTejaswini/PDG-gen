Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_20 $$ config.setConnectionTTL(Common.CONNECTION_TTL.resolveModelAttribute(context, model).asLong())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_21 $$ List<String> connectorNames = Common.CONNECTORS.unwrap(context, model)[ FD ]
Line_15 $$ if (clientId.isDefined()) -->Line_16 $$ config.setClientID(clientId.asString())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_9 $$ config.setBlockOnNonDurableSend(Common.BLOCK_ON_NON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_23 $$ config.setConsumerMaxRate(Common.CONSUMER_MAX_RATE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_48 $$ config.setThreadPoolMaxSize(Common.THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_33 $$ config.setGroupID(groupId.asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_44 $$ config.setReconnectAttempts(Common.RECONNECT_ATTEMPTS.resolveModelAttribute(context, model).asInt())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_44 $$ config.setReconnectAttempts(Common.RECONNECT_ATTEMPTS.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_51 $$ config.setLoadBalancingPolicyClassName(Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model).asString())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_30 $$ config.setFailoverOnInitialConnection(Common.FAILOVER_ON_INITIAL_CONNECTION.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_36 $$ if (lbcn.isDefined()) -->Line_37 $$ config.setLoadBalancingPolicyClassName(lbcn.asString())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_57 $$ config.setFactoryType(jmsFactoryType)[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_45 $$ config.setRetryInterval(Common.RETRY_INTERVAL.resolveModelAttribute(context, model).asLong())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_52 $$ final ModelNode clientProtocolManagerFactory = Common.PROTOCOL_MANAGER_FACTORY.resolveModelAttribute(context, model)[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_24 $$ config.setConsumerWindowSize(Common.CONSUMER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_32 $$ if (groupId.isDefined()) -->Line_33 $$ config.setGroupID(groupId.asString())[ CD ]
Line_25 $$ final ModelNode discoveryGroupName = Common.DISCOVERY_GROUP.resolveModelAttribute(context, model)-->Line_27 $$ config.setDiscoveryGroupName(discoveryGroupName.asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_39 $$ config.setMaxRetryInterval(Common.MAX_RETRY_INTERVAL.resolveModelAttribute(context, model).asLong())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_41 $$ config.setPreAcknowledge(Common.PRE_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_42 $$ config.setProducerMaxRate(Common.PRODUCER_MAX_RATE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_50 $$ config.setUseGlobalPools(Common.USE_GLOBAL_POOLS.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_29 $$ config.setDupsOKBatchSize(Common.DUPS_OK_BATCH_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_23 $$ config.setConsumerMaxRate(Common.CONSUMER_MAX_RATE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_31 $$ final ModelNode groupId = Common.GROUP_ID.resolveModelAttribute(context, model)-->Line_32 $$ if (groupId.isDefined()) [ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_41 $$ config.setPreAcknowledge(Common.PRE_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_25 $$ final ModelNode discoveryGroupName = Common.DISCOVERY_GROUP.resolveModelAttribute(context, model)[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_42 $$ config.setProducerMaxRate(Common.PRODUCER_MAX_RATE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_40 $$ config.setMinLargeMessageSize(Common.MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_7 $$ config.setBlockOnAcknowledge(Common.BLOCK_ON_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_47 $$ config.setScheduledThreadPoolMaxSize(Common.SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_19 $$ config.setConfirmationWindowSize(Common.CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_39 $$ config.setMaxRetryInterval(Common.MAX_RETRY_INTERVAL.resolveModelAttribute(context, model).asLong())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_56 $$ JMSFactoryType jmsFactoryType = ConnectionFactoryType.valueOf(ConnectionFactoryAttributes.Regular.FACTORY_TYPE.resolveModelAttribute(context, model).asString()).getType()[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_35 $$ final ModelNode lbcn = Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model)[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_16 $$ config.setClientID(clientId.asString())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_42 $$ config.setProducerMaxRate(Common.PRODUCER_MAX_RATE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_5 $$ config.setHA(HA.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_5 $$ config.setHA(HA.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_14 $$ final ModelNode clientId = CLIENT_ID.resolveModelAttribute(context, model)[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_18 $$ config.setCompressLargeMessages(Common.COMPRESS_LARGE_MESSAGES.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_11 $$ config.setCallTimeout(CALL_TIMEOUT.resolveModelAttribute(context, model).asLong())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_43 $$ config.setProducerWindowSize(Common.PRODUCER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_46 $$ config.setRetryIntervalMultiplier(Common.RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context, model).asDouble())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_20 $$ config.setConnectionTTL(Common.CONNECTION_TTL.resolveModelAttribute(context, model).asLong())[ FD ]
Line_52 $$ final ModelNode clientProtocolManagerFactory = Common.PROTOCOL_MANAGER_FACTORY.resolveModelAttribute(context, model)-->Line_54 $$ config.setProtocolManagerFactoryStr(clientProtocolManagerFactory.asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_49 $$ config.setTransactionBatchSize(Common.TRANSACTION_BATCH_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_26 $$ if (discoveryGroupName.isDefined()) [ CD ]
Line_3 $$ final List<String> entries = Common.ENTRIES.unwrap(context, model)-->Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))[ FD ]
Line_31 $$ final ModelNode groupId = Common.GROUP_ID.resolveModelAttribute(context, model)-->Line_33 $$ config.setGroupID(groupId.asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_24 $$ config.setConsumerWindowSize(Common.CONSUMER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_43 $$ config.setProducerWindowSize(Common.PRODUCER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_14 $$ final ModelNode clientId = CLIENT_ID.resolveModelAttribute(context, model)-->Line_16 $$ config.setClientID(clientId.asString())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_30 $$ config.setFailoverOnInitialConnection(Common.FAILOVER_ON_INITIAL_CONNECTION.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_45 $$ config.setRetryInterval(Common.RETRY_INTERVAL.resolveModelAttribute(context, model).asLong())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_31 $$ final ModelNode groupId = Common.GROUP_ID.resolveModelAttribute(context, model)[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_10 $$ config.setCacheLargeMessagesClient(Common.CACHE_LARGE_MESSAGE_CLIENT.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_30 $$ config.setFailoverOnInitialConnection(Common.FAILOVER_ON_INITIAL_CONNECTION.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_10 $$ config.setCacheLargeMessagesClient(Common.CACHE_LARGE_MESSAGE_CLIENT.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_48 $$ config.setThreadPoolMaxSize(Common.THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_14 $$ final ModelNode clientId = CLIENT_ID.resolveModelAttribute(context, model)[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_50 $$ config.setUseGlobalPools(Common.USE_GLOBAL_POOLS.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_32 $$ if (groupId.isDefined()) [ CD ]
Line_35 $$ final ModelNode lbcn = Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model)-->Line_36 $$ if (lbcn.isDefined()) [ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_11 $$ config.setCallTimeout(CALL_TIMEOUT.resolveModelAttribute(context, model).asLong())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_29 $$ config.setDupsOKBatchSize(Common.DUPS_OK_BATCH_SIZE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_25 $$ final ModelNode discoveryGroupName = Common.DISCOVERY_GROUP.resolveModelAttribute(context, model)[ FD ]
Line_25 $$ final ModelNode discoveryGroupName = Common.DISCOVERY_GROUP.resolveModelAttribute(context, model)-->Line_26 $$ if (discoveryGroupName.isDefined()) [ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_36 $$ if (lbcn.isDefined()) [ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_43 $$ config.setProducerWindowSize(Common.PRODUCER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_31 $$ final ModelNode groupId = Common.GROUP_ID.resolveModelAttribute(context, model)[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_57 $$ config.setFactoryType(jmsFactoryType)[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_44 $$ config.setReconnectAttempts(Common.RECONNECT_ATTEMPTS.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_52 $$ final ModelNode clientProtocolManagerFactory = Common.PROTOCOL_MANAGER_FACTORY.resolveModelAttribute(context, model)[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_13 $$ config.setCallFailoverTimeout(CALL_FAILOVER_TIMEOUT.resolveModelAttribute(context, model).asLong())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_27 $$ config.setDiscoveryGroupName(discoveryGroupName.asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_3 $$ final List<String> entries = Common.ENTRIES.unwrap(context, model)[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_49 $$ config.setTransactionBatchSize(Common.TRANSACTION_BATCH_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_39 $$ config.setMaxRetryInterval(Common.MAX_RETRY_INTERVAL.resolveModelAttribute(context, model).asLong())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_6 $$ config.setAutoGroup(Common.AUTO_GROUP.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_12 $$ config.setClientFailureCheckPeriod(Common.CLIENT_FAILURE_CHECK_PERIOD.resolveModelAttribute(context, model).asInt())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_29 $$ config.setDupsOKBatchSize(Common.DUPS_OK_BATCH_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_41 $$ config.setPreAcknowledge(Common.PRE_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_6 $$ config.setAutoGroup(Common.AUTO_GROUP.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_45 $$ config.setRetryInterval(Common.RETRY_INTERVAL.resolveModelAttribute(context, model).asLong())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_8 $$ config.setBlockOnDurableSend(Common.BLOCK_ON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_14 $$ final ModelNode clientId = CLIENT_ID.resolveModelAttribute(context, model)-->Line_15 $$ if (clientId.isDefined()) [ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_9 $$ config.setBlockOnNonDurableSend(Common.BLOCK_ON_NON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_18 $$ config.setCompressLargeMessages(Common.COMPRESS_LARGE_MESSAGES.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_10 $$ config.setCacheLargeMessagesClient(Common.CACHE_LARGE_MESSAGE_CLIENT.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_54 $$ config.setProtocolManagerFactoryStr(clientProtocolManagerFactory.asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_5 $$ config.setHA(HA.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_12 $$ config.setClientFailureCheckPeriod(Common.CLIENT_FAILURE_CHECK_PERIOD.resolveModelAttribute(context, model).asInt())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_37 $$ config.setLoadBalancingPolicyClassName(lbcn.asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_53 $$ if (clientProtocolManagerFactory.isDefined()) [ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_13 $$ config.setCallFailoverTimeout(CALL_FAILOVER_TIMEOUT.resolveModelAttribute(context, model).asLong())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_40 $$ config.setMinLargeMessageSize(Common.MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_46 $$ config.setRetryIntervalMultiplier(Common.RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context, model).asDouble())[ FD ]
Line_26 $$ if (discoveryGroupName.isDefined()) -->Line_27 $$ config.setDiscoveryGroupName(discoveryGroupName.asString())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_3 $$ final List<String> entries = Common.ENTRIES.unwrap(context, model)[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_19 $$ config.setConfirmationWindowSize(Common.CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_22 $$ config.setConnectorNames(connectorNames)[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_46 $$ config.setRetryIntervalMultiplier(Common.RETRY_INTERVAL_MULTIPLIER.resolveModelAttribute(context, model).asDouble())[ CD ]
Line_52 $$ final ModelNode clientProtocolManagerFactory = Common.PROTOCOL_MANAGER_FACTORY.resolveModelAttribute(context, model)-->Line_53 $$ if (clientProtocolManagerFactory.isDefined()) [ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_8 $$ config.setBlockOnDurableSend(Common.BLOCK_ON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_58 $$ return config[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_15 $$ if (clientId.isDefined()) [ CD ]
Line_56 $$ JMSFactoryType jmsFactoryType = ConnectionFactoryType.valueOf(ConnectionFactoryAttributes.Regular.FACTORY_TYPE.resolveModelAttribute(context, model).asString()).getType()-->Line_57 $$ config.setFactoryType(jmsFactoryType)[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_47 $$ config.setScheduledThreadPoolMaxSize(Common.SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_13 $$ config.setCallFailoverTimeout(CALL_FAILOVER_TIMEOUT.resolveModelAttribute(context, model).asLong())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_47 $$ config.setScheduledThreadPoolMaxSize(Common.SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_49 $$ config.setTransactionBatchSize(Common.TRANSACTION_BATCH_SIZE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_9 $$ config.setBlockOnNonDurableSend(Common.BLOCK_ON_NON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_11 $$ config.setCallTimeout(CALL_TIMEOUT.resolveModelAttribute(context, model).asLong())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_51 $$ config.setLoadBalancingPolicyClassName(Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model).asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_24 $$ config.setConsumerWindowSize(Common.CONSUMER_WINDOW_SIZE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_56 $$ JMSFactoryType jmsFactoryType = ConnectionFactoryType.valueOf(ConnectionFactoryAttributes.Regular.FACTORY_TYPE.resolveModelAttribute(context, model).asString()).getType()[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_23 $$ config.setConsumerMaxRate(Common.CONSUMER_MAX_RATE.resolveModelAttribute(context, model).asInt())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_6 $$ config.setAutoGroup(Common.AUTO_GROUP.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_35 $$ final ModelNode lbcn = Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model)[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_7 $$ config.setBlockOnAcknowledge(Common.BLOCK_ON_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_19 $$ config.setConfirmationWindowSize(Common.CONFIRMATION_WINDOW_SIZE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_21 $$ List<String> connectorNames = Common.CONNECTORS.unwrap(context, model)[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_8 $$ config.setBlockOnDurableSend(Common.BLOCK_ON_DURABLE_SEND.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_22 $$ config.setConnectorNames(connectorNames)[ FD ]
Line_35 $$ final ModelNode lbcn = Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model)-->Line_37 $$ config.setLoadBalancingPolicyClassName(lbcn.asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_48 $$ config.setThreadPoolMaxSize(Common.THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_53 $$ if (clientProtocolManagerFactory.isDefined()) -->Line_54 $$ config.setProtocolManagerFactoryStr(clientProtocolManagerFactory.asString())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_40 $$ config.setMinLargeMessageSize(Common.MIN_LARGE_MESSAGE_SIZE.resolveModelAttribute(context, model).asInt())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_50 $$ config.setUseGlobalPools(Common.USE_GLOBAL_POOLS.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))[ CD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_51 $$ config.setLoadBalancingPolicyClassName(Common.CONNECTION_LOAD_BALANCING_CLASS_NAME.resolveModelAttribute(context, model).asString())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_18 $$ config.setCompressLargeMessages(Common.COMPRESS_LARGE_MESSAGES.resolveModelAttribute(context, model).asBoolean())[ FD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_7 $$ config.setBlockOnAcknowledge(Common.BLOCK_ON_ACKNOWLEDGE.resolveModelAttribute(context, model).asBoolean())[ CD ]
Line_2 $$ static ConnectionFactoryConfiguration createConfiguration(final OperationContext context, final String name, final ModelNode model) throws OperationFailedException -->Line_12 $$ config.setClientFailureCheckPeriod(Common.CLIENT_FAILURE_CHECK_PERIOD.resolveModelAttribute(context, model).asInt())[ FD ]
Line_4 $$ final ConnectionFactoryConfiguration config = new ConnectionFactoryConfigurationImpl().setName(name).setHA(ActiveMQClient.DEFAULT_HA).setBindings(entries.toArray(new String[entries.size()]))-->Line_20 $$ config.setConnectionTTL(Common.CONNECTION_TTL.resolveModelAttribute(context, model).asLong())[ FD ]
Line_21 $$ List<String> connectorNames = Common.CONNECTORS.unwrap(context, model)-->Line_22 $$ config.setConnectorNames(connectorNames)[ FD ]
