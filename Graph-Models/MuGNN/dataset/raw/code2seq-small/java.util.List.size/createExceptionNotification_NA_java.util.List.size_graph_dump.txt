Line_3 $$ for (int i = 0; i < patterns.size(); i++) -->Line_5 $$ if (matcher.matches()) [ CD ]
Line_2 $$ protected static ComparisonFailureData createExceptionNotification(String message, List patterns) -->Line_3 $$ for (int i = 0; i < patterns.size(); i++) [ CD ]
Line_5 $$ if (matcher.matches()) -->Line_6 $$ return new ComparisonFailureData(matcher.group(1).replaceAll("\\\\n", "\n"), matcher.group(2).replaceAll("\\\\n", "\n"))[ CD ]
Line_3 $$ for (int i = 0; i < patterns.size(); i++) -->Line_4 $$ final Matcher matcher = ((Pattern) patterns.get(i)).matcher(message)[ FD ]
Line_4 $$ final Matcher matcher = ((Pattern) patterns.get(i)).matcher(message)-->Line_6 $$ return new ComparisonFailureData(matcher.group(1).replaceAll("\\\\n", "\n"), matcher.group(2).replaceAll("\\\\n", "\n"))[ FD ]
Line_3 $$ for (int i = 0; i < patterns.size(); i++) -->Line_4 $$ final Matcher matcher = ((Pattern) patterns.get(i)).matcher(message)[ CD ]
Line_4 $$ final Matcher matcher = ((Pattern) patterns.get(i)).matcher(message)-->Line_5 $$ if (matcher.matches()) [ FD ]
Line_2 $$ protected static ComparisonFailureData createExceptionNotification(String message, List patterns) -->Line_9 $$ return null[ CD ]
Line_2 $$ protected static ComparisonFailureData createExceptionNotification(String message, List patterns) -->Line_4 $$ final Matcher matcher = ((Pattern) patterns.get(i)).matcher(message)[ FD ]
Line_2 $$ protected static ComparisonFailureData createExceptionNotification(String message, List patterns) -->Line_3 $$ for (int i = 0; i < patterns.size(); i++) [ FD ]
