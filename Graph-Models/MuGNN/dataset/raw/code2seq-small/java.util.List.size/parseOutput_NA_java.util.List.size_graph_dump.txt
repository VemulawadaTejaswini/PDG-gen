Line_37 $$ String lineNum = tokens.get(3)-->Line_42 $$ lineInt = Integer.parseInt(lineNum)[ FD ]
Line_3 $$ final String trimmed = text.trim()-->Line_4 $$ if (trimmed.startsWith(GroovyRtConstants.PRESENTABLE_MESSAGE)) [ FD ]
Line_2 $$ private void parseOutput(String text) -->Line_13 $$ outputBuffer.append(text)[ FD ]
Line_31 $$ text = handleOutputBuffer(GroovyRtConstants.MESSAGES_START, GroovyRtConstants.MESSAGES_END)-->Line_32 $$ List<String> tokens = splitAndTrim(text)[ FD ]
Line_2 $$ private void parseOutput(String text) -->Line_3 $$ final String trimmed = text.trim()[ FD ]
Line_38 $$ String columnNum = tokens.get(4)-->Line_43 $$ columnInt = Integer.parseInt(columnNum)[ FD ]
Line_39 $$ int lineInt-->Line_46 $$ lineInt = 0[ FD ]
Line_3 $$ final String trimmed = text.trim()-->Line_5 $$ updateStatus(trimmed.substring(GroovyRtConstants.PRESENTABLE_MESSAGE.length()))[ FD ]
Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) -->Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) [ CD ]
Line_2 $$ private void parseOutput(String text) -->Line_3 $$ final String trimmed = text.trim()[ CD ]
Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) -->Line_20 $$ String outputPath = list.get(0)[ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_36 $$ String url = tokens.get(2)[ CD ]
Line_39 $$ int lineInt-->Line_42 $$ lineInt = Integer.parseInt(lineNum)[ FD ]
Line_42 $$ lineInt = Integer.parseInt(lineNum)-->Line_46 $$ lineInt = 0[ FD ]
Line_34 $$ String category = tokens.get(0)-->Line_49 $$ BuildMessage.Kind kind = category.equals(GroovyCompilerMessageCategories.ERROR) ? BuildMessage.Kind.ERROR : category.equals(GroovyCompilerMessageCategories.WARNING) ? BuildMessage.Kind.WARNING : BuildMessage.Kind.INFO[ FD ]
Line_2 $$ private void parseOutput(String text) -->Line_12 $$ if (StringUtil.isNotEmpty(text)) [ FD ]
Line_12 $$ if (StringUtil.isNotEmpty(text)) -->Line_13 $$ outputBuffer.append(text)[ CD ]
Line_32 $$ List<String> tokens = splitAndTrim(text)-->Line_34 $$ String category = tokens.get(0)[ FD ]
Line_43 $$ columnInt = Integer.parseInt(columnNum)-->Line_47 $$ columnInt = 0[ FD ]
Line_3 $$ final String trimmed = text.trim()-->Line_8 $$ if (GroovyRtConstants.CLEAR_PRESENTABLE.equals(trimmed)) [ FD ]
Line_2 $$ private void parseOutput(String text) -->Line_8 $$ if (GroovyRtConstants.CLEAR_PRESENTABLE.equals(trimmed)) [ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_54 $$ addCompilerMessage(compilerMessage)[ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_40 $$ int columnInt[ CD ]
Line_19 $$ final List<String> list = splitAndTrim(compiled)-->Line_20 $$ String outputPath = list.get(0)[ FD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_50 $$ CompilerMessage compilerMessage = new CompilerMessage("Groovyc", kind, message, url, -1, -1, -1, lineInt, columnInt)[ CD ]
Line_2 $$ private void parseOutput(String text) -->Line_12 $$ if (StringUtil.isNotEmpty(text)) [ CD ]
Line_32 $$ List<String> tokens = splitAndTrim(text)-->Line_37 $$ String lineNum = tokens.get(3)[ FD ]
Line_32 $$ List<String> tokens = splitAndTrim(text)-->Line_35 $$ String message = tokens.get(1)[ FD ]
Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) -->Line_15 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_END) == -1) [ CD ]
Line_32 $$ List<String> tokens = splitAndTrim(text)-->Line_33 $$ LOG.assertTrue(tokens.size() > 4, "Wrong number of output params")[ FD ]
Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) -->Line_19 $$ final List<String> list = splitAndTrim(compiled)[ CD ]
Line_22 $$ OutputItem item = new OutputItem(outputPath, sourceFile)-->Line_26 $$ myCompiledItems.add(item)[ FD ]
Line_15 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_END) == -1) -->Line_16 $$ return[ CD ]
Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) -->Line_26 $$ myCompiledItems.add(item)[ CD ]
Line_2 $$ private void parseOutput(String text) -->Line_32 $$ List<String> tokens = splitAndTrim(text)[ FD ]
Line_40 $$ int columnInt-->Line_43 $$ columnInt = Integer.parseInt(columnNum)[ FD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_37 $$ String lineNum = tokens.get(3)[ CD ]
Line_4 $$ if (trimmed.startsWith(GroovyRtConstants.PRESENTABLE_MESSAGE)) -->Line_5 $$ updateStatus(trimmed.substring(GroovyRtConstants.PRESENTABLE_MESSAGE.length()))[ CD ]
Line_18 $$ final String compiled = handleOutputBuffer(GroovyRtConstants.COMPILED_START, GroovyRtConstants.COMPILED_END)-->Line_19 $$ final List<String> list = splitAndTrim(compiled)[ FD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_49 $$ BuildMessage.Kind kind = category.equals(GroovyCompilerMessageCategories.ERROR) ? BuildMessage.Kind.ERROR : category.equals(GroovyCompilerMessageCategories.WARNING) ? BuildMessage.Kind.WARNING : BuildMessage.Kind.INFO[ CD ]
Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) -->Line_18 $$ final String compiled = handleOutputBuffer(GroovyRtConstants.COMPILED_START, GroovyRtConstants.COMPILED_END)[ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_51 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_4 $$ if (trimmed.startsWith(GroovyRtConstants.PRESENTABLE_MESSAGE)) -->Line_6 $$ return[ CD ]
Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) -->Line_23 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_38 $$ String columnNum = tokens.get(4)[ CD ]
Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) -->Line_21 $$ String sourceFile = list.get(1)[ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_39 $$ int lineInt[ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_28 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_END) == -1) [ CD ]
Line_2 $$ private void parseOutput(String text) -->Line_4 $$ if (trimmed.startsWith(GroovyRtConstants.PRESENTABLE_MESSAGE)) [ CD ]
Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) -->Line_22 $$ OutputItem item = new OutputItem(outputPath, sourceFile)[ CD ]
Line_32 $$ List<String> tokens = splitAndTrim(text)-->Line_38 $$ String columnNum = tokens.get(4)[ FD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_31 $$ text = handleOutputBuffer(GroovyRtConstants.MESSAGES_START, GroovyRtConstants.MESSAGES_END)[ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_35 $$ String message = tokens.get(1)[ CD ]
Line_19 $$ final List<String> list = splitAndTrim(compiled)-->Line_21 $$ String sourceFile = list.get(1)[ FD ]
Line_2 $$ private void parseOutput(String text) -->Line_31 $$ text = handleOutputBuffer(GroovyRtConstants.MESSAGES_START, GroovyRtConstants.MESSAGES_END)[ FD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_34 $$ String category = tokens.get(0)[ CD ]
Line_40 $$ int columnInt-->Line_47 $$ columnInt = 0[ FD ]
Line_12 $$ if (StringUtil.isNotEmpty(text)) -->Line_14 $$ if (outputBuffer.indexOf(GroovyRtConstants.COMPILED_START) != -1) [ CD ]
Line_32 $$ List<String> tokens = splitAndTrim(text)-->Line_36 $$ String url = tokens.get(2)[ FD ]
Line_51 $$ if (LOG.isDebugEnabled()) -->Line_52 $$ LOG.debug("Message: " + compilerMessage)[ CD ]
Line_8 $$ if (GroovyRtConstants.CLEAR_PRESENTABLE.equals(trimmed)) -->Line_10 $$ return[ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_32 $$ List<String> tokens = splitAndTrim(text)[ CD ]
Line_8 $$ if (GroovyRtConstants.CLEAR_PRESENTABLE.equals(trimmed)) -->Line_9 $$ updateStatus(GROOVY_COMPILER_IN_OPERATION)[ CD ]
Line_28 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_END) == -1) -->Line_29 $$ return[ CD ]
Line_27 $$ if (outputBuffer.indexOf(GroovyRtConstants.MESSAGES_START) != -1) -->Line_33 $$ LOG.assertTrue(tokens.size() > 4, "Wrong number of output params")[ CD ]
Line_50 $$ CompilerMessage compilerMessage = new CompilerMessage("Groovyc", kind, message, url, -1, -1, -1, lineInt, columnInt)-->Line_54 $$ addCompilerMessage(compilerMessage)[ FD ]
Line_23 $$ if (LOG.isDebugEnabled()) -->Line_24 $$ LOG.debug("Output: " + item)[ CD ]
