Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_15 $$ assertNotNull(list)[ CD ]
Line_10 $$ B savedB = new B()-->Line_25 $$ assertSame(a2, savedB)[ FD ]
Line_10 $$ B savedB = new B()-->Line_11 $$ session.save(savedB)[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_30 $$ assertEquals(2, list2.size())[ CD ]
Line_8 $$ A savedA = new A()-->Line_9 $$ session.save(savedA)[ FD ]
Line_14 $$ List list = query.list()-->Line_16 $$ assertEquals(2, list.size())[ FD ]
Line_3 $$ Session session = openSession()-->Line_12 $$ session.flush()[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_17 $$ A a1 = (A) list.get(0)[ CD ]
Line_17 $$ A a1 = (A) list.get(0)-->Line_21 $$ if (a1 instanceof B) [ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_11 $$ session.save(savedB)[ CD ]
Line_18 $$ A a2 = (A) list.get(1)-->Line_25 $$ assertSame(a2, savedB)[ FD ]
Line_21 $$ if (a1 instanceof B) -->Line_26 $$ assertSame(a1, savedA)[ CD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_21 $$ if (a1 instanceof B) [ CD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_16 $$ assertEquals(2, list.size())[ CD ]
Line_8 $$ A savedA = new A()-->Line_23 $$ assertSame(a2, savedA)[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_28 $$ session.clear()[ CD ]
Line_3 $$ Session session = openSession()-->Line_9 $$ session.save(savedA)[ FD ]
Line_3 $$ Session session = openSession()-->Line_11 $$ session.save(savedB)[ FD ]
Line_14 $$ List list = query.list()-->Line_17 $$ A a1 = (A) list.get(0)[ FD ]
Line_3 $$ Session session = openSession()-->Line_4 $$ session.beginTransaction()[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_12 $$ session.flush()[ CD ]
Line_21 $$ if (a1 instanceof B) -->Line_22 $$ assertSame(a1, savedB)[ CD ]
Line_21 $$ if (a1 instanceof B) -->Line_25 $$ assertSame(a2, savedB)[ CD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_29 $$ List list2 = session.getNamedQuery("propertyResultDiscriminator").list()[ CD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_32 $$ session.close()[ CD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_14 $$ List list = query.list()[ CD ]
Line_3 $$ Session session = openSession()-->Line_5 $$ for (Object entity : session.createQuery("from A").list()) [ FD ]
Line_3 $$ Session session = openSession()-->Line_29 $$ List list2 = session.getNamedQuery("propertyResultDiscriminator").list()[ FD ]
Line_17 $$ A a1 = (A) list.get(0)-->Line_22 $$ assertSame(a1, savedB)[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_19 $$ assertTrue((a2 instanceof B) || (a1 instanceof B))[ CD ]
Line_18 $$ A a2 = (A) list.get(1)-->Line_23 $$ assertSame(a2, savedA)[ FD ]
Line_14 $$ List list = query.list()-->Line_18 $$ A a2 = (A) list.get(1)[ FD ]
Line_29 $$ List list2 = session.getNamedQuery("propertyResultDiscriminator").list()-->Line_30 $$ assertEquals(2, list2.size())[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_4 $$ session.beginTransaction()[ CD ]
Line_14 $$ List list = query.list()-->Line_15 $$ assertNotNull(list)[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_20 $$ assertFalse(a1 instanceof B && a2 instanceof B)[ CD ]
Line_3 $$ Session session = openSession()-->Line_13 $$ Query query = session.createSQLQuery("select identifier_column as [ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_10 $$ B savedB = new B()[ CD ]
Line_3 $$ Session session = openSession()-->Line_32 $$ session.close()[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_9 $$ session.save(savedA)[ CD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_3 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_8 $$ A savedA = new A()[ CD ]
Line_3 $$ Session session = openSession()-->Line_31 $$ session.getTransaction().commit()[ FD ]
Line_13 $$ Query query = session.createSQLQuery("select identifier_column as -->Line_14 $$ List list = query.list()[ FD ]
Line_17 $$ A a1 = (A) list.get(0)-->Line_26 $$ assertSame(a1, savedA)[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_31 $$ session.getTransaction().commit()[ CD ]
Line_5 $$ for (Object entity : session.createQuery("from A").list()) -->Line_6 $$ session.delete(entity)[ FD ]
Line_3 $$ Session session = openSession()-->Line_6 $$ session.delete(entity)[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_13 $$ Query query = session.createSQLQuery("select identifier_column as [ CD ]
Line_21 $$ if (a1 instanceof B) -->Line_23 $$ assertSame(a2, savedA)[ CD ]
Line_10 $$ B savedB = new B()-->Line_22 $$ assertSame(a1, savedB)[ FD ]
Line_3 $$ Session session = openSession()-->Line_28 $$ session.clear()[ FD ]
Line_8 $$ A savedA = new A()-->Line_26 $$ assertSame(a1, savedA)[ FD ]
Line_2 $$ public void testFindBySQLDiscriminatedSameSession() throws Exception -->Line_18 $$ A a2 = (A) list.get(1)[ CD ]
