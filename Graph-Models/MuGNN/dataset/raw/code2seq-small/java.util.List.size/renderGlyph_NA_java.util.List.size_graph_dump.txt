Line_14 $$ Pixmap fontPixmap = unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap()-->Line_15 $$ int fontWidth = fontPixmap.getWidth()[ FD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_87 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_41 $$ if (effect instanceof ColorEffect)-->Line_42 $$ scratchGraphics.setColor(((ColorEffect) effect).getColor())[ CD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_26 $$ glyphPixels.position(padTop * glyphRowBytes)[ FD ]
Line_75 $$ for (int i = 0, n = hashes.size(); i < n; i++) -->Line_76 $$ String other = hashes.get(i)[ CD ]
Line_23 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)-->Line_76 $$ String other = hashes.get(i)[ FD ]
Line_25 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)-->Line_76 $$ String other = hashes.get(i)[ FD ]
Line_20 $$ ByteBuffer fontPixels = fontPixmap.getPixels()-->Line_32 $$ fontPixels.position(0)[ FD ]
Line_21 $$ byte[] row = new byte[glyphRowBytes]-->Line_23 $$ glyphPixels.put(row)[ FD ]
Line_61 $$ format = GL12.GL_BGRA-->Line_87 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_33 $$ glyphPixels.position(height * glyphRowBytes)[ FD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_67 $$ md.update(glyphPixels)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_32 $$ fontPixels.position(0)[ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_18 $$ int padXBytes = padLeftBytes + unicodeFont.getPaddingRight() * 4[ CD ]
Line_54 $$ height = Math.min(height, texture.getHeight())-->Line_87 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_35 $$ format = GL11.GL_RGBA-->Line_61 $$ format = GL12.GL_BGRA[ FD ]
Line_57 $$ for (int y = 0; y < height; y++) -->Line_58 $$ raster.getDataElements(0, y, width, 1, row)[ CD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_22 $$ glyphPixels.position(0)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_61 $$ format = GL12.GL_BGRA[ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_17 $$ int padLeftBytes = unicodeFont.getPaddingLeft() * 4[ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_34 $$ glyphPixels.flip()[ CD ]
Line_21 $$ byte[] row = new byte[glyphRowBytes]-->Line_58 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_47 $$ if (unicodeFont.getRenderType() == RenderType.Java) -->Line_48 $$ scratchGraphics.setColor(java.awt.Color.white)[ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_16 $$ int padTop = unicodeFont.getPaddingTop(), padBottom = unicodeFont.getPaddingBottom()[ CD ]
Line_16 $$ int padTop = unicodeFont.getPaddingTop(), padBottom = unicodeFont.getPaddingBottom()-->Line_25 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_14 $$ Pixmap fontPixmap = unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap()[ CD ]
Line_27 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_58 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_16 $$ int padTop = unicodeFont.getPaddingTop(), padBottom = unicodeFont.getPaddingBottom()-->Line_23 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)[ FD ]
Line_75 $$ for (int i = 0, n = hashes.size(); i < n; i++) -->Line_77 $$ if (other.equals(hash)) [ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_35 $$ format = GL11.GL_RGBA[ CD ]
Line_12 $$ BitmapFontData data = unicodeFont.bitmapFont.getData()-->Line_13 $$ BitmapFont.Glyph g = data.getGlyph((char) glyph.getCodePoint())[ FD ]
Line_19 $$ int glyphRowBytes = width * 4, fontRowBytes = g.width * 4-->Line_29 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ FD ]
Line_47 $$ if (unicodeFont.getRenderType() == RenderType.Java) -->Line_49 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) ((Effect) iter.next()).draw(scratchImage, scratchGraphics, unicodeFont, glyph)[ CD ]
Line_54 $$ height = Math.min(height, texture.getHeight())-->Line_57 $$ for (int y = 0; y < height; y++) [ FD ]
Line_27 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_75 $$ for (int i = 0, n = hashes.size(); i < n; i++) [ FD ]
Line_25 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)-->Line_78 $$ Glyph dupe = pageGlyphs.get(i)[ FD ]
Line_68 $$ BigInteger bigInt = new BigInteger(1, md.digest())-->Line_69 $$ hash = bigInt.toString(16)[ FD ]
Line_88 $$ float u = pageX / (float) texture.getWidth()-->Line_92 $$ glyph.setTexture(texture, u, v, u2, v2)[ FD ]
Line_75 $$ for (int i = 0, n = hashes.size(); i < n; i++) -->Line_78 $$ Glyph dupe = pageGlyphs.get(i)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_13 $$ BitmapFont.Glyph g = data.getGlyph((char) glyph.getCodePoint())[ CD ]
Line_75 $$ for (int i = 0, n = hashes.size(); i < n; i++) -->Line_76 $$ String other = hashes.get(i)[ FD ]
Line_77 $$ if (other.equals(hash)) -->Line_78 $$ Glyph dupe = pageGlyphs.get(i)[ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_15 $$ int fontWidth = fontPixmap.getWidth()[ CD ]
Line_91 $$ float v2 = (pageY + height) / (float) texture.getHeight()-->Line_92 $$ glyph.setTexture(texture, u, v, u2, v2)[ FD ]
Line_20 $$ ByteBuffer fontPixels = fontPixmap.getPixels()-->Line_29 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ FD ]
Line_77 $$ if (other.equals(hash)) -->Line_79 $$ glyph.setTexture(dupe.texture, dupe.u, dupe.v, dupe.u2, dupe.v2)[ CD ]
Line_77 $$ if (other.equals(hash)) -->Line_80 $$ return false[ CD ]
Line_69 $$ hash = bigInt.toString(16)-->Line_77 $$ if (other.equals(hash)) [ FD ]
Line_39 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_40 $$ Effect effect = (Effect) iter.next()[ CD ]
Line_10 $$ int format-->Line_35 $$ format = GL11.GL_RGBA[ FD ]
Line_21 $$ byte[] row = new byte[glyphRowBytes]-->Line_29 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_33 $$ glyphPixels.position(height * glyphRowBytes)[ CD ]
Line_21 $$ byte[] row = new byte[glyphRowBytes]-->Line_25 $$ glyphPixels.put(row)[ FD ]
Line_21 $$ byte[] row = new byte[glyphRowBytes]-->Line_30 $$ glyphPixels.put(row)[ FD ]
Line_14 $$ Pixmap fontPixmap = unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap()-->Line_20 $$ ByteBuffer fontPixels = fontPixmap.getPixels()[ FD ]
Line_35 $$ format = GL11.GL_RGBA-->Line_87 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_55 $$ WritableRaster raster = scratchImage.getRaster()-->Line_58 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_55 $$ WritableRaster raster = scratchImage.getRaster()[ CD ]
Line_53 $$ width = Math.min(width, texture.getWidth())-->Line_87 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_10 $$ int format-->Line_87 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_17 $$ int padLeftBytes = unicodeFont.getPaddingLeft() * 4-->Line_29 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_12 $$ BitmapFontData data = unicodeFont.bitmapFont.getData()[ CD ]
Line_10 $$ int format-->Line_61 $$ format = GL12.GL_BGRA[ FD ]
Line_89 $$ float v = pageY / (float) texture.getHeight()-->Line_92 $$ glyph.setTexture(texture, u, v, u2, v2)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_20 $$ ByteBuffer fontPixels = fontPixmap.getPixels()[ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_25 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)[ CD ]
Line_27 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_28 $$ fontPixels.position(((g.srcY + y) * fontWidth + g.srcX) * 4)[ CD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_25 $$ glyphPixels.put(row)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_53 $$ width = Math.min(width, texture.getWidth())[ CD ]
Line_53 $$ width = Math.min(width, texture.getWidth())-->Line_58 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_40 $$ Effect effect = (Effect) iter.next()-->Line_41 $$ if (effect instanceof ColorEffect)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_24 $$ glyphPixels.position((height - padBottom) * glyphRowBytes)[ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_22 $$ glyphPixels.position(0)[ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_19 $$ int glyphRowBytes = width * 4, fontRowBytes = g.width * 4[ CD ]
Line_23 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)-->Line_25 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)[ FD ]
Line_57 $$ for (int y = 0; y < height; y++) -->Line_59 $$ scratchIntBuffer.put(row)[ CD ]
Line_76 $$ String other = hashes.get(i)-->Line_77 $$ if (other.equals(hash)) [ FD ]
Line_90 $$ float u2 = (pageX + width) / (float) texture.getWidth()-->Line_92 $$ glyph.setTexture(texture, u, v, u2, v2)[ FD ]
Line_66 $$ MessageDigest md = MessageDigest.getInstance("SHA-256")-->Line_67 $$ md.update(glyphPixels)[ FD ]
Line_27 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_57 $$ for (int y = 0; y < height; y++) [ FD ]
Line_39 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_41 $$ if (effect instanceof ColorEffect)[ CD ]
Line_23 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)-->Line_78 $$ Glyph dupe = pageGlyphs.get(i)[ FD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_34 $$ glyphPixels.flip()[ FD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_30 $$ glyphPixels.put(row)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_21 $$ byte[] row = new byte[glyphRowBytes][ CD ]
Line_27 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_29 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ CD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_23 $$ glyphPixels.put(row)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_23 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)[ CD ]
Line_25 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)-->Line_75 $$ for (int i = 0, n = hashes.size(); i < n; i++) [ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_27 $$ for (int y = 0, n = g.height; y < n; y++) [ CD ]
Line_9 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_24 $$ glyphPixels.position((height - padBottom) * glyphRowBytes)[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_26 $$ glyphPixels.position(padTop * glyphRowBytes)[ CD ]
Line_20 $$ ByteBuffer fontPixels = fontPixmap.getPixels()-->Line_28 $$ fontPixels.position(((g.srcY + y) * fontWidth + g.srcX) * 4)[ FD ]
Line_27 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_30 $$ glyphPixels.put(row)[ CD ]
Line_39 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_49 $$ ((Effect) iter.next()).draw(scratchImage, scratchGraphics, unicodeFont, glyph)[ FD ]
Line_39 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_40 $$ Effect effect = (Effect) iter.next()[ FD ]
Line_23 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)-->Line_75 $$ for (int i = 0, n = hashes.size(); i < n; i++) [ FD ]
Line_69 $$ hash = bigInt.toString(16)-->Line_84 $$ hashes.add(hash)[ FD ]
Line_57 $$ for (int y = 0; y < height; y++) -->Line_58 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_39 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_49 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) ((Effect) iter.next()).draw(scratchImage, scratchGraphics, unicodeFont, glyph)[ FD ]
Line_66 $$ MessageDigest md = MessageDigest.getInstance("SHA-256")-->Line_68 $$ BigInteger bigInt = new BigInteger(1, md.digest())[ FD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_57 $$ for (int y = 0; y < height; y++) [ CD ]
Line_11 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_54 $$ height = Math.min(height, texture.getHeight())[ CD ]
Line_21 $$ byte[] row = new byte[glyphRowBytes]-->Line_59 $$ scratchIntBuffer.put(row)[ FD ]
