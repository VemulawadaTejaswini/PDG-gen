Line_4 $$ List<String> indexNames = new ArrayList()-->Line_8 $$ indexNames.add(indexName)[ FD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_16 $$ loadedAnalyzers.get(preBuiltAnalyzer).add(randomVersion)[ CD ]
Line_4 $$ List<String> indexNames = new ArrayList()-->Line_24 $$ String randomIndex = indexNames.get(randomInt(indexNames.size() - 1))[ FD ]
Line_26 $$ Map<String, Object> data = new HashMap()-->Line_28 $$ index(randomIndex, "type", randomId, data)[ FD ]
Line_31 $$ int amountOfIndicesToClose = randomInt(numIndices - 1)-->Line_32 $$ for (int i = 0; i < amountOfIndicesToClose; i++) [ FD ]
Line_12 $$ Version randomVersion = randomVersion(random())-->Line_18 $$ Settings versionSettings = settings(randomVersion).build()[ FD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_19 $$ client().admin().indices().prepareCreate(indexName).addMapping("type", mapping).setSettings(versionSettings).get()[ CD ]
Line_11 $$ String name = preBuiltAnalyzer.name().toLowerCase(Locale.ROOT)-->Line_17 $$ final XContentBuilder mapping = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("foo").field("type", "string").field("analyzer", name).endObject().endObject().endObject().endObject()[ FD ]
Line_3 $$ Map<PreBuiltAnalyzers, List<Version>> loadedAnalyzers = new HashMap()-->Line_37 $$ assertThatAnalyzersHaveBeenLoaded(loadedAnalyzers)[ FD ]
Line_10 $$ PreBuiltAnalyzers preBuiltAnalyzer = PreBuiltAnalyzers.values()[randomInt]-->Line_14 $$ loadedAnalyzers.put(preBuiltAnalyzer, new ArrayList<Version>())[ FD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_36 $$ ensureGreen()[ CD ]
Line_23 $$ for (int i = 0; i < numDocs; i++) -->Line_24 $$ String randomIndex = indexNames.get(randomInt(indexNames.size() - 1))[ CD ]
Line_12 $$ Version randomVersion = randomVersion(random())-->Line_16 $$ loadedAnalyzers.get(preBuiltAnalyzer).add(randomVersion)[ FD ]
Line_26 $$ Map<String, Object> data = new HashMap()-->Line_27 $$ data.put("foo", randomAsciiOfLength(scaledRandomIntBetween(5, 50)))[ FD ]
Line_7 $$ String indexName = randomAsciiOfLength(10).toLowerCase(Locale.ROOT)-->Line_34 $$ client().admin().indices().prepareClose(indexName).execute().actionGet()[ FD ]
Line_33 $$ String indexName = indexNames.get(i)-->Line_34 $$ client().admin().indices().prepareClose(indexName).execute().actionGet()[ FD ]
Line_25 $$ String randomId = randomInt() + ""-->Line_28 $$ index(randomIndex, "type", randomId, data)[ FD ]
Line_22 $$ final int numDocs = randomIntBetween(10, 100)-->Line_23 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_23 $$ for (int i = 0; i < numDocs; i++) -->Line_32 $$ for (int i = 0; i < amountOfIndicesToClose; i++) [ FD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_37 $$ assertThatAnalyzersHaveBeenLoaded(loadedAnalyzers)[ CD ]
Line_23 $$ for (int i = 0; i < numDocs; i++) -->Line_27 $$ data.put("foo", randomAsciiOfLength(scaledRandomIntBetween(5, 50)))[ CD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_18 $$ Settings versionSettings = settings(randomVersion).build()[ CD ]
Line_7 $$ String indexName = randomAsciiOfLength(10).toLowerCase(Locale.ROOT)-->Line_8 $$ indexNames.add(indexName)[ FD ]
Line_7 $$ String indexName = randomAsciiOfLength(10).toLowerCase(Locale.ROOT)-->Line_19 $$ client().admin().indices().prepareCreate(indexName).addMapping("type", mapping).setSettings(versionSettings).get()[ FD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_23 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_10 $$ PreBuiltAnalyzers preBuiltAnalyzer = PreBuiltAnalyzers.values()[randomInt]-->Line_13 $$ if (!loadedAnalyzers.containsKey(preBuiltAnalyzer)) [ FD ]
Line_3 $$ Map<PreBuiltAnalyzers, List<Version>> loadedAnalyzers = new HashMap()-->Line_14 $$ loadedAnalyzers.put(preBuiltAnalyzer, new ArrayList<Version>())[ FD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_17 $$ final XContentBuilder mapping = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("foo").field("type", "string").field("analyzer", name).endObject().endObject().endObject().endObject()[ CD ]
Line_23 $$ for (int i = 0; i < numDocs; i++) -->Line_28 $$ index(randomIndex, "type", randomId, data)[ CD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_5 $$ final int numIndices = scaledRandomIntBetween(2, 4)[ CD ]
Line_3 $$ Map<PreBuiltAnalyzers, List<Version>> loadedAnalyzers = new HashMap()-->Line_38 $$ assertLuceneAnalyzersAreNotClosed(loadedAnalyzers)[ FD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_33 $$ String indexName = indexNames.get(i)[ FD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_22 $$ final int numDocs = randomIntBetween(10, 100)[ CD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_31 $$ int amountOfIndicesToClose = randomInt(numIndices - 1)[ CD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_11 $$ String name = preBuiltAnalyzer.name().toLowerCase(Locale.ROOT)[ CD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_30 $$ refresh()[ CD ]
Line_5 $$ final int numIndices = scaledRandomIntBetween(2, 4)-->Line_6 $$ for (int i = 0; i < numIndices; i++) [ FD ]
Line_3 $$ Map<PreBuiltAnalyzers, List<Version>> loadedAnalyzers = new HashMap()-->Line_13 $$ if (!loadedAnalyzers.containsKey(preBuiltAnalyzer)) [ FD ]
Line_32 $$ for (int i = 0; i < amountOfIndicesToClose; i++) -->Line_33 $$ String indexName = indexNames.get(i)[ FD ]
Line_3 $$ Map<PreBuiltAnalyzers, List<Version>> loadedAnalyzers = new HashMap()-->Line_16 $$ loadedAnalyzers.get(preBuiltAnalyzer).add(randomVersion)[ FD ]
Line_13 $$ if (!loadedAnalyzers.containsKey(preBuiltAnalyzer)) -->Line_14 $$ loadedAnalyzers.put(preBuiltAnalyzer, new ArrayList<Version>())[ CD ]
Line_4 $$ List<String> indexNames = new ArrayList()-->Line_33 $$ String indexName = indexNames.get(i)[ FD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_3 $$ Map<PreBuiltAnalyzers, List<Version>> loadedAnalyzers = new HashMap()[ CD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_32 $$ for (int i = 0; i < amountOfIndicesToClose; i++) [ FD ]
Line_18 $$ Settings versionSettings = settings(randomVersion).build()-->Line_19 $$ client().admin().indices().prepareCreate(indexName).addMapping("type", mapping).setSettings(versionSettings).get()[ FD ]
Line_32 $$ for (int i = 0; i < amountOfIndicesToClose; i++) -->Line_33 $$ String indexName = indexNames.get(i)[ CD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_32 $$ for (int i = 0; i < amountOfIndicesToClose; i++) [ CD ]
Line_23 $$ for (int i = 0; i < numDocs; i++) -->Line_33 $$ String indexName = indexNames.get(i)[ FD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_6 $$ for (int i = 0; i < numIndices; i++) [ CD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_10 $$ PreBuiltAnalyzers preBuiltAnalyzer = PreBuiltAnalyzers.values()[randomInt][ CD ]
Line_10 $$ PreBuiltAnalyzers preBuiltAnalyzer = PreBuiltAnalyzers.values()[randomInt]-->Line_16 $$ loadedAnalyzers.get(preBuiltAnalyzer).add(randomVersion)[ FD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_23 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_38 $$ assertLuceneAnalyzersAreNotClosed(loadedAnalyzers)[ CD ]
Line_10 $$ PreBuiltAnalyzers preBuiltAnalyzer = PreBuiltAnalyzers.values()[randomInt]-->Line_11 $$ String name = preBuiltAnalyzer.name().toLowerCase(Locale.ROOT)[ FD ]
Line_32 $$ for (int i = 0; i < amountOfIndicesToClose; i++) -->Line_34 $$ client().admin().indices().prepareClose(indexName).execute().actionGet()[ CD ]
Line_23 $$ for (int i = 0; i < numDocs; i++) -->Line_26 $$ Map<String, Object> data = new HashMap()[ CD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_8 $$ indexNames.add(indexName)[ CD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_7 $$ String indexName = randomAsciiOfLength(10).toLowerCase(Locale.ROOT)[ CD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_9 $$ int randomInt = randomInt(PreBuiltAnalyzers.values().length - 1)[ CD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_12 $$ Version randomVersion = randomVersion(random())[ CD ]
Line_17 $$ final XContentBuilder mapping = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("foo").field("type", "string").field("analyzer", name).endObject().endObject().endObject().endObject()-->Line_19 $$ client().admin().indices().prepareCreate(indexName).addMapping("type", mapping).setSettings(versionSettings).get()[ FD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_21 $$ ensureGreen()[ CD ]
Line_6 $$ for (int i = 0; i < numIndices; i++) -->Line_13 $$ if (!loadedAnalyzers.containsKey(preBuiltAnalyzer)) [ CD ]
Line_24 $$ String randomIndex = indexNames.get(randomInt(indexNames.size() - 1))-->Line_28 $$ index(randomIndex, "type", randomId, data)[ FD ]
Line_23 $$ for (int i = 0; i < numDocs; i++) -->Line_25 $$ String randomId = randomInt() + ""[ CD ]
Line_2 $$ public void testThatPreBuiltAnalyzersAreNotClosedOnIndexClose() throws Exception -->Line_4 $$ List<String> indexNames = new ArrayList()[ CD ]
