Line_29 $$ attribute.set(new AsyncBroker<Long, String>() -->Line_33 $$ keyRef.set(key)[ FD ]
Line_29 $$ attribute.set(new AsyncBroker<Long, String>() -->Line_33 $$ keyRef.set(key)[ CD ]
Line_13 $$ Throwable throwable = ee.getCause()-->Line_44 $$ Assert.assertSame(ClosedChannelException.class, throwable.getClass())[ FD ]
Line_6 $$ Future<Serializable> future = RPCUtil.execute(_embeddedChannel, new ExceptionRPCCallable(testException))-->Line_10 $$ future.get()[ FD ]
Line_29 $$ attribute.set(new AsyncBroker<Long, String>() -->Line_34 $$ return new DefaultNoticeableFuture()[ CD ]
Line_28 $$ final AtomicLong keyRef = new AtomicLong()-->Line_42 $$ Assert.assertEquals("Unable to place exception because no future exists with ID " + keyRef.get(), logRecord.getMessage())[ FD ]
Line_13 $$ Throwable throwable = ee.getCause()-->Line_14 $$ Assert.assertSame(testException, throwable)[ FD ]
Line_28 $$ final AtomicLong keyRef = new AtomicLong()-->Line_33 $$ keyRef.set(key)[ FD ]
Line_18 $$ Future<String> channelFailureFuture = RPCUtil.execute(_embeddedChannel, new ResultRPCCallable(StringPool.BLANK))-->Line_20 $$ channelFailureFuture.get()[ FD ]
Line_13 $$ Throwable throwable = ee.getCause()-->Line_24 $$ Assert.assertSame(ClosedChannelException.class, throwable.getClass())[ FD ]
