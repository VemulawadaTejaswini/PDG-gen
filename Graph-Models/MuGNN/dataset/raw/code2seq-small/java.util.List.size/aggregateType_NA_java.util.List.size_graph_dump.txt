Line_2 $$ public Type aggregateType(List funcTokenList, Type type, QueryTranslatorImpl q) throws QueryException -->Line_5 $$ for (int i = funcTokenList.size() - 1; i >= 0; i--) [ FD ]
Line_5 $$ for (int i = funcTokenList.size() - 1; i >= 0; i--) -->Line_8 $$ retType = getFunction(funcToken, q).getReturnType(argType, q.getFactory())[ CD ]
Line_2 $$ public Type aggregateType(List funcTokenList, Type type, QueryTranslatorImpl q) throws QueryException -->Line_8 $$ retType = getFunction(funcToken, q).getReturnType(argType, q.getFactory())[ FD ]
Line_6 $$ argType = retType-->Line_8 $$ retType = getFunction(funcToken, q).getReturnType(argType, q.getFactory())[ FD ]
Line_4 $$ Type argType-->Line_6 $$ argType = retType[ FD ]
Line_2 $$ public Type aggregateType(List funcTokenList, Type type, QueryTranslatorImpl q) throws QueryException -->Line_7 $$ String funcToken = (String) funcTokenList.get(i)[ FD ]
Line_4 $$ Type argType-->Line_8 $$ retType = getFunction(funcToken, q).getReturnType(argType, q.getFactory())[ FD ]
Line_3 $$ Type retType = type-->Line_6 $$ argType = retType[ FD ]
Line_8 $$ retType = getFunction(funcToken, q).getReturnType(argType, q.getFactory())-->Line_6 $$ argType = retType[ FD ]
Line_2 $$ public Type aggregateType(List funcTokenList, Type type, QueryTranslatorImpl q) throws QueryException -->Line_5 $$ for (int i = funcTokenList.size() - 1; i >= 0; i--) [ CD ]
Line_5 $$ for (int i = funcTokenList.size() - 1; i >= 0; i--) -->Line_7 $$ String funcToken = (String) funcTokenList.get(i)[ CD ]
Line_2 $$ public Type aggregateType(List funcTokenList, Type type, QueryTranslatorImpl q) throws QueryException -->Line_10 $$ return retType[ CD ]
Line_3 $$ Type retType = type-->Line_8 $$ retType = getFunction(funcToken, q).getReturnType(argType, q.getFactory())[ FD ]
Line_2 $$ public Type aggregateType(List funcTokenList, Type type, QueryTranslatorImpl q) throws QueryException -->Line_4 $$ Type argType[ CD ]
Line_5 $$ for (int i = funcTokenList.size() - 1; i >= 0; i--) -->Line_7 $$ String funcToken = (String) funcTokenList.get(i)[ FD ]
Line_2 $$ public Type aggregateType(List funcTokenList, Type type, QueryTranslatorImpl q) throws QueryException -->Line_3 $$ Type retType = type[ CD ]
Line_7 $$ String funcToken = (String) funcTokenList.get(i)-->Line_8 $$ retType = getFunction(funcToken, q).getReturnType(argType, q.getFactory())[ FD ]
Line_5 $$ for (int i = funcTokenList.size() - 1; i >= 0; i--) -->Line_6 $$ argType = retType[ CD ]
