Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_13 $$ IntegerRepository ir = new IntegerRepository()[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_15 $$ RepositoryMethodInjectionBean bean = (RepositoryMethodInjectionBean) bf.getBean("annotatedBean")[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_4 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_14 $$ bf.registerSingleton("integerRepo", ir)[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_26 $$ assertSame(1, bean.stringRepositoryMap.size())[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_6 $$ bpp.setBeanFactory(bf)[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_29 $$ assertSame(ir, bean.integerRepositoryMap.get("integerRepo"))[ CD ]
Line_13 $$ IntegerRepository ir = new IntegerRepository()-->Line_21 $$ assertSame(ir, bean.integerRepositoryArray[0])[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_19 $$ assertSame(1, bean.integerRepositoryArray.length)[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_24 $$ assertSame(sr, bean.stringRepositoryList.get(0))[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_21 $$ assertSame(ir, bean.integerRepositoryArray[0])[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_17 $$ assertSame(ir, bean.integerRepository)[ CD ]
Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryMethodInjectionBean.class)-->Line_9 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_13 $$ IntegerRepository ir = new IntegerRepository()-->Line_17 $$ assertSame(ir, bean.integerRepository)[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_6 $$ bpp.setBeanFactory(bf)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_12 $$ bf.registerSingleton("stringRepo", sr)[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_20 $$ assertSame(sr, bean.stringRepositoryArray[0])[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_12 $$ bf.registerSingleton("stringRepo", sr)[ CD ]
Line_11 $$ StringRepository sr = new StringRepository()-->Line_20 $$ assertSame(sr, bean.stringRepositoryArray[0])[ FD ]
Line_11 $$ StringRepository sr = new StringRepository()-->Line_28 $$ assertSame(sr, bean.stringRepositoryMap.get("stringRepo"))[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_7 $$ bf.addBeanPostProcessor(bpp)[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_23 $$ assertSame(1, bean.integerRepositoryList.size())[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_4 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_27 $$ assertSame(1, bean.integerRepositoryMap.size())[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_16 $$ assertSame(sr, bean.stringRepository)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_7 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_28 $$ assertSame(sr, bean.stringRepositoryMap.get("stringRepo"))[ CD ]
Line_13 $$ IntegerRepository ir = new IntegerRepository()-->Line_29 $$ assertSame(ir, bean.integerRepositoryMap.get("integerRepo"))[ FD ]
Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_7 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryMethodInjectionBean.class)-->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_15 $$ RepositoryMethodInjectionBean bean = (RepositoryMethodInjectionBean) bf.getBean("annotatedBean")[ FD ]
Line_11 $$ StringRepository sr = new StringRepository()-->Line_24 $$ assertSame(sr, bean.stringRepositoryList.get(0))[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_25 $$ assertSame(ir, bean.integerRepositoryList.get(0))[ CD ]
Line_13 $$ IntegerRepository ir = new IntegerRepository()-->Line_14 $$ bf.registerSingleton("integerRepo", ir)[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_22 $$ assertSame(1, bean.stringRepositoryList.size())[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_11 $$ StringRepository sr = new StringRepository()[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()[ CD ]
Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_6 $$ bpp.setBeanFactory(bf)[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_14 $$ bf.registerSingleton("integerRepo", ir)[ CD ]
Line_11 $$ StringRepository sr = new StringRepository()-->Line_12 $$ bf.registerSingleton("stringRepo", sr)[ FD ]
Line_13 $$ IntegerRepository ir = new IntegerRepository()-->Line_25 $$ assertSame(ir, bean.integerRepositoryList.get(0))[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_9 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_11 $$ StringRepository sr = new StringRepository()-->Line_16 $$ assertSame(sr, bean.stringRepository)[ FD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_18 $$ assertSame(1, bean.stringRepositoryArray.length)[ CD ]
Line_2 $$ public void testGenericsBasedMethodInjection() -->Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryMethodInjectionBean.class)[ CD ]
