Line_7 $$ Callable<Integer> worker = new Callable<Integer>() -->Line_10 $$ Assert.assertEquals(Server.getCurCall().get(), call)[ CD ]
Line_6 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_16 $$ list.add(submit)[ CD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_6 $$ for (int i = 0; i < numberOfThreads; i++) [ FD ]
Line_4 $$ ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads)-->Line_15 $$ Future<Integer> submit = executorService.submit(worker)[ FD ]
Line_7 $$ Callable<Integer> worker = new Callable<Integer>() -->Line_11 $$ int randomPause = pause == 0 ? pause : r.nextInt(pause)[ CD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_21 $$ Assert.assertEquals(input, future.get().intValue())[ FD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_12 $$ return testServer.echo(input, failureOutput, randomPause, success)[ FD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_18 $$ Assert.assertEquals(numberOfThreads, list.size())[ CD ]
Line_20 $$ if (success) -->Line_23 $$ Assert.assertEquals(failureOutput, future.get().intValue())[ CD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_6 $$ for (int i = 0; i < numberOfThreads; i++) [ CD ]
Line_3 $$ final int failureOutput = input + 1-->Line_12 $$ return testServer.echo(input, failureOutput, randomPause, success)[ FD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_3 $$ final int failureOutput = input + 1[ CD ]
Line_3 $$ final int failureOutput = input + 1-->Line_23 $$ Assert.assertEquals(failureOutput, future.get().intValue())[ FD ]
Line_26 $$ if (success) -->Line_29 $$ Assert.assertEquals(retries, testServer.retryCount.get())[ CD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_4 $$ ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads)[ CD ]
Line_26 $$ if (success) -->Line_33 $$ Assert.assertEquals(0, testServer.retryCount.get())[ CD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_4 $$ ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads)[ FD ]
Line_6 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_7 $$ Callable<Integer> worker = new Callable<Integer>() [ CD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_10 $$ Assert.assertEquals(Server.getCurCall().get(), call)[ FD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_9 $$ Server.getCurCall().set(call)[ FD ]
Line_6 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_15 $$ Future<Integer> submit = executorService.submit(worker)[ CD ]
Line_26 $$ if (success) -->Line_32 $$ Assert.assertEquals(opCount, testServer.operationCount.get())[ CD ]
Line_15 $$ Future<Integer> submit = executorService.submit(worker)-->Line_16 $$ list.add(submit)[ FD ]
Line_5 $$ List<Future<Integer>> list = new ArrayList<Future<Integer>>()-->Line_16 $$ list.add(submit)[ FD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_18 $$ Assert.assertEquals(numberOfThreads, list.size())[ FD ]
Line_20 $$ if (success) -->Line_21 $$ Assert.assertEquals(input, future.get().intValue())[ CD ]
Line_7 $$ Callable<Integer> worker = new Callable<Integer>() -->Line_15 $$ Future<Integer> submit = executorService.submit(worker)[ FD ]
Line_26 $$ if (success) -->Line_28 $$ Assert.assertEquals(1, testServer.operationCount.get())[ CD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_5 $$ List<Future<Integer>> list = new ArrayList<Future<Integer>>()[ CD ]
Line_11 $$ int randomPause = pause == 0 ? pause : r.nextInt(pause)-->Line_12 $$ return testServer.echo(input, failureOutput, randomPause, success)[ FD ]
Line_7 $$ Callable<Integer> worker = new Callable<Integer>() -->Line_12 $$ return testServer.echo(input, failureOutput, randomPause, success)[ CD ]
Line_5 $$ List<Future<Integer>> list = new ArrayList<Future<Integer>>()-->Line_18 $$ Assert.assertEquals(numberOfThreads, list.size())[ FD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_26 $$ if (success) [ CD ]
Line_7 $$ Callable<Integer> worker = new Callable<Integer>() -->Line_9 $$ Server.getCurCall().set(call)[ CD ]
Line_2 $$ public void testOperations(final int input, final int numberOfThreads, final int pause, final boolean success, final boolean attemptedBefore, final Server.Call call) throws InterruptedException, ExecutionException -->Line_11 $$ int randomPause = pause == 0 ? pause : r.nextInt(pause)[ FD ]
