Line_7 $$ for (int i = 0, size = descriptions.size(); i < size; i++) -->Line_10 $$ if (localName.equals(xmlName.getLocalName()) || qName.equals(xmlName.getLocalName())) [ CD ]
Line_5 $$ final String qName = tag.getName()-->Line_12 $$ if (DomImplUtil.isNameSuitable(evaluatedXmlName, localName, qName, namespace == null ? namespace = tag.getNamespace() : namespace, file)) [ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_3 $$ final String localName = tag.getLocalName()[ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_7 $$ for (int i = 0, size = descriptions.size(); i < size; i++) [ CD ]
Line_8 $$ final T description = descriptions.get(i)-->Line_9 $$ final XmlName xmlName = description.getXmlName()[ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_5 $$ final String qName = tag.getName()[ CD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_11 $$ final EvaluatedXmlName evaluatedXmlName = parent.createEvaluatedXmlName(xmlName)[ FD ]
Line_3 $$ final String localName = tag.getLocalName()-->Line_10 $$ if (localName.equals(xmlName.getLocalName()) || qName.equals(xmlName.getLocalName())) [ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_6 $$ final XmlFile file = parent.getFile()[ FD ]
Line_4 $$ String namespace = null-->Line_12 $$ if (DomImplUtil.isNameSuitable(evaluatedXmlName, localName, qName, namespace == null ? namespace = tag.getNamespace() : namespace, file)) [ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_17 $$ return null[ CD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_6 $$ final XmlFile file = parent.getFile()[ CD ]
Line_9 $$ final XmlName xmlName = description.getXmlName()-->Line_11 $$ final EvaluatedXmlName evaluatedXmlName = parent.createEvaluatedXmlName(xmlName)[ FD ]
Line_9 $$ final XmlName xmlName = description.getXmlName()-->Line_10 $$ if (localName.equals(xmlName.getLocalName()) || qName.equals(xmlName.getLocalName())) [ FD ]
Line_10 $$ if (localName.equals(xmlName.getLocalName()) || qName.equals(xmlName.getLocalName())) -->Line_12 $$ if (DomImplUtil.isNameSuitable(evaluatedXmlName, localName, qName, namespace == null ? namespace = tag.getNamespace() : namespace, file)) [ CD ]
Line_3 $$ final String localName = tag.getLocalName()-->Line_12 $$ if (DomImplUtil.isNameSuitable(evaluatedXmlName, localName, qName, namespace == null ? namespace = tag.getNamespace() : namespace, file)) [ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_5 $$ final String qName = tag.getName()[ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_7 $$ for (int i = 0, size = descriptions.size(); i < size; i++) [ FD ]
Line_7 $$ for (int i = 0, size = descriptions.size(); i < size; i++) -->Line_8 $$ final T description = descriptions.get(i)[ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_12 $$ if (DomImplUtil.isNameSuitable(evaluatedXmlName, localName, qName, namespace == null ? namespace = tag.getNamespace() : namespace, file)) [ FD ]
Line_12 $$ if (DomImplUtil.isNameSuitable(evaluatedXmlName, localName, qName, namespace == null ? namespace = tag.getNamespace() : namespace, file)) -->Line_13 $$ return description[ CD ]
Line_10 $$ if (localName.equals(xmlName.getLocalName()) || qName.equals(xmlName.getLocalName())) -->Line_11 $$ final EvaluatedXmlName evaluatedXmlName = parent.createEvaluatedXmlName(xmlName)[ CD ]
Line_6 $$ final XmlFile file = parent.getFile()-->Line_12 $$ if (DomImplUtil.isNameSuitable(evaluatedXmlName, localName, qName, namespace == null ? namespace = tag.getNamespace() : namespace, file)) [ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_8 $$ final T description = descriptions.get(i)[ FD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_4 $$ String namespace = null[ CD ]
Line_2 $$ private static <T extends DomChildrenDescription> T findChildrenDescription(List<T> descriptions, XmlTag tag, DomInvocationHandler parent) -->Line_3 $$ final String localName = tag.getLocalName()[ CD ]
Line_7 $$ for (int i = 0, size = descriptions.size(); i < size; i++) -->Line_9 $$ final XmlName xmlName = description.getXmlName()[ CD ]
Line_11 $$ final EvaluatedXmlName evaluatedXmlName = parent.createEvaluatedXmlName(xmlName)-->Line_12 $$ if (DomImplUtil.isNameSuitable(evaluatedXmlName, localName, qName, namespace == null ? namespace = tag.getNamespace() : namespace, file)) [ FD ]
Line_7 $$ for (int i = 0, size = descriptions.size(); i < size; i++) -->Line_8 $$ final T description = descriptions.get(i)[ CD ]
Line_5 $$ final String qName = tag.getName()-->Line_10 $$ if (localName.equals(xmlName.getLocalName()) || qName.equals(xmlName.getLocalName())) [ FD ]
