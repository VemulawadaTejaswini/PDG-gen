Line_4 $$ List<String> indexExpressions = new ArrayList(numIndexExpressions)-->Line_9 $$ assertThat(result.size(), equalTo(indexExpressions.size()))[ FD ]
Line_8 $$ List<String> result = expressionResolver.resolve(context, indexExpressions)-->Line_9 $$ assertThat(result.size(), equalTo(indexExpressions.size()))[ FD ]
Line_10 $$ for (int i = 0; i < indexExpressions.size(); i++) -->Line_11 $$ assertThat(result.get(i), equalTo(indexExpressions.get(i)))[ FD ]
Line_4 $$ List<String> indexExpressions = new ArrayList(numIndexExpressions)-->Line_10 $$ for (int i = 0; i < indexExpressions.size(); i++) [ FD ]
Line_10 $$ for (int i = 0; i < indexExpressions.size(); i++) -->Line_11 $$ assertThat(result.get(i), equalTo(indexExpressions.get(i)))[ CD ]
Line_4 $$ List<String> indexExpressions = new ArrayList(numIndexExpressions)-->Line_6 $$ indexExpressions.add(randomAsciiOfLength(10))[ FD ]
Line_2 $$ public void testNormal() throws Exception -->Line_4 $$ List<String> indexExpressions = new ArrayList(numIndexExpressions)[ CD ]
Line_2 $$ public void testNormal() throws Exception -->Line_8 $$ List<String> result = expressionResolver.resolve(context, indexExpressions)[ CD ]
Line_3 $$ int numIndexExpressions = randomIntBetween(1, 9)-->Line_5 $$ for (int i = 0; i < numIndexExpressions; i++) [ FD ]
Line_4 $$ List<String> indexExpressions = new ArrayList(numIndexExpressions)-->Line_11 $$ assertThat(result.get(i), equalTo(indexExpressions.get(i)))[ FD ]
Line_5 $$ for (int i = 0; i < numIndexExpressions; i++) -->Line_6 $$ indexExpressions.add(randomAsciiOfLength(10))[ CD ]
Line_2 $$ public void testNormal() throws Exception -->Line_10 $$ for (int i = 0; i < indexExpressions.size(); i++) [ CD ]
Line_4 $$ List<String> indexExpressions = new ArrayList(numIndexExpressions)-->Line_8 $$ List<String> result = expressionResolver.resolve(context, indexExpressions)[ FD ]
Line_2 $$ public void testNormal() throws Exception -->Line_5 $$ for (int i = 0; i < numIndexExpressions; i++) [ CD ]
Line_2 $$ public void testNormal() throws Exception -->Line_3 $$ int numIndexExpressions = randomIntBetween(1, 9)[ CD ]
Line_8 $$ List<String> result = expressionResolver.resolve(context, indexExpressions)-->Line_11 $$ assertThat(result.get(i), equalTo(indexExpressions.get(i)))[ FD ]
Line_5 $$ for (int i = 0; i < numIndexExpressions; i++) -->Line_11 $$ assertThat(result.get(i), equalTo(indexExpressions.get(i)))[ FD ]
Line_5 $$ for (int i = 0; i < numIndexExpressions; i++) -->Line_10 $$ for (int i = 0; i < indexExpressions.size(); i++) [ FD ]
Line_2 $$ public void testNormal() throws Exception -->Line_9 $$ assertThat(result.size(), equalTo(indexExpressions.size()))[ CD ]
