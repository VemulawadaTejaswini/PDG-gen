Line_27 $$ minHistoValue = bucket.getDocCount()-->Line_40 $$ minTermsValue = minHistoValue[ FD ]
Line_20 $$ List<String> minHistoKeys = new ArrayList()-->Line_31 $$ minHistoKeys.add(bucket.getKeyAsString())[ FD ]
Line_2 $$ public void testNested() throws Exception -->Line_9 $$ assertThat(termsBuckets.size(), equalTo(interval))[ CD ]
Line_21 $$ double minHistoValue = Double.POSITIVE_INFINITY-->Line_27 $$ minHistoValue = bucket.getDocCount()[ FD ]
Line_21 $$ double minHistoValue = Double.POSITIVE_INFINITY-->Line_26 $$ if (bucket.getDocCount() < minHistoValue) [ FD ]
Line_47 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_terms_bucket")-->Line_50 $$ assertThat(minBucketValue.value(), equalTo(minTermsValue))[ FD ]
Line_47 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_terms_bucket")-->Line_51 $$ assertThat(minBucketValue.keys(), equalTo(minTermsKeys.toArray(new String[minTermsKeys.size()])))[ FD ]
Line_22 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_23 $$ Histogram.Bucket bucket = buckets.get(j)[ CD ]
Line_20 $$ List<String> minHistoKeys = new ArrayList()-->Line_38 $$ assertThat(minBucketValue.keys(), equalTo(minHistoKeys.toArray(new String[minHistoKeys.size()])))[ FD ]
Line_5 $$ Terms terms = response.getAggregations().get("terms")-->Line_6 $$ assertThat(terms, notNullValue())[ FD ]
Line_39 $$ if (minHistoValue < minTermsValue) -->Line_40 $$ minTermsValue = minHistoValue[ CD ]
Line_13 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_34 $$ InternalBucketMetricValue minBucketValue = termsBucket.getAggregations().get("min_histo_bucket")[ FD ]
Line_19 $$ List<? extends Bucket> buckets = histo.getBuckets()-->Line_23 $$ Histogram.Bucket bucket = buckets.get(j)[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_13 $$ Terms.Bucket termsBucket = termsBuckets.get(i)[ CD ]
Line_13 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_16 $$ Histogram histo = termsBucket.getAggregations().get("histo")[ FD ]
Line_27 $$ minHistoValue = bucket.getDocCount()-->Line_26 $$ if (bucket.getDocCount() < minHistoValue) [ FD ]
Line_10 $$ List<String> minTermsKeys = new ArrayList()-->Line_51 $$ assertThat(minBucketValue.keys(), equalTo(minTermsKeys.toArray(new String[minTermsKeys.size()])))[ FD ]
Line_23 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_24 $$ assertThat(bucket, notNullValue())[ FD ]
Line_41 $$ minTermsKeys = new ArrayList()-->Line_51 $$ assertThat(minBucketValue.keys(), equalTo(minTermsKeys.toArray(new String[minTermsKeys.size()])))[ FD ]
Line_28 $$ minHistoKeys = new ArrayList()-->Line_31 $$ minHistoKeys.add(bucket.getKeyAsString())[ FD ]
Line_8 $$ List<Terms.Bucket> termsBuckets = terms.getBuckets()-->Line_13 $$ Terms.Bucket termsBucket = termsBuckets.get(i)[ FD ]
Line_27 $$ minHistoValue = bucket.getDocCount()-->Line_43 $$ if (minHistoValue == minTermsValue) [ FD ]
Line_13 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_15 $$ assertThat((String) termsBucket.getKey(), equalTo("tag" + (i % interval)))[ FD ]
Line_21 $$ double minHistoValue = Double.POSITIVE_INFINITY-->Line_39 $$ if (minHistoValue < minTermsValue) [ FD ]
Line_41 $$ minTermsKeys = new ArrayList()-->Line_42 $$ minTermsKeys.add(termsBucket.getKeyAsString())[ FD ]
Line_13 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_44 $$ minTermsKeys.add(termsBucket.getKeyAsString())[ FD ]
Line_16 $$ Histogram histo = termsBucket.getAggregations().get("histo")-->Line_17 $$ assertThat(histo, notNullValue())[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_39 $$ if (minHistoValue < minTermsValue) [ CD ]
Line_2 $$ public void testNested() throws Exception -->Line_7 $$ assertThat(terms.getName(), equalTo("terms"))[ CD ]
Line_21 $$ double minHistoValue = Double.POSITIVE_INFINITY-->Line_43 $$ if (minHistoValue == minTermsValue) [ FD ]
Line_11 $$ double minTermsValue = Double.POSITIVE_INFINITY-->Line_43 $$ if (minHistoValue == minTermsValue) [ FD ]
Line_11 $$ double minTermsValue = Double.POSITIVE_INFINITY-->Line_39 $$ if (minHistoValue < minTermsValue) [ FD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue)).subAggregation(minBucket("min_histo_bucket").setBucketsPaths("histo>_count"))).addAggregation(minBucket("min_terms_bucket").setBucketsPaths("terms>min_histo_bucket")).execute().actionGet()-->Line_47 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_terms_bucket")[ FD ]
Line_23 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_31 $$ minHistoKeys.add(bucket.getKeyAsString())[ FD ]
Line_2 $$ public void testNested() throws Exception -->Line_51 $$ assertThat(minBucketValue.keys(), equalTo(minTermsKeys.toArray(new String[minTermsKeys.size()])))[ CD ]
Line_28 $$ minHistoKeys = new ArrayList()-->Line_29 $$ minHistoKeys.add(bucket.getKeyAsString())[ FD ]
Line_2 $$ public void testNested() throws Exception -->Line_48 $$ assertThat(minBucketValue, notNullValue())[ CD ]
Line_27 $$ minHistoValue = bucket.getDocCount()-->Line_30 $$ if (bucket.getDocCount() == minHistoValue) [ FD ]
Line_2 $$ public void testNested() throws Exception -->Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue)).subAggregation(minBucket("min_histo_bucket").setBucketsPaths("histo>_count"))).addAggregation(minBucket("min_terms_bucket").setBucketsPaths("terms>min_histo_bucket")).execute().actionGet()[ CD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_38 $$ assertThat(minBucketValue.keys(), equalTo(minHistoKeys.toArray(new String[minHistoKeys.size()])))[ CD ]
Line_2 $$ public void testNested() throws Exception -->Line_47 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_terms_bucket")[ CD ]
Line_10 $$ List<String> minTermsKeys = new ArrayList()-->Line_41 $$ minTermsKeys = new ArrayList()[ FD ]
Line_23 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_29 $$ minHistoKeys.add(bucket.getKeyAsString())[ FD ]
Line_27 $$ minHistoValue = bucket.getDocCount()-->Line_39 $$ if (minHistoValue < minTermsValue) [ FD ]
Line_2 $$ public void testNested() throws Exception -->Line_50 $$ assertThat(minBucketValue.value(), equalTo(minTermsValue))[ CD ]
Line_13 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_42 $$ minTermsKeys.add(termsBucket.getKeyAsString())[ FD ]
Line_2 $$ public void testNested() throws Exception -->Line_12 $$ for (int i = 0; i < interval; ++i) [ CD ]
Line_11 $$ double minTermsValue = Double.POSITIVE_INFINITY-->Line_40 $$ minTermsValue = minHistoValue[ FD ]
Line_5 $$ Terms terms = response.getAggregations().get("terms")-->Line_8 $$ List<Terms.Bucket> termsBuckets = terms.getBuckets()[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_37 $$ assertThat(minBucketValue.value(), equalTo(minHistoValue))[ CD ]
Line_11 $$ double minTermsValue = Double.POSITIVE_INFINITY-->Line_50 $$ assertThat(minBucketValue.value(), equalTo(minTermsValue))[ FD ]
Line_21 $$ double minHistoValue = Double.POSITIVE_INFINITY-->Line_30 $$ if (bucket.getDocCount() == minHistoValue) [ FD ]
Line_40 $$ minTermsValue = minHistoValue-->Line_50 $$ assertThat(minBucketValue.value(), equalTo(minTermsValue))[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_17 $$ assertThat(histo, notNullValue())[ CD ]
Line_21 $$ double minHistoValue = Double.POSITIVE_INFINITY-->Line_37 $$ assertThat(minBucketValue.value(), equalTo(minHistoValue))[ FD ]
Line_43 $$ if (minHistoValue == minTermsValue) -->Line_44 $$ minTermsKeys.add(termsBucket.getKeyAsString())[ CD ]
Line_23 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_27 $$ minHistoValue = bucket.getDocCount()[ FD ]
Line_2 $$ public void testNested() throws Exception -->Line_6 $$ assertThat(terms, notNullValue())[ CD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_34 $$ InternalBucketMetricValue minBucketValue = termsBucket.getAggregations().get("min_histo_bucket")[ CD ]
Line_16 $$ Histogram histo = termsBucket.getAggregations().get("histo")-->Line_18 $$ assertThat(histo.getName(), equalTo("histo"))[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_13 $$ Terms.Bucket termsBucket = termsBuckets.get(i)[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_15 $$ assertThat((String) termsBucket.getKey(), equalTo("tag" + (i % interval)))[ CD ]
Line_28 $$ minHistoKeys = new ArrayList()-->Line_38 $$ assertThat(minBucketValue.keys(), equalTo(minHistoKeys.toArray(new String[minHistoKeys.size()])))[ FD ]
Line_41 $$ minTermsKeys = new ArrayList()-->Line_44 $$ minTermsKeys.add(termsBucket.getKeyAsString())[ FD ]
Line_22 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_24 $$ assertThat(bucket, notNullValue())[ CD ]
Line_2 $$ public void testNested() throws Exception -->Line_11 $$ double minTermsValue = Double.POSITIVE_INFINITY[ CD ]
Line_23 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_25 $$ assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) j * interval))[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_35 $$ assertThat(minBucketValue, notNullValue())[ CD ]
Line_10 $$ List<String> minTermsKeys = new ArrayList()-->Line_42 $$ minTermsKeys.add(termsBucket.getKeyAsString())[ FD ]
Line_22 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_26 $$ if (bucket.getDocCount() < minHistoValue) [ CD ]
Line_27 $$ minHistoValue = bucket.getDocCount()-->Line_37 $$ assertThat(minBucketValue.value(), equalTo(minHistoValue))[ FD ]
Line_40 $$ minTermsValue = minHistoValue-->Line_43 $$ if (minHistoValue == minTermsValue) [ FD ]
Line_8 $$ List<Terms.Bucket> termsBuckets = terms.getBuckets()-->Line_9 $$ assertThat(termsBuckets.size(), equalTo(interval))[ FD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue)).subAggregation(minBucket("min_histo_bucket").setBucketsPaths("histo>_count"))).addAggregation(minBucket("min_terms_bucket").setBucketsPaths("terms>min_histo_bucket")).execute().actionGet()-->Line_4 $$ assertSearchResponse(response)[ FD ]
Line_39 $$ if (minHistoValue < minTermsValue) -->Line_41 $$ minTermsKeys = new ArrayList()[ CD ]
Line_2 $$ public void testNested() throws Exception -->Line_4 $$ assertSearchResponse(response)[ CD ]
Line_22 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_23 $$ Histogram.Bucket bucket = buckets.get(j)[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_16 $$ Histogram histo = termsBucket.getAggregations().get("histo")[ CD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_14 $$ assertThat(termsBucket, notNullValue())[ CD ]
Line_22 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_25 $$ assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) j * interval))[ CD ]
Line_26 $$ if (bucket.getDocCount() < minHistoValue) -->Line_30 $$ if (bucket.getDocCount() == minHistoValue) [ CD ]
Line_2 $$ public void testNested() throws Exception -->Line_8 $$ List<Terms.Bucket> termsBuckets = terms.getBuckets()[ CD ]
Line_20 $$ List<String> minHistoKeys = new ArrayList()-->Line_28 $$ minHistoKeys = new ArrayList()[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_36 $$ assertThat(minBucketValue.getName(), equalTo("min_histo_bucket"))[ CD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_19 $$ List<? extends Bucket> buckets = histo.getBuckets()[ CD ]
Line_23 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_30 $$ if (bucket.getDocCount() == minHistoValue) [ FD ]
Line_23 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_26 $$ if (bucket.getDocCount() < minHistoValue) [ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_18 $$ assertThat(histo.getName(), equalTo("histo"))[ CD ]
Line_47 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_terms_bucket")-->Line_49 $$ assertThat(minBucketValue.getName(), equalTo("min_terms_bucket"))[ FD ]
Line_13 $$ Terms.Bucket termsBucket = termsBuckets.get(i)-->Line_14 $$ assertThat(termsBucket, notNullValue())[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_20 $$ List<String> minHistoKeys = new ArrayList()[ CD ]
Line_26 $$ if (bucket.getDocCount() < minHistoValue) -->Line_28 $$ minHistoKeys = new ArrayList()[ CD ]
Line_2 $$ public void testNested() throws Exception -->Line_49 $$ assertThat(minBucketValue.getName(), equalTo("min_terms_bucket"))[ CD ]
Line_26 $$ if (bucket.getDocCount() < minHistoValue) -->Line_27 $$ minHistoValue = bucket.getDocCount()[ CD ]
Line_20 $$ List<String> minHistoKeys = new ArrayList()-->Line_29 $$ minHistoKeys.add(bucket.getKeyAsString())[ FD ]
Line_30 $$ if (bucket.getDocCount() == minHistoValue) -->Line_31 $$ minHistoKeys.add(bucket.getKeyAsString())[ CD ]
Line_26 $$ if (bucket.getDocCount() < minHistoValue) -->Line_29 $$ minHistoKeys.add(bucket.getKeyAsString())[ CD ]
Line_21 $$ double minHistoValue = Double.POSITIVE_INFINITY-->Line_40 $$ minTermsValue = minHistoValue[ FD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue)).subAggregation(minBucket("min_histo_bucket").setBucketsPaths("histo>_count"))).addAggregation(minBucket("min_terms_bucket").setBucketsPaths("terms>min_histo_bucket")).execute().actionGet()-->Line_5 $$ Terms terms = response.getAggregations().get("terms")[ FD ]
Line_39 $$ if (minHistoValue < minTermsValue) -->Line_42 $$ minTermsKeys.add(termsBucket.getKeyAsString())[ CD ]
Line_2 $$ public void testNested() throws Exception -->Line_10 $$ List<String> minTermsKeys = new ArrayList()[ CD ]
Line_16 $$ Histogram histo = termsBucket.getAggregations().get("histo")-->Line_19 $$ List<? extends Bucket> buckets = histo.getBuckets()[ FD ]
Line_5 $$ Terms terms = response.getAggregations().get("terms")-->Line_7 $$ assertThat(terms.getName(), equalTo("terms"))[ FD ]
Line_39 $$ if (minHistoValue < minTermsValue) -->Line_43 $$ if (minHistoValue == minTermsValue) [ CD ]
Line_47 $$ InternalBucketMetricValue minBucketValue = response.getAggregations().get("min_terms_bucket")-->Line_48 $$ assertThat(minBucketValue, notNullValue())[ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_22 $$ for (int j = 0; j < numValueBuckets; ++j) [ CD ]
Line_10 $$ List<String> minTermsKeys = new ArrayList()-->Line_44 $$ minTermsKeys.add(termsBucket.getKeyAsString())[ FD ]
Line_40 $$ minTermsValue = minHistoValue-->Line_39 $$ if (minHistoValue < minTermsValue) [ FD ]
Line_12 $$ for (int i = 0; i < interval; ++i) -->Line_21 $$ double minHistoValue = Double.POSITIVE_INFINITY[ CD ]
Line_2 $$ public void testNested() throws Exception -->Line_5 $$ Terms terms = response.getAggregations().get("terms")[ CD ]
