Line_29 $$ Set<BasicBlock> set1 = arr1.range-->Line_30 $$ if (!set.contains(arr1.jsr) && !set1.contains(arr.jsr)) [ FD ]
Line_27 $$ for (int j = i + 1; j < lstJsr.size(); j++) -->Line_30 $$ if (!set.contains(arr1.jsr) && !set1.contains(arr.jsr)) [ CD ]
Line_27 $$ for (int j = i + 1; j < lstJsr.size(); j++) -->Line_29 $$ Set<BasicBlock> set1 = arr1.range[ CD ]
Line_30 $$ if (!set.contains(arr1.jsr) && !set1.contains(arr.jsr)) -->Line_34 $$ if (!setc.isEmpty()) [ CD ]
Line_14 $$ int i = 0-->Line_25 $$ JsrRecord arr = lstJsr.get(i)[ FD ]
Line_34 $$ if (!setc.isEmpty()) -->Line_35 $$ splitJsrRange(arr.jsr, arr.ret, setc)[ CD ]
Line_30 $$ if (!set.contains(arr1.jsr) && !set1.contains(arr.jsr)) -->Line_33 $$ setc.retainAll(set1)[ CD ]
Line_15 $$ for (; i < lstJsr.size(); i++) -->Line_17 $$ if (arrJsr.range.contains(arr.jsr)) [ CD ]
Line_3 $$ List<JsrRecord> lstJsrAll = new ArrayList<JsrRecord>()-->Line_8 $$ lstJsrAll.add(new JsrRecord(jsr, getJsrRange(jsr, ret), ret))[ FD ]
Line_6 $$ BasicBlock jsr = ent.getKey()-->Line_8 $$ lstJsrAll.add(new JsrRecord(jsr, getJsrRange(jsr, ret), ret))[ FD ]
Line_7 $$ BasicBlock ret = ent.getValue()-->Line_8 $$ lstJsrAll.add(new JsrRecord(jsr, getJsrRange(jsr, ret), ret))[ FD ]
Line_27 $$ for (int j = i + 1; j < lstJsr.size(); j++) -->Line_28 $$ JsrRecord arr1 = lstJsr.get(j)[ FD ]
Line_27 $$ for (int j = i + 1; j < lstJsr.size(); j++) -->Line_28 $$ JsrRecord arr1 = lstJsr.get(j)[ CD ]
Line_15 $$ for (; i < lstJsr.size(); i++) -->Line_16 $$ JsrRecord arrJsr = lstJsr.get(i)[ CD ]
Line_13 $$ for (JsrRecord arr : lstJsrAll) -->Line_21 $$ lstJsr.add(i, arr)[ FD ]
Line_2 $$ private int processJsrRanges() -->Line_3 $$ List<JsrRecord> lstJsrAll = new ArrayList<JsrRecord>()[ CD ]
Line_14 $$ int i = 0-->Line_16 $$ JsrRecord arrJsr = lstJsr.get(i)[ FD ]
Line_14 $$ int i = 0-->Line_21 $$ lstJsr.add(i, arr)[ FD ]
Line_34 $$ if (!setc.isEmpty()) -->Line_36 $$ return 1[ CD ]
Line_26 $$ Set<BasicBlock> set = arr.range-->Line_30 $$ if (!set.contains(arr1.jsr) && !set1.contains(arr.jsr)) [ FD ]
Line_29 $$ Set<BasicBlock> set1 = arr1.range-->Line_33 $$ setc.retainAll(set1)[ FD ]
Line_2 $$ private int processJsrRanges() -->Line_41 $$ return 0[ CD ]
Line_14 $$ int i = 0-->Line_15 $$ for (; i < lstJsr.size(); i++) [ FD ]
