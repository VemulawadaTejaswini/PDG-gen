Line_66 $$ results = em.createQuery("from Tranche").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_13 $$ assertNotNull(tranchenmodell.getX())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_37 $$ assertEquals(1, results.size())[ CD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_35 $$ assertEquals(1, results.size())[ CD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_61 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ FD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_61 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_21 $$ tranchenmodellNew.getTranchen().add(trancheNew)[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_38 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_65 $$ assertEquals(tranchenmodell, preisregelung.getTranchenmodell())[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_49 $$ assertEquals(trancheNew.getId(), tranchenmodell.getTranchen().get(0).getId())[ FD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_50 $$ assertEquals(yNew.getId(), tranchenmodell.getTranchen().get(0).getY().getId())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_74 $$ cleanupData()[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_55 $$ em.close()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_17 $$ X xNew = new X()[ CD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_37 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_54 $$ em.getTransaction().commit()[ CD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_59 $$ assertEquals(1, results.size())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_26 $$ preisregelung.setTranchenmodell(tranchenmodellNew)[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_36 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_66 $$ results = em.createQuery("from Tranche").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)-->Line_61 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_41 $$ assertEquals(1, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_42 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_17 $$ X xNew = new X()-->Line_47 $$ assertEquals(xNew.getId(), tranchenmodell.getX().getId())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_42 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_31 $$ em.getTransaction().begin()[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_32 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_59 $$ assertEquals(1, results.size())[ FD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_45 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_32 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_63 $$ assertEquals(1, results.size())[ FD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_20 $$ Tranche trancheNew = new Tranche()[ CD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_70 $$ results = em.createQuery("from Y").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_35 $$ assertEquals(1, results.size())[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_39 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ CD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_37 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_23 $$ Y yNew = new Y()[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_29 $$ em.close()[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_35 $$ assertEquals(1, results.size())[ FD ]
Line_42 $$ preisregelung = (Preisregelung) results.get(0)-->Line_53 $$ tranchenmodellNew.setPreisregelung(preisregelung)[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_54 $$ em.getTransaction().commit()[ FD ]
Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_63 $$ assertEquals(1, results.size())[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_38 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_35 $$ assertEquals(1, results.size())[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_57 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()[ CD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_57 $$ em.getTransaction().begin()[ CD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_37 $$ assertEquals(1, results.size())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_26 $$ preisregelung.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()[ CD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_56 $$ em = getOrCreateEntityManager()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_5 $$ em.getTransaction().begin()[ CD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_38 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_63 $$ assertEquals(1, results.size())[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_66 $$ results = em.createQuery("from Tranche").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ CD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_41 $$ assertEquals(1, results.size())[ FD ]
Line_20 $$ Tranche trancheNew = new Tranche()-->Line_21 $$ tranchenmodellNew.getTranchen().add(trancheNew)[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_73 $$ em.close()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_12 $$ assertNotNull(tranchenmodell)[ CD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_9 $$ assertEquals(1, results.size())[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_39 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_21 $$ tranchenmodellNew.getTranchen().add(trancheNew)[ CD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_69 $$ assertEquals(0, results.size())[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_59 $$ assertEquals(1, results.size())[ CD ]
Line_17 $$ X xNew = new X()-->Line_18 $$ tranchenmodellNew.setX(xNew)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_56 $$ em = getOrCreateEntityManager()[ CD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_18 $$ tranchenmodellNew.setX(xNew)[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_64 $$ preisregelung = (Preisregelung) results.get(0)-->Line_65 $$ assertEquals(tranchenmodell, preisregelung.getTranchenmodell())[ FD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_59 $$ assertEquals(1, results.size())[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_39 $$ assertEquals(1, results.size())[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_65 $$ assertEquals(tranchenmodell, preisregelung.getTranchenmodell())[ CD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_46 $$ assertNotNull(tranchenmodell.getX())[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_31 $$ em.getTransaction().begin()[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_30 $$ em = getOrCreateEntityManager()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_41 $$ assertEquals(1, results.size())[ CD ]
Line_68 $$ results = em.createQuery("from X").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_27 $$ tranchenmodellNew.setPreisregelung(preisregelung)[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_42 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_22 $$ trancheNew.setTranchenmodell(tranchenmodellNew)[ CD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_49 $$ assertEquals(trancheNew.getId(), tranchenmodell.getTranchen().get(0).getId())[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)[ CD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_33 $$ assertEquals(1, results.size())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_38 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_35 $$ assertEquals(1, results.size())[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_36 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_13 $$ assertNotNull(tranchenmodell.getX())[ CD ]
Line_56 $$ em = getOrCreateEntityManager()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_54 $$ em.getTransaction().commit()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_49 $$ assertEquals(trancheNew.getId(), tranchenmodell.getTranchen().get(0).getId())[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_55 $$ em.close()[ CD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_37 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_9 $$ assertEquals(1, results.size())[ CD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_42 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_61 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ CD ]
Line_51 $$ tranchenmodellNew = new Tranchenmodell()-->Line_61 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_39 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()[ CD ]
Line_56 $$ em = getOrCreateEntityManager()-->Line_57 $$ em.getTransaction().begin()[ FD ]
Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_23 $$ Y yNew = new Y()-->Line_24 $$ trancheNew.setY(yNew)[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_36 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_36 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_41 $$ assertEquals(1, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_32 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_63 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_46 $$ assertNotNull(tranchenmodell.getX())[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_68 $$ results = em.createQuery("from X").getResultList()[ CD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_48 $$ assertEquals(1, tranchenmodell.getTranchen().size())[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_19 $$ xNew.setTranchenmodell(tranchenmodellNew)[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_73 $$ em.close()[ CD ]
Line_20 $$ Tranche trancheNew = new Tranche()-->Line_49 $$ assertEquals(trancheNew.getId(), tranchenmodell.getTranchen().get(0).getId())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_52 $$ preisregelung.setTranchenmodell(tranchenmodellNew)[ CD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_47 $$ assertEquals(xNew.getId(), tranchenmodell.getX().getId())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_33 $$ assertEquals(1, results.size())[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_7 $$ assertEquals(1, results.size())[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_32 $$ results = em.createQuery("from Tranche").getResultList()[ CD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_52 $$ preisregelung.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_32 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_20 $$ Tranche trancheNew = new Tranche()-->Line_24 $$ trancheNew.setY(yNew)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_29 $$ em.close()[ CD ]
Line_56 $$ em = getOrCreateEntityManager()-->Line_72 $$ em.getTransaction().commit()[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_63 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_48 $$ assertEquals(1, tranchenmodell.getTranchen().size())[ CD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_28 $$ em.getTransaction().commit()[ FD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_53 $$ tranchenmodellNew.setPreisregelung(preisregelung)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_50 $$ assertEquals(yNew.getId(), tranchenmodell.getTranchen().get(0).getY().getId())[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_14 $$ assertEquals(2, tranchenmodell.getTranchen().size())[ CD ]
Line_17 $$ X xNew = new X()-->Line_19 $$ xNew.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()[ FD ]
Line_42 $$ preisregelung = (Preisregelung) results.get(0)-->Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_14 $$ assertEquals(2, tranchenmodell.getTranchen().size())[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_59 $$ assertEquals(1, results.size())[ FD ]
Line_23 $$ Y yNew = new Y()-->Line_50 $$ assertEquals(yNew.getId(), tranchenmodell.getTranchen().get(0).getY().getId())[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ CD ]
Line_68 $$ results = em.createQuery("from X").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_5 $$ em.getTransaction().begin()[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_42 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ CD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_38 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_4 $$ EntityManager em = getOrCreateEntityManager()[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_7 $$ assertEquals(1, results.size())[ CD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_42 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_71 $$ assertEquals(0, results.size())[ CD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_19 $$ xNew.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_42 $$ preisregelung = (Preisregelung) results.get(0)-->Line_52 $$ preisregelung.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ CD ]
Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_44 $$ assertNotNull(tranchenmodell)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_36 $$ results = em.createQuery("from X").getResultList()[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_28 $$ em.getTransaction().commit()[ CD ]
Line_56 $$ em = getOrCreateEntityManager()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_36 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_38 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_45 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ FD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_22 $$ trancheNew.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_33 $$ assertEquals(1, results.size())[ CD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_41 $$ assertEquals(1, results.size())[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_31 $$ em.getTransaction().begin()[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_42 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_47 $$ assertEquals(xNew.getId(), tranchenmodell.getX().getId())[ CD ]
Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)-->Line_65 $$ assertEquals(tranchenmodell, preisregelung.getTranchenmodell())[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_41 $$ assertEquals(1, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_25 $$ yNew.setTranche(trancheNew)[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_70 $$ results = em.createQuery("from Y").getResultList()[ CD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_59 $$ assertEquals(1, results.size())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_37 $$ assertEquals(1, results.size())[ FD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_51 $$ tranchenmodellNew = new Tranchenmodell()[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_41 $$ assertEquals(1, results.size())[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_68 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_36 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_59 $$ assertEquals(1, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_9 $$ assertEquals(1, results.size())[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_48 $$ assertEquals(1, tranchenmodell.getTranchen().size())[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_65 $$ assertEquals(tranchenmodell, preisregelung.getTranchenmodell())[ FD ]
Line_56 $$ em = getOrCreateEntityManager()-->Line_73 $$ em.close()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()[ CD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_42 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_45 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ CD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_26 $$ preisregelung.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_51 $$ tranchenmodellNew = new Tranchenmodell()[ CD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_53 $$ tranchenmodellNew.setPreisregelung(preisregelung)[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_38 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_42 $$ preisregelung = (Preisregelung) results.get(0)-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_42 $$ preisregelung = (Preisregelung) results.get(0)[ CD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_44 $$ assertNotNull(tranchenmodell)[ CD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_52 $$ preisregelung.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()[ CD ]
Line_51 $$ tranchenmodellNew = new Tranchenmodell()-->Line_53 $$ tranchenmodellNew.setPreisregelung(preisregelung)[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_20 $$ Tranche trancheNew = new Tranche()-->Line_22 $$ trancheNew.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_38 $$ results = em.createQuery("from Y").getResultList()[ CD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_15 $$ assertNotNull(tranchenmodell.getTranchen().get(0).getY())[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_63 $$ assertEquals(1, results.size())[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()[ CD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_73 $$ em.close()[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_39 $$ assertEquals(1, results.size())[ CD ]
Line_56 $$ em = getOrCreateEntityManager()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_46 $$ assertNotNull(tranchenmodell.getX())[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_57 $$ em.getTransaction().begin()[ FD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_16 $$ Tranchenmodell tranchenmodellNew = new Tranchenmodell()-->Line_61 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_71 $$ assertEquals(0, results.size())[ FD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_65 $$ assertEquals(tranchenmodell, preisregelung.getTranchenmodell())[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_56 $$ em = getOrCreateEntityManager()[ FD ]
Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_70 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_66 $$ results = em.createQuery("from Tranche").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_23 $$ Y yNew = new Y()-->Line_25 $$ yNew.setTranche(trancheNew)[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_33 $$ assertEquals(1, results.size())[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_41 $$ assertEquals(1, results.size())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_45 $$ assertEquals(tranchenmodellNew.getId(), tranchenmodell.getId())[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_63 $$ assertEquals(1, results.size())[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_15 $$ assertNotNull(tranchenmodell.getTranchen().get(0).getY())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_67 $$ assertEquals(0, results.size())[ CD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_59 $$ assertEquals(1, results.size())[ FD ]
Line_42 $$ preisregelung = (Preisregelung) results.get(0)-->Line_65 $$ assertEquals(tranchenmodell, preisregelung.getTranchenmodell())[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_55 $$ em.close()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_18 $$ tranchenmodellNew.setX(xNew)[ CD ]
Line_51 $$ tranchenmodellNew = new Tranchenmodell()-->Line_52 $$ preisregelung.setTranchenmodell(tranchenmodellNew)[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_3 $$ createData()[ CD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_27 $$ tranchenmodellNew.setPreisregelung(preisregelung)[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_53 $$ tranchenmodellNew.setPreisregelung(preisregelung)[ CD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_72 $$ em.getTransaction().commit()[ FD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_72 $$ em.getTransaction().commit()[ CD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_30 $$ em = getOrCreateEntityManager()[ CD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_72 $$ em.getTransaction().commit()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_39 $$ assertEquals(1, results.size())[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_50 $$ assertEquals(yNew.getId(), tranchenmodell.getTranchen().get(0).getY().getId())[ FD ]
Line_2 $$ public void testReplacedDirectAssociationWhileManaged() -->Line_24 $$ trancheNew.setY(yNew)[ CD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_12 $$ assertNotNull(tranchenmodell)[ FD ]
Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_63 $$ assertEquals(1, results.size())[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_39 $$ assertEquals(1, results.size())[ FD ]
Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_63 $$ assertEquals(1, results.size())[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_47 $$ assertEquals(xNew.getId(), tranchenmodell.getX().getId())[ FD ]
Line_38 $$ results = em.createQuery("from Y").getResultList()-->Line_59 $$ assertEquals(1, results.size())[ FD ]
Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_66 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_68 $$ results = em.createQuery("from X").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_20 $$ Tranche trancheNew = new Tranche()-->Line_25 $$ yNew.setTranche(trancheNew)[ FD ]
Line_36 $$ results = em.createQuery("from X").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_69 $$ assertEquals(0, results.size())[ FD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_27 $$ tranchenmodellNew.setPreisregelung(preisregelung)[ FD ]
Line_32 $$ results = em.createQuery("from Tranche").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_60 $$ tranchenmodell = (Tranchenmodell) results.get(0)[ FD ]
Line_43 $$ tranchenmodell = preisregelung.getTranchenmodell()-->Line_44 $$ assertNotNull(tranchenmodell)[ FD ]
Line_66 $$ results = em.createQuery("from Tranche").getResultList()-->Line_67 $$ assertEquals(0, results.size())[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_63 $$ assertEquals(1, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_58 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_64 $$ preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_56 $$ em = getOrCreateEntityManager()-->Line_62 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_34 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_40 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_30 $$ em = getOrCreateEntityManager()-->Line_56 $$ em = getOrCreateEntityManager()[ FD ]
