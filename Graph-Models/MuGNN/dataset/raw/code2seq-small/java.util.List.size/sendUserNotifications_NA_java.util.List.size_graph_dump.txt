Line_14 $$ int notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_PUSH)-->Line_15 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) [ FD ]
Line_4 $$ int pages = count / Indexer.DEFAULT_INTERVAL-->Line_5 $$ for (int i = 0; i <= pages; i++) [ FD ]
Line_20 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) -->Line_21 $$ notificationEventJSONObject.put("notificationType", notificationType)[ CD ]
Line_19 $$ notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_WEBSITE)-->Line_21 $$ notificationEventJSONObject.put("notificationType", notificationType)[ FD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_17 $$ userNotificationEventLocalService.sendUserNotificationEvents(receiverUserIds.get(j), MicroblogsPortletKeys.MICROBLOGS, UserNotificationDeliveryConstants.TYPE_PUSH, notificationEventJSONObject)[ FD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_14 $$ int notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_PUSH)[ CD ]
Line_15 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) -->Line_17 $$ userNotificationEventLocalService.sendUserNotificationEvents(receiverUserIds.get(j), MicroblogsPortletKeys.MICROBLOGS, UserNotificationDeliveryConstants.TYPE_PUSH, notificationEventJSONObject)[ CD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_21 $$ notificationEventJSONObject.put("notificationType", notificationType)[ FD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_13 $$ notificationEventJSONObject.put("subscriptionId", subscriptionId)[ CD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_20 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) [ CD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_13 $$ notificationEventJSONObject.put("subscriptionId", subscriptionId)[ FD ]
Line_9 $$ end = count-->Line_8 $$ if (count < end) [ FD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_14 $$ int notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_PUSH)[ FD ]
Line_3 $$ int count = receiverUserIds.size()-->Line_8 $$ if (count < end) [ FD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_14 $$ int notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_PUSH)[ FD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_16 $$ notificationEventJSONObject.put("notificationType", notificationType)[ FD ]
Line_14 $$ int notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_PUSH)-->Line_16 $$ notificationEventJSONObject.put("notificationType", notificationType)[ FD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_22 $$ userNotificationEventLocalService.sendUserNotificationEvents(receiverUserIds.get(j), MicroblogsPortletKeys.MICROBLOGS, UserNotificationDeliveryConstants.TYPE_WEBSITE, notificationEventJSONObject)[ FD ]
Line_15 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) -->Line_16 $$ notificationEventJSONObject.put("notificationType", notificationType)[ CD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_22 $$ userNotificationEventLocalService.sendUserNotificationEvents(receiverUserIds.get(j), MicroblogsPortletKeys.MICROBLOGS, UserNotificationDeliveryConstants.TYPE_WEBSITE, notificationEventJSONObject)[ FD ]
Line_9 $$ end = count-->Line_11 $$ for (int j = start; j < end; j++) [ FD ]
Line_12 $$ long subscriptionId = getSubscriptionId(receiverUserIds.get(j), microblogsEntry)-->Line_13 $$ notificationEventJSONObject.put("subscriptionId", subscriptionId)[ FD ]
Line_5 $$ for (int i = 0; i <= pages; i++) -->Line_6 $$ int start = (i * Indexer.DEFAULT_INTERVAL)[ CD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_15 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) [ CD ]
Line_5 $$ for (int i = 0; i <= pages; i++) -->Line_11 $$ for (int j = start; j < end; j++) [ CD ]
Line_3 $$ int count = receiverUserIds.size()-->Line_9 $$ end = count[ FD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_4 $$ int pages = count / Indexer.DEFAULT_INTERVAL[ CD ]
Line_20 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) -->Line_22 $$ userNotificationEventLocalService.sendUserNotificationEvents(receiverUserIds.get(j), MicroblogsPortletKeys.MICROBLOGS, UserNotificationDeliveryConstants.TYPE_WEBSITE, notificationEventJSONObject)[ CD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_3 $$ int count = receiverUserIds.size()[ CD ]
Line_7 $$ int end = start + Indexer.DEFAULT_INTERVAL-->Line_11 $$ for (int j = start; j < end; j++) [ FD ]
Line_7 $$ int end = start + Indexer.DEFAULT_INTERVAL-->Line_9 $$ end = count[ FD ]
Line_19 $$ notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_WEBSITE)-->Line_15 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) [ FD ]
Line_14 $$ int notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_PUSH)-->Line_20 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) [ FD ]
Line_19 $$ notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_WEBSITE)-->Line_16 $$ notificationEventJSONObject.put("notificationType", notificationType)[ FD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_19 $$ notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_WEBSITE)[ CD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_19 $$ notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_WEBSITE)[ FD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_5 $$ for (int i = 0; i <= pages; i++) [ CD ]
Line_14 $$ int notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_PUSH)-->Line_21 $$ notificationEventJSONObject.put("notificationType", notificationType)[ FD ]
Line_19 $$ notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_WEBSITE)-->Line_20 $$ if (notificationType != MicroblogsEntryConstants.NOTIFICATION_TYPE_UNKNOWN) [ FD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_19 $$ notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_WEBSITE)[ FD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_12 $$ long subscriptionId = getSubscriptionId(receiverUserIds.get(j), microblogsEntry)[ CD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_17 $$ userNotificationEventLocalService.sendUserNotificationEvents(receiverUserIds.get(j), MicroblogsPortletKeys.MICROBLOGS, UserNotificationDeliveryConstants.TYPE_PUSH, notificationEventJSONObject)[ FD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_3 $$ int count = receiverUserIds.size()[ FD ]
Line_5 $$ for (int i = 0; i <= pages; i++) -->Line_7 $$ int end = start + Indexer.DEFAULT_INTERVAL[ CD ]
Line_14 $$ int notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_PUSH)-->Line_19 $$ notificationType = MicroblogsUtil.getNotificationType(microblogsEntry, receiverUserIds.get(j), UserNotificationDeliveryConstants.TYPE_WEBSITE)[ FD ]
Line_2 $$ protected void sendUserNotifications(List<Long> receiverUserIds, MicroblogsEntry microblogsEntry, JSONObject notificationEventJSONObject) throws PortalException -->Line_12 $$ long subscriptionId = getSubscriptionId(receiverUserIds.get(j), microblogsEntry)[ FD ]
Line_8 $$ if (count < end) -->Line_9 $$ end = count[ CD ]
Line_11 $$ for (int j = start; j < end; j++) -->Line_12 $$ long subscriptionId = getSubscriptionId(receiverUserIds.get(j), microblogsEntry)[ FD ]
Line_5 $$ for (int i = 0; i <= pages; i++) -->Line_8 $$ if (count < end) [ CD ]
Line_7 $$ int end = start + Indexer.DEFAULT_INTERVAL-->Line_8 $$ if (count < end) [ FD ]
