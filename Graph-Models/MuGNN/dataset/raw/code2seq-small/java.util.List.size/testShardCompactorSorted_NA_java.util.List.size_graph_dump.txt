Line_13 $$ long transactionId = 1-->Line_14 $$ List<ShardInfo> outputShards = compactor.compactSorted(transactionId, inputUuids, getColumnInfo(columnIds, columnTypes), sortColumnIds, sortOrders)[ FD ]
Line_6 $$ List<SortOrder> sortOrders = nCopies(sortColumnIds.size(), ASC_NULLS_FIRST)-->Line_14 $$ List<ShardInfo> outputShards = compactor.compactSorted(transactionId, inputUuids, getColumnInfo(columnIds, columnTypes), sortColumnIds, sortOrders)[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_14 $$ List<ShardInfo> outputShards = compactor.compactSorted(transactionId, inputUuids, getColumnInfo(columnIds, columnTypes), sortColumnIds, sortOrders)[ CD ]
Line_14 $$ List<ShardInfo> outputShards = compactor.compactSorted(transactionId, inputUuids, getColumnInfo(columnIds, columnTypes), sortColumnIds, sortOrders)-->Line_16 $$ assertEquals(outputShards.size(), expectedOutputShards)[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_11 $$ long expectedOutputShards = computeExpectedOutputShards(totalRows)[ CD ]
Line_5 $$ List<Long> sortColumnIds = ImmutableList.of(1L, 2L, 3L, 5L, 7L)-->Line_14 $$ List<ShardInfo> outputShards = compactor.compactSorted(transactionId, inputUuids, getColumnInfo(columnIds, columnTypes), sortColumnIds, sortOrders)[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_12 $$ Set<UUID> inputUuids = inputShards.stream().map(ShardInfo::<>getShardUuid).collect(toSet())[ CD ]
Line_11 $$ long expectedOutputShards = computeExpectedOutputShards(totalRows)-->Line_16 $$ assertEquals(outputShards.size(), expectedOutputShards)[ FD ]
Line_8 $$ List<ShardInfo> inputShards = createSortedShards(storageManager, columnIds, columnTypes, sortIndexes, sortOrders, 2)-->Line_10 $$ long totalRows = inputShards.stream().mapToLong(ShardInfo::<>getRowCount).sum()[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_17 $$ assertShardEqualsSorted(inputUuids, outputUuids, columnIds, columnTypes, sortIndexes, sortOrders)[ CD ]
Line_6 $$ List<SortOrder> sortOrders = nCopies(sortColumnIds.size(), ASC_NULLS_FIRST)-->Line_17 $$ assertShardEqualsSorted(inputUuids, outputUuids, columnIds, columnTypes, sortIndexes, sortOrders)[ FD ]
Line_12 $$ Set<UUID> inputUuids = inputShards.stream().map(ShardInfo::<>getShardUuid).collect(toSet())-->Line_17 $$ assertShardEqualsSorted(inputUuids, outputUuids, columnIds, columnTypes, sortIndexes, sortOrders)[ FD ]
Line_4 $$ List<Long> columnIds = ImmutableList.of(3L, 7L, 2L, 1L, 5L)-->Line_8 $$ List<ShardInfo> inputShards = createSortedShards(storageManager, columnIds, columnTypes, sortIndexes, sortOrders, 2)[ FD ]
Line_5 $$ List<Long> sortColumnIds = ImmutableList.of(1L, 2L, 3L, 5L, 7L)-->Line_6 $$ List<SortOrder> sortOrders = nCopies(sortColumnIds.size(), ASC_NULLS_FIRST)[ FD ]
Line_8 $$ List<ShardInfo> inputShards = createSortedShards(storageManager, columnIds, columnTypes, sortIndexes, sortOrders, 2)-->Line_9 $$ assertEquals(inputShards.size(), 2)[ FD ]
Line_5 $$ List<Long> sortColumnIds = ImmutableList.of(1L, 2L, 3L, 5L, 7L)-->Line_7 $$ List<Integer> sortIndexes = sortColumnIds.stream().map(columnIds::<>indexOf).collect(toList())[ FD ]
Line_3 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, DATE, TIMESTAMP, DOUBLE)-->Line_17 $$ assertShardEqualsSorted(inputUuids, outputUuids, columnIds, columnTypes, sortIndexes, sortOrders)[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_13 $$ long transactionId = 1[ CD ]
Line_10 $$ long totalRows = inputShards.stream().mapToLong(ShardInfo::<>getRowCount).sum()-->Line_11 $$ long expectedOutputShards = computeExpectedOutputShards(totalRows)[ FD ]
Line_12 $$ Set<UUID> inputUuids = inputShards.stream().map(ShardInfo::<>getShardUuid).collect(toSet())-->Line_14 $$ List<ShardInfo> outputShards = compactor.compactSorted(transactionId, inputUuids, getColumnInfo(columnIds, columnTypes), sortColumnIds, sortOrders)[ FD ]
Line_8 $$ List<ShardInfo> inputShards = createSortedShards(storageManager, columnIds, columnTypes, sortIndexes, sortOrders, 2)-->Line_12 $$ Set<UUID> inputUuids = inputShards.stream().map(ShardInfo::<>getShardUuid).collect(toSet())[ FD ]
Line_4 $$ List<Long> columnIds = ImmutableList.of(3L, 7L, 2L, 1L, 5L)-->Line_14 $$ List<ShardInfo> outputShards = compactor.compactSorted(transactionId, inputUuids, getColumnInfo(columnIds, columnTypes), sortColumnIds, sortOrders)[ FD ]
Line_15 $$ List<UUID> outputUuids = outputShards.stream().map(ShardInfo::<>getShardUuid).collect(toList())-->Line_17 $$ assertShardEqualsSorted(inputUuids, outputUuids, columnIds, columnTypes, sortIndexes, sortOrders)[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_7 $$ List<Integer> sortIndexes = sortColumnIds.stream().map(columnIds::<>indexOf).collect(toList())[ CD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_16 $$ assertEquals(outputShards.size(), expectedOutputShards)[ CD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_10 $$ long totalRows = inputShards.stream().mapToLong(ShardInfo::<>getRowCount).sum()[ CD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_8 $$ List<ShardInfo> inputShards = createSortedShards(storageManager, columnIds, columnTypes, sortIndexes, sortOrders, 2)[ CD ]
Line_4 $$ List<Long> columnIds = ImmutableList.of(3L, 7L, 2L, 1L, 5L)-->Line_17 $$ assertShardEqualsSorted(inputUuids, outputUuids, columnIds, columnTypes, sortIndexes, sortOrders)[ FD ]
Line_7 $$ List<Integer> sortIndexes = sortColumnIds.stream().map(columnIds::<>indexOf).collect(toList())-->Line_17 $$ assertShardEqualsSorted(inputUuids, outputUuids, columnIds, columnTypes, sortIndexes, sortOrders)[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_9 $$ assertEquals(inputShards.size(), 2)[ CD ]
Line_3 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, DATE, TIMESTAMP, DOUBLE)-->Line_14 $$ List<ShardInfo> outputShards = compactor.compactSorted(transactionId, inputUuids, getColumnInfo(columnIds, columnTypes), sortColumnIds, sortOrders)[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_5 $$ List<Long> sortColumnIds = ImmutableList.of(1L, 2L, 3L, 5L, 7L)[ CD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_6 $$ List<SortOrder> sortOrders = nCopies(sortColumnIds.size(), ASC_NULLS_FIRST)[ CD ]
Line_6 $$ List<SortOrder> sortOrders = nCopies(sortColumnIds.size(), ASC_NULLS_FIRST)-->Line_8 $$ List<ShardInfo> inputShards = createSortedShards(storageManager, columnIds, columnTypes, sortIndexes, sortOrders, 2)[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_3 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, DATE, TIMESTAMP, DOUBLE)[ CD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_15 $$ List<UUID> outputUuids = outputShards.stream().map(ShardInfo::<>getShardUuid).collect(toList())[ CD ]
Line_14 $$ List<ShardInfo> outputShards = compactor.compactSorted(transactionId, inputUuids, getColumnInfo(columnIds, columnTypes), sortColumnIds, sortOrders)-->Line_15 $$ List<UUID> outputUuids = outputShards.stream().map(ShardInfo::<>getShardUuid).collect(toList())[ FD ]
Line_2 $$ public void testShardCompactorSorted() throws Exception -->Line_4 $$ List<Long> columnIds = ImmutableList.of(3L, 7L, 2L, 1L, 5L)[ CD ]
Line_7 $$ List<Integer> sortIndexes = sortColumnIds.stream().map(columnIds::<>indexOf).collect(toList())-->Line_8 $$ List<ShardInfo> inputShards = createSortedShards(storageManager, columnIds, columnTypes, sortIndexes, sortOrders, 2)[ FD ]
Line_3 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, DATE, TIMESTAMP, DOUBLE)-->Line_8 $$ List<ShardInfo> inputShards = createSortedShards(storageManager, columnIds, columnTypes, sortIndexes, sortOrders, 2)[ FD ]
