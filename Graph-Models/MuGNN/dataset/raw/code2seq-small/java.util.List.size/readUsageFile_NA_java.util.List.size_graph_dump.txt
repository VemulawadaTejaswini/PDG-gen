Line_8 $$ final Date date-->Line_10 $$ date = USAGE_STAMP_DATE_FORMAT.parse(dateString)[ FD ]
Line_7 $$ final String dateString = lines.get(0)-->Line_10 $$ date = USAGE_STAMP_DATE_FORMAT.parse(dateString)[ FD ]
Line_5 $$ final List<String> lines = FileUtil.loadLines(usageFile, CharsetToolkit.UTF8_CHARSET.name())-->Line_6 $$ if (!lines.isEmpty()) [ FD ]
Line_10 $$ date = USAGE_STAMP_DATE_FORMAT.parse(dateString)-->Line_13 $$ return Pair.create(date, projectFile)[ FD ]
Line_5 $$ final List<String> lines = FileUtil.loadLines(usageFile, CharsetToolkit.UTF8_CHARSET.name())-->Line_7 $$ final String dateString = lines.get(0)[ FD ]
Line_6 $$ if (!lines.isEmpty()) -->Line_7 $$ final String dateString = lines.get(0)[ CD ]
Line_6 $$ if (!lines.isEmpty()) -->Line_8 $$ final Date date[ CD ]
Line_6 $$ if (!lines.isEmpty()) -->Line_12 $$ final File projectFile = lines.size() > 1 ? new File(lines.get(1)) : null[ CD ]
Line_5 $$ final List<String> lines = FileUtil.loadLines(usageFile, CharsetToolkit.UTF8_CHARSET.name())-->Line_12 $$ final File projectFile = lines.size() > 1 ? new File(lines.get(1)) : null[ FD ]
Line_6 $$ if (!lines.isEmpty()) -->Line_13 $$ return Pair.create(date, projectFile)[ CD ]
Line_8 $$ final Date date-->Line_13 $$ return Pair.create(date, projectFile)[ FD ]
Line_12 $$ final File projectFile = lines.size() > 1 ? new File(lines.get(1)) : null-->Line_13 $$ return Pair.create(date, projectFile)[ FD ]
