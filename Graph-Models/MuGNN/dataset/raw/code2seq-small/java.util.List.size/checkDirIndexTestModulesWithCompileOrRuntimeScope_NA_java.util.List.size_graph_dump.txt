Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_4 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)[ CD ]
Line_29 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))-->Line_31 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)[ FD ]
Line_27 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)-->Line_29 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_34 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_22 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), modules.get(5), null))[ CD ]
Line_15 $$ VirtualFile m6javaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m6/src/main/java"), true)-->Line_16 $$ assertNotNull(m6javaDir)[ FD ]
Line_17 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))-->Line_18 $$ assertEquals(4, m6OrderEntries.size())[ FD ]
Line_4 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)-->Line_7 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))[ FD ]
Line_5 $$ VirtualFile m3JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m3/src/main/java"), true)-->Line_7 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_11 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(2), modules.get(3)))[ CD ]
Line_27 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)-->Line_28 $$ assertNotNull(jmockJar)[ FD ]
Line_17 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))-->Line_23 $$ OrderEntry m6E3 = m6OrderEntries.get(3)[ FD ]
Line_31 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)-->Line_33 $$ assertInstanceOf(jmockE0, LibraryOrderEntry.class)[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_14 $$ assertInstanceOf(m3E2, ModuleSourceOrderEntry.class)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_24 $$ assertInstanceOf(m6E3, ModuleSourceOrderEntry.class)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_25 $$ VirtualFile jmockDir = VfsUtil.findFileByIoFile(new File(getRepositoryPath(), "jmock/jmock/1.0/jmock-1.0.jar"), true)[ CD ]
Line_15 $$ VirtualFile m6javaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m6/src/main/java"), true)-->Line_17 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))[ FD ]
Line_25 $$ VirtualFile jmockDir = VfsUtil.findFileByIoFile(new File(getRepositoryPath(), "jmock/jmock/1.0/jmock-1.0.jar"), true)-->Line_27 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_23 $$ OrderEntry m6E3 = m6OrderEntries.get(3)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_33 $$ assertInstanceOf(jmockE0, LibraryOrderEntry.class)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_6 $$ assertNotNull(m3JavaDir)[ CD ]
Line_7 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))-->Line_8 $$ assertEquals(4, orderEntries.size())[ FD ]
Line_17 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))-->Line_19 $$ List<Module> m6OwnerModules = orderEntriesToOwnerModules(m6OrderEntries)[ FD ]
Line_34 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)-->Line_36 $$ assertInstanceOf(jmockE1, LibraryOrderEntry.class)[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_17 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))[ CD ]
Line_7 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))-->Line_13 $$ OrderEntry m3E2 = orderEntries.get(2)[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_27 $$ VirtualFile jmockJar = JarFileSystem.getInstance().getJarRootForLocalFile(jmockDir)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_32 $$ assertEquals(modules.get(1), jmockE0.getOwnerModule())[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_32 $$ assertEquals(modules.get(1), jmockE0.getOwnerModule())[ FD ]
Line_4 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)-->Line_29 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))[ FD ]
Line_10 $$ List<Module> depModules = orderEntriesToDepModules(orderEntries)-->Line_12 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), modules.get(2), null, modules.get(2)))[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_15 $$ VirtualFile m6javaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m6/src/main/java"), true)[ CD ]
Line_5 $$ VirtualFile m3JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m3/src/main/java"), true)-->Line_6 $$ assertNotNull(m3JavaDir)[ FD ]
Line_20 $$ List<Module> m6DepModules = orderEntriesToDepModules(m6OrderEntries)-->Line_22 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), modules.get(5), null))[ FD ]
Line_34 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)-->Line_35 $$ assertEquals(modules.get(2), jmockE1.getOwnerModule())[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_9 $$ List<Module> ownerModules = orderEntriesToOwnerModules(orderEntries)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_12 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), modules.get(2), null, modules.get(2)))[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_13 $$ OrderEntry m3E2 = orderEntries.get(2)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_30 $$ assertEquals(2, jmockOrderEntries.size())[ CD ]
Line_29 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))-->Line_34 $$ OrderEntry jmockE1 = jmockOrderEntries.get(1)[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_18 $$ assertEquals(4, m6OrderEntries.size())[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_35 $$ assertEquals(modules.get(2), jmockE1.getOwnerModule())[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_3 $$ assertEquals(6, modules.size())[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_21 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(4), modules.get(5)))[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_21 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(4), modules.get(5)))[ CD ]
Line_19 $$ List<Module> m6OwnerModules = orderEntriesToOwnerModules(m6OrderEntries)-->Line_21 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(4), modules.get(5)))[ FD ]
Line_7 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))-->Line_10 $$ List<Module> depModules = orderEntriesToDepModules(orderEntries)[ FD ]
Line_29 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))-->Line_30 $$ assertEquals(2, jmockOrderEntries.size())[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_5 $$ VirtualFile m3JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m3/src/main/java"), true)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_11 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(2), modules.get(3)))[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_19 $$ List<Module> m6OwnerModules = orderEntriesToOwnerModules(m6OrderEntries)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_8 $$ assertEquals(4, orderEntries.size())[ CD ]
Line_25 $$ VirtualFile jmockDir = VfsUtil.findFileByIoFile(new File(getRepositoryPath(), "jmock/jmock/1.0/jmock-1.0.jar"), true)-->Line_26 $$ assertNotNull(jmockDir)[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_35 $$ assertEquals(modules.get(2), jmockE1.getOwnerModule())[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_28 $$ assertNotNull(jmockJar)[ CD ]
Line_31 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)-->Line_32 $$ assertEquals(modules.get(1), jmockE0.getOwnerModule())[ FD ]
Line_9 $$ List<Module> ownerModules = orderEntriesToOwnerModules(orderEntries)-->Line_11 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(2), modules.get(3)))[ FD ]
Line_4 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)-->Line_17 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_20 $$ List<Module> m6DepModules = orderEntriesToDepModules(m6OrderEntries)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_12 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), modules.get(2), null, modules.get(2)))[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_26 $$ assertNotNull(jmockDir)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_31 $$ OrderEntry jmockE0 = jmockOrderEntries.get(0)[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_29 $$ List<OrderEntry> jmockOrderEntries = index.getOrderEntries(index.getInfoForFile(jmockJar))[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_7 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))[ CD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_22 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), modules.get(5), null))[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_36 $$ assertInstanceOf(jmockE1, LibraryOrderEntry.class)[ CD ]
Line_13 $$ OrderEntry m3E2 = orderEntries.get(2)-->Line_14 $$ assertInstanceOf(m3E2, ModuleSourceOrderEntry.class)[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_3 $$ assertEquals(6, modules.size())[ CD ]
Line_7 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))-->Line_9 $$ List<Module> ownerModules = orderEntriesToOwnerModules(orderEntries)[ FD ]
Line_17 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))-->Line_20 $$ List<Module> m6DepModules = orderEntriesToDepModules(m6OrderEntries)[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_16 $$ assertNotNull(m6javaDir)[ CD ]
Line_23 $$ OrderEntry m6E3 = m6OrderEntries.get(3)-->Line_24 $$ assertInstanceOf(m6E3, ModuleSourceOrderEntry.class)[ FD ]
Line_2 $$ private void checkDirIndexTestModulesWithCompileOrRuntimeScope(List<Module> modules) -->Line_10 $$ List<Module> depModules = orderEntriesToDepModules(orderEntries)[ CD ]
