Line_41 $$ int storedClientEnd = storedClientStart + storedText.length()-->Line_67 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_86 $$ insertionIndex = i[ FD ]
Line_13 $$ int newChangeEnd = change.getEnd()-->Line_98 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove[ FD ]
Line_34 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()-->Line_56 $$ clientShift += changeEntry.change.getDiff()[ FD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_117 $$ if (insertionIndex >= 0) [ FD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_99 $$ insertionIndex = i[ FD ]
Line_105 $$ TextChangeImpl adjusted = new TextChangeImpl(adjustedText, changeEntry.change.getStart(), changeEntry.change.getEnd())-->Line_106 $$ changeEntry.change = adjusted[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_41 $$ int storedClientEnd = storedClientStart + storedText.length()[ CD ]
Line_62 $$ StringBuilder adjustedText = new StringBuilder()-->Line_70 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) [ FD ]
Line_70 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) -->Line_73 $$ updateClientOffsetOnly = true[ CD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_33 $$ ChangeEntry changeEntry = myChanges.get(insertionIndex)[ FD ]
Line_22 $$ if (!myChanges.isEmpty()) -->Line_23 $$ ChangeEntry changeEntry = myChanges.get(myChanges.size() - 1)[ CD ]
Line_50 $$ if (updateClientOffsetOnly) -->Line_51 $$ changeEntry.clientStartOffset += changeDiff[ CD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_72 $$ insertionIndex = -1[ FD ]
Line_79 $$ insertionIndex = -1-->Line_109 $$ insertionIndex = i + 1[ FD ]
Line_86 $$ insertionIndex = i-->Line_99 $$ insertionIndex = i[ FD ]
Line_79 $$ insertionIndex = -1-->Line_99 $$ insertionIndex = i[ FD ]
Line_24 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_56 $$ clientShift += changeEntry.change.getDiff()[ FD ]
Line_45 $$ updateClientOffsetOnly = true-->Line_80 $$ updateClientOffsetOnly = true[ FD ]
Line_28 $$ if (insertionIndex > 0 && !myChanges.isEmpty()) -->Line_29 $$ ChangeEntry changeEntry = myChanges.get(insertionIndex - 1)[ CD ]
Line_24 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_30 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ FD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_118 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_57 $$ insertionIndex = i + 1-->Line_86 $$ insertionIndex = i[ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_21 $$ if (insertionIndex >= myChanges.size()) [ FD ]
Line_57 $$ insertionIndex = i + 1-->Line_118 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_98 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove-->Line_108 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_45 $$ updateClientOffsetOnly = true-->Line_73 $$ updateClientOffsetOnly = true[ FD ]
Line_30 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_34 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ FD ]
Line_40 $$ CharSequence storedText = changeEntry.change.getText()-->Line_104 $$ CharSequence adjustedText = storedText.subSequence(0, newChangeStart - storedClientStart)[ FD ]
Line_99 $$ insertionIndex = i-->Line_109 $$ insertionIndex = i + 1[ FD ]
Line_79 $$ insertionIndex = -1-->Line_117 $$ if (insertionIndex >= 0) [ FD ]
Line_72 $$ insertionIndex = -1-->Line_118 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_67 $$ if (storedClientEnd > newChangeEnd) -->Line_68 $$ adjustedText.append(storedText.subSequence(newChangeEnd - storedClientStart, storedText.length()))[ CD ]
Line_72 $$ insertionIndex = -1-->Line_109 $$ insertionIndex = i + 1[ FD ]
Line_87 $$ newChangeEnd -= changeEntry.change.getDiff()-->Line_67 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_24 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_34 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_39 $$ int storedClientStart = changeEntry.change.getStart() + clientShift[ CD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_118 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_20 $$ insertionIndex = -insertionIndex - 1[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_38 $$ ChangeEntry changeEntry = myChanges.get(i)[ CD ]
Line_72 $$ insertionIndex = -1-->Line_86 $$ insertionIndex = i[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_86 $$ insertionIndex = i[ FD ]
Line_86 $$ insertionIndex = i-->Line_118 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_109 $$ insertionIndex = i + 1-->Line_118 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_19 $$ if (insertionIndex < 0) -->Line_21 $$ if (insertionIndex >= myChanges.size()) [ CD ]
Line_28 $$ if (insertionIndex > 0 && !myChanges.isEmpty()) -->Line_30 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ CD ]
Line_105 $$ TextChangeImpl adjusted = new TextChangeImpl(adjustedText, changeEntry.change.getStart(), changeEntry.change.getEnd())-->Line_107 $$ clientShift += adjusted.getDiff()[ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_57 $$ insertionIndex = i + 1[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_99 $$ insertionIndex = i[ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_117 $$ if (insertionIndex >= 0) [ FD ]
Line_98 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove-->Line_67 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_62 $$ StringBuilder adjustedText = new StringBuilder()-->Line_68 $$ adjustedText.append(storedText.subSequence(newChangeEnd - storedClientStart, storedText.length()))[ FD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_79 $$ insertionIndex = -1[ FD ]
Line_40 $$ CharSequence storedText = changeEntry.change.getText()-->Line_64 $$ adjustedText.append(storedText.subSequence(0, newChangeStart - storedClientStart))[ FD ]
Line_19 $$ if (insertionIndex < 0) -->Line_34 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()[ CD ]
Line_70 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) -->Line_71 $$ myChanges.remove(i)[ CD ]
Line_30 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_56 $$ clientShift += changeEntry.change.getDiff()[ FD ]
Line_108 $$ newChangeEnd -= storedClientEnd - newChangeStart-->Line_67 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_22 $$ if (!myChanges.isEmpty()) -->Line_24 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()[ CD ]
Line_94 $$ int numberOfStoredChangeSymbolsToRemove = newChangeEnd - storedClientStart-->Line_97 $$ changeEntry.clientStartOffset += changeDiff + numberOfStoredChangeSymbolsToRemove[ FD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_109 $$ insertionIndex = i + 1[ FD ]
Line_72 $$ insertionIndex = -1-->Line_99 $$ insertionIndex = i[ FD ]
Line_40 $$ CharSequence storedText = changeEntry.change.getText()-->Line_41 $$ int storedClientEnd = storedClientStart + storedText.length()[ FD ]
Line_21 $$ if (insertionIndex >= myChanges.size()) -->Line_27 $$ return insertionIndex[ CD ]
Line_57 $$ insertionIndex = i + 1-->Line_109 $$ insertionIndex = i + 1[ FD ]
Line_12 $$ int newChangeStart = change.getStart()-->Line_63 $$ if (storedClientStart < newChangeStart) [ FD ]
Line_86 $$ insertionIndex = i-->Line_117 $$ if (insertionIndex >= 0) [ FD ]
Line_40 $$ CharSequence storedText = changeEntry.change.getText()-->Line_95 $$ CharSequence adjustedText = storedText.subSequence(numberOfStoredChangeSymbolsToRemove, storedText.length())[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_38 $$ ChangeEntry changeEntry = myChanges.get(i)[ FD ]
Line_36 $$ boolean updateClientOffsetOnly = false-->Line_73 $$ updateClientOffsetOnly = true[ FD ]
Line_34 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart()-->Line_107 $$ clientShift += adjusted.getDiff()[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_50 $$ if (updateClientOffsetOnly) [ CD ]
Line_117 $$ if (insertionIndex >= 0) -->Line_118 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ CD ]
Line_94 $$ int numberOfStoredChangeSymbolsToRemove = newChangeEnd - storedClientStart-->Line_98 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove[ FD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_21 $$ if (insertionIndex >= myChanges.size()) [ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_40 $$ CharSequence storedText = changeEntry.change.getText()[ CD ]
Line_99 $$ insertionIndex = i-->Line_117 $$ if (insertionIndex >= 0) [ FD ]
Line_44 $$ if (changeDiff != 0) -->Line_45 $$ updateClientOffsetOnly = true[ CD ]
Line_21 $$ if (insertionIndex >= myChanges.size()) -->Line_28 $$ if (insertionIndex > 0 && !myChanges.isEmpty()) [ CD ]
Line_36 $$ boolean updateClientOffsetOnly = false-->Line_45 $$ updateClientOffsetOnly = true[ FD ]
Line_39 $$ int storedClientStart = changeEntry.change.getStart() + clientShift-->Line_63 $$ if (storedClientStart < newChangeStart) [ FD ]
Line_109 $$ insertionIndex = i + 1-->Line_117 $$ if (insertionIndex >= 0) [ FD ]
Line_21 $$ if (insertionIndex >= myChanges.size()) -->Line_22 $$ if (!myChanges.isEmpty()) [ CD ]
Line_41 $$ int storedClientEnd = storedClientStart + storedText.length()-->Line_108 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_73 $$ updateClientOffsetOnly = true-->Line_80 $$ updateClientOffsetOnly = true[ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_72 $$ insertionIndex = -1[ FD ]
Line_70 $$ if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) -->Line_72 $$ insertionIndex = -1[ CD ]
Line_57 $$ insertionIndex = i + 1-->Line_117 $$ if (insertionIndex >= 0) [ FD ]
Line_87 $$ newChangeEnd -= changeEntry.change.getDiff()-->Line_108 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_62 $$ StringBuilder adjustedText = new StringBuilder()-->Line_66 $$ adjustedText.append(change.getText())[ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_79 $$ insertionIndex = -1[ FD ]
Line_57 $$ insertionIndex = i + 1-->Line_99 $$ insertionIndex = i[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_57 $$ insertionIndex = i + 1[ FD ]
Line_57 $$ insertionIndex = i + 1-->Line_79 $$ insertionIndex = -1[ FD ]
Line_86 $$ insertionIndex = i-->Line_109 $$ insertionIndex = i + 1[ FD ]
Line_13 $$ int newChangeEnd = change.getEnd()-->Line_67 $$ if (storedClientEnd > newChangeEnd) [ FD ]
Line_99 $$ insertionIndex = i-->Line_118 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_72 $$ insertionIndex = -1-->Line_79 $$ insertionIndex = -1[ FD ]
Line_79 $$ insertionIndex = -1-->Line_118 $$ myChanges.add(insertionIndex, new ChangeEntry(new TextChangeImpl(change.getText(), newChangeStart - clientShift, newChangeEnd - clientShift), change.getStart()))[ FD ]
Line_62 $$ StringBuilder adjustedText = new StringBuilder()-->Line_64 $$ adjustedText.append(storedText.subSequence(0, newChangeStart - storedClientStart))[ FD ]
Line_63 $$ if (storedClientStart < newChangeStart) -->Line_64 $$ adjustedText.append(storedText.subSequence(0, newChangeStart - storedClientStart))[ CD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_33 $$ ChangeEntry changeEntry = myChanges.get(insertionIndex)[ FD ]
Line_79 $$ insertionIndex = -1-->Line_86 $$ insertionIndex = i[ FD ]
Line_30 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_107 $$ clientShift += adjusted.getDiff()[ FD ]
Line_87 $$ newChangeEnd -= changeEntry.change.getDiff()-->Line_98 $$ newChangeEnd -= numberOfStoredChangeSymbolsToRemove[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_71 $$ myChanges.remove(i)[ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_99 $$ insertionIndex = i[ FD ]
Line_13 $$ int newChangeEnd = change.getEnd()-->Line_108 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_94 $$ int numberOfStoredChangeSymbolsToRemove = newChangeEnd - storedClientStart-->Line_95 $$ CharSequence adjustedText = storedText.subSequence(numberOfStoredChangeSymbolsToRemove, storedText.length())[ FD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_86 $$ insertionIndex = i[ FD ]
Line_19 $$ if (insertionIndex < 0) -->Line_20 $$ insertionIndex = -insertionIndex - 1[ CD ]
Line_36 $$ boolean updateClientOffsetOnly = false-->Line_80 $$ updateClientOffsetOnly = true[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_109 $$ insertionIndex = i + 1[ FD ]
Line_21 $$ if (insertionIndex >= myChanges.size()) -->Line_26 $$ myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(), change.getStart() - clientShift, change.getEnd() - clientShift), change.getStart()))[ CD ]
Line_57 $$ insertionIndex = i + 1-->Line_72 $$ insertionIndex = -1[ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_19 $$ if (insertionIndex < 0) [ FD ]
Line_19 $$ if (insertionIndex < 0) -->Line_33 $$ ChangeEntry changeEntry = myChanges.get(insertionIndex)[ CD ]
Line_12 $$ int newChangeStart = change.getStart()-->Line_108 $$ newChangeEnd -= storedClientEnd - newChangeStart[ FD ]
Line_40 $$ CharSequence storedText = changeEntry.change.getText()-->Line_68 $$ adjustedText.append(storedText.subSequence(newChangeEnd - storedClientStart, storedText.length()))[ FD ]
Line_13 $$ int newChangeEnd = change.getEnd()-->Line_87 $$ newChangeEnd -= changeEntry.change.getDiff()[ FD ]
Line_14 $$ int insertionIndex = getChangeIndex(change.getStart())-->Line_109 $$ insertionIndex = i + 1[ FD ]
Line_72 $$ insertionIndex = -1-->Line_117 $$ if (insertionIndex >= 0) [ FD ]
Line_24 $$ clientShift = changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff()-->Line_107 $$ clientShift += adjusted.getDiff()[ FD ]
Line_56 $$ clientShift += changeEntry.change.getDiff()-->Line_107 $$ clientShift += adjusted.getDiff()[ FD ]
Line_37 $$ for (int i = insertionIndex; i < myChanges.size(); i++) -->Line_85 $$ myChanges.remove(i)[ FD ]
Line_20 $$ insertionIndex = -insertionIndex - 1-->Line_57 $$ insertionIndex = i + 1[ FD ]
