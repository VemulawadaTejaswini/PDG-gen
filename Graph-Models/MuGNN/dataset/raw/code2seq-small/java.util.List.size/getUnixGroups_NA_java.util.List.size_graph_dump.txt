Line_2 $$ private static List<String> getUnixGroups(final String user) throws IOException -->Line_12 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_15 $$ if (!Shell.WINDOWS) -->Line_16 $$ for (int i = 1; i < groups.size(); i++) [ CD ]
Line_2 $$ private static List<String> getUnixGroups(final String user) throws IOException -->Line_3 $$ String result = ""[ CD ]
Line_10 $$ StringTokenizer tokenizer = new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX)-->Line_13 $$ groups.add(tokenizer.nextToken())[ FD ]
Line_11 $$ List<String> groups = new LinkedList<String>()-->Line_17 $$ if (groups.get(i).equals(groups.get(0))) [ FD ]
Line_2 $$ private static List<String> getUnixGroups(final String user) throws IOException -->Line_23 $$ return groups[ CD ]
Line_16 $$ for (int i = 1; i < groups.size(); i++) -->Line_17 $$ if (groups.get(i).equals(groups.get(0))) [ FD ]
Line_16 $$ for (int i = 1; i < groups.size(); i++) -->Line_18 $$ groups.remove(i)[ FD ]
Line_16 $$ for (int i = 1; i < groups.size(); i++) -->Line_17 $$ if (groups.get(i).equals(groups.get(0))) [ CD ]
Line_12 $$ while (tokenizer.hasMoreTokens()) -->Line_13 $$ groups.add(tokenizer.nextToken())[ CD ]
Line_2 $$ private static List<String> getUnixGroups(final String user) throws IOException -->Line_11 $$ List<String> groups = new LinkedList<String>()[ CD ]
Line_2 $$ private static List<String> getUnixGroups(final String user) throws IOException -->Line_15 $$ if (!Shell.WINDOWS) [ CD ]
Line_11 $$ List<String> groups = new LinkedList<String>()-->Line_13 $$ groups.add(tokenizer.nextToken())[ FD ]
Line_10 $$ StringTokenizer tokenizer = new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX)-->Line_12 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_3 $$ String result = ""-->Line_5 $$ result = Shell.execCommand(Shell.getGroupsForUserCommand(user))[ FD ]
Line_2 $$ private static List<String> getUnixGroups(final String user) throws IOException -->Line_5 $$ result = Shell.execCommand(Shell.getGroupsForUserCommand(user))[ FD ]
Line_11 $$ List<String> groups = new LinkedList<String>()-->Line_16 $$ for (int i = 1; i < groups.size(); i++) [ FD ]
Line_11 $$ List<String> groups = new LinkedList<String>()-->Line_18 $$ groups.remove(i)[ FD ]
Line_2 $$ private static List<String> getUnixGroups(final String user) throws IOException -->Line_10 $$ StringTokenizer tokenizer = new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX)[ CD ]
Line_17 $$ if (groups.get(i).equals(groups.get(0))) -->Line_18 $$ groups.remove(i)[ CD ]
