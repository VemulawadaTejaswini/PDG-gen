Line_20 $$ List<String> groups = new LinkedList<String>()-->Line_27 $$ if (groups.get(i).equals(groups.get(0))) [ FD ]
Line_26 $$ for (int i = 1; i < groups.size(); i++) -->Line_27 $$ if (groups.get(i).equals(groups.get(0))) [ FD ]
Line_27 $$ if (groups.get(i).equals(groups.get(0))) -->Line_28 $$ groups.remove(i)[ CD ]
Line_21 $$ while (tokenizer.hasMoreTokens()) -->Line_22 $$ groups.add(tokenizer.nextToken())[ CD ]
Line_26 $$ for (int i = 1; i < groups.size(); i++) -->Line_28 $$ groups.remove(i)[ FD ]
Line_19 $$ StringTokenizer tokenizer = new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX)-->Line_22 $$ groups.add(tokenizer.nextToken())[ FD ]
Line_11 $$ String result = ""-->Line_13 $$ result = Shell.execCommand(Shell.getGroupsForUserCommand(user))[ FD ]
Line_19 $$ StringTokenizer tokenizer = new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX)-->Line_21 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_26 $$ for (int i = 1; i < groups.size(); i++) -->Line_27 $$ if (groups.get(i).equals(groups.get(0))) [ CD ]
Line_20 $$ List<String> groups = new LinkedList<String>()-->Line_22 $$ groups.add(tokenizer.nextToken())[ FD ]
Line_20 $$ List<String> groups = new LinkedList<String>()-->Line_28 $$ groups.remove(i)[ FD ]
Line_20 $$ List<String> groups = new LinkedList<String>()-->Line_26 $$ for (int i = 1; i < groups.size(); i++) [ FD ]
