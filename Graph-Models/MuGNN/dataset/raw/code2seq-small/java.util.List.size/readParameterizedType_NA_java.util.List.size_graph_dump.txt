Line_11 $$ MyBean result = results.get(0)-->Line_15 $$ assertArrayEquals(new String[] [ FD ]
Line_6 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8"))-->Line_7 $$ inputMessage.getHeaders().setContentType(new MediaType("application", "json"))[ FD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_17 $$ assertArrayEquals(new byte[] [ CD ]
Line_11 $$ MyBean result = results.get(0)-->Line_16 $$ assertTrue(result.isBool())[ FD ]
Line_6 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8"))-->Line_9 $$ List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage)[ FD ]
Line_11 $$ MyBean result = results.get(0)-->Line_17 $$ assertArrayEquals(new byte[] [ FD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_9 $$ List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage)[ CD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_15 $$ assertArrayEquals(new String[] [ CD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_5 $$ String body = "[[ CD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_13 $$ assertEquals(42, result.getNumber())[ CD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_10 $$ assertEquals(1, results.size())[ CD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_11 $$ MyBean result = results.get(0)[ CD ]
Line_11 $$ MyBean result = results.get(0)-->Line_12 $$ assertEquals("Foo", result.getString())[ FD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_6 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8"))[ CD ]
Line_9 $$ List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage)-->Line_11 $$ MyBean result = results.get(0)[ FD ]
Line_11 $$ MyBean result = results.get(0)-->Line_13 $$ assertEquals(42, result.getNumber())[ FD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_12 $$ assertEquals("Foo", result.getString())[ CD ]
Line_3 $$ ParameterizedTypeReference<List<MyBean>> beansList = new ParameterizedTypeReference<List<MyBean>>() -->Line_9 $$ List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage)[ FD ]
Line_11 $$ MyBean result = results.get(0)-->Line_14 $$ assertEquals(42F, result.getFraction(), 0F)[ FD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_3 $$ ParameterizedTypeReference<List<MyBean>> beansList = new ParameterizedTypeReference<List<MyBean>>() [ CD ]
Line_9 $$ List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage)-->Line_10 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_16 $$ assertTrue(result.isBool())[ CD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_14 $$ assertEquals(42F, result.getFraction(), 0F)[ CD ]
Line_8 $$ MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter()-->Line_9 $$ List<MyBean> results = (List<MyBean>) converter.read(beansList.getType(), null, inputMessage)[ FD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_8 $$ MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter()[ CD ]
Line_2 $$ public void readParameterizedType() throws IOException -->Line_7 $$ inputMessage.getHeaders().setContentType(new MediaType("application", "json"))[ CD ]
Line_5 $$ String body = "[-->Line_6 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes("UTF-8"))[ FD ]
