Line_2 $$ public Module[] getModules(@NotNull final ProjectData projectData) -->Line_3 $$ final List<Module> modules = ContainerUtil.filter(getModules(), new Condition<Module>() [ CD ]
Line_2 $$ public Module[] getModules(@NotNull final ProjectData projectData) -->Line_8 $$ return ContainerUtil.toArray(modules, new Module[modules.size()])[ CD ]
Line_3 $$ final List<Module> modules = ContainerUtil.filter(getModules(), new Condition<Module>() -->Line_5 $$ return isExternalSystemAwareModule(projectData.getOwner(), module) && StringUtil.equals(projectData.getLinkedExternalProjectPath(), getExternalRootProjectPath(module))[ FD ]
Line_3 $$ final List<Module> modules = ContainerUtil.filter(getModules(), new Condition<Module>() -->Line_5 $$ return isExternalSystemAwareModule(projectData.getOwner(), module) && StringUtil.equals(projectData.getLinkedExternalProjectPath(), getExternalRootProjectPath(module))[ CD ]
Line_2 $$ public Module[] getModules(@NotNull final ProjectData projectData) -->Line_5 $$ return isExternalSystemAwareModule(projectData.getOwner(), module) && StringUtil.equals(projectData.getLinkedExternalProjectPath(), getExternalRootProjectPath(module))[ FD ]
Line_3 $$ final List<Module> modules = ContainerUtil.filter(getModules(), new Condition<Module>() -->Line_8 $$ return ContainerUtil.toArray(modules, new Module[modules.size()])[ FD ]
