Line_54 $$ Map<String, String> whereMap = _getWhereMap()-->Line_55 $$ String whereValue = whereMap.get(key)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_61 $$ return sb.toString()[ FD ]
Line_46 $$ if (key.equals("rolePermissions")) -->Line_48 $$ if (ResourceBlockLocalServiceUtil.isSupported(rolePermissions.getName())) [ CD ]
Line_8 $$ String key = entry.getKey()-->Line_21 $$ if (key.equals("groupsTree")) [ FD ]
Line_48 $$ if (ResourceBlockLocalServiceUtil.isSupported(rolePermissions.getName())) -->Line_51 $$ key = "rolePermissions_6"[ CD ]
Line_56 $$ if (Validator.isNotNull(whereValue)) -->Line_57 $$ sb.append(whereValue)[ CD ]
Line_10 $$ List<Long> excludedGroupIds = (List<Long>) entry.getValue()-->Line_13 $$ for (int i = 0; i < excludedGroupIds.size(); i++) [ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_16 $$ sb.append(" AND ")[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_40 $$ sb.append("OR ")[ FD ]
Line_2 $$ protected String getWhere(LinkedHashMap<String, Object> params) -->Line_3 $$ if ((params == null) || params.isEmpty()) [ CD ]
Line_7 $$ for (Map.Entry<String, Object> entry : params.entrySet()) -->Line_22 $$ List<Group> groupsTree = (List<Group>) entry.getValue()[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_19 $$ sb.append(") AND ")[ FD ]
Line_8 $$ String key = entry.getKey()-->Line_33 $$ if (key.equals("types")) [ FD ]
Line_34 $$ List<Integer> types = (List<Integer>) entry.getValue()-->Line_35 $$ if (!types.isEmpty()) [ FD ]
Line_2 $$ protected String getWhere(LinkedHashMap<String, Object> params) -->Line_7 $$ for (Map.Entry<String, Object> entry : params.entrySet()) [ FD ]
Line_23 $$ if (!groupsTree.isEmpty()) -->Line_31 $$ sb.append(") AND ")[ CD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_28 $$ sb.append("OR ")[ FD ]
Line_33 $$ if (key.equals("types")) -->Line_34 $$ List<Integer> types = (List<Integer>) entry.getValue()[ CD ]
Line_11 $$ if (!excludedGroupIds.isEmpty()) -->Line_19 $$ sb.append(") AND ")[ CD ]
Line_49 $$ key = "rolePermissions_6_block"-->Line_55 $$ String whereValue = whereMap.get(key)[ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : params.entrySet()) -->Line_10 $$ List<Long> excludedGroupIds = (List<Long>) entry.getValue()[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_38 $$ sb.append("(Group_.type_ = ?) ")[ FD ]
Line_8 $$ String key = entry.getKey()-->Line_46 $$ if (key.equals("rolePermissions")) [ FD ]
Line_22 $$ List<Group> groupsTree = (List<Group>) entry.getValue()-->Line_23 $$ if (!groupsTree.isEmpty()) [ FD ]
Line_13 $$ for (int i = 0; i < excludedGroupIds.size(); i++) -->Line_25 $$ for (int i = 0; i < groupsTree.size(); i++) [ FD ]
Line_27 $$ if ((i + 1) < groupsTree.size()) -->Line_28 $$ sb.append("OR ")[ CD ]
Line_3 $$ if ((params == null) || params.isEmpty()) -->Line_4 $$ return StringPool.BLANK[ CD ]
Line_34 $$ List<Integer> types = (List<Integer>) entry.getValue()-->Line_37 $$ for (int i = 0; i < types.size(); i++) [ FD ]
Line_21 $$ if (key.equals("groupsTree")) -->Line_22 $$ List<Group> groupsTree = (List<Group>) entry.getValue()[ CD ]
Line_8 $$ String key = entry.getKey()-->Line_51 $$ key = "rolePermissions_6"[ FD ]
Line_2 $$ protected String getWhere(LinkedHashMap<String, Object> params) -->Line_6 $$ StringBundler sb = new StringBundler(params.size())[ CD ]
Line_33 $$ if (key.equals("types")) -->Line_55 $$ String whereValue = whereMap.get(key)[ CD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_26 $$ sb.append("(Group_.treePath LIKE ?) ")[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_31 $$ sb.append(") AND ")[ FD ]
Line_47 $$ RolePermissions rolePermissions = (RolePermissions) entry.getValue()-->Line_48 $$ if (ResourceBlockLocalServiceUtil.isSupported(rolePermissions.getName())) [ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_12 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_25 $$ for (int i = 0; i < groupsTree.size(); i++) -->Line_27 $$ if ((i + 1) < groupsTree.size()) [ CD ]
Line_9 $$ if (key.equals("excludedGroupIds")) -->Line_11 $$ if (!excludedGroupIds.isEmpty()) [ CD ]
Line_9 $$ if (key.equals("excludedGroupIds")) -->Line_21 $$ if (key.equals("groupsTree")) [ CD ]
Line_33 $$ if (key.equals("types")) -->Line_54 $$ Map<String, String> whereMap = _getWhereMap()[ CD ]
Line_23 $$ if (!groupsTree.isEmpty()) -->Line_25 $$ for (int i = 0; i < groupsTree.size(); i++) [ CD ]
Line_33 $$ if (key.equals("types")) -->Line_56 $$ if (Validator.isNotNull(whereValue)) [ CD ]
Line_33 $$ if (key.equals("types")) -->Line_46 $$ if (key.equals("rolePermissions")) [ CD ]
Line_39 $$ if ((i + 1) < types.size()) -->Line_40 $$ sb.append("OR ")[ CD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_14 $$ sb.append("(Group_.groupId != ?)")[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_57 $$ sb.append(whereValue)[ FD ]
Line_10 $$ List<Long> excludedGroupIds = (List<Long>) entry.getValue()-->Line_15 $$ if ((i + 1) < excludedGroupIds.size()) [ FD ]
Line_9 $$ if (key.equals("excludedGroupIds")) -->Line_10 $$ List<Long> excludedGroupIds = (List<Long>) entry.getValue()[ CD ]
Line_21 $$ if (key.equals("groupsTree")) -->Line_33 $$ if (key.equals("types")) [ CD ]
Line_2 $$ protected String getWhere(LinkedHashMap<String, Object> params) -->Line_61 $$ return sb.toString()[ CD ]
Line_34 $$ List<Integer> types = (List<Integer>) entry.getValue()-->Line_39 $$ if ((i + 1) < types.size()) [ FD ]
Line_13 $$ for (int i = 0; i < excludedGroupIds.size(); i++) -->Line_37 $$ for (int i = 0; i < types.size(); i++) [ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : params.entrySet()) -->Line_8 $$ String key = entry.getKey()[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_36 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_8 $$ String key = entry.getKey()-->Line_49 $$ key = "rolePermissions_6_block"[ FD ]
Line_2 $$ protected String getWhere(LinkedHashMap<String, Object> params) -->Line_3 $$ if ((params == null) || params.isEmpty()) [ FD ]
Line_8 $$ String key = entry.getKey()-->Line_9 $$ if (key.equals("excludedGroupIds")) [ FD ]
Line_51 $$ key = "rolePermissions_6"-->Line_55 $$ String whereValue = whereMap.get(key)[ FD ]
Line_8 $$ String key = entry.getKey()-->Line_55 $$ String whereValue = whereMap.get(key)[ FD ]
Line_49 $$ key = "rolePermissions_6_block"-->Line_51 $$ key = "rolePermissions_6"[ FD ]
Line_22 $$ List<Group> groupsTree = (List<Group>) entry.getValue()-->Line_25 $$ for (int i = 0; i < groupsTree.size(); i++) [ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_43 $$ sb.append(") AND ")[ FD ]
Line_48 $$ if (ResourceBlockLocalServiceUtil.isSupported(rolePermissions.getName())) -->Line_49 $$ key = "rolePermissions_6_block"[ CD ]
Line_13 $$ for (int i = 0; i < excludedGroupIds.size(); i++) -->Line_15 $$ if ((i + 1) < excludedGroupIds.size()) [ CD ]
Line_35 $$ if (!types.isEmpty()) -->Line_43 $$ sb.append(") AND ")[ CD ]
Line_10 $$ List<Long> excludedGroupIds = (List<Long>) entry.getValue()-->Line_11 $$ if (!excludedGroupIds.isEmpty()) [ FD ]
Line_15 $$ if ((i + 1) < excludedGroupIds.size()) -->Line_16 $$ sb.append(" AND ")[ CD ]
Line_55 $$ String whereValue = whereMap.get(key)-->Line_57 $$ sb.append(whereValue)[ FD ]
Line_33 $$ if (key.equals("types")) -->Line_35 $$ if (!types.isEmpty()) [ CD ]
Line_35 $$ if (!types.isEmpty()) -->Line_37 $$ for (int i = 0; i < types.size(); i++) [ CD ]
Line_13 $$ for (int i = 0; i < excludedGroupIds.size(); i++) -->Line_14 $$ sb.append("(Group_.groupId != ?)")[ CD ]
Line_25 $$ for (int i = 0; i < groupsTree.size(); i++) -->Line_37 $$ for (int i = 0; i < types.size(); i++) [ FD ]
Line_23 $$ if (!groupsTree.isEmpty()) -->Line_24 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_46 $$ if (key.equals("rolePermissions")) -->Line_47 $$ RolePermissions rolePermissions = (RolePermissions) entry.getValue()[ CD ]
Line_21 $$ if (key.equals("groupsTree")) -->Line_23 $$ if (!groupsTree.isEmpty()) [ CD ]
Line_11 $$ if (!excludedGroupIds.isEmpty()) -->Line_13 $$ for (int i = 0; i < excludedGroupIds.size(); i++) [ CD ]
Line_11 $$ if (!excludedGroupIds.isEmpty()) -->Line_12 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_7 $$ for (Map.Entry<String, Object> entry : params.entrySet()) -->Line_34 $$ List<Integer> types = (List<Integer>) entry.getValue()[ FD ]
Line_55 $$ String whereValue = whereMap.get(key)-->Line_56 $$ if (Validator.isNotNull(whereValue)) [ FD ]
Line_22 $$ List<Group> groupsTree = (List<Group>) entry.getValue()-->Line_27 $$ if ((i + 1) < groupsTree.size()) [ FD ]
Line_37 $$ for (int i = 0; i < types.size(); i++) -->Line_38 $$ sb.append("(Group_.type_ = ?) ")[ CD ]
Line_35 $$ if (!types.isEmpty()) -->Line_36 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_7 $$ for (Map.Entry<String, Object> entry : params.entrySet()) -->Line_47 $$ RolePermissions rolePermissions = (RolePermissions) entry.getValue()[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(params.size())-->Line_24 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_25 $$ for (int i = 0; i < groupsTree.size(); i++) -->Line_26 $$ sb.append("(Group_.treePath LIKE ?) ")[ CD ]
Line_2 $$ protected String getWhere(LinkedHashMap<String, Object> params) -->Line_6 $$ StringBundler sb = new StringBundler(params.size())[ FD ]
Line_37 $$ for (int i = 0; i < types.size(); i++) -->Line_39 $$ if ((i + 1) < types.size()) [ CD ]
