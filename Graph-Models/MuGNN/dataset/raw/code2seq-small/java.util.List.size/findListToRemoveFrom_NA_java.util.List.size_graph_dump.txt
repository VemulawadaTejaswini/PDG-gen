Line_8 $$ final TreeItem<Pair<AbstractUrl, String>> item = findNextItem(objUrl, list)-->Line_11 $$ list = item.getChildren()[ FD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_24 $$ if (found != null) [ CD ]
Line_3 $$ Collection<TreeItem<Pair<AbstractUrl, String>>> list = getFavoritesListRootUrls(name)-->Line_25 $$ list.remove(found)[ FD ]
Line_11 $$ list = item.getChildren()-->Line_25 $$ list.remove(found)[ FD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_15 $$ AbstractUrl url = convertor.convert(elements.get(elements.size() - 1))[ CD ]
Line_4 $$ if (elements.size() > 1) -->Line_5 $$ final List<T> sublist = elements.subList(0, elements.size() - 1)[ CD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_4 $$ if (elements.size() > 1) [ FD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_5 $$ final List<T> sublist = elements.subList(0, elements.size() - 1)[ FD ]
Line_24 $$ if (found != null) -->Line_26 $$ rootsChanged()[ CD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_14 $$ TreeItem<Pair<AbstractUrl, String>> found = null[ CD ]
Line_7 $$ AbstractUrl objUrl = convertor.convert(obj)-->Line_8 $$ final TreeItem<Pair<AbstractUrl, String>> item = findNextItem(objUrl, list)[ FD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_7 $$ AbstractUrl objUrl = convertor.convert(obj)[ FD ]
Line_19 $$ if (url.equals(pair.getData().getFirst())) -->Line_20 $$ found = pair[ CD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_16 $$ if (url == null)[ CD ]
Line_14 $$ TreeItem<Pair<AbstractUrl, String>> found = null-->Line_24 $$ if (found != null) [ FD ]
Line_20 $$ found = pair-->Line_24 $$ if (found != null) [ FD ]
Line_3 $$ Collection<TreeItem<Pair<AbstractUrl, String>>> list = getFavoritesListRootUrls(name)-->Line_11 $$ list = item.getChildren()[ FD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_4 $$ if (elements.size() > 1) [ CD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_3 $$ Collection<TreeItem<Pair<AbstractUrl, String>>> list = getFavoritesListRootUrls(name)[ CD ]
Line_24 $$ if (found != null) -->Line_27 $$ return true[ CD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_3 $$ Collection<TreeItem<Pair<AbstractUrl, String>>> list = getFavoritesListRootUrls(name)[ FD ]
Line_18 $$ for (TreeItem<Pair<AbstractUrl, String>> pair : list) -->Line_20 $$ found = pair[ FD ]
Line_15 $$ AbstractUrl url = convertor.convert(elements.get(elements.size() - 1))-->Line_16 $$ if (url == null)[ FD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_15 $$ AbstractUrl url = convertor.convert(elements.get(elements.size() - 1))[ FD ]
Line_18 $$ for (TreeItem<Pair<AbstractUrl, String>> pair : list) -->Line_19 $$ if (url.equals(pair.getData().getFirst())) [ FD ]
Line_3 $$ Collection<TreeItem<Pair<AbstractUrl, String>>> list = getFavoritesListRootUrls(name)-->Line_8 $$ final TreeItem<Pair<AbstractUrl, String>> item = findNextItem(objUrl, list)[ FD ]
Line_14 $$ TreeItem<Pair<AbstractUrl, String>> found = null-->Line_25 $$ list.remove(found)[ FD ]
Line_6 $$ for (T obj : sublist) -->Line_7 $$ AbstractUrl objUrl = convertor.convert(obj)[ FD ]
Line_16 $$ if (url == null)-->Line_17 $$ return false[ CD ]
Line_20 $$ found = pair-->Line_25 $$ list.remove(found)[ FD ]
Line_14 $$ TreeItem<Pair<AbstractUrl, String>> found = null-->Line_20 $$ found = pair[ FD ]
Line_15 $$ AbstractUrl url = convertor.convert(elements.get(elements.size() - 1))-->Line_19 $$ if (url.equals(pair.getData().getFirst())) [ FD ]
Line_24 $$ if (found != null) -->Line_25 $$ list.remove(found)[ CD ]
Line_9 $$ if (item == null || item.getChildren() == null)-->Line_10 $$ return false[ CD ]
Line_8 $$ final TreeItem<Pair<AbstractUrl, String>> item = findNextItem(objUrl, list)-->Line_9 $$ if (item == null || item.getChildren() == null)[ FD ]
Line_2 $$ private <T> boolean findListToRemoveFrom(@NotNull String name, @NotNull final List<T> elements, final Convertor<T, AbstractUrl> convertor) -->Line_29 $$ return false[ CD ]
