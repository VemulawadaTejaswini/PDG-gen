Line_6 $$ if (schema.isPresent()) -->Line_7 $$ List<String> parts = schema.get().getParts()[ CD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_4 $$ String schemaName = session.getSchema().orElse(null)[ CD ]
Line_26 $$ Optional<String> likePattern = showTables.getLikePattern()-->Line_28 $$ Expression likePredicate = new LikePredicate(nameReference("table_name"), new StringLiteral(likePattern.get()), null)[ FD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_6 $$ if (schema.isPresent()) [ CD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_16 $$ if (catalogName == null) [ CD ]
Line_5 $$ Optional<QualifiedName> schema = showTables.getSchema()-->Line_14 $$ schemaName = schema.get().getSuffix()[ FD ]
Line_27 $$ if (likePattern.isPresent()) -->Line_29 $$ predicate = logicalAnd(predicate, likePredicate)[ CD ]
Line_29 $$ predicate = logicalAnd(predicate, likePredicate)-->Line_31 $$ Query query = simpleQuery(selectList(aliasedName("table_name", "Table")), from(catalogName, TABLE_TABLES), predicate, ordering(ascending("table_name")))[ FD ]
Line_26 $$ Optional<String> likePattern = showTables.getLikePattern()-->Line_27 $$ if (likePattern.isPresent()) [ FD ]
Line_12 $$ catalogName = parts.get(0)-->Line_31 $$ Query query = simpleQuery(selectList(aliasedName("table_name", "Table")), from(catalogName, TABLE_TABLES), predicate, ordering(ascending("table_name")))[ FD ]
Line_3 $$ String catalogName = session.getCatalog().orElse(null)-->Line_16 $$ if (catalogName == null) [ FD ]
Line_12 $$ catalogName = parts.get(0)-->Line_16 $$ if (catalogName == null) [ FD ]
Line_14 $$ schemaName = schema.get().getSuffix()-->Line_22 $$ if (!metadata.listSchemaNames(session, catalogName).contains(schemaName)) [ FD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_32 $$ return process(query, context)[ CD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_31 $$ Query query = simpleQuery(selectList(aliasedName("table_name", "Table")), from(catalogName, TABLE_TABLES), predicate, ordering(ascending("table_name")))[ CD ]
Line_25 $$ Expression predicate = equal(nameReference("table_schema"), new StringLiteral(schemaName))-->Line_31 $$ Query query = simpleQuery(selectList(aliasedName("table_name", "Table")), from(catalogName, TABLE_TABLES), predicate, ordering(ascending("table_name")))[ FD ]
Line_6 $$ if (schema.isPresent()) -->Line_14 $$ schemaName = schema.get().getSuffix()[ CD ]
Line_11 $$ if (parts.size() == 2) -->Line_12 $$ catalogName = parts.get(0)[ CD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_3 $$ String catalogName = session.getCatalog().orElse(null)[ CD ]
Line_3 $$ String catalogName = session.getCatalog().orElse(null)-->Line_31 $$ Query query = simpleQuery(selectList(aliasedName("table_name", "Table")), from(catalogName, TABLE_TABLES), predicate, ordering(ascending("table_name")))[ FD ]
Line_31 $$ Query query = simpleQuery(selectList(aliasedName("table_name", "Table")), from(catalogName, TABLE_TABLES), predicate, ordering(ascending("table_name")))-->Line_32 $$ return process(query, context)[ FD ]
Line_6 $$ if (schema.isPresent()) -->Line_11 $$ if (parts.size() == 2) [ CD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_19 $$ if (schemaName == null) [ CD ]
Line_12 $$ catalogName = parts.get(0)-->Line_22 $$ if (!metadata.listSchemaNames(session, catalogName).contains(schemaName)) [ FD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_22 $$ if (!metadata.listSchemaNames(session, catalogName).contains(schemaName)) [ CD ]
Line_4 $$ String schemaName = session.getSchema().orElse(null)-->Line_19 $$ if (schemaName == null) [ FD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_25 $$ Expression predicate = equal(nameReference("table_schema"), new StringLiteral(schemaName))[ CD ]
Line_4 $$ String schemaName = session.getSchema().orElse(null)-->Line_22 $$ if (!metadata.listSchemaNames(session, catalogName).contains(schemaName)) [ FD ]
Line_7 $$ List<String> parts = schema.get().getParts()-->Line_12 $$ catalogName = parts.get(0)[ FD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_32 $$ return process(query, context)[ FD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_26 $$ Optional<String> likePattern = showTables.getLikePattern()[ CD ]
Line_28 $$ Expression likePredicate = new LikePredicate(nameReference("table_name"), new StringLiteral(likePattern.get()), null)-->Line_29 $$ predicate = logicalAnd(predicate, likePredicate)[ FD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_26 $$ Optional<String> likePattern = showTables.getLikePattern()[ FD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_27 $$ if (likePattern.isPresent()) [ CD ]
Line_14 $$ schemaName = schema.get().getSuffix()-->Line_19 $$ if (schemaName == null) [ FD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_5 $$ Optional<QualifiedName> schema = showTables.getSchema()[ CD ]
Line_2 $$ protected RelationType visitShowTables(ShowTables showTables, AnalysisContext context) -->Line_5 $$ Optional<QualifiedName> schema = showTables.getSchema()[ FD ]
Line_3 $$ String catalogName = session.getCatalog().orElse(null)-->Line_22 $$ if (!metadata.listSchemaNames(session, catalogName).contains(schemaName)) [ FD ]
Line_7 $$ List<String> parts = schema.get().getParts()-->Line_8 $$ if (parts.size() > 2) [ FD ]
Line_5 $$ Optional<QualifiedName> schema = showTables.getSchema()-->Line_6 $$ if (schema.isPresent()) [ FD ]
Line_27 $$ if (likePattern.isPresent()) -->Line_28 $$ Expression likePredicate = new LikePredicate(nameReference("table_name"), new StringLiteral(likePattern.get()), null)[ CD ]
Line_5 $$ Optional<QualifiedName> schema = showTables.getSchema()-->Line_7 $$ List<String> parts = schema.get().getParts()[ FD ]
Line_3 $$ String catalogName = session.getCatalog().orElse(null)-->Line_12 $$ catalogName = parts.get(0)[ FD ]
Line_4 $$ String schemaName = session.getSchema().orElse(null)-->Line_14 $$ schemaName = schema.get().getSuffix()[ FD ]
Line_25 $$ Expression predicate = equal(nameReference("table_schema"), new StringLiteral(schemaName))-->Line_29 $$ predicate = logicalAnd(predicate, likePredicate)[ FD ]
Line_6 $$ if (schema.isPresent()) -->Line_8 $$ if (parts.size() > 2) [ CD ]
Line_7 $$ List<String> parts = schema.get().getParts()-->Line_11 $$ if (parts.size() == 2) [ FD ]
