Line_4 $$ List<String> arguments = new ArrayList()-->Line_35 $$ CommandLoggerHandler.logSeleniumCommand(executeElement, arguments)[ FD ]
Line_37 $$ Class<?> clazz = liferaySelenium.getClass()-->Line_39 $$ Method method = clazz.getMethod(selenium, parameterClasses.toArray(new Class[parameterClasses.size()]))[ FD ]
Line_23 $$ if (selenium.equals("assertCssValue")) -->Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")[ CD ]
Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_32 $$ arguments.add(argument)[ FD ]
Line_20 $$ argument = ""-->Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)[ FD ]
Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")-->Line_32 $$ arguments.add(argument)[ FD ]
Line_5 $$ List<Class<?>> parameterClasses = new ArrayList()-->Line_39 $$ Method method = clazz.getMethod(selenium, parameterClasses.toArray(new Class[parameterClasses.size()]))[ FD ]
Line_6 $$ String selenium = executeElement.attributeValue("selenium")-->Line_39 $$ Method method = clazz.getMethod(selenium, parameterClasses.toArray(new Class[parameterClasses.size()]))[ FD ]
Line_6 $$ String selenium = executeElement.attributeValue("selenium")-->Line_12 $$ if (selenium.equals("assertConfirmation") || selenium.equals("assertConsoleTextNotPresent") || selenium.equals("assertConsoleTextPresent") || selenium.equals("assertLocation") || selenium.equals("assertHTMLSourceTextNotPresent") || selenium.equals("assertHTMLSourceTextPresent") || selenium.equals("assertNotLocation") || selenium.equals("assertTextNotPresent") || selenium.equals("assertTextPresent") || selenium.equals("waitForConfirmation") || selenium.equals("waitForTextNotPresent") || selenium.equals("waitForTextPresent")) [ FD ]
Line_20 $$ argument = ""-->Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")[ FD ]
Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")-->Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)[ FD ]
Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))-->Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ FD ]
Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_20 $$ argument = ""[ FD ]
Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_32 $$ arguments.add(argument)[ FD ]
Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))-->Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ FD ]
Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")[ FD ]
Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_10 $$ if (argument == null) [ FD ]
Line_12 $$ if (selenium.equals("assertConfirmation") || selenium.equals("assertConsoleTextNotPresent") || selenium.equals("assertConsoleTextPresent") || selenium.equals("assertLocation") || selenium.equals("assertHTMLSourceTextNotPresent") || selenium.equals("assertHTMLSourceTextPresent") || selenium.equals("assertNotLocation") || selenium.equals("assertTextNotPresent") || selenium.equals("assertTextPresent") || selenium.equals("waitForConfirmation") || selenium.equals("waitForTextNotPresent") || selenium.equals("waitForTextPresent")) -->Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")[ CD ]
Line_36 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()-->Line_40 $$ _returnObject = method.invoke(liferaySelenium, (Object[]) arguments.toArray(new String[arguments.size()]))[ FD ]
Line_11 $$ if (i == 0) -->Line_17 $$ if (i == 1) [ CD ]
Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ FD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_5 $$ List<Class<?>> parameterClasses = new ArrayList()[ CD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_4 $$ List<String> arguments = new ArrayList()[ CD ]
Line_17 $$ if (i == 1) -->Line_19 $$ if (selenium.equals("clickAt")) [ CD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_6 $$ String selenium = executeElement.attributeValue("selenium")[ FD ]
Line_39 $$ Method method = clazz.getMethod(selenium, parameterClasses.toArray(new Class[parameterClasses.size()]))-->Line_40 $$ _returnObject = method.invoke(liferaySelenium, (Object[]) arguments.toArray(new String[arguments.size()]))[ FD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_3 $$ PoshiRunnerStackTraceUtil.setCurrentElement(executeElement)[ FD ]
Line_17 $$ if (i == 1) -->Line_22 $$ if (i == 2) [ CD ]
Line_8 $$ for (int i = 0; i < parameterCount; i++) -->Line_22 $$ if (i == 2) [ FD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_40 $$ _returnObject = method.invoke(liferaySelenium, (Object[]) arguments.toArray(new String[arguments.size()]))[ FD ]
Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")-->Line_10 $$ if (argument == null) [ FD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_7 $$ int parameterCount = PoshiRunnerContext.getSeleniumParameterCount(selenium)[ CD ]
Line_8 $$ for (int i = 0; i < parameterCount; i++) -->Line_10 $$ if (argument == null) [ CD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_6 $$ String selenium = executeElement.attributeValue("selenium")[ CD ]
Line_10 $$ if (argument == null) -->Line_11 $$ if (i == 0) [ CD ]
Line_8 $$ for (int i = 0; i < parameterCount; i++) -->Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))[ CD ]
Line_20 $$ argument = ""-->Line_32 $$ arguments.add(argument)[ FD ]
Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")[ FD ]
Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)[ FD ]
Line_8 $$ for (int i = 0; i < parameterCount; i++) -->Line_32 $$ arguments.add(argument)[ CD ]
Line_42 $$ Throwable throwable = e.getCause()-->Line_43 $$ throw new Exception(throwable.getMessage(), e)[ FD ]
Line_12 $$ if (selenium.equals("assertConfirmation") || selenium.equals("assertConsoleTextNotPresent") || selenium.equals("assertConsoleTextPresent") || selenium.equals("assertLocation") || selenium.equals("assertHTMLSourceTextNotPresent") || selenium.equals("assertHTMLSourceTextPresent") || selenium.equals("assertNotLocation") || selenium.equals("assertTextNotPresent") || selenium.equals("assertTextPresent") || selenium.equals("waitForConfirmation") || selenium.equals("waitForTextNotPresent") || selenium.equals("waitForTextPresent")) -->Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ CD ]
Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))-->Line_20 $$ argument = ""[ FD ]
Line_5 $$ List<Class<?>> parameterClasses = new ArrayList()-->Line_33 $$ parameterClasses.add(String.class)[ FD ]
Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ FD ]
Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))-->Line_10 $$ if (argument == null) [ FD ]
Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")-->Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ FD ]
Line_20 $$ argument = ""-->Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ FD ]
Line_36 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()-->Line_37 $$ Class<?> clazz = liferaySelenium.getClass()[ FD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_37 $$ Class<?> clazz = liferaySelenium.getClass()[ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_32 $$ arguments.add(argument)[ FD ]
Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_32 $$ arguments.add(argument)[ FD ]
Line_7 $$ int parameterCount = PoshiRunnerContext.getSeleniumParameterCount(selenium)-->Line_8 $$ for (int i = 0; i < parameterCount; i++) [ FD ]
Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_20 $$ argument = ""[ FD ]
Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)-->Line_10 $$ if (argument == null) [ FD ]
Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)[ FD ]
Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))-->Line_32 $$ arguments.add(argument)[ FD ]
Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")-->Line_10 $$ if (argument == null) [ FD ]
Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")-->Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ FD ]
Line_10 $$ if (argument == null) -->Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)[ CD ]
Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")[ FD ]
Line_6 $$ String selenium = executeElement.attributeValue("selenium")-->Line_19 $$ if (selenium.equals("clickAt")) [ FD ]
Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))-->Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)[ FD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))[ FD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_35 $$ CommandLoggerHandler.logSeleniumCommand(executeElement, arguments)[ CD ]
Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")-->Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")[ FD ]
Line_8 $$ for (int i = 0; i < parameterCount; i++) -->Line_33 $$ parameterClasses.add(String.class)[ CD ]
Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")-->Line_20 $$ argument = ""[ FD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_8 $$ for (int i = 0; i < parameterCount; i++) [ CD ]
Line_6 $$ String selenium = executeElement.attributeValue("selenium")-->Line_23 $$ if (selenium.equals("assertCssValue")) [ FD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_36 $$ LiferaySelenium liferaySelenium = SeleniumUtil.getSelenium()[ CD ]
Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))-->Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")[ FD ]
Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))-->Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ FD ]
Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ FD ]
Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")-->Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)[ FD ]
Line_13 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_10 $$ if (argument == null) [ FD ]
Line_22 $$ if (i == 2) -->Line_23 $$ if (selenium.equals("assertCssValue")) [ CD ]
Line_19 $$ if (selenium.equals("clickAt")) -->Line_20 $$ argument = ""[ CD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_35 $$ CommandLoggerHandler.logSeleniumCommand(executeElement, arguments)[ FD ]
Line_17 $$ if (i == 1) -->Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ CD ]
Line_8 $$ for (int i = 0; i < parameterCount; i++) -->Line_11 $$ if (i == 0) [ FD ]
Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")[ FD ]
Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_10 $$ if (argument == null) [ FD ]
Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)-->Line_32 $$ arguments.add(argument)[ FD ]
Line_8 $$ for (int i = 0; i < parameterCount; i++) -->Line_17 $$ if (i == 1) [ FD ]
Line_18 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")-->Line_30 $$ argument = PoshiRunnerVariablesUtil.replaceCommandVars(argument)[ FD ]
Line_11 $$ if (i == 0) -->Line_12 $$ if (selenium.equals("assertConfirmation") || selenium.equals("assertConsoleTextNotPresent") || selenium.equals("assertConsoleTextPresent") || selenium.equals("assertLocation") || selenium.equals("assertHTMLSourceTextNotPresent") || selenium.equals("assertHTMLSourceTextPresent") || selenium.equals("assertNotLocation") || selenium.equals("assertTextNotPresent") || selenium.equals("assertTextPresent") || selenium.equals("waitForConfirmation") || selenium.equals("waitForTextNotPresent") || selenium.equals("waitForTextPresent")) [ CD ]
Line_20 $$ argument = ""-->Line_10 $$ if (argument == null) [ FD ]
Line_23 $$ if (selenium.equals("assertCssValue")) -->Line_24 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("value1")[ CD ]
Line_6 $$ String selenium = executeElement.attributeValue("selenium")-->Line_7 $$ int parameterCount = PoshiRunnerContext.getSeleniumParameterCount(selenium)[ FD ]
Line_2 $$ public static void runSeleniumElement(Element executeElement) throws Exception -->Line_3 $$ PoshiRunnerStackTraceUtil.setCurrentElement(executeElement)[ CD ]
Line_15 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator1")-->Line_32 $$ arguments.add(argument)[ FD ]
Line_9 $$ String argument = executeElement.attributeValue("argument" + (i + 1))-->Line_26 $$ argument = PoshiRunnerVariablesUtil.getValueFromCommandMap("locator2")[ FD ]
