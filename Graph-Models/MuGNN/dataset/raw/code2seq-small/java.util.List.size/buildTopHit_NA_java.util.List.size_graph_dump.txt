Line_68 $$ final Consumer<Object> consumer = new Consumer<Object>() -->Line_76 $$ elements.add(o)[ FD ]
Line_15 $$ if (i != -1) -->Line_18 $$ final String psiFqn = history.fqn.substring(i + 3)[ CD ]
Line_57 $$ final ChooseRunConfigurationPopup.ItemWrapper runConfiguration = getRunConfigurationByName(history.fqn)-->Line_58 $$ if (runConfiguration != null) [ FD ]
Line_107 $$ if (elements.size() > 0) -->Line_108 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_15 $$ if (i != -1) -->Line_17 $$ final Language language = Language.findLanguageByID(langId)[ CD ]
Line_20 $$ final PsiElement psi = LanguagePsiElementExternalizer.INSTANCE.forLanguage(language).findByQualifiedName(project, psiFqn)-->Line_23 $$ final PsiFile psiFile = psi.getContainingFile()[ FD ]
Line_87 $$ if (!ids.contains(providerId) && StringUtil.startsWithIgnoreCase(providerId, id)) -->Line_88 $$ consumer.consume(provider)[ CD ]
Line_114 $$ for (Object element : new ArrayList(elements)) -->Line_127 $$ myListModel.addElement(element)[ FD ]
Line_5 $$ if (history != null) -->Line_7 $$ if (type != null) [ CD ]
Line_80 $$ if (pattern.startsWith("#") && !pattern.contains(" ")) -->Line_94 $$ final ActionManager actionManager = ActionManager.getInstance()[ CD ]
Line_19 $$ if (language != null) -->Line_21 $$ if (psi != null) [ CD ]
Line_3 $$ final List<Object> elements = new ArrayList<Object>()-->Line_107 $$ if (elements.size() > 0) [ FD ]
Line_2 $$ private synchronized void buildTopHit(String pattern) -->Line_3 $$ final List<Object> elements = new ArrayList<Object>()[ CD ]
Line_80 $$ if (pattern.startsWith("#") && !pattern.contains(" ")) -->Line_95 $$ final List<String> actions = AbbreviationManager.getInstance().findActions(pattern)[ CD ]
Line_11 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_15 $$ if (i != -1) [ CD ]
Line_14 $$ final int i = history.fqn.indexOf("://")-->Line_16 $$ final String langId = history.fqn.substring(0, i)[ FD ]
Line_114 $$ for (Object element : new ArrayList(elements)) -->Line_117 $$ elements.remove(element)[ FD ]
Line_115 $$ if (element instanceof AnAction) -->Line_116 $$ if (!isEnabled((AnAction) element)) [ CD ]
Line_85 $$ if (provider instanceof OptionsTopHitProvider) -->Line_86 $$ final String providerId = ((OptionsTopHitProvider) provider).getId()[ CD ]
Line_68 $$ final Consumer<Object> consumer = new Consumer<Object>() -->Line_73 $$ if (o instanceof AnAction && myAlreadyAddedActions.contains(o)) [ FD ]
Line_18 $$ final String psiFqn = history.fqn.substring(i + 3)-->Line_20 $$ final PsiElement psi = LanguagePsiElementExternalizer.INSTANCE.forLanguage(language).findByQualifiedName(project, psiFqn)[ FD ]
Line_80 $$ if (pattern.startsWith("#") && !pattern.contains(" ")) -->Line_81 $$ String id = pattern.substring(1)[ CD ]
Line_2 $$ private synchronized void buildTopHit(String pattern) -->Line_107 $$ if (elements.size() > 0) [ CD ]
Line_17 $$ final Language language = Language.findLanguageByID(langId)-->Line_19 $$ if (language != null) [ FD ]
Line_20 $$ final PsiElement psi = LanguagePsiElementExternalizer.INSTANCE.forLanguage(language).findByQualifiedName(project, psiFqn)-->Line_22 $$ elements.add(psi)[ FD ]
Line_4 $$ final HistoryItem history = myHistoryItem-->Line_5 $$ if (history != null) [ FD ]
Line_123 $$ if (isCanceled() || elements.isEmpty())-->Line_124 $$ return[ CD ]
Line_25 $$ final VirtualFile file = psiFile.getVirtualFile()-->Line_40 $$ elements.add(file)[ FD ]
Line_10 $$ if (!DumbService.isDumb(project)) -->Line_11 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_2 $$ private synchronized void buildTopHit(String pattern) -->Line_81 $$ String id = pattern.substring(1)[ FD ]
Line_58 $$ if (runConfiguration != null) -->Line_59 $$ elements.add(runConfiguration)[ CD ]
Line_5 $$ if (history != null) -->Line_6 $$ final HistoryType type = parseHistoryType(history.type)[ CD ]
Line_2 $$ private synchronized void buildTopHit(String pattern) -->Line_95 $$ final List<String> actions = AbbreviationManager.getInstance().findActions(pattern)[ FD ]
Line_47 $$ if (action != null) -->Line_49 $$ myAlreadyAddedActions.add(action)[ CD ]
Line_3 $$ final List<Object> elements = new ArrayList<Object>()-->Line_40 $$ elements.add(file)[ FD ]
Line_15 $$ if (i != -1) -->Line_16 $$ final String langId = history.fqn.substring(0, i)[ CD ]
Line_2 $$ private synchronized void buildTopHit(String pattern) -->Line_5 $$ if (history != null) [ CD ]
Line_85 $$ if (provider instanceof OptionsTopHitProvider) -->Line_87 $$ if (!ids.contains(providerId) && StringUtil.startsWithIgnoreCase(providerId, id)) [ CD ]
Line_6 $$ final HistoryType type = parseHistoryType(history.type)-->Line_7 $$ if (type != null) [ FD ]
Line_14 $$ final int i = history.fqn.indexOf("://")-->Line_15 $$ if (i != -1) [ FD ]
Line_2 $$ private synchronized void buildTopHit(String pattern) -->Line_80 $$ if (pattern.startsWith("#") && !pattern.contains(" ")) [ FD ]
Line_3 $$ final List<Object> elements = new ArrayList<Object>()-->Line_22 $$ elements.add(psi)[ FD ]
Line_3 $$ final List<Object> elements = new ArrayList<Object>()-->Line_59 $$ elements.add(runConfiguration)[ FD ]
Line_68 $$ final Consumer<Object> consumer = new Consumer<Object>() -->Line_72 $$ if (isSetting(o) || isVirtualFile(o) || isActionValue(o) || o instanceof PsiElement || o instanceof OptionsTopHitProvider) [ FD ]
Line_21 $$ if (psi != null) -->Line_22 $$ elements.add(psi)[ CD ]
Line_2 $$ private synchronized void buildTopHit(String pattern) -->Line_104 $$ provider.consumeTopHits(pattern, consumer, project)[ FD ]
Line_21 $$ if (psi != null) -->Line_24 $$ if (psiFile != null) [ CD ]
Line_19 $$ if (language != null) -->Line_20 $$ final PsiElement psi = LanguagePsiElementExternalizer.INSTANCE.forLanguage(language).findByQualifiedName(project, psiFqn)[ CD ]
Line_24 $$ if (psiFile != null) -->Line_26 $$ if (file != null) [ CD ]
Line_23 $$ final PsiFile psiFile = psi.getContainingFile()-->Line_25 $$ final VirtualFile file = psiFile.getVirtualFile()[ FD ]
Line_3 $$ final List<Object> elements = new ArrayList<Object>()-->Line_76 $$ elements.add(o)[ FD ]
Line_108 $$ SwingUtilities.invokeLater(new Runnable() -->Line_112 $$ if (isCanceled())[ CD ]
Line_39 $$ if (file != null) -->Line_40 $$ elements.add(file)[ CD ]
Line_72 $$ if (isSetting(o) || isVirtualFile(o) || isActionValue(o) || o instanceof PsiElement || o instanceof OptionsTopHitProvider) -->Line_76 $$ elements.add(o)[ CD ]
Line_68 $$ final Consumer<Object> consumer = new Consumer<Object>() -->Line_72 $$ if (isSetting(o) || isVirtualFile(o) || isActionValue(o) || o instanceof PsiElement || o instanceof OptionsTopHitProvider) [ CD ]
Line_87 $$ if (!ids.contains(providerId) && StringUtil.startsWithIgnoreCase(providerId, id)) -->Line_89 $$ ids.add(providerId)[ CD ]
Line_112 $$ if (isCanceled())-->Line_113 $$ return[ CD ]
Line_57 $$ final ChooseRunConfigurationPopup.ItemWrapper runConfiguration = getRunConfigurationByName(history.fqn)-->Line_59 $$ elements.add(runConfiguration)[ FD ]
Line_26 $$ if (file != null) -->Line_27 $$ myAlreadyAddedFiles.add(file)[ CD ]
Line_17 $$ final Language language = Language.findLanguageByID(langId)-->Line_20 $$ final PsiElement psi = LanguagePsiElementExternalizer.INSTANCE.forLanguage(language).findByQualifiedName(project, psiFqn)[ FD ]
Line_3 $$ final List<Object> elements = new ArrayList<Object>()-->Line_48 $$ elements.add(action)[ FD ]
Line_15 $$ if (i != -1) -->Line_19 $$ if (language != null) [ CD ]
Line_2 $$ private synchronized void buildTopHit(String pattern) -->Line_4 $$ final HistoryItem history = myHistoryItem[ CD ]
Line_24 $$ if (psiFile != null) -->Line_25 $$ final VirtualFile file = psiFile.getVirtualFile()[ CD ]
Line_54 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_57 $$ final ChooseRunConfigurationPopup.ItemWrapper runConfiguration = getRunConfigurationByName(history.fqn)[ CD ]
Line_119 $$ if (isCanceled())-->Line_120 $$ return[ CD ]
Line_47 $$ if (action != null) -->Line_48 $$ elements.add(action)[ CD ]
Line_25 $$ final VirtualFile file = psiFile.getVirtualFile()-->Line_27 $$ myAlreadyAddedFiles.add(file)[ FD ]
Line_72 $$ if (isSetting(o) || isVirtualFile(o) || isActionValue(o) || o instanceof PsiElement || o instanceof OptionsTopHitProvider) -->Line_73 $$ if (o instanceof AnAction && myAlreadyAddedActions.contains(o)) [ CD ]
Line_11 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_14 $$ final int i = history.fqn.indexOf("://")[ CD ]
Line_25 $$ final VirtualFile file = psiFile.getVirtualFile()-->Line_26 $$ if (file != null) [ FD ]
Line_3 $$ final List<Object> elements = new ArrayList<Object>()-->Line_117 $$ elements.remove(element)[ FD ]
Line_23 $$ final PsiFile psiFile = psi.getContainingFile()-->Line_24 $$ if (psiFile != null) [ FD ]
Line_73 $$ if (o instanceof AnAction && myAlreadyAddedActions.contains(o)) -->Line_74 $$ return[ CD ]
Line_25 $$ final VirtualFile file = psiFile.getVirtualFile()-->Line_39 $$ if (file != null) [ FD ]
Line_54 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_58 $$ if (runConfiguration != null) [ CD ]
Line_3 $$ final List<Object> elements = new ArrayList<Object>()-->Line_126 $$ for (Object element : ContainerUtil.getFirstItems(elements, MAX_TOP_HIT)) [ FD ]
Line_3 $$ final List<Object> elements = new ArrayList<Object>()-->Line_123 $$ if (isCanceled() || elements.isEmpty())[ FD ]
Line_16 $$ final String langId = history.fqn.substring(0, i)-->Line_17 $$ final Language language = Language.findLanguageByID(langId)[ FD ]
Line_53 $$ if (!DumbService.isDumb(project)) -->Line_54 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_108 $$ SwingUtilities.invokeLater(new Runnable() -->Line_123 $$ if (isCanceled() || elements.isEmpty())[ CD ]
Line_20 $$ final PsiElement psi = LanguagePsiElementExternalizer.INSTANCE.forLanguage(language).findByQualifiedName(project, psiFqn)-->Line_21 $$ if (psi != null) [ FD ]
Line_2 $$ private synchronized void buildTopHit(String pattern) -->Line_80 $$ if (pattern.startsWith("#") && !pattern.contains(" ")) [ CD ]
Line_115 $$ if (element instanceof AnAction) -->Line_119 $$ if (isCanceled())[ CD ]
Line_108 $$ SwingUtilities.invokeLater(new Runnable() -->Line_125 $$ myListModel.titleIndex.topHit = myListModel.size()[ CD ]
Line_21 $$ if (psi != null) -->Line_23 $$ final PsiFile psiFile = psi.getContainingFile()[ CD ]
Line_116 $$ if (!isEnabled((AnAction) element)) -->Line_117 $$ elements.remove(element)[ CD ]
Line_114 $$ for (Object element : new ArrayList(elements)) -->Line_115 $$ if (element instanceof AnAction) [ FD ]
