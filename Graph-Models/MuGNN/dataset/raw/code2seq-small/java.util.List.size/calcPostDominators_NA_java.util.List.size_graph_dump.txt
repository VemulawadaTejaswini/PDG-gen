Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_11 $$ initSet.setAllElements()[ CD ]
Line_12 $$ for (List<Statement> lst : components) -->Line_16 $$ tmpSet.addAll(lst)[ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_9 $$ setFlagNodes.setAllElements()[ CD ]
Line_62 $$ List<Integer> lstPosts = new ArrayList<Integer>()-->Line_75 $$ ret.addWithKey(lstPosts, st.id)[ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_57 $$ final HashMap<Integer, Integer> mapSortOrder = new HashMap<Integer, Integer>()[ CD ]
Line_25 $$ for (Statement stat : lstStats) -->Line_30 $$ FastFixedSet<Statement> doms = lists.get(stat)[ FD ]
Line_58 $$ for (int i = 0; i < lstRevPost.size(); i++) -->Line_59 $$ mapSortOrder.put(lstRevPost.get(i).id, i)[ CD ]
Line_45 $$ if (!InterpreterUtil.equalObjects(domsSuccs, doms)) -->Line_46 $$ lists.put(stat, domsSuccs)[ CD ]
Line_25 $$ for (Statement stat : lstStats) -->Line_47 $$ List<Statement> lstPreds = stat.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD)[ FD ]
Line_54 $$ VBStyleCollection<List<Integer>, Integer> ret = new VBStyleCollection<List<Integer>, Integer>()-->Line_75 $$ ret.addWithKey(lstPosts, st.id)[ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_5 $$ List<List<Statement>> components = schelper.getComponents()[ CD ]
Line_8 $$ FastFixedSet<Statement> setFlagNodes = factory.spawnEmptySet()-->Line_26 $$ if (!setFlagNodes.contains(stat)) [ FD ]
Line_10 $$ FastFixedSet<Statement> initSet = factory.spawnEmptySet()-->Line_11 $$ initSet.setAllElements()[ FD ]
Line_20 $$ for (Statement stat : lst) -->Line_32 $$ List<Statement> lstSuccs = stat.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_FORWARD)[ FD ]
Line_62 $$ List<Integer> lstPosts = new ArrayList<Integer>()-->Line_72 $$ if (lstPosts.size() > 1 && lstPosts.get(0).intValue() == st.id) [ FD ]
Line_34 $$ Statement succ = lstSuccs.get(j)-->Line_35 $$ FastFixedSet<Statement> succlst = lists.get(succ)[ FD ]
Line_25 $$ for (Statement stat : lstStats) -->Line_42 $$ if (!domsSuccs.contains(stat)) [ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_3 $$ HashMap<Statement, FastFixedSet<Statement>> lists = new HashMap<Statement, FastFixedSet<Statement>>()[ CD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_77 $$ return ret[ CD ]
Line_33 $$ for (int j = 0; j < lstSuccs.size(); j++) -->Line_36 $$ if (j == 0) [ FD ]
Line_14 $$ if (StrongConnectivityHelper.isExitComponent(lst)) -->Line_18 $$ tmpSet = initSet.getCopy()[ CD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_54 $$ VBStyleCollection<List<Integer>, Integer> ret = new VBStyleCollection<List<Integer>, Integer>()[ CD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_4 $$ StrongConnectivityHelper schelper = new StrongConnectivityHelper(container)[ CD ]
Line_8 $$ FastFixedSet<Statement> setFlagNodes = factory.spawnEmptySet()-->Line_29 $$ setFlagNodes.remove(stat)[ FD ]
Line_45 $$ if (!InterpreterUtil.equalObjects(domsSuccs, doms)) -->Line_47 $$ List<Statement> lstPreds = stat.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD)[ CD ]
Line_13 $$ FastFixedSet<Statement> tmpSet-->Line_18 $$ tmpSet = initSet.getCopy()[ FD ]
Line_33 $$ for (int j = 0; j < lstSuccs.size(); j++) -->Line_34 $$ Statement succ = lstSuccs.get(j)[ CD ]
Line_12 $$ for (List<Statement> lst : components) -->Line_14 $$ if (StrongConnectivityHelper.isExitComponent(lst)) [ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_10 $$ FastFixedSet<Statement> initSet = factory.spawnEmptySet()[ CD ]
Line_7 $$ FastFixedSetFactory<Statement> factory = new FastFixedSetFactory<Statement>(lstStats)-->Line_10 $$ FastFixedSet<Statement> initSet = factory.spawnEmptySet()[ FD ]
Line_8 $$ FastFixedSet<Statement> setFlagNodes = factory.spawnEmptySet()-->Line_49 $$ setFlagNodes.add(pred)[ FD ]
Line_20 $$ for (Statement stat : lst) -->Line_29 $$ setFlagNodes.remove(stat)[ FD ]
Line_30 $$ FastFixedSet<Statement> doms = lists.get(stat)-->Line_45 $$ if (!InterpreterUtil.equalObjects(domsSuccs, doms)) [ FD ]
Line_14 $$ if (StrongConnectivityHelper.isExitComponent(lst)) -->Line_16 $$ tmpSet.addAll(lst)[ CD ]
Line_72 $$ if (lstPosts.size() > 1 && lstPosts.get(0).intValue() == st.id) -->Line_73 $$ lstPosts.add(lstPosts.remove(0))[ CD ]
Line_36 $$ if (j == 0) -->Line_39 $$ domsSuccs.intersection(succlst)[ CD ]
Line_15 $$ tmpSet = factory.spawnEmptySet()-->Line_21 $$ lists.put(stat, tmpSet)[ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_24 $$ do [ CD ]
Line_32 $$ List<Statement> lstSuccs = stat.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_FORWARD)-->Line_33 $$ for (int j = 0; j < lstSuccs.size(); j++) [ FD ]
Line_33 $$ for (int j = 0; j < lstSuccs.size(); j++) -->Line_34 $$ Statement succ = lstSuccs.get(j)[ FD ]
Line_35 $$ FastFixedSet<Statement> succlst = lists.get(succ)-->Line_37 $$ domsSuccs.union(succlst)[ FD ]
Line_62 $$ List<Integer> lstPosts = new ArrayList<Integer>()-->Line_73 $$ lstPosts.add(lstPosts.remove(0))[ FD ]
Line_7 $$ FastFixedSetFactory<Statement> factory = new FastFixedSetFactory<Statement>(lstStats)-->Line_15 $$ tmpSet = factory.spawnEmptySet()[ FD ]
Line_13 $$ FastFixedSet<Statement> tmpSet-->Line_15 $$ tmpSet = factory.spawnEmptySet()[ FD ]
Line_3 $$ HashMap<Statement, FastFixedSet<Statement>> lists = new HashMap<Statement, FastFixedSet<Statement>>()-->Line_63 $$ for (Statement stt : lists.get(st)) [ FD ]
Line_20 $$ for (Statement stat : lst) -->Line_30 $$ FastFixedSet<Statement> doms = lists.get(stat)[ FD ]
Line_3 $$ HashMap<Statement, FastFixedSet<Statement>> lists = new HashMap<Statement, FastFixedSet<Statement>>()-->Line_21 $$ lists.put(stat, tmpSet)[ FD ]
Line_31 $$ FastFixedSet<Statement> domsSuccs = factory.spawnEmptySet()-->Line_37 $$ domsSuccs.union(succlst)[ FD ]
Line_5 $$ List<List<Statement>> components = schelper.getComponents()-->Line_6 $$ List<Statement> lstStats = container.getPostReversePostOrderList(StrongConnectivityHelper.getExitReps(components))[ FD ]
Line_31 $$ FastFixedSet<Statement> domsSuccs = factory.spawnEmptySet()-->Line_42 $$ if (!domsSuccs.contains(stat)) [ FD ]
Line_3 $$ HashMap<Statement, FastFixedSet<Statement>> lists = new HashMap<Statement, FastFixedSet<Statement>>()-->Line_35 $$ FastFixedSet<Statement> succlst = lists.get(succ)[ FD ]
Line_42 $$ if (!domsSuccs.contains(stat)) -->Line_43 $$ domsSuccs.add(stat)[ CD ]
Line_10 $$ FastFixedSet<Statement> initSet = factory.spawnEmptySet()-->Line_18 $$ tmpSet = initSet.getCopy()[ FD ]
Line_4 $$ StrongConnectivityHelper schelper = new StrongConnectivityHelper(container)-->Line_5 $$ List<List<Statement>> components = schelper.getComponents()[ FD ]
Line_31 $$ FastFixedSet<Statement> domsSuccs = factory.spawnEmptySet()-->Line_43 $$ domsSuccs.add(stat)[ FD ]
Line_25 $$ for (Statement stat : lstStats) -->Line_43 $$ domsSuccs.add(stat)[ FD ]
Line_35 $$ FastFixedSet<Statement> succlst = lists.get(succ)-->Line_39 $$ domsSuccs.intersection(succlst)[ FD ]
Line_61 $$ for (Statement st : lstStats) -->Line_63 $$ for (Statement stt : lists.get(st)) [ FD ]
Line_25 $$ for (Statement stat : lstStats) -->Line_26 $$ if (!setFlagNodes.contains(stat)) [ FD ]
Line_58 $$ for (int i = 0; i < lstRevPost.size(); i++) -->Line_59 $$ mapSortOrder.put(lstRevPost.get(i).id, i)[ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_8 $$ FastFixedSet<Statement> setFlagNodes = factory.spawnEmptySet()[ CD ]
Line_25 $$ for (Statement stat : lstStats) -->Line_32 $$ List<Statement> lstSuccs = stat.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_FORWARD)[ FD ]
Line_3 $$ HashMap<Statement, FastFixedSet<Statement>> lists = new HashMap<Statement, FastFixedSet<Statement>>()-->Line_30 $$ FastFixedSet<Statement> doms = lists.get(stat)[ FD ]
Line_3 $$ HashMap<Statement, FastFixedSet<Statement>> lists = new HashMap<Statement, FastFixedSet<Statement>>()-->Line_46 $$ lists.put(stat, domsSuccs)[ FD ]
Line_20 $$ for (Statement stat : lst) -->Line_47 $$ List<Statement> lstPreds = stat.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD)[ FD ]
Line_14 $$ if (StrongConnectivityHelper.isExitComponent(lst)) -->Line_15 $$ tmpSet = factory.spawnEmptySet()[ CD ]
Line_20 $$ for (Statement stat : lst) -->Line_21 $$ lists.put(stat, tmpSet)[ FD ]
Line_13 $$ FastFixedSet<Statement> tmpSet-->Line_16 $$ tmpSet.addAll(lst)[ FD ]
Line_20 $$ for (Statement stat : lst) -->Line_43 $$ domsSuccs.add(stat)[ FD ]
Line_62 $$ List<Integer> lstPosts = new ArrayList<Integer>()-->Line_66 $$ Collections.sort(lstPosts, new Comparator<Integer>() [ FD ]
Line_33 $$ for (int j = 0; j < lstSuccs.size(); j++) -->Line_35 $$ FastFixedSet<Statement> succlst = lists.get(succ)[ CD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_6 $$ List<Statement> lstStats = container.getPostReversePostOrderList(StrongConnectivityHelper.getExitReps(components))[ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_7 $$ FastFixedSetFactory<Statement> factory = new FastFixedSetFactory<Statement>(lstStats)[ CD ]
Line_32 $$ List<Statement> lstSuccs = stat.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_FORWARD)-->Line_34 $$ Statement succ = lstSuccs.get(j)[ FD ]
Line_36 $$ if (j == 0) -->Line_37 $$ domsSuccs.union(succlst)[ CD ]
Line_8 $$ FastFixedSet<Statement> setFlagNodes = factory.spawnEmptySet()-->Line_9 $$ setFlagNodes.setAllElements()[ FD ]
Line_25 $$ for (Statement stat : lstStats) -->Line_29 $$ setFlagNodes.remove(stat)[ FD ]
Line_62 $$ List<Integer> lstPosts = new ArrayList<Integer>()-->Line_64 $$ lstPosts.add(stt.id)[ FD ]
Line_7 $$ FastFixedSetFactory<Statement> factory = new FastFixedSetFactory<Statement>(lstStats)-->Line_31 $$ FastFixedSet<Statement> domsSuccs = factory.spawnEmptySet()[ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_6 $$ List<Statement> lstStats = container.getPostReversePostOrderList(StrongConnectivityHelper.getExitReps(components))[ CD ]
Line_66 $$ Collections.sort(lstPosts, new Comparator<Integer>() -->Line_69 $$ return mapSortOrder.get(o1).compareTo(mapSortOrder.get(o2))[ CD ]
Line_31 $$ FastFixedSet<Statement> domsSuccs = factory.spawnEmptySet()-->Line_46 $$ lists.put(stat, domsSuccs)[ FD ]
Line_7 $$ FastFixedSetFactory<Statement> factory = new FastFixedSetFactory<Statement>(lstStats)-->Line_8 $$ FastFixedSet<Statement> setFlagNodes = factory.spawnEmptySet()[ FD ]
Line_18 $$ tmpSet = initSet.getCopy()-->Line_21 $$ lists.put(stat, tmpSet)[ FD ]
Line_25 $$ for (Statement stat : lstStats) -->Line_46 $$ lists.put(stat, domsSuccs)[ FD ]
Line_8 $$ FastFixedSet<Statement> setFlagNodes = factory.spawnEmptySet()-->Line_24 $$ do [ FD ]
Line_2 $$ public static VBStyleCollection<List<Integer>, Integer> calcPostDominators(Statement container) -->Line_58 $$ for (int i = 0; i < lstRevPost.size(); i++) [ CD ]
Line_57 $$ final HashMap<Integer, Integer> mapSortOrder = new HashMap<Integer, Integer>()-->Line_59 $$ mapSortOrder.put(lstRevPost.get(i).id, i)[ FD ]
Line_33 $$ for (int j = 0; j < lstSuccs.size(); j++) -->Line_36 $$ if (j == 0) [ CD ]
Line_31 $$ FastFixedSet<Statement> domsSuccs = factory.spawnEmptySet()-->Line_45 $$ if (!InterpreterUtil.equalObjects(domsSuccs, doms)) [ FD ]
Line_20 $$ for (Statement stat : lst) -->Line_46 $$ lists.put(stat, domsSuccs)[ FD ]
Line_66 $$ Collections.sort(lstPosts, new Comparator<Integer>() -->Line_69 $$ return mapSortOrder.get(o1).compareTo(mapSortOrder.get(o2))[ FD ]
Line_20 $$ for (Statement stat : lst) -->Line_42 $$ if (!domsSuccs.contains(stat)) [ FD ]
Line_15 $$ tmpSet = factory.spawnEmptySet()-->Line_16 $$ tmpSet.addAll(lst)[ FD ]
Line_20 $$ for (Statement stat : lst) -->Line_26 $$ if (!setFlagNodes.contains(stat)) [ FD ]
Line_31 $$ FastFixedSet<Statement> domsSuccs = factory.spawnEmptySet()-->Line_39 $$ domsSuccs.intersection(succlst)[ FD ]
Line_15 $$ tmpSet = factory.spawnEmptySet()-->Line_18 $$ tmpSet = initSet.getCopy()[ FD ]
Line_57 $$ final HashMap<Integer, Integer> mapSortOrder = new HashMap<Integer, Integer>()-->Line_69 $$ return mapSortOrder.get(o1).compareTo(mapSortOrder.get(o2))[ FD ]
Line_13 $$ FastFixedSet<Statement> tmpSet-->Line_21 $$ lists.put(stat, tmpSet)[ FD ]
