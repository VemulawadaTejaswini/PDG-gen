Line_6 $$ ExtendedBlock block = rBlock.getBlock()-->Line_11 $$ LOG.debug("block=" + block + ", (length=" + block.getNumBytes() + "), syncList=" + syncList)[ FD ]
Line_25 $$ ReplicaState rState = r.rInfo.getOriginalReplicaState()-->Line_27 $$ bestState = rState[ FD ]
Line_9 $$ long recoveryId = rBlock.getNewGenerationStamp()-->Line_17 $$ nn.commitBlockSynchronization(block, recoveryId, 0, true, true, DatanodeID.EMPTY_ARRAY, null)[ FD ]
Line_6 $$ ExtendedBlock block = rBlock.getBlock()-->Line_93 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ FD ]
Line_6 $$ ExtendedBlock block = rBlock.getBlock()-->Line_37 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)[ FD ]
Line_37 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)-->Line_93 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ FD ]
Line_53 $$ if (rState == bestState) -->Line_54 $$ minLength = Math.min(minLength, r.rInfo.getNumBytes())[ CD ]
Line_23 $$ for (BlockRecord r : syncList) -->Line_44 $$ participatingList.add(r)[ FD ]
Line_23 $$ for (BlockRecord r : syncList) -->Line_69 $$ successList.add(r)[ FD ]
Line_8 $$ DatanodeProtocolClientSideTranslatorPB nn = getActiveNamenodeForBP(block.getBlockPoolId())-->Line_93 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ FD ]
Line_79 $$ StringBuilder b = new StringBuilder()-->Line_81 $$ b.append("\n  " + id)[ FD ]
Line_37 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)-->Line_68 $$ r.updateReplicaUnderRecovery(bpid, recoveryId, newBlock.getNumBytes())[ FD ]
Line_37 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)-->Line_58 $$ newBlock.setNumBytes(minLength)[ FD ]
Line_65 $$ final List<BlockRecord> successList = new ArrayList<BlockRecord>()-->Line_69 $$ successList.add(r)[ FD ]
Line_87 $$ final String[] storages = new String[datanodes.length]-->Line_93 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ FD ]
Line_31 $$ finalizedLength = r.rInfo.getNumBytes()-->Line_46 $$ newBlock.setNumBytes(finalizedLength)[ FD ]
Line_65 $$ final List<BlockRecord> successList = new ArrayList<BlockRecord>()-->Line_89 $$ final BlockRecord r = successList.get(i)[ FD ]
Line_27 $$ bestState = rState-->Line_53 $$ if (rState == bestState) [ FD ]
Line_22 $$ long finalizedLength = -1-->Line_31 $$ finalizedLength = r.rInfo.getNumBytes()[ FD ]
Line_64 $$ List<DatanodeID> failedList = new ArrayList<DatanodeID>()-->Line_83 $$ throw new IOException("Cannot recover " + block + ", the following " + failedList.size() + " data-nodes failed [ FD ]
Line_10 $$ if (LOG.isDebugEnabled()) -->Line_11 $$ LOG.debug("block=" + block + ", (length=" + block.getNumBytes() + "), syncList=" + syncList)[ CD ]
Line_50 $$ long minLength = Long.MAX_VALUE-->Line_58 $$ newBlock.setNumBytes(minLength)[ FD ]
Line_22 $$ long finalizedLength = -1-->Line_46 $$ newBlock.setNumBytes(finalizedLength)[ FD ]
Line_25 $$ ReplicaState rState = r.rInfo.getOriginalReplicaState()-->Line_26 $$ if (rState.getValue() < bestState.getValue())[ FD ]
Line_23 $$ for (BlockRecord r : syncList) -->Line_55 $$ participatingList.add(r)[ FD ]
Line_28 $$ if (rState == ReplicaState.FINALIZED) -->Line_31 $$ finalizedLength = r.rInfo.getNumBytes()[ CD ]
Line_9 $$ long recoveryId = rBlock.getNewGenerationStamp()-->Line_68 $$ r.updateReplicaUnderRecovery(bpid, recoveryId, newBlock.getNumBytes())[ FD ]
Line_88 $$ for (int i = 0; i < datanodes.length; i++) -->Line_89 $$ final BlockRecord r = successList.get(i)[ CD ]
Line_25 $$ ReplicaState rState = r.rInfo.getOriginalReplicaState()-->Line_28 $$ if (rState == ReplicaState.FINALIZED) [ FD ]
Line_37 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)-->Line_46 $$ newBlock.setNumBytes(finalizedLength)[ FD ]
Line_6 $$ ExtendedBlock block = rBlock.getBlock()-->Line_7 $$ final String bpid = block.getBlockPoolId()[ FD ]
Line_43 $$ if (rState == ReplicaState.FINALIZED || rState == ReplicaState.RBW && r.rInfo.getNumBytes() == finalizedLength)-->Line_44 $$ participatingList.add(r)[ CD ]
Line_6 $$ ExtendedBlock block = rBlock.getBlock()-->Line_17 $$ nn.commitBlockSynchronization(block, recoveryId, 0, true, true, DatanodeID.EMPTY_ARRAY, null)[ FD ]
Line_8 $$ DatanodeProtocolClientSideTranslatorPB nn = getActiveNamenodeForBP(block.getBlockPoolId())-->Line_17 $$ nn.commitBlockSynchronization(block, recoveryId, 0, true, true, DatanodeID.EMPTY_ARRAY, null)[ FD ]
Line_23 $$ for (BlockRecord r : syncList) -->Line_68 $$ r.updateReplicaUnderRecovery(bpid, recoveryId, newBlock.getNumBytes())[ FD ]
Line_53 $$ if (rState == bestState) -->Line_55 $$ participatingList.add(r)[ CD ]
Line_25 $$ ReplicaState rState = r.rInfo.getOriginalReplicaState()-->Line_53 $$ if (rState == bestState) [ FD ]
Line_64 $$ List<DatanodeID> failedList = new ArrayList<DatanodeID>()-->Line_72 $$ failedList.add(r.id)[ FD ]
Line_88 $$ for (int i = 0; i < datanodes.length; i++) -->Line_90 $$ datanodes[i] = r.id[ CD ]
Line_88 $$ for (int i = 0; i < datanodes.length; i++) -->Line_91 $$ storages[i] = r.storageID[ CD ]
Line_54 $$ minLength = Math.min(minLength, r.rInfo.getNumBytes())-->Line_58 $$ newBlock.setNumBytes(minLength)[ FD ]
Line_28 $$ if (rState == ReplicaState.FINALIZED) -->Line_29 $$ if (finalizedLength > 0 && finalizedLength != r.rInfo.getNumBytes())[ CD ]
Line_50 $$ long minLength = Long.MAX_VALUE-->Line_54 $$ minLength = Math.min(minLength, r.rInfo.getNumBytes())[ FD ]
Line_7 $$ final String bpid = block.getBlockPoolId()-->Line_68 $$ r.updateReplicaUnderRecovery(bpid, recoveryId, newBlock.getNumBytes())[ FD ]
Line_88 $$ for (int i = 0; i < datanodes.length; i++) -->Line_89 $$ final BlockRecord r = successList.get(i)[ FD ]
Line_6 $$ ExtendedBlock block = rBlock.getBlock()-->Line_8 $$ DatanodeProtocolClientSideTranslatorPB nn = getActiveNamenodeForBP(block.getBlockPoolId())[ FD ]
Line_26 $$ if (rState.getValue() < bestState.getValue())-->Line_27 $$ bestState = rState[ CD ]
