Line_75 $$ for (int i = 0; i < datanodes.length; i++) -->Line_77 $$ datanodes[i] = r.id[ CD ]
Line_75 $$ for (int i = 0; i < datanodes.length; i++) -->Line_78 $$ storages[i] = r.storageID[ CD ]
Line_3 $$ ExtendedBlock block = rBlock.getBlock()-->Line_4 $$ final String bpid = block.getBlockPoolId()[ FD ]
Line_56 $$ final List<BlockRecord> successList = new ArrayList<BlockRecord>()-->Line_73 $$ final DatanodeID[] datanodes = new DatanodeID[successList.size()][ FD ]
Line_74 $$ final String[] storages = new String[datanodes.length]-->Line_80 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ FD ]
Line_75 $$ for (int i = 0; i < datanodes.length; i++) -->Line_76 $$ final BlockRecord r = successList.get(i)[ FD ]
Line_28 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)-->Line_59 $$ r.updateReplicaUnderRecovery(bpid, recoveryId, newBlock.getNumBytes())[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_3 $$ ExtendedBlock block = rBlock.getBlock()[ CD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_55 $$ List<DatanodeID> failedList = new ArrayList<DatanodeID>()[ CD ]
Line_10 $$ if (syncList.isEmpty()) -->Line_11 $$ nn.commitBlockSynchronization(block, recoveryId, 0, true, true, DatanodeID.EMPTY_ARRAY, null)[ CD ]
Line_6 $$ long recoveryId = rBlock.getNewGenerationStamp()-->Line_59 $$ r.updateReplicaUnderRecovery(bpid, recoveryId, newBlock.getNumBytes())[ FD ]
Line_20 $$ bestState = rState-->Line_44 $$ if (rState == bestState) [ FD ]
Line_14 $$ ReplicaState bestState = ReplicaState.RWR-->Line_44 $$ if (rState == bestState) [ FD ]
Line_56 $$ final List<BlockRecord> successList = new ArrayList<BlockRecord>()-->Line_60 $$ successList.add(r)[ FD ]
Line_28 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)-->Line_80 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ FD ]
Line_16 $$ for (BlockRecord r : syncList) -->Line_59 $$ r.updateReplicaUnderRecovery(bpid, recoveryId, newBlock.getNumBytes())[ FD ]
Line_5 $$ DatanodeProtocolClientSideTranslatorPB nn = getActiveNamenodeForBP(block.getBlockPoolId())-->Line_80 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ FD ]
Line_16 $$ for (BlockRecord r : syncList) -->Line_46 $$ participatingList.add(r)[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_15 $$ long finalizedLength = -1[ CD ]
Line_15 $$ long finalizedLength = -1-->Line_24 $$ finalizedLength = r.rInfo.getNumBytes()[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_28 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)[ CD ]
Line_44 $$ if (rState == bestState) -->Line_45 $$ minLength = Math.min(minLength, r.rInfo.getNumBytes())[ CD ]
Line_4 $$ final String bpid = block.getBlockPoolId()-->Line_59 $$ r.updateReplicaUnderRecovery(bpid, recoveryId, newBlock.getNumBytes())[ FD ]
Line_3 $$ ExtendedBlock block = rBlock.getBlock()-->Line_80 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ FD ]
Line_5 $$ DatanodeProtocolClientSideTranslatorPB nn = getActiveNamenodeForBP(block.getBlockPoolId())-->Line_11 $$ nn.commitBlockSynchronization(block, recoveryId, 0, true, true, DatanodeID.EMPTY_ARRAY, null)[ FD ]
Line_27 $$ List<BlockRecord> participatingList = new ArrayList<BlockRecord>()-->Line_46 $$ participatingList.add(r)[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_14 $$ ReplicaState bestState = ReplicaState.RWR[ CD ]
Line_67 $$ StringBuilder b = new StringBuilder()-->Line_69 $$ b.append("\n  " + id)[ FD ]
Line_19 $$ if (rState.getValue() < bestState.getValue())-->Line_20 $$ bestState = rState[ CD ]
Line_6 $$ long recoveryId = rBlock.getNewGenerationStamp()-->Line_11 $$ nn.commitBlockSynchronization(block, recoveryId, 0, true, true, DatanodeID.EMPTY_ARRAY, null)[ FD ]
Line_55 $$ List<DatanodeID> failedList = new ArrayList<DatanodeID>()-->Line_71 $$ throw new IOException("Cannot recover " + block + ", the following " + failedList.size() + " data-nodes failed [ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_10 $$ if (syncList.isEmpty()) [ CD ]
Line_18 $$ ReplicaState rState = r.rInfo.getOriginalReplicaState()-->Line_21 $$ if (rState == ReplicaState.FINALIZED) [ FD ]
Line_21 $$ if (rState == ReplicaState.FINALIZED) -->Line_24 $$ finalizedLength = r.rInfo.getNumBytes()[ CD ]
Line_55 $$ List<DatanodeID> failedList = new ArrayList<DatanodeID>()-->Line_66 $$ if (!failedList.isEmpty()) [ FD ]
Line_27 $$ List<BlockRecord> participatingList = new ArrayList<BlockRecord>()-->Line_35 $$ participatingList.add(r)[ FD ]
Line_41 $$ long minLength = Long.MAX_VALUE-->Line_45 $$ minLength = Math.min(minLength, r.rInfo.getNumBytes())[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_6 $$ long recoveryId = rBlock.getNewGenerationStamp()[ CD ]
Line_21 $$ if (rState == ReplicaState.FINALIZED) -->Line_22 $$ if (finalizedLength > 0 && finalizedLength != r.rInfo.getNumBytes())[ CD ]
Line_18 $$ ReplicaState rState = r.rInfo.getOriginalReplicaState()-->Line_44 $$ if (rState == bestState) [ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_6 $$ long recoveryId = rBlock.getNewGenerationStamp()[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_27 $$ List<BlockRecord> participatingList = new ArrayList<BlockRecord>()[ CD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_3 $$ ExtendedBlock block = rBlock.getBlock()[ FD ]
Line_66 $$ if (!failedList.isEmpty()) -->Line_67 $$ StringBuilder b = new StringBuilder()[ CD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_75 $$ for (int i = 0; i < datanodes.length; i++) [ CD ]
Line_45 $$ minLength = Math.min(minLength, r.rInfo.getNumBytes())-->Line_49 $$ newBlock.setNumBytes(minLength)[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_73 $$ final DatanodeID[] datanodes = new DatanodeID[successList.size()][ CD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_4 $$ final String bpid = block.getBlockPoolId()[ CD ]
Line_28 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)-->Line_37 $$ newBlock.setNumBytes(finalizedLength)[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_80 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ CD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_5 $$ DatanodeProtocolClientSideTranslatorPB nn = getActiveNamenodeForBP(block.getBlockPoolId())[ CD ]
Line_15 $$ long finalizedLength = -1-->Line_37 $$ newBlock.setNumBytes(finalizedLength)[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_66 $$ if (!failedList.isEmpty()) [ CD ]
Line_24 $$ finalizedLength = r.rInfo.getNumBytes()-->Line_37 $$ newBlock.setNumBytes(finalizedLength)[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_56 $$ final List<BlockRecord> successList = new ArrayList<BlockRecord>()[ CD ]
Line_41 $$ long minLength = Long.MAX_VALUE-->Line_49 $$ newBlock.setNumBytes(minLength)[ FD ]
Line_56 $$ final List<BlockRecord> successList = new ArrayList<BlockRecord>()-->Line_76 $$ final BlockRecord r = successList.get(i)[ FD ]
Line_16 $$ for (BlockRecord r : syncList) -->Line_60 $$ successList.add(r)[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_74 $$ final String[] storages = new String[datanodes.length][ CD ]
Line_34 $$ if (rState == ReplicaState.FINALIZED || rState == ReplicaState.RBW && r.rInfo.getNumBytes() == finalizedLength)-->Line_35 $$ participatingList.add(r)[ CD ]
Line_28 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)-->Line_49 $$ newBlock.setNumBytes(minLength)[ FD ]
Line_3 $$ ExtendedBlock block = rBlock.getBlock()-->Line_8 $$ LOG.debug("block=" + block + ", (length=" + block.getNumBytes() + "), syncList=" + syncList)[ FD ]
Line_3 $$ ExtendedBlock block = rBlock.getBlock()-->Line_28 $$ final ExtendedBlock newBlock = new ExtendedBlock(bpid, block.getBlockId(), -1, recoveryId)[ FD ]
Line_7 $$ if (LOG.isDebugEnabled()) -->Line_8 $$ LOG.debug("block=" + block + ", (length=" + block.getNumBytes() + "), syncList=" + syncList)[ CD ]
Line_14 $$ ReplicaState bestState = ReplicaState.RWR-->Line_19 $$ if (rState.getValue() < bestState.getValue())[ FD ]
Line_73 $$ final DatanodeID[] datanodes = new DatanodeID[successList.size()]-->Line_80 $$ nn.commitBlockSynchronization(block, newBlock.getGenerationStamp(), newBlock.getNumBytes(), true, false, datanodes, storages)[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_10 $$ if (syncList.isEmpty()) [ FD ]
Line_16 $$ for (BlockRecord r : syncList) -->Line_35 $$ participatingList.add(r)[ FD ]
Line_14 $$ ReplicaState bestState = ReplicaState.RWR-->Line_20 $$ bestState = rState[ FD ]
Line_44 $$ if (rState == bestState) -->Line_46 $$ participatingList.add(r)[ CD ]
Line_10 $$ if (syncList.isEmpty()) -->Line_12 $$ return[ CD ]
Line_3 $$ ExtendedBlock block = rBlock.getBlock()-->Line_11 $$ nn.commitBlockSynchronization(block, recoveryId, 0, true, true, DatanodeID.EMPTY_ARRAY, null)[ FD ]
Line_3 $$ ExtendedBlock block = rBlock.getBlock()-->Line_5 $$ DatanodeProtocolClientSideTranslatorPB nn = getActiveNamenodeForBP(block.getBlockPoolId())[ FD ]
Line_75 $$ for (int i = 0; i < datanodes.length; i++) -->Line_76 $$ final BlockRecord r = successList.get(i)[ CD ]
Line_18 $$ ReplicaState rState = r.rInfo.getOriginalReplicaState()-->Line_20 $$ bestState = rState[ FD ]
Line_2 $$ void syncBlock(RecoveringBlock rBlock, List<BlockRecord> syncList) throws IOException -->Line_7 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_55 $$ List<DatanodeID> failedList = new ArrayList<DatanodeID>()-->Line_63 $$ failedList.add(r.id)[ FD ]
Line_18 $$ ReplicaState rState = r.rInfo.getOriginalReplicaState()-->Line_19 $$ if (rState.getValue() < bestState.getValue())[ FD ]
