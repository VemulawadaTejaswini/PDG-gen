Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_11 $$ return Student.class.getConstructor(long.class, PersonName.class)[ CD ]
Line_14 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_17 $$ return s.createQuery("select new Student(555L, s.name) from Student s order by s.studentNumber")[ FD ]
Line_20 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertEquals(yogiExpected.getName(), yogi.getName())[ CD ]
Line_14 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_17 $$ return s.createQuery("select new Student(555L, s.name) from Student s order by s.studentNumber")[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_33 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_20 $$ ResultChecker checker = new ResultChecker() -->Line_29 $$ assertEquals(555L, sherman.getStudentNumber())[ CD ]
Line_20 $$ ResultChecker checker = new ResultChecker() -->Line_30 $$ assertEquals(shermanExpected.getName(), sherman.getName())[ CD ]
Line_25 $$ Student yogi = (Student) resultList.get(0)-->Line_27 $$ assertEquals(yogiExpected.getName(), yogi.getName())[ FD ]
Line_28 $$ Student sherman = (Student) resultList.get(1)-->Line_30 $$ assertEquals(shermanExpected.getName(), sherman.getName())[ FD ]
Line_20 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(2, resultList.size())[ CD ]
Line_20 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ List resultList = (List) results[ CD ]
Line_25 $$ Student yogi = (Student) resultList.get(0)-->Line_26 $$ assertEquals(555L, yogi.getStudentNumber())[ FD ]
Line_28 $$ Student sherman = (Student) resultList.get(1)-->Line_29 $$ assertEquals(555L, sherman.getStudentNumber())[ FD ]
Line_20 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ Student yogi = (Student) resultList.get(0)[ CD ]
Line_20 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertEquals(555L, yogi.getStudentNumber())[ CD ]
Line_23 $$ List resultList = (List) results-->Line_28 $$ Student sherman = (Student) resultList.get(1)[ FD ]
Line_20 $$ ResultChecker checker = new ResultChecker() -->Line_28 $$ Student sherman = (Student) resultList.get(1)[ CD ]
Line_23 $$ List resultList = (List) results-->Line_24 $$ assertEquals(2, resultList.size())[ FD ]
Line_23 $$ List resultList = (List) results-->Line_25 $$ Student yogi = (Student) resultList.get(0)[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_17 $$ return s.createQuery("select new Student(555L, s.name) from Student s order by s.studentNumber")[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Student.class, "s").setProjection(Projections.projectionList().add(Projections.sqlProjection("555 as studentNumber", new String[] [ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Student.class, "s").setProjection(Projections.projectionList().add(Projections.sqlProjection("555 as studentNumber", new String[] [ FD ]
