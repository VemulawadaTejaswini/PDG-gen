Line_19 $$ long newBlockId = firstBlock.getBlockId() + 1-->Line_32 $$ writeBlock(poolId, newBlockId, badChecksum)[ FD ]
Line_5 $$ Path file = new Path("dataprotocol.dat")-->Line_17 $$ final ExtendedBlock firstBlock = DFSTestUtil.getFirstBlock(fileSys, file)[ FD ]
Line_39 $$ PacketHeader hdr = new PacketHeader(4, 0, 100, false, -1 - random.nextInt(oneMil), false)-->Line_58 $$ hdr.write(sendOut)[ FD ]
Line_66 $$ long blkid = blk.getBlockId()-->Line_73 $$ blk.setBlockId(blkid)[ FD ]
Line_15 $$ int fileLen = Math.min(conf.getInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, 4096), 4096)-->Line_90 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", 0L, fileLen, true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_19 $$ long newBlockId = firstBlock.getBlockId() + 1-->Line_51 $$ writeBlock(poolId, ++newBlockId, DEFAULT_CHECKSUM)[ FD ]
Line_17 $$ final ExtendedBlock firstBlock = DFSTestUtil.getFirstBlock(fileSys, file)-->Line_19 $$ long newBlockId = firstBlock.getBlockId() + 1[ FD ]
Line_4 $$ int oneMil = 1024 * 1024-->Line_39 $$ PacketHeader hdr = new PacketHeader(4, 0, 100, false, -1 - random.nextInt(oneMil), false)[ FD ]
Line_52 $$ hdr = new PacketHeader(8, 0, 100, true, 0, false)-->Line_58 $$ hdr.write(sendOut)[ FD ]
Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())-->Line_69 $$ blk.setBlockId(blkid - 1)[ FD ]
Line_2 $$ public void testDataTransferProtocol() throws IOException -->Line_7 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_14 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_16 $$ DFSTestUtil.createFile(fileSys, file, fileLen, fileLen, fileSys.getDefaultBlockSize(file), fileSys.getDefaultReplication(file), 0L)[ FD ]
Line_15 $$ int fileLen = Math.min(conf.getInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, 4096), 4096)-->Line_77 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", fileLen, fileLen, true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_30 $$ DataChecksum badChecksum = Mockito.spy(DEFAULT_CHECKSUM)-->Line_31 $$ Mockito.doReturn(-1).when(badChecksum).getBytesPerChecksum()[ FD ]
Line_5 $$ Path file = new Path("dataprotocol.dat")-->Line_16 $$ DFSTestUtil.createFile(fileSys, file, fileLen, fileLen, fileSys.getDefaultBlockSize(file), fileSys.getDefaultReplication(file), 0L)[ FD ]
Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())-->Line_82 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", 0L, -1L - random.nextInt(oneMil), true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_6 $$ int numDataNodes = 1-->Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()[ FD ]
Line_39 $$ PacketHeader hdr = new PacketHeader(4, 0, 100, false, -1 - random.nextInt(oneMil), false)-->Line_52 $$ hdr = new PacketHeader(8, 0, 100, true, 0, false)[ FD ]
Line_17 $$ final ExtendedBlock firstBlock = DFSTestUtil.getFirstBlock(fileSys, file)-->Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())[ FD ]
Line_17 $$ final ExtendedBlock firstBlock = DFSTestUtil.getFirstBlock(fileSys, file)-->Line_78 $$ sendRecvData("Wrong start-offset for reading block " + firstBlock.getBlockId(), false)[ FD ]
Line_2 $$ public void testDataTransferProtocol() throws IOException -->Line_5 $$ Path file = new Path("dataprotocol.dat")[ CD ]
Line_17 $$ final ExtendedBlock firstBlock = DFSTestUtil.getFirstBlock(fileSys, file)-->Line_88 $$ sendRecvData("Wrong length for reading block " + firstBlock.getBlockId(), false)[ FD ]
Line_18 $$ final String poolId = firstBlock.getBlockPoolId()-->Line_51 $$ writeBlock(poolId, ++newBlockId, DEFAULT_CHECKSUM)[ FD ]
Line_17 $$ final ExtendedBlock firstBlock = DFSTestUtil.getFirstBlock(fileSys, file)-->Line_18 $$ final String poolId = firstBlock.getBlockPoolId()[ FD ]
Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())-->Line_70 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", 0L, fileLen, true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())-->Line_90 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", 0L, fileLen, true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_18 $$ final String poolId = firstBlock.getBlockPoolId()-->Line_32 $$ writeBlock(poolId, newBlockId, badChecksum)[ FD ]
Line_5 $$ Path file = new Path("dataprotocol.dat")-->Line_91 $$ readFile(fileSys, file, fileLen)[ FD ]
Line_2 $$ public void testDataTransferProtocol() throws IOException -->Line_3 $$ Random random = new Random()[ CD ]
Line_7 $$ Configuration conf = new HdfsConfiguration()-->Line_15 $$ int fileLen = Math.min(conf.getInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, 4096), 4096)[ FD ]
Line_15 $$ int fileLen = Math.min(conf.getInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, 4096), 4096)-->Line_91 $$ readFile(fileSys, file, fileLen)[ FD ]
Line_3 $$ Random random = new Random()-->Line_39 $$ PacketHeader hdr = new PacketHeader(4, 0, 100, false, -1 - random.nextInt(oneMil), false)[ FD ]
Line_2 $$ public void testDataTransferProtocol() throws IOException -->Line_4 $$ int oneMil = 1024 * 1024[ CD ]
Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())-->Line_73 $$ blk.setBlockId(blkid)[ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_11 $$ cluster.waitActive()[ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_12 $$ datanode = cluster.getFileSystem().getDataNodeStats(DatanodeReportType.LIVE)[0][ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_64 $$ String bpid = cluster.getNamesystem().getBlockPoolId()[ FD ]
Line_14 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_17 $$ final ExtendedBlock firstBlock = DFSTestUtil.getFirstBlock(fileSys, file)[ FD ]
Line_30 $$ DataChecksum badChecksum = Mockito.spy(DEFAULT_CHECKSUM)-->Line_32 $$ writeBlock(poolId, newBlockId, badChecksum)[ FD ]
Line_2 $$ public void testDataTransferProtocol() throws IOException -->Line_6 $$ int numDataNodes = 1[ CD ]
Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())-->Line_74 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", -1L, fileLen, true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_4 $$ int oneMil = 1024 * 1024-->Line_82 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", 0L, -1L - random.nextInt(oneMil), true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())-->Line_87 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", 0L, fileLen + 1, true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_14 $$ FileSystem fileSys = cluster.getFileSystem()-->Line_91 $$ readFile(fileSys, file, fileLen)[ FD ]
Line_2 $$ public void testDataTransferProtocol() throws IOException -->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY, numDataNodes)[ CD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_93 $$ cluster.shutdown()[ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_14 $$ FileSystem fileSys = cluster.getFileSystem()[ FD ]
Line_17 $$ final ExtendedBlock firstBlock = DFSTestUtil.getFirstBlock(fileSys, file)-->Line_75 $$ sendRecvData("Negative start-offset for read for block " + firstBlock.getBlockId(), false)[ FD ]
Line_15 $$ int fileLen = Math.min(conf.getInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, 4096), 4096)-->Line_16 $$ DFSTestUtil.createFile(fileSys, file, fileLen, fileLen, fileSys.getDefaultBlockSize(file), fileSys.getDefaultReplication(file), 0L)[ FD ]
Line_19 $$ long newBlockId = firstBlock.getBlockId() + 1-->Line_38 $$ writeBlock(poolId, ++newBlockId, DEFAULT_CHECKSUM)[ FD ]
Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())-->Line_66 $$ long blkid = blk.getBlockId()[ FD ]
Line_3 $$ Random random = new Random()-->Line_82 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", 0L, -1L - random.nextInt(oneMil), true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_17 $$ final ExtendedBlock firstBlock = DFSTestUtil.getFirstBlock(fileSys, file)-->Line_83 $$ sendRecvData("Negative length for reading block " + firstBlock.getBlockId(), false)[ FD ]
Line_65 $$ ExtendedBlock blk = new ExtendedBlock(bpid, firstBlock.getLocalBlock())-->Line_77 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", fileLen, fileLen, true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_15 $$ int fileLen = Math.min(conf.getInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, 4096), 4096)-->Line_70 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", 0L, fileLen, true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_15 $$ int fileLen = Math.min(conf.getInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, 4096), 4096)-->Line_74 $$ sender.readBlock(blk, BlockTokenSecretManager.DUMMY_TOKEN, "cl", -1L, fileLen, true, CachingStrategy.newDefaultStrategy())[ FD ]
Line_7 $$ Configuration conf = new HdfsConfiguration()-->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY, numDataNodes)[ FD ]
Line_2 $$ public void testDataTransferProtocol() throws IOException -->Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()[ CD ]
Line_6 $$ int numDataNodes = 1-->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY, numDataNodes)[ FD ]
Line_18 $$ final String poolId = firstBlock.getBlockPoolId()-->Line_38 $$ writeBlock(poolId, ++newBlockId, DEFAULT_CHECKSUM)[ FD ]
Line_39 $$ PacketHeader hdr = new PacketHeader(4, 0, 100, false, -1 - random.nextInt(oneMil), false)-->Line_45 $$ hdr.write(sendOut)[ FD ]
