Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_3 $$ out.writeLong(current.getId())[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_3 $$ out.writeLong(current.getId())[ CD ]
Line_8 $$ int dirNum = 0-->Line_14 $$ dirNum += snapshotDirs.size()[ FD ]
Line_14 $$ dirNum += snapshotDirs.size()-->Line_21 $$ dirNum += saveChildren(children, out, inSnapshot, counter)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_22 $$ SnapshotFSImageFormat.saveDirectoryDiffList(current, out, referenceMap)[ FD ]
Line_14 $$ dirNum += snapshotDirs.size()-->Line_23 $$ out.writeInt(dirNum)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_29 $$ saveImage(child.asDirectory(), out, toSave, inSnapshot, counter)[ FD ]
Line_16 $$ if (current.isDirectory() && current.asDirectory().isSnapshottable()) -->Line_17 $$ SnapshotFSImageFormat.saveSnapshots(current.asDirectory(), out)[ CD ]
Line_28 $$ boolean toSave = child.isReference() ? referenceMap.toProcessSubtree(child.getId()) : true-->Line_29 $$ saveImage(child.asDirectory(), out, toSave, inSnapshot, counter)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_19 $$ out.writeInt(-1)[ FD ]
Line_32 $$ for (INodeDirectory subDir : snapshotDirs) -->Line_33 $$ boolean toSave = subDir.getParentReference() != null ? referenceMap.toProcessSubtree(subDir.getId()) : true[ FD ]
Line_32 $$ for (INodeDirectory subDir : snapshotDirs) -->Line_34 $$ saveImage(subDir, out, toSave, true, counter)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_8 $$ int dirNum = 0[ CD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_23 $$ out.writeInt(dirNum)[ FD ]
Line_24 $$ for (INode child : children) -->Line_25 $$ if (!child.isDirectory()) [ FD ]
Line_9 $$ List<INodeDirectory> snapshotDirs = null-->Line_31 $$ if (snapshotDirs != null) [ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_10 $$ DirectoryWithSnapshotFeature sf = current.getDirectoryWithSnapshotFeature()[ FD ]
Line_12 $$ snapshotDirs = new ArrayList<INodeDirectory>()-->Line_13 $$ sf.getSnapshotDirectory(snapshotDirs)[ FD ]
Line_10 $$ DirectoryWithSnapshotFeature sf = current.getDirectoryWithSnapshotFeature()-->Line_13 $$ sf.getSnapshotDirectory(snapshotDirs)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_31 $$ if (snapshotDirs != null) [ CD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_9 $$ List<INodeDirectory> snapshotDirs = null[ CD ]
Line_16 $$ if (current.isDirectory() && current.asDirectory().isSnapshottable()) -->Line_19 $$ out.writeInt(-1)[ CD ]
Line_12 $$ snapshotDirs = new ArrayList<INodeDirectory>()-->Line_14 $$ dirNum += snapshotDirs.size()[ FD ]
Line_4 $$ if (!toSaveSubtree) -->Line_5 $$ return[ CD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_7 $$ final ReadOnlyList<INode> children = current.getChildrenList(Snapshot.CURRENT_STATE_ID)[ CD ]
Line_9 $$ List<INodeDirectory> snapshotDirs = null-->Line_13 $$ sf.getSnapshotDirectory(snapshotDirs)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_10 $$ DirectoryWithSnapshotFeature sf = current.getDirectoryWithSnapshotFeature()[ CD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_16 $$ if (current.isDirectory() && current.asDirectory().isSnapshottable()) [ FD ]
Line_7 $$ final ReadOnlyList<INode> children = current.getChildrenList(Snapshot.CURRENT_STATE_ID)-->Line_21 $$ dirNum += saveChildren(children, out, inSnapshot, counter)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_21 $$ dirNum += saveChildren(children, out, inSnapshot, counter)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_23 $$ out.writeInt(dirNum)[ CD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_7 $$ final ReadOnlyList<INode> children = current.getChildrenList(Snapshot.CURRENT_STATE_ID)[ FD ]
Line_21 $$ dirNum += saveChildren(children, out, inSnapshot, counter)-->Line_23 $$ out.writeInt(dirNum)[ FD ]
Line_24 $$ for (INode child : children) -->Line_29 $$ saveImage(child.asDirectory(), out, toSave, inSnapshot, counter)[ FD ]
Line_8 $$ int dirNum = 0-->Line_23 $$ out.writeInt(dirNum)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_34 $$ saveImage(subDir, out, toSave, true, counter)[ FD ]
Line_9 $$ List<INodeDirectory> snapshotDirs = null-->Line_12 $$ snapshotDirs = new ArrayList<INodeDirectory>()[ FD ]
Line_8 $$ int dirNum = 0-->Line_21 $$ dirNum += saveChildren(children, out, inSnapshot, counter)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_16 $$ if (current.isDirectory() && current.asDirectory().isSnapshottable()) [ CD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_22 $$ SnapshotFSImageFormat.saveDirectoryDiffList(current, out, referenceMap)[ CD ]
Line_24 $$ for (INode child : children) -->Line_28 $$ boolean toSave = child.isReference() ? referenceMap.toProcessSubtree(child.getId()) : true[ FD ]
Line_12 $$ snapshotDirs = new ArrayList<INodeDirectory>()-->Line_31 $$ if (snapshotDirs != null) [ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_21 $$ dirNum += saveChildren(children, out, inSnapshot, counter)[ CD ]
Line_11 $$ if (sf != null) -->Line_12 $$ snapshotDirs = new ArrayList<INodeDirectory>()[ CD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_4 $$ if (!toSaveSubtree) [ CD ]
Line_10 $$ DirectoryWithSnapshotFeature sf = current.getDirectoryWithSnapshotFeature()-->Line_11 $$ if (sf != null) [ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_17 $$ SnapshotFSImageFormat.saveSnapshots(current.asDirectory(), out)[ FD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_4 $$ if (!toSaveSubtree) [ FD ]
Line_9 $$ List<INodeDirectory> snapshotDirs = null-->Line_14 $$ dirNum += snapshotDirs.size()[ FD ]
Line_11 $$ if (sf != null) -->Line_14 $$ dirNum += snapshotDirs.size()[ CD ]
Line_2 $$ private void saveImage(INodeDirectory current, DataOutputStream out, boolean toSaveSubtree, boolean inSnapshot, Counter counter) throws IOException -->Line_11 $$ if (sf != null) [ CD ]
Line_28 $$ boolean toSave = child.isReference() ? referenceMap.toProcessSubtree(child.getId()) : true-->Line_34 $$ saveImage(subDir, out, toSave, true, counter)[ FD ]
Line_11 $$ if (sf != null) -->Line_13 $$ sf.getSnapshotDirectory(snapshotDirs)[ CD ]
