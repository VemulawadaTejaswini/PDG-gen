Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_19 $$ entryDos.writeShort((short) nameComponents.length)[ FD ]
Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_30 $$ entryDos.write(data)[ FD ]
Line_5 $$ DataOutputStream dos = null-->Line_7 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))[ FD ]
Line_11 $$ final byte keyVersion = (byte) key.getKeyVersion()-->Line_26 $$ entryDos.write(keyVersion)[ FD ]
Line_10 $$ final EncryptionKey key = keyEntry.getValue()-->Line_11 $$ final byte keyVersion = (byte) key.getKeyVersion()[ FD ]
Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_20 $$ entryDos.writeUTF(realm)[ FD ]
Line_7 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))-->Line_35 $$ dos.writeInt(entryBytes.length)[ FD ]
Line_7 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))-->Line_8 $$ dos.write(Keytab.VERSION_0X502_BYTES)[ FD ]
Line_5 $$ DataOutputStream dos = null-->Line_35 $$ dos.writeInt(entryBytes.length)[ FD ]
Line_12 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_34 $$ final byte[] entryBytes = baos.toByteArray()[ FD ]
Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_24 $$ entryDos.writeInt(1)[ FD ]
Line_21 $$ for (String component : nameComponents) -->Line_22 $$ entryDos.writeUTF(component)[ FD ]
Line_9 $$ for (Map.Entry<EncryptionType, EncryptionKey> keyEntry : KerberosKeyFactory.getKerberosKeys(principalName, passPhrase).entrySet()) -->Line_10 $$ final EncryptionKey key = keyEntry.getValue()[ FD ]
Line_10 $$ final EncryptionKey key = keyEntry.getValue()-->Line_27 $$ entryDos.writeShort((short) key.getKeyType().getValue())[ FD ]
Line_15 $$ String nameComponent = spnSplit[0]-->Line_17 $$ String[] nameComponents = nameComponent.split("/")[ FD ]
Line_34 $$ final byte[] entryBytes = baos.toByteArray()-->Line_36 $$ dos.write(entryBytes)[ FD ]
Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_32 $$ IOUtils.closeQuietly(entryDos)[ FD ]
Line_4 $$ final KerberosTime timeStamp = new KerberosTime()-->Line_25 $$ entryDos.writeInt((int) (timeStamp.getTime() / 1000))[ FD ]
Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_27 $$ entryDos.writeShort((short) key.getKeyType().getValue())[ FD ]
Line_7 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))-->Line_36 $$ dos.write(entryBytes)[ FD ]
Line_2 $$ protected void createKeytab(final String principalName, final String passPhrase, final File keytabFile) throws IOException -->Line_14 $$ String[] spnSplit = principalName.split("@")[ FD ]
Line_10 $$ final EncryptionKey key = keyEntry.getValue()-->Line_28 $$ byte[] data = key.getKeyValue()[ FD ]
Line_16 $$ String realm = spnSplit[1]-->Line_20 $$ entryDos.writeUTF(realm)[ FD ]
Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_25 $$ entryDos.writeInt((int) (timeStamp.getTime() / 1000))[ FD ]
Line_7 $$ dos = new DataOutputStream(new FileOutputStream(keytabFile))-->Line_39 $$ IOUtils.closeQuietly(dos)[ FD ]
Line_2 $$ protected void createKeytab(final String principalName, final String passPhrase, final File keytabFile) throws IOException -->Line_5 $$ DataOutputStream dos = null[ CD ]
Line_5 $$ DataOutputStream dos = null-->Line_39 $$ IOUtils.closeQuietly(dos)[ FD ]
Line_2 $$ protected void createKeytab(final String principalName, final String passPhrase, final File keytabFile) throws IOException -->Line_3 $$ LOGGER.info("Principal name: " + principalName)[ CD ]
Line_2 $$ protected void createKeytab(final String principalName, final String passPhrase, final File keytabFile) throws IOException -->Line_4 $$ final KerberosTime timeStamp = new KerberosTime()[ CD ]
Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_26 $$ entryDos.write(keyVersion)[ FD ]
Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_29 $$ entryDos.writeShort((short) data.length)[ FD ]
Line_5 $$ DataOutputStream dos = null-->Line_36 $$ dos.write(entryBytes)[ FD ]
Line_2 $$ protected void createKeytab(final String principalName, final String passPhrase, final File keytabFile) throws IOException -->Line_9 $$ for (Map.Entry<EncryptionType, EncryptionKey> keyEntry : KerberosKeyFactory.getKerberosKeys(principalName, passPhrase).entrySet()) [ FD ]
Line_5 $$ DataOutputStream dos = null-->Line_8 $$ dos.write(Keytab.VERSION_0X502_BYTES)[ FD ]
Line_28 $$ byte[] data = key.getKeyValue()-->Line_30 $$ entryDos.write(data)[ FD ]
Line_13 $$ DataOutputStream entryDos = new DataOutputStream(baos)-->Line_22 $$ entryDos.writeUTF(component)[ FD ]
