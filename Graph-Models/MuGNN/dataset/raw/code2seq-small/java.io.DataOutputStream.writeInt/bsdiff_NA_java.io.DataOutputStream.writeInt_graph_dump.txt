Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_101 $$ diffOut.writeInt((scan - lenb) - (lastscan + lenf))[ CD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_102 $$ diffOut.writeInt((pos.value - lenb) - (lastpos + lenf))[ CD ]
Line_114 $$ gzOut = new GZIPOutputStream(diffOut)-->Line_116 $$ gzOut.finish()[ FD ]
Line_20 $$ int i-->Line_52 $$ i++[ FD ]
Line_110 $$ gzOut = new GZIPOutputStream(diffOut)-->Line_112 $$ gzOut.finish()[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_10 $$ byte[] newBuf = Utils.readBytes(newFileIn)[ CD ]
Line_62 $$ for (i = 1; (scan >= lastscan + i) && (pos.value >= i); i++) -->Line_66 $$ if (s * 2 - i > Sb * 2 - lenb) [ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_26 $$ IntByRef pos = new IntByRef()[ CD ]
Line_109 $$ GZIPOutputStream gzOut-->Line_112 $$ gzOut.finish()[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_112 $$ gzOut.finish()[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_111 $$ gzOut.write(db, 0, dblen)[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_14 $$ int eblen = 0[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_17 $$ DataOutputStream diffOut = new DataOutputStream(arrayOut)[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_10 $$ byte[] newBuf = Utils.readBytes(newFileIn)[ FD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_103 $$ ctrlBlockLen += 12[ CD ]
Line_40 $$ if ((scan + lastoffset < oldsize) && (oldBuf[scan + lastoffset] == newBuf[scan])) -->Line_41 $$ oldscore--[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_11 $$ int newsize = newBuf.length[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_21 $$ int scan = 0[ CD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_106 $$ lastoffset = pos.value - scan[ CD ]
Line_109 $$ GZIPOutputStream gzOut-->Line_110 $$ gzOut = new GZIPOutputStream(diffOut)[ FD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_72 $$ if (lastscan + lenf > scan - lenb) [ CD ]
Line_17 $$ DataOutputStream diffOut = new DataOutputStream(arrayOut)-->Line_101 $$ diffOut.writeInt((scan - lenb) - (lastscan + lenf))[ FD ]
Line_28 $$ while (scan < newsize) -->Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) [ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_116 $$ gzOut.finish()[ CD ]
Line_109 $$ GZIPOutputStream gzOut-->Line_116 $$ gzOut.finish()[ FD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_104 $$ lastscan = scan - lenb[ CD ]
Line_5 $$ int[] I = new int[oldsize + 1]-->Line_7 $$ qsufsort(I, V, oldBuf)[ FD ]
Line_21 $$ int scan = 0-->Line_104 $$ lastscan = scan - lenb[ FD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_105 $$ lastpos = pos.value - lenb[ CD ]
Line_14 $$ int eblen = 0-->Line_99 $$ eblen += (scan - lenb) - (lastscan + lenf)[ FD ]
Line_118 $$ DataOutputStream headerStream = new DataOutputStream(diffFileOut)-->Line_123 $$ headerStream.flush()[ FD ]
Line_3 $$ byte[] oldBuf = Utils.readBytes(oldFileIn)-->Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)[ FD ]
Line_22 $$ int len = 0-->Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)[ FD ]
Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) -->Line_37 $$ if (((len == oldscore) && (len != 0)) || (len > oldscore + 8)) [ CD ]
Line_20 $$ int i-->Line_86 $$ lens = i + 1[ FD ]
Line_75 $$ Ss = 0-->Line_85 $$ Ss = s[ FD ]
Line_29 $$ oldscore = 0-->Line_34 $$ oldscore++[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_3 $$ byte[] oldBuf = Utils.readBytes(oldFileIn)[ CD ]
Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)-->Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) [ FD ]
Line_77 $$ for (i = 0; i < overlap; i++) -->Line_92 $$ for (i = 0; i < lenf; i++) [ FD ]
Line_26 $$ IntByRef pos = new IntByRef()-->Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_3 $$ byte[] oldBuf = Utils.readBytes(oldFileIn)[ FD ]
Line_4 $$ int oldsize = oldBuf.length-->Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)[ FD ]
Line_29 $$ oldscore = 0-->Line_41 $$ oldscore--[ FD ]
Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) -->Line_92 $$ for (i = 0; i < lenf; i++) [ FD ]
Line_27 $$ int ctrlBlockLen = 0-->Line_103 $$ ctrlBlockLen += 12[ FD ]
Line_15 $$ byte[] eb = new byte[newsize]-->Line_115 $$ gzOut.write(eb, 0, eblen)[ FD ]
Line_5 $$ int[] I = new int[oldsize + 1]-->Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)[ FD ]
Line_62 $$ for (i = 1; (scan >= lastscan + i) && (pos.value >= i); i++) -->Line_86 $$ lens = i + 1[ FD ]
Line_3 $$ byte[] oldBuf = Utils.readBytes(oldFileIn)-->Line_7 $$ qsufsort(I, V, oldBuf)[ FD ]
Line_12 $$ int dblen = 0-->Line_98 $$ dblen += lenf[ FD ]
Line_16 $$ ByteArrayOutputStream arrayOut = new ByteArrayOutputStream()-->Line_124 $$ Utils.copyBytesToStream(arrayOut, diffFileOut)[ FD ]
Line_19 $$ int overlap, Ss, lens-->Line_76 $$ lens = 0[ FD ]
Line_20 $$ int i-->Line_77 $$ for (i = 0; i < overlap; i++) [ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_27 $$ int ctrlBlockLen = 0[ CD ]
Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) -->Line_59 $$ if (scan < newsize) [ FD ]
Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) -->Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)[ FD ]
Line_20 $$ int i-->Line_62 $$ for (i = 1; (scan >= lastscan + i) && (pos.value >= i); i++) [ FD ]
Line_85 $$ Ss = s-->Line_84 $$ if (s > Ss) [ FD ]
Line_27 $$ int ctrlBlockLen = 0-->Line_120 $$ headerStream.writeLong(ctrlBlockLen)[ FD ]
Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) -->Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)[ CD ]
Line_110 $$ gzOut = new GZIPOutputStream(diffOut)-->Line_116 $$ gzOut.finish()[ FD ]
Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) -->Line_52 $$ i++[ CD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) [ CD ]
Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) -->Line_95 $$ for (i = 0; i < (scan - lenb) - (lastscan + lenf); i++) [ FD ]
Line_18 $$ int oldscore, scsc-->Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) [ FD ]
Line_19 $$ int overlap, Ss, lens-->Line_75 $$ Ss = 0[ FD ]
Line_21 $$ int scan = 0-->Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) [ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_9 $$ System.gc()[ CD ]
Line_98 $$ dblen += lenf-->Line_111 $$ gzOut.write(db, 0, dblen)[ FD ]
Line_84 $$ if (s > Ss) -->Line_85 $$ Ss = s[ CD ]
Line_19 $$ int overlap, Ss, lens-->Line_85 $$ Ss = s[ FD ]
Line_17 $$ DataOutputStream diffOut = new DataOutputStream(arrayOut)-->Line_100 $$ diffOut.writeInt(lenf)[ FD ]
Line_14 $$ int eblen = 0-->Line_115 $$ gzOut.write(eb, 0, eblen)[ FD ]
Line_11 $$ int newsize = newBuf.length-->Line_28 $$ while (scan < newsize) [ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_115 $$ gzOut.write(eb, 0, eblen)[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_12 $$ int dblen = 0[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_118 $$ DataOutputStream headerStream = new DataOutputStream(diffFileOut)[ CD ]
Line_62 $$ for (i = 1; (scan >= lastscan + i) && (pos.value >= i); i++) -->Line_92 $$ for (i = 0; i < lenf; i++) [ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_19 $$ int overlap, Ss, lens[ CD ]
Line_77 $$ for (i = 0; i < overlap; i++) -->Line_81 $$ if (newBuf[scan - lenb + i] == oldBuf[pos.value - lenb + i]) [ CD ]
Line_73 $$ overlap = (lastscan + lenf) - (scan - lenb)-->Line_77 $$ for (i = 0; i < overlap; i++) [ FD ]
Line_18 $$ int oldscore, scsc-->Line_32 $$ for (; scsc < scan + len; scsc++) [ FD ]
Line_77 $$ for (i = 0; i < overlap; i++) -->Line_86 $$ lens = i + 1[ FD ]
Line_11 $$ int newsize = newBuf.length-->Line_122 $$ headerStream.writeLong(newsize)[ FD ]
Line_77 $$ for (i = 0; i < overlap; i++) -->Line_78 $$ if (newBuf[lastscan + lenf - overlap + i] == oldBuf[lastpos + lenf - overlap + i]) [ CD ]
Line_109 $$ GZIPOutputStream gzOut-->Line_114 $$ gzOut = new GZIPOutputStream(diffOut)[ FD ]
Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) -->Line_49 $$ if (oldBuf[lastpos + i] == newBuf[lastscan + i]) [ CD ]
Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) -->Line_106 $$ lastoffset = pos.value - scan[ FD ]
Line_21 $$ int scan = 0-->Line_106 $$ lastoffset = pos.value - scan[ FD ]
Line_84 $$ if (s > Ss) -->Line_86 $$ lens = i + 1[ CD ]
Line_18 $$ int oldscore, scsc-->Line_34 $$ oldscore++[ FD ]
Line_76 $$ lens = 0-->Line_86 $$ lens = i + 1[ FD ]
Line_11 $$ int newsize = newBuf.length-->Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) [ FD ]
Line_20 $$ int i-->Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) [ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_18 $$ int oldscore, scsc[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_124 $$ Utils.copyBytesToStream(arrayOut, diffFileOut)[ FD ]
Line_28 $$ while (scan < newsize) -->Line_44 $$ if ((len != oldscore) || (scan == newsize)) [ CD ]
Line_25 $$ int lastoffset = 0-->Line_106 $$ lastoffset = pos.value - scan[ FD ]
Line_77 $$ for (i = 0; i < overlap; i++) -->Line_95 $$ for (i = 0; i < (scan - lenb) - (lastscan + lenf); i++) [ FD ]
Line_62 $$ for (i = 1; (scan >= lastscan + i) && (pos.value >= i); i++) -->Line_77 $$ for (i = 0; i < overlap; i++) [ FD ]
Line_17 $$ DataOutputStream diffOut = new DataOutputStream(arrayOut)-->Line_113 $$ int diffBlockLen = diffOut.size() - ctrlBlockLen[ FD ]
Line_32 $$ for (; scsc < scan + len; scsc++) -->Line_33 $$ if ((scsc + lastoffset < oldsize) && (oldBuf[scsc + lastoffset] == newBuf[scsc])) [ CD ]
Line_18 $$ int oldscore, scsc-->Line_41 $$ oldscore--[ FD ]
Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) -->Line_62 $$ for (i = 1; (scan >= lastscan + i) && (pos.value >= i); i++) [ FD ]
Line_110 $$ gzOut = new GZIPOutputStream(diffOut)-->Line_114 $$ gzOut = new GZIPOutputStream(diffOut)[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_24 $$ int lastpos = 0[ CD ]
Line_20 $$ int i-->Line_95 $$ for (i = 0; i < (scan - lenb) - (lastscan + lenf); i++) [ FD ]
Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) -->Line_32 $$ for (; scsc < scan + len; scsc++) [ CD ]
Line_103 $$ ctrlBlockLen += 12-->Line_120 $$ headerStream.writeLong(ctrlBlockLen)[ FD ]
Line_59 $$ if (scan < newsize) -->Line_62 $$ for (i = 1; (scan >= lastscan + i) && (pos.value >= i); i++) [ CD ]
Line_6 $$ int[] V = new int[oldsize + 1]-->Line_8 $$ V = null[ FD ]
Line_21 $$ int scan = 0-->Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_119 $$ headerStream.write("jbdiff40".getBytes("US-ASCII"))[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_125 $$ return newBuf[ CD ]
Line_75 $$ Ss = 0-->Line_84 $$ if (s > Ss) [ FD ]
Line_72 $$ if (lastscan + lenf > scan - lenb) -->Line_73 $$ overlap = (lastscan + lenf) - (scan - lenb)[ CD ]
Line_95 $$ for (i = 0; i < (scan - lenb) - (lastscan + lenf); i++) -->Line_96 $$ eb[eblen + i] = newBuf[lastscan + lenf + i][ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_5 $$ int[] I = new int[oldsize + 1][ CD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_59 $$ if (scan < newsize) [ CD ]
Line_20 $$ int i-->Line_92 $$ for (i = 0; i < lenf; i++) [ FD ]
Line_113 $$ int diffBlockLen = diffOut.size() - ctrlBlockLen-->Line_121 $$ headerStream.writeLong(diffBlockLen)[ FD ]
Line_12 $$ int dblen = 0-->Line_111 $$ gzOut.write(db, 0, dblen)[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_16 $$ ByteArrayOutputStream arrayOut = new ByteArrayOutputStream()[ CD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_92 $$ for (i = 0; i < lenf; i++) [ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_23 $$ int lastscan = 0[ CD ]
Line_92 $$ for (i = 0; i < lenf; i++) -->Line_93 $$ db[dblen + i] = (byte) (newBuf[lastscan + i] - oldBuf[lastpos + i])[ CD ]
Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) -->Line_32 $$ for (; scsc < scan + len; scsc++) [ FD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_99 $$ eblen += (scan - lenb) - (lastscan + lenf)[ CD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_100 $$ diffOut.writeInt(lenf)[ CD ]
Line_109 $$ GZIPOutputStream gzOut-->Line_115 $$ gzOut.write(eb, 0, eblen)[ FD ]
Line_110 $$ gzOut = new GZIPOutputStream(diffOut)-->Line_111 $$ gzOut.write(db, 0, dblen)[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_122 $$ headerStream.writeLong(newsize)[ CD ]
Line_21 $$ int scan = 0-->Line_28 $$ while (scan < newsize) [ FD ]
Line_10 $$ byte[] newBuf = Utils.readBytes(newFileIn)-->Line_31 $$ len = search(I, oldBuf, newBuf, scan, 0, oldsize, pos)[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_7 $$ qsufsort(I, V, oldBuf)[ CD ]
Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) -->Line_104 $$ lastscan = scan - lenb[ FD ]
Line_28 $$ while (scan < newsize) -->Line_29 $$ oldscore = 0[ CD ]
Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) -->Line_40 $$ if ((scan + lastoffset < oldsize) && (oldBuf[scan + lastoffset] == newBuf[scan])) [ CD ]
Line_92 $$ for (i = 0; i < lenf; i++) -->Line_95 $$ for (i = 0; i < (scan - lenb) - (lastscan + lenf); i++) [ FD ]
Line_6 $$ int[] V = new int[oldsize + 1]-->Line_7 $$ qsufsort(I, V, oldBuf)[ FD ]
Line_118 $$ DataOutputStream headerStream = new DataOutputStream(diffFileOut)-->Line_121 $$ headerStream.writeLong(diffBlockLen)[ FD ]
Line_18 $$ int oldscore, scsc-->Line_29 $$ oldscore = 0[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_4 $$ int oldsize = oldBuf.length[ CD ]
Line_118 $$ DataOutputStream headerStream = new DataOutputStream(diffFileOut)-->Line_122 $$ headerStream.writeLong(newsize)[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_13 $$ byte[] db = new byte[newsize][ CD ]
Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) -->Line_86 $$ lens = i + 1[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_117 $$ diffOut.close()[ CD ]
Line_62 $$ for (i = 1; (scan >= lastscan + i) && (pos.value >= i); i++) -->Line_63 $$ if (oldBuf[pos.value - i] == newBuf[scan - i]) [ CD ]
Line_19 $$ int overlap, Ss, lens-->Line_73 $$ overlap = (lastscan + lenf) - (scan - lenb)[ FD ]
Line_23 $$ int lastscan = 0-->Line_104 $$ lastscan = scan - lenb[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_114 $$ gzOut = new GZIPOutputStream(diffOut)[ CD ]
Line_19 $$ int overlap, Ss, lens-->Line_77 $$ for (i = 0; i < overlap; i++) [ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_109 $$ GZIPOutputStream gzOut[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_113 $$ int diffBlockLen = diffOut.size() - ctrlBlockLen[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_20 $$ int i[ CD ]
Line_13 $$ byte[] db = new byte[newsize]-->Line_111 $$ gzOut.write(db, 0, dblen)[ FD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_98 $$ dblen += lenf[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_8 $$ V = null[ CD ]
Line_21 $$ int scan = 0-->Line_59 $$ if (scan < newsize) [ FD ]
Line_72 $$ if (lastscan + lenf > scan - lenb) -->Line_77 $$ for (i = 0; i < overlap; i++) [ CD ]
Line_118 $$ DataOutputStream headerStream = new DataOutputStream(diffFileOut)-->Line_120 $$ headerStream.writeLong(ctrlBlockLen)[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_6 $$ int[] V = new int[oldsize + 1][ CD ]
Line_62 $$ for (i = 1; (scan >= lastscan + i) && (pos.value >= i); i++) -->Line_95 $$ for (i = 0; i < (scan - lenb) - (lastscan + lenf); i++) [ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_124 $$ Utils.copyBytesToStream(arrayOut, diffFileOut)[ CD ]
Line_118 $$ DataOutputStream headerStream = new DataOutputStream(diffFileOut)-->Line_119 $$ headerStream.write("jbdiff40".getBytes("US-ASCII"))[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_22 $$ int len = 0[ CD ]
Line_19 $$ int overlap, Ss, lens-->Line_84 $$ if (s > Ss) [ FD ]
Line_99 $$ eblen += (scan - lenb) - (lastscan + lenf)-->Line_115 $$ gzOut.write(eb, 0, eblen)[ FD ]
Line_19 $$ int overlap, Ss, lens-->Line_86 $$ lens = i + 1[ FD ]
Line_77 $$ for (i = 0; i < overlap; i++) -->Line_84 $$ if (s > Ss) [ CD ]
Line_109 $$ GZIPOutputStream gzOut-->Line_111 $$ gzOut.write(db, 0, dblen)[ FD ]
Line_11 $$ int newsize = newBuf.length-->Line_59 $$ if (scan < newsize) [ FD ]
Line_72 $$ if (lastscan + lenf > scan - lenb) -->Line_75 $$ Ss = 0[ CD ]
Line_17 $$ DataOutputStream diffOut = new DataOutputStream(arrayOut)-->Line_117 $$ diffOut.close()[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_15 $$ byte[] eb = new byte[newsize][ CD ]
Line_24 $$ int lastpos = 0-->Line_105 $$ lastpos = pos.value - lenb[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_121 $$ headerStream.writeLong(diffBlockLen)[ CD ]
Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) -->Line_77 $$ for (i = 0; i < overlap; i++) [ FD ]
Line_22 $$ int len = 0-->Line_30 $$ for (scsc = scan += len; scan < newsize; scan++) [ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_110 $$ gzOut = new GZIPOutputStream(diffOut)[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_28 $$ while (scan < newsize) [ CD ]
Line_44 $$ if ((len != oldscore) || (scan == newsize)) -->Line_95 $$ for (i = 0; i < (scan - lenb) - (lastscan + lenf); i++) [ CD ]
Line_72 $$ if (lastscan + lenf > scan - lenb) -->Line_76 $$ lens = 0[ CD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_120 $$ headerStream.writeLong(ctrlBlockLen)[ CD ]
Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) -->Line_52 $$ i++[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_123 $$ headerStream.flush()[ CD ]
Line_110 $$ gzOut = new GZIPOutputStream(diffOut)-->Line_115 $$ gzOut.write(eb, 0, eblen)[ FD ]
Line_2 $$ public static byte[] bsdiff(InputStream oldFileIn, InputStream newFileIn, OutputStream diffFileOut) throws IOException -->Line_25 $$ int lastoffset = 0[ CD ]
Line_48 $$ for (i = 0; (lastscan + i < scan) && (lastpos + i < oldsize); ) -->Line_53 $$ if (s * 2 - i > Sf * 2 - lenf) [ CD ]
Line_33 $$ if ((scsc + lastoffset < oldsize) && (oldBuf[scsc + lastoffset] == newBuf[scsc])) -->Line_34 $$ oldscore++[ CD ]
Line_17 $$ DataOutputStream diffOut = new DataOutputStream(arrayOut)-->Line_102 $$ diffOut.writeInt((pos.value - lenb) - (lastpos + lenf))[ FD ]
Line_114 $$ gzOut = new GZIPOutputStream(diffOut)-->Line_115 $$ gzOut.write(eb, 0, eblen)[ FD ]
