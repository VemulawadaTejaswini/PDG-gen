Line_2 $$ public void sendRpcRequest(final Call call) throws InterruptedException, IOException -->Line_8 $$ header.writeDelimitedTo(d)[ CD ]
Line_2 $$ public void sendRpcRequest(final Call call) throws InterruptedException, IOException -->Line_9 $$ call.rpcRequest.write(d)[ CD ]
Line_2 $$ public void sendRpcRequest(final Call call) throws InterruptedException, IOException -->Line_6 $$ final DataOutputBuffer d = new DataOutputBuffer()[ CD ]
Line_2 $$ public void sendRpcRequest(final Call call) throws InterruptedException, IOException -->Line_7 $$ RpcRequestHeaderProto header = ProtoUtil.makeRpcRequestHeader(call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry, clientId)[ CD ]
Line_11 $$ Future<?> senderFuture = sendParamsExecutor.submit(new Runnable() -->Line_34 $$ senderFuture.get()[ FD ]
Line_18 $$ if (LOG.isDebugEnabled())-->Line_19 $$ LOG.debug(getName() + " sending #" + call.id)[ CD ]
Line_21 $$ int totalLength = d.getLength()-->Line_22 $$ out.writeInt(totalLength)[ FD ]
Line_6 $$ final DataOutputBuffer d = new DataOutputBuffer()-->Line_20 $$ byte[] data = d.getData()[ FD ]
Line_6 $$ final DataOutputBuffer d = new DataOutputBuffer()-->Line_8 $$ header.writeDelimitedTo(d)[ FD ]
Line_21 $$ int totalLength = d.getLength()-->Line_23 $$ out.write(data, 0, totalLength)[ FD ]
Line_6 $$ final DataOutputBuffer d = new DataOutputBuffer()-->Line_21 $$ int totalLength = d.getLength()[ FD ]
Line_6 $$ final DataOutputBuffer d = new DataOutputBuffer()-->Line_29 $$ IOUtils.closeStream(d)[ FD ]
Line_3 $$ if (shouldCloseConnection.get()) -->Line_4 $$ return[ CD ]
Line_2 $$ public void sendRpcRequest(final Call call) throws InterruptedException, IOException -->Line_3 $$ if (shouldCloseConnection.get()) [ CD ]
Line_15 $$ if (shouldCloseConnection.get()) -->Line_16 $$ return[ CD ]
Line_6 $$ final DataOutputBuffer d = new DataOutputBuffer()-->Line_9 $$ call.rpcRequest.write(d)[ FD ]
Line_20 $$ byte[] data = d.getData()-->Line_23 $$ out.write(data, 0, totalLength)[ FD ]
Line_7 $$ RpcRequestHeaderProto header = ProtoUtil.makeRpcRequestHeader(call.rpcKind, OperationProto.RPC_FINAL_PACKET, call.id, call.retry, clientId)-->Line_8 $$ header.writeDelimitedTo(d)[ FD ]
