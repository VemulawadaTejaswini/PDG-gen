Line_108 $$ if (editor != null) -->Line_109 $$ editor.stopCellEditing()[ CD ]
Line_33 $$ myTypeRendererCombo.setRenderer(new ListCellRendererWrapper<ParameterInfo>() -->Line_35 $$ PsiType type = info.getType()[ FD ]
Line_27 $$ PsiType type = myParameterInfos[i].getType()-->Line_60 $$ PsiPrimitiveType unboxed = PsiPrimitiveType.getUnboxedType(type)[ FD ]
Line_59 $$ PsiType type = info.getType()-->Line_62 $$ setText(type != null ? type.getPresentableText() : "")[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_7 $$ DefaultCellEditor defaultEditor = (DefaultCellEditor) myTable.getDefaultEditor(Object.class)[ CD ]
Line_26 $$ for (int i = 0; i < myParameterTypeSelectors.length; i++) -->Line_27 $$ PsiType type = myParameterInfos[i].getType()[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() [ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_125 $$ JPanel listPanel = ToolbarDecorator.createDecorator(myTable).disableAddAction().disableRemoveAction().createPanel()[ CD ]
Line_105 $$ actionMap.put("invokeImpl", new AbstractAction() -->Line_108 $$ if (editor != null) [ CD ]
Line_41 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellEditor(new AbstractTableCellEditor() -->Line_48 $$ return myCurrentSelector.getComponent()[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_24 $$ GlobalSearchScope scope = GlobalSearchScope.allScope(project)[ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_62 $$ setText(type != null ? type.getPresentableText() : "")[ CD ]
Line_53 $$ if (myParameterTypeSelectors[row].getComponent() instanceof JComboBox) -->Line_55 $$ return myTypeRendererCombo[ CD ]
Line_118 $$ if (editor != null) -->Line_121 $$ doCancelAction()[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_69 $$ final InputMap inputMap = myTable.getInputMap()[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_104 $$ inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "invokeImpl")[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_93 $$ inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), "edit_parameter_name")[ CD ]
Line_14 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_57 $$ super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ FD ]
Line_77 $$ if (rows.length > 0) -->Line_78 $$ boolean valueToBeSet = false[ CD ]
Line_41 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellEditor(new AbstractTableCellEditor() -->Line_99 $$ TableUtil.editCellAt(myTable, row, MyTableModel.PARAMETER_NAME_COLUMN)[ FD ]
Line_35 $$ PsiType type = info.getType()-->Line_61 $$ type = unboxed != null ? unboxed : type[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_94 $$ actionMap.put("edit_parameter_name", new AbstractAction() [ CD ]
Line_59 $$ PsiType type = info.getType()-->Line_61 $$ type = unboxed != null ? unboxed : type[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_105 $$ actionMap.put("invokeImpl", new AbstractAction() [ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_60 $$ PsiPrimitiveType unboxed = PsiPrimitiveType.getUnboxedType(type)[ CD ]
Line_35 $$ PsiType type = info.getType()-->Line_60 $$ PsiPrimitiveType unboxed = PsiPrimitiveType.getUnboxedType(type)[ FD ]
Line_107 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_108 $$ if (editor != null) [ FD ]
Line_107 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_118 $$ if (editor != null) [ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_70 $$ inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, 0), "enable_disable")[ CD ]
Line_76 $$ int[] rows = myTable.getSelectedRows()-->Line_89 $$ TableUtil.selectRows(myTable, rows)[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_11 $$ TableColumn checkBoxColumn = myTable.getColumnModel().getColumn(MyTableModel.CHECKMARK_COLUMN)[ CD ]
Line_14 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_18 $$ setText(info.getName())[ CD ]
Line_14 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_17 $$ ParameterInfo info = myParameterInfos[row][ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_41 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellEditor(new AbstractTableCellEditor() [ CD ]
Line_77 $$ if (rows.length > 0) -->Line_88 $$ myTableModel.fireTableRowsUpdated(rows[0], rows[rows.length - 1])[ CD ]
Line_37 $$ type = unboxed != null ? unboxed : type-->Line_62 $$ setText(type != null ? type.getPresentableText() : "")[ FD ]
Line_98 $$ if (row >= 0 && row < myTableModel.getRowCount()) -->Line_99 $$ TableUtil.editCellAt(myTable, row, MyTableModel.PARAMETER_NAME_COLUMN)[ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_99 $$ TableUtil.editCellAt(myTable, row, MyTableModel.PARAMETER_NAME_COLUMN)[ FD ]
Line_107 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_119 $$ editor.stopCellEditing()[ FD ]
Line_97 $$ int row = myTable.getSelectedRow()-->Line_99 $$ TableUtil.editCellAt(myTable, row, MyTableModel.PARAMETER_NAME_COLUMN)[ FD ]
Line_33 $$ myTypeRendererCombo.setRenderer(new ListCellRendererWrapper<ParameterInfo>() -->Line_37 $$ type = unboxed != null ? unboxed : type[ CD ]
Line_41 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellEditor(new AbstractTableCellEditor() -->Line_54 $$ myTypeRendererCombo.setSelectedIndex(row)[ FD ]
Line_80 $$ if (!myParameterInfos[row].passAsParameter()) -->Line_81 $$ valueToBeSet = true[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_32 $$ myTypeRendererCombo.setBorder(null)[ CD ]
Line_17 $$ ParameterInfo info = myParameterInfos[row]-->Line_18 $$ setText(info.getName())[ FD ]
Line_35 $$ PsiType type = info.getType()-->Line_36 $$ PsiPrimitiveType unboxed = PsiPrimitiveType.getUnboxedType(type)[ FD ]
Line_37 $$ type = unboxed != null ? unboxed : type-->Line_38 $$ setText(type != null ? type.getPresentableText() : "")[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_12 $$ TableUtil.setupCheckboxColumn(checkBoxColumn)[ CD ]
Line_94 $$ actionMap.put("edit_parameter_name", new AbstractAction() -->Line_96 $$ if (!myTable.isEditing()) [ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_67 $$ myTable.setShowGrid(false)[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_10 $$ myTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_23 $$ PsiManager manager = PsiManager.getInstance(project)[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_4 $$ myParameterInfos = helper.getParameterInfos()[ FD ]
Line_59 $$ PsiType type = info.getType()-->Line_60 $$ PsiPrimitiveType unboxed = PsiPrimitiveType.getUnboxedType(type)[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_22 $$ Project project = helper.getProject()[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_14 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer() [ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_57 $$ super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_53 $$ if (myParameterTypeSelectors[row].getComponent() instanceof JComboBox) [ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_33 $$ myTypeRendererCombo.setRenderer(new ListCellRendererWrapper<ParameterInfo>() [ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_72 $$ actionMap.put("enable_disable", new AbstractAction() [ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_66 $$ myTable.setPreferredScrollableViewportSize(JBUI.size(250, myTable.getRowHeight() * 5))[ CD ]
Line_41 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellEditor(new AbstractTableCellEditor() -->Line_57 $$ super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ FD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_59 $$ PsiType type = info.getType()[ CD ]
Line_96 $$ if (!myTable.isEditing()) -->Line_97 $$ int row = myTable.getSelectedRow()[ CD ]
Line_79 $$ for (int row : rows) -->Line_99 $$ TableUtil.editCellAt(myTable, row, MyTableModel.PARAMETER_NAME_COLUMN)[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_71 $$ final ActionMap actionMap = myTable.getActionMap()[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_3 $$ setBorder(IdeBorderFactory.createTitledBorder(GroovyRefactoringBundle.message("parameters.border.title"), false))[ CD ]
Line_14 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_16 $$ super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ CD ]
Line_37 $$ type = unboxed != null ? unboxed : type-->Line_60 $$ PsiPrimitiveType unboxed = PsiPrimitiveType.getUnboxedType(type)[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_13 $$ checkBoxColumn.setCellRenderer(new CheckBoxTableCellRenderer())[ CD ]
Line_27 $$ PsiType type = myParameterInfos[i].getType()-->Line_36 $$ PsiPrimitiveType unboxed = PsiPrimitiveType.getUnboxedType(type)[ FD ]
Line_117 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_118 $$ if (editor != null) [ FD ]
Line_72 $$ actionMap.put("enable_disable", new AbstractAction() -->Line_76 $$ int[] rows = myTable.getSelectedRows()[ CD ]
Line_72 $$ actionMap.put("enable_disable", new AbstractAction() -->Line_77 $$ if (rows.length > 0) [ CD ]
Line_107 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_109 $$ editor.stopCellEditing()[ FD ]
Line_27 $$ PsiType type = myParameterInfos[i].getType()-->Line_62 $$ setText(type != null ? type.getPresentableText() : "")[ FD ]
Line_117 $$ TableCellEditor editor = myTable.getCellEditor()-->Line_119 $$ editor.stopCellEditing()[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_126 $$ add(listPanel, BorderLayout.CENTER)[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_9 $$ myTable.setTableHeader(null)[ CD ]
Line_115 $$ actionMap.put("doCancel", new AbstractAction() -->Line_118 $$ if (editor != null) [ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_58 $$ ParameterInfo info = myParameterInfos[row][ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_31 $$ myTypeRendererCombo.setOpaque(true)[ CD ]
Line_81 $$ valueToBeSet = true-->Line_86 $$ myParameterInfos[row].setPassAsParameter(valueToBeSet)[ FD ]
Line_11 $$ TableColumn checkBoxColumn = myTable.getColumnModel().getColumn(MyTableModel.CHECKMARK_COLUMN)-->Line_12 $$ TableUtil.setupCheckboxColumn(checkBoxColumn)[ FD ]
Line_11 $$ TableColumn checkBoxColumn = myTable.getColumnModel().getColumn(MyTableModel.CHECKMARK_COLUMN)-->Line_13 $$ checkBoxColumn.setCellRenderer(new CheckBoxTableCellRenderer())[ FD ]
Line_14 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_99 $$ TableUtil.editCellAt(myTable, row, MyTableModel.PARAMETER_NAME_COLUMN)[ FD ]
Line_35 $$ PsiType type = info.getType()-->Line_38 $$ setText(type != null ? type.getPresentableText() : "")[ FD ]
Line_105 $$ actionMap.put("invokeImpl", new AbstractAction() -->Line_107 $$ TableCellEditor editor = myTable.getCellEditor()[ CD ]
Line_78 $$ boolean valueToBeSet = false-->Line_81 $$ valueToBeSet = true[ FD ]
Line_27 $$ PsiType type = myParameterInfos[i].getType()-->Line_38 $$ setText(type != null ? type.getPresentableText() : "")[ FD ]
Line_7 $$ DefaultCellEditor defaultEditor = (DefaultCellEditor) myTable.getDefaultEditor(Object.class)-->Line_8 $$ defaultEditor.setClickCountToStart(1)[ FD ]
Line_35 $$ PsiType type = info.getType()-->Line_62 $$ setText(type != null ? type.getPresentableText() : "")[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_4 $$ myParameterInfos = helper.getParameterInfos()[ CD ]
Line_26 $$ for (int i = 0; i < myParameterTypeSelectors.length; i++) -->Line_28 $$ myParameterTypeSelectors[i] = new TypeSelector(type != null ? type : PsiType.getJavaLangObject(manager, scope), project)[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_115 $$ actionMap.put("doCancel", new AbstractAction() [ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_63 $$ return this[ CD ]
Line_35 $$ PsiType type = info.getType()-->Line_37 $$ type = unboxed != null ? unboxed : type[ FD ]
Line_33 $$ myTypeRendererCombo.setRenderer(new ListCellRendererWrapper<ParameterInfo>() -->Line_36 $$ PsiPrimitiveType unboxed = PsiPrimitiveType.getUnboxedType(type)[ CD ]
Line_14 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_16 $$ super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ FD ]
Line_37 $$ type = unboxed != null ? unboxed : type-->Line_61 $$ type = unboxed != null ? unboxed : type[ FD ]
Line_27 $$ PsiType type = myParameterInfos[i].getType()-->Line_37 $$ type = unboxed != null ? unboxed : type[ FD ]
Line_17 $$ ParameterInfo info = myParameterInfos[row]-->Line_59 $$ PsiType type = info.getType()[ FD ]
Line_27 $$ PsiType type = myParameterInfos[i].getType()-->Line_61 $$ type = unboxed != null ? unboxed : type[ FD ]
Line_96 $$ if (!myTable.isEditing()) -->Line_98 $$ if (row >= 0 && row < myTableModel.getRowCount()) [ CD ]
Line_17 $$ ParameterInfo info = myParameterInfos[row]-->Line_35 $$ PsiType type = info.getType()[ FD ]
Line_74 $$ if (myTable.isEditing())-->Line_75 $$ return[ CD ]
Line_33 $$ myTypeRendererCombo.setRenderer(new ListCellRendererWrapper<ParameterInfo>() -->Line_59 $$ PsiType type = info.getType()[ FD ]
Line_14 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_54 $$ myTypeRendererCombo.setSelectedIndex(row)[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_26 $$ for (int i = 0; i < myParameterTypeSelectors.length; i++) [ CD ]
Line_33 $$ myTypeRendererCombo.setRenderer(new ListCellRendererWrapper<ParameterInfo>() -->Line_38 $$ setText(type != null ? type.getPresentableText() : "")[ CD ]
Line_115 $$ actionMap.put("doCancel", new AbstractAction() -->Line_117 $$ TableCellEditor editor = myTable.getCellEditor()[ CD ]
Line_108 $$ if (editor != null) -->Line_111 $$ doEnterAction()[ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_57 $$ super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ FD ]
Line_118 $$ if (editor != null) -->Line_119 $$ editor.stopCellEditing()[ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_61 $$ type = unboxed != null ? unboxed : type[ CD ]
Line_77 $$ if (rows.length > 0) -->Line_89 $$ TableUtil.selectRows(myTable, rows)[ CD ]
Line_51 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_54 $$ myTypeRendererCombo.setSelectedIndex(row)[ FD ]
Line_72 $$ actionMap.put("enable_disable", new AbstractAction() -->Line_74 $$ if (myTable.isEditing())[ CD ]
Line_58 $$ ParameterInfo info = myParameterInfos[row]-->Line_59 $$ PsiType type = info.getType()[ FD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_68 $$ myTable.setIntercellSpacing(JBUI.emptySize())[ CD ]
Line_14 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer() -->Line_19 $$ return this[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_22 $$ Project project = helper.getProject()[ FD ]
Line_61 $$ type = unboxed != null ? unboxed : type-->Line_62 $$ setText(type != null ? type.getPresentableText() : "")[ FD ]
Line_41 $$ myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellEditor(new AbstractTableCellEditor() -->Line_44 $$ return myCurrentSelector.getSelectedType()[ CD ]
Line_53 $$ if (myParameterTypeSelectors[row].getComponent() instanceof JComboBox) -->Line_54 $$ myTypeRendererCombo.setSelectedIndex(row)[ CD ]
Line_33 $$ myTypeRendererCombo.setRenderer(new ListCellRendererWrapper<ParameterInfo>() -->Line_57 $$ super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ FD ]
Line_78 $$ boolean valueToBeSet = false-->Line_86 $$ myParameterInfos[row].setPassAsParameter(valueToBeSet)[ FD ]
Line_33 $$ myTypeRendererCombo.setRenderer(new ListCellRendererWrapper<ParameterInfo>() -->Line_35 $$ PsiType type = info.getType()[ CD ]
Line_2 $$ public void init(ExtractInfoHelper helper) -->Line_8 $$ defaultEditor.setClickCountToStart(1)[ CD ]
