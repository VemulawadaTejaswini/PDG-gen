Line_8 $$ if (!prefSizeWasComputed[0] && hintHint.isAwtTooltip()) -->Line_25 $$ if (prefSizeOriginal.width > fitWidth) [ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_68 $$ pane.setEditable(false)[ FD ]
Line_75 $$ if (!hintHint.isAwtTooltip()) -->Line_76 $$ prefSizeWasComputed[0] = true[ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_67 $$ pane.setCaretPosition(0)[ FD ]
Line_8 $$ if (!prefSizeWasComputed[0] && hintHint.isAwtTooltip()) -->Line_24 $$ Dimension prefSizeOriginal = super.getPreferredSize()[ CD ]
Line_46 $$ final HTMLEditorKit.HTMLFactory factory = new HTMLEditorKit.HTMLFactory() -->Line_51 $$ if (o instanceof HTML.Tag) [ CD ]
Line_46 $$ final HTMLEditorKit.HTMLFactory factory = new HTMLEditorKit.HTMLFactory() -->Line_48 $$ AttributeSet attrs = elem.getAttributes()[ CD ]
Line_69 $$ if (hintHint.isOwnBorderAllowed()) -->Line_71 $$ setColors(pane)[ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_83 $$ pane.setBackground(hintHint.getTextBackground())[ FD ]
Line_36 $$ if (b != null) -->Line_37 $$ JBInsets.addTo(s, b.getBorderInsets(this))[ CD ]
Line_25 $$ if (prefSizeOriginal.width > fitWidth) -->Line_31 $$ prefSize.set(new Dimension(prefSizeOriginal))[ CD ]
Line_8 $$ if (!prefSizeWasComputed[0] && hintHint.isAwtTooltip()) -->Line_23 $$ int fitWidth = (int) (size.width * 0.8)[ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_8 $$ if (!prefSizeWasComputed[0] && hintHint.isAwtTooltip()) [ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_83 $$ pane.setBackground(hintHint.getTextBackground())[ FD ]
Line_53 $$ if (kind == HTML.Tag.HR) -->Line_54 $$ return new CustomHrView(elem, hintHint.getTextForeground())[ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_75 $$ if (!hintHint.isAwtTooltip()) [ FD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_81 $$ pane.setBackground(UIUtil.TRANSPARENT_COLOR)[ FD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_35 $$ Border b = getBorder()[ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_78 $$ final boolean opaque = hintHint.isOpaqueAllowed()[ FD ]
Line_51 $$ if (o instanceof HTML.Tag) -->Line_52 $$ HTML.Tag kind = (HTML.Tag) o[ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_67 $$ pane.setCaretPosition(0)[ CD ]
Line_11 $$ JRootPane rootPane = UIUtil.getRootPane(this)-->Line_13 $$ lp = rootPane.getLayeredPane()[ FD ]
Line_25 $$ if (prefSizeOriginal.width > fitWidth) -->Line_29 $$ prefSize.set(new Dimension(fitWidth > minSize.width ? fitWidth : minSize.width, fixedWidthSize.height))[ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_54 $$ return new CustomHrView(elem, hintHint.getTextForeground())[ FD ]
Line_8 $$ if (!prefSizeWasComputed[0] && hintHint.isAwtTooltip()) -->Line_16 $$ Dimension size[ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_43 $$ prefSize.set(preferredSize)[ CD ]
Line_51 $$ if (o instanceof HTML.Tag) -->Line_53 $$ if (kind == HTML.Tag.HR) [ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_4 $$ String text = HintUtil.prepareHintText(html, hintHint)[ CD ]
Line_25 $$ if (prefSizeOriginal.width > fitWidth) -->Line_26 $$ setSize(new Dimension(fitWidth, Integer.MAX_VALUE))[ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_71 $$ setColors(pane)[ FD ]
Line_50 $$ Object o = elementName != null ? null : attrs.getAttribute(StyleConstants.NameAttribute)-->Line_51 $$ if (o instanceof HTML.Tag) [ FD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_5 $$ final boolean[] prefSizeWasComputed = [ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_42 $$ super.setPreferredSize(preferredSize)[ FD ]
Line_48 $$ AttributeSet attrs = elem.getAttributes()-->Line_49 $$ Object elementName = attrs.getAttribute(AbstractDocument.ElementNameAttribute)[ FD ]
Line_9 $$ JLayeredPane lp = layeredPane-->Line_13 $$ lp = rootPane.getLayeredPane()[ FD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_69 $$ if (hintHint.isOwnBorderAllowed()) [ CD ]
Line_9 $$ JLayeredPane lp = layeredPane-->Line_10 $$ if (lp == null) [ FD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_66 $$ pane.setText(text)[ FD ]
Line_11 $$ JRootPane rootPane = UIUtil.getRootPane(this)-->Line_12 $$ if (rootPane != null) [ FD ]
Line_12 $$ if (rootPane != null) -->Line_13 $$ lp = rootPane.getLayeredPane()[ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_4 $$ String text = HintUtil.prepareHintText(html, hintHint)[ FD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_68 $$ pane.setEditable(false)[ CD ]
Line_17 $$ if (lp != null) -->Line_18 $$ size = lp.getSize()[ CD ]
Line_8 $$ if (!prefSizeWasComputed[0] && hintHint.isAwtTooltip()) -->Line_17 $$ if (lp != null) [ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_36 $$ if (b != null) [ CD ]
Line_48 $$ AttributeSet attrs = elem.getAttributes()-->Line_50 $$ Object o = elementName != null ? null : attrs.getAttribute(StyleConstants.NameAttribute)[ FD ]
Line_35 $$ Border b = getBorder()-->Line_37 $$ JBInsets.addTo(s, b.getBorderInsets(this))[ FD ]
Line_3 $$ final Ref<Dimension> prefSize = new Ref<Dimension>(null)-->Line_43 $$ prefSize.set(preferredSize)[ FD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_73 $$ pane.setBorder(null)[ FD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_34 $$ Dimension s = prefSize.get() != null ? new Dimension(prefSize.get()) : super.getPreferredSize()[ CD ]
Line_46 $$ final HTMLEditorKit.HTMLFactory factory = new HTMLEditorKit.HTMLFactory() -->Line_49 $$ Object elementName = attrs.getAttribute(AbstractDocument.ElementNameAttribute)[ CD ]
Line_8 $$ if (!prefSizeWasComputed[0] && hintHint.isAwtTooltip()) -->Line_9 $$ JLayeredPane lp = layeredPane[ CD ]
Line_16 $$ Dimension size-->Line_21 $$ size = ScreenUtil.getScreenRectangle(0, 0).getSize()[ FD ]
Line_4 $$ String text = HintUtil.prepareHintText(html, hintHint)-->Line_66 $$ pane.setText(text)[ FD ]
Line_17 $$ if (lp != null) -->Line_21 $$ size = ScreenUtil.getScreenRectangle(0, 0).getSize()[ CD ]
Line_25 $$ if (prefSizeOriginal.width > fitWidth) -->Line_27 $$ Dimension fixedWidthSize = super.getPreferredSize()[ CD ]
Line_3 $$ final Ref<Dimension> prefSize = new Ref<Dimension>(null)-->Line_31 $$ prefSize.set(new Dimension(prefSizeOriginal))[ FD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_69 $$ if (hintHint.isOwnBorderAllowed()) [ FD ]
Line_69 $$ if (hintHint.isOwnBorderAllowed()) -->Line_73 $$ pane.setBorder(null)[ CD ]
Line_3 $$ final Ref<Dimension> prefSize = new Ref<Dimension>(null)-->Line_29 $$ prefSize.set(new Dimension(fitWidth > minSize.width ? fitWidth : minSize.width, fixedWidthSize.height))[ FD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_8 $$ if (!prefSizeWasComputed[0] && hintHint.isAwtTooltip()) [ FD ]
Line_25 $$ if (prefSizeOriginal.width > fitWidth) -->Line_28 $$ Dimension minSize = super.getMinimumSize()[ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_66 $$ pane.setText(text)[ CD ]
Line_10 $$ if (lp == null) -->Line_12 $$ if (rootPane != null) [ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_3 $$ final Ref<Dimension> prefSize = new Ref<Dimension>(null)[ CD ]
Line_60 $$ HTMLEditorKit kit = new HTMLEditorKit() -->Line_62 $$ return factory[ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_79 $$ pane.setOpaque(opaque)[ FD ]
Line_46 $$ final HTMLEditorKit.HTMLFactory factory = new HTMLEditorKit.HTMLFactory() -->Line_57 $$ return super.create(elem)[ FD ]
Line_46 $$ final HTMLEditorKit.HTMLFactory factory = new HTMLEditorKit.HTMLFactory() -->Line_57 $$ return super.create(elem)[ CD ]
Line_34 $$ Dimension s = prefSize.get() != null ? new Dimension(prefSize.get()) : super.getPreferredSize()-->Line_37 $$ JBInsets.addTo(s, b.getBorderInsets(this))[ FD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_80 $$ if (UIUtil.isUnderNimbusLookAndFeel() && !opaque) [ CD ]
Line_46 $$ final HTMLEditorKit.HTMLFactory factory = new HTMLEditorKit.HTMLFactory() -->Line_50 $$ Object o = elementName != null ? null : attrs.getAttribute(StyleConstants.NameAttribute)[ CD ]
Line_69 $$ if (hintHint.isOwnBorderAllowed()) -->Line_70 $$ setBorder(pane)[ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_70 $$ setBorder(pane)[ FD ]
Line_52 $$ HTML.Tag kind = (HTML.Tag) o-->Line_53 $$ if (kind == HTML.Tag.HR) [ FD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_65 $$ pane.setEditorKit(kit)[ FD ]
Line_17 $$ if (lp != null) -->Line_19 $$ prefSizeWasComputed[0] = true[ CD ]
Line_18 $$ size = lp.getSize()-->Line_21 $$ size = ScreenUtil.getScreenRectangle(0, 0).getSize()[ FD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_42 $$ super.setPreferredSize(preferredSize)[ CD ]
Line_46 $$ final HTMLEditorKit.HTMLFactory factory = new HTMLEditorKit.HTMLFactory() -->Line_48 $$ AttributeSet attrs = elem.getAttributes()[ FD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_79 $$ pane.setOpaque(opaque)[ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_75 $$ if (!hintHint.isAwtTooltip()) [ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_39 $$ return s[ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_85 $$ return pane[ CD ]
Line_23 $$ int fitWidth = (int) (size.width * 0.8)-->Line_25 $$ if (prefSizeOriginal.width > fitWidth) [ FD ]
Line_80 $$ if (UIUtil.isUnderNimbusLookAndFeel() && !opaque) -->Line_81 $$ pane.setBackground(UIUtil.TRANSPARENT_COLOR)[ CD ]
Line_6 $$ final JEditorPane pane = new JEditorPane() -->Line_43 $$ prefSize.set(preferredSize)[ FD ]
Line_80 $$ if (UIUtil.isUnderNimbusLookAndFeel() && !opaque) -->Line_83 $$ pane.setBackground(hintHint.getTextBackground())[ CD ]
Line_10 $$ if (lp == null) -->Line_11 $$ JRootPane rootPane = UIUtil.getRootPane(this)[ CD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_78 $$ final boolean opaque = hintHint.isOpaqueAllowed()[ CD ]
Line_35 $$ Border b = getBorder()-->Line_36 $$ if (b != null) [ FD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_65 $$ pane.setEditorKit(kit)[ CD ]
Line_13 $$ lp = rootPane.getLayeredPane()-->Line_17 $$ if (lp != null) [ FD ]
Line_16 $$ Dimension size-->Line_18 $$ size = lp.getSize()[ FD ]
Line_2 $$ public static JEditorPane initPane(@NonNls Html html, final HintHint hintHint, @Nullable final JLayeredPane layeredPane) -->Line_6 $$ final JEditorPane pane = new JEditorPane() [ CD ]
Line_13 $$ lp = rootPane.getLayeredPane()-->Line_18 $$ size = lp.getSize()[ FD ]
Line_9 $$ JLayeredPane lp = layeredPane-->Line_17 $$ if (lp != null) [ FD ]
Line_3 $$ final Ref<Dimension> prefSize = new Ref<Dimension>(null)-->Line_34 $$ Dimension s = prefSize.get() != null ? new Dimension(prefSize.get()) : super.getPreferredSize()[ FD ]
Line_9 $$ JLayeredPane lp = layeredPane-->Line_18 $$ size = lp.getSize()[ FD ]
Line_8 $$ if (!prefSizeWasComputed[0] && hintHint.isAwtTooltip()) -->Line_10 $$ if (lp == null) [ CD ]
