Line_4 $$ while (true) -->Line_10 $$ IncreasableEntry<K, V> previousIncreasableEntry = previousIncreasableEntryWrapper.increasableEntry[ CD ]
Line_4 $$ while (true) -->Line_11 $$ IncreasableEntry<K, V> newIncreasableEntry = increasableEntry.increase(previousIncreasableEntry.getValue())[ CD ]
Line_3 $$ K key = increasableEntry.getKey()-->Line_5 $$ IncreasableEntryWrapper<K, V> previousIncreasableEntryWrapper = concurrentMap.putIfAbsent(key, new IncreasableEntryWrapper<K, V>(increasableEntry))[ FD ]
Line_5 $$ IncreasableEntryWrapper<K, V> previousIncreasableEntryWrapper = concurrentMap.putIfAbsent(key, new IncreasableEntryWrapper<K, V>(increasableEntry))-->Line_12 $$ if (concurrentMap.replace(key, previousIncreasableEntryWrapper, new IncreasableEntryWrapper<K, V>(newIncreasableEntry))) [ FD ]
Line_4 $$ while (true) -->Line_5 $$ IncreasableEntryWrapper<K, V> previousIncreasableEntryWrapper = concurrentMap.putIfAbsent(key, new IncreasableEntryWrapper<K, V>(increasableEntry))[ CD ]
Line_2 $$ public boolean put(IncreasableEntry<K, V> increasableEntry) -->Line_3 $$ K key = increasableEntry.getKey()[ CD ]
Line_2 $$ public boolean put(IncreasableEntry<K, V> increasableEntry) -->Line_7 $$ queue.offer(increasableEntry)[ FD ]
Line_10 $$ IncreasableEntry<K, V> previousIncreasableEntry = previousIncreasableEntryWrapper.increasableEntry-->Line_11 $$ IncreasableEntry<K, V> newIncreasableEntry = increasableEntry.increase(previousIncreasableEntry.getValue())[ FD ]
Line_5 $$ IncreasableEntryWrapper<K, V> previousIncreasableEntryWrapper = concurrentMap.putIfAbsent(key, new IncreasableEntryWrapper<K, V>(increasableEntry))-->Line_6 $$ if (previousIncreasableEntryWrapper == null) [ FD ]
Line_12 $$ if (concurrentMap.replace(key, previousIncreasableEntryWrapper, new IncreasableEntryWrapper<K, V>(newIncreasableEntry))) -->Line_14 $$ return false[ CD ]
Line_3 $$ K key = increasableEntry.getKey()-->Line_12 $$ if (concurrentMap.replace(key, previousIncreasableEntryWrapper, new IncreasableEntryWrapper<K, V>(newIncreasableEntry))) [ FD ]
Line_2 $$ public boolean put(IncreasableEntry<K, V> increasableEntry) -->Line_4 $$ while (true) [ CD ]
Line_6 $$ if (previousIncreasableEntryWrapper == null) -->Line_8 $$ return true[ CD ]
Line_4 $$ while (true) -->Line_12 $$ if (concurrentMap.replace(key, previousIncreasableEntryWrapper, new IncreasableEntryWrapper<K, V>(newIncreasableEntry))) [ CD ]
Line_6 $$ if (previousIncreasableEntryWrapper == null) -->Line_7 $$ queue.offer(increasableEntry)[ CD ]
Line_2 $$ public boolean put(IncreasableEntry<K, V> increasableEntry) -->Line_11 $$ IncreasableEntry<K, V> newIncreasableEntry = increasableEntry.increase(previousIncreasableEntry.getValue())[ FD ]
Line_11 $$ IncreasableEntry<K, V> newIncreasableEntry = increasableEntry.increase(previousIncreasableEntry.getValue())-->Line_13 $$ queue.offer(newIncreasableEntry)[ FD ]
Line_4 $$ while (true) -->Line_6 $$ if (previousIncreasableEntryWrapper == null) [ CD ]
Line_12 $$ if (concurrentMap.replace(key, previousIncreasableEntryWrapper, new IncreasableEntryWrapper<K, V>(newIncreasableEntry))) -->Line_13 $$ queue.offer(newIncreasableEntry)[ CD ]
Line_2 $$ public boolean put(IncreasableEntry<K, V> increasableEntry) -->Line_3 $$ K key = increasableEntry.getKey()[ FD ]
