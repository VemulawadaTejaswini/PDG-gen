Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_24 $$ return mock[ CD ]
Line_4 $$ int count = names.get(name).getAndIncrement()-->Line_6 $$ if (count == 0) [ FD ]
Line_5 $$ T mock-->Line_11 $$ if (mock instanceof ClassLoader) [ FD ]
Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_4 $$ int count = names.get(name).getAndIncrement()[ CD ]
Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_9 $$ mock = super.mock(typeToMock, name + count)[ FD ]
Line_12 $$ for (Field field : ClassLoader.class.getDeclaredFields()) -->Line_13 $$ if (field.getName().equals("initialized")) [ FD ]
Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_4 $$ int count = names.get(name).getAndIncrement()[ FD ]
Line_13 $$ if (field.getName().equals("initialized")) -->Line_14 $$ field.setAccessible(true)[ CD ]
Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_5 $$ T mock[ CD ]
Line_5 $$ T mock-->Line_9 $$ mock = super.mock(typeToMock, name + count)[ FD ]
Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_3 $$ names.putIfAbsent(name, new AtomicInteger())[ FD ]
Line_6 $$ if (count == 0) -->Line_7 $$ mock = super.mock(typeToMock, name)[ CD ]
Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_11 $$ if (mock instanceof ClassLoader) [ CD ]
Line_9 $$ mock = super.mock(typeToMock, name + count)-->Line_16 $$ field.set(mock, true)[ FD ]
Line_9 $$ mock = super.mock(typeToMock, name + count)-->Line_11 $$ if (mock instanceof ClassLoader) [ FD ]
Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_6 $$ if (count == 0) [ CD ]
Line_12 $$ for (Field field : ClassLoader.class.getDeclaredFields()) -->Line_16 $$ field.set(mock, true)[ FD ]
Line_5 $$ T mock-->Line_16 $$ field.set(mock, true)[ FD ]
Line_12 $$ for (Field field : ClassLoader.class.getDeclaredFields()) -->Line_14 $$ field.setAccessible(true)[ FD ]
Line_5 $$ T mock-->Line_7 $$ mock = super.mock(typeToMock, name)[ FD ]
Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_3 $$ names.putIfAbsent(name, new AtomicInteger())[ CD ]
Line_7 $$ mock = super.mock(typeToMock, name)-->Line_11 $$ if (mock instanceof ClassLoader) [ FD ]
Line_7 $$ mock = super.mock(typeToMock, name)-->Line_9 $$ mock = super.mock(typeToMock, name + count)[ FD ]
Line_2 $$ public <T> T mock(Class<T> typeToMock, String name) -->Line_7 $$ mock = super.mock(typeToMock, name)[ FD ]
Line_6 $$ if (count == 0) -->Line_9 $$ mock = super.mock(typeToMock, name + count)[ CD ]
Line_7 $$ mock = super.mock(typeToMock, name)-->Line_16 $$ field.set(mock, true)[ FD ]
