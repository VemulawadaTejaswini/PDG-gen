Line_2 $$ private RelevantMethods getMethods(Class<?> type) -->Line_3 $$ RelevantMethods relevantMethods = METHODS_CACHE.get(type)[ FD ]
Line_4 $$ if (relevantMethods == null) -->Line_6 $$ METHODS_CACHE.putIfAbsent(type, relevantMethods)[ CD ]
Line_2 $$ private RelevantMethods getMethods(Class<?> type) -->Line_3 $$ RelevantMethods relevantMethods = METHODS_CACHE.get(type)[ CD ]
Line_4 $$ if (relevantMethods == null) -->Line_5 $$ relevantMethods = buildRelevantMethods(type)[ CD ]
Line_5 $$ relevantMethods = buildRelevantMethods(type)-->Line_6 $$ METHODS_CACHE.putIfAbsent(type, relevantMethods)[ FD ]
Line_3 $$ RelevantMethods relevantMethods = METHODS_CACHE.get(type)-->Line_6 $$ METHODS_CACHE.putIfAbsent(type, relevantMethods)[ FD ]
Line_2 $$ private RelevantMethods getMethods(Class<?> type) -->Line_5 $$ relevantMethods = buildRelevantMethods(type)[ FD ]
Line_2 $$ private RelevantMethods getMethods(Class<?> type) -->Line_6 $$ METHODS_CACHE.putIfAbsent(type, relevantMethods)[ FD ]
Line_2 $$ private RelevantMethods getMethods(Class<?> type) -->Line_4 $$ if (relevantMethods == null) [ CD ]
Line_2 $$ private RelevantMethods getMethods(Class<?> type) -->Line_8 $$ return relevantMethods[ CD ]
Line_3 $$ RelevantMethods relevantMethods = METHODS_CACHE.get(type)-->Line_5 $$ relevantMethods = buildRelevantMethods(type)[ FD ]
Line_3 $$ RelevantMethods relevantMethods = METHODS_CACHE.get(type)-->Line_4 $$ if (relevantMethods == null) [ FD ]
