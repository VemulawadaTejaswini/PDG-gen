Line_31 $$ Method method = protoCache.get(protocol)-->Line_40 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])[ FD ]
Line_31 $$ Method method = protoCache.get(protocol)-->Line_41 $$ method.setAccessible(true)[ FD ]
Line_13 $$ constructor = pbServiceImplClazz.getConstructor(protocol)-->Line_14 $$ constructor.setAccessible(true)[ FD ]
Line_40 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])-->Line_42 $$ protoCache.putIfAbsent(protocol, method)[ FD ]
Line_20 $$ Object service = null-->Line_30 $$ Class<?> pbProtocol = service.getClass().getInterfaces()[0][ FD ]
Line_40 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])-->Line_48 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_4 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_13 $$ constructor = pbServiceImplClazz.getConstructor(protocol)[ FD ]
Line_6 $$ Class<?> pbServiceImplClazz = null-->Line_8 $$ pbServiceImplClazz = localConf.getClassByName(getPbServiceImplClassName(protocol))[ FD ]
Line_4 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_14 $$ constructor.setAccessible(true)[ FD ]
Line_30 $$ Class<?> pbProtocol = service.getClass().getInterfaces()[0]-->Line_48 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_32 $$ if (method == null) -->Line_33 $$ Class<?> protoClazz = null[ CD ]
Line_22 $$ service = constructor.newInstance(instance)-->Line_30 $$ Class<?> pbProtocol = service.getClass().getInterfaces()[0][ FD ]
Line_8 $$ pbServiceImplClazz = localConf.getClassByName(getPbServiceImplClassName(protocol))-->Line_13 $$ constructor = pbServiceImplClazz.getConstructor(protocol)[ FD ]
Line_33 $$ Class<?> protoClazz = null-->Line_35 $$ protoClazz = localConf.getClassByName(getProtoClassName(protocol))[ FD ]
Line_35 $$ protoClazz = localConf.getClassByName(getProtoClassName(protocol))-->Line_40 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])[ FD ]
Line_20 $$ Object service = null-->Line_22 $$ service = constructor.newInstance(instance)[ FD ]
Line_40 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])-->Line_41 $$ method.setAccessible(true)[ FD ]
Line_31 $$ Method method = protoCache.get(protocol)-->Line_32 $$ if (method == null) [ FD ]
Line_20 $$ Object service = null-->Line_48 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_6 $$ Class<?> pbServiceImplClazz = null-->Line_13 $$ constructor = pbServiceImplClazz.getConstructor(protocol)[ FD ]
Line_22 $$ service = constructor.newInstance(instance)-->Line_48 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_5 $$ if (constructor == null) -->Line_6 $$ Class<?> pbServiceImplClazz = null[ CD ]
Line_13 $$ constructor = pbServiceImplClazz.getConstructor(protocol)-->Line_15 $$ serviceCache.putIfAbsent(protocol, constructor)[ FD ]
Line_4 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_5 $$ if (constructor == null) [ FD ]
Line_4 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_22 $$ service = constructor.newInstance(instance)[ FD ]
Line_33 $$ Class<?> protoClazz = null-->Line_40 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])[ FD ]
Line_30 $$ Class<?> pbProtocol = service.getClass().getInterfaces()[0]-->Line_40 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])[ FD ]
Line_13 $$ constructor = pbServiceImplClazz.getConstructor(protocol)-->Line_22 $$ service = constructor.newInstance(instance)[ FD ]
Line_31 $$ Method method = protoCache.get(protocol)-->Line_42 $$ protoCache.putIfAbsent(protocol, method)[ FD ]
Line_4 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_15 $$ serviceCache.putIfAbsent(protocol, constructor)[ FD ]
Line_31 $$ Method method = protoCache.get(protocol)-->Line_48 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
