Line_32 $$ Class<?> protoClazz = null-->Line_39 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])[ FD ]
Line_39 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])-->Line_40 $$ method.setAccessible(true)[ FD ]
Line_30 $$ Method method = protoCache.get(protocol)-->Line_39 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])[ FD ]
Line_3 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_4 $$ if (constructor == null) [ FD ]
Line_12 $$ constructor = pbServiceImplClazz.getConstructor(protocol)-->Line_21 $$ service = constructor.newInstance(instance)[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_31 $$ if (method == null) [ CD ]
Line_39 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])-->Line_41 $$ protoCache.putIfAbsent(protocol, method)[ FD ]
Line_7 $$ pbServiceImplClazz = localConf.getClassByName(getPbServiceImplClassName(protocol))-->Line_12 $$ constructor = pbServiceImplClazz.getConstructor(protocol)[ FD ]
Line_5 $$ Class<?> pbServiceImplClazz = null-->Line_12 $$ constructor = pbServiceImplClazz.getConstructor(protocol)[ FD ]
Line_3 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_14 $$ serviceCache.putIfAbsent(protocol, constructor)[ FD ]
Line_3 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_21 $$ service = constructor.newInstance(instance)[ FD ]
Line_30 $$ Method method = protoCache.get(protocol)-->Line_31 $$ if (method == null) [ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_34 $$ protoClazz = localConf.getClassByName(getProtoClassName(protocol))[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_21 $$ service = constructor.newInstance(instance)[ FD ]
Line_34 $$ protoClazz = localConf.getClassByName(getProtoClassName(protocol))-->Line_39 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])[ FD ]
Line_3 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_12 $$ constructor = pbServiceImplClazz.getConstructor(protocol)[ FD ]
Line_29 $$ Class<?> pbProtocol = service.getClass().getInterfaces()[0]-->Line_47 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_30 $$ Method method = protoCache.get(protocol)-->Line_47 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_41 $$ protoCache.putIfAbsent(protocol, method)[ FD ]
Line_31 $$ if (method == null) -->Line_32 $$ Class<?> protoClazz = null[ CD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_30 $$ Method method = protoCache.get(protocol)[ CD ]
Line_19 $$ Object service = null-->Line_29 $$ Class<?> pbProtocol = service.getClass().getInterfaces()[0][ FD ]
Line_19 $$ Object service = null-->Line_21 $$ service = constructor.newInstance(instance)[ FD ]
Line_30 $$ Method method = protoCache.get(protocol)-->Line_41 $$ protoCache.putIfAbsent(protocol, method)[ FD ]
Line_12 $$ constructor = pbServiceImplClazz.getConstructor(protocol)-->Line_14 $$ serviceCache.putIfAbsent(protocol, constructor)[ FD ]
Line_21 $$ service = constructor.newInstance(instance)-->Line_47 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_4 $$ if (constructor == null) [ CD ]
Line_21 $$ service = constructor.newInstance(instance)-->Line_29 $$ Class<?> pbProtocol = service.getClass().getInterfaces()[0][ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_14 $$ serviceCache.putIfAbsent(protocol, constructor)[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_30 $$ Method method = protoCache.get(protocol)[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_36 $$ throw new YarnRuntimeException("Failed to load class: [" + getProtoClassName(protocol) + "]", e)[ FD ]
Line_4 $$ if (constructor == null) -->Line_5 $$ Class<?> pbServiceImplClazz = null[ CD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_19 $$ Object service = null[ CD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_9 $$ throw new YarnRuntimeException("Failed to load class: [" + getPbServiceImplClassName(protocol) + "]", e)[ FD ]
Line_12 $$ constructor = pbServiceImplClazz.getConstructor(protocol)-->Line_13 $$ constructor.setAccessible(true)[ FD ]
Line_32 $$ Class<?> protoClazz = null-->Line_34 $$ protoClazz = localConf.getClassByName(getProtoClassName(protocol))[ FD ]
Line_5 $$ Class<?> pbServiceImplClazz = null-->Line_7 $$ pbServiceImplClazz = localConf.getClassByName(getPbServiceImplClassName(protocol))[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_47 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_29 $$ Class<?> pbProtocol = service.getClass().getInterfaces()[0]-->Line_39 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])[ FD ]
Line_3 $$ Constructor<?> constructor = serviceCache.get(protocol)-->Line_13 $$ constructor.setAccessible(true)[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_12 $$ constructor = pbServiceImplClazz.getConstructor(protocol)[ FD ]
Line_39 $$ method = protoClazz.getMethod("newReflectiveBlockingService", pbProtocol.getInterfaces()[0])-->Line_47 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_7 $$ pbServiceImplClazz = localConf.getClassByName(getPbServiceImplClassName(protocol))[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_3 $$ Constructor<?> constructor = serviceCache.get(protocol)[ FD ]
Line_19 $$ Object service = null-->Line_47 $$ return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig)[ FD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_3 $$ Constructor<?> constructor = serviceCache.get(protocol)[ CD ]
Line_2 $$ public Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig) -->Line_29 $$ Class<?> pbProtocol = service.getClass().getInterfaces()[0][ CD ]
Line_30 $$ Method method = protoCache.get(protocol)-->Line_40 $$ method.setAccessible(true)[ FD ]
