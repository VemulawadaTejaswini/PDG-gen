Line_2 $$ public void channelActive(ChannelHandlerContext ctx) throws Exception -->Line_5 $$ if (limit < 0) [ CD ]
Line_2 $$ public void channelActive(ChannelHandlerContext ctx) throws Exception -->Line_25 $$ ctx.close()[ FD ]
Line_14 $$ InetAddress address = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress()-->Line_18 $$ AtomicLong old = connectionsPerClient.putIfAbsent(address, perIpCount)[ FD ]
Line_8 $$ if (count > limit) -->Line_29 $$ ctx.fireChannelActive()[ CD ]
Line_8 $$ if (count > limit) -->Line_10 $$ ctx.close()[ CD ]
Line_13 $$ if (perIpLimit > 0) -->Line_16 $$ if (perIpCount == null) [ CD ]
Line_4 $$ long limit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnections()-->Line_6 $$ limit = Long.MAX_VALUE[ FD ]
Line_13 $$ if (perIpLimit > 0) -->Line_14 $$ InetAddress address = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress()[ CD ]
Line_23 $$ if (perIpCount.incrementAndGet() > perIpLimit) -->Line_24 $$ logger.warn("Exceeded maximum native connection limit per ip of [ CD ]
Line_15 $$ AtomicLong perIpCount = connectionsPerClient.get(address)-->Line_18 $$ AtomicLong old = connectionsPerClient.putIfAbsent(address, perIpCount)[ FD ]
Line_4 $$ long limit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnections()-->Line_5 $$ if (limit < 0) [ FD ]
Line_2 $$ public void channelActive(ChannelHandlerContext ctx) throws Exception -->Line_8 $$ if (count > limit) [ CD ]
Line_17 $$ perIpCount = new AtomicLong(0)-->Line_18 $$ AtomicLong old = connectionsPerClient.putIfAbsent(address, perIpCount)[ FD ]
Line_2 $$ public void channelActive(ChannelHandlerContext ctx) throws Exception -->Line_3 $$ final long count = counter.incrementAndGet()[ CD ]
Line_12 $$ long perIpLimit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp()-->Line_24 $$ logger.warn("Exceeded maximum native connection limit per ip of [ FD ]
Line_12 $$ long perIpLimit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp()-->Line_23 $$ if (perIpCount.incrementAndGet() > perIpLimit) [ FD ]
Line_15 $$ AtomicLong perIpCount = connectionsPerClient.get(address)-->Line_17 $$ perIpCount = new AtomicLong(0)[ FD ]
Line_14 $$ InetAddress address = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress()-->Line_15 $$ AtomicLong perIpCount = connectionsPerClient.get(address)[ FD ]
Line_15 $$ AtomicLong perIpCount = connectionsPerClient.get(address)-->Line_24 $$ logger.warn("Exceeded maximum native connection limit per ip of [ FD ]
Line_13 $$ if (perIpLimit > 0) -->Line_15 $$ AtomicLong perIpCount = connectionsPerClient.get(address)[ CD ]
Line_17 $$ perIpCount = new AtomicLong(0)-->Line_20 $$ perIpCount = old[ FD ]
Line_17 $$ perIpCount = new AtomicLong(0)-->Line_24 $$ logger.warn("Exceeded maximum native connection limit per ip of [ FD ]
Line_6 $$ limit = Long.MAX_VALUE-->Line_9 $$ logger.warn("Exceeded maximum native connection limit of [ FD ]
Line_4 $$ long limit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnections()-->Line_8 $$ if (count > limit) [ FD ]
Line_16 $$ if (perIpCount == null) -->Line_18 $$ AtomicLong old = connectionsPerClient.putIfAbsent(address, perIpCount)[ CD ]
Line_16 $$ if (perIpCount == null) -->Line_19 $$ if (old != null) [ CD ]
Line_3 $$ final long count = counter.incrementAndGet()-->Line_9 $$ logger.warn("Exceeded maximum native connection limit of [ FD ]
Line_8 $$ if (count > limit) -->Line_9 $$ logger.warn("Exceeded maximum native connection limit of [ CD ]
Line_19 $$ if (old != null) -->Line_20 $$ perIpCount = old[ CD ]
Line_2 $$ public void channelActive(ChannelHandlerContext ctx) throws Exception -->Line_4 $$ long limit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnections()[ CD ]
Line_2 $$ public void channelActive(ChannelHandlerContext ctx) throws Exception -->Line_10 $$ ctx.close()[ FD ]
Line_16 $$ if (perIpCount == null) -->Line_17 $$ perIpCount = new AtomicLong(0)[ CD ]
Line_13 $$ if (perIpLimit > 0) -->Line_23 $$ if (perIpCount.incrementAndGet() > perIpLimit) [ CD ]
Line_15 $$ AtomicLong perIpCount = connectionsPerClient.get(address)-->Line_16 $$ if (perIpCount == null) [ FD ]
Line_20 $$ perIpCount = old-->Line_23 $$ if (perIpCount.incrementAndGet() > perIpLimit) [ FD ]
Line_2 $$ public void channelActive(ChannelHandlerContext ctx) throws Exception -->Line_29 $$ ctx.fireChannelActive()[ FD ]
Line_3 $$ final long count = counter.incrementAndGet()-->Line_8 $$ if (count > limit) [ FD ]
Line_2 $$ public void channelActive(ChannelHandlerContext ctx) throws Exception -->Line_14 $$ InetAddress address = ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress()[ FD ]
Line_18 $$ AtomicLong old = connectionsPerClient.putIfAbsent(address, perIpCount)-->Line_19 $$ if (old != null) [ FD ]
Line_18 $$ AtomicLong old = connectionsPerClient.putIfAbsent(address, perIpCount)-->Line_20 $$ perIpCount = old[ FD ]
Line_4 $$ long limit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnections()-->Line_9 $$ logger.warn("Exceeded maximum native connection limit of [ FD ]
Line_15 $$ AtomicLong perIpCount = connectionsPerClient.get(address)-->Line_23 $$ if (perIpCount.incrementAndGet() > perIpLimit) [ FD ]
Line_17 $$ perIpCount = new AtomicLong(0)-->Line_23 $$ if (perIpCount.incrementAndGet() > perIpLimit) [ FD ]
Line_5 $$ if (limit < 0) -->Line_6 $$ limit = Long.MAX_VALUE[ CD ]
Line_8 $$ if (count > limit) -->Line_12 $$ long perIpLimit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp()[ CD ]
Line_12 $$ long perIpLimit = DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp()-->Line_13 $$ if (perIpLimit > 0) [ FD ]
Line_20 $$ perIpCount = old-->Line_24 $$ logger.warn("Exceeded maximum native connection limit per ip of [ FD ]
Line_23 $$ if (perIpCount.incrementAndGet() > perIpLimit) -->Line_25 $$ ctx.close()[ CD ]
Line_6 $$ limit = Long.MAX_VALUE-->Line_8 $$ if (count > limit) [ FD ]
Line_15 $$ AtomicLong perIpCount = connectionsPerClient.get(address)-->Line_20 $$ perIpCount = old[ FD ]
Line_8 $$ if (count > limit) -->Line_13 $$ if (perIpLimit > 0) [ CD ]
Line_23 $$ if (perIpCount.incrementAndGet() > perIpLimit) -->Line_26 $$ return[ CD ]
