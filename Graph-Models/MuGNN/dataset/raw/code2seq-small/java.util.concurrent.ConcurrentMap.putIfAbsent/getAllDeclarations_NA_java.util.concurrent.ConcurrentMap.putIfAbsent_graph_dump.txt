Line_4 $$ List<DeclarationHolder> declarations = cache.get(this)-->Line_7 $$ cache.putIfAbsent(this, declarations)[ FD ]
Line_5 $$ if (declarations == null) -->Line_6 $$ declarations = collectDeclarations(place)[ CD ]
Line_4 $$ List<DeclarationHolder> declarations = cache.get(this)-->Line_5 $$ if (declarations == null) [ FD ]
Line_3 $$ ConcurrentMap<DeclarationCacheKey, List<DeclarationHolder>> cache = CachedValuesManager.getCachedValue(place, VALUE_PROVIDER)-->Line_7 $$ cache.putIfAbsent(this, declarations)[ FD ]
Line_2 $$ private List<DeclarationHolder> getAllDeclarations(PsiElement place) -->Line_5 $$ if (declarations == null) [ CD ]
Line_2 $$ private List<DeclarationHolder> getAllDeclarations(PsiElement place) -->Line_4 $$ List<DeclarationHolder> declarations = cache.get(this)[ CD ]
Line_2 $$ private List<DeclarationHolder> getAllDeclarations(PsiElement place) -->Line_3 $$ ConcurrentMap<DeclarationCacheKey, List<DeclarationHolder>> cache = CachedValuesManager.getCachedValue(place, VALUE_PROVIDER)[ CD ]
Line_6 $$ declarations = collectDeclarations(place)-->Line_7 $$ cache.putIfAbsent(this, declarations)[ FD ]
Line_4 $$ List<DeclarationHolder> declarations = cache.get(this)-->Line_6 $$ declarations = collectDeclarations(place)[ FD ]
Line_2 $$ private List<DeclarationHolder> getAllDeclarations(PsiElement place) -->Line_9 $$ return declarations[ CD ]
Line_2 $$ private List<DeclarationHolder> getAllDeclarations(PsiElement place) -->Line_3 $$ ConcurrentMap<DeclarationCacheKey, List<DeclarationHolder>> cache = CachedValuesManager.getCachedValue(place, VALUE_PROVIDER)[ FD ]
Line_3 $$ ConcurrentMap<DeclarationCacheKey, List<DeclarationHolder>> cache = CachedValuesManager.getCachedValue(place, VALUE_PROVIDER)-->Line_4 $$ List<DeclarationHolder> declarations = cache.get(this)[ FD ]
Line_5 $$ if (declarations == null) -->Line_7 $$ cache.putIfAbsent(this, declarations)[ CD ]
Line_2 $$ private List<DeclarationHolder> getAllDeclarations(PsiElement place) -->Line_6 $$ declarations = collectDeclarations(place)[ FD ]
