Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_30 $$ log.tracef("registerPendingPut(%s#%s, %d) ended with %s", cache.getName(), key, txTimestamp, existing)[ FD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)[ FD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_39 $$ log.tracef("registerPendingPut(%s#%s, %d) registered using putIfAbsent: %s", cache.getName(), key, txTimestamp, pendingForKey)[ FD ]
Line_17 $$ if (existing.isRemoved()) -->Line_18 $$ if (trace) [ CD ]
Line_10 $$ final PendingPut pendingPut = new PendingPut(session)-->Line_24 $$ existing.put(pendingPut)[ FD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_3 $$ long invalidationTimestamp = this.regionInvalidationTimestamp[ CD ]
Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)-->Line_23 $$ if (!existing.hasInvalidator()) [ FD ]
Line_4 $$ if (txTimestamp <= invalidationTimestamp) -->Line_5 $$ if (trace) [ CD ]
Line_23 $$ if (!existing.hasInvalidator()) -->Line_24 $$ existing.put(pendingPut)[ CD ]
Line_15 $$ if (existing.acquireLock(10, TimeUnit.SECONDS)) -->Line_29 $$ if (trace) [ CD ]
Line_11 $$ final PendingPutMap pendingForKey = new PendingPutMap(pendingPut)-->Line_39 $$ log.tracef("registerPendingPut(%s#%s, %d) registered using putIfAbsent: %s", cache.getName(), key, txTimestamp, pendingForKey)[ FD ]
Line_38 $$ if (trace) -->Line_39 $$ log.tracef("registerPendingPut(%s#%s, %d) registered using putIfAbsent: %s", cache.getName(), key, txTimestamp, pendingForKey)[ CD ]
Line_18 $$ if (trace) -->Line_19 $$ log.tracef("Record removed when waiting for the lock.")[ CD ]
Line_12 $$ for (; ; ) -->Line_42 $$ return[ CD ]
Line_15 $$ if (existing.acquireLock(10, TimeUnit.SECONDS)) -->Line_33 $$ if (trace) [ CD ]
Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)-->Line_15 $$ if (existing.acquireLock(10, TimeUnit.SECONDS)) [ FD ]
Line_12 $$ for (; ; ) -->Line_14 $$ if (existing != null) [ CD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_4 $$ if (txTimestamp <= invalidationTimestamp) [ CD ]
Line_33 $$ if (trace) -->Line_34 $$ log.tracef("registerPendingPut(%s#%s, %d) failed to acquire lock", cache.getName(), key, txTimestamp)[ CD ]
Line_5 $$ if (trace) -->Line_6 $$ log.tracef("registerPendingPut(%s#%s, %d) skipped due to region invalidation (%d)", cache.getName(), key, txTimestamp, invalidationTimestamp)[ CD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_6 $$ log.tracef("registerPendingPut(%s#%s, %d) skipped due to region invalidation (%d)", cache.getName(), key, txTimestamp, invalidationTimestamp)[ FD ]
Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)-->Line_24 $$ existing.put(pendingPut)[ FD ]
Line_4 $$ if (txTimestamp <= invalidationTimestamp) -->Line_8 $$ return[ CD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_10 $$ final PendingPut pendingPut = new PendingPut(session)[ CD ]
Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)-->Line_17 $$ if (existing.isRemoved()) [ FD ]
Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)-->Line_14 $$ if (existing != null) [ FD ]
Line_12 $$ for (; ; ) -->Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)[ CD ]
Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)-->Line_30 $$ log.tracef("registerPendingPut(%s#%s, %d) ended with %s", cache.getName(), key, txTimestamp, existing)[ FD ]
Line_14 $$ if (existing != null) -->Line_15 $$ if (existing.acquireLock(10, TimeUnit.SECONDS)) [ CD ]
Line_11 $$ final PendingPutMap pendingForKey = new PendingPutMap(pendingPut)-->Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)[ FD ]
Line_14 $$ if (existing != null) -->Line_38 $$ if (trace) [ CD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_12 $$ for (; ; ) [ CD ]
Line_29 $$ if (trace) -->Line_30 $$ log.tracef("registerPendingPut(%s#%s, %d) ended with %s", cache.getName(), key, txTimestamp, existing)[ CD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_34 $$ log.tracef("registerPendingPut(%s#%s, %d) failed to acquire lock", cache.getName(), key, txTimestamp)[ FD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_4 $$ if (txTimestamp <= invalidationTimestamp) [ FD ]
Line_3 $$ long invalidationTimestamp = this.regionInvalidationTimestamp-->Line_6 $$ log.tracef("registerPendingPut(%s#%s, %d) skipped due to region invalidation (%d)", cache.getName(), key, txTimestamp, invalidationTimestamp)[ FD ]
Line_2 $$ public void registerPendingPut(SessionImplementor session, Object key, long txTimestamp) -->Line_11 $$ final PendingPutMap pendingForKey = new PendingPutMap(pendingPut)[ CD ]
Line_3 $$ long invalidationTimestamp = this.regionInvalidationTimestamp-->Line_4 $$ if (txTimestamp <= invalidationTimestamp) [ FD ]
Line_13 $$ final PendingPutMap existing = pendingPuts.putIfAbsent(key, pendingForKey)-->Line_27 $$ existing.releaseLock()[ FD ]
