Line_30 $$ Matcher matcher = pattern.matcher(leftString)-->Line_31 $$ return BooleanTypedValue.forValue(matcher.matches())[ FD ]
Line_25 $$ Pattern pattern = this.patternCache.get(rightString)-->Line_26 $$ if (pattern == null) [ FD ]
Line_24 $$ String rightString = (String) right-->Line_28 $$ this.patternCache.putIfAbsent(rightString, pattern)[ FD ]
Line_23 $$ String leftString = (String) left-->Line_30 $$ Matcher matcher = pattern.matcher(leftString)[ FD ]
Line_24 $$ String rightString = (String) right-->Line_25 $$ Pattern pattern = this.patternCache.get(rightString)[ FD ]
Line_25 $$ Pattern pattern = this.patternCache.get(rightString)-->Line_28 $$ this.patternCache.putIfAbsent(rightString, pattern)[ FD ]
Line_12 $$ SpelNodeImpl leftOp = getLeftOperand()-->Line_17 $$ throw new SpelEvaluationException(leftOp.getStartPosition(), SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, left)[ FD ]
Line_25 $$ Pattern pattern = this.patternCache.get(rightString)-->Line_27 $$ pattern = Pattern.compile(rightString)[ FD ]
Line_24 $$ String rightString = (String) right-->Line_27 $$ pattern = Pattern.compile(rightString)[ FD ]
Line_27 $$ pattern = Pattern.compile(rightString)-->Line_28 $$ this.patternCache.putIfAbsent(rightString, pattern)[ FD ]
Line_27 $$ pattern = Pattern.compile(rightString)-->Line_30 $$ Matcher matcher = pattern.matcher(leftString)[ FD ]
Line_26 $$ if (pattern == null) -->Line_27 $$ pattern = Pattern.compile(rightString)[ CD ]
Line_13 $$ SpelNodeImpl rightOp = getRightOperand()-->Line_33 $$ throw new SpelEvaluationException(rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right)[ FD ]
Line_13 $$ SpelNodeImpl rightOp = getRightOperand()-->Line_20 $$ throw new SpelEvaluationException(rightOp.getStartPosition(), SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)[ FD ]
Line_25 $$ Pattern pattern = this.patternCache.get(rightString)-->Line_30 $$ Matcher matcher = pattern.matcher(leftString)[ FD ]
Line_12 $$ SpelNodeImpl leftOp = getLeftOperand()-->Line_14 $$ Object left = leftOp.getValue(state, String.class)[ FD ]
Line_26 $$ if (pattern == null) -->Line_28 $$ this.patternCache.putIfAbsent(rightString, pattern)[ CD ]
