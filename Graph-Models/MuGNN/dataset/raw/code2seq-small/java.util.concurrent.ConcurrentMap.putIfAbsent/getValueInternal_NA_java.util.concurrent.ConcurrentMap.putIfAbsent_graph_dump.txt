Line_15 $$ String rightString = (String) right-->Line_16 $$ Pattern pattern = this.patternCache.get(rightString)[ FD ]
Line_2 $$ public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_3 $$ SpelNodeImpl leftOp = getLeftOperand()[ CD ]
Line_2 $$ public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_6 $$ Object right = getRightOperand().getValueInternal(state).getValue()[ CD ]
Line_18 $$ pattern = Pattern.compile(rightString)-->Line_19 $$ this.patternCache.putIfAbsent(rightString, pattern)[ FD ]
Line_16 $$ Pattern pattern = this.patternCache.get(rightString)-->Line_19 $$ this.patternCache.putIfAbsent(rightString, pattern)[ FD ]
Line_2 $$ public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_7 $$ if (!(left instanceof String)) [ CD ]
Line_2 $$ public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_5 $$ Object left = leftOp.getValue(state, String.class)[ FD ]
Line_2 $$ public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_10 $$ if (!(right instanceof String)) [ CD ]
Line_2 $$ public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_4 $$ SpelNodeImpl rightOp = getRightOperand()[ CD ]
Line_15 $$ String rightString = (String) right-->Line_19 $$ this.patternCache.putIfAbsent(rightString, pattern)[ FD ]
Line_17 $$ if (pattern == null) -->Line_18 $$ pattern = Pattern.compile(rightString)[ CD ]
Line_17 $$ if (pattern == null) -->Line_19 $$ this.patternCache.putIfAbsent(rightString, pattern)[ CD ]
Line_15 $$ String rightString = (String) right-->Line_18 $$ pattern = Pattern.compile(rightString)[ FD ]
Line_2 $$ public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_6 $$ Object right = getRightOperand().getValueInternal(state).getValue()[ FD ]
Line_18 $$ pattern = Pattern.compile(rightString)-->Line_21 $$ Matcher matcher = pattern.matcher(leftString)[ FD ]
Line_16 $$ Pattern pattern = this.patternCache.get(rightString)-->Line_17 $$ if (pattern == null) [ FD ]
Line_3 $$ SpelNodeImpl leftOp = getLeftOperand()-->Line_5 $$ Object left = leftOp.getValue(state, String.class)[ FD ]
Line_4 $$ SpelNodeImpl rightOp = getRightOperand()-->Line_24 $$ throw new SpelEvaluationException(rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right)[ FD ]
Line_2 $$ public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_5 $$ Object left = leftOp.getValue(state, String.class)[ CD ]
Line_21 $$ Matcher matcher = pattern.matcher(leftString)-->Line_22 $$ return BooleanTypedValue.forValue(matcher.matches())[ FD ]
Line_3 $$ SpelNodeImpl leftOp = getLeftOperand()-->Line_8 $$ throw new SpelEvaluationException(leftOp.getStartPosition(), SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, left)[ FD ]
Line_16 $$ Pattern pattern = this.patternCache.get(rightString)-->Line_21 $$ Matcher matcher = pattern.matcher(leftString)[ FD ]
Line_14 $$ String leftString = (String) left-->Line_21 $$ Matcher matcher = pattern.matcher(leftString)[ FD ]
Line_16 $$ Pattern pattern = this.patternCache.get(rightString)-->Line_18 $$ pattern = Pattern.compile(rightString)[ FD ]
Line_4 $$ SpelNodeImpl rightOp = getRightOperand()-->Line_11 $$ throw new SpelEvaluationException(rightOp.getStartPosition(), SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)[ FD ]
