Line_5 $$ PendingPutMap prev = pendingPuts.putIfAbsent(key, pending)-->Line_7 $$ pending = prev[ FD ]
Line_4 $$ PendingPutMap pending = new PendingPutMap(null)-->Line_18 $$ pending.invalidate(now)[ FD ]
Line_7 $$ pending = prev-->Line_18 $$ pending.invalidate(now)[ FD ]
Line_3 $$ for (; ; ) -->Line_5 $$ PendingPutMap prev = pendingPuts.putIfAbsent(key, pending)[ CD ]
Line_4 $$ PendingPutMap pending = new PendingPutMap(null)-->Line_24 $$ log.tracef("beginInvalidatingKey(%s#%s, %s) ends with %s", cache.getName(), key, lockOwnerToString(lockOwner), pending)[ FD ]
Line_7 $$ pending = prev-->Line_24 $$ log.tracef("beginInvalidatingKey(%s#%s, %s) ends with %s", cache.getName(), key, lockOwnerToString(lockOwner), pending)[ FD ]
Line_9 $$ if (pending.acquireLock(60, TimeUnit.SECONDS)) -->Line_29 $$ return false[ CD ]
Line_7 $$ pending = prev-->Line_21 $$ pending.releaseLock()[ FD ]
Line_12 $$ if (trace) -->Line_13 $$ log.tracef("Record removed when waiting for the lock.")[ CD ]
Line_3 $$ for (; ; ) -->Line_9 $$ if (pending.acquireLock(60, TimeUnit.SECONDS)) [ CD ]
Line_4 $$ PendingPutMap pending = new PendingPutMap(null)-->Line_11 $$ if (pending.isRemoved()) [ FD ]
Line_4 $$ PendingPutMap pending = new PendingPutMap(null)-->Line_5 $$ PendingPutMap prev = pendingPuts.putIfAbsent(key, pending)[ FD ]
Line_7 $$ pending = prev-->Line_9 $$ if (pending.acquireLock(60, TimeUnit.SECONDS)) [ FD ]
Line_5 $$ PendingPutMap prev = pendingPuts.putIfAbsent(key, pending)-->Line_6 $$ if (prev != null) [ FD ]
Line_6 $$ if (prev != null) -->Line_7 $$ pending = prev[ CD ]
Line_4 $$ PendingPutMap pending = new PendingPutMap(null)-->Line_19 $$ pending.addInvalidator(lockOwner, valueForPFER, now)[ FD ]
Line_2 $$ public boolean beginInvalidatingWithPFER(Object lockOwner, Object key, Object valueForPFER) -->Line_3 $$ for (; ; ) [ CD ]
Line_9 $$ if (pending.acquireLock(60, TimeUnit.SECONDS)) -->Line_28 $$ log.tracef("beginInvalidatingKey(%s#%s, %s) failed to acquire lock", cache.getName(), key, lockOwnerToString(lockOwner))[ CD ]
Line_23 $$ if (trace) -->Line_24 $$ log.tracef("beginInvalidatingKey(%s#%s, %s) ends with %s", cache.getName(), key, lockOwnerToString(lockOwner), pending)[ CD ]
Line_7 $$ pending = prev-->Line_11 $$ if (pending.isRemoved()) [ FD ]
Line_17 $$ long now = System.currentTimeMillis()-->Line_19 $$ pending.addInvalidator(lockOwner, valueForPFER, now)[ FD ]
Line_2 $$ public boolean beginInvalidatingWithPFER(Object lockOwner, Object key, Object valueForPFER) -->Line_5 $$ PendingPutMap prev = pendingPuts.putIfAbsent(key, pending)[ FD ]
Line_7 $$ pending = prev-->Line_5 $$ PendingPutMap prev = pendingPuts.putIfAbsent(key, pending)[ FD ]
Line_9 $$ if (pending.acquireLock(60, TimeUnit.SECONDS)) -->Line_26 $$ return true[ CD ]
Line_4 $$ PendingPutMap pending = new PendingPutMap(null)-->Line_7 $$ pending = prev[ FD ]
Line_7 $$ pending = prev-->Line_19 $$ pending.addInvalidator(lockOwner, valueForPFER, now)[ FD ]
Line_9 $$ if (pending.acquireLock(60, TimeUnit.SECONDS)) -->Line_23 $$ if (trace) [ CD ]
Line_2 $$ public boolean beginInvalidatingWithPFER(Object lockOwner, Object key, Object valueForPFER) -->Line_28 $$ log.tracef("beginInvalidatingKey(%s#%s, %s) failed to acquire lock", cache.getName(), key, lockOwnerToString(lockOwner))[ FD ]
Line_3 $$ for (; ; ) -->Line_4 $$ PendingPutMap pending = new PendingPutMap(null)[ CD ]
Line_4 $$ PendingPutMap pending = new PendingPutMap(null)-->Line_9 $$ if (pending.acquireLock(60, TimeUnit.SECONDS)) [ FD ]
Line_11 $$ if (pending.isRemoved()) -->Line_12 $$ if (trace) [ CD ]
Line_17 $$ long now = System.currentTimeMillis()-->Line_18 $$ pending.invalidate(now)[ FD ]
Line_2 $$ public boolean beginInvalidatingWithPFER(Object lockOwner, Object key, Object valueForPFER) -->Line_19 $$ pending.addInvalidator(lockOwner, valueForPFER, now)[ FD ]
Line_4 $$ PendingPutMap pending = new PendingPutMap(null)-->Line_21 $$ pending.releaseLock()[ FD ]
Line_2 $$ public boolean beginInvalidatingWithPFER(Object lockOwner, Object key, Object valueForPFER) -->Line_24 $$ log.tracef("beginInvalidatingKey(%s#%s, %s) ends with %s", cache.getName(), key, lockOwnerToString(lockOwner), pending)[ FD ]
Line_3 $$ for (; ; ) -->Line_6 $$ if (prev != null) [ CD ]
