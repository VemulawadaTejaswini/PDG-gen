Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_11 $$ results = new CachedIntrospectionResults(beanClass)[ CD ]
Line_11 $$ results = new CachedIntrospectionResults(beanClass)-->Line_21 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_3 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_8 $$ if (results != null) [ FD ]
Line_3 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_11 $$ results = new CachedIntrospectionResults(beanClass)[ FD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_3 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)[ FD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_4 $$ if (results != null) [ CD ]
Line_12 $$ ConcurrentMap<Class<?>, CachedIntrospectionResults> classCacheToUse-->Line_19 $$ classCacheToUse = softClassCache[ FD ]
Line_4 $$ if (results != null) -->Line_5 $$ return results[ CD ]
Line_14 $$ classCacheToUse = strongClassCache-->Line_19 $$ classCacheToUse = softClassCache[ FD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_22 $$ return (existing != null ? existing : results)[ CD ]
Line_13 $$ if (ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) || isClassLoaderAccepted(beanClass.getClassLoader())) -->Line_14 $$ classCacheToUse = strongClassCache[ CD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_13 $$ if (ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) || isClassLoaderAccepted(beanClass.getClassLoader())) [ FD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_21 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_8 $$ if (results != null) -->Line_9 $$ return results[ CD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_17 $$ logger.debug("Not strongly caching class [" + beanClass.getName() + "] because it is not cache-safe")[ FD ]
Line_3 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_21 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_14 $$ classCacheToUse = strongClassCache-->Line_21 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_16 $$ if (logger.isDebugEnabled()) -->Line_17 $$ logger.debug("Not strongly caching class [" + beanClass.getName() + "] because it is not cache-safe")[ CD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_12 $$ ConcurrentMap<Class<?>, CachedIntrospectionResults> classCacheToUse[ CD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_8 $$ if (results != null) [ CD ]
Line_12 $$ ConcurrentMap<Class<?>, CachedIntrospectionResults> classCacheToUse-->Line_14 $$ classCacheToUse = strongClassCache[ FD ]
Line_12 $$ ConcurrentMap<Class<?>, CachedIntrospectionResults> classCacheToUse-->Line_21 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_7 $$ results = softClassCache.get(beanClass)-->Line_21 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_7 $$ results = softClassCache.get(beanClass)-->Line_11 $$ results = new CachedIntrospectionResults(beanClass)[ FD ]
Line_19 $$ classCacheToUse = softClassCache-->Line_21 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_7 $$ results = softClassCache.get(beanClass)-->Line_8 $$ if (results != null) [ FD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_21 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ CD ]
Line_13 $$ if (ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) || isClassLoaderAccepted(beanClass.getClassLoader())) -->Line_19 $$ classCacheToUse = softClassCache[ CD ]
Line_3 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_4 $$ if (results != null) [ FD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_7 $$ results = softClassCache.get(beanClass)[ CD ]
Line_3 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_7 $$ results = softClassCache.get(beanClass)[ FD ]
Line_13 $$ if (ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) || isClassLoaderAccepted(beanClass.getClassLoader())) -->Line_16 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_13 $$ if (ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) || isClassLoaderAccepted(beanClass.getClassLoader())) [ CD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_7 $$ results = softClassCache.get(beanClass)[ FD ]
Line_2 $$ static CachedIntrospectionResults forClass(Class<?> beanClass) throws BeansException -->Line_3 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)[ CD ]
