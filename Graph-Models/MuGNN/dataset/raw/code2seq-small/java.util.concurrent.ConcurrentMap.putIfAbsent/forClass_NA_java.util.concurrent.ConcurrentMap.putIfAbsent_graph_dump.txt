Line_26 $$ classCacheToUse = softClassCache-->Line_28 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_14 $$ results = softClassCache.get(beanClass)-->Line_28 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_20 $$ if (ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) || isClassLoaderAccepted(beanClass.getClassLoader())) -->Line_23 $$ if (logger.isDebugEnabled()) [ CD ]
Line_19 $$ ConcurrentMap<Class<?>, CachedIntrospectionResults> classCacheToUse-->Line_21 $$ classCacheToUse = strongClassCache[ FD ]
Line_20 $$ if (ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) || isClassLoaderAccepted(beanClass.getClassLoader())) -->Line_21 $$ classCacheToUse = strongClassCache[ CD ]
Line_18 $$ results = new CachedIntrospectionResults(beanClass)-->Line_28 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_14 $$ results = softClassCache.get(beanClass)-->Line_15 $$ if (results != null) [ FD ]
Line_10 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_15 $$ if (results != null) [ FD ]
Line_21 $$ classCacheToUse = strongClassCache-->Line_28 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_20 $$ if (ClassUtils.isCacheSafe(beanClass, CachedIntrospectionResults.class.getClassLoader()) || isClassLoaderAccepted(beanClass.getClassLoader())) -->Line_26 $$ classCacheToUse = softClassCache[ CD ]
Line_10 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_18 $$ results = new CachedIntrospectionResults(beanClass)[ FD ]
Line_21 $$ classCacheToUse = strongClassCache-->Line_26 $$ classCacheToUse = softClassCache[ FD ]
Line_10 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_11 $$ if (results != null) [ FD ]
Line_10 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_14 $$ results = softClassCache.get(beanClass)[ FD ]
Line_15 $$ if (results != null) -->Line_16 $$ return results[ CD ]
Line_19 $$ ConcurrentMap<Class<?>, CachedIntrospectionResults> classCacheToUse-->Line_28 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_10 $$ CachedIntrospectionResults results = strongClassCache.get(beanClass)-->Line_28 $$ CachedIntrospectionResults existing = classCacheToUse.putIfAbsent(beanClass, results)[ FD ]
Line_14 $$ results = softClassCache.get(beanClass)-->Line_18 $$ results = new CachedIntrospectionResults(beanClass)[ FD ]
Line_11 $$ if (results != null) -->Line_12 $$ return results[ CD ]
Line_23 $$ if (logger.isDebugEnabled()) -->Line_24 $$ logger.debug("Not strongly caching class [" + beanClass.getName() + "] because it is not cache-safe")[ CD ]
Line_19 $$ ConcurrentMap<Class<?>, CachedIntrospectionResults> classCacheToUse-->Line_26 $$ classCacheToUse = softClassCache[ FD ]
