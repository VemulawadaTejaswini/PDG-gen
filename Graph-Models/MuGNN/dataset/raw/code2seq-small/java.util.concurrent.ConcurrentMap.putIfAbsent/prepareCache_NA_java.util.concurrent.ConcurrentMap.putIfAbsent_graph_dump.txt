Line_3 $$ final Object key = transactionSynchronizationRegistry.getTransactionKey()-->Line_21 $$ cache.remove(key)[ FD ]
Line_8 $$ map = Collections.synchronizedMap(new HashMap<Object, CacheEntry>())-->Line_9 $$ final Map<Object, CacheEntry> existing = cache.putIfAbsent(key, map)[ FD ]
Line_2 $$ private Map<Object, CacheEntry> prepareCache() -->Line_10 $$ if (existing != null) [ CD ]
Line_9 $$ final Map<Object, CacheEntry> existing = cache.putIfAbsent(key, map)-->Line_11 $$ map = existing[ FD ]
Line_4 $$ Map<Object, CacheEntry> map = cache.get(key)-->Line_8 $$ map = Collections.synchronizedMap(new HashMap<Object, CacheEntry>())[ FD ]
Line_8 $$ map = Collections.synchronizedMap(new HashMap<Object, CacheEntry>())-->Line_11 $$ map = existing[ FD ]
Line_3 $$ final Object key = transactionSynchronizationRegistry.getTransactionKey()-->Line_4 $$ Map<Object, CacheEntry> map = cache.get(key)[ FD ]
Line_2 $$ private Map<Object, CacheEntry> prepareCache() -->Line_13 $$ transactionSynchronizationRegistry.registerInterposedSynchronization(new Synchronization() [ CD ]
Line_2 $$ private Map<Object, CacheEntry> prepareCache() -->Line_3 $$ final Object key = transactionSynchronizationRegistry.getTransactionKey()[ CD ]
Line_5 $$ if (map != null) -->Line_6 $$ return map[ CD ]
Line_10 $$ if (existing != null) -->Line_11 $$ map = existing[ CD ]
Line_9 $$ final Map<Object, CacheEntry> existing = cache.putIfAbsent(key, map)-->Line_10 $$ if (existing != null) [ FD ]
Line_4 $$ Map<Object, CacheEntry> map = cache.get(key)-->Line_11 $$ map = existing[ FD ]
Line_2 $$ private Map<Object, CacheEntry> prepareCache() -->Line_24 $$ return map[ CD ]
Line_2 $$ private Map<Object, CacheEntry> prepareCache() -->Line_8 $$ map = Collections.synchronizedMap(new HashMap<Object, CacheEntry>())[ CD ]
Line_2 $$ private Map<Object, CacheEntry> prepareCache() -->Line_4 $$ Map<Object, CacheEntry> map = cache.get(key)[ CD ]
Line_3 $$ final Object key = transactionSynchronizationRegistry.getTransactionKey()-->Line_9 $$ final Map<Object, CacheEntry> existing = cache.putIfAbsent(key, map)[ FD ]
Line_4 $$ Map<Object, CacheEntry> map = cache.get(key)-->Line_9 $$ final Map<Object, CacheEntry> existing = cache.putIfAbsent(key, map)[ FD ]
Line_4 $$ Map<Object, CacheEntry> map = cache.get(key)-->Line_5 $$ if (map != null) [ FD ]
Line_2 $$ private Map<Object, CacheEntry> prepareCache() -->Line_5 $$ if (map != null) [ CD ]
Line_2 $$ private Map<Object, CacheEntry> prepareCache() -->Line_9 $$ final Map<Object, CacheEntry> existing = cache.putIfAbsent(key, map)[ CD ]
Line_13 $$ transactionSynchronizationRegistry.registerInterposedSynchronization(new Synchronization() -->Line_21 $$ cache.remove(key)[ CD ]
