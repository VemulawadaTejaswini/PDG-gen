Line_2 $$ private void triggerRequestResponseCycleOnQueue() throws Exception -->Line_3 $$ final InitialContext ctx = new InitialContext()[ CD ]
Line_9 $$ final Queue replyDestination = session.createTemporaryQueue()-->Line_12 $$ message.setJMSReplyTo(replyDestination)[ FD ]
Line_14 $$ final MessageProducer producer = session.createProducer(destination)-->Line_17 $$ producer.close()[ FD ]
Line_15 $$ final QueueReceiver receiver = session.createReceiver(replyDestination)-->Line_18 $$ final Message reply = receiver.receive(TimeoutUtil.adjust(5000))[ FD ]
Line_5 $$ final QueueConnection connection = factory.createQueueConnection()-->Line_8 $$ final QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)[ FD ]
Line_8 $$ final QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_9 $$ final Queue replyDestination = session.createTemporaryQueue()[ FD ]
Line_13 $$ final Destination destination = (Destination) ctx.lookup(Constants.QUEUE_JNDI_NAME)-->Line_14 $$ final MessageProducer producer = session.createProducer(destination)[ FD ]
Line_8 $$ final QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_15 $$ final QueueReceiver receiver = session.createReceiver(replyDestination)[ FD ]
Line_5 $$ final QueueConnection connection = factory.createQueueConnection()-->Line_7 $$ connection.start()[ FD ]
Line_4 $$ final QueueConnectionFactory factory = (QueueConnectionFactory) ctx.lookup("java:/JmsXA")-->Line_5 $$ final QueueConnection connection = factory.createQueueConnection()[ FD ]
Line_14 $$ final MessageProducer producer = session.createProducer(destination)-->Line_16 $$ producer.send(message)[ FD ]
Line_3 $$ final InitialContext ctx = new InitialContext()-->Line_4 $$ final QueueConnectionFactory factory = (QueueConnectionFactory) ctx.lookup("java:/JmsXA")[ FD ]
Line_23 $$ if (connection != null) -->Line_24 $$ safeClose(connection)[ CD ]
Line_11 $$ final Message message = session.createTextMessage(requestMessage)-->Line_12 $$ message.setJMSReplyTo(replyDestination)[ FD ]
Line_8 $$ final QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_14 $$ final MessageProducer producer = session.createProducer(destination)[ FD ]
Line_2 $$ private void triggerRequestResponseCycleOnQueue() throws Exception -->Line_5 $$ final QueueConnection connection = factory.createQueueConnection()[ CD ]
Line_10 $$ final String requestMessage = "test"-->Line_11 $$ final Message message = session.createTextMessage(requestMessage)[ FD ]
Line_5 $$ final QueueConnection connection = factory.createQueueConnection()-->Line_23 $$ if (connection != null) [ FD ]
Line_2 $$ private void triggerRequestResponseCycleOnQueue() throws Exception -->Line_4 $$ final QueueConnectionFactory factory = (QueueConnectionFactory) ctx.lookup("java:/JmsXA")[ CD ]
Line_18 $$ final Message reply = receiver.receive(TimeoutUtil.adjust(5000))-->Line_19 $$ assertNotNull("Did not receive a reply on the reply queue. Perhaps the original (request) message didn't make it to the MDB?", reply)[ FD ]
Line_9 $$ final Queue replyDestination = session.createTemporaryQueue()-->Line_15 $$ final QueueReceiver receiver = session.createReceiver(replyDestination)[ FD ]
Line_5 $$ final QueueConnection connection = factory.createQueueConnection()-->Line_24 $$ safeClose(connection)[ FD ]
Line_11 $$ final Message message = session.createTextMessage(requestMessage)-->Line_16 $$ producer.send(message)[ FD ]
Line_20 $$ final String result = ((TextMessage) reply).getText()-->Line_21 $$ assertEquals("Unexpected reply messsage", Constants.REPLY_MESSAGE_PREFIX + requestMessage, result)[ FD ]
Line_8 $$ final QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_11 $$ final Message message = session.createTextMessage(requestMessage)[ FD ]
Line_3 $$ final InitialContext ctx = new InitialContext()-->Line_13 $$ final Destination destination = (Destination) ctx.lookup(Constants.QUEUE_JNDI_NAME)[ FD ]
