Line_2 $$ public void testGroupValidation() throws NamingException -->Line_14 $$ car.setModel("SKODA Octavia")[ CD ]
Line_3 $$ Validator validator = (Validator) new InitialContext().lookup("java:comp/Validator")-->Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)[ FD ]
Line_21 $$ result = validator.validate(car)-->Line_22 $$ assertEquals(1, result.size())[ FD ]
Line_3 $$ Validator validator = (Validator) new InitialContext().lookup("java:comp/Validator")-->Line_34 $$ assertEquals(0, validator.validate(car).size())[ FD ]
Line_3 $$ Validator validator = (Validator) new InitialContext().lookup("java:comp/Validator")-->Line_31 $$ assertEquals(0, validator.validate(car, DriverChecks.class).size())[ FD ]
Line_21 $$ result = validator.validate(car)-->Line_26 $$ assertEquals(2, result.size())[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_28 $$ Set<ConstraintViolation<Car>> driverResult = validator.validate(car, DriverChecks.class)[ CD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_32 $$ car.setSeats(5)[ FD ]
Line_7 $$ UserBean user2 = new UserBean("Mickey", "Mouse")-->Line_9 $$ user2.setAddress("DISNEY CA USA")[ FD ]
Line_3 $$ Validator validator = (Validator) new InitialContext().lookup("java:comp/Validator")-->Line_25 $$ result = validator.validate(car)[ FD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)[ FD ]
Line_21 $$ result = validator.validate(car)-->Line_23 $$ assertEquals("The Car has to pass the fuel test and inspection test before being driven", result.iterator().next().getMessage())[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_13 $$ Car car = new Car("CET5678", passengers)[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_22 $$ assertEquals(1, result.size())[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_8 $$ user2.setEmail("mickey@gmail.com")[ CD ]
Line_4 $$ UserBean user1 = new UserBean("MADHUMITA", "SADHUKHAN")-->Line_6 $$ user1.setAddress("REDHAT Brno")[ FD ]
Line_10 $$ List<UserBean> passengers = new ArrayList<UserBean>()-->Line_11 $$ passengers.add(user1)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_34 $$ assertEquals(0, validator.validate(car).size())[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_7 $$ UserBean user2 = new UserBean("Mickey", "Mouse")[ CD ]
Line_28 $$ Set<ConstraintViolation<Car>> driverResult = validator.validate(car, DriverChecks.class)-->Line_29 $$ assertEquals(1, driverResult.size())[ FD ]
Line_25 $$ result = validator.validate(car)-->Line_26 $$ assertEquals(2, result.size())[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_4 $$ UserBean user1 = new UserBean("MADHUMITA", "SADHUKHAN")[ CD ]
Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)-->Line_23 $$ assertEquals("The Car has to pass the fuel test and inspection test before being driven", result.iterator().next().getMessage())[ FD ]
Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)-->Line_17 $$ assertEquals("The Car has to pass the fuel test and inspection test before being driven", result.iterator().next().getMessage())[ FD ]
Line_21 $$ result = validator.validate(car)-->Line_25 $$ result = validator.validate(car)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_29 $$ assertEquals(1, driverResult.size())[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_31 $$ assertEquals(0, validator.validate(car, DriverChecks.class).size())[ CD ]
Line_7 $$ UserBean user2 = new UserBean("Mickey", "Mouse")-->Line_8 $$ user2.setEmail("mickey@gmail.com")[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_5 $$ user1.setEmail("madhu@gmail.com")[ CD ]
Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)-->Line_16 $$ assertEquals(1, result.size())[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_16 $$ assertEquals(1, result.size())[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_20 $$ driver.setAddress("ABC")[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_23 $$ assertEquals("The Car has to pass the fuel test and inspection test before being driven", result.iterator().next().getMessage())[ CD ]
Line_4 $$ UserBean user1 = new UserBean("MADHUMITA", "SADHUKHAN")-->Line_5 $$ user1.setEmail("madhu@gmail.com")[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_21 $$ result = validator.validate(car)[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_25 $$ result = validator.validate(car)[ CD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_25 $$ result = validator.validate(car)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_6 $$ user1.setAddress("REDHAT Brno")[ CD ]
Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)-->Line_21 $$ result = validator.validate(car)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_10 $$ List<UserBean> passengers = new ArrayList<UserBean>()[ CD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_14 $$ car.setModel("SKODA Octavia")[ FD ]
Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)-->Line_22 $$ assertEquals(1, result.size())[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)[ CD ]
Line_18 $$ Driver driver = new Driver("Sebastian", "Vettel")-->Line_20 $$ driver.setAddress("ABC")[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_19 $$ driver.setAge(25)[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_26 $$ assertEquals(2, result.size())[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_9 $$ user2.setAddress("DISNEY CA USA")[ CD ]
Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)-->Line_26 $$ assertEquals(2, result.size())[ FD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_28 $$ Set<ConstraintViolation<Car>> driverResult = validator.validate(car, DriverChecks.class)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_3 $$ Validator validator = (Validator) new InitialContext().lookup("java:comp/Validator")[ CD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_31 $$ assertEquals(0, validator.validate(car, DriverChecks.class).size())[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_18 $$ Driver driver = new Driver("Sebastian", "Vettel")[ CD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_33 $$ car.setHasBeenPaid(true)[ FD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_24 $$ car.setPassedVehicleInspection(true)[ FD ]
Line_15 $$ Set<ConstraintViolation<Car>> result = validator.validate(car)-->Line_25 $$ result = validator.validate(car)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_17 $$ assertEquals("The Car has to pass the fuel test and inspection test before being driven", result.iterator().next().getMessage())[ CD ]
Line_18 $$ Driver driver = new Driver("Sebastian", "Vettel")-->Line_30 $$ driver.setHasValidDrivingLicense(true)[ FD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_34 $$ assertEquals(0, validator.validate(car).size())[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_11 $$ passengers.add(user1)[ CD ]
Line_4 $$ UserBean user1 = new UserBean("MADHUMITA", "SADHUKHAN")-->Line_11 $$ passengers.add(user1)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_24 $$ car.setPassedVehicleInspection(true)[ CD ]
Line_3 $$ Validator validator = (Validator) new InitialContext().lookup("java:comp/Validator")-->Line_28 $$ Set<ConstraintViolation<Car>> driverResult = validator.validate(car, DriverChecks.class)[ FD ]
Line_18 $$ Driver driver = new Driver("Sebastian", "Vettel")-->Line_19 $$ driver.setAge(25)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_27 $$ car.setDriver(driver)[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_12 $$ passengers.add(user2)[ CD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_27 $$ car.setDriver(driver)[ FD ]
Line_10 $$ List<UserBean> passengers = new ArrayList<UserBean>()-->Line_12 $$ passengers.add(user2)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_32 $$ car.setSeats(5)[ CD ]
Line_7 $$ UserBean user2 = new UserBean("Mickey", "Mouse")-->Line_12 $$ passengers.add(user2)[ FD ]
Line_18 $$ Driver driver = new Driver("Sebastian", "Vettel")-->Line_27 $$ car.setDriver(driver)[ FD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_30 $$ driver.setHasValidDrivingLicense(true)[ CD ]
Line_2 $$ public void testGroupValidation() throws NamingException -->Line_33 $$ car.setHasBeenPaid(true)[ CD ]
Line_13 $$ Car car = new Car("CET5678", passengers)-->Line_21 $$ result = validator.validate(car)[ FD ]
Line_3 $$ Validator validator = (Validator) new InitialContext().lookup("java:comp/Validator")-->Line_21 $$ result = validator.validate(car)[ FD ]
