Line_12 $$ MessageConsumer receiver = session.createConsumer(replyQueue)-->Line_41 $$ Message msg = receiver.receive(SECONDS.toMillis(RECEIVE_WAIT_S))[ FD ]
Line_9 $$ Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_11 $$ MessageProducer sender = session.createProducer(queue)[ FD ]
Line_43 $$ String text = ((TextMessage) msg).getText()-->Line_44 $$ received.add(text)[ FD ]
Line_20 $$ for (int i = 1; i <= 50; i++) -->Line_23 $$ expected.add("Reply: " + msg)[ CD ]
Line_33 $$ for (int i = 1; i <= 10; i++) -->Line_34 $$ String msg = this.getClass().getSimpleName() + "10loop: " + i[ CD ]
Line_20 $$ for (int i = 1; i <= 50; i++) -->Line_22 $$ sendMessage(session, sender, replyQueue, msg)[ CD ]
Line_11 $$ MessageProducer sender = session.createProducer(queue)-->Line_35 $$ sendMessage(session, sender, replyQueue, msg)[ FD ]
Line_40 $$ for (int i = 1; i <= (1 + 50 + 10 + 1); i++) -->Line_43 $$ String text = ((TextMessage) msg).getText()[ CD ]
Line_11 $$ MessageProducer sender = session.createProducer(queue)-->Line_22 $$ sendMessage(session, sender, replyQueue, msg)[ FD ]
Line_39 $$ Set<String> received = new TreeSet<String>()-->Line_48 $$ assertEquals(expected, received)[ FD ]
Line_8 $$ connection = cf.createConnection("guest", "guest")-->Line_51 $$ connection.close()[ FD ]
Line_34 $$ String msg = this.getClass().getSimpleName() + "10loop: " + i-->Line_42 $$ assertNotNull("did not receive message with ordered number " + i + " in " + SECONDS.toMillis(RECEIVE_WAIT_S) + " seconds", msg)[ FD ]
Line_20 $$ for (int i = 1; i <= 50; i++) -->Line_40 $$ for (int i = 1; i <= (1 + 50 + 10 + 1); i++) [ FD ]
Line_20 $$ for (int i = 1; i <= 50; i++) -->Line_33 $$ for (int i = 1; i <= 10; i++) [ FD ]
Line_9 $$ Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_12 $$ MessageConsumer receiver = session.createConsumer(replyQueue)[ FD ]
Line_8 $$ connection = cf.createConnection("guest", "guest")-->Line_50 $$ if (connection != null) [ FD ]
Line_11 $$ MessageProducer sender = session.createProducer(queue)-->Line_15 $$ sendMessage(session, sender, replyQueue, "await")[ FD ]
Line_33 $$ for (int i = 1; i <= 10; i++) -->Line_40 $$ for (int i = 1; i <= (1 + 50 + 10 + 1); i++) [ FD ]
Line_21 $$ String msg = this.getClass().getSimpleName() + " 50loop: " + i-->Line_35 $$ sendMessage(session, sender, replyQueue, msg)[ FD ]
Line_7 $$ Queue queue = (Queue) ctx.lookup(QUEUE_SEND)-->Line_11 $$ MessageProducer sender = session.createProducer(queue)[ FD ]
Line_40 $$ for (int i = 1; i <= (1 + 50 + 10 + 1); i++) -->Line_45 $$ log.info(i + ": " + text)[ CD ]
Line_19 $$ Future<?> undeployed = executor.submit(undeployTask())-->Line_28 $$ undeployed.get(UNDEPLOYED_WAIT_S, SECONDS)[ FD ]
Line_3 $$ Connection connection = null-->Line_51 $$ connection.close()[ FD ]
Line_10 $$ Queue replyQueue = session.createTemporaryQueue()-->Line_12 $$ MessageConsumer receiver = session.createConsumer(replyQueue)[ FD ]
Line_20 $$ for (int i = 1; i <= 50; i++) -->Line_21 $$ String msg = this.getClass().getSimpleName() + " 50loop: " + i[ CD ]
Line_41 $$ Message msg = receiver.receive(SECONDS.toMillis(RECEIVE_WAIT_S))-->Line_42 $$ assertNotNull("did not receive message with ordered number " + i + " in " + SECONDS.toMillis(RECEIVE_WAIT_S) + " seconds", msg)[ FD ]
Line_8 $$ connection = cf.createConnection("guest", "guest")-->Line_9 $$ Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)[ FD ]
Line_10 $$ Queue replyQueue = session.createTemporaryQueue()-->Line_35 $$ sendMessage(session, sender, replyQueue, msg)[ FD ]
Line_3 $$ Connection connection = null-->Line_9 $$ Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)[ FD ]
Line_3 $$ Connection connection = null-->Line_13 $$ connection.start()[ FD ]
Line_14 $$ Set<String> expected = new TreeSet<String>()-->Line_23 $$ expected.add("Reply: " + msg)[ FD ]
Line_34 $$ String msg = this.getClass().getSimpleName() + "10loop: " + i-->Line_35 $$ sendMessage(session, sender, replyQueue, msg)[ FD ]
Line_29 $$ final ModelNode deployAddr = new ModelNode()-->Line_30 $$ deployAddr.get(ClientConstants.OP_ADDR).add("deployment", MESSAGE_DRIVEN_BEAN + ".jar")[ FD ]
Line_21 $$ String msg = this.getClass().getSimpleName() + " 50loop: " + i-->Line_42 $$ assertNotNull("did not receive message with ordered number " + i + " in " + SECONDS.toMillis(RECEIVE_WAIT_S) + " seconds", msg)[ FD ]
Line_9 $$ Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_22 $$ sendMessage(session, sender, replyQueue, msg)[ FD ]
Line_29 $$ final ModelNode deployAddr = new ModelNode()-->Line_31 $$ deployAddr.get(ClientConstants.OP).set("deploy")[ FD ]
Line_40 $$ for (int i = 1; i <= (1 + 50 + 10 + 1); i++) -->Line_42 $$ assertNotNull("did not receive message with ordered number " + i + " in " + SECONDS.toMillis(RECEIVE_WAIT_S) + " seconds", msg)[ CD ]
Line_9 $$ Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_10 $$ Queue replyQueue = session.createTemporaryQueue()[ FD ]
Line_3 $$ Connection connection = null-->Line_8 $$ connection = cf.createConnection("guest", "guest")[ FD ]
Line_50 $$ if (connection != null) -->Line_51 $$ connection.close()[ CD ]
Line_39 $$ Set<String> received = new TreeSet<String>()-->Line_44 $$ received.add(text)[ FD ]
Line_3 $$ Connection connection = null-->Line_50 $$ if (connection != null) [ FD ]
Line_9 $$ Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_15 $$ sendMessage(session, sender, replyQueue, "await")[ FD ]
Line_8 $$ connection = cf.createConnection("guest", "guest")-->Line_13 $$ connection.start()[ FD ]
Line_14 $$ Set<String> expected = new TreeSet<String>()-->Line_36 $$ expected.add("Reply: " + msg)[ FD ]
Line_17 $$ int awaitInt = awaitSingleton("await before undeploy")-->Line_26 $$ awaitInt = awaitSingleton("await after undeploy")[ FD ]
Line_6 $$ ConnectionFactory cf = (ConnectionFactory) ctx.lookup("jms/RemoteConnectionFactory")-->Line_8 $$ connection = cf.createConnection("guest", "guest")[ FD ]
Line_33 $$ for (int i = 1; i <= 10; i++) -->Line_36 $$ expected.add("Reply: " + msg)[ CD ]
Line_2 $$ public void testShutdown(@ArquillianResource @OperateOnDeployment("singleton") ManagementClient client) throws Exception -->Line_3 $$ Connection connection = null[ CD ]
Line_10 $$ Queue replyQueue = session.createTemporaryQueue()-->Line_22 $$ sendMessage(session, sender, replyQueue, msg)[ FD ]
Line_9 $$ Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)-->Line_35 $$ sendMessage(session, sender, replyQueue, msg)[ FD ]
Line_12 $$ MessageConsumer receiver = session.createConsumer(replyQueue)-->Line_47 $$ assertNull(receiver.receiveNoWait())[ FD ]
Line_10 $$ Queue replyQueue = session.createTemporaryQueue()-->Line_15 $$ sendMessage(session, sender, replyQueue, "await")[ FD ]
Line_29 $$ final ModelNode deployAddr = new ModelNode()-->Line_32 $$ applyUpdate(deployAddr, managementClient.getControllerClient())[ FD ]
Line_33 $$ for (int i = 1; i <= 10; i++) -->Line_35 $$ sendMessage(session, sender, replyQueue, msg)[ CD ]
Line_14 $$ Set<String> expected = new TreeSet<String>()-->Line_48 $$ assertEquals(expected, received)[ FD ]
Line_14 $$ Set<String> expected = new TreeSet<String>()-->Line_16 $$ expected.add("Reply: await")[ FD ]
Line_21 $$ String msg = this.getClass().getSimpleName() + " 50loop: " + i-->Line_22 $$ sendMessage(session, sender, replyQueue, msg)[ FD ]
Line_40 $$ for (int i = 1; i <= (1 + 50 + 10 + 1); i++) -->Line_41 $$ Message msg = receiver.receive(SECONDS.toMillis(RECEIVE_WAIT_S))[ CD ]
Line_40 $$ for (int i = 1; i <= (1 + 50 + 10 + 1); i++) -->Line_44 $$ received.add(text)[ CD ]
