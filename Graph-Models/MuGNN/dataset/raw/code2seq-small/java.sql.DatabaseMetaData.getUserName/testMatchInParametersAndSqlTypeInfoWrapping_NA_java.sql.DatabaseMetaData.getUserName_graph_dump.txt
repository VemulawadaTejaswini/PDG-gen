Line_3 $$ final String TABLE = "customers"-->Line_8 $$ given(metaDataResultSet.getString("TABLE_NAME")).willReturn(TABLE)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_9 $$ given(metaDataResultSet.getString("TABLE_TYPE")).willReturn("TABLE")[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_19 $$ given(databaseMetaData.getTables(null, null, TABLE, null)).willReturn(metaDataResultSet)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_18 $$ given(databaseMetaData.storesLowerCaseIdentifiers()).willReturn(true)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_33 $$ assertTrue("name not wrapped with type info", values.get(1) instanceof String)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_5 $$ ResultSet metaDataResultSet = mock(ResultSet.class)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_6 $$ given(metaDataResultSet.next()).willReturn(true, false)[ CD ]
Line_30 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_35 $$ assertTrue("version wrapped with type info", values.get(3) instanceof SqlParameterValue)[ FD ]
Line_5 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_6 $$ given(metaDataResultSet.next()).willReturn(true, false)[ FD ]
Line_5 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_19 $$ given(databaseMetaData.getTables(null, null, TABLE, null)).willReturn(metaDataResultSet)[ FD ]
Line_3 $$ final String TABLE = "customers"-->Line_19 $$ given(databaseMetaData.getTables(null, null, TABLE, null)).willReturn(metaDataResultSet)[ FD ]
Line_30 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_33 $$ assertTrue("name not wrapped with type info", values.get(1) instanceof String)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_39 $$ verify(columnsResultSet).close()[ CD ]
Line_10 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_13 $$ given(columnsResultSet.getInt("DATA_TYPE")).willReturn(Types.INTEGER, Types.VARCHAR, Types.DATE, Types.NUMERIC)[ FD ]
Line_5 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_9 $$ given(metaDataResultSet.getString("TABLE_TYPE")).willReturn("TABLE")[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_25 $$ map.addValue("version", 0)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_20 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ CD ]
Line_3 $$ final String TABLE = "customers"-->Line_20 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ FD ]
Line_30 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_32 $$ assertTrue("id not wrapped with type info", values.get(0) instanceof Number)[ FD ]
Line_30 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_31 $$ assertEquals("wrong number of parameters: ", 4, values.size())[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_8 $$ given(metaDataResultSet.getString("TABLE_NAME")).willReturn(TABLE)[ CD ]
Line_5 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_7 $$ given(metaDataResultSet.getString("TABLE_SCHEM")).willReturn(USER)[ FD ]
Line_5 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_36 $$ verify(metaDataResultSet, atLeastOnce()).next()[ FD ]
Line_21 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_26 $$ map.registerSqlType("customersince", Types.DATE)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_29 $$ context.processMetaData(dataSource, new ArrayList<String>(), new String[] [ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_38 $$ verify(metaDataResultSet).close()[ CD ]
Line_5 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_8 $$ given(metaDataResultSet.getString("TABLE_NAME")).willReturn(TABLE)[ FD ]
Line_4 $$ final String USER = "me"-->Line_17 $$ given(databaseMetaData.getUserName()).willReturn(USER)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_15 $$ given(databaseMetaData.getDatabaseProductName()).willReturn("MyDB")[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_37 $$ verify(columnsResultSet, atLeastOnce()).next()[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_14 $$ given(columnsResultSet.getBoolean("NULLABLE")).willReturn(false, true, true, false)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_26 $$ map.registerSqlType("customersince", Types.DATE)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_17 $$ given(databaseMetaData.getUserName()).willReturn(USER)[ CD ]
Line_30 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)-->Line_34 $$ assertTrue("date wrapped with type info", values.get(2) instanceof SqlParameterValue)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_32 $$ assertTrue("id not wrapped with type info", values.get(0) instanceof Number)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_16 $$ given(databaseMetaData.getDatabaseProductName()).willReturn("1.0")[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_11 $$ given(columnsResultSet.next()).willReturn(true, true, true, true, false)[ CD ]
Line_4 $$ final String USER = "me"-->Line_20 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ FD ]
Line_21 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_22 $$ map.addValue("id", 1)[ FD ]
Line_21 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_23 $$ map.addValue("name", "Sven")[ FD ]
Line_21 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_27 $$ map.registerSqlType("version", Types.NUMERIC)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_4 $$ final String USER = "me"[ CD ]
Line_10 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_20 $$ given(databaseMetaData.getColumns(null, USER, TABLE, null)).willReturn(columnsResultSet)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_10 $$ ResultSet columnsResultSet = mock(ResultSet.class)[ CD ]
Line_10 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_11 $$ given(columnsResultSet.next()).willReturn(true, true, true, true, false)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_13 $$ given(columnsResultSet.getInt("DATA_TYPE")).willReturn(Types.INTEGER, Types.VARCHAR, Types.DATE, Types.NUMERIC)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_27 $$ map.registerSqlType("version", Types.NUMERIC)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_30 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_3 $$ final String TABLE = "customers"[ CD ]
Line_10 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_37 $$ verify(columnsResultSet, atLeastOnce()).next()[ FD ]
Line_10 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_39 $$ verify(columnsResultSet).close()[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_34 $$ assertTrue("date wrapped with type info", values.get(2) instanceof SqlParameterValue)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_31 $$ assertEquals("wrong number of parameters: ", 4, values.size())[ CD ]
Line_4 $$ final String USER = "me"-->Line_7 $$ given(metaDataResultSet.getString("TABLE_SCHEM")).willReturn(USER)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_21 $$ MapSqlParameterSource map = new MapSqlParameterSource()[ CD ]
Line_21 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_25 $$ map.addValue("version", 0)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_24 $$ map.addValue("customersince", new Date())[ CD ]
Line_10 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_12 $$ given(columnsResultSet.getString("COLUMN_NAME")).willReturn("id", "name", "customersince", "version")[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_36 $$ verify(metaDataResultSet, atLeastOnce()).next()[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_35 $$ assertTrue("version wrapped with type info", values.get(3) instanceof SqlParameterValue)[ CD ]
Line_21 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_30 $$ List<Object> values = context.matchInParameterValuesWithInsertColumns(map)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_7 $$ given(metaDataResultSet.getString("TABLE_SCHEM")).willReturn(USER)[ CD ]
Line_10 $$ ResultSet columnsResultSet = mock(ResultSet.class)-->Line_14 $$ given(columnsResultSet.getBoolean("NULLABLE")).willReturn(false, true, true, false)[ FD ]
Line_21 $$ MapSqlParameterSource map = new MapSqlParameterSource()-->Line_24 $$ map.addValue("customersince", new Date())[ FD ]
Line_5 $$ ResultSet metaDataResultSet = mock(ResultSet.class)-->Line_38 $$ verify(metaDataResultSet).close()[ FD ]
Line_3 $$ final String TABLE = "customers"-->Line_28 $$ context.setTableName(TABLE)[ FD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_28 $$ context.setTableName(TABLE)[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_23 $$ map.addValue("name", "Sven")[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_12 $$ given(columnsResultSet.getString("COLUMN_NAME")).willReturn("id", "name", "customersince", "version")[ CD ]
Line_2 $$ public void testMatchInParametersAndSqlTypeInfoWrapping() throws Exception -->Line_22 $$ map.addValue("id", 1)[ CD ]
