Line_3 $$ int oldEndIndex = capacity + stashSize-->Line_18 $$ for (int i = 0; i < oldEndIndex; i++) [ FD ]
Line_2 $$ private void resize(int newSize) -->Line_8 $$ stashCapacity = Math.max(3, (int) Math.ceil(Math.log(newSize)) * 2)[ CD ]
Line_2 $$ private void resize(int newSize) -->Line_8 $$ stashCapacity = Math.max(3, (int) Math.ceil(Math.log(newSize)) * 2)[ FD ]
Line_17 $$ if (oldSize > 0) -->Line_18 $$ for (int i = 0; i < oldEndIndex; i++) [ CD ]
Line_20 $$ if (key != EMPTY)-->Line_21 $$ putResize(key, oldValueTable[i])[ CD ]
Line_19 $$ long key = oldKeyTable[i]-->Line_21 $$ putResize(key, oldValueTable[i])[ FD ]
Line_18 $$ for (int i = 0; i < oldEndIndex; i++) -->Line_19 $$ long key = oldKeyTable[i][ CD ]
Line_2 $$ private void resize(int newSize) -->Line_10 $$ long[] oldKeyTable = keyTable[ CD ]
Line_14 $$ int oldSize = size-->Line_17 $$ if (oldSize > 0) [ FD ]
Line_19 $$ long key = oldKeyTable[i]-->Line_20 $$ if (key != EMPTY)[ FD ]
Line_2 $$ private void resize(int newSize) -->Line_7 $$ hashShift = 63 - Long.numberOfTrailingZeros(newSize)[ FD ]
Line_2 $$ private void resize(int newSize) -->Line_9 $$ pushIterations = Math.max(Math.min(newSize, 8), (int) Math.sqrt(newSize) / 8)[ CD ]
Line_2 $$ private void resize(int newSize) -->Line_11 $$ V[] oldValueTable = valueTable[ CD ]
Line_2 $$ private void resize(int newSize) -->Line_14 $$ int oldSize = size[ CD ]
Line_2 $$ private void resize(int newSize) -->Line_17 $$ if (oldSize > 0) [ CD ]
Line_18 $$ for (int i = 0; i < oldEndIndex; i++) -->Line_20 $$ if (key != EMPTY)[ CD ]
Line_2 $$ private void resize(int newSize) -->Line_9 $$ pushIterations = Math.max(Math.min(newSize, 8), (int) Math.sqrt(newSize) / 8)[ FD ]
Line_2 $$ private void resize(int newSize) -->Line_3 $$ int oldEndIndex = capacity + stashSize[ CD ]
