Line_2 $$ private int nextSetBit(int bitIndex) -->Line_11 $$ while (true) [ CD ]
Line_12 $$ if (word != 0) -->Line_13 $$ return (wordIndex * BITS_PER_WORD) + Long.numberOfTrailingZeros(word) + myBase[ CD ]
Line_10 $$ long word = myBitMask[wordIndex] & (-1L << bitIndex)-->Line_18 $$ word = myBitMask[wordIndex][ FD ]
Line_11 $$ while (true) -->Line_18 $$ word = myBitMask[wordIndex][ CD ]
Line_10 $$ long word = myBitMask[wordIndex] & (-1L << bitIndex)-->Line_13 $$ return (wordIndex * BITS_PER_WORD) + Long.numberOfTrailingZeros(word) + myBase[ FD ]
Line_2 $$ private int nextSetBit(int bitIndex) -->Line_5 $$ bitIndex -= myBase[ FD ]
Line_2 $$ private int nextSetBit(int bitIndex) -->Line_10 $$ long word = myBitMask[wordIndex] & (-1L << bitIndex)[ CD ]
Line_2 $$ private int nextSetBit(int bitIndex) -->Line_7 $$ if (wordIndex > myLastUsedSlot) [ CD ]
Line_11 $$ while (true) -->Line_15 $$ if (++wordIndex > myLastUsedSlot) [ CD ]
Line_18 $$ word = myBitMask[wordIndex]-->Line_12 $$ if (word != 0) [ FD ]
Line_2 $$ private int nextSetBit(int bitIndex) -->Line_4 $$ if (bitIndex >= myBase)[ CD ]
Line_4 $$ if (bitIndex >= myBase)-->Line_5 $$ bitIndex -= myBase[ CD ]
Line_18 $$ word = myBitMask[wordIndex]-->Line_13 $$ return (wordIndex * BITS_PER_WORD) + Long.numberOfTrailingZeros(word) + myBase[ FD ]
Line_2 $$ private int nextSetBit(int bitIndex) -->Line_4 $$ if (bitIndex >= myBase)[ FD ]
Line_6 $$ int wordIndex = bitIndex >> SHIFT-->Line_7 $$ if (wordIndex > myLastUsedSlot) [ FD ]
Line_15 $$ if (++wordIndex > myLastUsedSlot) -->Line_16 $$ return -1[ CD ]
Line_7 $$ if (wordIndex > myLastUsedSlot) -->Line_8 $$ return -1[ CD ]
Line_6 $$ int wordIndex = bitIndex >> SHIFT-->Line_15 $$ if (++wordIndex > myLastUsedSlot) [ FD ]
Line_2 $$ private int nextSetBit(int bitIndex) -->Line_6 $$ int wordIndex = bitIndex >> SHIFT[ CD ]
Line_11 $$ while (true) -->Line_12 $$ if (word != 0) [ CD ]
Line_10 $$ long word = myBitMask[wordIndex] & (-1L << bitIndex)-->Line_12 $$ if (word != 0) [ FD ]
