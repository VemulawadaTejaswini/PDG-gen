Line_3 $$ PanelProgressIndicator progress = createProgressIndicator(requestFocus)-->Line_54 $$ ProgressManager.getInstance().runProcess(updateModel, progress)[ FD ]
Line_21 $$ if (myErrorMessage == null) -->Line_22 $$ String message = IdeBundle.message("label.scope.contains.files", model.getMarkedFileCount(), model.getTotalFileCount())[ CD ]
Line_15 $$ if (myProject.isDisposed())-->Line_16 $$ return[ CD ]
Line_21 $$ if (myErrorMessage == null) -->Line_26 $$ myMatchingCountLabel.setText(message)[ CD ]
Line_24 $$ message = UIUtil.toHtml(message + "<br/>(Non-project files are not shown)")-->Line_26 $$ myMatchingCountLabel.setText(message)[ FD ]
Line_21 $$ if (myErrorMessage == null) -->Line_23 $$ if (FilePatternPackageSet.SCOPE_FILE.equals(DependencyUISettings.getInstance().SCOPE_TYPE)) [ CD ]
Line_2 $$ private void updateTreeModel(final boolean requestFocus) throws ProcessCanceledException -->Line_6 $$ Runnable updateModel = new Runnable() [ CD ]
Line_2 $$ private void updateTreeModel(final boolean requestFocus) throws ProcessCanceledException -->Line_4 $$ progress.setBordersVisible(false)[ CD ]
Line_22 $$ String message = IdeBundle.message("label.scope.contains.files", model.getMarkedFileCount(), model.getTotalFileCount())-->Line_24 $$ message = UIUtil.toHtml(message + "<br/>(Non-project files are not shown)")[ FD ]
Line_22 $$ String message = IdeBundle.message("label.scope.contains.files", model.getMarkedFileCount(), model.getTotalFileCount())-->Line_26 $$ myMatchingCountLabel.setText(message)[ FD ]
Line_6 $$ Runnable updateModel = new Runnable() -->Line_11 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_19 $$ final TreeModel model = PatternDialectProvider.getInstance(DependencyUISettings.getInstance().SCOPE_TYPE).createTreeModel(myProject, myTreeMarker)-->Line_20 $$ ((PackageDependenciesNode) model.getRoot()).sortChildren()[ FD ]
Line_6 $$ Runnable updateModel = new Runnable() -->Line_49 $$ if (ex[0] != null) [ CD ]
Line_19 $$ final TreeModel model = PatternDialectProvider.getInstance(DependencyUISettings.getInstance().SCOPE_TYPE).createTreeModel(myProject, myTreeMarker)-->Line_22 $$ String message = IdeBundle.message("label.scope.contains.files", model.getMarkedFileCount(), model.getTotalFileCount())[ FD ]
Line_21 $$ if (myErrorMessage == null) -->Line_29 $$ showErrorMessage()[ CD ]
Line_21 $$ if (myErrorMessage == null) -->Line_27 $$ myMatchingCountLabel.setForeground(new JLabel().getForeground())[ CD ]
Line_2 $$ private void updateTreeModel(final boolean requestFocus) throws ProcessCanceledException -->Line_54 $$ ProgressManager.getInstance().runProcess(updateModel, progress)[ CD ]
Line_6 $$ Runnable updateModel = new Runnable() -->Line_10 $$ final ProcessCanceledException[] ex = new ProcessCanceledException[1][ CD ]
Line_31 $$ SwingUtilities.invokeLater(new Runnable() -->Line_37 $$ myTreeExpansionMonitor.restore()[ CD ]
Line_11 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_15 $$ if (myProject.isDisposed())[ CD ]
Line_2 $$ private void updateTreeModel(final boolean requestFocus) throws ProcessCanceledException -->Line_3 $$ PanelProgressIndicator progress = createProgressIndicator(requestFocus)[ FD ]
Line_6 $$ Runnable updateModel = new Runnable() -->Line_54 $$ ProgressManager.getInstance().runProcess(updateModel, progress)[ FD ]
Line_2 $$ private void updateTreeModel(final boolean requestFocus) throws ProcessCanceledException -->Line_3 $$ PanelProgressIndicator progress = createProgressIndicator(requestFocus)[ CD ]
Line_3 $$ PanelProgressIndicator progress = createProgressIndicator(requestFocus)-->Line_4 $$ progress.setBordersVisible(false)[ FD ]
Line_23 $$ if (FilePatternPackageSet.SCOPE_FILE.equals(DependencyUISettings.getInstance().SCOPE_TYPE)) -->Line_24 $$ message = UIUtil.toHtml(message + "<br/>(Non-project files are not shown)")[ CD ]
