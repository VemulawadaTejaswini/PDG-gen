Line_11 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_27 $$ final int y = g.getClipBounds().height - getFontMetrics(getFont()).getDescent() + 2[ FD ]
Line_11 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_17 $$ look.paintBackground(g, this)[ FD ]
Line_27 $$ final int y = g.getClipBounds().height - getFontMetrics(getFont()).getDescent() + 2-->Line_29 $$ g.drawLine(0, y, width, y)[ FD ]
Line_11 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_18 $$ look.paintIcon(g, this, getIcon())[ FD ]
Line_35 $$ new ClickListener() -->Line_45 $$ action.actionPerformed(new AnActionEvent(e, context, GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, presentation, ActionManager.getInstance(), e.getModifiers()))[ FD ]
Line_6 $$ if (action == null) -->Line_7 $$ return null[ CD ]
Line_11 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_17 $$ look.paintBackground(g, this)[ CD ]
Line_23 $$ JLabel result = new JLabel(text) -->Line_27 $$ final int y = g.getClipBounds().height - getFontMetrics(getFont()).getDescent() + 2[ FD ]
Line_23 $$ JLabel result = new JLabel(text) -->Line_26 $$ super.paint(g)[ CD ]
Line_11 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_18 $$ look.paintIcon(g, this, getIcon())[ CD ]
Line_23 $$ JLabel result = new JLabel(text) -->Line_29 $$ g.drawLine(0, y, width, y)[ CD ]
Line_4 $$ final ActionManager actionManager = ActionManager.getInstance()-->Line_5 $$ final AnAction action = actionManager.getAction(s)[ FD ]
Line_11 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_26 $$ super.paint(g)[ FD ]
Line_5 $$ final AnAction action = actionManager.getAction(s)-->Line_22 $$ final String text = action.getTemplatePresentation().getText()[ FD ]
Line_23 $$ JLabel result = new JLabel(text) -->Line_26 $$ super.paint(g)[ FD ]
Line_35 $$ new ClickListener() -->Line_40 $$ final DataContext context = callback.getResult()[ CD ]
Line_35 $$ new ClickListener() -->Line_46 $$ return true[ CD ]
Line_11 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_29 $$ g.drawLine(0, y, width, y)[ FD ]
Line_5 $$ final AnAction action = actionManager.getAction(s)-->Line_6 $$ if (action == null) [ FD ]
Line_35 $$ new ClickListener() -->Line_39 $$ final AsyncResult<DataContext> callback = DataManager.getInstance().getDataContextFromFocus()[ CD ]
Line_23 $$ JLabel result = new JLabel(text) -->Line_28 $$ final int width = getFontMetrics(getFont()).stringWidth(getText())[ CD ]
Line_5 $$ final AnAction action = actionManager.getAction(s)-->Line_9 $$ final Presentation presentation = action.getTemplatePresentation()[ FD ]
Line_5 $$ final AnAction action = actionManager.getAction(s)-->Line_45 $$ action.actionPerformed(new AnActionEvent(e, context, GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, presentation, ActionManager.getInstance(), e.getModifiers()))[ FD ]
Line_41 $$ if (context == null) -->Line_42 $$ return false[ CD ]
Line_35 $$ new ClickListener() -->Line_41 $$ if (context == null) [ CD ]
Line_23 $$ JLabel result = new JLabel(text) -->Line_29 $$ g.drawLine(0, y, width, y)[ FD ]
Line_39 $$ final AsyncResult<DataContext> callback = DataManager.getInstance().getDataContextFromFocus()-->Line_40 $$ final DataContext context = callback.getResult()[ FD ]
Line_35 $$ new ClickListener() -->Line_44 $$ final Presentation presentation = new PresentationFactory().getPresentation(action)[ CD ]
Line_10 $$ if (presentation.getIcon() != null) -->Line_11 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) [ CD ]
Line_9 $$ final Presentation presentation = action.getTemplatePresentation()-->Line_10 $$ if (presentation.getIcon() != null) [ FD ]
Line_35 $$ new ClickListener() -->Line_45 $$ action.actionPerformed(new AnActionEvent(e, context, GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, presentation, ActionManager.getInstance(), e.getModifiers()))[ CD ]
Line_28 $$ final int width = getFontMetrics(getFont()).stringWidth(getText())-->Line_29 $$ g.drawLine(0, y, width, y)[ FD ]
Line_5 $$ final AnAction action = actionManager.getAction(s)-->Line_44 $$ final Presentation presentation = new PresentationFactory().getPresentation(action)[ FD ]
Line_9 $$ final Presentation presentation = action.getTemplatePresentation()-->Line_11 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) [ FD ]
Line_40 $$ final DataContext context = callback.getResult()-->Line_41 $$ if (context == null) [ FD ]
Line_23 $$ JLabel result = new JLabel(text) -->Line_27 $$ final int y = g.getClipBounds().height - getFontMetrics(getFont()).getDescent() + 2[ CD ]
