Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)-->Line_30 $$ slider.setValue(i + 1)[ FD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_15 $$ slider.addChangeListener(new ChangeListener() [ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)-->Line_19 $$ int value = slider.getValue()[ FD ]
Line_3 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_34 $$ panel.add(slider, BorderLayout.WEST)[ FD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_13 $$ slider.setPaintLabels(true)[ CD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_4 $$ panel.setBorder(BorderFactory.createCompoundBorder(IdeBorderFactory.createTitledBorder(InspectionsBundle.message("inspection.scope.for.title"), true), BorderFactory.createEmptyBorder(0, 3, 3, 3)))[ CD ]
Line_5 $$ final Hashtable<Integer, JComponent> sliderLabels = new Hashtable<Integer, JComponent>()-->Line_28 $$ sliderLabels.get(i + 1).setForeground(fore)[ FD ]
Line_5 $$ final Hashtable<Integer, JComponent> sliderLabels = new Hashtable<Integer, JComponent>()-->Line_7 $$ sliderLabels.put(i + 1, new JLabel(modifiers[i]))[ FD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_27 $$ for (int i = 0; i < modifiers.length; i++) [ CD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_34 $$ panel.add(slider, BorderLayout.WEST)[ CD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_12 $$ slider.setPreferredSize(JBUI.size(80, 50))[ CD ]
Line_27 $$ for (int i = 0; i < modifiers.length; i++) -->Line_28 $$ sliderLabels.get(i + 1).setForeground(fore)[ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)-->Line_34 $$ panel.add(slider, BorderLayout.WEST)[ FD ]
Line_15 $$ slider.addChangeListener(new ChangeListener() -->Line_19 $$ int value = slider.getValue()[ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)-->Line_11 $$ slider.putClientProperty(UIUtil.JSLIDER_ISFILLED, Boolean.TRUE)[ FD ]
Line_15 $$ slider.addChangeListener(new ChangeListener() -->Line_20 $$ options.ACCESS_JAVADOC_REQUIRED_FOR = modifiers[value - 1][ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)-->Line_14 $$ slider.setSnapToTicks(true)[ FD ]
Line_6 $$ for (int i = 0; i < modifiers.length; i++) -->Line_27 $$ for (int i = 0; i < modifiers.length; i++) [ FD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)-->Line_13 $$ slider.setPaintLabels(true)[ FD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)-->Line_10 $$ slider.setLabelTable(sliderLabels)[ FD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_3 $$ JPanel panel = new JPanel(new BorderLayout())[ CD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_10 $$ slider.setLabelTable(sliderLabels)[ CD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_11 $$ slider.putClientProperty(UIUtil.JSLIDER_ISFILLED, Boolean.TRUE)[ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)-->Line_12 $$ slider.setPreferredSize(JBUI.size(80, 50))[ FD ]
Line_6 $$ for (int i = 0; i < modifiers.length; i++) -->Line_7 $$ sliderLabels.put(i + 1, new JLabel(modifiers[i]))[ CD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_5 $$ final Hashtable<Integer, JComponent> sliderLabels = new Hashtable<Integer, JComponent>()[ CD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)[ CD ]
Line_5 $$ final Hashtable<Integer, JComponent> sliderLabels = new Hashtable<Integer, JComponent>()-->Line_22 $$ sliderLabels.get(key).setForeground(key.intValue() <= value ? Color.black : Gray._100)[ FD ]
Line_5 $$ final Hashtable<Integer, JComponent> sliderLabels = new Hashtable<Integer, JComponent>()-->Line_10 $$ slider.setLabelTable(sliderLabels)[ FD ]
Line_27 $$ for (int i = 0; i < modifiers.length; i++) -->Line_29 $$ if (modifiers[i].equals(options.ACCESS_JAVADOC_REQUIRED_FOR)) [ CD ]
Line_21 $$ for (Integer key : sliderLabels.keySet()) -->Line_22 $$ sliderLabels.get(key).setForeground(key.intValue() <= value ? Color.black : Gray._100)[ FD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_6 $$ for (int i = 0; i < modifiers.length; i++) [ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.VERTICAL, 1, modifiers.length, 1)-->Line_15 $$ slider.addChangeListener(new ChangeListener() [ FD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_35 $$ return panel[ CD ]
Line_3 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_4 $$ panel.setBorder(BorderFactory.createCompoundBorder(IdeBorderFactory.createTitledBorder(InspectionsBundle.message("inspection.scope.for.title"), true), BorderFactory.createEmptyBorder(0, 3, 3, 3)))[ FD ]
Line_29 $$ if (modifiers[i].equals(options.ACCESS_JAVADOC_REQUIRED_FOR)) -->Line_30 $$ slider.setValue(i + 1)[ CD ]
Line_2 $$ private JPanel createScopePanel(final String[] modifiers, final Options options) -->Line_14 $$ slider.setSnapToTicks(true)[ CD ]
Line_5 $$ final Hashtable<Integer, JComponent> sliderLabels = new Hashtable<Integer, JComponent>()-->Line_21 $$ for (Integer key : sliderLabels.keySet()) [ FD ]
