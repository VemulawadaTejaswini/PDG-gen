Line_53 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_56 $$ children.add(menu)[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) [ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_14 $$ component.add(new JPopupMenu.Separator() [ FD ]
Line_90 $$ IdeFocusManager.getInstance(null).doWhenFocusSettlesDown(new Runnable() -->Line_96 $$ expandActionGroup(group, new ArrayList<AnAction>(), presentationFactory, context, place, ActionManager.getInstance())[ CD ]
Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()-->Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) [ FD ]
Line_95 $$ DataContext context = DataManager.getInstance().getDataContext()-->Line_99 $$ ((ActionMenuItem) each).updateContext(context)[ FD ]
Line_10 $$ final AnAction action = list.get(i)-->Line_11 $$ if (action instanceof Separator) [ FD ]
Line_3 $$ final ActionCallback menuBuilt = new ActionCallback()-->Line_84 $$ menuBuilt.doWhenDone(new Runnable() [ FD ]
Line_90 $$ IdeFocusManager.getInstance(null).doWhenFocusSettlesDown(new Runnable() -->Line_93 $$ if (!component.isShowing())[ CD ]
Line_3 $$ final ActionCallback menuBuilt = new ActionCallback()-->Line_82 $$ menuBuilt.setDone()[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_93 $$ if (!component.isShowing())[ FD ]
Line_97 $$ for (Component each : children) -->Line_98 $$ if (each instanceof ActionMenuItem) [ FD ]
Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_100 $$ if (each instanceof ActionMenu) [ FD ]
Line_95 $$ DataContext context = DataManager.getInstance().getDataContext()-->Line_101 $$ ((ActionMenu) each).updateContext(context)[ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_40 $$ if (myMenu != null) [ CD ]
Line_87 $$ if (!mayDataContextBeInvalid)-->Line_88 $$ return[ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_36 $$ if (UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()) [ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_68 $$ if (fixMacScreenMenu) [ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_53 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) [ FD ]
Line_90 $$ IdeFocusManager.getInstance(null).doWhenFocusSettlesDown(new Runnable() -->Line_95 $$ DataContext context = DataManager.getInstance().getDataContext()[ CD ]
Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()-->Line_6 $$ expandActionGroup(group, list, presentationFactory, context, place, ActionManager.getInstance())[ FD ]
Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()-->Line_63 $$ if (list.isEmpty()) [ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_37 $$ g.setColor(component.getBackground())[ FD ]
Line_84 $$ menuBuilt.doWhenDone(new Runnable() -->Line_89 $$ if (IdeFocusManager.getInstance(null).isFocusBeingTransferred()) [ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_29 $$ if (myMenu != null) [ CD ]
Line_53 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_60 $$ children.add(each)[ CD ]
Line_12 $$ final String text = ((Separator) action).getText()-->Line_13 $$ if (!StringUtil.isEmpty(text) || (i > 0 && i < size - 1)) [ FD ]
Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_66 $$ children.add(each)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_3 $$ final ActionCallback menuBuilt = new ActionCallback()[ CD ]
Line_11 $$ if (action instanceof Separator) -->Line_13 $$ if (!StringUtil.isEmpty(text) || (i > 0 && i < size - 1)) [ CD ]
Line_53 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)[ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_43 $$ super.paintComponent(g)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)[ FD ]
Line_53 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_59 $$ component.add(each)[ CD ]
Line_84 $$ menuBuilt.doWhenDone(new Runnable() -->Line_87 $$ if (!mayDataContextBeInvalid)[ CD ]
Line_63 $$ if (list.isEmpty()) -->Line_65 $$ component.add(each)[ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_49 $$ return myMenu != null ? myMenu.getPreferredSize() : super.getPreferredSize()[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_101 $$ ((ActionMenu) each).updateContext(context)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_64 $$ final ActionMenuItem each = new ActionMenuItem(EMPTY_MENU_FILLER, presentationFactory.getPresentation(EMPTY_MENU_FILLER), place, context, enableMnemonics, !fixMacScreenMenu, checked)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_8 $$ final ArrayList<Component> children = new ArrayList<Component>()[ CD ]
Line_8 $$ final ArrayList<Component> children = new ArrayList<Component>()-->Line_56 $$ children.add(menu)[ FD ]
Line_89 $$ if (IdeFocusManager.getInstance(null).isFocusBeingTransferred()) -->Line_90 $$ IdeFocusManager.getInstance(null).doWhenFocusSettlesDown(new Runnable() [ CD ]
Line_8 $$ final ArrayList<Component> children = new ArrayList<Component>()-->Line_66 $$ children.add(each)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_84 $$ menuBuilt.doWhenDone(new Runnable() [ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_7 $$ final boolean fixMacScreenMenu = SystemInfo.isMacSystemMenu && isWindowMenu && Registry.is("actionSystem.mac.screenMenuNotUpdatedFix")[ CD ]
Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) -->Line_11 $$ if (action instanceof Separator) [ CD ]
Line_13 $$ if (!StringUtil.isEmpty(text) || (i > 0 && i < size - 1)) -->Line_14 $$ component.add(new JPopupMenu.Separator() [ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_20 $$ final Insets insets = super.getInsets()[ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_41 $$ myMenu.paint(g)[ FD ]
Line_93 $$ if (!component.isShowing())-->Line_94 $$ return[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_65 $$ component.add(each)[ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_37 $$ g.setColor(component.getBackground())[ FD ]
Line_73 $$ for (Component each : children) -->Line_74 $$ if (each.getParent() != null && each instanceof ActionMenuItem) [ FD ]
Line_74 $$ if (each.getParent() != null && each instanceof ActionMenuItem) -->Line_75 $$ ((ActionMenuItem) each).prepare()[ CD ]
Line_40 $$ if (myMenu != null) -->Line_43 $$ super.paintComponent(g)[ CD ]
Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_65 $$ component.add(each)[ FD ]
Line_11 $$ if (action instanceof Separator) -->Line_53 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) [ CD ]
Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_74 $$ if (each.getParent() != null && each instanceof ActionMenuItem) [ FD ]
Line_8 $$ final ArrayList<Component> children = new ArrayList<Component>()-->Line_60 $$ children.add(each)[ FD ]
Line_95 $$ DataContext context = DataManager.getInstance().getDataContext()-->Line_96 $$ expandActionGroup(group, new ArrayList<AnAction>(), presentationFactory, context, place, ActionManager.getInstance())[ FD ]
Line_12 $$ final String text = ((Separator) action).getText()-->Line_14 $$ component.add(new JPopupMenu.Separator() [ FD ]
Line_10 $$ final AnAction action = list.get(i)-->Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)[ FD ]
Line_73 $$ for (Component each : children) -->Line_100 $$ if (each instanceof ActionMenu) [ FD ]
Line_54 $$ ActionMenu menu = new ActionMenu(context, place, (ActionGroup) action, presentationFactory, enableMnemonics, false)-->Line_56 $$ children.add(menu)[ FD ]
Line_73 $$ for (Component each : children) -->Line_98 $$ if (each instanceof ActionMenuItem) [ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_6 $$ expandActionGroup(group, list, presentationFactory, context, place, ActionManager.getInstance())[ FD ]
Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_59 $$ component.add(each)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_99 $$ ((ActionMenuItem) each).updateContext(context)[ FD ]
Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) -->Line_10 $$ final AnAction action = list.get(i)[ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_21 $$ final boolean fix = UIUtil.isUnderGTKLookAndFeel() && getBorder() != null && insets.top + insets.bottom == 0[ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_28 $$ super.doLayout()[ CD ]
Line_54 $$ ActionMenu menu = new ActionMenu(context, place, (ActionGroup) action, presentationFactory, enableMnemonics, false)-->Line_55 $$ component.add(menu)[ FD ]
Line_40 $$ if (myMenu != null) -->Line_41 $$ myMenu.paint(g)[ CD ]
Line_36 $$ if (UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()) -->Line_38 $$ g.fillRect(0, 0, getWidth(), getHeight())[ CD ]
Line_98 $$ if (each instanceof ActionMenuItem) -->Line_99 $$ ((ActionMenuItem) each).updateContext(context)[ CD ]
Line_29 $$ if (myMenu != null) -->Line_30 $$ myMenu.setBounds(getBounds())[ CD ]
Line_63 $$ if (list.isEmpty()) -->Line_66 $$ children.add(each)[ CD ]
Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_98 $$ if (each instanceof ActionMenuItem) [ FD ]
Line_58 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_60 $$ children.add(each)[ FD ]
Line_36 $$ if (UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()) -->Line_37 $$ g.setColor(component.getBackground())[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_4 $$ final boolean checked = group instanceof CheckedActionGroup[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_55 $$ component.add(menu)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_59 $$ component.add(each)[ FD ]
Line_98 $$ if (each instanceof ActionMenuItem) -->Line_100 $$ if (each instanceof ActionMenu) [ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_63 $$ if (list.isEmpty()) [ CD ]
Line_11 $$ if (action instanceof Separator) -->Line_12 $$ final String text = ((Separator) action).getText()[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()[ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_38 $$ g.fillRect(0, 0, getWidth(), getHeight())[ FD ]
Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()-->Line_10 $$ final AnAction action = list.get(i)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_6 $$ expandActionGroup(group, list, presentationFactory, context, place, ActionManager.getInstance())[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_87 $$ if (!mayDataContextBeInvalid)[ FD ]
Line_53 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_55 $$ component.add(menu)[ CD ]
Line_3 $$ final ActionCallback menuBuilt = new ActionCallback()-->Line_78 $$ menuBuilt.setDone()[ FD ]
Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) -->Line_10 $$ final AnAction action = list.get(i)[ FD ]
Line_100 $$ if (each instanceof ActionMenu) -->Line_101 $$ ((ActionMenu) each).updateContext(context)[ CD ]
Line_97 $$ for (Component each : children) -->Line_100 $$ if (each instanceof ActionMenu) [ FD ]
Line_53 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_54 $$ ActionMenu menu = new ActionMenu(context, place, (ActionGroup) action, presentationFactory, enableMnemonics, false)[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_96 $$ expandActionGroup(group, new ArrayList<AnAction>(), presentationFactory, context, place, ActionManager.getInstance())[ FD ]
Line_68 $$ if (fixMacScreenMenu) -->Line_82 $$ menuBuilt.setDone()[ CD ]
