Line_31 $$ rootComponent = panel-->Line_37 $$ rootComponent = adjustRendering(rootComponent, checkbox, index, isSelected, cellHasFocus)[ FD ]
Line_18 $$ if (auxText != null) -->Line_22 $$ JLabel infoLabel = new JLabel(auxText, SwingConstants.RIGHT)[ CD ]
Line_9 $$ if (shouldAdjustColors) -->Line_10 $$ checkbox.setBackground(backgroundColor)[ CD ]
Line_18 $$ if (auxText != null) -->Line_23 $$ infoLabel.setBorder(new EmptyBorder(0, 0, 0, checkbox.getInsets().left))[ CD ]
Line_17 $$ JComponent rootComponent-->Line_37 $$ rootComponent = adjustRendering(rootComponent, checkbox, index, isSelected, cellHasFocus)[ FD ]
Line_26 $$ if (shouldAdjustColors) -->Line_27 $$ panel.setBackground(backgroundColor)[ CD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_13 $$ checkbox.setEnabled(isEnabled())[ FD ]
Line_18 $$ if (auxText != null) -->Line_20 $$ checkbox.setBorderPainted(false)[ CD ]
Line_18 $$ if (auxText != null) -->Line_26 $$ if (shouldAdjustColors) [ CD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_10 $$ checkbox.setBackground(backgroundColor)[ FD ]
Line_16 $$ String auxText = getSecondaryText(index)-->Line_18 $$ if (auxText != null) [ FD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_33 $$ checkbox.setBorderPainted(true)[ FD ]
Line_9 $$ if (shouldAdjustColors) -->Line_11 $$ checkbox.setForeground(textColor)[ CD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_11 $$ checkbox.setForeground(textColor)[ FD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_21 $$ panel.add(checkbox, BorderLayout.LINE_START)[ FD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_37 $$ rootComponent = adjustRendering(rootComponent, checkbox, index, isSelected, cellHasFocus)[ FD ]
Line_17 $$ JComponent rootComponent-->Line_34 $$ rootComponent = checkbox[ FD ]
Line_7 $$ Font font = getFont()-->Line_24 $$ infoLabel.setFont(font)[ FD ]
Line_31 $$ rootComponent = panel-->Line_34 $$ rootComponent = checkbox[ FD ]
Line_22 $$ JLabel infoLabel = new JLabel(auxText, SwingConstants.RIGHT)-->Line_28 $$ infoLabel.setForeground(isSelected ? textColor : JBColor.GRAY)[ FD ]
Line_22 $$ JLabel infoLabel = new JLabel(auxText, SwingConstants.RIGHT)-->Line_29 $$ infoLabel.setBackground(backgroundColor)[ FD ]
Line_6 $$ Color backgroundColor = getBackground(isSelected)-->Line_27 $$ panel.setBackground(backgroundColor)[ FD ]
Line_18 $$ if (auxText != null) -->Line_31 $$ rootComponent = panel[ CD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_14 $$ checkbox.setFont(font)[ FD ]
Line_22 $$ JLabel infoLabel = new JLabel(auxText, SwingConstants.RIGHT)-->Line_23 $$ infoLabel.setBorder(new EmptyBorder(0, 0, 0, checkbox.getInsets().left))[ FD ]
Line_22 $$ JLabel infoLabel = new JLabel(auxText, SwingConstants.RIGHT)-->Line_24 $$ infoLabel.setFont(font)[ FD ]
Line_18 $$ if (auxText != null) -->Line_34 $$ rootComponent = checkbox[ CD ]
Line_6 $$ Color backgroundColor = getBackground(isSelected)-->Line_10 $$ checkbox.setBackground(backgroundColor)[ FD ]
Line_26 $$ if (shouldAdjustColors) -->Line_28 $$ infoLabel.setForeground(isSelected ? textColor : JBColor.GRAY)[ CD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_34 $$ rootComponent = checkbox[ FD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_15 $$ checkbox.setFocusPainted(false)[ FD ]
Line_18 $$ if (auxText != null) -->Line_24 $$ infoLabel.setFont(font)[ CD ]
Line_17 $$ JComponent rootComponent-->Line_36 $$ rootComponent.setBorder(isSelected ? mySelectedBorder : myBorder)[ FD ]
Line_31 $$ rootComponent = panel-->Line_36 $$ rootComponent.setBorder(isSelected ? mySelectedBorder : myBorder)[ FD ]
Line_5 $$ Color textColor = getForeground(isSelected)-->Line_11 $$ checkbox.setForeground(textColor)[ FD ]
Line_19 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_21 $$ panel.add(checkbox, BorderLayout.LINE_START)[ FD ]
Line_26 $$ if (shouldAdjustColors) -->Line_29 $$ infoLabel.setBackground(backgroundColor)[ CD ]
Line_18 $$ if (auxText != null) -->Line_19 $$ JPanel panel = new JPanel(new BorderLayout())[ CD ]
Line_19 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_25 $$ panel.add(infoLabel, BorderLayout.CENTER)[ FD ]
Line_34 $$ rootComponent = checkbox-->Line_36 $$ rootComponent.setBorder(isSelected ? mySelectedBorder : myBorder)[ FD ]
Line_18 $$ if (auxText != null) -->Line_25 $$ panel.add(infoLabel, BorderLayout.CENTER)[ CD ]
Line_6 $$ Color backgroundColor = getBackground(isSelected)-->Line_29 $$ infoLabel.setBackground(backgroundColor)[ FD ]
Line_34 $$ rootComponent = checkbox-->Line_37 $$ rootComponent = adjustRendering(rootComponent, checkbox, index, isSelected, cellHasFocus)[ FD ]
Line_17 $$ JComponent rootComponent-->Line_31 $$ rootComponent = panel[ FD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_20 $$ checkbox.setBorderPainted(false)[ FD ]
Line_19 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_31 $$ rootComponent = panel[ FD ]
Line_22 $$ JLabel infoLabel = new JLabel(auxText, SwingConstants.RIGHT)-->Line_25 $$ panel.add(infoLabel, BorderLayout.CENTER)[ FD ]
Line_18 $$ if (auxText != null) -->Line_21 $$ panel.add(checkbox, BorderLayout.LINE_START)[ CD ]
Line_7 $$ Font font = getFont()-->Line_14 $$ checkbox.setFont(font)[ FD ]
Line_19 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_27 $$ panel.setBackground(backgroundColor)[ FD ]
Line_18 $$ if (auxText != null) -->Line_33 $$ checkbox.setBorderPainted(true)[ CD ]
Line_4 $$ JCheckBox checkbox = (JCheckBox) value-->Line_23 $$ infoLabel.setBorder(new EmptyBorder(0, 0, 0, checkbox.getInsets().left))[ FD ]
