Line_31 $$ ModelHintsImpl modelHintsImpl = new ModelHintsImpl()-->Line_33 $$ modelHintsImpl.afterPropertiesSet()[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_13 $$ String[] modelHintsConfigs = StringUtil.split(GetterUtil.getString(arguments.get("service.model.hints.configs"), StringUtil.merge(ServiceBuilderArgs.MODEL_HINTS_CONFIGS)))[ CD ]
Line_19 $$ String[] resourceActionsConfigs = StringUtil.split(GetterUtil.getString(arguments.get("service.resource.actions.configs"), StringUtil.merge(ServiceBuilderArgs.RESOURCE_ACTION_CONFIGS)))-->Line_29 $$ Set<String> resourceActionModels = readResourceActionModels(implDirName, resourcesDirName, resourceActionsConfigs)[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_13 $$ String[] modelHintsConfigs = StringUtil.split(GetterUtil.getString(arguments.get("service.model.hints.configs"), StringUtil.merge(ServiceBuilderArgs.MODEL_HINTS_CONFIGS)))[ FD ]
Line_44 $$ if (t instanceof Exception) -->Line_46 $$ ArgumentsUtil.processMainException(arguments, (Exception) t)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_19 $$ String[] resourceActionsConfigs = StringUtil.split(GetterUtil.getString(arguments.get("service.resource.actions.configs"), StringUtil.merge(ServiceBuilderArgs.RESOURCE_ACTION_CONFIGS)))[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_19 $$ String[] resourceActionsConfigs = StringUtil.split(GetterUtil.getString(arguments.get("service.resource.actions.configs"), StringUtil.merge(ServiceBuilderArgs.RESOURCE_ACTION_CONFIGS)))[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_25 $$ String sqlIndexesFileName = arguments.get("service.sql.indexes.file")[ FD ]
Line_40 $$ String message = "Please set these arguments. Sample values are:\n" + "\n" + "\tservice.api.dir=$-->Line_45 $$ System.out.println(message)[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_7 $$ String beanLocatorUtil = arguments.get("service.bean.locator.util")[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_18 $$ String[] readOnlyPrefixes = StringUtil.split(GetterUtil.getString(arguments.get("service.read.only.prefixes"), StringUtil.merge(ServiceBuilderArgs.READ_ONLY_PREFIXES)))[ FD ]
Line_20 $$ String resourcesDirName = arguments.get("service.resources.dir")-->Line_29 $$ Set<String> resourceActionModels = readResourceActionModels(implDirName, resourcesDirName, resourceActionsConfigs)[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_22 $$ String[] springNamespaces = StringUtil.split(arguments.get("service.spring.namespaces"))[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_8 $$ long buildNumber = GetterUtil.getLong(arguments.get("service.build.number"), 1)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_31 $$ ModelHintsImpl modelHintsImpl = new ModelHintsImpl()[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_25 $$ String sqlIndexesFileName = arguments.get("service.sql.indexes.file")[ CD ]
Line_41 $$ if (t instanceof ServiceBuilderException) -->Line_44 $$ if (t instanceof Exception) [ CD ]
Line_11 $$ String implDirName = arguments.get("service.impl.dir")-->Line_29 $$ Set<String> resourceActionModels = readResourceActionModels(implDirName, resourcesDirName, resourceActionsConfigs)[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_20 $$ String resourcesDirName = arguments.get("service.resources.dir")[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_12 $$ String inputFileName = arguments.get("service.input.file")[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_23 $$ String sqlDirName = arguments.get("service.sql.dir")[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_15 $$ boolean osgiModule = GetterUtil.getBoolean(arguments.get("service.osgi.module"))[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_9 $$ boolean buildNumberIncrement = GetterUtil.getBoolean(arguments.get("service.build.number.increment"), true)[ FD ]
Line_44 $$ if (t instanceof Exception) -->Line_45 $$ System.out.println(message)[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_5 $$ boolean autoImportDefaultReferences = GetterUtil.getBoolean(arguments.get("service.auto.import.default.references"), true)[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_4 $$ String apiDirName = arguments.get("service.api.dir")[ FD ]
Line_13 $$ String[] modelHintsConfigs = StringUtil.split(GetterUtil.getString(arguments.get("service.model.hints.configs"), StringUtil.merge(ServiceBuilderArgs.MODEL_HINTS_CONFIGS)))-->Line_32 $$ modelHintsImpl.setModelHintsConfigs(modelHintsConfigs)[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_14 $$ String modelHintsFileName = arguments.get("service.model.hints.file")[ FD ]
Line_41 $$ if (t instanceof ServiceBuilderException) -->Line_43 $$ System.err.println(serviceBuilderException.getMessage())[ CD ]
Line_30 $$ ModelHintsUtil modelHintsUtil = new ModelHintsUtil()-->Line_34 $$ modelHintsUtil.setModelHints(modelHintsImpl)[ FD ]
Line_37 $$ String modifiedFileNames = StringUtil.merge(serviceBuilder.getModifiedFileNames())-->Line_38 $$ System.setProperty(ServiceBuilderArgs.OUTPUT_KEY_MODIFIED_FILES, modifiedFileNames)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_30 $$ ModelHintsUtil modelHintsUtil = new ModelHintsUtil()[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_28 $$ String testDirName = arguments.get("service.test.dir")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_56 $$ Introspector.flushCaches()[ CD ]
Line_42 $$ ServiceBuilderException serviceBuilderException = (ServiceBuilderException) t-->Line_43 $$ System.err.println(serviceBuilderException.getMessage())[ FD ]
Line_36 $$ ServiceBuilder serviceBuilder = new ServiceBuilder(apiDirName, autoImportDefaultReferences, autoNamespaceTables, beanLocatorUtil, buildNumber, buildNumberIncrement, hbmFileName, implDirName, inputFileName, modelHintsFileName, osgiModule, pluginName, propsUtil, readOnlyPrefixes, resourceActionModels, resourcesDirName, springFileName, springNamespaces, sqlDirName, sqlFileName, sqlIndexesFileName, sqlSequencesFileName, targetEntityName, testDirName, true)-->Line_37 $$ String modifiedFileNames = StringUtil.merge(serviceBuilder.getModifiedFileNames())[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_10 $$ String hbmFileName = arguments.get("service.hbm.file")[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_17 $$ String propsUtil = arguments.get("service.props.util")[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_28 $$ String testDirName = arguments.get("service.test.dir")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_21 $$ String springFileName = arguments.get("service.spring.file")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_33 $$ modelHintsImpl.afterPropertiesSet()[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_17 $$ String propsUtil = arguments.get("service.props.util")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_21 $$ String springFileName = arguments.get("service.spring.file")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_9 $$ boolean buildNumberIncrement = GetterUtil.getBoolean(arguments.get("service.build.number.increment"), true)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_8 $$ long buildNumber = GetterUtil.getLong(arguments.get("service.build.number"), 1)[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_6 $$ boolean autoNamespaceTables = GetterUtil.getBoolean(arguments.get("service.auto.namespace.tables"))[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_18 $$ String[] readOnlyPrefixes = StringUtil.split(GetterUtil.getString(arguments.get("service.read.only.prefixes"), StringUtil.merge(ServiceBuilderArgs.READ_ONLY_PREFIXES)))[ CD ]
Line_31 $$ ModelHintsImpl modelHintsImpl = new ModelHintsImpl()-->Line_32 $$ modelHintsImpl.setModelHintsConfigs(modelHintsConfigs)[ FD ]
Line_41 $$ if (t instanceof ServiceBuilderException) -->Line_42 $$ ServiceBuilderException serviceBuilderException = (ServiceBuilderException) t[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_11 $$ String implDirName = arguments.get("service.impl.dir")[ FD ]
Line_31 $$ ModelHintsImpl modelHintsImpl = new ModelHintsImpl()-->Line_34 $$ modelHintsUtil.setModelHints(modelHintsImpl)[ FD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_46 $$ ArgumentsUtil.processMainException(arguments, (Exception) t)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_14 $$ String modelHintsFileName = arguments.get("service.model.hints.file")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_15 $$ boolean osgiModule = GetterUtil.getBoolean(arguments.get("service.osgi.module"))[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_24 $$ String sqlFileName = arguments.get("service.sql.file")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_20 $$ String resourcesDirName = arguments.get("service.resources.dir")[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_24 $$ String sqlFileName = arguments.get("service.sql.file")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_5 $$ boolean autoImportDefaultReferences = GetterUtil.getBoolean(arguments.get("service.auto.import.default.references"), true)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_16 $$ String pluginName = arguments.get("service.plugin.name")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_4 $$ String apiDirName = arguments.get("service.api.dir")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_23 $$ String sqlDirName = arguments.get("service.sql.dir")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_12 $$ String inputFileName = arguments.get("service.input.file")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_7 $$ String beanLocatorUtil = arguments.get("service.bean.locator.util")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_32 $$ modelHintsImpl.setModelHintsConfigs(modelHintsConfigs)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_11 $$ String implDirName = arguments.get("service.impl.dir")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_27 $$ String targetEntityName = arguments.get("service.target.entity.name")[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_26 $$ String sqlSequencesFileName = arguments.get("service.sql.sequences.file")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_34 $$ modelHintsUtil.setModelHints(modelHintsImpl)[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_10 $$ String hbmFileName = arguments.get("service.hbm.file")[ FD ]
Line_44 $$ if (t instanceof Exception) -->Line_48 $$ t.printStackTrace()[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_27 $$ String targetEntityName = arguments.get("service.target.entity.name")[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_26 $$ String sqlSequencesFileName = arguments.get("service.sql.sequences.file")[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_29 $$ Set<String> resourceActionModels = readResourceActionModels(implDirName, resourcesDirName, resourceActionsConfigs)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_6 $$ boolean autoNamespaceTables = GetterUtil.getBoolean(arguments.get("service.auto.namespace.tables"))[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_22 $$ String[] springNamespaces = StringUtil.split(arguments.get("service.spring.namespaces"))[ CD ]
Line_3 $$ Map<String, String> arguments = ArgumentsUtil.parseArguments(args)-->Line_16 $$ String pluginName = arguments.get("service.plugin.name")[ FD ]
