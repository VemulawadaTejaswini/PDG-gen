Line_5 $$ if (this.crcCheckChanceSupplier.get() > ThreadLocalRandom.current().nextDouble()) -->Line_8 $$ if (Ints.fromByteArray(checksumBytes) != (int) checksum.getValue())[ CD ]
Line_5 $$ if (this.crcCheckChanceSupplier.get() > ThreadLocalRandom.current().nextDouble()) -->Line_7 $$ System.arraycopy(compressed, compressed.length - checksumBytes.length, checksumBytes, 0, checksumBytes.length)[ CD ]
Line_2 $$ private void decompress(byte[] compressed) throws IOException -->Line_3 $$ validBufferBytes = info.parameters.getSstableCompressor().uncompress(compressed, 0, compressed.length - checksumBytes.length, buffer, 0)[ CD ]
Line_2 $$ private void decompress(byte[] compressed) throws IOException -->Line_7 $$ System.arraycopy(compressed, compressed.length - checksumBytes.length, checksumBytes, 0, checksumBytes.length)[ FD ]
Line_2 $$ private void decompress(byte[] compressed) throws IOException -->Line_3 $$ validBufferBytes = info.parameters.getSstableCompressor().uncompress(compressed, 0, compressed.length - checksumBytes.length, buffer, 0)[ FD ]
Line_2 $$ private void decompress(byte[] compressed) throws IOException -->Line_5 $$ if (this.crcCheckChanceSupplier.get() > ThreadLocalRandom.current().nextDouble()) [ CD ]
Line_2 $$ private void decompress(byte[] compressed) throws IOException -->Line_12 $$ bufferOffset = current & ~(buffer.length - 1)[ CD ]
Line_5 $$ if (this.crcCheckChanceSupplier.get() > ThreadLocalRandom.current().nextDouble()) -->Line_6 $$ checksum.update(compressed, 0, compressed.length - checksumBytes.length)[ CD ]
Line_2 $$ private void decompress(byte[] compressed) throws IOException -->Line_6 $$ checksum.update(compressed, 0, compressed.length - checksumBytes.length)[ FD ]
Line_5 $$ if (this.crcCheckChanceSupplier.get() > ThreadLocalRandom.current().nextDouble()) -->Line_10 $$ checksum.reset()[ CD ]
