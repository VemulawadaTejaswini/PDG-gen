Line_15 $$ byte[] nextRun-->Line_23 $$ nextRun = runs[index % runs.length][ FD ]
Line_2 $$ public void setup() throws IOException -->Line_5 $$ int[] duplicateLookback = range(this.duplicateLookback)[ CD ]
Line_17 $$ nextRun = new byte[random.nextInt(randomRunLength[0], randomRunLength[1])]-->Line_23 $$ nextRun = runs[index % runs.length][ FD ]
Line_14 $$ while (byteCount < trg.length) -->Line_26 $$ byteCount += nextRun.length[ CD ]
Line_16 $$ if (runCount == 0 || random.nextDouble() < this.randomRatio) -->Line_18 $$ random.nextBytes(nextRun)[ CD ]
Line_11 $$ byte[] trg = rawBytes[0]-->Line_29 $$ snappyBytes[i] = Snappy.compress(trg)[ FD ]
Line_15 $$ byte[] nextRun-->Line_17 $$ nextRun = new byte[random.nextInt(randomRunLength[0], randomRunLength[1])][ FD ]
Line_15 $$ byte[] nextRun-->Line_18 $$ random.nextBytes(nextRun)[ FD ]
Line_2 $$ public void setup() throws IOException -->Line_4 $$ int[] randomRunLength = range(this.randomRunLength)[ CD ]
Line_2 $$ public void setup() throws IOException -->Line_10 $$ for (int i = 0; i < rawBytes.length; i++) [ CD ]
Line_2 $$ public void setup() throws IOException -->Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()[ CD ]
Line_14 $$ while (byteCount < trg.length) -->Line_25 $$ System.arraycopy(nextRun, 0, trg, byteCount, Math.min(nextRun.length, trg.length - byteCount))[ CD ]
Line_17 $$ nextRun = new byte[random.nextInt(randomRunLength[0], randomRunLength[1])]-->Line_25 $$ System.arraycopy(nextRun, 0, trg, byteCount, Math.min(nextRun.length, trg.length - byteCount))[ FD ]
Line_10 $$ for (int i = 0; i < rawBytes.length; i++) -->Line_28 $$ lz4Bytes[i] = lz4Compressor.compress(trg)[ CD ]
Line_2 $$ public void setup() throws IOException -->Line_9 $$ byte[][] runs = new byte[duplicateLookback[1] - duplicateLookback[0]][][ CD ]
Line_16 $$ if (runCount == 0 || random.nextDouble() < this.randomRatio) -->Line_17 $$ nextRun = new byte[random.nextInt(randomRunLength[0], randomRunLength[1])][ CD ]
Line_16 $$ if (runCount == 0 || random.nextDouble() < this.randomRatio) -->Line_19 $$ runs[runCount % runs.length] = nextRun[ CD ]
Line_15 $$ byte[] nextRun-->Line_25 $$ System.arraycopy(nextRun, 0, trg, byteCount, Math.min(nextRun.length, trg.length - byteCount))[ FD ]
Line_12 $$ int runCount = 0-->Line_20 $$ runCount++[ FD ]
Line_11 $$ byte[] trg = rawBytes[0]-->Line_28 $$ lz4Bytes[i] = lz4Compressor.compress(trg)[ FD ]
Line_23 $$ nextRun = runs[index % runs.length]-->Line_25 $$ System.arraycopy(nextRun, 0, trg, byteCount, Math.min(nextRun.length, trg.length - byteCount))[ FD ]
Line_26 $$ byteCount += nextRun.length-->Line_25 $$ System.arraycopy(nextRun, 0, trg, byteCount, Math.min(nextRun.length, trg.length - byteCount))[ FD ]
Line_13 $$ int byteCount = 0-->Line_25 $$ System.arraycopy(nextRun, 0, trg, byteCount, Math.min(nextRun.length, trg.length - byteCount))[ FD ]
Line_10 $$ for (int i = 0; i < rawBytes.length; i++) -->Line_14 $$ while (byteCount < trg.length) [ CD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_18 $$ random.nextBytes(nextRun)[ FD ]
Line_10 $$ for (int i = 0; i < rawBytes.length; i++) -->Line_13 $$ int byteCount = 0[ CD ]
Line_10 $$ for (int i = 0; i < rawBytes.length; i++) -->Line_11 $$ byte[] trg = rawBytes[0][ CD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_16 $$ if (runCount == 0 || random.nextDouble() < this.randomRatio) [ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_22 $$ int index = runCount < duplicateLookback[1] ? random.nextInt(runCount) : (runCount - random.nextInt(duplicateLookback[0], duplicateLookback[1]))[ FD ]
Line_26 $$ byteCount += nextRun.length-->Line_14 $$ while (byteCount < trg.length) [ FD ]
Line_12 $$ int runCount = 0-->Line_22 $$ int index = runCount < duplicateLookback[1] ? random.nextInt(runCount) : (runCount - random.nextInt(duplicateLookback[0], duplicateLookback[1]))[ FD ]
Line_15 $$ byte[] nextRun-->Line_19 $$ runs[runCount % runs.length] = nextRun[ FD ]
Line_17 $$ nextRun = new byte[random.nextInt(randomRunLength[0], randomRunLength[1])]-->Line_19 $$ runs[runCount % runs.length] = nextRun[ FD ]
Line_16 $$ if (runCount == 0 || random.nextDouble() < this.randomRatio) -->Line_22 $$ int index = runCount < duplicateLookback[1] ? random.nextInt(runCount) : (runCount - random.nextInt(duplicateLookback[0], duplicateLookback[1]))[ CD ]
Line_23 $$ nextRun = runs[index % runs.length]-->Line_18 $$ random.nextBytes(nextRun)[ FD ]
Line_10 $$ for (int i = 0; i < rawBytes.length; i++) -->Line_12 $$ int runCount = 0[ CD ]
Line_17 $$ nextRun = new byte[random.nextInt(randomRunLength[0], randomRunLength[1])]-->Line_18 $$ random.nextBytes(nextRun)[ FD ]
Line_11 $$ byte[] trg = rawBytes[0]-->Line_25 $$ System.arraycopy(nextRun, 0, trg, byteCount, Math.min(nextRun.length, trg.length - byteCount))[ FD ]
Line_13 $$ int byteCount = 0-->Line_26 $$ byteCount += nextRun.length[ FD ]
Line_14 $$ while (byteCount < trg.length) -->Line_15 $$ byte[] nextRun[ CD ]
Line_23 $$ nextRun = runs[index % runs.length]-->Line_19 $$ runs[runCount % runs.length] = nextRun[ FD ]
Line_13 $$ int byteCount = 0-->Line_14 $$ while (byteCount < trg.length) [ FD ]
Line_14 $$ while (byteCount < trg.length) -->Line_16 $$ if (runCount == 0 || random.nextDouble() < this.randomRatio) [ CD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_17 $$ nextRun = new byte[random.nextInt(randomRunLength[0], randomRunLength[1])][ FD ]
Line_10 $$ for (int i = 0; i < rawBytes.length; i++) -->Line_29 $$ snappyBytes[i] = Snappy.compress(trg)[ CD ]
Line_16 $$ if (runCount == 0 || random.nextDouble() < this.randomRatio) -->Line_23 $$ nextRun = runs[index % runs.length][ CD ]
Line_16 $$ if (runCount == 0 || random.nextDouble() < this.randomRatio) -->Line_20 $$ runCount++[ CD ]
