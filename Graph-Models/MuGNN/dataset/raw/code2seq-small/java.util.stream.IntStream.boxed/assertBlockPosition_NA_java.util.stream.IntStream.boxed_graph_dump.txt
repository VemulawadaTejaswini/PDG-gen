Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_6 $$ assertPositionValue(block.getRegion(0, position + 1), position, expectedValue)[ FD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_7 $$ assertPositionValue(block.getRegion(position, block.getPositionCount() - position), 0, expectedValue)[ FD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_5 $$ assertPositionValue(block.getRegion(position, 1), 0, expectedValue)[ FD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_12 $$ assertPositionValue(block.copyPositions(IntStream.range(positionFloored, positionFloored + COLUMN_COUNT).boxed().collect(Collectors.toList())), position % COLUMN_COUNT, expectedValue)[ CD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_10 $$ assertPositionValue(block.copyRegion(position, block.getPositionCount() - position), 0, expectedValue)[ CD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_3 $$ assertPositionValue(block, position, expectedValue)[ FD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_4 $$ assertPositionValue(block.getSingleValueBlock(position), 0, expectedValue)[ CD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_10 $$ assertPositionValue(block.copyRegion(position, block.getPositionCount() - position), 0, expectedValue)[ FD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_11 $$ int positionFloored = position / COLUMN_COUNT * COLUMN_COUNT[ CD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_6 $$ assertPositionValue(block.getRegion(0, position + 1), position, expectedValue)[ CD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_5 $$ assertPositionValue(block.getRegion(position, 1), 0, expectedValue)[ CD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_4 $$ assertPositionValue(block.getSingleValueBlock(position), 0, expectedValue)[ FD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_9 $$ assertPositionValue(block.copyRegion(0, position + 1), position, expectedValue)[ CD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_12 $$ assertPositionValue(block.copyPositions(IntStream.range(positionFloored, positionFloored + COLUMN_COUNT).boxed().collect(Collectors.toList())), position % COLUMN_COUNT, expectedValue)[ FD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_8 $$ assertPositionValue(block.copyRegion(position, 1), 0, expectedValue)[ FD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_3 $$ assertPositionValue(block, position, expectedValue)[ CD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_8 $$ assertPositionValue(block.copyRegion(position, 1), 0, expectedValue)[ CD ]
Line_11 $$ int positionFloored = position / COLUMN_COUNT * COLUMN_COUNT-->Line_12 $$ assertPositionValue(block.copyPositions(IntStream.range(positionFloored, positionFloored + COLUMN_COUNT).boxed().collect(Collectors.toList())), position % COLUMN_COUNT, expectedValue)[ FD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_7 $$ assertPositionValue(block.getRegion(position, block.getPositionCount() - position), 0, expectedValue)[ CD ]
Line_2 $$ protected <T> void assertBlockPosition(Block block, int position, T expectedValue) -->Line_9 $$ assertPositionValue(block.copyRegion(0, position + 1), position, expectedValue)[ FD ]
