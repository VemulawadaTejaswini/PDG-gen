Line_2 $$ public static ChunkCustomCompilerExtension[] getCustomCompile(ModuleChunk chunk) -->Line_4 $$ LinkedList<ChunkCustomCompilerExtension> compilers = new LinkedList<ChunkCustomCompilerExtension>()[ CD ]
Line_4 $$ LinkedList<ChunkCustomCompilerExtension> compilers = new LinkedList<ChunkCustomCompilerExtension>()-->Line_10 $$ final ChunkCustomCompilerExtension[] rc = compilers.toArray(new ChunkCustomCompilerExtension[compilers.size()])[ FD ]
Line_2 $$ public static ChunkCustomCompilerExtension[] getCustomCompile(ModuleChunk chunk) -->Line_11 $$ Arrays.sort(rc, ChunkCustomCompilerExtension.COMPARATOR)[ CD ]
Line_6 $$ if (extension.hasCustomCompile(chunk)) -->Line_7 $$ compilers.add(extension)[ CD ]
Line_2 $$ public static ChunkCustomCompilerExtension[] getCustomCompile(ModuleChunk chunk) -->Line_12 $$ return rc[ CD ]
Line_2 $$ public static ChunkCustomCompilerExtension[] getCustomCompile(ModuleChunk chunk) -->Line_6 $$ if (extension.hasCustomCompile(chunk)) [ FD ]
Line_2 $$ public static ChunkCustomCompilerExtension[] getCustomCompile(ModuleChunk chunk) -->Line_10 $$ final ChunkCustomCompilerExtension[] rc = compilers.toArray(new ChunkCustomCompilerExtension[compilers.size()])[ CD ]
Line_10 $$ final ChunkCustomCompilerExtension[] rc = compilers.toArray(new ChunkCustomCompilerExtension[compilers.size()])-->Line_11 $$ Arrays.sort(rc, ChunkCustomCompilerExtension.COMPARATOR)[ FD ]
Line_2 $$ public static ChunkCustomCompilerExtension[] getCustomCompile(ModuleChunk chunk) -->Line_3 $$ final ChunkCustomCompilerExtension[] extensions = Extensions.getRootArea().getExtensionPoint(EP_NAME).getExtensions()[ CD ]
Line_5 $$ for (ChunkCustomCompilerExtension extension : extensions) -->Line_6 $$ if (extension.hasCustomCompile(chunk)) [ FD ]
Line_4 $$ LinkedList<ChunkCustomCompilerExtension> compilers = new LinkedList<ChunkCustomCompilerExtension>()-->Line_7 $$ compilers.add(extension)[ FD ]
Line_5 $$ for (ChunkCustomCompilerExtension extension : extensions) -->Line_7 $$ compilers.add(extension)[ FD ]
