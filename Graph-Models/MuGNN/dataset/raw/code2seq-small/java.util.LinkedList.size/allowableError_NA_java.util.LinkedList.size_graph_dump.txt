Line_6 $$ double error-->Line_10 $$ error = (2.0 * q.error * rank) / q.quantile[ FD ]
Line_2 $$ private double allowableError(int rank) -->Line_16 $$ return minError[ CD ]
Line_6 $$ double error-->Line_8 $$ error = (2.0 * q.error * (size - rank)) / (1.0 - q.quantile)[ FD ]
Line_2 $$ private double allowableError(int rank) -->Line_7 $$ if (rank <= q.quantile * size) [ FD ]
Line_4 $$ double minError = size + 1-->Line_13 $$ minError = error[ FD ]
Line_6 $$ double error-->Line_13 $$ minError = error[ FD ]
Line_10 $$ error = (2.0 * q.error * rank) / q.quantile-->Line_12 $$ if (error < minError) [ FD ]
Line_8 $$ error = (2.0 * q.error * (size - rank)) / (1.0 - q.quantile)-->Line_13 $$ minError = error[ FD ]
Line_10 $$ error = (2.0 * q.error * rank) / q.quantile-->Line_13 $$ minError = error[ FD ]
Line_2 $$ private double allowableError(int rank) -->Line_4 $$ double minError = size + 1[ CD ]
Line_8 $$ error = (2.0 * q.error * (size - rank)) / (1.0 - q.quantile)-->Line_10 $$ error = (2.0 * q.error * rank) / q.quantile[ FD ]
Line_12 $$ if (error < minError) -->Line_13 $$ minError = error[ CD ]
Line_2 $$ private double allowableError(int rank) -->Line_3 $$ int size = samples.size()[ CD ]
Line_4 $$ double minError = size + 1-->Line_12 $$ if (error < minError) [ FD ]
Line_7 $$ if (rank <= q.quantile * size) -->Line_10 $$ error = (2.0 * q.error * rank) / q.quantile[ CD ]
Line_6 $$ double error-->Line_12 $$ if (error < minError) [ FD ]
Line_8 $$ error = (2.0 * q.error * (size - rank)) / (1.0 - q.quantile)-->Line_12 $$ if (error < minError) [ FD ]
Line_7 $$ if (rank <= q.quantile * size) -->Line_8 $$ error = (2.0 * q.error * (size - rank)) / (1.0 - q.quantile)[ CD ]
