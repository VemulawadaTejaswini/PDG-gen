Line_3 $$ class Node -->Line_14 $$ return myConstraint[ CD ]
Line_3 $$ class Node -->Line_18 $$ myNeighbours.add(n)[ FD ]
Line_2 $$ public ReductionSystem[] isolate() -->Line_26 $$ for (int i = 0; i < typeVariableNodes.length; i++) [ CD ]
Line_86 $$ if (prev != null) -->Line_87 $$ prev.addEdge(curr)[ CD ]
Line_40 $$ new Object() -->Line_43 $$ visit(c.getRight())[ CD ]
Line_94 $$ if (node.myComponent == -1) -->Line_96 $$ new Object() [ CD ]
Line_98 $$ final LinkedList<Node> frontier = new LinkedList<Node>()-->Line_100 $$ while (frontier.size() > 0) [ FD ]
Line_100 $$ while (frontier.size() > 0) -->Line_101 $$ final Node curr = frontier.removeFirst()[ CD ]
Line_17 $$ if (!myNeighbours.contains(n)) -->Line_18 $$ myNeighbours.add(n)[ CD ]
Line_40 $$ new Object() -->Line_48 $$ if (t instanceof PsiArrayType) [ FD ]
Line_40 $$ new Object() -->Line_60 $$ if (t instanceof PsiWildcardType) [ FD ]
Line_61 $$ final PsiType bound = ((PsiWildcardType) t).getBound()-->Line_63 $$ visit(bound)[ FD ]
Line_69 $$ for (int j = 0; j < bound.length; j++) -->Line_70 $$ final int x = bound[j].getIndex()[ CD ]
Line_73 $$ for (int k = j + 1; k < bound.length; k++) -->Line_74 $$ final int y = bound[k].getIndex()[ CD ]
Line_40 $$ new Object() -->Line_42 $$ visit(c.getLeft())[ FD ]
Line_71 $$ final Node typeVariableNode = typeVariableNodes[x]-->Line_75 $$ typeVariableNode.addEdge(typeVariableNodes[y])[ FD ]
Line_48 $$ if (t instanceof PsiArrayType) -->Line_49 $$ visit(t.getDeepComponentType())[ CD ]
Line_98 $$ final LinkedList<Node> frontier = new LinkedList<Node>()-->Line_99 $$ frontier.addFirst(n)[ FD ]
Line_3 $$ class Node -->Line_99 $$ frontier.addFirst(n)[ FD ]
Line_118 $$ if (systems[index] == null) -->Line_119 $$ systems[index] = new ReductionSystem(myProject, myElements, myTypes, myTypeVariableFactory, mySettings)[ CD ]
Line_3 $$ class Node -->Line_19 $$ n.addEdge(this)[ FD ]
Line_50 $$ if (t instanceof PsiClassType) -->Line_55 $$ if (t instanceof PsiIntersectionType) [ CD ]
Line_26 $$ for (int i = 0; i < typeVariableNodes.length; i++) -->Line_27 $$ typeVariableNodes[i] = new Node()[ CD ]
Line_96 $$ new Object() -->Line_99 $$ frontier.addFirst(n)[ FD ]
Line_40 $$ new Object() -->Line_51 $$ final PsiSubstitutor subst = Util.resolveType(t).getSubstitutor()[ FD ]
Line_40 $$ new Object() -->Line_46 $$ if (t instanceof PsiTypeVariable) [ FD ]
Line_2 $$ public ReductionSystem[] isolate() -->Line_81 $$ List<Set<PsiTypeVariable>> clusters = myTypeVariableFactory.getClusters()[ CD ]
Line_98 $$ final LinkedList<Node> frontier = new LinkedList<Node>()-->Line_105 $$ frontier.addFirst(p)[ FD ]
Line_96 $$ new Object() -->Line_98 $$ final LinkedList<Node> frontier = new LinkedList<Node>()[ CD ]
Line_103 $$ for (final Node p : curr.myNeighbours) -->Line_105 $$ frontier.addFirst(p)[ FD ]
Line_40 $$ new Object() -->Line_55 $$ if (t instanceof PsiIntersectionType) [ FD ]
Line_60 $$ if (t instanceof PsiWildcardType) -->Line_62 $$ if (bound != null) [ CD ]
Line_62 $$ if (bound != null) -->Line_63 $$ visit(bound)[ CD ]
Line_69 $$ for (int j = 0; j < bound.length; j++) -->Line_72 $$ typeVariableNode.addEdge(constraintNode)[ CD ]
Line_71 $$ final Node typeVariableNode = typeVariableNodes[x]-->Line_72 $$ typeVariableNode.addEdge(constraintNode)[ FD ]
Line_50 $$ if (t instanceof PsiClassType) -->Line_51 $$ final PsiSubstitutor subst = Util.resolveType(t).getSubstitutor()[ CD ]
Line_2 $$ public ReductionSystem[] isolate() -->Line_123 $$ return systems[ CD ]
Line_52 $$ for (final PsiType type : subst.getSubstitutionMap().values()) -->Line_53 $$ visit(type)[ FD ]
Line_51 $$ final PsiSubstitutor subst = Util.resolveType(t).getSubstitutor()-->Line_52 $$ for (final PsiType type : subst.getSubstitutionMap().values()) [ FD ]
Line_57 $$ for (PsiType conjunct : conjuncts) -->Line_58 $$ visit(conjunct)[ FD ]
Line_40 $$ new Object() -->Line_50 $$ if (t instanceof PsiClassType) [ FD ]
Line_46 $$ if (t instanceof PsiTypeVariable) -->Line_47 $$ boundVars.add((PsiTypeVariable) t)[ CD ]
Line_40 $$ new Object() -->Line_49 $$ visit(t.getDeepComponentType())[ FD ]
Line_40 $$ new Object() -->Line_42 $$ visit(c.getLeft())[ CD ]
Line_3 $$ class Node -->Line_17 $$ if (!myNeighbours.contains(n)) [ FD ]
Line_17 $$ if (!myNeighbours.contains(n)) -->Line_19 $$ n.addEdge(this)[ CD ]
Line_48 $$ if (t instanceof PsiArrayType) -->Line_50 $$ if (t instanceof PsiClassType) [ CD ]
Line_61 $$ final PsiType bound = ((PsiWildcardType) t).getBound()-->Line_62 $$ if (bound != null) [ FD ]
Line_69 $$ for (int j = 0; j < bound.length; j++) -->Line_73 $$ for (int k = j + 1; k < bound.length; k++) [ CD ]
Line_40 $$ new Object() -->Line_43 $$ visit(c.getRight())[ FD ]
Line_104 $$ if (p.myComponent == -1) -->Line_105 $$ frontier.addFirst(p)[ CD ]
Line_55 $$ if (t instanceof PsiIntersectionType) -->Line_60 $$ if (t instanceof PsiWildcardType) [ CD ]
Line_98 $$ final LinkedList<Node> frontier = new LinkedList<Node>()-->Line_101 $$ final Node curr = frontier.removeFirst()[ FD ]
Line_69 $$ for (int j = 0; j < bound.length; j++) -->Line_71 $$ final Node typeVariableNode = typeVariableNodes[x][ CD ]
Line_40 $$ new Object() -->Line_46 $$ if (t instanceof PsiTypeVariable) [ CD ]
Line_96 $$ new Object() -->Line_100 $$ while (frontier.size() > 0) [ CD ]
Line_73 $$ for (int k = j + 1; k < bound.length; k++) -->Line_75 $$ typeVariableNode.addEdge(typeVariableNodes[y])[ CD ]
Line_3 $$ class Node -->Line_17 $$ if (!myNeighbours.contains(n)) [ CD ]
Line_96 $$ new Object() -->Line_99 $$ frontier.addFirst(n)[ CD ]
Line_60 $$ if (t instanceof PsiWildcardType) -->Line_61 $$ final PsiType bound = ((PsiWildcardType) t).getBound()[ CD ]
Line_55 $$ if (t instanceof PsiIntersectionType) -->Line_56 $$ final PsiType[] conjuncts = ((PsiIntersectionType) t).getConjuncts()[ CD ]
Line_46 $$ if (t instanceof PsiTypeVariable) -->Line_48 $$ if (t instanceof PsiArrayType) [ CD ]
