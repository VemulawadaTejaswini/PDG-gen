Line_17 $$ if (screenWidth + d.width > width) -->Line_24 $$ screenWidth += backward.getWidth() - myOffset[ CD ]
Line_24 $$ screenWidth += backward.getWidth() - myOffset-->Line_34 $$ screenWidth = forward.getWidth()[ FD ]
Line_7 $$ int screenWidth = 0-->Line_43 $$ screenWidth += d.width[ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_55 $$ final Crumb c = result.get(i)[ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_43 $$ screenWidth += d.width[ CD ]
Line_36 $$ if (first != null) -->Line_37 $$ result.addFirst(first)[ CD ]
Line_7 $$ int screenWidth = 0-->Line_38 $$ screenWidth += first.getWidth()[ FD ]
Line_18 $$ Crumb first = null-->Line_21 $$ screenWidth -= first.getWidth()[ FD ]
Line_21 $$ screenWidth -= first.getWidth()-->Line_34 $$ screenWidth = forward.getWidth()[ FD ]
Line_11 $$ final NavigationCrumb forward = new NavigationCrumb(this, fm, true, DEFAULT_PAINTER)-->Line_34 $$ screenWidth = forward.getWidth()[ FD ]
Line_21 $$ screenWidth -= first.getWidth()-->Line_38 $$ screenWidth += first.getWidth()[ FD ]
Line_20 $$ first = result.removeFirst()-->Line_38 $$ screenWidth += first.getWidth()[ FD ]
Line_12 $$ final NavigationCrumb backward = new NavigationCrumb(this, fm, false, DEFAULT_PAINTER)-->Line_15 $$ final Dimension d = DEFAULT_PAINTER.getSize(s, fm, width - forward.getWidth() - backward.getWidth())[ FD ]
Line_49 $$ for (final Crumb each : result) -->Line_50 $$ each.setOffset(offset)[ FD ]
Line_54 $$ for (int i = result.size() - 1; i >= 0; i--) -->Line_56 $$ if (!(c instanceof DummyCrumb)) [ CD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_8 $$ Crumb rightmostCrumb = null[ CD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) [ FD ]
Line_38 $$ screenWidth += first.getWidth()-->Line_43 $$ screenWidth += d.width[ FD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_13 $$ final BreadcrumbsItem element = elements.get(i)[ FD ]
Line_17 $$ if (screenWidth + d.width > width) -->Line_23 $$ result.addFirst(backward)[ CD ]
Line_24 $$ screenWidth += backward.getWidth() - myOffset-->Line_43 $$ screenWidth += d.width[ FD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_3 $$ if (elements.size() == 0) [ FD ]
Line_17 $$ if (screenWidth + d.width > width) -->Line_36 $$ if (first != null) [ CD ]
Line_54 $$ for (int i = result.size() - 1; i >= 0; i--) -->Line_55 $$ final Crumb c = result.get(i)[ FD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_42 $$ result.addFirst(crumb)[ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_13 $$ final BreadcrumbsItem element = elements.get(i)[ FD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_62 $$ return result[ CD ]
Line_12 $$ final NavigationCrumb backward = new NavigationCrumb(this, fm, false, DEFAULT_PAINTER)-->Line_24 $$ screenWidth += backward.getWidth() - myOffset[ FD ]
Line_17 $$ if (screenWidth + d.width > width) -->Line_40 $$ rightmostCrumb = first != null ? first : crumb[ CD ]
Line_17 $$ if (screenWidth + d.width > width) -->Line_26 $$ if (dummyWidth > 0) [ CD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_46 $$ result.add(result.indexOf(rightmostCrumb) + 2, new DummyCrumb(width - screenWidth - fwd.getWidth() - 8))[ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_17 $$ if (screenWidth + d.width > width) [ CD ]
Line_8 $$ Crumb rightmostCrumb = null-->Line_46 $$ result.add(result.indexOf(rightmostCrumb) + 2, new DummyCrumb(width - screenWidth - fwd.getWidth() - 8))[ FD ]
Line_40 $$ rightmostCrumb = first != null ? first : crumb-->Line_46 $$ result.add(result.indexOf(rightmostCrumb) + 2, new DummyCrumb(width - screenWidth - fwd.getWidth() - 8))[ FD ]
Line_13 $$ final BreadcrumbsItem element = elements.get(i)-->Line_14 $$ final String s = element.getDisplayText()[ FD ]
Line_14 $$ final String s = element.getDisplayText()-->Line_15 $$ final Dimension d = DEFAULT_PAINTER.getSize(s, fm, width - forward.getWidth() - backward.getWidth())[ FD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_37 $$ result.addFirst(first)[ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_42 $$ result.addFirst(crumb)[ CD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_23 $$ result.addFirst(backward)[ FD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_48 $$ int offset = myOffset[ CD ]
Line_55 $$ final Crumb c = result.get(i)-->Line_57 $$ c.setSelected(true)[ FD ]
Line_18 $$ Crumb first = null-->Line_37 $$ result.addFirst(first)[ FD ]
Line_48 $$ int offset = myOffset-->Line_51 $$ offset += each.getWidth()[ FD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()[ CD ]
Line_18 $$ Crumb first = null-->Line_38 $$ screenWidth += first.getWidth()[ FD ]
Line_27 $$ final DummyCrumb dummy = new DummyCrumb(dummyWidth)-->Line_31 $$ result.addLast(dummy)[ FD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_35 $$ result.addFirst(forward)[ FD ]
Line_40 $$ rightmostCrumb = first != null ? first : crumb-->Line_29 $$ result.add(result.indexOf(rightmostCrumb) + 1, dummy)[ FD ]
Line_18 $$ Crumb first = null-->Line_20 $$ first = result.removeFirst()[ FD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) [ CD ]
Line_45 $$ if (rightmostCrumb != null && screenWidth < width) -->Line_46 $$ result.add(result.indexOf(rightmostCrumb) + 2, new DummyCrumb(width - screenWidth - fwd.getWidth() - 8))[ CD ]
Line_11 $$ final NavigationCrumb forward = new NavigationCrumb(this, fm, true, DEFAULT_PAINTER)-->Line_35 $$ result.addFirst(forward)[ FD ]
Line_16 $$ final Crumb crumb = new Crumb(this, s, d.width + EXTRA_WIDTH, element)-->Line_42 $$ result.addFirst(crumb)[ FD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_17 $$ if (screenWidth + d.width > width) [ FD ]
Line_24 $$ screenWidth += backward.getWidth() - myOffset-->Line_38 $$ screenWidth += first.getWidth()[ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_16 $$ final Crumb crumb = new Crumb(this, s, d.width + EXTRA_WIDTH, element)[ CD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_7 $$ int screenWidth = 0[ CD ]
Line_9 $$ final NavigationCrumb fwd = new NavigationCrumb(this, fm, true, DEFAULT_PAINTER)-->Line_46 $$ result.add(result.indexOf(rightmostCrumb) + 2, new DummyCrumb(width - screenWidth - fwd.getWidth() - 8))[ FD ]
Line_3 $$ if (elements.size() == 0) -->Line_4 $$ return null[ CD ]
Line_7 $$ int screenWidth = 0-->Line_21 $$ screenWidth -= first.getWidth()[ FD ]
Line_28 $$ if (rightmostCrumb != null) -->Line_29 $$ result.add(result.indexOf(rightmostCrumb) + 1, dummy)[ CD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_15 $$ final Dimension d = DEFAULT_PAINTER.getSize(s, fm, width - forward.getWidth() - backward.getWidth())[ CD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_53 $$ if (result.size() > 0) [ CD ]
Line_17 $$ if (screenWidth + d.width > width) -->Line_35 $$ result.addFirst(forward)[ CD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_45 $$ if (rightmostCrumb != null && screenWidth < width) [ CD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_15 $$ final Dimension d = DEFAULT_PAINTER.getSize(s, fm, width - forward.getWidth() - backward.getWidth())[ FD ]
Line_17 $$ if (screenWidth + d.width > width) -->Line_34 $$ screenWidth = forward.getWidth()[ CD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_29 $$ result.add(result.indexOf(rightmostCrumb) + 1, dummy)[ FD ]
Line_54 $$ for (int i = result.size() - 1; i >= 0; i--) -->Line_55 $$ final Crumb c = result.get(i)[ CD ]
Line_12 $$ final NavigationCrumb backward = new NavigationCrumb(this, fm, false, DEFAULT_PAINTER)-->Line_19 $$ if (screenWidth + backward.getWidth() > width && !result.isEmpty()) [ FD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_54 $$ for (int i = result.size() - 1; i >= 0; i--) [ FD ]
Line_20 $$ first = result.removeFirst()-->Line_21 $$ screenWidth -= first.getWidth()[ FD ]
Line_8 $$ Crumb rightmostCrumb = null-->Line_28 $$ if (rightmostCrumb != null) [ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_13 $$ final BreadcrumbsItem element = elements.get(i)[ CD ]
Line_56 $$ if (!(c instanceof DummyCrumb)) -->Line_57 $$ c.setSelected(true)[ CD ]
Line_26 $$ if (dummyWidth > 0) -->Line_27 $$ final DummyCrumb dummy = new DummyCrumb(dummyWidth)[ CD ]
Line_17 $$ if (screenWidth + d.width > width) -->Line_25 $$ int dummyWidth = width - screenWidth[ CD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_19 $$ if (screenWidth + backward.getWidth() > width && !result.isEmpty()) [ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_12 $$ final NavigationCrumb backward = new NavigationCrumb(this, fm, false, DEFAULT_PAINTER)[ CD ]
Line_27 $$ final DummyCrumb dummy = new DummyCrumb(dummyWidth)-->Line_29 $$ result.add(result.indexOf(rightmostCrumb) + 1, dummy)[ FD ]
Line_21 $$ screenWidth -= first.getWidth()-->Line_43 $$ screenWidth += d.width[ FD ]
Line_17 $$ if (screenWidth + d.width > width) -->Line_19 $$ if (screenWidth + backward.getWidth() > width && !result.isEmpty()) [ CD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_9 $$ final NavigationCrumb fwd = new NavigationCrumb(this, fm, true, DEFAULT_PAINTER)[ CD ]
Line_11 $$ final NavigationCrumb forward = new NavigationCrumb(this, fm, true, DEFAULT_PAINTER)-->Line_15 $$ final Dimension d = DEFAULT_PAINTER.getSize(s, fm, width - forward.getWidth() - backward.getWidth())[ FD ]
Line_20 $$ first = result.removeFirst()-->Line_36 $$ if (first != null) [ FD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_20 $$ first = result.removeFirst()[ FD ]
Line_48 $$ int offset = myOffset-->Line_50 $$ each.setOffset(offset)[ FD ]
Line_34 $$ screenWidth = forward.getWidth()-->Line_38 $$ screenWidth += first.getWidth()[ FD ]
Line_49 $$ for (final Crumb each : result) -->Line_51 $$ offset += each.getWidth()[ FD ]
Line_53 $$ if (result.size() > 0) -->Line_54 $$ for (int i = result.size() - 1; i >= 0; i--) [ CD ]
Line_7 $$ int screenWidth = 0-->Line_24 $$ screenWidth += backward.getWidth() - myOffset[ FD ]
Line_36 $$ if (first != null) -->Line_38 $$ screenWidth += first.getWidth()[ CD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_53 $$ if (result.size() > 0) [ FD ]
Line_25 $$ int dummyWidth = width - screenWidth-->Line_26 $$ if (dummyWidth > 0) [ FD ]
Line_34 $$ screenWidth = forward.getWidth()-->Line_43 $$ screenWidth += d.width[ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_11 $$ final NavigationCrumb forward = new NavigationCrumb(this, fm, true, DEFAULT_PAINTER)[ CD ]
Line_26 $$ if (dummyWidth > 0) -->Line_28 $$ if (rightmostCrumb != null) [ CD ]
Line_8 $$ Crumb rightmostCrumb = null-->Line_40 $$ rightmostCrumb = first != null ? first : crumb[ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_54 $$ for (int i = result.size() - 1; i >= 0; i--) [ FD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_31 $$ result.addLast(dummy)[ FD ]
Line_19 $$ if (screenWidth + backward.getWidth() > width && !result.isEmpty()) -->Line_20 $$ first = result.removeFirst()[ CD ]
Line_17 $$ if (screenWidth + d.width > width) -->Line_18 $$ Crumb first = null[ CD ]
Line_2 $$ private List<Crumb> createCrumbList(@NotNull final FontMetrics fm, @NotNull final List<T> elements, final int width) -->Line_3 $$ if (elements.size() == 0) [ CD ]
Line_21 $$ screenWidth -= first.getWidth()-->Line_24 $$ screenWidth += backward.getWidth() - myOffset[ FD ]
Line_10 $$ for (int i = elements.size() - 1; i >= 0; i--) -->Line_14 $$ final String s = element.getDisplayText()[ CD ]
Line_28 $$ if (rightmostCrumb != null) -->Line_31 $$ result.addLast(dummy)[ CD ]
Line_12 $$ final NavigationCrumb backward = new NavigationCrumb(this, fm, false, DEFAULT_PAINTER)-->Line_23 $$ result.addFirst(backward)[ FD ]
Line_8 $$ Crumb rightmostCrumb = null-->Line_29 $$ result.add(result.indexOf(rightmostCrumb) + 1, dummy)[ FD ]
Line_6 $$ final LinkedList<Crumb> result = new LinkedList<Crumb>()-->Line_55 $$ final Crumb c = result.get(i)[ FD ]
Line_20 $$ first = result.removeFirst()-->Line_37 $$ result.addFirst(first)[ FD ]
Line_19 $$ if (screenWidth + backward.getWidth() > width && !result.isEmpty()) -->Line_21 $$ screenWidth -= first.getWidth()[ CD ]
Line_7 $$ int screenWidth = 0-->Line_34 $$ screenWidth = forward.getWidth()[ FD ]
Line_40 $$ rightmostCrumb = first != null ? first : crumb-->Line_28 $$ if (rightmostCrumb != null) [ FD ]
Line_18 $$ Crumb first = null-->Line_36 $$ if (first != null) [ FD ]
