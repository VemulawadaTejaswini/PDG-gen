Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_15 $$ File[] children = file.listFiles()[ FD ]
Line_7 $$ if (segment.contains("**")) -->Line_10 $$ patternSet.exclude(excludeSpec)[ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_33 $$ relativePath.addLast(segment)[ FD ]
Line_13 $$ if (segment.contains("*") || segment.contains("?")) -->Line_35 $$ relativePath.removeLast()[ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_6 $$ String segment = patternSegments.get(segmentIndex)[ CD ]
Line_11 $$ DirectoryFileTree fileTree = new DirectoryFileTree(baseDir, patternSet)-->Line_12 $$ fileTree.visitFrom(visitor, file, new RelativePath(file.isFile(), relativePath.toArray(new String[relativePath.size()])))[ FD ]
Line_26 $$ if (step.matches(child.getName())) -->Line_29 $$ relativePath.removeLast()[ CD ]
Line_26 $$ if (step.matches(child.getName())) -->Line_27 $$ relativePath.addLast(child.getName())[ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_23 $$ if (stopFlag.get()) [ FD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_20 $$ throw new GradleException(String.format("Could not list contents of '%s'.", file))[ FD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_3 $$ if (stopFlag.get()) [ FD ]
Line_14 $$ PatternStep step = PatternStepFactory.getStep(segment, false)-->Line_26 $$ if (step.matches(child.getName())) [ FD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_17 $$ if (!file.canRead()) [ FD ]
Line_16 $$ if (children == null) -->Line_17 $$ if (!file.canRead()) [ CD ]
Line_22 $$ for (File child : children) -->Line_26 $$ if (step.matches(child.getName())) [ FD ]
Line_22 $$ for (File child : children) -->Line_28 $$ doVisitDirOrFile(visitor, child, relativePath, segmentIndex + 1, stopFlag)[ FD ]
Line_7 $$ if (segment.contains("**")) -->Line_8 $$ PatternSet patternSet = new PatternSet()[ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_29 $$ relativePath.removeLast()[ FD ]
Line_3 $$ if (stopFlag.get()) -->Line_4 $$ return[ CD ]
Line_7 $$ if (segment.contains("**")) -->Line_13 $$ if (segment.contains("*") || segment.contains("?")) [ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_35 $$ relativePath.removeLast()[ FD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_3 $$ if (stopFlag.get()) [ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_28 $$ doVisitDirOrFile(visitor, child, relativePath, segmentIndex + 1, stopFlag)[ FD ]
Line_15 $$ File[] children = file.listFiles()-->Line_16 $$ if (children == null) [ FD ]
Line_13 $$ if (segment.contains("*") || segment.contains("?")) -->Line_33 $$ relativePath.addLast(segment)[ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_7 $$ if (segment.contains("**")) [ CD ]
Line_6 $$ String segment = patternSegments.get(segmentIndex)-->Line_33 $$ relativePath.addLast(segment)[ FD ]
Line_8 $$ PatternSet patternSet = new PatternSet()-->Line_9 $$ patternSet.include(includePattern)[ FD ]
Line_13 $$ if (segment.contains("*") || segment.contains("?")) -->Line_14 $$ PatternStep step = PatternStepFactory.getStep(segment, false)[ CD ]
Line_7 $$ if (segment.contains("**")) -->Line_9 $$ patternSet.include(includePattern)[ CD ]
Line_6 $$ String segment = patternSegments.get(segmentIndex)-->Line_13 $$ if (segment.contains("*") || segment.contains("?")) [ FD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_12 $$ fileTree.visitFrom(visitor, file, new RelativePath(file.isFile(), relativePath.toArray(new String[relativePath.size()])))[ FD ]
Line_7 $$ if (segment.contains("**")) -->Line_12 $$ fileTree.visitFrom(visitor, file, new RelativePath(file.isFile(), relativePath.toArray(new String[relativePath.size()])))[ CD ]
Line_22 $$ for (File child : children) -->Line_27 $$ relativePath.addLast(child.getName())[ FD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_6 $$ String segment = patternSegments.get(segmentIndex)[ FD ]
Line_13 $$ if (segment.contains("*") || segment.contains("?")) -->Line_34 $$ doVisitDirOrFile(visitor, new File(file, segment), relativePath, segmentIndex + 1, stopFlag)[ CD ]
Line_7 $$ if (segment.contains("**")) -->Line_11 $$ DirectoryFileTree fileTree = new DirectoryFileTree(baseDir, patternSet)[ CD ]
Line_6 $$ String segment = patternSegments.get(segmentIndex)-->Line_7 $$ if (segment.contains("**")) [ FD ]
Line_6 $$ String segment = patternSegments.get(segmentIndex)-->Line_14 $$ PatternStep step = PatternStepFactory.getStep(segment, false)[ FD ]
Line_13 $$ if (segment.contains("*") || segment.contains("?")) -->Line_16 $$ if (children == null) [ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_18 $$ throw new GradleException(String.format("Could not list contents of directory '%s' as it is not readable.", file))[ FD ]
Line_26 $$ if (step.matches(child.getName())) -->Line_28 $$ doVisitDirOrFile(visitor, child, relativePath, segmentIndex + 1, stopFlag)[ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_34 $$ doVisitDirOrFile(visitor, new File(file, segment), relativePath, segmentIndex + 1, stopFlag)[ FD ]
Line_13 $$ if (segment.contains("*") || segment.contains("?")) -->Line_15 $$ File[] children = file.listFiles()[ CD ]
Line_2 $$ private void doVisit(FileVisitor visitor, File file, LinkedList<String> relativePath, int segmentIndex, AtomicBoolean stopFlag) -->Line_27 $$ relativePath.addLast(child.getName())[ FD ]
Line_8 $$ PatternSet patternSet = new PatternSet()-->Line_10 $$ patternSet.exclude(excludeSpec)[ FD ]
