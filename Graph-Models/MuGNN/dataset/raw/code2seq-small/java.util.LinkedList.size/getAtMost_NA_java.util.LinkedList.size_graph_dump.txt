Line_2 $$ public List<E> getAtMost(String keyName, int num) throws IOException, ExecutionException -->Line_18 $$ numToFill = num - ekvs.size()[ FD ]
Line_6 $$ for (int i = 0; i < num; i++) -->Line_24 $$ if (i <= (int) (lowWatermark * numValues)) [ FD ]
Line_8 $$ if (val == null) -->Line_24 $$ if (i <= (int) (lowWatermark * numValues)) [ CD ]
Line_2 $$ public List<E> getAtMost(String keyName, int num) throws IOException, ExecutionException -->Line_15 $$ numToFill = Math.min(num, (int) (lowWatermark * numValues)) - ekvs.size()[ FD ]
Line_21 $$ if (numToFill > 0) -->Line_22 $$ refiller.fillQueueForKey(keyName, ekvs, numToFill)[ CD ]
Line_9 $$ int numToFill = 0-->Line_18 $$ numToFill = num - ekvs.size()[ FD ]
Line_12 $$ numToFill = (ekvs.size() < 1) ? 1 : 0-->Line_21 $$ if (numToFill > 0) [ FD ]
Line_18 $$ numToFill = num - ekvs.size()-->Line_21 $$ if (numToFill > 0) [ FD ]
Line_2 $$ public List<E> getAtMost(String keyName, int num) throws IOException, ExecutionException -->Line_3 $$ LinkedBlockingQueue<E> keyQueue = keyQueues.get(keyName)[ FD ]
Line_9 $$ int numToFill = 0-->Line_12 $$ numToFill = (ekvs.size() < 1) ? 1 : 0[ FD ]
Line_12 $$ numToFill = (ekvs.size() < 1) ? 1 : 0-->Line_22 $$ refiller.fillQueueForKey(keyName, ekvs, numToFill)[ FD ]
Line_2 $$ public List<E> getAtMost(String keyName, int num) throws IOException, ExecutionException -->Line_22 $$ refiller.fillQueueForKey(keyName, ekvs, numToFill)[ FD ]
Line_6 $$ for (int i = 0; i < num; i++) -->Line_7 $$ E val = keyQueue.poll()[ CD ]
Line_8 $$ if (val == null) -->Line_9 $$ int numToFill = 0[ CD ]
Line_3 $$ LinkedBlockingQueue<E> keyQueue = keyQueues.get(keyName)-->Line_25 $$ submitRefillTask(keyName, keyQueue)[ FD ]
Line_7 $$ E val = keyQueue.poll()-->Line_29 $$ ekvs.add(val)[ FD ]
Line_12 $$ numToFill = (ekvs.size() < 1) ? 1 : 0-->Line_18 $$ numToFill = num - ekvs.size()[ FD ]
Line_2 $$ public List<E> getAtMost(String keyName, int num) throws IOException, ExecutionException -->Line_4 $$ LinkedList<E> ekvs = new LinkedList<E>()[ CD ]
Line_15 $$ numToFill = Math.min(num, (int) (lowWatermark * numValues)) - ekvs.size()-->Line_18 $$ numToFill = num - ekvs.size()[ FD ]
Line_2 $$ public List<E> getAtMost(String keyName, int num) throws IOException, ExecutionException -->Line_25 $$ submitRefillTask(keyName, keyQueue)[ FD ]
Line_18 $$ numToFill = num - ekvs.size()-->Line_22 $$ refiller.fillQueueForKey(keyName, ekvs, numToFill)[ FD ]
Line_9 $$ int numToFill = 0-->Line_22 $$ refiller.fillQueueForKey(keyName, ekvs, numToFill)[ FD ]
Line_12 $$ numToFill = (ekvs.size() < 1) ? 1 : 0-->Line_15 $$ numToFill = Math.min(num, (int) (lowWatermark * numValues)) - ekvs.size()[ FD ]
Line_4 $$ LinkedList<E> ekvs = new LinkedList<E>()-->Line_29 $$ ekvs.add(val)[ FD ]
Line_4 $$ LinkedList<E> ekvs = new LinkedList<E>()-->Line_22 $$ refiller.fillQueueForKey(keyName, ekvs, numToFill)[ FD ]
Line_4 $$ LinkedList<E> ekvs = new LinkedList<E>()-->Line_15 $$ numToFill = Math.min(num, (int) (lowWatermark * numValues)) - ekvs.size()[ FD ]
Line_9 $$ int numToFill = 0-->Line_15 $$ numToFill = Math.min(num, (int) (lowWatermark * numValues)) - ekvs.size()[ FD ]
Line_2 $$ public List<E> getAtMost(String keyName, int num) throws IOException, ExecutionException -->Line_3 $$ LinkedBlockingQueue<E> keyQueue = keyQueues.get(keyName)[ CD ]
Line_15 $$ numToFill = Math.min(num, (int) (lowWatermark * numValues)) - ekvs.size()-->Line_21 $$ if (numToFill > 0) [ FD ]
Line_24 $$ if (i <= (int) (lowWatermark * numValues)) -->Line_25 $$ submitRefillTask(keyName, keyQueue)[ CD ]
Line_8 $$ if (val == null) -->Line_27 $$ return ekvs[ CD ]
Line_4 $$ LinkedList<E> ekvs = new LinkedList<E>()-->Line_18 $$ numToFill = num - ekvs.size()[ FD ]
Line_6 $$ for (int i = 0; i < num; i++) -->Line_8 $$ if (val == null) [ CD ]
Line_8 $$ if (val == null) -->Line_21 $$ if (numToFill > 0) [ CD ]
Line_7 $$ E val = keyQueue.poll()-->Line_8 $$ if (val == null) [ FD ]
Line_6 $$ for (int i = 0; i < num; i++) -->Line_29 $$ ekvs.add(val)[ CD ]
Line_4 $$ LinkedList<E> ekvs = new LinkedList<E>()-->Line_12 $$ numToFill = (ekvs.size() < 1) ? 1 : 0[ FD ]
Line_15 $$ numToFill = Math.min(num, (int) (lowWatermark * numValues)) - ekvs.size()-->Line_22 $$ refiller.fillQueueForKey(keyName, ekvs, numToFill)[ FD ]
Line_2 $$ public List<E> getAtMost(String keyName, int num) throws IOException, ExecutionException -->Line_6 $$ for (int i = 0; i < num; i++) [ FD ]
Line_3 $$ LinkedBlockingQueue<E> keyQueue = keyQueues.get(keyName)-->Line_7 $$ E val = keyQueue.poll()[ FD ]
Line_2 $$ public List<E> getAtMost(String keyName, int num) throws IOException, ExecutionException -->Line_34 $$ return ekvs[ CD ]
Line_9 $$ int numToFill = 0-->Line_21 $$ if (numToFill > 0) [ FD ]
