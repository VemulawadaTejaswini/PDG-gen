Line_7 $$ SampleItem prev = null-->Line_10 $$ prev = cur[ FD ]
Line_9 $$ for (int i = 1; i < samples.size(); i++) -->Line_13 $$ if (rankMin + cur.g + cur.delta > desired + (allowableError(i) / 2)) [ FD ]
Line_2 $$ private long query(double quantile) -->Line_17 $$ return samples.get(samples.size() - 1).value[ CD ]
Line_2 $$ private long query(double quantile) -->Line_8 $$ SampleItem cur = it.next()[ CD ]
Line_2 $$ private long query(double quantile) -->Line_3 $$ Preconditions.checkState(!samples.isEmpty(), "no data in estimator")[ CD ]
Line_2 $$ private long query(double quantile) -->Line_5 $$ int desired = (int) (quantile * count)[ CD ]
Line_2 $$ private long query(double quantile) -->Line_4 $$ int rankMin = 0[ CD ]
Line_9 $$ for (int i = 1; i < samples.size(); i++) -->Line_12 $$ rankMin += prev.g[ CD ]
Line_2 $$ private long query(double quantile) -->Line_7 $$ SampleItem prev = null[ CD ]
Line_4 $$ int rankMin = 0-->Line_12 $$ rankMin += prev.g[ FD ]
Line_13 $$ if (rankMin + cur.g + cur.delta > desired + (allowableError(i) / 2)) -->Line_14 $$ return prev.value[ CD ]
Line_2 $$ private long query(double quantile) -->Line_6 $$ ListIterator<SampleItem> it = samples.listIterator()[ CD ]
Line_6 $$ ListIterator<SampleItem> it = samples.listIterator()-->Line_11 $$ cur = it.next()[ FD ]
Line_9 $$ for (int i = 1; i < samples.size(); i++) -->Line_13 $$ if (rankMin + cur.g + cur.delta > desired + (allowableError(i) / 2)) [ CD ]
Line_9 $$ for (int i = 1; i < samples.size(); i++) -->Line_11 $$ cur = it.next()[ CD ]
Line_8 $$ SampleItem cur = it.next()-->Line_11 $$ cur = it.next()[ FD ]
Line_2 $$ private long query(double quantile) -->Line_9 $$ for (int i = 1; i < samples.size(); i++) [ CD ]
Line_8 $$ SampleItem cur = it.next()-->Line_10 $$ prev = cur[ FD ]
Line_9 $$ for (int i = 1; i < samples.size(); i++) -->Line_10 $$ prev = cur[ CD ]
Line_6 $$ ListIterator<SampleItem> it = samples.listIterator()-->Line_8 $$ SampleItem cur = it.next()[ FD ]
Line_11 $$ cur = it.next()-->Line_10 $$ prev = cur[ FD ]
