Line_27 $$ while (!stack.isEmpty()) -->Line_31 $$ if (mapCatch.containsKey(node.id)) [ CD ]
Line_43 $$ boolean isSuccessor = true-->Line_45 $$ isSuccessor = false[ FD ]
Line_41 $$ String currentEntrypoint = entrypoints.isEmpty() ? null : entrypoints.getLast()-->Line_47 $$ if (finwraplong.source.equals(currentEntrypoint) && finwraplong.destination.equals(nd.id)) [ FD ]
Line_58 $$ LinkedList<String> ndentrypoints = new LinkedList<String>(entrypoints)-->Line_60 $$ ndentrypoints.addLast(node.id)[ FD ]
Line_56 $$ mapData.put(nd, mapSucc = new HashMap<String, PrimitiveExprsList>())-->Line_72 $$ mapSucc.put(ndentrykey, copyVarExprents(data.copyStack()))[ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_4 $$ DirectGraph dgraph = flatthelper.buildDirectGraph(root)[ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_20 $$ LinkedList<DirectNode> stack = new LinkedList<DirectNode>()[ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_3 $$ FlattenStatementsHelper flatthelper = new FlattenStatementsHelper()[ CD ]
Line_3 $$ FlattenStatementsHelper flatthelper = new FlattenStatementsHelper()-->Line_4 $$ DirectGraph dgraph = flatthelper.buildDirectGraph(root)[ FD ]
Line_58 $$ LinkedList<String> ndentrypoints = new LinkedList<String>(entrypoints)-->Line_62 $$ ndentrypoints.removeLast()[ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_79 $$ initStatementExprents(root)[ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_24 $$ Map<String, PrimitiveExprsList> map = new HashMap<String, PrimitiveExprsList>()[ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_17 $$ Map<String, VarExprent> mapCatch = new HashMap<String, VarExprent>()[ CD ]
Line_56 $$ mapData.put(nd, mapSucc = new HashMap<String, PrimitiveExprsList>())-->Line_71 $$ if (!mapSucc.containsKey(ndentrykey)) [ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_5 $$ Set<String> setFinallyShortRangeEntryPoints = new HashSet<String>()[ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_38 $$ processBlock(block, data, cl)[ FD ]
Line_53 $$ if (isSuccessor) -->Line_65 $$ if (succ_entry_index >= 0) [ CD ]
Line_54 $$ Map<String, PrimitiveExprsList> mapSucc = mapData.get(nd)-->Line_71 $$ if (!mapSucc.containsKey(ndentrykey)) [ FD ]
Line_58 $$ LinkedList<String> ndentrypoints = new LinkedList<String>(entrypoints)-->Line_66 $$ for (int elements_to_remove = ndentrypoints.size() - succ_entry_index; elements_to_remove > 0; elements_to_remove--) [ FD ]
Line_19 $$ Map<DirectNode, Map<String, PrimitiveExprsList>> mapData = new HashMap<DirectNode, Map<String, PrimitiveExprsList>>()-->Line_54 $$ Map<String, PrimitiveExprsList> mapSucc = mapData.get(nd)[ FD ]
Line_21 $$ LinkedList<LinkedList<String>> stackEntryPoint = new LinkedList<LinkedList<String>>()-->Line_23 $$ stackEntryPoint.add(new LinkedList<String>())[ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_22 $$ stack.add(dgraph.first)[ CD ]
Line_65 $$ if (succ_entry_index >= 0) -->Line_66 $$ for (int elements_to_remove = ndentrypoints.size() - succ_entry_index; elements_to_remove > 0; elements_to_remove--) [ CD ]
Line_37 $$ if (block != null) -->Line_38 $$ processBlock(block, data, cl)[ CD ]
Line_5 $$ Set<String> setFinallyShortRangeEntryPoints = new HashSet<String>()-->Line_61 $$ if (!setFinallyShortRangeEntryPoints.contains(nd.id) && dgraph.mapLongRangeFinallyPaths.containsKey(node.id)) [ FD ]
Line_61 $$ if (!setFinallyShortRangeEntryPoints.contains(nd.id) && dgraph.mapLongRangeFinallyPaths.containsKey(node.id)) -->Line_62 $$ ndentrypoints.removeLast()[ CD ]
Line_66 $$ for (int elements_to_remove = ndentrypoints.size() - succ_entry_index; elements_to_remove > 0; elements_to_remove--) -->Line_67 $$ ndentrypoints.removeLast()[ CD ]
Line_30 $$ PrimitiveExprsList data-->Line_32 $$ data = getExpressionData(mapCatch.get(node.id))[ FD ]
Line_36 $$ BasicBlockStatement block = node.block-->Line_38 $$ processBlock(block, data, cl)[ FD ]
Line_32 $$ data = getExpressionData(mapCatch.get(node.id))-->Line_72 $$ mapSucc.put(ndentrykey, copyVarExprents(data.copyStack()))[ FD ]
Line_34 $$ data = mapData.get(node).get(buildEntryPointKey(entrypoints))-->Line_38 $$ processBlock(block, data, cl)[ FD ]
Line_27 $$ while (!stack.isEmpty()) -->Line_28 $$ DirectNode node = stack.removeFirst()[ CD ]
Line_42 $$ for (DirectNode nd : node.succs) -->Line_54 $$ Map<String, PrimitiveExprsList> mapSucc = mapData.get(nd)[ FD ]
Line_59 $$ if (setFinallyLongRangeEntryPaths.contains(node.id + "##" + nd.id)) -->Line_60 $$ ndentrypoints.addLast(node.id)[ CD ]
Line_71 $$ if (!mapSucc.containsKey(ndentrykey)) -->Line_72 $$ mapSucc.put(ndentrykey, copyVarExprents(data.copyStack()))[ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_21 $$ LinkedList<LinkedList<String>> stackEntryPoint = new LinkedList<LinkedList<String>>()[ CD ]
Line_27 $$ while (!stack.isEmpty()) -->Line_29 $$ LinkedList<String> entrypoints = stackEntryPoint.removeFirst()[ CD ]
Line_45 $$ isSuccessor = false-->Line_48 $$ isSuccessor = true[ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_25 $$ map.put(null, new PrimitiveExprsList())[ CD ]
Line_19 $$ Map<DirectNode, Map<String, PrimitiveExprsList>> mapData = new HashMap<DirectNode, Map<String, PrimitiveExprsList>>()-->Line_34 $$ data = mapData.get(node).get(buildEntryPointKey(entrypoints))[ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_11 $$ Set<String> setFinallyLongRangeEntryPaths = new HashSet<String>()[ CD ]
Line_31 $$ if (mapCatch.containsKey(node.id)) -->Line_34 $$ data = mapData.get(node).get(buildEntryPointKey(entrypoints))[ CD ]
Line_20 $$ LinkedList<DirectNode> stack = new LinkedList<DirectNode>()-->Line_22 $$ stack.add(dgraph.first)[ FD ]
Line_34 $$ data = mapData.get(node).get(buildEntryPointKey(entrypoints))-->Line_72 $$ mapSucc.put(ndentrykey, copyVarExprents(data.copyStack()))[ FD ]
Line_24 $$ Map<String, PrimitiveExprsList> map = new HashMap<String, PrimitiveExprsList>()-->Line_25 $$ map.put(null, new PrimitiveExprsList())[ FD ]
Line_21 $$ LinkedList<LinkedList<String>> stackEntryPoint = new LinkedList<LinkedList<String>>()-->Line_74 $$ stackEntryPoint.add(ndentrypoints)[ FD ]
Line_53 $$ if (isSuccessor) -->Line_70 $$ String ndentrykey = buildEntryPointKey(ndentrypoints)[ CD ]
Line_32 $$ data = getExpressionData(mapCatch.get(node.id))-->Line_39 $$ block.setExprents(data.getLstExprents())[ FD ]
Line_11 $$ Set<String> setFinallyLongRangeEntryPaths = new HashSet<String>()-->Line_59 $$ if (setFinallyLongRangeEntryPaths.contains(node.id + "##" + nd.id)) [ FD ]
Line_54 $$ Map<String, PrimitiveExprsList> mapSucc = mapData.get(nd)-->Line_72 $$ mapSucc.put(ndentrykey, copyVarExprents(data.copyStack()))[ FD ]
Line_29 $$ LinkedList<String> entrypoints = stackEntryPoint.removeFirst()-->Line_41 $$ String currentEntrypoint = entrypoints.isEmpty() ? null : entrypoints.getLast()[ FD ]
Line_34 $$ data = mapData.get(node).get(buildEntryPointKey(entrypoints))-->Line_39 $$ block.setExprents(data.getLstExprents())[ FD ]
Line_27 $$ while (!stack.isEmpty()) -->Line_30 $$ PrimitiveExprsList data[ CD ]
Line_58 $$ LinkedList<String> ndentrypoints = new LinkedList<String>(entrypoints)-->Line_64 $$ int succ_entry_index = ndentrypoints.indexOf(nd.id)[ FD ]
Line_27 $$ while (!stack.isEmpty()) -->Line_41 $$ String currentEntrypoint = entrypoints.isEmpty() ? null : entrypoints.getLast()[ CD ]
Line_64 $$ int succ_entry_index = ndentrypoints.indexOf(nd.id)-->Line_65 $$ if (succ_entry_index >= 0) [ FD ]
Line_17 $$ Map<String, VarExprent> mapCatch = new HashMap<String, VarExprent>()-->Line_32 $$ data = getExpressionData(mapCatch.get(node.id))[ FD ]
Line_3 $$ FlattenStatementsHelper flatthelper = new FlattenStatementsHelper()-->Line_18 $$ collectCatchVars(root, flatthelper, mapCatch)[ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_26 $$ mapData.put(dgraph.first, map)[ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_23 $$ stackEntryPoint.add(new LinkedList<String>())[ CD ]
Line_59 $$ if (setFinallyLongRangeEntryPaths.contains(node.id + "##" + nd.id)) -->Line_61 $$ if (!setFinallyShortRangeEntryPoints.contains(nd.id) && dgraph.mapLongRangeFinallyPaths.containsKey(node.id)) [ CD ]
Line_32 $$ data = getExpressionData(mapCatch.get(node.id))-->Line_34 $$ data = mapData.get(node).get(buildEntryPointKey(entrypoints))[ FD ]
Line_36 $$ BasicBlockStatement block = node.block-->Line_37 $$ if (block != null) [ FD ]
Line_20 $$ LinkedList<DirectNode> stack = new LinkedList<DirectNode>()-->Line_73 $$ stack.add(nd)[ FD ]
Line_58 $$ LinkedList<String> ndentrypoints = new LinkedList<String>(entrypoints)-->Line_70 $$ String ndentrykey = buildEntryPointKey(ndentrypoints)[ FD ]
Line_56 $$ mapData.put(nd, mapSucc = new HashMap<String, PrimitiveExprsList>())-->Line_55 $$ if (mapSucc == null) [ FD ]
Line_19 $$ Map<DirectNode, Map<String, PrimitiveExprsList>> mapData = new HashMap<DirectNode, Map<String, PrimitiveExprsList>>()-->Line_56 $$ mapData.put(nd, mapSucc = new HashMap<String, PrimitiveExprsList>())[ FD ]
Line_43 $$ boolean isSuccessor = true-->Line_48 $$ isSuccessor = true[ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_18 $$ collectCatchVars(root, flatthelper, mapCatch)[ CD ]
Line_17 $$ Map<String, VarExprent> mapCatch = new HashMap<String, VarExprent>()-->Line_18 $$ collectCatchVars(root, flatthelper, mapCatch)[ FD ]
Line_55 $$ if (mapSucc == null) -->Line_56 $$ mapData.put(nd, mapSucc = new HashMap<String, PrimitiveExprsList>())[ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_4 $$ DirectGraph dgraph = flatthelper.buildDirectGraph(root)[ CD ]
Line_21 $$ LinkedList<LinkedList<String>> stackEntryPoint = new LinkedList<LinkedList<String>>()-->Line_29 $$ LinkedList<String> entrypoints = stackEntryPoint.removeFirst()[ FD ]
Line_53 $$ if (isSuccessor) -->Line_71 $$ if (!mapSucc.containsKey(ndentrykey)) [ CD ]
Line_53 $$ if (isSuccessor) -->Line_59 $$ if (setFinallyLongRangeEntryPaths.contains(node.id + "##" + nd.id)) [ CD ]
Line_20 $$ LinkedList<DirectNode> stack = new LinkedList<DirectNode>()-->Line_28 $$ DirectNode node = stack.removeFirst()[ FD ]
Line_58 $$ LinkedList<String> ndentrypoints = new LinkedList<String>(entrypoints)-->Line_67 $$ ndentrypoints.removeLast()[ FD ]
Line_24 $$ Map<String, PrimitiveExprsList> map = new HashMap<String, PrimitiveExprsList>()-->Line_26 $$ mapData.put(dgraph.first, map)[ FD ]
Line_31 $$ if (mapCatch.containsKey(node.id)) -->Line_32 $$ data = getExpressionData(mapCatch.get(node.id))[ CD ]
Line_42 $$ for (DirectNode nd : node.succs) -->Line_73 $$ stack.add(nd)[ FD ]
Line_28 $$ DirectNode node = stack.removeFirst()-->Line_34 $$ data = mapData.get(node).get(buildEntryPointKey(entrypoints))[ FD ]
Line_36 $$ BasicBlockStatement block = node.block-->Line_39 $$ block.setExprents(data.getLstExprents())[ FD ]
Line_53 $$ if (isSuccessor) -->Line_58 $$ LinkedList<String> ndentrypoints = new LinkedList<String>(entrypoints)[ CD ]
Line_37 $$ if (block != null) -->Line_39 $$ block.setExprents(data.getLstExprents())[ CD ]
Line_27 $$ while (!stack.isEmpty()) -->Line_37 $$ if (block != null) [ CD ]
Line_54 $$ Map<String, PrimitiveExprsList> mapSucc = mapData.get(nd)-->Line_56 $$ mapData.put(nd, mapSucc = new HashMap<String, PrimitiveExprsList>())[ FD ]
Line_44 $$ if (currentEntrypoint != null && dgraph.mapLongRangeFinallyPaths.containsKey(node.id)) -->Line_45 $$ isSuccessor = false[ CD ]
Line_32 $$ data = getExpressionData(mapCatch.get(node.id))-->Line_38 $$ processBlock(block, data, cl)[ FD ]
Line_17 $$ Map<String, VarExprent> mapCatch = new HashMap<String, VarExprent>()-->Line_31 $$ if (mapCatch.containsKey(node.id)) [ FD ]
Line_53 $$ if (isSuccessor) -->Line_54 $$ Map<String, PrimitiveExprsList> mapSucc = mapData.get(nd)[ CD ]
Line_20 $$ LinkedList<DirectNode> stack = new LinkedList<DirectNode>()-->Line_27 $$ while (!stack.isEmpty()) [ FD ]
Line_30 $$ PrimitiveExprsList data-->Line_39 $$ block.setExprents(data.getLstExprents())[ FD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_19 $$ Map<DirectNode, Map<String, PrimitiveExprsList>> mapData = new HashMap<DirectNode, Map<String, PrimitiveExprsList>>()[ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_27 $$ while (!stack.isEmpty()) [ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_79 $$ initStatementExprents(root)[ FD ]
Line_53 $$ if (isSuccessor) -->Line_55 $$ if (mapSucc == null) [ CD ]
Line_30 $$ PrimitiveExprsList data-->Line_72 $$ mapSucc.put(ndentrykey, copyVarExprents(data.copyStack()))[ FD ]
Line_42 $$ for (DirectNode nd : node.succs) -->Line_56 $$ mapData.put(nd, mapSucc = new HashMap<String, PrimitiveExprsList>())[ FD ]
Line_5 $$ Set<String> setFinallyShortRangeEntryPoints = new HashSet<String>()-->Line_8 $$ setFinallyShortRangeEntryPoints.add(finwrap.entry)[ FD ]
Line_27 $$ while (!stack.isEmpty()) -->Line_36 $$ BasicBlockStatement block = node.block[ CD ]
Line_11 $$ Set<String> setFinallyLongRangeEntryPaths = new HashSet<String>()-->Line_14 $$ setFinallyLongRangeEntryPaths.add(finwrap.source + "##" + finwrap.entry)[ FD ]
Line_71 $$ if (!mapSucc.containsKey(ndentrykey)) -->Line_74 $$ stackEntryPoint.add(ndentrypoints)[ CD ]
Line_71 $$ if (!mapSucc.containsKey(ndentrykey)) -->Line_73 $$ stack.add(nd)[ CD ]
Line_2 $$ public void processStatement(RootStatement root, StructClass cl) -->Line_18 $$ collectCatchVars(root, flatthelper, mapCatch)[ FD ]
Line_30 $$ PrimitiveExprsList data-->Line_38 $$ processBlock(block, data, cl)[ FD ]
Line_47 $$ if (finwraplong.source.equals(currentEntrypoint) && finwraplong.destination.equals(nd.id)) -->Line_48 $$ isSuccessor = true[ CD ]
Line_54 $$ Map<String, PrimitiveExprsList> mapSucc = mapData.get(nd)-->Line_55 $$ if (mapSucc == null) [ FD ]
Line_58 $$ LinkedList<String> ndentrypoints = new LinkedList<String>(entrypoints)-->Line_74 $$ stackEntryPoint.add(ndentrypoints)[ FD ]
Line_19 $$ Map<DirectNode, Map<String, PrimitiveExprsList>> mapData = new HashMap<DirectNode, Map<String, PrimitiveExprsList>>()-->Line_26 $$ mapData.put(dgraph.first, map)[ FD ]
Line_29 $$ LinkedList<String> entrypoints = stackEntryPoint.removeFirst()-->Line_34 $$ data = mapData.get(node).get(buildEntryPointKey(entrypoints))[ FD ]
Line_53 $$ if (isSuccessor) -->Line_64 $$ int succ_entry_index = ndentrypoints.indexOf(nd.id)[ CD ]
Line_30 $$ PrimitiveExprsList data-->Line_34 $$ data = mapData.get(node).get(buildEntryPointKey(entrypoints))[ FD ]
