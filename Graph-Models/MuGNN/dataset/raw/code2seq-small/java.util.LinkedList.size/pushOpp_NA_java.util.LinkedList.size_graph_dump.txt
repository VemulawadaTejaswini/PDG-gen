Line_7 $$ while (true) -->Line_17 $$ nodeStack.add(0, top)[ CD ]
Line_10 $$ OppNode top = oppStack.get(0)-->Line_17 $$ nodeStack.add(0, top)[ FD ]
Line_3 $$ if (node == null) -->Line_5 $$ return[ CD ]
Line_7 $$ while (true) -->Line_10 $$ OppNode top = oppStack.get(0)[ CD ]
Line_3 $$ if (node == null) -->Line_4 $$ oppStack.add(0, null)[ CD ]
Line_7 $$ while (true) -->Line_8 $$ if (oppStack.size() == 0)[ CD ]
Line_2 $$ private void pushOpp(OppNode node) -->Line_13 $$ if (top.getPrecedence() < node.getPrecedence())[ FD ]
Line_7 $$ while (true) -->Line_15 $$ oppStack.remove(0)[ CD ]
Line_2 $$ private void pushOpp(OppNode node) -->Line_3 $$ if (node == null) [ CD ]
Line_7 $$ while (true) -->Line_13 $$ if (top.getPrecedence() < node.getPrecedence())[ CD ]
Line_7 $$ while (true) -->Line_16 $$ top.popValues(nodeStack)[ CD ]
Line_2 $$ private void pushOpp(OppNode node) -->Line_19 $$ oppStack.add(0, node)[ FD ]
Line_10 $$ OppNode top = oppStack.get(0)-->Line_11 $$ if (top == null)[ FD ]
Line_2 $$ private void pushOpp(OppNode node) -->Line_19 $$ oppStack.add(0, node)[ CD ]
Line_2 $$ private void pushOpp(OppNode node) -->Line_7 $$ while (true) [ CD ]
Line_10 $$ OppNode top = oppStack.get(0)-->Line_13 $$ if (top.getPrecedence() < node.getPrecedence())[ FD ]
Line_2 $$ private void pushOpp(OppNode node) -->Line_3 $$ if (node == null) [ FD ]
Line_7 $$ while (true) -->Line_11 $$ if (top == null)[ CD ]
Line_10 $$ OppNode top = oppStack.get(0)-->Line_16 $$ top.popValues(nodeStack)[ FD ]
