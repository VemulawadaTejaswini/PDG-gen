Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_117 $$ q.addSelectClass(pathExpressionParser.getSelectName())[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)[ CD ]
Line_65 $$ if (getFunction(lctoken, q) != null && token.equals(q.unalias(token))) -->Line_71 $$ aggregateFuncTokenList.add(lctoken)[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_92 $$ ParserHelper.parse(aggregatePathExpressionParser, q.unalias(token), ParserHelper.PATH_SEPARATORS, q)[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_74 $$ if (!aggregateHasArgs(lctoken, q)) [ FD ]
Line_47 $$ if (aggregate && ready) -->Line_49 $$ aggregateFuncTokenList.removeLast()[ CD ]
Line_14 $$ if (afterNew) -->Line_24 $$ q.setHolderClass(holderClass)[ CD ]
Line_87 $$ boolean constantToken = false-->Line_94 $$ constantToken = true[ FD ]
Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)-->Line_6 $$ if ("distinct".equals(lctoken)) [ FD ]
Line_57 $$ if (COUNT_MODIFIERS.contains(lctoken)) -->Line_61 $$ q.appendScalarSelectToken(token)[ CD ]
Line_9 $$ if ("all".equals(lctoken)) -->Line_10 $$ q.setDistinct(false)[ CD ]
Line_36 $$ if (insideNew && !aggregate && !ready) -->Line_38 $$ if (aggregate) [ CD ]
Line_26 $$ if (token.equals(",")) -->Line_32 $$ if ("new".equals(lctoken)) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_17 $$ holderClass = q.getFactory().getServiceRegistry().getService(ClassLoaderService.class).classForName(QuerySplitter.getImportedClass(token, q.getFactory()))[ FD ]
Line_103 $$ if (aggregateAddSelectScalar) -->Line_104 $$ q.addSelectScalar(aggregateType(aggregateFuncTokenList, aggregatePathExpressionParser.getWhereColumnType(), q))[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_7 $$ q.setDistinct(true)[ FD ]
Line_62 $$ if ("*".equals(token)) -->Line_63 $$ q.addSelectScalar(getFunction("count", q).getReturnType(StandardBasicTypes.LONG, q.getFactory()))[ CD ]
Line_38 $$ if (aggregate) -->Line_39 $$ q.appendScalarSelectToken(token)[ CD ]
Line_74 $$ if (!aggregateHasArgs(lctoken, q)) -->Line_75 $$ q.addSelectScalar(aggregateType(aggregateFuncTokenList, null, q))[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_113 $$ ParserHelper.parse(pathExpressionParser, q.unalias(token), ParserHelper.PATH_SEPARATORS, q)[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_30 $$ q.appendScalarSelectToken(", ")[ FD ]
Line_44 $$ if (")".equals(token)) -->Line_45 $$ if (insideNew && !aggregate && !ready) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_97 $$ q.appendScalarSelectToken(token)[ FD ]
Line_14 $$ if (afterNew) -->Line_21 $$ if (holderClass == null) [ CD ]
Line_74 $$ if (!aggregateHasArgs(lctoken, q)) -->Line_76 $$ if (!aggregateFuncNoArgsHasParenthesis(lctoken, q)) [ CD ]
Line_9 $$ if ("all".equals(lctoken)) -->Line_11 $$ return[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_65 $$ if (getFunction(lctoken, q) != null && token.equals(q.unalias(token))) [ FD ]
Line_96 $$ if (constantToken) -->Line_102 $$ q.appendScalarSelectToken(aggregatePathExpressionParser.getWhereColumn())[ CD ]
Line_57 $$ if (COUNT_MODIFIERS.contains(lctoken)) -->Line_65 $$ if (getFunction(lctoken, q) != null && token.equals(q.unalias(token))) [ CD ]
Line_86 $$ if (aggregate) -->Line_120 $$ q.addSelectScalar(pathExpressionParser.getWhereColumnType())[ CD ]
Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)-->Line_9 $$ if ("all".equals(lctoken)) [ FD ]
Line_65 $$ if (getFunction(lctoken, q) != null && token.equals(q.unalias(token))) -->Line_86 $$ if (aggregate) [ CD ]
Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)-->Line_71 $$ aggregateFuncTokenList.add(lctoken)[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_24 $$ q.setHolderClass(holderClass)[ FD ]
Line_96 $$ if (constantToken) -->Line_99 $$ if (aggregatePathExpressionParser.isCollectionValued()) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_119 $$ q.appendScalarSelectTokens(pathExpressionParser.getWhereColumns())[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_63 $$ q.addSelectScalar(getFunction("count", q).getReturnType(StandardBasicTypes.LONG, q.getFactory()))[ FD ]
Line_65 $$ if (getFunction(lctoken, q) != null && token.equals(q.unalias(token))) -->Line_66 $$ if (!ready) [ CD ]
Line_114 $$ if (pathExpressionParser.isCollectionValued()) -->Line_116 $$ if (pathExpressionParser.getWhereColumnType().isEntityType()) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_104 $$ q.addSelectScalar(aggregateType(aggregateFuncTokenList, aggregatePathExpressionParser.getWhereColumnType(), q))[ FD ]
Line_86 $$ if (aggregate) -->Line_121 $$ pathExpressionParser.addAssociation(q)[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)[ FD ]
Line_57 $$ if (COUNT_MODIFIERS.contains(lctoken)) -->Line_58 $$ if (!ready || !aggregate) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_35 $$ if ("(".equals(token)) [ FD ]
Line_6 $$ if ("distinct".equals(lctoken)) -->Line_7 $$ q.setDistinct(true)[ CD ]
Line_47 $$ if (aggregate && ready) -->Line_48 $$ q.appendScalarSelectToken(token)[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_73 $$ q.appendScalarSelectToken(token)[ FD ]
Line_35 $$ if ("(".equals(token)) -->Line_36 $$ if (insideNew && !aggregate && !ready) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_102 $$ q.appendScalarSelectToken(aggregatePathExpressionParser.getWhereColumn())[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_121 $$ pathExpressionParser.addAssociation(q)[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_48 $$ q.appendScalarSelectToken(token)[ FD ]
Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)-->Line_57 $$ if (COUNT_MODIFIERS.contains(lctoken)) [ FD ]
Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)-->Line_32 $$ if ("new".equals(lctoken)) [ FD ]
Line_99 $$ if (aggregatePathExpressionParser.isCollectionValued()) -->Line_100 $$ q.addCollection(aggregatePathExpressionParser.getCollectionName(), aggregatePathExpressionParser.getCollectionRole())[ CD ]
Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)-->Line_74 $$ if (!aggregateHasArgs(lctoken, q)) [ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_75 $$ q.addSelectScalar(aggregateType(aggregateFuncTokenList, null, q))[ FD ]
Line_35 $$ if ("(".equals(token)) -->Line_44 $$ if (")".equals(token)) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_115 $$ q.addCollection(pathExpressionParser.getCollectionName(), pathExpressionParser.getCollectionRole())[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_62 $$ if ("*".equals(token)) [ FD ]
Line_26 $$ if (token.equals(",")) -->Line_30 $$ q.appendScalarSelectToken(", ")[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_120 $$ q.addSelectScalar(pathExpressionParser.getWhereColumnType())[ FD ]
Line_6 $$ if ("distinct".equals(lctoken)) -->Line_8 $$ return[ CD ]
Line_86 $$ if (aggregate) -->Line_110 $$ if (!ready) [ CD ]
Line_96 $$ if (constantToken) -->Line_107 $$ aggregatePathExpressionParser.addAssociation(q)[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_10 $$ q.setDistinct(false)[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_100 $$ q.addCollection(aggregatePathExpressionParser.getCollectionName(), aggregatePathExpressionParser.getCollectionRole())[ FD ]
Line_14 $$ if (afterNew) -->Line_26 $$ if (token.equals(",")) [ CD ]
Line_47 $$ if (aggregate && ready) -->Line_50 $$ if (aggregateFuncTokenList.size() < 1) [ CD ]
Line_86 $$ if (aggregate) -->Line_114 $$ if (pathExpressionParser.isCollectionValued()) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_44 $$ if (")".equals(token)) [ FD ]
Line_57 $$ if (COUNT_MODIFIERS.contains(lctoken)) -->Line_62 $$ if ("*".equals(token)) [ CD ]
Line_96 $$ if (constantToken) -->Line_97 $$ q.appendScalarSelectToken(token)[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_76 $$ if (!aggregateFuncNoArgsHasParenthesis(lctoken, q)) [ FD ]
Line_65 $$ if (getFunction(lctoken, q) != null && token.equals(q.unalias(token))) -->Line_73 $$ q.appendScalarSelectToken(token)[ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_39 $$ q.appendScalarSelectToken(token)[ FD ]
Line_76 $$ if (!aggregateFuncNoArgsHasParenthesis(lctoken, q)) -->Line_78 $$ if (aggregateFuncTokenList.size() < 1) [ CD ]
Line_114 $$ if (pathExpressionParser.isCollectionValued()) -->Line_115 $$ q.addCollection(pathExpressionParser.getCollectionName(), pathExpressionParser.getCollectionRole())[ CD ]
Line_96 $$ if (constantToken) -->Line_103 $$ if (aggregateAddSelectScalar) [ CD ]
Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)-->Line_65 $$ if (getFunction(lctoken, q) != null && token.equals(q.unalias(token))) [ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_4 $$ if (first) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_26 $$ if (token.equals(",")) [ FD ]
Line_32 $$ if ("new".equals(lctoken)) -->Line_35 $$ if ("(".equals(token)) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_107 $$ aggregatePathExpressionParser.addAssociation(q)[ FD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_61 $$ q.appendScalarSelectToken(token)[ FD ]
Line_44 $$ if (")".equals(token)) -->Line_57 $$ if (COUNT_MODIFIERS.contains(lctoken)) [ CD ]
Line_86 $$ if (aggregate) -->Line_113 $$ ParserHelper.parse(pathExpressionParser, q.unalias(token), ParserHelper.PATH_SEPARATORS, q)[ CD ]
Line_6 $$ if ("distinct".equals(lctoken)) -->Line_9 $$ if ("all".equals(lctoken)) [ CD ]
Line_86 $$ if (aggregate) -->Line_96 $$ if (constantToken) [ CD ]
Line_26 $$ if (token.equals(",")) -->Line_27 $$ if (!aggregate && ready) [ CD ]
Line_45 $$ if (insideNew && !aggregate && !ready) -->Line_47 $$ if (aggregate && ready) [ CD ]
Line_86 $$ if (aggregate) -->Line_119 $$ q.appendScalarSelectTokens(pathExpressionParser.getWhereColumns())[ CD ]
Line_3 $$ String lctoken = token.toLowerCase(Locale.ROOT)-->Line_76 $$ if (!aggregateFuncNoArgsHasParenthesis(lctoken, q)) [ FD ]
Line_116 $$ if (pathExpressionParser.getWhereColumnType().isEntityType()) -->Line_117 $$ q.addSelectClass(pathExpressionParser.getSelectName())[ CD ]
Line_65 $$ if (getFunction(lctoken, q) != null && token.equals(q.unalias(token))) -->Line_74 $$ if (!aggregateHasArgs(lctoken, q)) [ CD ]
Line_2 $$ public void token(String token, QueryTranslatorImpl q) throws QueryException -->Line_14 $$ if (afterNew) [ CD ]
Line_76 $$ if (!aggregateFuncNoArgsHasParenthesis(lctoken, q)) -->Line_77 $$ aggregateFuncTokenList.removeLast()[ CD ]
Line_86 $$ if (aggregate) -->Line_88 $$ if (!ready) [ CD ]
Line_4 $$ if (first) -->Line_6 $$ if ("distinct".equals(lctoken)) [ CD ]
Line_86 $$ if (aggregate) -->Line_87 $$ boolean constantToken = false[ CD ]
