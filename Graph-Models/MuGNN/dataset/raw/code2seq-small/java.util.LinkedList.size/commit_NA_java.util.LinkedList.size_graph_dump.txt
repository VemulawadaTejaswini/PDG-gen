Line_10 $$ Synchronization s = (Synchronization) synchronizations.get(i)-->Line_11 $$ s.beforeCompletion()[ FD ]
Line_9 $$ for (int i = 0; i < synchronizations.size(); i++) -->Line_10 $$ Synchronization s = (Synchronization) synchronizations.get(i)[ FD ]
Line_3 $$ if (status == Status.STATUS_MARKED_ROLLBACK) -->Line_14 $$ if (!runXaResourcePrepare()) [ CD ]
Line_32 $$ for (int i = 0; i < synchronizations.size(); i++) -->Line_33 $$ Synchronization s = (Synchronization) synchronizations.get(i)[ CD ]
Line_9 $$ for (int i = 0; i < synchronizations.size(); i++) -->Line_10 $$ Synchronization s = (Synchronization) synchronizations.get(i)[ CD ]
Line_32 $$ for (int i = 0; i < synchronizations.size(); i++) -->Line_34 $$ s.afterCompletion(status)[ CD ]
Line_3 $$ if (status == Status.STATUS_MARKED_ROLLBACK) -->Line_8 $$ if (synchronizations != null) [ CD ]
Line_3 $$ if (status == Status.STATUS_MARKED_ROLLBACK) -->Line_31 $$ if (synchronizations != null) [ CD ]
Line_10 $$ Synchronization s = (Synchronization) synchronizations.get(i)-->Line_34 $$ s.afterCompletion(status)[ FD ]
Line_3 $$ if (status == Status.STATUS_MARKED_ROLLBACK) -->Line_5 $$ rollback()[ CD ]
Line_32 $$ for (int i = 0; i < synchronizations.size(); i++) -->Line_33 $$ Synchronization s = (Synchronization) synchronizations.get(i)[ FD ]
Line_3 $$ if (status == Status.STATUS_MARKED_ROLLBACK) -->Line_20 $$ if (connection != null) [ CD ]
Line_9 $$ for (int i = 0; i < synchronizations.size(); i++) -->Line_11 $$ s.beforeCompletion()[ CD ]
Line_3 $$ if (status == Status.STATUS_MARKED_ROLLBACK) -->Line_29 $$ runXaResourceCommitTx()[ CD ]
Line_9 $$ for (int i = 0; i < synchronizations.size(); i++) -->Line_32 $$ for (int i = 0; i < synchronizations.size(); i++) [ FD ]
Line_8 $$ if (synchronizations != null) -->Line_9 $$ for (int i = 0; i < synchronizations.size(); i++) [ CD ]
Line_33 $$ Synchronization s = (Synchronization) synchronizations.get(i)-->Line_34 $$ s.afterCompletion(status)[ FD ]
Line_3 $$ if (status == Status.STATUS_MARKED_ROLLBACK) -->Line_37 $$ jtaTransactionManager.endCurrent(this)[ CD ]
Line_31 $$ if (synchronizations != null) -->Line_32 $$ for (int i = 0; i < synchronizations.size(); i++) [ CD ]
Line_9 $$ for (int i = 0; i < synchronizations.size(); i++) -->Line_33 $$ Synchronization s = (Synchronization) synchronizations.get(i)[ FD ]
Line_3 $$ if (status == Status.STATUS_MARKED_ROLLBACK) -->Line_4 $$ log.trace("on commit, status was marked for rollback-only")[ CD ]
Line_2 $$ public void commit() throws RollbackException, HeuristicMixedException, HeuristicRollbackException, IllegalStateException, SystemException -->Line_3 $$ if (status == Status.STATUS_MARKED_ROLLBACK) [ CD ]
