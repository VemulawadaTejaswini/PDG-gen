Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_11 $$ if (getComponentAtGrid(container, 0, 0) == null) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_37 $$ int EPSILON = 4[ CD ]
Line_36 $$ GridInsertMode mode = null-->Line_69 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_21 $$ int[] vertGridLines = getVerticalGridLines(container)[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_53 $$ final int cellHeight = horzGridLines[row + 1] - horzGridLines[row][ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_44 $$ int dx = location.x - xs[col][ CD ]
Line_56 $$ if (component != null) -->Line_59 $$ int right = rc.x + rc.width + GridInsertLocation.INSERT_RECT_MIN_SIZE[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_20 $$ int[] horzGridLines = getHorizontalGridLines(container)[ FD ]
Line_56 $$ if (component != null) -->Line_60 $$ int bottom = rc.y + rc.height + GridInsertLocation.INSERT_RECT_MIN_SIZE[ CD ]
Line_66 $$ if (dx < rc.x - GridInsertLocation.INSERT_RECT_MIN_SIZE) -->Line_67 $$ mode = GridInsertMode.ColumnBefore[ CD ]
Line_46 $$ mode = GridInsertMode.ColumnBefore-->Line_54 $$ if (mode == null) [ FD ]
Line_50 $$ boolean spanInsertMode = canSpanningAllowed() && mode == null-->Line_76 $$ dropLocation.setSpanInsertMode(spanInsertMode)[ FD ]
Line_40 $$ mode = GridInsertMode.RowBefore-->Line_54 $$ if (mode == null) [ FD ]
Line_40 $$ mode = GridInsertMode.RowBefore-->Line_64 $$ mode = GridInsertMode.RowAfter[ FD ]
Line_74 $$ if (mode != null) -->Line_77 $$ return normalize ? dropLocation.normalize() : dropLocation[ CD ]
Line_62 $$ mode = GridInsertMode.RowBefore-->Line_64 $$ mode = GridInsertMode.RowAfter[ FD ]
Line_36 $$ GridInsertMode mode = null-->Line_46 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_21 $$ int[] vertGridLines = getVerticalGridLines(container)[ FD ]
Line_24 $$ for (int i = 0; i < xs.length; i++) -->Line_32 $$ row = i[ FD ]
Line_46 $$ mode = GridInsertMode.ColumnBefore-->Line_67 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_64 $$ mode = GridInsertMode.RowAfter-->Line_67 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_26 $$ col = i-->Line_79 $$ if (getComponentAtGrid(container, row, col) instanceof RadVSpacer || getComponentAtGrid(container, row, col) instanceof RadHSpacer) [ FD ]
Line_46 $$ mode = GridInsertMode.ColumnBefore-->Line_74 $$ if (mode != null) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_55 $$ RadComponent component = getComponentAtGrid(container, row, col)[ FD ]
Line_48 $$ mode = GridInsertMode.ColumnAfter-->Line_54 $$ if (mode == null) [ FD ]
Line_40 $$ mode = GridInsertMode.RowBefore-->Line_62 $$ mode = GridInsertMode.RowBefore[ FD ]
Line_56 $$ if (component != null) -->Line_66 $$ if (dx < rc.x - GridInsertLocation.INSERT_RECT_MIN_SIZE) [ CD ]
Line_39 $$ if (dy < EPSILON) -->Line_40 $$ mode = GridInsertMode.RowBefore[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_31 $$ if (location.getY() < ys[i] + heights[i]) [ FD ]
Line_5 $$ if (location == null) -->Line_6 $$ return new FirstComponentInsertLocation(container, rc, 0, 0)[ CD ]
Line_22 $$ int row = ys.length - 1-->Line_32 $$ row = i[ FD ]
Line_3 $$ if (container.getGridRowCount() == 1 && container.getGridColumnCount() == 1 && getComponentAtGrid(container, 0, 0) == null) -->Line_4 $$ final Rectangle rc = getGridCellRangeRect(container, 0, 0, 0, 0)[ CD ]
Line_36 $$ GridInsertMode mode = null-->Line_48 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_24 $$ for (int i = 0; i < xs.length; i++) [ CD ]
Line_11 $$ if (getComponentAtGrid(container, 0, 0) == null) -->Line_12 $$ return new GridDropLocation(container, 0, 0)[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_10 $$ if (location == null) [ CD ]
Line_42 $$ mode = GridInsertMode.RowAfter-->Line_69 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_36 $$ GridInsertMode mode = null-->Line_42 $$ mode = GridInsertMode.RowAfter[ FD ]
Line_26 $$ col = i-->Line_55 $$ RadComponent component = getComponentAtGrid(container, row, col)[ FD ]
Line_24 $$ for (int i = 0; i < xs.length; i++) -->Line_26 $$ col = i[ FD ]
Line_37 $$ int EPSILON = 4-->Line_47 $$ if (widths[col] - dx < EPSILON) [ FD ]
Line_42 $$ mode = GridInsertMode.RowAfter-->Line_62 $$ mode = GridInsertMode.RowBefore[ FD ]
Line_66 $$ if (dx < rc.x - GridInsertLocation.INSERT_RECT_MIN_SIZE) -->Line_68 $$ if (dx > right && dx < cellWidth) [ CD ]
Line_40 $$ mode = GridInsertMode.RowBefore-->Line_42 $$ mode = GridInsertMode.RowAfter[ FD ]
Line_55 $$ RadComponent component = getComponentAtGrid(container, row, col)-->Line_56 $$ if (component != null) [ FD ]
Line_45 $$ if (dx < EPSILON) -->Line_47 $$ if (widths[col] - dx < EPSILON) [ CD ]
Line_46 $$ mode = GridInsertMode.ColumnBefore-->Line_62 $$ mode = GridInsertMode.RowBefore[ FD ]
Line_40 $$ mode = GridInsertMode.RowBefore-->Line_69 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_62 $$ mode = GridInsertMode.RowBefore-->Line_67 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_18 $$ int[] widths = getGridCellSizes(container, false)[ FD ]
Line_56 $$ if (component != null) -->Line_58 $$ rc.translate(-xs[col], -ys[row])[ CD ]
Line_10 $$ if (location == null) -->Line_14 $$ return new GridInsertLocation(container, getLastNonSpacerRow(container), 0, GridInsertMode.RowAfter)[ CD ]
Line_54 $$ if (mode == null) -->Line_56 $$ if (component != null) [ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_20 $$ int[] horzGridLines = getHorizontalGridLines(container)[ CD ]
Line_48 $$ mode = GridInsertMode.ColumnAfter-->Line_62 $$ mode = GridInsertMode.RowBefore[ FD ]
Line_62 $$ mode = GridInsertMode.RowBefore-->Line_74 $$ if (mode != null) [ FD ]
Line_44 $$ int dx = location.x - xs[col]-->Line_45 $$ if (dx < EPSILON) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_79 $$ if (getComponentAtGrid(container, row, col) instanceof RadVSpacer || getComponentAtGrid(container, row, col) instanceof RadHSpacer) [ FD ]
Line_48 $$ mode = GridInsertMode.ColumnAfter-->Line_67 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_3 $$ if (container.getGridRowCount() == 1 && container.getGridColumnCount() == 1 && getComponentAtGrid(container, 0, 0) == null) [ FD ]
Line_42 $$ mode = GridInsertMode.RowAfter-->Line_46 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_79 $$ if (getComponentAtGrid(container, row, col) instanceof RadVSpacer || getComponentAtGrid(container, row, col) instanceof RadHSpacer) -->Line_80 $$ return new GridReplaceDropLocation(container, row, col)[ CD ]
Line_42 $$ mode = GridInsertMode.RowAfter-->Line_74 $$ if (mode != null) [ FD ]
Line_67 $$ mode = GridInsertMode.ColumnBefore-->Line_74 $$ if (mode != null) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_19 $$ int[] heights = getGridCellSizes(container, true)[ FD ]
Line_54 $$ if (mode == null) -->Line_55 $$ RadComponent component = getComponentAtGrid(container, row, col)[ CD ]
Line_55 $$ RadComponent component = getComponentAtGrid(container, row, col)-->Line_57 $$ Rectangle rc = component.getBounds()[ FD ]
Line_36 $$ GridInsertMode mode = null-->Line_54 $$ if (mode == null) [ FD ]
Line_42 $$ mode = GridInsertMode.RowAfter-->Line_64 $$ mode = GridInsertMode.RowAfter[ FD ]
Line_46 $$ mode = GridInsertMode.ColumnBefore-->Line_64 $$ mode = GridInsertMode.RowAfter[ FD ]
Line_39 $$ if (dy < EPSILON) -->Line_41 $$ if (heights[row] - dy < EPSILON) [ CD ]
Line_74 $$ if (mode != null) -->Line_75 $$ GridInsertLocation dropLocation = new GridInsertLocation(container, row, col, mode)[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_4 $$ final Rectangle rc = getGridCellRangeRect(container, 0, 0, 0, 0)[ FD ]
Line_24 $$ for (int i = 0; i < xs.length; i++) -->Line_30 $$ for (int i = 0; i < ys.length; i++) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_36 $$ GridInsertMode mode = null[ CD ]
Line_10 $$ if (location == null) -->Line_11 $$ if (getComponentAtGrid(container, 0, 0) == null) [ CD ]
Line_41 $$ if (heights[row] - dy < EPSILON) -->Line_42 $$ mode = GridInsertMode.RowAfter[ CD ]
Line_40 $$ mode = GridInsertMode.RowBefore-->Line_46 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_40 $$ mode = GridInsertMode.RowBefore-->Line_48 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_56 $$ if (component != null) -->Line_61 $$ if (dy < rc.y - GridInsertLocation.INSERT_RECT_MIN_SIZE) [ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_18 $$ int[] widths = getGridCellSizes(container, false)[ CD ]
Line_37 $$ int EPSILON = 4-->Line_41 $$ if (heights[row] - dy < EPSILON) [ FD ]
Line_32 $$ row = i-->Line_55 $$ RadComponent component = getComponentAtGrid(container, row, col)[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_38 $$ int dy = (int) (location.getY() - ys[row])[ CD ]
Line_47 $$ if (widths[col] - dx < EPSILON) -->Line_48 $$ mode = GridInsertMode.ColumnAfter[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_16 $$ int[] xs = getGridCellCoords(container, false)[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_17 $$ int[] ys = getGridCellCoords(container, true)[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_51 $$ boolean normalize = true[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_74 $$ if (mode != null) [ CD ]
Line_68 $$ if (dx > right && dx < cellWidth) -->Line_69 $$ mode = GridInsertMode.ColumnAfter[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_23 $$ int col = xs.length - 1[ CD ]
Line_22 $$ int row = ys.length - 1-->Line_55 $$ RadComponent component = getComponentAtGrid(container, row, col)[ FD ]
Line_48 $$ mode = GridInsertMode.ColumnAfter-->Line_74 $$ if (mode != null) [ FD ]
Line_36 $$ GridInsertMode mode = null-->Line_40 $$ mode = GridInsertMode.RowBefore[ FD ]
Line_23 $$ int col = xs.length - 1-->Line_79 $$ if (getComponentAtGrid(container, row, col) instanceof RadVSpacer || getComponentAtGrid(container, row, col) instanceof RadHSpacer) [ FD ]
Line_62 $$ mode = GridInsertMode.RowBefore-->Line_69 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_82 $$ return new GridDropLocation(container, row, col)[ CD ]
Line_37 $$ int EPSILON = 4-->Line_39 $$ if (dy < EPSILON) [ FD ]
Line_48 $$ mode = GridInsertMode.ColumnAfter-->Line_69 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_10 $$ if (location == null) [ FD ]
Line_42 $$ mode = GridInsertMode.RowAfter-->Line_48 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_3 $$ if (container.getGridRowCount() == 1 && container.getGridColumnCount() == 1 && getComponentAtGrid(container, 0, 0) == null) -->Line_8 $$ return new FirstComponentInsertLocation(container, location, rc)[ CD ]
Line_56 $$ if (component != null) -->Line_71 $$ normalize = false[ CD ]
Line_75 $$ GridInsertLocation dropLocation = new GridInsertLocation(container, row, col, mode)-->Line_76 $$ dropLocation.setSpanInsertMode(spanInsertMode)[ FD ]
Line_30 $$ for (int i = 0; i < ys.length; i++) -->Line_31 $$ if (location.getY() < ys[i] + heights[i]) [ CD ]
Line_38 $$ int dy = (int) (location.getY() - ys[row])-->Line_39 $$ if (dy < EPSILON) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_50 $$ boolean spanInsertMode = canSpanningAllowed() && mode == null[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_79 $$ if (getComponentAtGrid(container, row, col) instanceof RadVSpacer || getComponentAtGrid(container, row, col) instanceof RadHSpacer) [ CD ]
Line_42 $$ mode = GridInsertMode.RowAfter-->Line_67 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_38 $$ int dy = (int) (location.getY() - ys[row])[ FD ]
Line_36 $$ GridInsertMode mode = null-->Line_64 $$ mode = GridInsertMode.RowAfter[ FD ]
Line_45 $$ if (dx < EPSILON) -->Line_46 $$ mode = GridInsertMode.ColumnBefore[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_5 $$ if (location == null) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_22 $$ int row = ys.length - 1[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_3 $$ if (container.getGridRowCount() == 1 && container.getGridColumnCount() == 1 && getComponentAtGrid(container, 0, 0) == null) [ CD ]
Line_40 $$ mode = GridInsertMode.RowBefore-->Line_74 $$ if (mode != null) [ FD ]
Line_44 $$ int dx = location.x - xs[col]-->Line_66 $$ if (dx < rc.x - GridInsertLocation.INSERT_RECT_MIN_SIZE) [ FD ]
Line_61 $$ if (dy < rc.y - GridInsertLocation.INSERT_RECT_MIN_SIZE) -->Line_62 $$ mode = GridInsertMode.RowBefore[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_45 $$ if (dx < EPSILON) [ CD ]
Line_42 $$ mode = GridInsertMode.RowAfter-->Line_54 $$ if (mode == null) [ FD ]
Line_36 $$ GridInsertMode mode = null-->Line_62 $$ mode = GridInsertMode.RowBefore[ FD ]
Line_40 $$ mode = GridInsertMode.RowBefore-->Line_67 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_25 $$ if (location.x < xs[i] + widths[i]) -->Line_26 $$ col = i[ CD ]
Line_64 $$ mode = GridInsertMode.RowAfter-->Line_69 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_37 $$ int EPSILON = 4-->Line_45 $$ if (dx < EPSILON) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_54 $$ if (mode == null) [ CD ]
Line_38 $$ int dy = (int) (location.getY() - ys[row])-->Line_61 $$ if (dy < rc.y - GridInsertLocation.INSERT_RECT_MIN_SIZE) [ FD ]
Line_48 $$ mode = GridInsertMode.ColumnAfter-->Line_64 $$ mode = GridInsertMode.RowAfter[ FD ]
Line_32 $$ row = i-->Line_79 $$ if (getComponentAtGrid(container, row, col) instanceof RadVSpacer || getComponentAtGrid(container, row, col) instanceof RadHSpacer) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_39 $$ if (dy < EPSILON) [ CD ]
Line_67 $$ mode = GridInsertMode.ColumnBefore-->Line_69 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_16 $$ int[] xs = getGridCellCoords(container, false)[ CD ]
Line_51 $$ boolean normalize = true-->Line_71 $$ normalize = false[ FD ]
Line_36 $$ GridInsertMode mode = null-->Line_74 $$ if (mode != null) [ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_14 $$ return new GridInsertLocation(container, getLastNonSpacerRow(container), 0, GridInsertMode.RowAfter)[ FD ]
Line_3 $$ if (container.getGridRowCount() == 1 && container.getGridColumnCount() == 1 && getComponentAtGrid(container, 0, 0) == null) -->Line_5 $$ if (location == null) [ CD ]
Line_36 $$ GridInsertMode mode = null-->Line_67 $$ mode = GridInsertMode.ColumnBefore[ FD ]
Line_63 $$ if (dy > bottom && dy < cellHeight) -->Line_64 $$ mode = GridInsertMode.RowAfter[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_19 $$ int[] heights = getGridCellSizes(container, true)[ CD ]
Line_56 $$ if (component != null) -->Line_57 $$ Rectangle rc = component.getBounds()[ CD ]
Line_75 $$ GridInsertLocation dropLocation = new GridInsertLocation(container, row, col, mode)-->Line_77 $$ return normalize ? dropLocation.normalize() : dropLocation[ FD ]
Line_31 $$ if (location.getY() < ys[i] + heights[i]) -->Line_32 $$ row = i[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_17 $$ int[] ys = getGridCellCoords(container, true)[ FD ]
Line_64 $$ mode = GridInsertMode.RowAfter-->Line_74 $$ if (mode != null) [ FD ]
Line_22 $$ int row = ys.length - 1-->Line_79 $$ if (getComponentAtGrid(container, row, col) instanceof RadVSpacer || getComponentAtGrid(container, row, col) instanceof RadHSpacer) [ FD ]
Line_46 $$ mode = GridInsertMode.ColumnBefore-->Line_48 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_46 $$ mode = GridInsertMode.ColumnBefore-->Line_69 $$ mode = GridInsertMode.ColumnAfter[ FD ]
Line_74 $$ if (mode != null) -->Line_76 $$ dropLocation.setSpanInsertMode(spanInsertMode)[ CD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_30 $$ for (int i = 0; i < ys.length; i++) [ CD ]
Line_23 $$ int col = xs.length - 1-->Line_55 $$ RadComponent component = getComponentAtGrid(container, row, col)[ FD ]
Line_69 $$ mode = GridInsertMode.ColumnAfter-->Line_74 $$ if (mode != null) [ FD ]
Line_23 $$ int col = xs.length - 1-->Line_26 $$ col = i[ FD ]
Line_2 $$ public ComponentDropLocation getDropLocation(RadContainer container, @Nullable final Point location) -->Line_52 $$ final int cellWidth = vertGridLines[col + 1] - vertGridLines[col][ CD ]
Line_4 $$ final Rectangle rc = getGridCellRangeRect(container, 0, 0, 0, 0)-->Line_58 $$ rc.translate(-xs[col], -ys[row])[ FD ]
Line_24 $$ for (int i = 0; i < xs.length; i++) -->Line_25 $$ if (location.x < xs[i] + widths[i]) [ CD ]
Line_61 $$ if (dy < rc.y - GridInsertLocation.INSERT_RECT_MIN_SIZE) -->Line_63 $$ if (dy > bottom && dy < cellHeight) [ CD ]
Line_30 $$ for (int i = 0; i < ys.length; i++) -->Line_32 $$ row = i[ FD ]
