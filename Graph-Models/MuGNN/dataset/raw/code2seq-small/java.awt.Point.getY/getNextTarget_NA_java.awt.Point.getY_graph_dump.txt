Line_111 $$ List<SwitchTarget> all = Arrays.asList(myTargets.toArray(new SwitchTarget[myTargets.size()]))-->Line_114 $$ return all.get(index + 1)[ FD ]
Line_23 $$ eachPoint = new Point(eachRec.x, eachRec.y + eachRec.height / 2)-->Line_44 $$ points.add(eachPoint)[ FD ]
Line_7 $$ Point selected = null-->Line_41 $$ points.add(selected)[ FD ]
Line_9 $$ for (SwitchTarget each : myTargets) -->Line_45 $$ target2Point.put(each, eachPoint)[ FD ]
Line_26 $$ if (each.equals(mySelection)) -->Line_44 $$ points.add(eachPoint)[ CD ]
Line_8 $$ Map<SwitchTarget, Point> target2Point = new HashMap<SwitchTarget, Point>()-->Line_50 $$ Point eachPoint = target2Point.get(eachTarget)[ FD ]
Line_7 $$ Point selected = null-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
Line_111 $$ List<SwitchTarget> all = Arrays.asList(myTargets.toArray(new SwitchTarget[myTargets.size()]))-->Line_116 $$ return all.get(0)[ FD ]
Line_38 $$ selected = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)-->Line_41 $$ points.add(selected)[ FD ]
Line_29 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_41 $$ points.add(selected)[ FD ]
Line_17 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_45 $$ target2Point.put(each, eachPoint)[ FD ]
Line_67 $$ if (eachPoint.y >= selected.y) -->Line_68 $$ return eachTarget[ CD ]
Line_11 $$ Point eachPoint = null-->Line_14 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)[ FD ]
Line_72 $$ if (eachPoint.x <= selected.x) -->Line_73 $$ return eachTarget[ CD ]
Line_11 $$ Point eachPoint = null-->Line_23 $$ eachPoint = new Point(eachRec.x, eachRec.y + eachRec.height / 2)[ FD ]
Line_38 $$ selected = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_38 $$ selected = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)-->Line_42 $$ target2Point.put(each, selected)[ FD ]
Line_26 $$ if (each.equals(mySelection)) -->Line_45 $$ target2Point.put(each, eachPoint)[ CD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_109 $$ if (myTargets.size() == 0)[ CD ]
Line_83 $$ for (int i = distancesArray.length - 1; i >= 0; i--) -->Line_85 $$ Point eachPoint = target2Point.get(eachTarget)[ CD ]
Line_26 $$ if (each.equals(mySelection)) -->Line_42 $$ target2Point.put(each, selected)[ CD ]
Line_17 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_44 $$ points.add(eachPoint)[ FD ]
Line_88 $$ if (eachPoint.y >= selected.y) -->Line_89 $$ return eachTarget[ CD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_7 $$ Point selected = null[ CD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_111 $$ List<SwitchTarget> all = Arrays.asList(myTargets.toArray(new SwitchTarget[myTargets.size()]))[ CD ]
Line_23 $$ eachPoint = new Point(eachRec.x, eachRec.y + eachRec.height / 2)-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_32 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_42 $$ target2Point.put(each, selected)[ FD ]
Line_17 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_23 $$ eachPoint = new Point(eachRec.x, eachRec.y + eachRec.height / 2)[ FD ]
Line_11 $$ Point eachPoint = null-->Line_44 $$ points.add(eachPoint)[ FD ]
Line_14 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_113 $$ if (index + 1 < myTargets.size()) [ CD ]
Line_49 $$ for (SwitchTarget eachTarget : myTargets) -->Line_50 $$ Point eachPoint = target2Point.get(eachTarget)[ FD ]
Line_111 $$ List<SwitchTarget> all = Arrays.asList(myTargets.toArray(new SwitchTarget[myTargets.size()]))-->Line_112 $$ int index = all.indexOf(getSelection())[ FD ]
Line_7 $$ Point selected = null-->Line_42 $$ target2Point.put(each, selected)[ FD ]
Line_20 $$ eachPoint = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
Line_83 $$ for (int i = distancesArray.length - 1; i >= 0; i--) -->Line_84 $$ SwitchTarget eachTarget = distance.get(distancesArray[i])[ CD ]
Line_93 $$ if (eachPoint.y <= selected.y) -->Line_94 $$ return eachTarget[ CD ]
Line_48 $$ TreeMap<Integer, SwitchTarget> distance = new TreeMap<Integer, SwitchTarget>()-->Line_56 $$ Integer[] distancesArray = distance.keySet().toArray(new Integer[distance.size()])[ FD ]
Line_48 $$ TreeMap<Integer, SwitchTarget> distance = new TreeMap<Integer, SwitchTarget>()-->Line_58 $$ SwitchTarget eachTarget = distance.get(eachDistance)[ FD ]
Line_8 $$ Map<SwitchTarget, Point> target2Point = new HashMap<SwitchTarget, Point>()-->Line_45 $$ target2Point.put(each, eachPoint)[ FD ]
Line_32 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_41 $$ points.add(selected)[ FD ]
Line_14 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_45 $$ target2Point.put(each, eachPoint)[ FD ]
Line_103 $$ if (eachPoint.x <= selected.x) -->Line_104 $$ return eachTarget[ CD ]
Line_17 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_20 $$ eachPoint = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)[ FD ]
Line_32 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_38 $$ selected = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)[ FD ]
Line_77 $$ if (eachPoint.x >= selected.x) -->Line_78 $$ return eachTarget[ CD ]
Line_9 $$ for (SwitchTarget each : myTargets) -->Line_42 $$ target2Point.put(each, selected)[ FD ]
Line_29 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_42 $$ target2Point.put(each, selected)[ FD ]
Line_23 $$ eachPoint = new Point(eachRec.x, eachRec.y + eachRec.height / 2)-->Line_45 $$ target2Point.put(each, eachPoint)[ FD ]
Line_29 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_38 $$ selected = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)[ FD ]
Line_23 $$ eachPoint = new Point(eachRec.x, eachRec.y + eachRec.height / 2)-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
Line_113 $$ if (index + 1 < myTargets.size()) -->Line_114 $$ return all.get(index + 1)[ CD ]
Line_98 $$ if (eachPoint.x >= selected.x) -->Line_99 $$ return eachTarget[ CD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_112 $$ int index = all.indexOf(getSelection())[ CD ]
Line_14 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_17 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y)[ FD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_56 $$ Integer[] distancesArray = distance.keySet().toArray(new Integer[distance.size()])[ CD ]
Line_32 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_35 $$ selected = new Point(eachRec.x, eachRec.y + eachRec.height / 2)[ FD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_3 $$ if (myTargets.size() == 1) [ CD ]
Line_14 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_8 $$ Map<SwitchTarget, Point> target2Point = new HashMap<SwitchTarget, Point>()-->Line_59 $$ Point eachPoint = target2Point.get(eachTarget)[ FD ]
Line_38 $$ selected = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
Line_7 $$ Point selected = null-->Line_35 $$ selected = new Point(eachRec.x, eachRec.y + eachRec.height / 2)[ FD ]
Line_7 $$ Point selected = null-->Line_38 $$ selected = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)[ FD ]
Line_8 $$ Map<SwitchTarget, Point> target2Point = new HashMap<SwitchTarget, Point>()-->Line_42 $$ target2Point.put(each, selected)[ FD ]
Line_20 $$ eachPoint = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)-->Line_44 $$ points.add(eachPoint)[ FD ]
Line_32 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
Line_14 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_44 $$ points.add(eachPoint)[ FD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_48 $$ TreeMap<Integer, SwitchTarget> distance = new TreeMap<Integer, SwitchTarget>()[ CD ]
Line_7 $$ Point selected = null-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_35 $$ selected = new Point(eachRec.x, eachRec.y + eachRec.height / 2)-->Line_42 $$ target2Point.put(each, selected)[ FD ]
Line_35 $$ selected = new Point(eachRec.x, eachRec.y + eachRec.height / 2)-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_49 $$ for (SwitchTarget eachTarget : myTargets) -->Line_59 $$ Point eachPoint = target2Point.get(eachTarget)[ FD ]
Line_113 $$ if (index + 1 < myTargets.size()) -->Line_116 $$ return all.get(0)[ CD ]
Line_17 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_11 $$ Point eachPoint = null-->Line_20 $$ eachPoint = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)[ FD ]
Line_14 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_23 $$ eachPoint = new Point(eachRec.x, eachRec.y + eachRec.height / 2)[ FD ]
Line_29 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_35 $$ selected = new Point(eachRec.x, eachRec.y + eachRec.height / 2)[ FD ]
Line_48 $$ TreeMap<Integer, SwitchTarget> distance = new TreeMap<Integer, SwitchTarget>()-->Line_54 $$ distance.put((int) eachDistance, eachTarget)[ FD ]
Line_9 $$ for (SwitchTarget each : myTargets) -->Line_10 $$ Rectangle eachRec = each.getRectangle().getRectangleOn(myRootComponent)[ FD ]
Line_3 $$ if (myTargets.size() == 1) -->Line_4 $$ return getSelection()[ CD ]
Line_48 $$ TreeMap<Integer, SwitchTarget> distance = new TreeMap<Integer, SwitchTarget>()-->Line_84 $$ SwitchTarget eachTarget = distance.get(distancesArray[i])[ FD ]
Line_11 $$ Point eachPoint = null-->Line_45 $$ target2Point.put(each, eachPoint)[ FD ]
Line_20 $$ eachPoint = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_7 $$ Point selected = null-->Line_29 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y)[ FD ]
Line_29 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_8 $$ Map<SwitchTarget, Point> target2Point = new HashMap<SwitchTarget, Point>()[ CD ]
Line_49 $$ for (SwitchTarget eachTarget : myTargets) -->Line_54 $$ distance.put((int) eachDistance, eachTarget)[ FD ]
Line_6 $$ List<Point> points = new ArrayList<Point>()-->Line_41 $$ points.add(selected)[ FD ]
Line_109 $$ if (myTargets.size() == 0)-->Line_110 $$ return null[ CD ]
Line_49 $$ for (SwitchTarget eachTarget : myTargets) -->Line_85 $$ Point eachPoint = target2Point.get(eachTarget)[ FD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_83 $$ for (int i = distancesArray.length - 1; i >= 0; i--) [ CD ]
Line_14 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_20 $$ eachPoint = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)[ FD ]
Line_20 $$ eachPoint = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)-->Line_45 $$ target2Point.put(each, eachPoint)[ FD ]
Line_29 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_32 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_29 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_32 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)[ FD ]
Line_35 $$ selected = new Point(eachRec.x, eachRec.y + eachRec.height / 2)-->Line_38 $$ selected = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)[ FD ]
Line_2 $$ private SwitchTarget getNextTarget(Direction direction) -->Line_6 $$ List<Point> points = new ArrayList<Point>()[ CD ]
Line_11 $$ Point eachPoint = null-->Line_51 $$ if (selected == eachPoint)[ FD ]
Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))-->Line_58 $$ SwitchTarget eachTarget = distance.get(eachDistance)[ FD ]
Line_7 $$ Point selected = null-->Line_32 $$ selected = new Point(eachRec.x + eachRec.width / 2, eachRec.y + eachRec.height)[ FD ]
Line_20 $$ eachPoint = new Point(eachRec.x + eachRec.width, eachRec.y + eachRec.height / 2)-->Line_23 $$ eachPoint = new Point(eachRec.x, eachRec.y + eachRec.height / 2)[ FD ]
Line_11 $$ Point eachPoint = null-->Line_17 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y)[ FD ]
Line_9 $$ for (SwitchTarget each : myTargets) -->Line_26 $$ if (each.equals(mySelection)) [ FD ]
Line_35 $$ selected = new Point(eachRec.x, eachRec.y + eachRec.height / 2)-->Line_41 $$ points.add(selected)[ FD ]
Line_6 $$ List<Point> points = new ArrayList<Point>()-->Line_44 $$ points.add(eachPoint)[ FD ]
Line_35 $$ selected = new Point(eachRec.x, eachRec.y + eachRec.height / 2)-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
Line_8 $$ Map<SwitchTarget, Point> target2Point = new HashMap<SwitchTarget, Point>()-->Line_85 $$ Point eachPoint = target2Point.get(eachTarget)[ FD ]
Line_26 $$ if (each.equals(mySelection)) -->Line_41 $$ points.add(selected)[ CD ]
Line_84 $$ SwitchTarget eachTarget = distance.get(distancesArray[i])-->Line_85 $$ Point eachPoint = target2Point.get(eachTarget)[ FD ]
Line_62 $$ if (eachPoint.y <= selected.y) -->Line_63 $$ return eachTarget[ CD ]
Line_11 $$ Point eachPoint = null-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
Line_17 $$ eachPoint = new Point(eachRec.x + eachRec.width / 2, eachRec.y)-->Line_53 $$ double eachDistance = sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()))[ FD ]
