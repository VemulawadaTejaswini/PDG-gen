Line_29 $$ for (final RadComponent c : dragComponents) -->Line_31 $$ c.setDragBorder(true)[ FD ]
Line_13 $$ allBounds = allBounds.union(rc)-->Line_10 $$ if (allBounds == null) [ FD ]
Line_9 $$ Rectangle rc = SwingUtilities.convertRectangle(originalParents[i].getDelegee(), originalBounds[i], myEditor.getDragLayer())-->Line_13 $$ allBounds = allBounds.union(rc)[ FD ]
Line_10 $$ if (allBounds == null) -->Line_11 $$ allBounds = rc[ CD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_22 $$ if (draggedComponentList.hasDragDelta() && myUseDragDelta) [ FD ]
Line_5 $$ if (!draggedComponentList.hasDragDelta() || !myUseDragDelta) -->Line_7 $$ final Rectangle[] originalBounds = draggedComponentList.getOriginalBounds()[ CD ]
Line_18 $$ for (int i = 0; i < dragComponents.size(); i++) -->Line_21 $$ final Point point = SwingUtilities.convertPoint(draggedComponentList.getOriginalParents()[i].getDelegee(), delegee.getLocation(), myEditor.getDragLayer())[ CD ]
Line_20 $$ final JComponent delegee = myDraggedComponentsCopy.get(i).getDelegee()-->Line_21 $$ final Point point = SwingUtilities.convertPoint(draggedComponentList.getOriginalParents()[i].getDelegee(), delegee.getLocation(), myEditor.getDragLayer())[ FD ]
Line_4 $$ Rectangle allBounds = null-->Line_26 $$ delegee.setLocation((int) (point.getX() - allBounds.getX() + location.getX()), (int) (point.getY() - allBounds.getY() + location.getY()))[ FD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_26 $$ delegee.setLocation((int) (point.getX() - allBounds.getX() + location.getX()), (int) (point.getY() - allBounds.getY() + location.getY()))[ FD ]
Line_11 $$ allBounds = rc-->Line_10 $$ if (allBounds == null) [ FD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_23 $$ delegee.setLocation((int) point.getX() + draggedComponentList.getDragDeltaX(), (int) point.getY() + draggedComponentList.getDragDeltaY())[ FD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_5 $$ if (!draggedComponentList.hasDragDelta() || !myUseDragDelta) [ CD ]
Line_22 $$ if (draggedComponentList.hasDragDelta() && myUseDragDelta) -->Line_26 $$ delegee.setLocation((int) (point.getX() - allBounds.getX() + location.getX()), (int) (point.getY() - allBounds.getY() + location.getY()))[ CD ]
Line_8 $$ for (int i = 0; i < originalParents.length; i++) -->Line_19 $$ myDraggedComponentsCopy.get(i).setSelected(true)[ FD ]
Line_3 $$ final List<RadComponent> dragComponents = draggedComponentList.getComponents()-->Line_18 $$ for (int i = 0; i < dragComponents.size(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < originalParents.length; i++) -->Line_20 $$ final JComponent delegee = myDraggedComponentsCopy.get(i).getDelegee()[ FD ]
Line_18 $$ for (int i = 0; i < dragComponents.size(); i++) -->Line_20 $$ final JComponent delegee = myDraggedComponentsCopy.get(i).getDelegee()[ FD ]
Line_18 $$ for (int i = 0; i < dragComponents.size(); i++) -->Line_22 $$ if (draggedComponentList.hasDragDelta() && myUseDragDelta) [ CD ]
Line_21 $$ final Point point = SwingUtilities.convertPoint(draggedComponentList.getOriginalParents()[i].getDelegee(), delegee.getLocation(), myEditor.getDragLayer())-->Line_26 $$ delegee.setLocation((int) (point.getX() - allBounds.getX() + location.getX()), (int) (point.getY() - allBounds.getY() + location.getY()))[ FD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_5 $$ if (!draggedComponentList.hasDragDelta() || !myUseDragDelta) [ FD ]
Line_22 $$ if (draggedComponentList.hasDragDelta() && myUseDragDelta) -->Line_23 $$ delegee.setLocation((int) point.getX() + draggedComponentList.getDragDeltaX(), (int) point.getY() + draggedComponentList.getDragDeltaY())[ CD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_3 $$ final List<RadComponent> dragComponents = draggedComponentList.getComponents()[ CD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_30 $$ if (dropAction != DnDConstants.ACTION_COPY) [ FD ]
Line_4 $$ Rectangle allBounds = null-->Line_10 $$ if (allBounds == null) [ FD ]
Line_4 $$ Rectangle allBounds = null-->Line_13 $$ allBounds = allBounds.union(rc)[ FD ]
Line_9 $$ Rectangle rc = SwingUtilities.convertRectangle(originalParents[i].getDelegee(), originalBounds[i], myEditor.getDragLayer())-->Line_11 $$ allBounds = rc[ FD ]
Line_20 $$ final JComponent delegee = myDraggedComponentsCopy.get(i).getDelegee()-->Line_23 $$ delegee.setLocation((int) point.getX() + draggedComponentList.getDragDeltaX(), (int) point.getY() + draggedComponentList.getDragDeltaY())[ FD ]
Line_10 $$ if (allBounds == null) -->Line_13 $$ allBounds = allBounds.union(rc)[ CD ]
Line_5 $$ if (!draggedComponentList.hasDragDelta() || !myUseDragDelta) -->Line_6 $$ final RadContainer[] originalParents = draggedComponentList.getOriginalParents()[ CD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_6 $$ final RadContainer[] originalParents = draggedComponentList.getOriginalParents()[ FD ]
Line_11 $$ allBounds = rc-->Line_13 $$ allBounds = allBounds.union(rc)[ FD ]
Line_8 $$ for (int i = 0; i < originalParents.length; i++) -->Line_10 $$ if (allBounds == null) [ CD ]
Line_4 $$ Rectangle allBounds = null-->Line_11 $$ allBounds = rc[ FD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_3 $$ final List<RadComponent> dragComponents = draggedComponentList.getComponents()[ FD ]
Line_8 $$ for (int i = 0; i < originalParents.length; i++) -->Line_18 $$ for (int i = 0; i < dragComponents.size(); i++) [ FD ]
Line_29 $$ for (final RadComponent c : dragComponents) -->Line_33 $$ c.setSelected(false)[ FD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_18 $$ for (int i = 0; i < dragComponents.size(); i++) [ CD ]
Line_3 $$ final List<RadComponent> dragComponents = draggedComponentList.getComponents()-->Line_17 $$ myDraggedComponentsCopy = CutCopyPasteSupport.copyComponents(myEditor, dragComponents)[ FD ]
Line_21 $$ final Point point = SwingUtilities.convertPoint(draggedComponentList.getOriginalParents()[i].getDelegee(), delegee.getLocation(), myEditor.getDragLayer())-->Line_23 $$ delegee.setLocation((int) point.getX() + draggedComponentList.getDragDeltaX(), (int) point.getY() + draggedComponentList.getDragDeltaY())[ FD ]
Line_18 $$ for (int i = 0; i < dragComponents.size(); i++) -->Line_20 $$ final JComponent delegee = myDraggedComponentsCopy.get(i).getDelegee()[ CD ]
Line_18 $$ for (int i = 0; i < dragComponents.size(); i++) -->Line_19 $$ myDraggedComponentsCopy.get(i).setSelected(true)[ FD ]
Line_20 $$ final JComponent delegee = myDraggedComponentsCopy.get(i).getDelegee()-->Line_26 $$ delegee.setLocation((int) (point.getX() - allBounds.getX() + location.getX()), (int) (point.getY() - allBounds.getY() + location.getY()))[ FD ]
Line_13 $$ allBounds = allBounds.union(rc)-->Line_26 $$ delegee.setLocation((int) (point.getX() - allBounds.getX() + location.getX()), (int) (point.getY() - allBounds.getY() + location.getY()))[ FD ]
Line_5 $$ if (!draggedComponentList.hasDragDelta() || !myUseDragDelta) -->Line_8 $$ for (int i = 0; i < originalParents.length; i++) [ CD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_21 $$ final Point point = SwingUtilities.convertPoint(draggedComponentList.getOriginalParents()[i].getDelegee(), delegee.getLocation(), myEditor.getDragLayer())[ FD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_17 $$ myDraggedComponentsCopy = CutCopyPasteSupport.copyComponents(myEditor, dragComponents)[ CD ]
Line_18 $$ for (int i = 0; i < dragComponents.size(); i++) -->Line_19 $$ myDraggedComponentsCopy.get(i).setSelected(true)[ CD ]
Line_11 $$ allBounds = rc-->Line_26 $$ delegee.setLocation((int) (point.getX() - allBounds.getX() + location.getX()), (int) (point.getY() - allBounds.getY() + location.getY()))[ FD ]
Line_8 $$ for (int i = 0; i < originalParents.length; i++) -->Line_9 $$ Rectangle rc = SwingUtilities.convertRectangle(originalParents[i].getDelegee(), originalBounds[i], myEditor.getDragLayer())[ CD ]
Line_30 $$ if (dropAction != DnDConstants.ACTION_COPY) -->Line_31 $$ c.setDragBorder(true)[ CD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_4 $$ Rectangle allBounds = null[ CD ]
Line_2 $$ private void processDragEnter(final DraggedComponentList draggedComponentList, final Point location, final int dropAction) -->Line_7 $$ final Rectangle[] originalBounds = draggedComponentList.getOriginalBounds()[ FD ]
