Line_16 $$ if ((Math.abs(e.getX() - myPressPoint.getX()) > TREMOR || Math.abs(e.getY() - myPressPoint.getY()) > TREMOR)) -->Line_17 $$ ArrayList<InputEvent> eventList = new ArrayList<InputEvent>()[ CD ]
Line_8 $$ if (component != null) -->Line_9 $$ if (UIUtil.isControlKeyDown(e)) [ CD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_5 $$ if (e.getID() == MouseEvent.MOUSE_RELEASED) [ FD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_14 $$ if (e.getID() == MouseEvent.MOUSE_DRAGGED) [ FD ]
Line_16 $$ if ((Math.abs(e.getX() - myPressPoint.getX()) > TREMOR || Math.abs(e.getY() - myPressPoint.getY()) > TREMOR)) -->Line_20 $$ DragGestureEvent dge = new DragGestureEvent(myDragGestureRecognizer, UIUtil.isControlKeyDown(e) ? DnDConstants.ACTION_COPY : DnDConstants.ACTION_MOVE, myPressPoint, eventList)[ CD ]
Line_16 $$ if ((Math.abs(e.getX() - myPressPoint.getX()) > TREMOR || Math.abs(e.getY() - myPressPoint.getY()) > TREMOR)) -->Line_18 $$ eventList.add(e)[ CD ]
Line_16 $$ if ((Math.abs(e.getX() - myPressPoint.getX()) > TREMOR || Math.abs(e.getY() - myPressPoint.getY()) > TREMOR)) -->Line_22 $$ myEditor.getDropTargetListener().setUseDragDelta(true)[ CD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_23 $$ dge.startDrag(null, DraggedComponentList.pickupSelection(myEditor, e.getPoint()), myDragSourceListener)[ FD ]
Line_7 $$ RadComponent component = FormEditingUtil.getRadComponentAt(myEditor.getRootContainer(), e.getX(), e.getY())-->Line_10 $$ component.setSelected(!component.isSelected())[ FD ]
Line_16 $$ if ((Math.abs(e.getX() - myPressPoint.getX()) > TREMOR || Math.abs(e.getY() - myPressPoint.getY()) > TREMOR)) -->Line_19 $$ myDragGestureRecognizer.setTriggerEvent(e)[ CD ]
Line_5 $$ if (e.getID() == MouseEvent.MOUSE_RELEASED) -->Line_6 $$ if (!myDragStarted) [ CD ]
Line_3 $$ if (e.getID() == MouseEvent.MOUSE_PRESSED) -->Line_5 $$ if (e.getID() == MouseEvent.MOUSE_RELEASED) [ CD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_18 $$ eventList.add(e)[ FD ]
Line_15 $$ if (!myDragStarted) -->Line_16 $$ if ((Math.abs(e.getX() - myPressPoint.getX()) > TREMOR || Math.abs(e.getY() - myPressPoint.getY()) > TREMOR)) [ CD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_4 $$ myPressPoint = e.getPoint()[ FD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_9 $$ if (UIUtil.isControlKeyDown(e)) [ FD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_7 $$ RadComponent component = FormEditingUtil.getRadComponentAt(myEditor.getRootContainer(), e.getX(), e.getY())[ FD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_20 $$ DragGestureEvent dge = new DragGestureEvent(myDragGestureRecognizer, UIUtil.isControlKeyDown(e) ? DnDConstants.ACTION_COPY : DnDConstants.ACTION_MOVE, myPressPoint, eventList)[ FD ]
Line_5 $$ if (e.getID() == MouseEvent.MOUSE_RELEASED) -->Line_14 $$ if (e.getID() == MouseEvent.MOUSE_DRAGGED) [ CD ]
Line_7 $$ RadComponent component = FormEditingUtil.getRadComponentAt(myEditor.getRootContainer(), e.getX(), e.getY())-->Line_8 $$ if (component != null) [ FD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_3 $$ if (e.getID() == MouseEvent.MOUSE_PRESSED) [ CD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_16 $$ if ((Math.abs(e.getX() - myPressPoint.getX()) > TREMOR || Math.abs(e.getY() - myPressPoint.getY()) > TREMOR)) [ FD ]
Line_9 $$ if (UIUtil.isControlKeyDown(e)) -->Line_10 $$ component.setSelected(!component.isSelected())[ CD ]
Line_6 $$ if (!myDragStarted) -->Line_7 $$ RadComponent component = FormEditingUtil.getRadComponentAt(myEditor.getRootContainer(), e.getX(), e.getY())[ CD ]
Line_17 $$ ArrayList<InputEvent> eventList = new ArrayList<InputEvent>()-->Line_18 $$ eventList.add(e)[ FD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_3 $$ if (e.getID() == MouseEvent.MOUSE_PRESSED) [ FD ]
Line_14 $$ if (e.getID() == MouseEvent.MOUSE_DRAGGED) -->Line_15 $$ if (!myDragStarted) [ CD ]
Line_16 $$ if ((Math.abs(e.getX() - myPressPoint.getX()) > TREMOR || Math.abs(e.getY() - myPressPoint.getY()) > TREMOR)) -->Line_23 $$ dge.startDrag(null, DraggedComponentList.pickupSelection(myEditor, e.getPoint()), myDragSourceListener)[ CD ]
Line_6 $$ if (!myDragStarted) -->Line_8 $$ if (component != null) [ CD ]
Line_20 $$ DragGestureEvent dge = new DragGestureEvent(myDragGestureRecognizer, UIUtil.isControlKeyDown(e) ? DnDConstants.ACTION_COPY : DnDConstants.ACTION_MOVE, myPressPoint, eventList)-->Line_23 $$ dge.startDrag(null, DraggedComponentList.pickupSelection(myEditor, e.getPoint()), myDragSourceListener)[ FD ]
Line_2 $$ protected void processMouseEvent(final MouseEvent e) -->Line_19 $$ myDragGestureRecognizer.setTriggerEvent(e)[ FD ]
Line_3 $$ if (e.getID() == MouseEvent.MOUSE_PRESSED) -->Line_4 $$ myPressPoint = e.getPoint()[ CD ]
