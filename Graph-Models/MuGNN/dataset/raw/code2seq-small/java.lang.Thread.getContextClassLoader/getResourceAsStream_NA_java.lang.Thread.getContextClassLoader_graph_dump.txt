Line_7 $$ stream = classLoader.getResourceAsStream(stripped)-->Line_10 $$ stream = Environment.class.getResourceAsStream(resource)[ FD ]
Line_4 $$ InputStream stream = null-->Line_10 $$ stream = Environment.class.getResourceAsStream(resource)[ FD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_4 $$ InputStream stream = null[ CD ]
Line_4 $$ InputStream stream = null-->Line_7 $$ stream = classLoader.getResourceAsStream(stripped)[ FD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_15 $$ if (stream == null) [ CD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_10 $$ stream = Environment.class.getResourceAsStream(resource)[ FD ]
Line_12 $$ if (stream == null) -->Line_13 $$ stream = Environment.class.getClassLoader().getResourceAsStream(stripped)[ CD ]
Line_13 $$ stream = Environment.class.getClassLoader().getResourceAsStream(stripped)-->Line_15 $$ if (stream == null) [ FD ]
Line_4 $$ InputStream stream = null-->Line_12 $$ if (stream == null) [ FD ]
Line_7 $$ stream = classLoader.getResourceAsStream(stripped)-->Line_15 $$ if (stream == null) [ FD ]
Line_10 $$ stream = Environment.class.getResourceAsStream(resource)-->Line_13 $$ stream = Environment.class.getClassLoader().getResourceAsStream(stripped)[ FD ]
Line_4 $$ InputStream stream = null-->Line_9 $$ if (stream == null) [ FD ]
Line_7 $$ stream = classLoader.getResourceAsStream(stripped)-->Line_12 $$ if (stream == null) [ FD ]
Line_10 $$ stream = Environment.class.getResourceAsStream(resource)-->Line_12 $$ if (stream == null) [ FD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_3 $$ String stripped = resource.startsWith("/") ? resource.substring(1) : resource[ FD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_18 $$ return stream[ CD ]
Line_4 $$ InputStream stream = null-->Line_13 $$ stream = Environment.class.getClassLoader().getResourceAsStream(stripped)[ FD ]
Line_7 $$ stream = classLoader.getResourceAsStream(stripped)-->Line_13 $$ stream = Environment.class.getClassLoader().getResourceAsStream(stripped)[ FD ]
Line_7 $$ stream = classLoader.getResourceAsStream(stripped)-->Line_9 $$ if (stream == null) [ FD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_5 $$ ClassLoader classLoader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_3 $$ String stripped = resource.startsWith("/") ? resource.substring(1) : resource[ CD ]
Line_9 $$ if (stream == null) -->Line_10 $$ stream = Environment.class.getResourceAsStream(resource)[ CD ]
Line_10 $$ stream = Environment.class.getResourceAsStream(resource)-->Line_15 $$ if (stream == null) [ FD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_9 $$ if (stream == null) [ CD ]
Line_3 $$ String stripped = resource.startsWith("/") ? resource.substring(1) : resource-->Line_13 $$ stream = Environment.class.getClassLoader().getResourceAsStream(stripped)[ FD ]
Line_3 $$ String stripped = resource.startsWith("/") ? resource.substring(1) : resource-->Line_7 $$ stream = classLoader.getResourceAsStream(stripped)[ FD ]
Line_4 $$ InputStream stream = null-->Line_15 $$ if (stream == null) [ FD ]
Line_5 $$ ClassLoader classLoader = Thread.currentThread().getContextClassLoader()-->Line_6 $$ if (classLoader != null) [ FD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_12 $$ if (stream == null) [ CD ]
Line_2 $$ public static InputStream getResourceAsStream(String resource) -->Line_6 $$ if (classLoader != null) [ CD ]
Line_5 $$ ClassLoader classLoader = Thread.currentThread().getContextClassLoader()-->Line_7 $$ stream = classLoader.getResourceAsStream(stripped)[ FD ]
Line_6 $$ if (classLoader != null) -->Line_7 $$ stream = classLoader.getResourceAsStream(stripped)[ CD ]
