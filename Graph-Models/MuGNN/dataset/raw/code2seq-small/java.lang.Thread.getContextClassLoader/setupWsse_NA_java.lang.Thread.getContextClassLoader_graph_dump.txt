Line_2 $$ public static void setupWsse(ServiceIface proxy, Bus bus) -->Line_11 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO), "true")[ CD ]
Line_2 $$ public static void setupWsse(ServiceIface proxy, Bus bus) -->Line_4 $$ setServiceContextAttributes(ctx)[ CD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_6 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.CALLBACK_HANDLER), new ClientCallbackHandler())[ FD ]
Line_2 $$ public static void setupWsse(ServiceIface proxy, Bus bus) -->Line_8 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.ENCRYPT_USERNAME), "mystskey")[ CD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_10 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_PROPERTIES), Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsse(ServiceIface proxy, Bus bus) -->Line_5 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.USERNAME), "alice")[ CD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_9 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_USERNAME), "myclientkey")[ FD ]
Line_2 $$ public static void setupWsse(ServiceIface proxy, Bus bus) -->Line_10 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_PROPERTIES), Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_7 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.ENCRYPT_PROPERTIES), Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsse(ServiceIface proxy, Bus bus) -->Line_9 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_USERNAME), "myclientkey")[ CD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_8 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.ENCRYPT_USERNAME), "mystskey")[ FD ]
Line_2 $$ public static void setupWsse(ServiceIface proxy, Bus bus) -->Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()[ CD ]
Line_2 $$ public static void setupWsse(ServiceIface proxy, Bus bus) -->Line_7 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.ENCRYPT_PROPERTIES), Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_11 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO), "true")[ FD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_4 $$ setServiceContextAttributes(ctx)[ FD ]
Line_2 $$ public static void setupWsse(ServiceIface proxy, Bus bus) -->Line_6 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.CALLBACK_HANDLER), new ClientCallbackHandler())[ CD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_5 $$ ctx.put(appendIssuedTokenSuffix(SecurityConstants.USERNAME), "alice")[ FD ]
