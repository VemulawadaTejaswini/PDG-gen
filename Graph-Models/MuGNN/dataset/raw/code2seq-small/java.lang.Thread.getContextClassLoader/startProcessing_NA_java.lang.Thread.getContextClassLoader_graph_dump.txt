Line_2 $$ public void startProcessing(TestResultProcessor resultProcessor) -->Line_6 $$ resultProcessorActor = actorFactory.createBlockingActor(eventGenerator)[ CD ]
Line_2 $$ public void startProcessing(TestResultProcessor resultProcessor) -->Line_8 $$ TestClassExecutionListener threadSafeTestClassListener = resultProcessorActor.getProxy(TestClassExecutionListener.class)[ CD ]
Line_2 $$ public void startProcessing(TestResultProcessor resultProcessor) -->Line_9 $$ JUnitTestEventAdapter junitEventAdapter = new JUnitTestEventAdapter(threadSafeResultProcessor, timeProvider, idGenerator)[ CD ]
Line_2 $$ public void startProcessing(TestResultProcessor resultProcessor) -->Line_3 $$ ClassLoader applicationClassLoader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_2 $$ public void startProcessing(TestResultProcessor resultProcessor) -->Line_7 $$ TestResultProcessor threadSafeResultProcessor = resultProcessorActor.getProxy(TestResultProcessor.class)[ CD ]
Line_2 $$ public void startProcessing(TestResultProcessor resultProcessor) -->Line_5 $$ TestClassExecutionEventGenerator eventGenerator = new TestClassExecutionEventGenerator(resultProcessorChain, idGenerator, timeProvider)[ CD ]
Line_5 $$ TestClassExecutionEventGenerator eventGenerator = new TestClassExecutionEventGenerator(resultProcessorChain, idGenerator, timeProvider)-->Line_6 $$ resultProcessorActor = actorFactory.createBlockingActor(eventGenerator)[ FD ]
Line_2 $$ public void startProcessing(TestResultProcessor resultProcessor) -->Line_4 $$ TestResultProcessor resultProcessorChain = new AttachParentTestResultProcessor(resultProcessor)[ CD ]
