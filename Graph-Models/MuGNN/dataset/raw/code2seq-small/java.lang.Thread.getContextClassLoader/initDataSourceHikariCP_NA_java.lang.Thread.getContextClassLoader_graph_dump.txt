Line_12 $$ key = "jdbcUrl"-->Line_27 $$ BeanUtil.setProperty(hikariDataSource, key, value)[ FD ]
Line_9 $$ String key = (String) entry.getKey()-->Line_11 $$ if (StringUtil.equalsIgnoreCase(key, "url")) [ FD ]
Line_12 $$ key = "jdbcUrl"-->Line_14 $$ if (isPropertyLiferay(key)) [ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_35 $$ return (DataSource) hikariDataSource[ CD ]
Line_12 $$ key = "jdbcUrl"-->Line_17 $$ if (isPropertyC3PO(key)) [ FD ]
Line_29 $$ if (_log.isWarnEnabled()) -->Line_30 $$ _log.warn("Property " + key + " is an invalid HikariCP property")[ CD ]
Line_9 $$ String key = (String) entry.getKey()-->Line_12 $$ key = "jdbcUrl"[ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_6 $$ Class<?> hikariDataSourceClazz = contextClassLoader.loadClass(_HIKARICP_DATASOURCE_CLASS_NAME)[ CD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_5 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()[ CD ]
Line_6 $$ Class<?> hikariDataSourceClazz = contextClassLoader.loadClass(_HIKARICP_DATASOURCE_CLASS_NAME)-->Line_7 $$ Object hikariDataSource = hikariDataSourceClazz.newInstance()[ FD ]
Line_5 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()-->Line_6 $$ Class<?> hikariDataSourceClazz = contextClassLoader.loadClass(_HIKARICP_DATASOURCE_CLASS_NAME)[ FD ]
Line_12 $$ key = "jdbcUrl"-->Line_20 $$ if (isPropertyDBCP(key)) [ FD ]
Line_8 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) -->Line_10 $$ String value = (String) entry.getValue()[ FD ]
Line_9 $$ String key = (String) entry.getKey()-->Line_17 $$ if (isPropertyC3PO(key)) [ FD ]
Line_8 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) -->Line_9 $$ String key = (String) entry.getKey()[ FD ]
Line_9 $$ String key = (String) entry.getKey()-->Line_14 $$ if (isPropertyLiferay(key)) [ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_3 $$ testLiferayPoolProviderClass(_HIKARICP_DATASOURCE_CLASS_NAME)[ CD ]
Line_9 $$ String key = (String) entry.getKey()-->Line_20 $$ if (isPropertyDBCP(key)) [ FD ]
Line_4 $$ Thread currentThread = Thread.currentThread()-->Line_5 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()[ FD ]
Line_12 $$ key = "jdbcUrl"-->Line_23 $$ if (isPropertyTomcat(key)) [ FD ]
Line_9 $$ String key = (String) entry.getKey()-->Line_27 $$ BeanUtil.setProperty(hikariDataSource, key, value)[ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_4 $$ Thread currentThread = Thread.currentThread()[ CD ]
Line_9 $$ String key = (String) entry.getKey()-->Line_23 $$ if (isPropertyTomcat(key)) [ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_34 $$ registerConnectionPoolMetrics(new HikariConnectionPoolMetrics(hikariDataSource))[ CD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_7 $$ Object hikariDataSource = hikariDataSourceClazz.newInstance()[ CD ]
Line_10 $$ String value = (String) entry.getValue()-->Line_27 $$ BeanUtil.setProperty(hikariDataSource, key, value)[ FD ]
Line_2 $$ protected DataSource initDataSourceHikariCP(Properties properties) throws Exception -->Line_8 $$ for (Map.Entry<Object, Object> entry : properties.entrySet()) [ FD ]
Line_11 $$ if (StringUtil.equalsIgnoreCase(key, "url")) -->Line_12 $$ key = "jdbcUrl"[ CD ]
Line_7 $$ Object hikariDataSource = hikariDataSourceClazz.newInstance()-->Line_27 $$ BeanUtil.setProperty(hikariDataSource, key, value)[ FD ]
