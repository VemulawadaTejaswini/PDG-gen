Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()[ CD ]
Line_11 $$ Map<String, Object> props = stsClient.getProperties()-->Line_14 $$ props.put(SecurityConstants.ENCRYPT_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_15 $$ props.put(SecurityConstants.ENCRYPT_USERNAME, "mystskey")[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_16 $$ props.put(SecurityConstants.STS_TOKEN_USERNAME, "myclientkey")[ CD ]
Line_6 $$ if (stsWsdlLocation != null) -->Line_9 $$ stsClient.setEndpointQName(stsPort)[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_11 $$ Map<String, Object> props = stsClient.getProperties()[ CD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_19 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ FD ]
Line_11 $$ Map<String, Object> props = stsClient.getProperties()-->Line_13 $$ props.put(SecurityConstants.PASSWORD, "clarinet")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_19 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ CD ]
Line_5 $$ STSClient stsClient = new STSClient(bus)-->Line_19 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ FD ]
Line_5 $$ STSClient stsClient = new STSClient(bus)-->Line_9 $$ stsClient.setEndpointQName(stsPort)[ FD ]
Line_11 $$ Map<String, Object> props = stsClient.getProperties()-->Line_12 $$ props.put(SecurityConstants.USERNAME, "alice")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_5 $$ STSClient stsClient = new STSClient(bus)[ CD ]
Line_5 $$ STSClient stsClient = new STSClient(bus)-->Line_11 $$ Map<String, Object> props = stsClient.getProperties()[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_6 $$ if (stsWsdlLocation != null) [ CD ]
Line_11 $$ Map<String, Object> props = stsClient.getProperties()-->Line_18 $$ props.put(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO, "true")[ FD ]
Line_6 $$ if (stsWsdlLocation != null) -->Line_7 $$ stsClient.setWsdlLocation(stsWsdlLocation)[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_14 $$ props.put(SecurityConstants.ENCRYPT_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_6 $$ if (stsWsdlLocation != null) [ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_4 $$ setServiceContextAttributes(ctx)[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_18 $$ props.put(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO, "true")[ CD ]
Line_11 $$ Map<String, Object> props = stsClient.getProperties()-->Line_15 $$ props.put(SecurityConstants.ENCRYPT_USERNAME, "mystskey")[ FD ]
Line_11 $$ Map<String, Object> props = stsClient.getProperties()-->Line_16 $$ props.put(SecurityConstants.STS_TOKEN_USERNAME, "myclientkey")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_12 $$ props.put(SecurityConstants.USERNAME, "alice")[ CD ]
Line_6 $$ if (stsWsdlLocation != null) -->Line_8 $$ stsClient.setServiceQName(stsService)[ CD ]
Line_5 $$ STSClient stsClient = new STSClient(bus)-->Line_8 $$ stsClient.setServiceQName(stsService)[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_8 $$ stsClient.setServiceQName(stsService)[ FD ]
Line_5 $$ STSClient stsClient = new STSClient(bus)-->Line_7 $$ stsClient.setWsdlLocation(stsWsdlLocation)[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_17 $$ props.put(SecurityConstants.STS_TOKEN_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_7 $$ stsClient.setWsdlLocation(stsWsdlLocation)[ FD ]
Line_3 $$ Map<String, Object> ctx = ((BindingProvider) proxy).getRequestContext()-->Line_4 $$ setServiceContextAttributes(ctx)[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_13 $$ props.put(SecurityConstants.PASSWORD, "clarinet")[ CD ]
Line_11 $$ Map<String, Object> props = stsClient.getProperties()-->Line_17 $$ props.put(SecurityConstants.STS_TOKEN_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientNoCallbackHandler(ServiceIface proxy, Bus bus, String stsWsdlLocation, QName stsService, QName stsPort) -->Line_9 $$ stsClient.setEndpointQName(stsPort)[ FD ]
