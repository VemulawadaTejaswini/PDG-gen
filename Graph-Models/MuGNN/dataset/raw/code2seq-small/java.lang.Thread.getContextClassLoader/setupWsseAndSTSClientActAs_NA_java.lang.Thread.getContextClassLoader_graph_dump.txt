Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_21 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ CD ]
Line_9 $$ UsernameTokenCallbackHandler ch = new UsernameTokenCallbackHandler()-->Line_10 $$ String str = ch.getUsernameTokenString("alice", "clarinet")[ FD ]
Line_13 $$ Map<String, Object> props = stsClient.getProperties()-->Line_17 $$ props.put(SecurityConstants.ENCRYPT_USERNAME, "mystskey")[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_4 $$ ctx.put(SecurityConstants.CALLBACK_HANDLER, new ClientCallbackHandler())[ FD ]
Line_13 $$ Map<String, Object> props = stsClient.getProperties()-->Line_20 $$ props.put(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO, "true")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_13 $$ Map<String, Object> props = stsClient.getProperties()[ CD ]
Line_10 $$ String str = ch.getUsernameTokenString("alice", "clarinet")-->Line_11 $$ ctx.put(SecurityConstants.STS_TOKEN_ACT_AS, str)[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_11 $$ ctx.put(SecurityConstants.STS_TOKEN_ACT_AS, str)[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_7 $$ ctx.put(SecurityConstants.SIGNATURE_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_14 $$ props.put(SecurityConstants.USERNAME, "bob")[ CD ]
Line_13 $$ Map<String, Object> props = stsClient.getProperties()-->Line_18 $$ props.put(SecurityConstants.STS_TOKEN_USERNAME, "myclientkey")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()[ FD ]
Line_12 $$ STSClient stsClient = new STSClient(bus)-->Line_13 $$ Map<String, Object> props = stsClient.getProperties()[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_5 $$ ctx.put(SecurityConstants.ENCRYPT_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_21 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_20 $$ props.put(SecurityConstants.STS_TOKEN_USE_CERT_FOR_KEYINFO, "true")[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_15 $$ props.put(SecurityConstants.CALLBACK_HANDLER, new ClientCallbackHandler())[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_19 $$ props.put(SecurityConstants.STS_TOKEN_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_13 $$ Map<String, Object> props = stsClient.getProperties()-->Line_14 $$ props.put(SecurityConstants.USERNAME, "bob")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_6 $$ ctx.put(SecurityConstants.ENCRYPT_USERNAME, "myactaskey")[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_4 $$ ctx.put(SecurityConstants.CALLBACK_HANDLER, new ClientCallbackHandler())[ CD ]
Line_13 $$ Map<String, Object> props = stsClient.getProperties()-->Line_19 $$ props.put(SecurityConstants.STS_TOKEN_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_6 $$ ctx.put(SecurityConstants.ENCRYPT_USERNAME, "myactaskey")[ CD ]
Line_13 $$ Map<String, Object> props = stsClient.getProperties()-->Line_16 $$ props.put(SecurityConstants.ENCRYPT_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_16 $$ props.put(SecurityConstants.ENCRYPT_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_11 $$ ctx.put(SecurityConstants.STS_TOKEN_ACT_AS, str)[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_9 $$ UsernameTokenCallbackHandler ch = new UsernameTokenCallbackHandler()[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_17 $$ props.put(SecurityConstants.ENCRYPT_USERNAME, "mystskey")[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_18 $$ props.put(SecurityConstants.STS_TOKEN_USERNAME, "myclientkey")[ CD ]
Line_12 $$ STSClient stsClient = new STSClient(bus)-->Line_21 $$ ctx.put(SecurityConstants.STS_CLIENT, stsClient)[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_5 $$ ctx.put(SecurityConstants.ENCRYPT_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_10 $$ String str = ch.getUsernameTokenString("alice", "clarinet")[ CD ]
Line_13 $$ Map<String, Object> props = stsClient.getProperties()-->Line_15 $$ props.put(SecurityConstants.CALLBACK_HANDLER, new ClientCallbackHandler())[ FD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_7 $$ ctx.put(SecurityConstants.SIGNATURE_PROPERTIES, Thread.currentThread().getContextClassLoader().getResource("META-INF/clientKeystore.properties"))[ FD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_8 $$ ctx.put(SecurityConstants.SIGNATURE_USERNAME, "myclientkey")[ CD ]
Line_2 $$ public static void setupWsseAndSTSClientActAs(BindingProvider proxy, Bus bus) -->Line_12 $$ STSClient stsClient = new STSClient(bus)[ CD ]
Line_3 $$ Map<String, Object> ctx = proxy.getRequestContext()-->Line_8 $$ ctx.put(SecurityConstants.SIGNATURE_USERNAME, "myclientkey")[ FD ]
