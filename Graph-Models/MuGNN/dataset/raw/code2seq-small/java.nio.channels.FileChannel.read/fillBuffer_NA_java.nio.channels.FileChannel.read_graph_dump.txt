Line_3 $$ int total = 0-->Line_12 $$ total += nRead[ FD ]
Line_26 $$ long checksumPos = 7 + ((startDataPos / bytesPerChecksum) * checksumSize)-->Line_32 $$ checksumPos += nRead[ FD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_7 $$ int nRead = dataIn.read(buf, dataPos)[ FD ]
Line_27 $$ while (checksumBuf.hasRemaining()) -->Line_28 $$ int nRead = checksumIn.read(checksumBuf, checksumPos)[ CD ]
Line_26 $$ long checksumPos = 7 + ((startDataPos / bytesPerChecksum) * checksumSize)-->Line_28 $$ int nRead = checksumIn.read(checksumBuf, checksumPos)[ FD ]
Line_4 $$ long startDataPos = dataPos-->Line_35 $$ checksum.verifyChunkedSums(buf, checksumBuf, filename, startDataPos)[ FD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_5 $$ int startBufPos = buf.position()[ CD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_6 $$ while (buf.hasRemaining()) [ FD ]
Line_5 $$ int startBufPos = buf.position()-->Line_21 $$ buf.position(startBufPos)[ FD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_37 $$ buf.position(buf.limit())[ FD ]
Line_6 $$ while (buf.hasRemaining()) -->Line_12 $$ total += nRead[ CD ]
Line_32 $$ checksumPos += nRead-->Line_28 $$ int nRead = checksumIn.read(checksumBuf, checksumPos)[ FD ]
Line_6 $$ while (buf.hasRemaining()) -->Line_8 $$ if (nRead < 0) [ CD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_4 $$ long startDataPos = dataPos[ CD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_14 $$ if (canSkipChecksum) [ CD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_40 $$ return total[ CD ]
Line_28 $$ int nRead = checksumIn.read(checksumBuf, checksumPos)-->Line_29 $$ if (nRead < 0) [ FD ]
Line_7 $$ int nRead = dataIn.read(buf, dataPos)-->Line_29 $$ if (nRead < 0) [ FD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_6 $$ while (buf.hasRemaining()) [ CD ]
Line_14 $$ if (canSkipChecksum) -->Line_16 $$ return total[ CD ]
Line_27 $$ while (checksumBuf.hasRemaining()) -->Line_32 $$ checksumPos += nRead[ CD ]
Line_7 $$ int nRead = dataIn.read(buf, dataPos)-->Line_8 $$ if (nRead < 0) [ FD ]
Line_14 $$ if (canSkipChecksum) -->Line_15 $$ freeChecksumBufIfExists()[ CD ]
Line_7 $$ int nRead = dataIn.read(buf, dataPos)-->Line_32 $$ checksumPos += nRead[ FD ]
Line_7 $$ int nRead = dataIn.read(buf, dataPos)-->Line_12 $$ total += nRead[ FD ]
Line_12 $$ total += nRead-->Line_18 $$ if (total > 0) [ FD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_18 $$ if (total > 0) [ CD ]
Line_3 $$ int total = 0-->Line_18 $$ if (total > 0) [ FD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_21 $$ buf.position(startBufPos)[ FD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_35 $$ checksum.verifyChunkedSums(buf, checksumBuf, filename, startDataPos)[ FD ]
Line_6 $$ while (buf.hasRemaining()) -->Line_7 $$ int nRead = dataIn.read(buf, dataPos)[ CD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_20 $$ buf.limit(buf.position())[ FD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_3 $$ int total = 0[ CD ]
Line_28 $$ int nRead = checksumIn.read(checksumBuf, checksumPos)-->Line_32 $$ checksumPos += nRead[ FD ]
Line_27 $$ while (checksumBuf.hasRemaining()) -->Line_29 $$ if (nRead < 0) [ CD ]
Line_2 $$ private synchronized int fillBuffer(ByteBuffer buf, boolean canSkipChecksum) throws IOException -->Line_5 $$ int startBufPos = buf.position()[ FD ]
