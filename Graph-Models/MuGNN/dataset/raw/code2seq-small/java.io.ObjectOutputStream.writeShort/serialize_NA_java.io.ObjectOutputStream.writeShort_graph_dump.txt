Line_5 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_36 $$ return new SerializedPayload(classLoaders, content.toByteArray())[ FD ]
Line_8 $$ Class<?> targetClass = desc.forClass()-->Line_19 $$ writeUTF(targetClass.getName())[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_22 $$ ClassLoader classLoader = targetClass.getClassLoader()[ CD ]
Line_23 $$ if (classLoader == null || SYSTEM_CLASS_LOADERS.contains(classLoader)) -->Line_26 $$ writeShort(map.visitClass(targetClass))[ CD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_23 $$ if (classLoader == null || SYSTEM_CLASS_LOADERS.contains(classLoader)) [ CD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_18 $$ writeClassLoader(targetClass)[ CD ]
Line_23 $$ if (classLoader == null || SYSTEM_CLASS_LOADERS.contains(classLoader)) -->Line_24 $$ writeShort(SYSTEM_CLASS_LOADER_ID)[ CD ]
Line_3 $$ final SerializeMap map = classLoaderRegistry.newSerializeSession()-->Line_26 $$ writeShort(map.visitClass(targetClass))[ FD ]
Line_8 $$ Class<?> targetClass = desc.forClass()-->Line_22 $$ ClassLoader classLoader = targetClass.getClassLoader()[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_31 $$ objectStream.close()[ FD ]
Line_3 $$ final SerializeMap map = classLoaderRegistry.newSerializeSession()-->Line_32 $$ Map<Short, ClassLoaderDetails> classLoaders = map.getClassLoaders()[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_30 $$ objectStream.writeObject(payload)[ FD ]
Line_8 $$ Class<?> targetClass = desc.forClass()-->Line_9 $$ writeClass(targetClass)[ FD ]
Line_8 $$ Class<?> targetClass = desc.forClass()-->Line_18 $$ writeClassLoader(targetClass)[ FD ]
Line_2 $$ public SerializedPayload serialize(Object payload) -->Line_3 $$ final SerializeMap map = classLoaderRegistry.newSerializeSession()[ CD ]
Line_8 $$ Class<?> targetClass = desc.forClass()-->Line_26 $$ writeShort(map.visitClass(targetClass))[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_18 $$ writeClassLoader(targetClass)[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_9 $$ writeClass(targetClass)[ CD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_19 $$ writeUTF(targetClass.getName())[ FD ]
Line_2 $$ public SerializedPayload serialize(Object payload) -->Line_30 $$ objectStream.writeObject(payload)[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_12 $$ writeInt(cl.getInterfaces().length)[ CD ]
Line_13 $$ for (Class<?> type : cl.getInterfaces()) -->Line_14 $$ writeClass(type)[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_22 $$ ClassLoader classLoader = targetClass.getClassLoader()[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_12 $$ writeInt(cl.getInterfaces().length)[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_8 $$ Class<?> targetClass = desc.forClass()[ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_8 $$ Class<?> targetClass = desc.forClass()[ CD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_13 $$ for (Class<?> type : cl.getInterfaces()) [ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_26 $$ writeShort(map.visitClass(targetClass))[ FD ]
Line_22 $$ ClassLoader classLoader = targetClass.getClassLoader()-->Line_23 $$ if (classLoader == null || SYSTEM_CLASS_LOADERS.contains(classLoader)) [ FD ]
Line_6 $$ final ObjectOutputStream objectStream = new ObjectOutputStream(content) -->Line_19 $$ writeUTF(targetClass.getName())[ CD ]
