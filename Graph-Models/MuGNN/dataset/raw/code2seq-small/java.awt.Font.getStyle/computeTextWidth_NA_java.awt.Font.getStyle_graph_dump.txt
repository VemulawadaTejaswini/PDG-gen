Line_2 $$ private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) -->Line_9 $$ if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) [ FD ]
Line_2 $$ private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) -->Line_3 $$ int result = 0[ CD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_7 $$ SimpleTextAttributes attributes = myAttributes.get(i)[ CD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_7 $$ SimpleTextAttributes attributes = myAttributes.get(i)[ FD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_15 $$ if (fixedWidth > 0 && result < fixedWidth) [ CD ]
Line_13 $$ result += computeStringWidth(myFragments.get(i), font)-->Line_16 $$ result = fixedWidth[ FD ]
Line_2 $$ private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) -->Line_13 $$ result += computeStringWidth(myFragments.get(i), font)[ FD ]
Line_7 $$ SimpleTextAttributes attributes = myAttributes.get(i)-->Line_10 $$ font = font.deriveFont(attributes.getFontStyle(), isSmaller ? UIUtil.getFontSize(UIUtil.FontSize.SMALL) : baseSize)[ FD ]
Line_2 $$ private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) -->Line_21 $$ return result[ CD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_18 $$ if (mainTextOnly && myMainTextLastIndex >= 0 && i == myMainTextLastIndex)[ CD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_14 $$ final int fixedWidth = myFragmentPadding.get(i)[ FD ]
Line_7 $$ SimpleTextAttributes attributes = myAttributes.get(i)-->Line_8 $$ boolean isSmaller = attributes.isSmaller()[ FD ]
Line_2 $$ private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) -->Line_4 $$ int baseSize = font.getSize()[ FD ]
Line_3 $$ int result = 0-->Line_16 $$ result = fixedWidth[ FD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_8 $$ boolean isSmaller = attributes.isSmaller()[ CD ]
Line_5 $$ boolean wasSmaller = false-->Line_12 $$ wasSmaller = isSmaller[ FD ]
Line_3 $$ int result = 0-->Line_13 $$ result += computeStringWidth(myFragments.get(i), font)[ FD ]
Line_2 $$ private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) -->Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) [ CD ]
Line_9 $$ if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) -->Line_10 $$ font = font.deriveFont(attributes.getFontStyle(), isSmaller ? UIUtil.getFontSize(UIUtil.FontSize.SMALL) : baseSize)[ CD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_14 $$ final int fixedWidth = myFragmentPadding.get(i)[ CD ]
Line_15 $$ if (fixedWidth > 0 && result < fixedWidth) -->Line_16 $$ result = fixedWidth[ CD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_13 $$ result += computeStringWidth(myFragments.get(i), font)[ FD ]
Line_8 $$ boolean isSmaller = attributes.isSmaller()-->Line_12 $$ wasSmaller = isSmaller[ FD ]
Line_14 $$ final int fixedWidth = myFragmentPadding.get(i)-->Line_16 $$ result = fixedWidth[ FD ]
Line_2 $$ private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) -->Line_5 $$ boolean wasSmaller = false[ CD ]
Line_7 $$ SimpleTextAttributes attributes = myAttributes.get(i)-->Line_9 $$ if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) [ FD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_13 $$ result += computeStringWidth(myFragments.get(i), font)[ CD ]
Line_2 $$ private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) -->Line_10 $$ font = font.deriveFont(attributes.getFontStyle(), isSmaller ? UIUtil.getFontSize(UIUtil.FontSize.SMALL) : baseSize)[ FD ]
Line_2 $$ private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) -->Line_4 $$ int baseSize = font.getSize()[ CD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_12 $$ wasSmaller = isSmaller[ CD ]
Line_6 $$ for (int i = 0; i < myAttributes.size(); i++) -->Line_9 $$ if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) [ CD ]
