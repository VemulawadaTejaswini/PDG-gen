Line_2 $$ public static <T, U, A, R> Collector<T, ?, R> flatMapping(Function<? super T, Stream<? extends U>> mapper, Collector<? super U, A, R> downstream) -->Line_4 $$ return Collector.of(downstream.supplier(), ( r,  t) -> mapper.apply(t).forEach( v -> downstreamAccumulator.accept(r, v)), downstream.combiner(), downstream.finisher(), downstream.characteristics().toArray(new Collector.Characteristics[downstream.characteristics().size()]))[ CD ]
Line_2 $$ public static <T, U, A, R> Collector<T, ?, R> flatMapping(Function<? super T, Stream<? extends U>> mapper, Collector<? super U, A, R> downstream) -->Line_3 $$ BiConsumer<A, ? super U> downstreamAccumulator = downstream.accumulator()[ FD ]
Line_2 $$ public static <T, U, A, R> Collector<T, ?, R> flatMapping(Function<? super T, Stream<? extends U>> mapper, Collector<? super U, A, R> downstream) -->Line_3 $$ BiConsumer<A, ? super U> downstreamAccumulator = downstream.accumulator()[ CD ]
Line_2 $$ public static <T, U, A, R> Collector<T, ?, R> flatMapping(Function<? super T, Stream<? extends U>> mapper, Collector<? super U, A, R> downstream) -->Line_4 $$ mapper.apply(t).forEach( v -> downstreamAccumulator.accept(r, v))[ FD ]
Line_3 $$ BiConsumer<A, ? super U> downstreamAccumulator = downstream.accumulator()-->Line_4 $$ downstreamAccumulator.accept(r, v)[ FD ]
Line_2 $$ public static <T, U, A, R> Collector<T, ?, R> flatMapping(Function<? super T, Stream<? extends U>> mapper, Collector<? super U, A, R> downstream) -->Line_4 $$ return Collector.of(downstream.supplier(), ( r,  t) -> mapper.apply(t).forEach( v -> downstreamAccumulator.accept(r, v)), downstream.combiner(), downstream.finisher(), downstream.characteristics().toArray(new Collector.Characteristics[downstream.characteristics().size()]))[ FD ]
