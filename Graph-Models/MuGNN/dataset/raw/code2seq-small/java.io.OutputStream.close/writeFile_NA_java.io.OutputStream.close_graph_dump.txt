Line_10 $$ int size = length-->Line_17 $$ size -= bytesRead[ FD ]
Line_11 $$ while (size > 0) -->Line_14 $$ if (bytesRead < 0) [ CD ]
Line_7 $$ final OutputStream fileOutputStream = new FileOutputStream(file)-->Line_18 $$ fileOutputStream.write(chunk, 0, bytesRead)[ FD ]
Line_10 $$ int size = length-->Line_12 $$ final int bytesToRead = Math.min(size, chunk.length)[ FD ]
Line_2 $$ private static void writeFile(File file, int length, InputStream inputStream) throws IOException -->Line_7 $$ final OutputStream fileOutputStream = new FileOutputStream(file)[ CD ]
Line_2 $$ private static void writeFile(File file, int length, InputStream inputStream) throws IOException -->Line_4 $$ FileUtil.createIfDoesntExist(file)[ FD ]
Line_3 $$ if (length == 0) -->Line_5 $$ return[ CD ]
Line_17 $$ size -= bytesRead-->Line_11 $$ while (size > 0) [ FD ]
Line_13 $$ final int bytesRead = inputStream.read(chunk, 0, bytesToRead)-->Line_14 $$ if (bytesRead < 0) [ FD ]
Line_7 $$ final OutputStream fileOutputStream = new FileOutputStream(file)-->Line_22 $$ fileOutputStream.close()[ FD ]
Line_9 $$ final byte[] chunk = new byte[BUFFER_SIZE]-->Line_18 $$ fileOutputStream.write(chunk, 0, bytesRead)[ FD ]
Line_10 $$ int size = length-->Line_11 $$ while (size > 0) [ FD ]
Line_11 $$ while (size > 0) -->Line_18 $$ fileOutputStream.write(chunk, 0, bytesRead)[ CD ]
Line_9 $$ final byte[] chunk = new byte[BUFFER_SIZE]-->Line_13 $$ final int bytesRead = inputStream.read(chunk, 0, bytesToRead)[ FD ]
Line_11 $$ while (size > 0) -->Line_12 $$ final int bytesToRead = Math.min(size, chunk.length)[ CD ]
Line_2 $$ private static void writeFile(File file, int length, InputStream inputStream) throws IOException -->Line_3 $$ if (length == 0) [ FD ]
Line_3 $$ if (length == 0) -->Line_4 $$ FileUtil.createIfDoesntExist(file)[ CD ]
Line_13 $$ final int bytesRead = inputStream.read(chunk, 0, bytesToRead)-->Line_17 $$ size -= bytesRead[ FD ]
Line_12 $$ final int bytesToRead = Math.min(size, chunk.length)-->Line_13 $$ final int bytesRead = inputStream.read(chunk, 0, bytesToRead)[ FD ]
Line_11 $$ while (size > 0) -->Line_13 $$ final int bytesRead = inputStream.read(chunk, 0, bytesToRead)[ CD ]
Line_17 $$ size -= bytesRead-->Line_12 $$ final int bytesToRead = Math.min(size, chunk.length)[ FD ]
Line_13 $$ final int bytesRead = inputStream.read(chunk, 0, bytesToRead)-->Line_18 $$ fileOutputStream.write(chunk, 0, bytesRead)[ FD ]
Line_2 $$ private static void writeFile(File file, int length, InputStream inputStream) throws IOException -->Line_3 $$ if (length == 0) [ CD ]
Line_11 $$ while (size > 0) -->Line_17 $$ size -= bytesRead[ CD ]
Line_2 $$ private static void writeFile(File file, int length, InputStream inputStream) throws IOException -->Line_13 $$ final int bytesRead = inputStream.read(chunk, 0, bytesToRead)[ FD ]
