Line_6 $$ if (myCompressedAppendableFile != null) -->Line_8 $$ comparer = new OutputStream() [ CD ]
Line_12 $$ same = compressedStream.readByte() == (byte) b-->Line_16 $$ sameValue[0] = same[ FD ]
Line_4 $$ final boolean[] sameValue = new boolean[1]-->Line_20 $$ comparer = buildOldComparerStream(addr, sameValue)[ FD ]
Line_6 $$ if (myCompressedAppendableFile != null) -->Line_7 $$ compressedStream = myCompressedAppendableFile.getStream(addr)[ CD ]
Line_8 $$ comparer = new OutputStream() -->Line_11 $$ if (same) [ CD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_4 $$ final boolean[] sameValue = new boolean[1][ CD ]
Line_5 $$ OutputStream comparer-->Line_24 $$ comparer.close()[ FD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_5 $$ OutputStream comparer[ CD ]
Line_25 $$ if (testMode) -->Line_29 $$ descriptor.save(out, value)[ CD ]
Line_25 $$ if (testMode) -->Line_27 $$ OutputStream comparer2 = buildOldComparerStream(addr, sameValue2)[ CD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_7 $$ compressedStream = myCompressedAppendableFile.getStream(addr)[ FD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_6 $$ if (myCompressedAppendableFile != null) [ CD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_35 $$ return sameValue[0][ CD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_20 $$ comparer = buildOldComparerStream(addr, sameValue)[ FD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_23 $$ descriptor.save(out, value)[ FD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_29 $$ descriptor.save(out, value)[ FD ]
Line_6 $$ if (myCompressedAppendableFile != null) -->Line_20 $$ comparer = buildOldComparerStream(addr, sameValue)[ CD ]
Line_3 $$ final DataInputStream compressedStream-->Line_7 $$ compressedStream = myCompressedAppendableFile.getStream(addr)[ FD ]
Line_3 $$ final DataInputStream compressedStream-->Line_12 $$ same = compressedStream.readByte() == (byte) b[ FD ]
Line_25 $$ if (testMode) -->Line_30 $$ comparer2.close()[ CD ]
Line_5 $$ OutputStream comparer-->Line_8 $$ comparer = new OutputStream() [ FD ]
Line_8 $$ comparer = new OutputStream() -->Line_16 $$ sameValue[0] = same[ CD ]
Line_25 $$ if (testMode) -->Line_31 $$ if (sameValue[0] != sameValue2[0]) [ CD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_27 $$ OutputStream comparer2 = buildOldComparerStream(addr, sameValue2)[ FD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_3 $$ final DataInputStream compressedStream[ CD ]
Line_7 $$ compressedStream = myCompressedAppendableFile.getStream(addr)-->Line_12 $$ same = compressedStream.readByte() == (byte) b[ FD ]
Line_8 $$ comparer = new OutputStream() -->Line_24 $$ comparer.close()[ FD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_24 $$ comparer.close()[ CD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_23 $$ descriptor.save(out, value)[ CD ]
Line_11 $$ if (same) -->Line_12 $$ same = compressedStream.readByte() == (byte) b[ CD ]
Line_2 $$ public <Data> boolean checkBytesAreTheSame(final int addr, Data value, KeyDescriptor<Data> descriptor) throws IOException -->Line_25 $$ if (testMode) [ CD ]
