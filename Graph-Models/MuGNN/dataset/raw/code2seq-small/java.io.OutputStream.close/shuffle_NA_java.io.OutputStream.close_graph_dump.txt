Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))-->Line_9 $$ if (n < 0) [ FD ]
Line_3 $$ long bytesLeft = compressedLength-->Line_13 $$ bytesLeft -= n[ FD ]
Line_6 $$ byte[] buf = new byte[BYTES_TO_READ]-->Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))[ FD ]
Line_13 $$ bytesLeft -= n-->Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))[ FD ]
Line_2 $$ public void shuffle(MapHost host, InputStream input, long compressedLength, long decompressedLength, ShuffleClientMetrics metrics, Reporter reporter) throws IOException -->Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))[ FD ]
Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))-->Line_14 $$ metrics.inputBytes(n)[ FD ]
Line_7 $$ while (bytesLeft > 0) -->Line_12 $$ disk.write(buf, 0, n)[ CD ]
Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))-->Line_12 $$ disk.write(buf, 0, n)[ FD ]
Line_13 $$ bytesLeft -= n-->Line_7 $$ while (bytesLeft > 0) [ FD ]
Line_6 $$ byte[] buf = new byte[BYTES_TO_READ]-->Line_12 $$ disk.write(buf, 0, n)[ FD ]
Line_7 $$ while (bytesLeft > 0) -->Line_15 $$ reporter.progress()[ CD ]
Line_2 $$ public void shuffle(MapHost host, InputStream input, long compressedLength, long decompressedLength, ShuffleClientMetrics metrics, Reporter reporter) throws IOException -->Line_3 $$ long bytesLeft = compressedLength[ CD ]
Line_2 $$ public void shuffle(MapHost host, InputStream input, long compressedLength, long decompressedLength, ShuffleClientMetrics metrics, Reporter reporter) throws IOException -->Line_14 $$ metrics.inputBytes(n)[ FD ]
Line_7 $$ while (bytesLeft > 0) -->Line_14 $$ metrics.inputBytes(n)[ CD ]
Line_13 $$ bytesLeft -= n-->Line_23 $$ if (bytesLeft != 0) [ FD ]
Line_2 $$ public void shuffle(MapHost host, InputStream input, long compressedLength, long decompressedLength, ShuffleClientMetrics metrics, Reporter reporter) throws IOException -->Line_20 $$ IOUtils.cleanup(LOG, input, disk)[ FD ]
Line_2 $$ public void shuffle(MapHost host, InputStream input, long compressedLength, long decompressedLength, ShuffleClientMetrics metrics, Reporter reporter) throws IOException -->Line_23 $$ if (bytesLeft != 0) [ CD ]
Line_2 $$ public void shuffle(MapHost host, InputStream input, long compressedLength, long decompressedLength, ShuffleClientMetrics metrics, Reporter reporter) throws IOException -->Line_26 $$ this.compressedSize = compressedLength[ FD ]
Line_3 $$ long bytesLeft = compressedLength-->Line_23 $$ if (bytesLeft != 0) [ FD ]
Line_3 $$ long bytesLeft = compressedLength-->Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))[ FD ]
Line_5 $$ final int BYTES_TO_READ = 64 * 1024-->Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))[ FD ]
Line_7 $$ while (bytesLeft > 0) -->Line_9 $$ if (n < 0) [ CD ]
Line_2 $$ public void shuffle(MapHost host, InputStream input, long compressedLength, long decompressedLength, ShuffleClientMetrics metrics, Reporter reporter) throws IOException -->Line_26 $$ this.compressedSize = compressedLength[ CD ]
Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))-->Line_13 $$ bytesLeft -= n[ FD ]
Line_7 $$ while (bytesLeft > 0) -->Line_13 $$ bytesLeft -= n[ CD ]
Line_2 $$ public void shuffle(MapHost host, InputStream input, long compressedLength, long decompressedLength, ShuffleClientMetrics metrics, Reporter reporter) throws IOException -->Line_24 $$ throw new IOException("Incomplete map output received for " + getMapId() + " from " + host.getHostName() + " (" + bytesLeft + " bytes missing of " + compressedLength + ")")[ FD ]
Line_2 $$ public void shuffle(MapHost host, InputStream input, long compressedLength, long decompressedLength, ShuffleClientMetrics metrics, Reporter reporter) throws IOException -->Line_15 $$ reporter.progress()[ FD ]
Line_3 $$ long bytesLeft = compressedLength-->Line_7 $$ while (bytesLeft > 0) [ FD ]
Line_7 $$ while (bytesLeft > 0) -->Line_8 $$ int n = input.read(buf, 0, (int) Math.min(bytesLeft, BYTES_TO_READ))[ CD ]
