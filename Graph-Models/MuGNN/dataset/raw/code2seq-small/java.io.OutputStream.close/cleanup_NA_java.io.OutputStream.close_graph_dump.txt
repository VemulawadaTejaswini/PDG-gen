Line_3 $$ final Configuration conf = context.getConfiguration()-->Line_5 $$ final FileSystem fs = dir.getFileSystem(conf)[ FD ]
Line_25 $$ print(out, new Iterator<Integer>() -->Line_32 $$ return dec.times10()[ CD ]
Line_2 $$ protected void cleanup(Context context) throws IOException, InterruptedException -->Line_3 $$ final Configuration conf = context.getConfiguration()[ CD ]
Line_2 $$ protected void cleanup(Context context) throws IOException, InterruptedException -->Line_15 $$ if (conf.getInt(DIGIT_START_PROPERTY, 1) == 1) [ CD ]
Line_15 $$ if (conf.getInt(DIGIT_START_PROPERTY, 1) == 1) -->Line_17 $$ LOG.info("Writing text output to " + outfile)[ CD ]
Line_3 $$ final Configuration conf = context.getConfiguration()-->Line_7 $$ final Path hexfile = new Path(conf.get(HEX_FILE_PROPERTY))[ FD ]
Line_3 $$ final Configuration conf = context.getConfiguration()-->Line_15 $$ if (conf.getInt(DIGIT_START_PROPERTY, 1) == 1) [ FD ]
Line_25 $$ print(out, new Iterator<Integer>() -->Line_31 $$ i++[ CD ]
Line_7 $$ final Path hexfile = new Path(conf.get(HEX_FILE_PROPERTY))-->Line_8 $$ final OutputStream out = new BufferedOutputStream(fs.create(hexfile))[ FD ]
Line_15 $$ if (conf.getInt(DIGIT_START_PROPERTY, 1) == 1) -->Line_18 $$ final OutputStream outputstream = fs.create(outfile)[ CD ]
Line_5 $$ final FileSystem fs = dir.getFileSystem(conf)-->Line_18 $$ final OutputStream outputstream = fs.create(outfile)[ FD ]
Line_2 $$ protected void cleanup(Context context) throws IOException, InterruptedException -->Line_7 $$ final Path hexfile = new Path(conf.get(HEX_FILE_PROPERTY))[ CD ]
Line_5 $$ final FileSystem fs = dir.getFileSystem(conf)-->Line_8 $$ final OutputStream out = new BufferedOutputStream(fs.create(hexfile))[ FD ]
Line_15 $$ if (conf.getInt(DIGIT_START_PROPERTY, 1) == 1) -->Line_16 $$ final Path outfile = new Path(dir, "pi.txt")[ CD ]
Line_3 $$ final Configuration conf = context.getConfiguration()-->Line_4 $$ final Path dir = new Path(conf.get(WORKING_DIR_PROPERTY))[ FD ]
Line_16 $$ final Path outfile = new Path(dir, "pi.txt")-->Line_18 $$ final OutputStream outputstream = fs.create(outfile)[ FD ]
Line_25 $$ print(out, new Iterator<Integer>() -->Line_28 $$ return i < decDigits[ CD ]
Line_2 $$ protected void cleanup(Context context) throws IOException, InterruptedException -->Line_8 $$ final OutputStream out = new BufferedOutputStream(fs.create(hexfile))[ CD ]
Line_2 $$ protected void cleanup(Context context) throws IOException, InterruptedException -->Line_4 $$ final Path dir = new Path(conf.get(WORKING_DIR_PROPERTY))[ CD ]
Line_2 $$ protected void cleanup(Context context) throws IOException, InterruptedException -->Line_3 $$ final Configuration conf = context.getConfiguration()[ FD ]
Line_4 $$ final Path dir = new Path(conf.get(WORKING_DIR_PROPERTY))-->Line_5 $$ final FileSystem fs = dir.getFileSystem(conf)[ FD ]
Line_8 $$ final OutputStream out = new BufferedOutputStream(fs.create(hexfile))-->Line_12 $$ out.close()[ FD ]
Line_8 $$ final OutputStream out = new BufferedOutputStream(fs.create(hexfile))-->Line_25 $$ print(out, new Iterator<Integer>() [ FD ]
Line_23 $$ final Fraction dec = new Fraction(hex)-->Line_32 $$ return dec.times10()[ FD ]
Line_8 $$ final OutputStream out = new BufferedOutputStream(fs.create(hexfile))-->Line_37 $$ out.println("Total number of decimal digits is " + decDigits + ".")[ FD ]
Line_8 $$ final OutputStream out = new BufferedOutputStream(fs.create(hexfile))-->Line_21 $$ print(out, hex.iterator(), "Pi = 0x3.", "%02X", 5, 5)[ FD ]
Line_8 $$ final OutputStream out = new BufferedOutputStream(fs.create(hexfile))-->Line_22 $$ out.println("Total number of hexadecimal digits is " + 2 * hex.size() + ".")[ FD ]
Line_8 $$ final OutputStream out = new BufferedOutputStream(fs.create(hexfile))-->Line_10 $$ out.write(b)[ FD ]
Line_18 $$ final OutputStream outputstream = fs.create(outfile)-->Line_39 $$ outputstream.close()[ FD ]
Line_2 $$ protected void cleanup(Context context) throws IOException, InterruptedException -->Line_5 $$ final FileSystem fs = dir.getFileSystem(conf)[ CD ]
