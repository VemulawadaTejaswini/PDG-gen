Line_8 $$ final Path threadLocalFile = new Path("/myFile" + i)-->Line_16 $$ assertTrue(fs.exists(threadLocalFile))[ FD ]
Line_3 $$ for (int iter = 0; iter < 10; iter++) -->Line_4 $$ final int numThreads = 20[ CD ]
Line_3 $$ for (int iter = 0; iter < 10; iter++) -->Line_5 $$ Thread[] threads = new Thread[numThreads][ CD ]
Line_6 $$ final ConcurrentLinkedQueue<Throwable> exceptionsEncountered = new ConcurrentLinkedQueue<Throwable>()-->Line_30 $$ assertTrue("Encountered exceptions: " + StringUtils.join("\r\n", selectToString(exceptionsEncountered)), exceptionsEncountered.isEmpty())[ FD ]
Line_13 $$ OutputStream output = fs.create(threadLocalFile)-->Line_15 $$ output.close()[ FD ]
Line_2 $$ public void testMultiThreadedOperation() throws Exception -->Line_3 $$ for (int iter = 0; iter < 10; iter++) [ CD ]
Line_3 $$ for (int iter = 0; iter < 10; iter++) -->Line_30 $$ assertTrue("Encountered exceptions: " + StringUtils.join("\r\n", selectToString(exceptionsEncountered)), exceptionsEncountered.isEmpty())[ CD ]
Line_8 $$ final Path threadLocalFile = new Path("/myFile" + i)-->Line_13 $$ OutputStream output = fs.create(threadLocalFile)[ FD ]
Line_13 $$ OutputStream output = fs.create(threadLocalFile)-->Line_14 $$ output.write(5)[ FD ]
Line_7 $$ for (int i = 0; i < numThreads; i++) -->Line_8 $$ final Path threadLocalFile = new Path("/myFile" + i)[ CD ]
Line_8 $$ final Path threadLocalFile = new Path("/myFile" + i)-->Line_12 $$ assertTrue(!fs.exists(threadLocalFile))[ FD ]
Line_3 $$ for (int iter = 0; iter < 10; iter++) -->Line_31 $$ tearDown()[ CD ]
Line_6 $$ final ConcurrentLinkedQueue<Throwable> exceptionsEncountered = new ConcurrentLinkedQueue<Throwable>()-->Line_19 $$ exceptionsEncountered.add(ex)[ FD ]
Line_3 $$ for (int iter = 0; iter < 10; iter++) -->Line_32 $$ setUp()[ CD ]
Line_4 $$ final int numThreads = 20-->Line_7 $$ for (int i = 0; i < numThreads; i++) [ FD ]
Line_3 $$ for (int iter = 0; iter < 10; iter++) -->Line_6 $$ final ConcurrentLinkedQueue<Throwable> exceptionsEncountered = new ConcurrentLinkedQueue<Throwable>()[ CD ]
Line_7 $$ for (int i = 0; i < numThreads; i++) -->Line_9 $$ threads[i] = new Thread(new Runnable() [ CD ]
Line_3 $$ for (int iter = 0; iter < 10; iter++) -->Line_7 $$ for (int i = 0; i < numThreads; i++) [ CD ]
