Line_91 $$ argv = new String[3]-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_48 $$ assertTrue(" -dus prints reasonable error", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_35 $$ returned = out.toString()-->Line_89 $$ assertTrue(" -mkdir returned this is a file ", (returned.lastIndexOf("not a directory") != -1))[ FD ]
Line_109 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_72 $$ out.reset()[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_71 $$ assertEquals(" -ls on nonexistent glob returns 1", 1, ret)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_59 $$ assertEquals(" -lsr should fail ", 1, ret)[ FD ]
Line_41 $$ returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_64 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_47 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_34 $$ assertEquals(" -rmr returned 1", 1, ret)[ FD ]
Line_9 $$ Path root = new Path("/nonexistentfile")-->Line_16 $$ argv[1] = root.toUri().getPath()[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_64 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_102 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_47 $$ returned = out.toString()[ FD ]
Line_98 $$ argv = new String[3]-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_78 $$ assertTrue(" -mkdir returned File exists", (returned.lastIndexOf("File exists") != -1))[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_47 $$ returned = out.toString()-->Line_103 $$ returned = out.toString()[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_110 $$ returned = out.toString()[ FD ]
Line_5 $$ PrintStream bak = null-->Line_130 $$ if (bak != null) [ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_103 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_95 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_67 $$ out.reset()[ FD ]
Line_19 $$ String returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_95 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_53 $$ returned = out.toString()[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_120 $$ out.reset()[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_58 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_110 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_5 $$ PrintStream bak = null-->Line_10 $$ bak = System.err[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_21 $$ out.reset()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_58 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_54 $$ assertTrue(" -ls does not return Found 0 items", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_110 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_55 $$ out.reset()[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_33 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_98 $$ argv = new String[3]-->Line_113 $$ argv = new String[1][ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_60 $$ out.reset()[ FD ]
Line_9 $$ Path root = new Path("/nonexistentfile")-->Line_32 $$ argv[1] = root.toString()[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_58 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_71 $$ assertEquals(" -ls on nonexistent glob returns 1", 1, ret)[ FD ]
Line_2 $$ public void testErrOutPut() throws Exception -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_103 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_53 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_87 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_35 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_126 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_125 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_86 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_47 $$ returned = out.toString()-->Line_53 $$ returned = out.toString()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_42 $$ assertTrue(" -du prints reasonable error ", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_46 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_41 $$ returned = out.toString()-->Line_65 $$ returned = out.toString()[ FD ]
Line_28 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_41 $$ returned = out.toString()-->Line_89 $$ assertTrue(" -mkdir returned this is a file ", (returned.lastIndexOf("not a directory") != -1))[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_121 $$ argv = new String[3][ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_46 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_53 $$ returned = out.toString()-->Line_76 $$ returned = out.toString()[ FD ]
Line_19 $$ String returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_103 $$ returned = out.toString()[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_71 $$ assertEquals(" -ls on nonexistent glob returns 1", 1, ret)[ FD ]
Line_41 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_53 $$ returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_66 $$ assertTrue(" -ls does not print out anything ", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_52 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_58 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_59 $$ assertEquals(" -lsr should fail ", 1, ret)[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_28 $$ returned = out.toString()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_26 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_52 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_53 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_8 $$ FileSystem srcFs = cluster.getFileSystem()-->Line_61 $$ srcFs.mkdirs(new Path("/testdir"))[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_65 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_27 $$ assertEquals(" -rm returned 1 ", 1, ret)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_76 $$ returned = out.toString()[ FD ]
Line_65 $$ returned = out.toString()-->Line_76 $$ returned = out.toString()[ FD ]
Line_65 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_86 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_64 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_117 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_86 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_78 $$ assertTrue(" -mkdir returned File exists", (returned.lastIndexOf("File exists") != -1))[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_46 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_71 $$ assertEquals(" -ls on nonexistent glob returns 1", 1, ret)[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_113 $$ argv = new String[1]-->Line_121 $$ argv = new String[3][ FD ]
Line_103 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_41 $$ returned = out.toString()-->Line_78 $$ assertTrue(" -mkdir returned File exists", (returned.lastIndexOf("File exists") != -1))[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_35 $$ returned = out.toString()[ FD ]
Line_87 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_40 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_65 $$ returned = out.toString()[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_33 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_78 $$ assertTrue(" -mkdir returned File exists", (returned.lastIndexOf("File exists") != -1))[ FD ]
Line_109 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_80 $$ OutputStream outtmp = srcFs.create(testFile)-->Line_81 $$ outtmp.write(testFile.toString().getBytes())[ FD ]
Line_53 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_33 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_30 $$ assertTrue("rm prints reasonable error ", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_10 $$ bak = System.err-->Line_130 $$ if (bak != null) [ FD ]
Line_19 $$ String returned = out.toString()-->Line_47 $$ returned = out.toString()[ FD ]
Line_91 $$ argv = new String[3]-->Line_121 $$ argv = new String[3][ FD ]
Line_95 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_53 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_98 $$ argv = new String[3]-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_109 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_47 $$ returned = out.toString()[ FD ]
Line_79 $$ Path testFile = new Path("/testfile")-->Line_81 $$ outtmp.write(testFile.toString().getBytes())[ FD ]
Line_19 $$ String returned = out.toString()-->Line_41 $$ returned = out.toString()[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_83 $$ out.reset()[ FD ]
Line_2 $$ public void testErrOutPut() throws Exception -->Line_5 $$ PrintStream bak = null[ CD ]
Line_87 $$ returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_87 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_76 $$ returned = out.toString()-->Line_89 $$ assertTrue(" -mkdir returned this is a file ", (returned.lastIndexOf("not a directory") != -1))[ FD ]
Line_109 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_59 $$ assertEquals(" -lsr should fail ", 1, ret)[ FD ]
Line_76 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_28 $$ returned = out.toString()-->Line_53 $$ returned = out.toString()[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_65 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()[ FD ]
Line_19 $$ String returned = out.toString()-->Line_48 $$ assertTrue(" -dus prints reasonable error", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_53 $$ returned = out.toString()-->Line_87 $$ returned = out.toString()[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_110 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_19 $$ String returned = out.toString()-->Line_54 $$ assertTrue(" -ls does not return Found 0 items", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_25 $$ shell.setConf(conf)[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_59 $$ assertEquals(" -lsr should fail ", 1, ret)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ returned = out.toString()-->Line_87 $$ returned = out.toString()[ FD ]
Line_113 $$ argv = new String[1]-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_97 $$ out.reset()[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_30 $$ assertTrue("rm prints reasonable error ", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_53 $$ returned = out.toString()-->Line_78 $$ assertTrue(" -mkdir returned File exists", (returned.lastIndexOf("File exists") != -1))[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_25 $$ shell.setConf(conf)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_52 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_47 $$ returned = out.toString()-->Line_48 $$ assertTrue(" -dus prints reasonable error", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_12 $$ PrintStream tmp = new PrintStream(out)-->Line_13 $$ System.setErr(tmp)[ FD ]
Line_41 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_33 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_46 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_53 $$ returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_52 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_46 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_37 $$ out.reset()[ FD ]
Line_41 $$ returned = out.toString()-->Line_103 $$ returned = out.toString()[ FD ]
Line_2 $$ public void testErrOutPut() throws Exception -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_47 $$ returned = out.toString()-->Line_89 $$ assertTrue(" -mkdir returned this is a file ", (returned.lastIndexOf("not a directory") != -1))[ FD ]
Line_35 $$ returned = out.toString()-->Line_87 $$ returned = out.toString()[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_40 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_95 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_47 $$ returned = out.toString()-->Line_65 $$ returned = out.toString()[ FD ]
Line_28 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_89 $$ assertTrue(" -mkdir returned this is a file ", (returned.lastIndexOf("not a directory") != -1))[ FD ]
Line_91 $$ argv = new String[3]-->Line_113 $$ argv = new String[1][ FD ]
Line_47 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_40 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_46 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_76 $$ returned = out.toString()[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_64 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_47 $$ returned = out.toString()-->Line_66 $$ assertTrue(" -ls does not print out anything ", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_19 $$ String returned = out.toString()-->Line_36 $$ assertTrue("rmr prints reasonable error ", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_53 $$ returned = out.toString()-->Line_54 $$ assertTrue(" -ls does not return Found 0 items", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ returned = out.toString()-->Line_66 $$ assertTrue(" -ls does not print out anything ", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_41 $$ returned = out.toString()[ FD ]
Line_35 $$ returned = out.toString()-->Line_53 $$ returned = out.toString()[ FD ]
Line_76 $$ returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_19 $$ String returned = out.toString()[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_47 $$ returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_112 $$ out.reset()[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_65 $$ returned = out.toString()-->Line_66 $$ assertTrue(" -ls does not print out anything ", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_66 $$ assertTrue(" -ls does not print out anything ", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_41 $$ returned = out.toString()-->Line_54 $$ assertTrue(" -ls does not return Found 0 items", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_64 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_134 $$ cluster.shutdown()[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_58 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_91 $$ argv = new String[3]-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_86 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_35 $$ returned = out.toString()[ FD ]
Line_65 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_90 $$ out.reset()[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_87 $$ returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_76 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_19 $$ String returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_35 $$ returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_98 $$ argv = new String[3]-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_113 $$ argv = new String[1]-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_52 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_28 $$ returned = out.toString()-->Line_87 $$ returned = out.toString()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_71 $$ assertEquals(" -ls on nonexistent glob returns 1", 1, ret)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_8 $$ FileSystem srcFs = cluster.getFileSystem()[ FD ]
Line_19 $$ String returned = out.toString()-->Line_87 $$ returned = out.toString()[ FD ]
Line_86 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_95 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_91 $$ argv = new String[3]-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_47 $$ returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_133 $$ if (cluster != null) [ FD ]
Line_98 $$ argv = new String[3]-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_91 $$ argv = new String[3]-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_71 $$ assertEquals(" -ls on nonexistent glob returns 1", 1, ret)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_64 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_47 $$ returned = out.toString()-->Line_54 $$ assertTrue(" -ls does not return Found 0 items", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_87 $$ returned = out.toString()[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_80 $$ OutputStream outtmp = srcFs.create(testFile)-->Line_82 $$ outtmp.close()[ FD ]
Line_91 $$ argv = new String[3]-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_76 $$ returned = out.toString()-->Line_87 $$ returned = out.toString()[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_103 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_47 $$ returned = out.toString()-->Line_87 $$ returned = out.toString()[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_64 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_116 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_10 $$ bak = System.err-->Line_131 $$ System.setErr(bak)[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_65 $$ returned = out.toString()-->Line_103 $$ returned = out.toString()[ FD ]
Line_121 $$ argv = new String[3]-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_86 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_87 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_110 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_40 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_28 $$ returned = out.toString()-->Line_89 $$ assertTrue(" -mkdir returned this is a file ", (returned.lastIndexOf("not a directory") != -1))[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_65 $$ returned = out.toString()[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ returned = out.toString()-->Line_42 $$ assertTrue(" -du prints reasonable error ", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_91 $$ argv = new String[3][ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_98 $$ argv = new String[3][ FD ]
Line_28 $$ returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_41 $$ returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_117 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_5 $$ PrintStream bak = null-->Line_131 $$ System.setErr(bak)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_20 $$ assertTrue("cat does not print exceptions ", (returned.lastIndexOf("Exception") == -1))[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)[ FD ]
Line_65 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_53 $$ returned = out.toString()-->Line_66 $$ assertTrue(" -ls does not print out anything ", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_28 $$ returned = out.toString()-->Line_66 $$ assertTrue(" -ls does not print out anything ", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_52 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_103 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_65 $$ returned = out.toString()-->Line_78 $$ assertTrue(" -mkdir returned File exists", (returned.lastIndexOf("File exists") != -1))[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_59 $$ assertEquals(" -lsr should fail ", 1, ret)[ FD ]
Line_86 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_103 $$ returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_53 $$ returned = out.toString()-->Line_103 $$ returned = out.toString()[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_40 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_110 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_26 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_103 $$ returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_64 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_47 $$ returned = out.toString()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_130 $$ if (bak != null) -->Line_131 $$ System.setErr(bak)[ CD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_58 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_103 $$ returned = out.toString()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_79 $$ Path testFile = new Path("/testfile")-->Line_80 $$ OutputStream outtmp = srcFs.create(testFile)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_64 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_65 $$ returned = out.toString()[ FD ]
Line_41 $$ returned = out.toString()-->Line_48 $$ assertTrue(" -dus prints reasonable error", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_65 $$ returned = out.toString()-->Line_89 $$ assertTrue(" -mkdir returned this is a file ", (returned.lastIndexOf("not a directory") != -1))[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_76 $$ returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_47 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_91 $$ argv = new String[3]-->Line_98 $$ argv = new String[3][ FD ]
Line_65 $$ returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_59 $$ assertEquals(" -lsr should fail ", 1, ret)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_133 $$ if (cluster != null) -->Line_134 $$ cluster.shutdown()[ CD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_102 $$ ret = ToolRunner.run(shell, argv)-->Line_116 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_65 $$ returned = out.toString()-->Line_104 $$ assertTrue("no output from rename", (returned.lastIndexOf("Renamed") == -1))[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_48 $$ assertTrue(" -dus prints reasonable error", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_116 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_76 $$ returned = out.toString()-->Line_103 $$ returned = out.toString()[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_34 $$ assertEquals(" -rmr returned 1", 1, ret)[ FD ]
Line_86 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_41 $$ returned = out.toString()[ FD ]
Line_9 $$ Path root = new Path("/nonexistentfile")-->Line_23 $$ argv[1] = root.toString()[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_58 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_76 $$ returned = out.toString()[ FD ]
Line_76 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_77 $$ assertEquals(" -mkdir returned 1 ", 1, ret)[ FD ]
Line_102 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_87 $$ returned = out.toString()-->Line_103 $$ returned = out.toString()[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_47 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_76 $$ returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_35 $$ returned = out.toString()-->Line_36 $$ assertTrue("rmr prints reasonable error ", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ returned = out.toString()-->Line_76 $$ returned = out.toString()[ FD ]
Line_47 $$ returned = out.toString()-->Line_76 $$ returned = out.toString()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_54 $$ assertTrue(" -ls does not return Found 0 items", (returned.lastIndexOf("Found 0") == -1))[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_59 $$ assertEquals(" -lsr should fail ", 1, ret)[ FD ]
Line_76 $$ returned = out.toString()-->Line_78 $$ assertTrue(" -mkdir returned File exists", (returned.lastIndexOf("File exists") != -1))[ FD ]
Line_8 $$ FileSystem srcFs = cluster.getFileSystem()-->Line_80 $$ OutputStream outtmp = srcFs.create(testFile)[ FD ]
Line_64 $$ ret = ToolRunner.run(shell, argv)-->Line_71 $$ assertEquals(" -ls on nonexistent glob returns 1", 1, ret)[ FD ]
Line_35 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_24 $$ FsShell shell = new FsShell()-->Line_58 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_53 $$ returned = out.toString()-->Line_65 $$ returned = out.toString()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_8 $$ FileSystem srcFs = cluster.getFileSystem()[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_70 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_28 $$ returned = out.toString()[ FD ]
Line_28 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_34 $$ assertEquals(" -rmr returned 1", 1, ret)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_71 $$ assertEquals(" -ls on nonexistent glob returns 1", 1, ret)[ FD ]
Line_47 $$ returned = out.toString()-->Line_78 $$ assertTrue(" -mkdir returned File exists", (returned.lastIndexOf("File exists") != -1))[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_102 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_36 $$ assertTrue("rmr prints reasonable error ", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_65 $$ returned = out.toString()-->Line_87 $$ returned = out.toString()[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_96 $$ assertEquals("mv failed to rename", 1, ret)[ FD ]
Line_41 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_41 $$ returned = out.toString()-->Line_47 $$ returned = out.toString()[ FD ]
Line_87 $$ returned = out.toString()-->Line_89 $$ assertTrue(" -mkdir returned this is a file ", (returned.lastIndexOf("not a directory") != -1))[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_133 $$ if (cluster != null) [ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_105 $$ out.reset()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_70 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_103 $$ returned = out.toString()[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_53 $$ returned = out.toString()[ FD ]
Line_28 $$ returned = out.toString()-->Line_41 $$ returned = out.toString()[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_126 $$ returned = out.toString()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_47 $$ returned = out.toString()-->Line_119 $$ assertTrue("empty path specified", (returned.lastIndexOf("empty string") == -1))[ FD ]
Line_87 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_41 $$ returned = out.toString()-->Line_117 $$ returned = out.toString()[ FD ]
Line_117 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_113 $$ argv = new String[1][ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_102 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_41 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_53 $$ returned = out.toString()-->Line_89 $$ assertTrue(" -mkdir returned this is a file ", (returned.lastIndexOf("not a directory") != -1))[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_125 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_86 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_95 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_102 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_117 $$ returned = out.toString()[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_71 $$ assertEquals(" -ls on nonexistent glob returns 1", 1, ret)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_27 $$ assertEquals(" -rm returned 1 ", 1, ret)[ FD ]
Line_98 $$ argv = new String[3]-->Line_121 $$ argv = new String[3][ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_49 $$ out.reset()[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_18 $$ assertEquals(" -cat returned 1 ", 1, ret)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_43 $$ out.reset()[ FD ]
Line_41 $$ returned = out.toString()-->Line_53 $$ returned = out.toString()[ FD ]
Line_33 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_11 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_29 $$ out.reset()[ FD ]
Line_26 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_14 $$ String[] argv = new String[2]-->Line_75 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_76 $$ returned = out.toString()-->Line_126 $$ returned = out.toString()[ FD ]
Line_8 $$ FileSystem srcFs = cluster.getFileSystem()-->Line_115 $$ srcFs.mkdirs(srcFs.getHomeDirectory())[ FD ]
Line_58 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_35 $$ returned = out.toString()-->Line_42 $$ assertTrue(" -du prints reasonable error ", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_52 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_134 $$ cluster.shutdown()[ FD ]
Line_53 $$ returned = out.toString()-->Line_128 $$ assertTrue(returned.isEmpty())[ FD ]
Line_116 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_28 $$ returned = out.toString()-->Line_76 $$ returned = out.toString()[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_95 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_46 $$ ret = ToolRunner.run(shell, argv)-->Line_109 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_52 $$ ret = ToolRunner.run(shell, argv)-->Line_118 $$ assertEquals(" no error ", 0, ret)[ FD ]
Line_86 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_26 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_111 $$ assertTrue(" unix like output", (returned.lastIndexOf("No such file or") != -1))[ FD ]
Line_19 $$ String returned = out.toString()-->Line_65 $$ returned = out.toString()[ FD ]
Line_40 $$ ret = ToolRunner.run(shell, argv)-->Line_127 $$ assertEquals(" -test -d wrong result ", 1, ret)[ FD ]
Line_28 $$ returned = out.toString()-->Line_110 $$ returned = out.toString()[ FD ]
Line_28 $$ returned = out.toString()-->Line_35 $$ returned = out.toString()[ FD ]
Line_17 $$ int ret = ToolRunner.run(new FsShell(), argv)-->Line_88 $$ assertEquals(" -mkdir returned 1", 1, ret)[ FD ]
Line_19 $$ String returned = out.toString()-->Line_42 $$ assertTrue(" -du prints reasonable error ", (returned.lastIndexOf("No such file or directory") != -1))[ FD ]
Line_75 $$ ret = ToolRunner.run(shell, argv)-->Line_95 $$ ret = ToolRunner.run(shell, argv)[ FD ]
Line_28 $$ returned = out.toString()-->Line_103 $$ returned = out.toString()[ FD ]
