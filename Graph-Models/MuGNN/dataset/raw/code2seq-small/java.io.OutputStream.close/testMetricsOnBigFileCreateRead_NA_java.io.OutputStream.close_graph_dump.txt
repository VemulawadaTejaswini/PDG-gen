Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_4 $$ assertEquals(0, AzureMetricsTestUtil.getCurrentBytesWritten(getInstrumentation()))[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_7 $$ getBandwidthGaugeUpdater().suppressAutoUpdate()[ CD ]
Line_5 $$ Path filePath = new Path("/metricsTest_webResponses")-->Line_8 $$ OutputStream outputStream = fs.create(filePath)[ FD ]
Line_3 $$ long base = getBaseWebResponses()-->Line_11 $$ logOpResponseCount("Creating a 100 MB file", base)[ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_18 $$ long uploadLatency = AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(), WASB_UPLOAD_LATENCY)[ CD ]
Line_8 $$ OutputStream outputStream = fs.create(filePath)-->Line_10 $$ outputStream.close()[ FD ]
Line_6 $$ final int FILE_SIZE = 100 * 1024 * 1024-->Line_32 $$ assertEquals(FILE_SIZE, totalBytesRead)[ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_33 $$ long downloadRate = AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(), WASB_DOWNLOAD_RATE)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_36 $$ System.out.println("Download latency: " + downloadLatency)[ CD ]
Line_22 $$ int count = 0-->Line_27 $$ assertEquals(FILE_SIZE, count)[ FD ]
Line_12 $$ base = assertWebResponsesInRange(base, 20, 50)-->Line_29 $$ base = assertWebResponsesInRange(base, 20, 40)[ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_19 $$ System.out.println("Upload latency: " + uploadLatency)[ CD ]
Line_8 $$ OutputStream outputStream = fs.create(filePath)-->Line_9 $$ outputStream.write(new byte[FILE_SIZE])[ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_11 $$ logOpResponseCount("Creating a 100 MB file", base)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_13 $$ getBandwidthGaugeUpdater().triggerUpdate(true)[ CD ]
Line_21 $$ InputStream inputStream = fs.open(filePath)-->Line_23 $$ while (inputStream.read() >= 0) [ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_3 $$ long base = getBaseWebResponses()[ CD ]
Line_22 $$ int count = 0-->Line_24 $$ count++[ FD ]
Line_21 $$ InputStream inputStream = fs.open(filePath)-->Line_26 $$ inputStream.close()[ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_22 $$ int count = 0[ CD ]
Line_6 $$ final int FILE_SIZE = 100 * 1024 * 1024-->Line_27 $$ assertEquals(FILE_SIZE, count)[ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_14 $$ long totalBytesWritten = AzureMetricsTestUtil.getCurrentTotalBytesWritten(getInstrumentation())[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_23 $$ while (inputStream.read() >= 0) [ CD ]
Line_12 $$ base = assertWebResponsesInRange(base, 20, 50)-->Line_28 $$ logOpResponseCount("Reading a 100 MB file", base)[ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_29 $$ base = assertWebResponsesInRange(base, 20, 40)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_27 $$ assertEquals(FILE_SIZE, count)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_16 $$ long uploadRate = AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(), WASB_UPLOAD_RATE)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_28 $$ logOpResponseCount("Reading a 100 MB file", base)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_34 $$ System.out.println("Download rate: " + downloadRate + " bytes/second.")[ CD ]
Line_23 $$ while (inputStream.read() >= 0) -->Line_24 $$ count++[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_17 $$ System.out.println("Upload rate: " + uploadRate + " bytes/second.")[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_8 $$ OutputStream outputStream = fs.create(filePath)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_10 $$ outputStream.close()[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_32 $$ assertEquals(FILE_SIZE, totalBytesRead)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_15 $$ assertTrue("The total bytes written  " + totalBytesWritten + " is pretty far from the expected range of around " + FILE_SIZE + " bytes plus a little overhead.", totalBytesWritten >= FILE_SIZE && totalBytesWritten < (FILE_SIZE * 2))[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_37 $$ assertTrue("The download latency " + downloadLatency + " should be greater than zero now that I've just downloaded a file.", downloadLatency > 0)[ CD ]
Line_3 $$ long base = getBaseWebResponses()-->Line_28 $$ logOpResponseCount("Reading a 100 MB file", base)[ FD ]
Line_3 $$ long base = getBaseWebResponses()-->Line_12 $$ base = assertWebResponsesInRange(base, 20, 50)[ FD ]
Line_31 $$ long totalBytesRead = AzureMetricsTestUtil.getCurrentTotalBytesRead(getInstrumentation())-->Line_32 $$ assertEquals(FILE_SIZE, totalBytesRead)[ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_35 $$ long downloadLatency = AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(), WASB_DOWNLOAD_LATENCY)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_31 $$ long totalBytesRead = AzureMetricsTestUtil.getCurrentTotalBytesRead(getInstrumentation())[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_12 $$ base = assertWebResponsesInRange(base, 20, 50)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_9 $$ outputStream.write(new byte[FILE_SIZE])[ CD ]
Line_5 $$ Path filePath = new Path("/metricsTest_webResponses")-->Line_21 $$ InputStream inputStream = fs.open(filePath)[ FD ]
Line_3 $$ long base = getBaseWebResponses()-->Line_29 $$ base = assertWebResponsesInRange(base, 20, 40)[ FD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_26 $$ inputStream.close()[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_20 $$ assertTrue("The upload latency " + uploadLatency + " should be greater than zero now that I've just uploaded a file.", uploadLatency > 0)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_5 $$ Path filePath = new Path("/metricsTest_webResponses")[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_6 $$ final int FILE_SIZE = 100 * 1024 * 1024[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_30 $$ getBandwidthGaugeUpdater().triggerUpdate(false)[ CD ]
Line_2 $$ public void testMetricsOnBigFileCreateRead() throws Exception -->Line_21 $$ InputStream inputStream = fs.open(filePath)[ CD ]
