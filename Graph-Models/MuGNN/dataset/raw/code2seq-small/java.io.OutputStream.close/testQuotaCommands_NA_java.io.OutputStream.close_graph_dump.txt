Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_110 $$ runCommand(admin, args, true)[ FD ]
Line_38 $$ boolean hasException = false-->Line_53 $$ assertTrue(hasException)[ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_90 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_56 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_90 $$ c = dfs.getContentSummary(childDir0)-->Line_92 $$ assertEquals(c.getQuota(), 1)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_116 $$ runCommand(admin, args, true)[ FD ]
Line_3 $$ final Configuration conf = new HdfsConfiguration()-->Line_5 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, DEFAULT_BLOCK_SIZE)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_97 $$ runCommand(admin, true, "-setSpaceQuota", "1g", nonExistentPath.toString())[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_49 $$ fout = dfs.create(childFile1)[ FD ]
Line_15 $$ final long spaceQuota = fileLen * replication * 15 / 8-->Line_57 $$ assertEquals(c.getSpaceQuota(), spaceQuota)[ FD ]
Line_49 $$ fout = dfs.create(childFile1)-->Line_64 $$ fout.close()[ FD ]
Line_131 $$ DFSAdmin userAdmin = new DFSAdmin(conf)-->Line_134 $$ runCommand(userAdmin, true, "-setSpaceQuota", "1g", args2[2])[ FD ]
Line_59 $$ c = dfs.getContentSummary(childDir0)-->Line_72 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_81 $$ args = new String[] -->Line_82 $$ runCommand(admin, args, false)[ FD ]
Line_93 $$ Path nonExistentPath = new Path("/test1")-->Line_109 $$ args[1] = nonExistentPath.toString()[ FD ]
Line_81 $$ args = new String[] -->Line_119 $$ runCommand(admin, args, true)[ FD ]
Line_42 $$ hasException = true-->Line_89 $$ assertTrue(hasException)[ FD ]
Line_42 $$ hasException = true-->Line_83 $$ hasException = false[ FD ]
Line_71 $$ c = dfs.getContentSummary(parent)-->Line_90 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_85 $$ assertFalse(dfs.mkdirs(new Path(childDir0, "in")))[ FD ]
Line_75 $$ args = new String[] -->Line_116 $$ runCommand(admin, args, true)[ FD ]
Line_7 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_8 $$ final FileSystem fs = cluster.getFileSystem()[ FD ]
Line_131 $$ DFSAdmin userAdmin = new DFSAdmin(conf)-->Line_133 $$ runCommand(userAdmin, args2, true)[ FD ]
Line_125 $$ final String username = "userxx"-->Line_130 $$ assertEquals("Not running as new user", username, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_75 $$ args = new String[] -->Line_107 $$ runCommand(admin, args, true)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_119 $$ runCommand(admin, args, true)[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_31 $$ assertEquals(c.getSpaceQuota(), spaceQuota)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_58 $$ runCommand(admin, new String[] [ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_35 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_54 $$ runCommand(admin, new String[] [ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_72 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_59 $$ c = dfs.getContentSummary(childDir0)-->Line_71 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_81 $$ args = new String[] -->Line_127 $$ final String[] args2 = args.clone()[ FD ]
Line_2 $$ public void testQuotaCommands() throws Exception -->Line_7 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()[ CD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_72 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_13 $$ final int fileLen = 1024-->Line_74 $$ DFSTestUtil.createFile(dfs, childFile1, fileLen, replication, 0)[ FD ]
Line_126 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting(username, new String[] -->Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
Line_2 $$ public void testQuotaCommands() throws Exception -->Line_6 $$ conf.setInt(DFSConfigKeys.DFS_CONTENT_SUMMARY_LIMIT_KEY, 2)[ CD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_91 $$ assertEquals(c.getDirectoryCount() + c.getFileCount(), 1)[ FD ]
Line_127 $$ final String[] args2 = args.clone()-->Line_133 $$ runCommand(userAdmin, args2, true)[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_55 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_71 $$ c = dfs.getContentSummary(parent)-->Line_73 $$ assertEquals(c.getSpaceQuota(), -1)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_32 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_75 $$ args = new String[] [ FD ]
Line_45 $$ OutputStream fout-->Line_63 $$ fout.write(new byte[fileLen])[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_21 $$ assertEquals(2L << 40, dfs.getContentSummary(parent).getSpaceQuota())[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_116 $$ runCommand(admin, args, true)[ FD ]
Line_23 $$ final Path childDir0 = new Path(parent, "data0")-->Line_58 $$ runCommand(admin, new String[] [ FD ]
Line_51 $$ hasException = true-->Line_53 $$ assertTrue(hasException)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_76 $$ runCommand(admin, args, false)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_54 $$ runCommand(admin, new String[] [ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_71 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_46 $$ final Path childFile1 = new Path(parent, "datafile1")-->Line_49 $$ fout = dfs.create(childFile1)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_143 $$ runCommand(admin, true, "-clrQuota", "/")[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_35 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_61 $$ fout = dfs.create(childFile1, replication)-->Line_63 $$ fout.write(new byte[fileLen])[ FD ]
Line_46 $$ final Path childFile1 = new Path(parent, "datafile1")-->Line_61 $$ fout = dfs.create(childFile1, replication)[ FD ]
Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() -->Line_132 $$ args2[1] = "100"[ CD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_107 $$ runCommand(admin, args, true)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_146 $$ runCommand(admin, false, "-clrSpaceQuota", parent.toString())[ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_71 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_81 $$ args = new String[] -->Line_107 $$ runCommand(admin, args, true)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_114 $$ runCommand(admin, true, "-setSpaceQuota", "0", args[2])[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_33 $$ assertEquals(c.getFileCount() + c.getDirectoryCount(), 1)[ FD ]
Line_14 $$ final short replication = 5-->Line_155 $$ DFSTestUtil.createFile(fs, childFile2, fileLen2, replication, 0)[ FD ]
Line_93 $$ Path nonExistentPath = new Path("/test1")-->Line_94 $$ assertFalse(dfs.exists(nonExistentPath))[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_34 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_102 $$ assertTrue(dfs.isFile(childFile0))[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_104 $$ runCommand(admin, args, true)[ FD ]
Line_75 $$ args = new String[] -->Line_110 $$ runCommand(admin, args, true)[ FD ]
Line_49 $$ fout = dfs.create(childFile1)-->Line_67 $$ IOUtils.closeStream(fout)[ FD ]
Line_95 $$ args = new String[] -->Line_127 $$ final String[] args2 = args.clone()[ FD ]
Line_18 $$ String[] args = new String[] -->Line_95 $$ args = new String[] [ FD ]
Line_51 $$ hasException = true-->Line_87 $$ hasException = true[ FD ]
Line_38 $$ boolean hasException = false-->Line_89 $$ assertTrue(hasException)[ FD ]
Line_42 $$ hasException = true-->Line_178 $$ assertTrue(hasException)[ FD ]
Line_49 $$ fout = dfs.create(childFile1)-->Line_61 $$ fout = dfs.create(childFile1, replication)[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_71 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_59 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_96 $$ runCommand(admin, args, true)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_135 $$ String[] args3 = new String[] [ FD ]
Line_59 $$ c = dfs.getContentSummary(childDir0)-->Line_92 $$ assertEquals(c.getQuota(), 1)[ FD ]
Line_13 $$ final int fileLen = 1024-->Line_77 $$ runCommand(admin, false, "-setSpaceQuota", Integer.toString(fileLen), args[2])[ FD ]
Line_15 $$ final long spaceQuota = fileLen * replication * 15 / 8-->Line_22 $$ runCommand(admin, false, "-setSpaceQuota", Long.toString(spaceQuota), parent.toString())[ FD ]
Line_47 $$ hasException = false-->Line_51 $$ hasException = true[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_35 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_105 $$ runCommand(admin, true, "-setSpaceQuota", "1t", args[1])[ FD ]
Line_95 $$ args = new String[] -->Line_122 $$ runCommand(admin, args, true)[ FD ]
Line_95 $$ args = new String[] -->Line_119 $$ runCommand(admin, args, true)[ FD ]
Line_51 $$ hasException = true-->Line_163 $$ assertTrue(hasException)[ FD ]
Line_112 $$ args = new String[] -->Line_122 $$ runCommand(admin, args, true)[ FD ]
Line_135 $$ String[] args3 = new String[] -->Line_136 $$ runCommand(userAdmin, args3, true)[ FD ]
Line_87 $$ hasException = true-->Line_178 $$ assertTrue(hasException)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_117 $$ runCommand(admin, true, "-setSpaceQuota", args[1], args[2])[ FD ]
Line_71 $$ c = dfs.getContentSummary(parent)-->Line_72 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_75 $$ args = new String[] -->Line_81 $$ args = new String[] [ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_168 $$ runCommand(admin, false, "-setSpaceQuota", Long.toString(spaceQuota2), "/")[ FD ]
Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() -->Line_136 $$ runCommand(userAdmin, args3, true)[ CD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_71 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_21 $$ assertEquals(2L << 40, dfs.getContentSummary(parent).getSpaceQuota())[ FD ]
Line_8 $$ final FileSystem fs = cluster.getFileSystem()-->Line_159 $$ DFSTestUtil.createFile(fs, childFile3, fileLen2, replication, 0)[ FD ]
Line_25 $$ final Path childFile0 = new Path(parent, "datafile0")-->Line_102 $$ assertTrue(dfs.isFile(childFile0))[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_90 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_95 $$ args = new String[] -->Line_112 $$ args = new String[] [ FD ]
Line_61 $$ fout = dfs.create(childFile1, replication)-->Line_64 $$ fout.close()[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_59 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_120 $$ runCommand(admin, true, "-setSpaceQuota", args[1], args[2])[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_30 $$ assertEquals(c.getSpaceConsumed(), fileLen * replication)[ FD ]
Line_87 $$ hasException = true-->Line_163 $$ assertTrue(hasException)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_17 $$ assertTrue(dfs.mkdirs(parent))[ FD ]
Line_2 $$ public void testQuotaCommands() throws Exception -->Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs[ CD ]
Line_7 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_179 $$ assertEquals(4, cluster.getNamesystem().getFSDirectory().getYieldCount())[ FD ]
Line_8 $$ final FileSystem fs = cluster.getFileSystem()-->Line_155 $$ DFSTestUtil.createFile(fs, childFile2, fileLen2, replication, 0)[ FD ]
Line_95 $$ args = new String[] -->Line_96 $$ runCommand(admin, args, true)[ FD ]
Line_38 $$ boolean hasException = false-->Line_83 $$ hasException = false[ FD ]
Line_47 $$ hasException = false-->Line_178 $$ assertTrue(hasException)[ FD ]
Line_95 $$ args = new String[] -->Line_113 $$ runCommand(admin, args, true)[ FD ]
Line_38 $$ boolean hasException = false-->Line_178 $$ assertTrue(hasException)[ FD ]
Line_14 $$ final short replication = 5-->Line_159 $$ DFSTestUtil.createFile(fs, childFile3, fileLen2, replication, 0)[ FD ]
Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() -->Line_130 $$ assertEquals("Not running as new user", username, UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
Line_51 $$ hasException = true-->Line_178 $$ assertTrue(hasException)[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_32 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_42 $$ hasException = true-->Line_53 $$ assertTrue(hasException)[ FD ]
Line_2 $$ public void testQuotaCommands() throws Exception -->Line_8 $$ final FileSystem fs = cluster.getFileSystem()[ CD ]
Line_95 $$ args = new String[] -->Line_116 $$ runCommand(admin, args, true)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_167 $$ runCommand(admin, false, "-clrSpaceQuota", "/")[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_141 $$ runCommand(admin, true, "-clrQuota", "/")[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_70 $$ runCommand(admin, false, "-clrSpaceQuota", parent.toString())[ FD ]
Line_75 $$ args = new String[] -->Line_119 $$ runCommand(admin, args, true)[ FD ]
Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() -->Line_138 $$ return null[ CD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_60 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_14 $$ final short replication = 5-->Line_174 $$ DFSTestUtil.createFile(fs, childFile5, fileLen2, replication, 0)[ FD ]
Line_42 $$ hasException = true-->Line_51 $$ hasException = true[ FD ]
Line_75 $$ args = new String[] -->Line_122 $$ runCommand(admin, args, true)[ FD ]
Line_59 $$ c = dfs.getContentSummary(childDir0)-->Line_90 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_59 $$ c = dfs.getContentSummary(childDir0)-->Line_60 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_36 $$ assertEquals(c.getSpaceConsumed(), fileLen * replication)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_55 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_81 $$ args = new String[] -->Line_112 $$ args = new String[] [ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_73 $$ assertEquals(c.getSpaceQuota(), -1)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_22 $$ runCommand(admin, false, "-setSpaceQuota", Long.toString(spaceQuota), parent.toString())[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_24 $$ assertTrue(dfs.mkdirs(childDir0))[ FD ]
Line_112 $$ args = new String[] -->Line_113 $$ runCommand(admin, args, true)[ FD ]
Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() -->Line_131 $$ DFSAdmin userAdmin = new DFSAdmin(conf)[ CD ]
Line_83 $$ hasException = false-->Line_178 $$ assertTrue(hasException)[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_57 $$ assertEquals(c.getSpaceQuota(), spaceQuota)[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_56 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_111 $$ runCommand(admin, true, "-clrSpaceQuota", args[1])[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_92 $$ assertEquals(c.getQuota(), 1)[ FD ]
Line_75 $$ args = new String[] -->Line_104 $$ runCommand(admin, args, true)[ FD ]
Line_2 $$ public void testQuotaCommands() throws Exception -->Line_4 $$ final int DEFAULT_BLOCK_SIZE = 512[ CD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_71 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_81 $$ args = new String[] -->Line_116 $$ runCommand(admin, args, true)[ FD ]
Line_38 $$ boolean hasException = false-->Line_44 $$ assertTrue(hasException)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_156 $$ runCommand(admin, false, "-setSpaceQuota", Long.toString(spaceQuota2), childDir2.toString())[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_36 $$ assertEquals(c.getSpaceConsumed(), fileLen * replication)[ FD ]
Line_75 $$ args = new String[] -->Line_113 $$ runCommand(admin, args, true)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_124 $$ runCommand(admin, true, "-setSpaceQuota", (Long.MAX_VALUE / 1024 / 1024 + 1024) + "m", args[2])[ FD ]
Line_59 $$ c = dfs.getContentSummary(childDir0)-->Line_91 $$ assertEquals(c.getDirectoryCount() + c.getFileCount(), 1)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_112 $$ args = new String[] [ FD ]
Line_38 $$ boolean hasException = false-->Line_42 $$ hasException = true[ FD ]
Line_18 $$ String[] args = new String[] -->Line_107 $$ runCommand(admin, args, true)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_69 $$ dfs.delete(childFile1, false)[ FD ]
Line_42 $$ hasException = true-->Line_44 $$ assertTrue(hasException)[ FD ]
Line_45 $$ OutputStream fout-->Line_64 $$ fout.close()[ FD ]
Line_7 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_181 $$ cluster.shutdown()[ FD ]
Line_46 $$ final Path childFile1 = new Path(parent, "datafile1")-->Line_69 $$ dfs.delete(childFile1, false)[ FD ]
Line_47 $$ hasException = false-->Line_89 $$ assertTrue(hasException)[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_59 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_112 $$ args = new String[] -->Line_119 $$ runCommand(admin, args, true)[ FD ]
Line_75 $$ args = new String[] -->Line_96 $$ runCommand(admin, args, true)[ FD ]
Line_2 $$ public void testQuotaCommands() throws Exception -->Line_9 $$ assertTrue("Not a HDFS: " + fs.getUri(), fs instanceof DistributedFileSystem)[ CD ]
Line_75 $$ args = new String[] -->Line_112 $$ args = new String[] [ FD ]
Line_51 $$ hasException = true-->Line_89 $$ assertTrue(hasException)[ FD ]
Line_71 $$ c = dfs.getContentSummary(parent)-->Line_91 $$ assertEquals(c.getDirectoryCount() + c.getFileCount(), 1)[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_57 $$ assertEquals(c.getSpaceQuota(), spaceQuota)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_90 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_81 $$ args = new String[] -->Line_113 $$ runCommand(admin, args, true)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_81 $$ args = new String[] [ FD ]
Line_46 $$ final Path childFile1 = new Path(parent, "datafile1")-->Line_74 $$ DFSTestUtil.createFile(dfs, childFile1, fileLen, replication, 0)[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_55 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_20 $$ runCommand(admin, false, "-setSpaceQuota", "2t", parent.toString())[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_108 $$ runCommand(admin, true, "-clrSpaceQuota", args[1])[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_20 $$ runCommand(admin, false, "-setSpaceQuota", "2t", parent.toString())[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_55 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_71 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_122 $$ runCommand(admin, args, true)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_146 $$ runCommand(admin, false, "-clrSpaceQuota", parent.toString())[ FD ]
Line_15 $$ final long spaceQuota = fileLen * replication * 15 / 8-->Line_31 $$ assertEquals(c.getSpaceQuota(), spaceQuota)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_82 $$ runCommand(admin, args, false)[ FD ]
Line_81 $$ args = new String[] -->Line_110 $$ runCommand(admin, args, true)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_144 $$ runCommand(admin, false, "-clrSpaceQuota", "/")[ FD ]
Line_81 $$ args = new String[] -->Line_96 $$ runCommand(admin, args, true)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_55 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_154 $$ runCommand(admin, false, "-clrSpaceQuota", childDir2.toString())[ FD ]
Line_14 $$ final short replication = 5-->Line_61 $$ fout = dfs.create(childFile1, replication)[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_91 $$ assertEquals(c.getDirectoryCount() + c.getFileCount(), 1)[ FD ]
Line_23 $$ final Path childDir0 = new Path(parent, "data0")-->Line_81 $$ args = new String[] [ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_70 $$ runCommand(admin, false, "-clrSpaceQuota", parent.toString())[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_73 $$ assertEquals(c.getSpaceQuota(), -1)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_148 $$ assertTrue(dfs.mkdirs(childDir2))[ FD ]
Line_8 $$ final FileSystem fs = cluster.getFileSystem()-->Line_9 $$ assertTrue("Not a HDFS: " + fs.getUri(), fs instanceof DistributedFileSystem)[ FD ]
Line_8 $$ final FileSystem fs = cluster.getFileSystem()-->Line_26 $$ DFSTestUtil.createFile(fs, childFile0, fileLen, replication, 0)[ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_59 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_2 $$ public void testQuotaCommands() throws Exception -->Line_5 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, DEFAULT_BLOCK_SIZE)[ CD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_73 $$ assertEquals(c.getSpaceQuota(), -1)[ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_91 $$ assertEquals(c.getDirectoryCount() + c.getFileCount(), 1)[ FD ]
Line_13 $$ final int fileLen = 1024-->Line_26 $$ DFSTestUtil.createFile(fs, childFile0, fileLen, replication, 0)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_77 $$ runCommand(admin, false, "-setSpaceQuota", Integer.toString(fileLen), args[2])[ FD ]
Line_38 $$ boolean hasException = false-->Line_47 $$ hasException = false[ FD ]
Line_4 $$ final int DEFAULT_BLOCK_SIZE = 512-->Line_5 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, DEFAULT_BLOCK_SIZE)[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_33 $$ assertEquals(c.getFileCount() + c.getDirectoryCount(), 1)[ FD ]
Line_75 $$ args = new String[] -->Line_95 $$ args = new String[] [ FD ]
Line_38 $$ boolean hasException = false-->Line_51 $$ hasException = true[ FD ]
Line_18 $$ String[] args = new String[] -->Line_104 $$ runCommand(admin, args, true)[ FD ]
Line_95 $$ args = new String[] -->Line_110 $$ runCommand(admin, args, true)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_75 $$ args = new String[] [ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_57 $$ assertEquals(c.getSpaceQuota(), spaceQuota)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_127 $$ final String[] args2 = args.clone()[ FD ]
Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() -->Line_137 $$ runCommand(userAdmin, true, "-clrSpaceQuota", args3[1])[ CD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_34 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_74 $$ DFSTestUtil.createFile(dfs, childFile1, fileLen, replication, 0)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_169 $$ runCommand(admin, false, "-clrSpaceQuota", "/")[ FD ]
Line_75 $$ args = new String[] -->Line_127 $$ final String[] args2 = args.clone()[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_56 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_37 $$ final Path childDir1 = new Path(parent, "data1")-->Line_40 $$ assertFalse(dfs.mkdirs(childDir1))[ FD ]
Line_90 $$ c = dfs.getContentSummary(childDir0)-->Line_91 $$ assertEquals(c.getDirectoryCount() + c.getFileCount(), 1)[ FD ]
Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() -->Line_134 $$ runCommand(userAdmin, true, "-setSpaceQuota", "1g", args2[2])[ CD ]
Line_47 $$ hasException = false-->Line_163 $$ assertTrue(hasException)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_40 $$ assertFalse(dfs.mkdirs(childDir1))[ FD ]
Line_45 $$ OutputStream fout-->Line_61 $$ fout = dfs.create(childFile1, replication)[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_90 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_166 $$ runCommand(admin, true, "-clrQuota", "/")[ FD ]
Line_14 $$ final short replication = 5-->Line_74 $$ DFSTestUtil.createFile(dfs, childFile1, fileLen, replication, 0)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_61 $$ fout = dfs.create(childFile1, replication)[ FD ]
Line_112 $$ args = new String[] -->Line_116 $$ runCommand(admin, args, true)[ FD ]
Line_71 $$ c = dfs.getContentSummary(parent)-->Line_92 $$ assertEquals(c.getQuota(), 1)[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_60 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_19 $$ runCommand(admin, args, false)[ FD ]
Line_2 $$ public void testQuotaCommands() throws Exception -->Line_3 $$ final Configuration conf = new HdfsConfiguration()[ CD ]
Line_49 $$ fout = dfs.create(childFile1)-->Line_63 $$ fout.write(new byte[fileLen])[ FD ]
Line_38 $$ boolean hasException = false-->Line_163 $$ assertTrue(hasException)[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_91 $$ assertEquals(c.getDirectoryCount() + c.getFileCount(), 1)[ FD ]
Line_3 $$ final Configuration conf = new HdfsConfiguration()-->Line_6 $$ conf.setInt(DFSConfigKeys.DFS_CONTENT_SUMMARY_LIMIT_KEY, 2)[ FD ]
Line_45 $$ OutputStream fout-->Line_49 $$ fout = dfs.create(childFile1)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_76 $$ runCommand(admin, args, false)[ FD ]
Line_81 $$ args = new String[] -->Line_95 $$ args = new String[] [ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_153 $$ runCommand(admin, false, "-setSpaceQuota", Long.toString(spaceQuota2), childDir2.toString())[ FD ]
Line_23 $$ final Path childDir0 = new Path(parent, "data0")-->Line_59 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_75 $$ args = new String[] -->Line_82 $$ runCommand(admin, args, false)[ FD ]
Line_2 $$ public void testQuotaCommands() throws Exception -->Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)[ CD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_119 $$ runCommand(admin, args, true)[ FD ]
Line_14 $$ final short replication = 5-->Line_26 $$ DFSTestUtil.createFile(fs, childFile0, fileLen, replication, 0)[ FD ]
Line_23 $$ final Path childDir0 = new Path(parent, "data0")-->Line_90 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_60 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_92 $$ assertEquals(c.getQuota(), 1)[ FD ]
Line_42 $$ hasException = true-->Line_47 $$ hasException = false[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_18 $$ String[] args = new String[] [ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)[ FD ]
Line_61 $$ fout = dfs.create(childFile1, replication)-->Line_67 $$ IOUtils.closeStream(fout)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_123 $$ runCommand(admin, true, "-setSpaceQuota", args[1], args[2])[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_145 $$ runCommand(admin, new String[] [ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_72 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_145 $$ runCommand(admin, new String[] [ FD ]
Line_18 $$ String[] args = new String[] -->Line_110 $$ runCommand(admin, args, true)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_17 $$ assertTrue(dfs.mkdirs(parent))[ FD ]
Line_131 $$ DFSAdmin userAdmin = new DFSAdmin(conf)-->Line_137 $$ runCommand(userAdmin, true, "-clrSpaceQuota", args3[1])[ FD ]
Line_8 $$ final FileSystem fs = cluster.getFileSystem()-->Line_174 $$ DFSTestUtil.createFile(fs, childFile5, fileLen2, replication, 0)[ FD ]
Line_47 $$ hasException = false-->Line_87 $$ hasException = true[ FD ]
Line_18 $$ String[] args = new String[] -->Line_112 $$ args = new String[] [ FD ]
Line_45 $$ OutputStream fout-->Line_67 $$ IOUtils.closeStream(fout)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_22 $$ runCommand(admin, false, "-setSpaceQuota", Long.toString(spaceQuota), parent.toString())[ FD ]
Line_18 $$ String[] args = new String[] -->Line_113 $$ runCommand(admin, args, true)[ FD ]
Line_42 $$ hasException = true-->Line_163 $$ assertTrue(hasException)[ FD ]
Line_47 $$ hasException = false-->Line_53 $$ assertTrue(hasException)[ FD ]
Line_83 $$ hasException = false-->Line_163 $$ assertTrue(hasException)[ FD ]
Line_93 $$ Path nonExistentPath = new Path("/test1")-->Line_95 $$ args = new String[] [ FD ]
Line_83 $$ hasException = false-->Line_89 $$ assertTrue(hasException)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_113 $$ runCommand(admin, args, true)[ FD ]
Line_83 $$ hasException = false-->Line_87 $$ hasException = true[ FD ]
Line_59 $$ c = dfs.getContentSummary(childDir0)-->Line_73 $$ assertEquals(c.getSpaceQuota(), -1)[ FD ]
Line_75 $$ args = new String[] -->Line_76 $$ runCommand(admin, args, false)[ FD ]
Line_125 $$ final String username = "userxx"-->Line_126 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting(username, new String[] [ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_92 $$ assertEquals(c.getQuota(), 1)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_82 $$ runCommand(admin, args, false)[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_36 $$ assertEquals(c.getSpaceConsumed(), fileLen * replication)[ FD ]
Line_87 $$ hasException = true-->Line_89 $$ assertTrue(hasException)[ FD ]
Line_93 $$ Path nonExistentPath = new Path("/test1")-->Line_97 $$ runCommand(admin, true, "-setSpaceQuota", "1g", nonExistentPath.toString())[ FD ]
Line_112 $$ args = new String[] -->Line_127 $$ final String[] args2 = args.clone()[ FD ]
Line_14 $$ final short replication = 5-->Line_170 $$ DFSTestUtil.createFile(fs, childFile4, fileLen2, replication, 0)[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_29 $$ assertEquals(c.getQuota(), 3)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_122 $$ runCommand(admin, args, true)[ FD ]
Line_18 $$ String[] args = new String[] -->Line_19 $$ runCommand(admin, args, false)[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_35 $$ c = dfs.getContentSummary(parent)[ FD ]
Line_81 $$ args = new String[] -->Line_122 $$ runCommand(admin, args, true)[ FD ]
Line_42 $$ hasException = true-->Line_87 $$ hasException = true[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_28 $$ assertEquals(c.getFileCount() + c.getDirectoryCount(), 3)[ FD ]
Line_81 $$ args = new String[] -->Line_104 $$ runCommand(admin, args, true)[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_60 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_72 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_23 $$ final Path childDir0 = new Path(parent, "data0")-->Line_24 $$ assertTrue(dfs.mkdirs(childDir0))[ FD ]
Line_47 $$ hasException = false-->Line_83 $$ hasException = false[ FD ]
Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() -->Line_135 $$ String[] args3 = new String[] [ CD ]
Line_23 $$ final Path childDir0 = new Path(parent, "data0")-->Line_32 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_51 $$ hasException = true-->Line_83 $$ hasException = false[ FD ]
Line_25 $$ final Path childFile0 = new Path(parent, "datafile0")-->Line_103 $$ args[1] = childFile0.toString()[ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_56 $$ assertEquals(c.getQuota(), -1)[ FD ]
Line_8 $$ final FileSystem fs = cluster.getFileSystem()-->Line_170 $$ DFSTestUtil.createFile(fs, childFile4, fileLen2, replication, 0)[ FD ]
Line_95 $$ args = new String[] -->Line_104 $$ runCommand(admin, args, true)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_171 $$ runCommand(admin, false, "-setSpaceQuota", Long.toString(spaceQuota2), "/")[ FD ]
Line_95 $$ args = new String[] -->Line_107 $$ runCommand(admin, args, true)[ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_92 $$ assertEquals(c.getQuota(), 1)[ FD ]
Line_38 $$ boolean hasException = false-->Line_87 $$ hasException = true[ FD ]
Line_35 $$ c = dfs.getContentSummary(parent)-->Line_57 $$ assertEquals(c.getSpaceQuota(), spaceQuota)[ FD ]
Line_131 $$ DFSAdmin userAdmin = new DFSAdmin(conf)-->Line_136 $$ runCommand(userAdmin, args3, true)[ FD ]
Line_25 $$ final Path childFile0 = new Path(parent, "datafile0")-->Line_26 $$ DFSTestUtil.createFile(fs, childFile0, fileLen, replication, 0)[ FD ]
Line_10 $$ final DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_94 $$ assertFalse(dfs.exists(nonExistentPath))[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_96 $$ runCommand(admin, args, true)[ FD ]
Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)-->Line_90 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_32 $$ c = dfs.getContentSummary(childDir0)-->Line_59 $$ c = dfs.getContentSummary(childDir0)[ FD ]
Line_11 $$ DFSAdmin admin = new DFSAdmin(conf)-->Line_142 $$ runCommand(admin, false, "-setQuota", "1000000", "/")[ FD ]
Line_128 $$ ugi.doAs(new PrivilegedExceptionAction<Object>() -->Line_133 $$ runCommand(userAdmin, args2, true)[ CD ]
Line_16 $$ final Path parent = new Path("/test")-->Line_27 $$ ContentSummary c = dfs.getContentSummary(parent)[ FD ]
Line_55 $$ c = dfs.getContentSummary(parent)-->Line_73 $$ assertEquals(c.getSpaceQuota(), -1)[ FD ]
