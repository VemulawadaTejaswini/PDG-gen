Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_3 $$ final String exceptionMsg = "Nope, not replicated yet..."[ CD ]
Line_7 $$ Answer<Object> answer = new ThrowsException(new IOException()) -->Line_11 $$ System.out.println("addBlock has been called " + retryCount + " times")[ CD ]
Line_7 $$ Answer<Object> answer = new ThrowsException(new IOException()) -->Line_19 $$ when(mockNN.addBlock(anyString(), anyString(), any(ExtendedBlock.class), any(DatanodeInfo[].class), anyLong(), any(String[].class))).thenAnswer(answer)[ FD ]
Line_4 $$ final int maxRetries = 1-->Line_5 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY, maxRetries)[ FD ]
Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_6 $$ NamenodeProtocols mockNN = mock(NamenodeProtocols.class)[ CD ]
Line_6 $$ NamenodeProtocols mockNN = mock(NamenodeProtocols.class)-->Line_19 $$ when(mockNN.addBlock(anyString(), anyString(), any(ExtendedBlock.class), any(DatanodeInfo[].class), anyLong(), any(String[].class))).thenAnswer(answer)[ FD ]
Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_20 $$ Mockito.doReturn(new HdfsFileStatus(0, false, 1, 1024, 0, 0, new FsPermission((short) 777), "owner", "group", new byte[0], new byte[0], 1010, 0, null)).when(mockNN).getFileInfo(anyString())[ CD ]
Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_21 $$ Mockito.doReturn(new HdfsFileStatus(0, false, 1, 1024, 0, 0, new FsPermission((short) 777), "owner", "group", new byte[0], new byte[0], 1010, 0, null)).when(mockNN).create(anyString(), (FsPermission) anyObject(), anyString(), (EnumSetWritable<CreateFlag>) anyObject(), anyBoolean(), anyShort(), anyLong(), (List<CipherSuite>) anyList())[ CD ]
Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_7 $$ Answer<Object> answer = new ThrowsException(new IOException()) [ CD ]
Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_5 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY, maxRetries)[ CD ]
Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_19 $$ when(mockNN.addBlock(anyString(), anyString(), any(ExtendedBlock.class), any(DatanodeInfo[].class), anyLong(), any(String[].class))).thenAnswer(answer)[ CD ]
Line_7 $$ Answer<Object> answer = new ThrowsException(new IOException()) -->Line_12 $$ if (retryCount > maxRetries + 1)[ CD ]
Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_23 $$ OutputStream os = client.create("testfile", true)[ CD ]
Line_6 $$ NamenodeProtocols mockNN = mock(NamenodeProtocols.class)-->Line_20 $$ Mockito.doReturn(new HdfsFileStatus(0, false, 1, 1024, 0, 0, new FsPermission((short) 777), "owner", "group", new byte[0], new byte[0], 1010, 0, null)).when(mockNN).getFileInfo(anyString())[ FD ]
Line_6 $$ NamenodeProtocols mockNN = mock(NamenodeProtocols.class)-->Line_21 $$ Mockito.doReturn(new HdfsFileStatus(0, false, 1, 1024, 0, 0, new FsPermission((short) 777), "owner", "group", new byte[0], new byte[0], 1010, 0, null)).when(mockNN).create(anyString(), (FsPermission) anyObject(), anyString(), (EnumSetWritable<CreateFlag>) anyObject(), anyBoolean(), anyShort(), anyLong(), (List<CipherSuite>) anyList())[ FD ]
Line_3 $$ final String exceptionMsg = "Nope, not replicated yet..."-->Line_28 $$ assertTrue("Retries are not being stopped correctly: " + e.getMessage(), e.getMessage().equals(exceptionMsg))[ FD ]
Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_24 $$ os.write(20)[ CD ]
Line_7 $$ Answer<Object> answer = new ThrowsException(new IOException()) -->Line_10 $$ retryCount++[ CD ]
Line_2 $$ public void testNotYetReplicatedErrors() throws IOException -->Line_4 $$ final int maxRetries = 1[ CD ]
