Line_3 $$ long base = getBaseWebResponses()-->Line_14 $$ base = assertWebResponsesInRange(base, 2, 15)[ FD ]
Line_36 $$ long downloadDurationMs = new Date().getTime() - start.getTime()-->Line_47 $$ expectedRate = (FILE_SIZE * 1000L) / downloadDurationMs[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_28 $$ assertTrue("The upload latency " + uploadLatency + " is more than the expected range of around " + expectedLatency + " milliseconds that the unit test observed. This should never be" + " the case since the test overestimates the latency by looking at " + " end-to-end time instead of just block upload time.", uploadLatency <= expectedLatency)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_4 $$ assertEquals(0, AzureMetricsTestUtil.getCurrentBytesWritten(getInstrumentation()))[ CD ]
Line_6 $$ final int FILE_SIZE = 1000-->Line_10 $$ outputStream.write(nonZeroByteArray(FILE_SIZE))[ FD ]
Line_32 $$ while (inputStream.read() >= 0) -->Line_33 $$ count++[ CD ]
Line_26 $$ long expectedLatency = uploadDurationMs-->Line_51 $$ expectedLatency = downloadDurationMs[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_9 $$ OutputStream outputStream = fs.create(filePath)[ CD ]
Line_30 $$ InputStream inputStream = fs.open(filePath)-->Line_35 $$ inputStream.close()[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_53 $$ assertTrue("The download latency " + downloadLatency + " is more than the expected range of around " + expectedLatency + " milliseconds that the unit test observed. This should never be" + " the case since the test overestimates the latency by looking at " + " end-to-end time instead of just block download time.", downloadLatency <= expectedLatency)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_23 $$ assertTrue("The upload rate " + uploadRate + " is below the expected range of around " + expectedRate + " bytes/second that the unit test observed. This should never be" + " the case since the test underestimates the rate by looking at " + " end-to-end time instead of just block upload time.", uploadRate >= expectedRate)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_24 $$ long uploadLatency = AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(), WASB_UPLOAD_LATENCY)[ CD ]
Line_14 $$ base = assertWebResponsesInRange(base, 2, 15)-->Line_39 $$ base = assertWebResponsesInRange(base, 1, 10)[ FD ]
Line_3 $$ long base = getBaseWebResponses()-->Line_39 $$ base = assertWebResponsesInRange(base, 1, 10)[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_21 $$ System.out.println("Upload rate: " + uploadRate + " bytes/second.")[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_14 $$ base = assertWebResponsesInRange(base, 2, 15)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_11 $$ outputStream.close()[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_49 $$ long downloadLatency = AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(), WASB_DOWNLOAD_LATENCY)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_45 $$ long downloadRate = AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(), WASB_DOWNLOAD_RATE)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_36 $$ long downloadDurationMs = new Date().getTime() - start.getTime()[ CD ]
Line_8 $$ Date start = new Date()-->Line_12 $$ long uploadDurationMs = new Date().getTime() - start.getTime()[ FD ]
Line_29 $$ start = new Date()-->Line_36 $$ long downloadDurationMs = new Date().getTime() - start.getTime()[ FD ]
Line_9 $$ OutputStream outputStream = fs.create(filePath)-->Line_10 $$ outputStream.write(nonZeroByteArray(FILE_SIZE))[ FD ]
Line_6 $$ final int FILE_SIZE = 1000-->Line_37 $$ assertEquals(FILE_SIZE, count)[ FD ]
Line_6 $$ final int FILE_SIZE = 1000-->Line_42 $$ assertEquals(FILE_SIZE, totalBytesRead)[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_30 $$ InputStream inputStream = fs.open(filePath)[ CD ]
Line_5 $$ Path filePath = new Path("/metricsTest_webResponses")-->Line_9 $$ OutputStream outputStream = fs.create(filePath)[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_43 $$ long bytesRead = AzureMetricsTestUtil.getCurrentBytesRead(getInstrumentation())[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_47 $$ expectedRate = (FILE_SIZE * 1000L) / downloadDurationMs[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_54 $$ assertNoErrors()[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_41 $$ long totalBytesRead = AzureMetricsTestUtil.getCurrentTotalBytesRead(getInstrumentation())[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_10 $$ outputStream.write(nonZeroByteArray(FILE_SIZE))[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_25 $$ System.out.println("Upload latency: " + uploadLatency)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_15 $$ getBandwidthGaugeUpdater().triggerUpdate(true)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_20 $$ long uploadRate = AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(), WASB_UPLOAD_RATE)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_19 $$ assertTrue("The total bytes written  " + totalBytesWritten + " is pretty far from the expected range of around " + FILE_SIZE + " bytes plus a little overhead.", totalBytesWritten >= FILE_SIZE && totalBytesWritten < (FILE_SIZE * 2))[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_3 $$ long base = getBaseWebResponses()[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_27 $$ assertTrue("The upload latency " + uploadLatency + " should be greater than zero now that I've just uploaded a file.", uploadLatency > 0)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_26 $$ long expectedLatency = uploadDurationMs[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_22 $$ long expectedRate = (FILE_SIZE * 1000L) / uploadDurationMs[ CD ]
Line_3 $$ long base = getBaseWebResponses()-->Line_38 $$ logOpResponseCount("Reading a 1K file", base)[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_50 $$ System.out.println("Download latency: " + downloadLatency)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_42 $$ assertEquals(FILE_SIZE, totalBytesRead)[ CD ]
Line_36 $$ long downloadDurationMs = new Date().getTime() - start.getTime()-->Line_51 $$ expectedLatency = downloadDurationMs[ FD ]
Line_30 $$ InputStream inputStream = fs.open(filePath)-->Line_32 $$ while (inputStream.read() >= 0) [ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_39 $$ base = assertWebResponsesInRange(base, 1, 10)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_12 $$ long uploadDurationMs = new Date().getTime() - start.getTime()[ CD ]
Line_9 $$ OutputStream outputStream = fs.create(filePath)-->Line_11 $$ outputStream.close()[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_29 $$ start = new Date()[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_5 $$ Path filePath = new Path("/metricsTest_webResponses")[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_8 $$ Date start = new Date()[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_16 $$ long bytesWritten = AzureMetricsTestUtil.getCurrentBytesWritten(getInstrumentation())[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_35 $$ inputStream.close()[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_37 $$ assertEquals(FILE_SIZE, count)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_7 $$ getBandwidthGaugeUpdater().suppressAutoUpdate()[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_18 $$ long totalBytesWritten = AzureMetricsTestUtil.getCurrentTotalBytesWritten(getInstrumentation())[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_6 $$ final int FILE_SIZE = 1000[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_40 $$ getBandwidthGaugeUpdater().triggerUpdate(false)[ CD ]
Line_41 $$ long totalBytesRead = AzureMetricsTestUtil.getCurrentTotalBytesRead(getInstrumentation())-->Line_42 $$ assertEquals(FILE_SIZE, totalBytesRead)[ FD ]
Line_31 $$ int count = 0-->Line_37 $$ assertEquals(FILE_SIZE, count)[ FD ]
Line_8 $$ Date start = new Date()-->Line_36 $$ long downloadDurationMs = new Date().getTime() - start.getTime()[ FD ]
Line_3 $$ long base = getBaseWebResponses()-->Line_13 $$ logOpResponseCount("Creating a 1K file", base)[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_13 $$ logOpResponseCount("Creating a 1K file", base)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_31 $$ int count = 0[ CD ]
Line_31 $$ int count = 0-->Line_33 $$ count++[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_51 $$ expectedLatency = downloadDurationMs[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_48 $$ assertTrue("The download rate " + downloadRate + " is below the expected range of around " + expectedRate + " bytes/second that the unit test observed. This should never be" + " the case since the test underestimates the rate by looking at " + " end-to-end time instead of just block download time.", downloadRate >= expectedRate)[ CD ]
Line_8 $$ Date start = new Date()-->Line_29 $$ start = new Date()[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_17 $$ assertTrue("The bytes written in the last second " + bytesWritten + " is pretty far from the expected range of around " + FILE_SIZE + " bytes plus a little overhead.", bytesWritten > (FILE_SIZE / 2) && bytesWritten < (FILE_SIZE * 2))[ CD ]
Line_14 $$ base = assertWebResponsesInRange(base, 2, 15)-->Line_38 $$ logOpResponseCount("Reading a 1K file", base)[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_46 $$ System.out.println("Download rate: " + downloadRate + " bytes/second.")[ CD ]
Line_5 $$ Path filePath = new Path("/metricsTest_webResponses")-->Line_30 $$ InputStream inputStream = fs.open(filePath)[ FD ]
Line_22 $$ long expectedRate = (FILE_SIZE * 1000L) / uploadDurationMs-->Line_47 $$ expectedRate = (FILE_SIZE * 1000L) / downloadDurationMs[ FD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_32 $$ while (inputStream.read() >= 0) [ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_44 $$ assertTrue("The bytes read in the last second " + bytesRead + " is pretty far from the expected range of around " + FILE_SIZE + " bytes plus a little overhead.", bytesRead > (FILE_SIZE / 2) && bytesRead < (FILE_SIZE * 2))[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_52 $$ assertTrue("The download latency " + downloadLatency + " should be greater than zero now that I've just downloaded a file.", downloadLatency > 0)[ CD ]
Line_2 $$ public void testMetricsOnFileCreateRead() throws Exception -->Line_38 $$ logOpResponseCount("Reading a 1K file", base)[ CD ]
