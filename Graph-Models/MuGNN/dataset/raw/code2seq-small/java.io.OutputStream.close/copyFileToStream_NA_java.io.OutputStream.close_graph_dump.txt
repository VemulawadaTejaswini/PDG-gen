Line_20 $$ if (CheckpointFaultInjector.getInstance().shouldCorruptAByte(localfile)) -->Line_21 $$ LOG.warn("SIMULATING A CORRUPT BYTE IN IMAGE TRANSFER!")[ CD ]
Line_16 $$ num = infile.read(buf)-->Line_12 $$ while (num > 0) [ FD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_9 $$ infile.read(buf)[ FD ]
Line_8 $$ buf = new byte[(int) Math.min(len / 2, HdfsConstants.IO_FILE_BUFFER_SIZE)]-->Line_16 $$ num = infile.read(buf)[ FD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_30 $$ if (out != null) [ FD ]
Line_11 $$ int num = 1-->Line_24 $$ out.write(buf, 0, num)[ FD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_31 $$ out.close()[ FD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_5 $$ CheckpointFaultInjector.getInstance().aboutToSendFile(localfile)[ FD ]
Line_25 $$ if (throttler != null) -->Line_26 $$ throttler.throttle(num, canceler)[ CD ]
Line_11 $$ int num = 1-->Line_12 $$ while (num > 0) [ FD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_6 $$ if (CheckpointFaultInjector.getInstance().shouldSendShortFile(localfile)) [ FD ]
Line_6 $$ if (CheckpointFaultInjector.getInstance().shouldSendShortFile(localfile)) -->Line_8 $$ buf = new byte[(int) Math.min(len / 2, HdfsConstants.IO_FILE_BUFFER_SIZE)][ CD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_24 $$ out.write(buf, 0, num)[ FD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_14 $$ throw new SaveNamespaceCancelledException(canceler.getCancellationReason())[ FD ]
Line_16 $$ num = infile.read(buf)-->Line_17 $$ if (num <= 0) [ FD ]
Line_3 $$ byte[] buf = new byte[HdfsConstants.IO_FILE_BUFFER_SIZE]-->Line_16 $$ num = infile.read(buf)[ FD ]
Line_20 $$ if (CheckpointFaultInjector.getInstance().shouldCorruptAByte(localfile)) -->Line_22 $$ buf[0]++[ CD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_20 $$ if (CheckpointFaultInjector.getInstance().shouldCorruptAByte(localfile)) [ FD ]
Line_11 $$ int num = 1-->Line_26 $$ throttler.throttle(num, canceler)[ FD ]
Line_16 $$ num = infile.read(buf)-->Line_24 $$ out.write(buf, 0, num)[ FD ]
Line_3 $$ byte[] buf = new byte[HdfsConstants.IO_FILE_BUFFER_SIZE]-->Line_8 $$ buf = new byte[(int) Math.min(len / 2, HdfsConstants.IO_FILE_BUFFER_SIZE)][ FD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_7 $$ long len = localfile.length()[ FD ]
Line_6 $$ if (CheckpointFaultInjector.getInstance().shouldSendShortFile(localfile)) -->Line_9 $$ infile.read(buf)[ CD ]
Line_11 $$ int num = 1-->Line_16 $$ num = infile.read(buf)[ FD ]
Line_12 $$ while (num > 0) -->Line_24 $$ out.write(buf, 0, num)[ CD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_3 $$ byte[] buf = new byte[HdfsConstants.IO_FILE_BUFFER_SIZE][ CD ]
Line_3 $$ byte[] buf = new byte[HdfsConstants.IO_FILE_BUFFER_SIZE]-->Line_9 $$ infile.read(buf)[ FD ]
Line_11 $$ int num = 1-->Line_17 $$ if (num <= 0) [ FD ]
Line_3 $$ byte[] buf = new byte[HdfsConstants.IO_FILE_BUFFER_SIZE]-->Line_24 $$ out.write(buf, 0, num)[ FD ]
Line_12 $$ while (num > 0) -->Line_25 $$ if (throttler != null) [ CD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_16 $$ num = infile.read(buf)[ FD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_25 $$ if (throttler != null) [ FD ]
Line_8 $$ buf = new byte[(int) Math.min(len / 2, HdfsConstants.IO_FILE_BUFFER_SIZE)]-->Line_24 $$ out.write(buf, 0, num)[ FD ]
Line_16 $$ num = infile.read(buf)-->Line_26 $$ throttler.throttle(num, canceler)[ FD ]
Line_6 $$ if (CheckpointFaultInjector.getInstance().shouldSendShortFile(localfile)) -->Line_7 $$ long len = localfile.length()[ CD ]
Line_12 $$ while (num > 0) -->Line_13 $$ if (canceler != null && canceler.isCancelled()) [ CD ]
Line_30 $$ if (out != null) -->Line_31 $$ out.close()[ CD ]
Line_12 $$ while (num > 0) -->Line_17 $$ if (num <= 0) [ CD ]
Line_12 $$ while (num > 0) -->Line_16 $$ num = infile.read(buf)[ CD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_26 $$ throttler.throttle(num, canceler)[ FD ]
Line_8 $$ buf = new byte[(int) Math.min(len / 2, HdfsConstants.IO_FILE_BUFFER_SIZE)]-->Line_9 $$ infile.read(buf)[ FD ]
Line_12 $$ while (num > 0) -->Line_20 $$ if (CheckpointFaultInjector.getInstance().shouldCorruptAByte(localfile)) [ CD ]
Line_2 $$ private static void copyFileToStream(OutputStream out, File localfile, FileInputStream infile, DataTransferThrottler throttler, Canceler canceler) throws IOException -->Line_13 $$ if (canceler != null && canceler.isCancelled()) [ FD ]
