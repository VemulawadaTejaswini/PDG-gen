Line_3 $$ OutputStream source = mock(OutputStream.class)-->Line_13 $$ ordered.verify(source, never()).close()[ FD ]
Line_3 $$ OutputStream source = mock(OutputStream.class)-->Line_10 $$ ordered.verify(source).write(1)[ FD ]
Line_4 $$ OutputStream nonClosing = StreamUtils.nonClosing(source)-->Line_7 $$ nonClosing.write(bytes, 1, 2)[ FD ]
Line_3 $$ OutputStream source = mock(OutputStream.class)-->Line_11 $$ ordered.verify(source).write(bytes, 0, bytes.length)[ FD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_11 $$ ordered.verify(source).write(bytes, 0, bytes.length)[ CD ]
Line_9 $$ InOrder ordered = inOrder(source)-->Line_12 $$ ordered.verify(source).write(bytes, 1, 2)[ FD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_8 $$ nonClosing.close()[ CD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_5 $$ nonClosing.write(1)[ CD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_10 $$ ordered.verify(source).write(1)[ CD ]
Line_3 $$ OutputStream source = mock(OutputStream.class)-->Line_4 $$ OutputStream nonClosing = StreamUtils.nonClosing(source)[ FD ]
Line_9 $$ InOrder ordered = inOrder(source)-->Line_13 $$ ordered.verify(source, never()).close()[ FD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_12 $$ ordered.verify(source).write(bytes, 1, 2)[ CD ]
Line_9 $$ InOrder ordered = inOrder(source)-->Line_11 $$ ordered.verify(source).write(bytes, 0, bytes.length)[ FD ]
Line_4 $$ OutputStream nonClosing = StreamUtils.nonClosing(source)-->Line_5 $$ nonClosing.write(1)[ FD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_4 $$ OutputStream nonClosing = StreamUtils.nonClosing(source)[ CD ]
Line_4 $$ OutputStream nonClosing = StreamUtils.nonClosing(source)-->Line_8 $$ nonClosing.close()[ FD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_7 $$ nonClosing.write(bytes, 1, 2)[ CD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_9 $$ InOrder ordered = inOrder(source)[ CD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_3 $$ OutputStream source = mock(OutputStream.class)[ CD ]
Line_3 $$ OutputStream source = mock(OutputStream.class)-->Line_9 $$ InOrder ordered = inOrder(source)[ FD ]
Line_4 $$ OutputStream nonClosing = StreamUtils.nonClosing(source)-->Line_6 $$ nonClosing.write(bytes)[ FD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_6 $$ nonClosing.write(bytes)[ CD ]
Line_3 $$ OutputStream source = mock(OutputStream.class)-->Line_12 $$ ordered.verify(source).write(bytes, 1, 2)[ FD ]
Line_2 $$ public void nonClosingOutputStream() throws Exception -->Line_13 $$ ordered.verify(source, never()).close()[ CD ]
Line_9 $$ InOrder ordered = inOrder(source)-->Line_10 $$ ordered.verify(source).write(1)[ FD ]
