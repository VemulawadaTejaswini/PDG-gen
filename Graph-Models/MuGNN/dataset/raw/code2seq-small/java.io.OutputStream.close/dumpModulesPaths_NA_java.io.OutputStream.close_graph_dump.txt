Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_16 $$ File file = new File(PathManager.getSystemPath(), "Maven/idea-projects-state-" + project.getLocationHash() + ".properties")[ FD ]
Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_3 $$ ApplicationManager.getApplication().assertReadAccessAllowed()[ CD ]
Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_5 $$ MavenProjectsManager manager = MavenProjectsManager.getInstance(project)[ CD ]
Line_8 $$ MavenProject mavenProject = manager.findProject(module)-->Line_11 $$ res.setProperty(mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId() + ":test-jar" + ':' + mavenProject.getMavenId().getVersion(), mavenProject.getTestOutputDirectory())[ FD ]
Line_5 $$ MavenProjectsManager manager = MavenProjectsManager.getInstance(project)-->Line_8 $$ MavenProject mavenProject = manager.findProject(module)[ FD ]
Line_4 $$ Properties res = new Properties()-->Line_20 $$ res.store(out, null)[ FD ]
Line_8 $$ MavenProject mavenProject = manager.findProject(module)-->Line_12 $$ res.setProperty(mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId() + ':' + mavenProject.getPackaging() + ':' + mavenProject.getMavenId().getVersion(), mavenProject.getOutputDirectory())[ FD ]
Line_9 $$ if (mavenProject != null && !manager.isIgnored(mavenProject)) -->Line_12 $$ res.setProperty(mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId() + ':' + mavenProject.getPackaging() + ':' + mavenProject.getMavenId().getVersion(), mavenProject.getOutputDirectory())[ CD ]
Line_4 $$ Properties res = new Properties()-->Line_11 $$ res.setProperty(mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId() + ":test-jar" + ':' + mavenProject.getMavenId().getVersion(), mavenProject.getTestOutputDirectory())[ FD ]
Line_9 $$ if (mavenProject != null && !manager.isIgnored(mavenProject)) -->Line_11 $$ res.setProperty(mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId() + ":test-jar" + ':' + mavenProject.getMavenId().getVersion(), mavenProject.getTestOutputDirectory())[ CD ]
Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_5 $$ MavenProjectsManager manager = MavenProjectsManager.getInstance(project)[ FD ]
Line_18 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(file))-->Line_20 $$ res.store(out, null)[ FD ]
Line_7 $$ if (manager.isMavenizedModule(module)) -->Line_9 $$ if (mavenProject != null && !manager.isIgnored(mavenProject)) [ CD ]
Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_16 $$ File file = new File(PathManager.getSystemPath(), "Maven/idea-projects-state-" + project.getLocationHash() + ".properties")[ CD ]
Line_5 $$ MavenProjectsManager manager = MavenProjectsManager.getInstance(project)-->Line_9 $$ if (mavenProject != null && !manager.isIgnored(mavenProject)) [ FD ]
Line_9 $$ if (mavenProject != null && !manager.isIgnored(mavenProject)) -->Line_10 $$ res.setProperty(mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId() + ":pom" + ':' + mavenProject.getMavenId().getVersion(), mavenProject.getFile().getPath())[ CD ]
Line_4 $$ Properties res = new Properties()-->Line_12 $$ res.setProperty(mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId() + ':' + mavenProject.getPackaging() + ':' + mavenProject.getMavenId().getVersion(), mavenProject.getOutputDirectory())[ FD ]
Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_18 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(file))[ CD ]
Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_17 $$ FileUtil.ensureExists(file.getParentFile())[ CD ]
Line_6 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_8 $$ MavenProject mavenProject = manager.findProject(module)[ FD ]
Line_6 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_7 $$ if (manager.isMavenizedModule(module)) [ FD ]
Line_18 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(file))-->Line_22 $$ out.close()[ FD ]
Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_24 $$ return file[ CD ]
Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_4 $$ Properties res = new Properties()[ CD ]
Line_2 $$ private static File dumpModulesPaths(@NotNull Project project) throws IOException -->Line_6 $$ for (Module module : ModuleManager.getInstance(project).getModules()) [ FD ]
Line_16 $$ File file = new File(PathManager.getSystemPath(), "Maven/idea-projects-state-" + project.getLocationHash() + ".properties")-->Line_17 $$ FileUtil.ensureExists(file.getParentFile())[ FD ]
Line_4 $$ Properties res = new Properties()-->Line_10 $$ res.setProperty(mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId() + ":pom" + ':' + mavenProject.getMavenId().getVersion(), mavenProject.getFile().getPath())[ FD ]
Line_7 $$ if (manager.isMavenizedModule(module)) -->Line_8 $$ MavenProject mavenProject = manager.findProject(module)[ CD ]
Line_8 $$ MavenProject mavenProject = manager.findProject(module)-->Line_10 $$ res.setProperty(mavenProject.getMavenId().getGroupId() + ':' + mavenProject.getMavenId().getArtifactId() + ":pom" + ':' + mavenProject.getMavenId().getVersion(), mavenProject.getFile().getPath())[ FD ]
Line_5 $$ MavenProjectsManager manager = MavenProjectsManager.getInstance(project)-->Line_7 $$ if (manager.isMavenizedModule(module)) [ FD ]
Line_8 $$ MavenProject mavenProject = manager.findProject(module)-->Line_9 $$ if (mavenProject != null && !manager.isIgnored(mavenProject)) [ FD ]
