Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_4 $$ final String staticMapFileContents = "uid 10 100\n" + "gid 10 200\n" + "uid 11 201 # comment at the end of a line\n" + "uid 12 301\n" + "# Comment at the beginning of a line\n" + "    # Comment that starts late in the line\n" + "uid 10000 10001# line without whitespace before comment\n" + "uid 13 302\n" + "gid\t11\t201\n" + "\n" + "gid 12 202"[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_9 $$ out.close()[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_16 $$ assertEquals(11, (int) parsedMap.gidMapping.get(201))[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_14 $$ assertEquals(13, (int) parsedMap.uidMapping.get(302))[ CD ]
Line_4 $$ final String staticMapFileContents = "uid 10 100\n" + "gid 10 200\n" + "uid 11 201 # comment at the end of a line\n" + "uid 12 301\n" + "# Comment at the beginning of a line\n" + "    # Comment that starts late in the line\n" + "uid 10000 10001# line without whitespace before comment\n" + "uid 13 302\n" + "gid\t11\t201\n" + "\n" + "gid 12 202"-->Line_8 $$ out.write(staticMapFileContents.getBytes())[ FD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_17 $$ assertEquals(12, (int) parsedMap.gidMapping.get(202))[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_10 $$ StaticMapping parsedMap = IdUserGroup.parseStaticMap(tempStaticMapFile)[ CD ]
Line_7 $$ OutputStream out = new FileOutputStream(tempStaticMapFile)-->Line_9 $$ out.close()[ FD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_3 $$ File tempStaticMapFile = File.createTempFile("nfs-", ".map")[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_11 $$ assertEquals(10, (int) parsedMap.uidMapping.get(100))[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_12 $$ assertEquals(11, (int) parsedMap.uidMapping.get(201))[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_13 $$ assertEquals(12, (int) parsedMap.uidMapping.get(301))[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_18 $$ assertEquals(10000, (int) parsedMap.uidMapping.get(10001))[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_15 $$ assertEquals(10, (int) parsedMap.gidMapping.get(200))[ CD ]
Line_7 $$ OutputStream out = new FileOutputStream(tempStaticMapFile)-->Line_8 $$ out.write(staticMapFileContents.getBytes())[ FD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_8 $$ out.write(staticMapFileContents.getBytes())[ CD ]
Line_3 $$ File tempStaticMapFile = File.createTempFile("nfs-", ".map")-->Line_10 $$ StaticMapping parsedMap = IdUserGroup.parseStaticMap(tempStaticMapFile)[ FD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_7 $$ OutputStream out = new FileOutputStream(tempStaticMapFile)[ CD ]
Line_2 $$ public void testStaticMapParsing() throws IOException -->Line_19 $$ assertEquals(1000, (int) parsedMap.uidMapping.get(1000))[ CD ]
