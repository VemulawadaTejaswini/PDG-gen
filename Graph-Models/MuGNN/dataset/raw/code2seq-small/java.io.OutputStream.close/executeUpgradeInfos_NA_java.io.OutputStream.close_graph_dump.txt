Line_2 $$ protected void executeUpgradeInfos(final String bundleSymbolicName, final List<UpgradeInfo> upgradeInfos) -->Line_12 $$ Release release = _releaseLocalService.fetchRelease(bundleSymbolicName)[ FD ]
Line_5 $$ OutputStream outputStream = outputStreamContainer.getOutputStream()-->Line_6 $$ _outputStreamContainerFactoryTracker.runWithSwappedLog(new UpgradeInfosRunnable(bundleSymbolicName, upgradeInfos, outputStream), outputStreamContainer.getDescription(), outputStream)[ FD ]
Line_13 $$ if (release != null) -->Line_14 $$ _releasePublisher.publish(release)[ CD ]
Line_4 $$ OutputStreamContainer outputStreamContainer = outputStreamContainerFactory.create("upgrade-" + bundleSymbolicName)-->Line_6 $$ _outputStreamContainerFactoryTracker.runWithSwappedLog(new UpgradeInfosRunnable(bundleSymbolicName, upgradeInfos, outputStream), outputStreamContainer.getDescription(), outputStream)[ FD ]
Line_2 $$ protected void executeUpgradeInfos(final String bundleSymbolicName, final List<UpgradeInfo> upgradeInfos) -->Line_4 $$ OutputStreamContainer outputStreamContainer = outputStreamContainerFactory.create("upgrade-" + bundleSymbolicName)[ CD ]
Line_5 $$ OutputStream outputStream = outputStreamContainer.getOutputStream()-->Line_8 $$ outputStream.close()[ FD ]
Line_12 $$ Release release = _releaseLocalService.fetchRelease(bundleSymbolicName)-->Line_13 $$ if (release != null) [ FD ]
Line_4 $$ OutputStreamContainer outputStreamContainer = outputStreamContainerFactory.create("upgrade-" + bundleSymbolicName)-->Line_5 $$ OutputStream outputStream = outputStreamContainer.getOutputStream()[ FD ]
Line_2 $$ protected void executeUpgradeInfos(final String bundleSymbolicName, final List<UpgradeInfo> upgradeInfos) -->Line_3 $$ OutputStreamContainerFactory outputStreamContainerFactory = _outputStreamContainerFactoryTracker.getOutputStreamContainerFactory()[ CD ]
Line_2 $$ protected void executeUpgradeInfos(final String bundleSymbolicName, final List<UpgradeInfo> upgradeInfos) -->Line_5 $$ OutputStream outputStream = outputStreamContainer.getOutputStream()[ CD ]
Line_2 $$ protected void executeUpgradeInfos(final String bundleSymbolicName, final List<UpgradeInfo> upgradeInfos) -->Line_12 $$ Release release = _releaseLocalService.fetchRelease(bundleSymbolicName)[ CD ]
Line_3 $$ OutputStreamContainerFactory outputStreamContainerFactory = _outputStreamContainerFactoryTracker.getOutputStreamContainerFactory()-->Line_4 $$ OutputStreamContainer outputStreamContainer = outputStreamContainerFactory.create("upgrade-" + bundleSymbolicName)[ FD ]
Line_2 $$ protected void executeUpgradeInfos(final String bundleSymbolicName, final List<UpgradeInfo> upgradeInfos) -->Line_13 $$ if (release != null) [ CD ]
Line_12 $$ Release release = _releaseLocalService.fetchRelease(bundleSymbolicName)-->Line_14 $$ _releasePublisher.publish(release)[ FD ]
Line_2 $$ protected void executeUpgradeInfos(final String bundleSymbolicName, final List<UpgradeInfo> upgradeInfos) -->Line_6 $$ _outputStreamContainerFactoryTracker.runWithSwappedLog(new UpgradeInfosRunnable(bundleSymbolicName, upgradeInfos, outputStream), outputStreamContainer.getDescription(), outputStream)[ CD ]
