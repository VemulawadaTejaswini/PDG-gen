Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))-->Line_21 $$ Assert.assertEquals(status2.getLen(), status1.getLen())[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_5 $$ OutputStream os = fs.create(path)[ CD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_16 $$ Assert.assertEquals(status2.getBlockSize(), status1.getBlockSize())[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(getProxiedFSConf())-->Line_22 $$ FileStatus[] stati = fs.listStatus(path.getParent())[ FD ]
Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))-->Line_19 $$ Assert.assertEquals(status2.getOwner(), status1.getOwner())[ FD ]
Line_4 $$ Path path = new Path(getProxiedFSTestDir(), "foo.txt")-->Line_8 $$ FileStatus status1 = fs.getFileStatus(path)[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))[ CD ]
Line_8 $$ FileStatus status1 = fs.getFileStatus(path)-->Line_17 $$ Assert.assertEquals(status2.getAccessTime(), status1.getAccessTime())[ FD ]
Line_8 $$ FileStatus status1 = fs.getFileStatus(path)-->Line_13 $$ Assert.assertEquals(status2.getPermission(), status1.getPermission())[ FD ]
Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))-->Line_15 $$ Assert.assertEquals(status2.getReplication(), status1.getReplication())[ FD ]
Line_8 $$ FileStatus status1 = fs.getFileStatus(path)-->Line_19 $$ Assert.assertEquals(status2.getOwner(), status1.getOwner())[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_6 $$ os.write(1)[ CD ]
Line_8 $$ FileStatus status1 = fs.getFileStatus(path)-->Line_15 $$ Assert.assertEquals(status2.getReplication(), status1.getReplication())[ FD ]
Line_4 $$ Path path = new Path(getProxiedFSTestDir(), "foo.txt")-->Line_5 $$ OutputStream os = fs.create(path)[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_17 $$ Assert.assertEquals(status2.getAccessTime(), status1.getAccessTime())[ CD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_23 $$ Assert.assertEquals(stati.length, 1)[ CD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_4 $$ Path path = new Path(getProxiedFSTestDir(), "foo.txt")[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(getProxiedFSConf())-->Line_8 $$ FileStatus status1 = fs.getFileStatus(path)[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(getProxiedFSConf())-->Line_9 $$ fs.close()[ FD ]
Line_5 $$ OutputStream os = fs.create(path)-->Line_7 $$ os.close()[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_10 $$ fs = getHttpFSFileSystem()[ CD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_9 $$ fs.close()[ CD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_20 $$ Assert.assertEquals(status2.getGroup(), status1.getGroup())[ CD ]
Line_8 $$ FileStatus status1 = fs.getFileStatus(path)-->Line_20 $$ Assert.assertEquals(status2.getGroup(), status1.getGroup())[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_24 $$ Assert.assertEquals(stati[0].getPath().getName(), path.getName())[ CD ]
Line_8 $$ FileStatus status1 = fs.getFileStatus(path)-->Line_18 $$ Assert.assertEquals(status2.getModificationTime(), status1.getModificationTime())[ FD ]
Line_5 $$ OutputStream os = fs.create(path)-->Line_6 $$ os.write(1)[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_3 $$ FileSystem fs = FileSystem.get(getProxiedFSConf())[ CD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_14 $$ Assert.assertEquals(status2.getPath().toUri().getPath(), status1.getPath().toUri().getPath())[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(getProxiedFSConf())-->Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(getProxiedFSConf())-->Line_5 $$ OutputStream os = fs.create(path)[ FD ]
Line_8 $$ FileStatus status1 = fs.getFileStatus(path)-->Line_21 $$ Assert.assertEquals(status2.getLen(), status1.getLen())[ FD ]
Line_4 $$ Path path = new Path(getProxiedFSTestDir(), "foo.txt")-->Line_22 $$ FileStatus[] stati = fs.listStatus(path.getParent())[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_15 $$ Assert.assertEquals(status2.getReplication(), status1.getReplication())[ CD ]
Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))-->Line_13 $$ Assert.assertEquals(status2.getPermission(), status1.getPermission())[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_19 $$ Assert.assertEquals(status2.getOwner(), status1.getOwner())[ CD ]
Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))-->Line_16 $$ Assert.assertEquals(status2.getBlockSize(), status1.getBlockSize())[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_8 $$ FileStatus status1 = fs.getFileStatus(path)[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(getProxiedFSConf())-->Line_10 $$ fs = getHttpFSFileSystem()[ FD ]
Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))-->Line_14 $$ Assert.assertEquals(status2.getPath().toUri().getPath(), status1.getPath().toUri().getPath())[ FD ]
Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))-->Line_17 $$ Assert.assertEquals(status2.getAccessTime(), status1.getAccessTime())[ FD ]
Line_4 $$ Path path = new Path(getProxiedFSTestDir(), "foo.txt")-->Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))[ FD ]
Line_10 $$ fs = getHttpFSFileSystem()-->Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))[ FD ]
Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))-->Line_20 $$ Assert.assertEquals(status2.getGroup(), status1.getGroup())[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_7 $$ os.close()[ CD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_21 $$ Assert.assertEquals(status2.getLen(), status1.getLen())[ CD ]
Line_8 $$ FileStatus status1 = fs.getFileStatus(path)-->Line_16 $$ Assert.assertEquals(status2.getBlockSize(), status1.getBlockSize())[ FD ]
Line_8 $$ FileStatus status1 = fs.getFileStatus(path)-->Line_14 $$ Assert.assertEquals(status2.getPath().toUri().getPath(), status1.getPath().toUri().getPath())[ FD ]
Line_10 $$ fs = getHttpFSFileSystem()-->Line_22 $$ FileStatus[] stati = fs.listStatus(path.getParent())[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(getProxiedFSConf())-->Line_12 $$ fs.close()[ FD ]
Line_4 $$ Path path = new Path(getProxiedFSTestDir(), "foo.txt")-->Line_24 $$ Assert.assertEquals(stati[0].getPath().getName(), path.getName())[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_12 $$ fs.close()[ CD ]
Line_10 $$ fs = getHttpFSFileSystem()-->Line_12 $$ fs.close()[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_22 $$ FileStatus[] stati = fs.listStatus(path.getParent())[ CD ]
Line_11 $$ FileStatus status2 = fs.getFileStatus(new Path(path.toUri().getPath()))-->Line_18 $$ Assert.assertEquals(status2.getModificationTime(), status1.getModificationTime())[ FD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_18 $$ Assert.assertEquals(status2.getModificationTime(), status1.getModificationTime())[ CD ]
Line_2 $$ private void testListStatus() throws Exception -->Line_13 $$ Assert.assertEquals(status2.getPermission(), status1.getPermission())[ CD ]
