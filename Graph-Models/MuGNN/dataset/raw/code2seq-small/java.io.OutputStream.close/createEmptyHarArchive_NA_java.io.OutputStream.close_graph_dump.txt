Line_2 $$ private static void createEmptyHarArchive(FileSystem fs, Path p) throws IOException -->Line_3 $$ fs.mkdirs(p)[ CD ]
Line_2 $$ private static void createEmptyHarArchive(FileSystem fs, Path p) throws IOException -->Line_4 $$ OutputStream out = fs.create(new Path(p, "_masterindex"))[ FD ]
Line_4 $$ OutputStream out = fs.create(new Path(p, "_masterindex"))-->Line_5 $$ out.write(Integer.toString(HarFileSystem.VERSION).getBytes())[ FD ]
Line_4 $$ OutputStream out = fs.create(new Path(p, "_masterindex"))-->Line_6 $$ out.close()[ FD ]
Line_2 $$ private static void createEmptyHarArchive(FileSystem fs, Path p) throws IOException -->Line_7 $$ fs.create(new Path(p, "_index")).close()[ CD ]
Line_2 $$ private static void createEmptyHarArchive(FileSystem fs, Path p) throws IOException -->Line_4 $$ OutputStream out = fs.create(new Path(p, "_masterindex"))[ CD ]
Line_2 $$ private static void createEmptyHarArchive(FileSystem fs, Path p) throws IOException -->Line_7 $$ fs.create(new Path(p, "_index")).close()[ FD ]
Line_2 $$ private static void createEmptyHarArchive(FileSystem fs, Path p) throws IOException -->Line_6 $$ out.close()[ CD ]
Line_2 $$ private static void createEmptyHarArchive(FileSystem fs, Path p) throws IOException -->Line_5 $$ out.write(Integer.toString(HarFileSystem.VERSION).getBytes())[ CD ]
Line_2 $$ private static void createEmptyHarArchive(FileSystem fs, Path p) throws IOException -->Line_3 $$ fs.mkdirs(p)[ FD ]
