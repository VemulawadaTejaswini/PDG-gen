Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_6 $$ OutputStream os = fs.create(new Path(TestHdfsHelper.getHdfsTestDir(), "foo"))[ FD ]
Line_9 $$ InputStream is = fs.open(new Path(TestHdfsHelper.getHdfsTestDir(), "foo"))-->Line_12 $$ is.close()[ FD ]
Line_2 $$ public void testHadoopFileSystem() throws Exception -->Line_3 $$ Configuration conf = TestHdfsHelper.getHdfsConf()[ CD ]
Line_6 $$ OutputStream os = fs.create(new Path(TestHdfsHelper.getHdfsTestDir(), "foo"))-->Line_8 $$ os.close()[ FD ]
Line_6 $$ OutputStream os = fs.create(new Path(TestHdfsHelper.getHdfsTestDir(), "foo"))-->Line_7 $$ os.write(new byte[] [ FD ]
Line_2 $$ public void testHadoopFileSystem() throws Exception -->Line_4 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_9 $$ InputStream is = fs.open(new Path(TestHdfsHelper.getHdfsTestDir(), "foo"))-->Line_10 $$ assertEquals(is.read(), 1)[ FD ]
Line_9 $$ InputStream is = fs.open(new Path(TestHdfsHelper.getHdfsTestDir(), "foo"))-->Line_11 $$ assertEquals(is.read(), -1)[ FD ]
Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_14 $$ fs.close()[ FD ]
Line_3 $$ Configuration conf = TestHdfsHelper.getHdfsConf()-->Line_4 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_9 $$ InputStream is = fs.open(new Path(TestHdfsHelper.getHdfsTestDir(), "foo"))[ FD ]
