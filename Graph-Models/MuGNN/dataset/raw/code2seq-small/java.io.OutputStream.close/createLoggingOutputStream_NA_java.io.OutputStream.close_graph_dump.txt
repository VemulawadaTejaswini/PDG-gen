Line_3 $$ return new OutputStream() -->Line_13 $$ outputStream.flush()[ CD ]
Line_3 $$ return new OutputStream() -->Line_5 $$ outputStream.write(b)[ FD ]
Line_2 $$ public OutputStream createLoggingOutputStream(final OutputStream outputStream) -->Line_3 $$ return new OutputStream() [ CD ]
Line_3 $$ return new OutputStream() -->Line_18 $$ if (myCloseCount == 2) [ CD ]
Line_3 $$ return new OutputStream() -->Line_9 $$ outputStream.write(b, off, len)[ CD ]
Line_3 $$ return new OutputStream() -->Line_9 $$ outputStream.write(b, off, len)[ FD ]
Line_3 $$ return new OutputStream() -->Line_6 $$ getOutputLogStream().write(b)[ FD ]
Line_3 $$ return new OutputStream() -->Line_5 $$ outputStream.write(b)[ CD ]
Line_3 $$ return new OutputStream() -->Line_10 $$ getOutputLogStream().write(b, off, len)[ FD ]
Line_3 $$ return new OutputStream() -->Line_10 $$ getOutputLogStream().write(b, off, len)[ CD ]
Line_3 $$ return new OutputStream() -->Line_6 $$ getOutputLogStream().write(b)[ CD ]
Line_2 $$ public OutputStream createLoggingOutputStream(final OutputStream outputStream) -->Line_5 $$ outputStream.write(b)[ FD ]
Line_2 $$ public OutputStream createLoggingOutputStream(final OutputStream outputStream) -->Line_13 $$ outputStream.flush()[ FD ]
Line_18 $$ if (myCloseCount == 2) -->Line_19 $$ myLogOutput.close()[ CD ]
Line_2 $$ public OutputStream createLoggingOutputStream(final OutputStream outputStream) -->Line_9 $$ outputStream.write(b, off, len)[ FD ]
Line_3 $$ return new OutputStream() -->Line_14 $$ getOutputLogStream().flush()[ CD ]
