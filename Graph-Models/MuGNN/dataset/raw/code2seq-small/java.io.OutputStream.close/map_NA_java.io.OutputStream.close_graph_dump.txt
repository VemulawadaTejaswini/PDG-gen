Line_19 $$ int length = (remains <= buffer.length) ? (int) remains : buffer.length-->Line_20 $$ out.write(buffer, 0, length)[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_29 $$ reporter.setStatus("wrote " + name)[ CD ]
Line_4 $$ long size = value.get()-->Line_12 $$ while (written < size) [ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_8 $$ Path tempFile = new Path(DATA_DIR, name + suffix)[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_22 $$ reporter.setStatus("writing " + name + "@" + written + "/" + size)[ FD ]
Line_8 $$ Path tempFile = new Path(DATA_DIR, name + suffix)-->Line_27 $$ fs.rename(tempFile, new Path(DATA_DIR, name))[ FD ]
Line_10 $$ long written = 0-->Line_21 $$ written += length[ FD ]
Line_12 $$ while (written < size) -->Line_18 $$ long remains = size - written[ CD ]
Line_10 $$ long written = 0-->Line_12 $$ while (written < size) [ FD ]
Line_12 $$ while (written < size) -->Line_22 $$ reporter.setStatus("writing " + name + "@" + written + "/" + size)[ CD ]
Line_9 $$ OutputStream out = fs.create(tempFile)-->Line_25 $$ out.close()[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_7 $$ reporter.setStatus("creating " + name)[ FD ]
Line_3 $$ String name = key.toString()-->Line_5 $$ long seed = Long.parseLong(name)[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_3 $$ String name = key.toString()[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_3 $$ String name = key.toString()[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_28 $$ collector.collect(new Text("bytes"), new LongWritable(written))[ CD ]
Line_21 $$ written += length-->Line_12 $$ while (written < size) [ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_7 $$ reporter.setStatus("creating " + name)[ CD ]
Line_19 $$ int length = (remains <= buffer.length) ? (int) remains : buffer.length-->Line_21 $$ written += length[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_6 $$ random.setSeed(seed)[ CD ]
Line_5 $$ long seed = Long.parseLong(name)-->Line_6 $$ random.setSeed(seed)[ FD ]
Line_12 $$ while (written < size) -->Line_19 $$ int length = (remains <= buffer.length) ? (int) remains : buffer.length[ CD ]
Line_12 $$ while (written < size) -->Line_13 $$ if (fastCheck) [ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_5 $$ long seed = Long.parseLong(name)[ CD ]
Line_8 $$ Path tempFile = new Path(DATA_DIR, name + suffix)-->Line_9 $$ OutputStream out = fs.create(tempFile)[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_4 $$ long size = value.get()[ FD ]
Line_9 $$ OutputStream out = fs.create(tempFile)-->Line_20 $$ out.write(buffer, 0, length)[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_27 $$ fs.rename(tempFile, new Path(DATA_DIR, name))[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_4 $$ long size = value.get()[ CD ]
Line_13 $$ if (fastCheck) -->Line_16 $$ random.nextBytes(buffer)[ CD ]
Line_12 $$ while (written < size) -->Line_20 $$ out.write(buffer, 0, length)[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_28 $$ collector.collect(new Text("bytes"), new LongWritable(written))[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_10 $$ long written = 0[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_29 $$ reporter.setStatus("wrote " + name)[ FD ]
Line_12 $$ while (written < size) -->Line_21 $$ written += length[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_9 $$ OutputStream out = fs.create(tempFile)[ CD ]
Line_13 $$ if (fastCheck) -->Line_14 $$ Arrays.fill(buffer, (byte) random.nextInt(Byte.MAX_VALUE))[ CD ]
