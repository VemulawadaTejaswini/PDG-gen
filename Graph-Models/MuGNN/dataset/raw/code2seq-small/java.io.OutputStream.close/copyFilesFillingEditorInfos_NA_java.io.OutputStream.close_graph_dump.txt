Line_5 $$ for (String relativePath : relativePaths) -->Line_7 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)[ FD ]
Line_11 $$ final File file = new File(toDir.getPath(), relativePath)-->Line_13 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ FD ]
Line_2 $$ protected Map<VirtualFile, EditorInfo> copyFilesFillingEditorInfos(@NotNull VirtualFile fromDir, @NotNull VirtualFile toDir, @NotNull String... relativePaths) throws IOException -->Line_11 $$ final File file = new File(toDir.getPath(), relativePath)[ FD ]
Line_13 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_14 $$ assertNotNull(file.getCanonicalPath(), toFile)[ FD ]
Line_4 $$ List<OutputStream> streamsToClose = new ArrayList<OutputStream>()-->Line_17 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_6 $$ relativePath = StringUtil.trimStart(relativePath, "/")-->Line_9 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)[ FD ]
Line_7 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)-->Line_8 $$ assertNotNull(fromDir.getPath() + "/" + relativePath, fromFile)[ FD ]
Line_3 $$ Map<VirtualFile, EditorInfo> editorInfos = new LinkedHashMap<VirtualFile, EditorInfo>()-->Line_17 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_13 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_16 $$ toFile.putUserData(VfsTestUtil.TEST_DATA_FILE_PATH, FileUtil.toSystemDependentName(fromFile.getPath()))[ FD ]
Line_2 $$ protected Map<VirtualFile, EditorInfo> copyFilesFillingEditorInfos(@NotNull VirtualFile fromDir, @NotNull VirtualFile toDir, @NotNull String... relativePaths) throws IOException -->Line_22 $$ return editorInfos[ CD ]
Line_4 $$ List<OutputStream> streamsToClose = new ArrayList<OutputStream>()-->Line_20 $$ streamsToClose.get(i).close()[ FD ]
Line_9 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_16 $$ toFile.putUserData(VfsTestUtil.TEST_DATA_FILE_PATH, FileUtil.toSystemDependentName(fromFile.getPath()))[ FD ]
Line_10 $$ if (toFile == null) -->Line_12 $$ FileUtil.createIfDoesntExist(file)[ CD ]
Line_2 $$ protected Map<VirtualFile, EditorInfo> copyFilesFillingEditorInfos(@NotNull VirtualFile fromDir, @NotNull VirtualFile toDir, @NotNull String... relativePaths) throws IOException -->Line_7 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)[ FD ]
Line_9 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_10 $$ if (toFile == null) [ FD ]
Line_10 $$ if (toFile == null) -->Line_11 $$ final File file = new File(toDir.getPath(), relativePath)[ CD ]
Line_11 $$ final File file = new File(toDir.getPath(), relativePath)-->Line_14 $$ assertNotNull(file.getCanonicalPath(), toFile)[ FD ]
Line_2 $$ protected Map<VirtualFile, EditorInfo> copyFilesFillingEditorInfos(@NotNull VirtualFile fromDir, @NotNull VirtualFile toDir, @NotNull String... relativePaths) throws IOException -->Line_3 $$ Map<VirtualFile, EditorInfo> editorInfos = new LinkedHashMap<VirtualFile, EditorInfo>()[ CD ]
Line_2 $$ protected Map<VirtualFile, EditorInfo> copyFilesFillingEditorInfos(@NotNull VirtualFile fromDir, @NotNull VirtualFile toDir, @NotNull String... relativePaths) throws IOException -->Line_9 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)[ FD ]
Line_7 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)-->Line_17 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_9 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_14 $$ assertNotNull(file.getCanonicalPath(), toFile)[ FD ]
Line_4 $$ List<OutputStream> streamsToClose = new ArrayList<OutputStream>()-->Line_19 $$ for (int i = streamsToClose.size() - 1; i >= 0; --i) [ FD ]
Line_10 $$ if (toFile == null) -->Line_14 $$ assertNotNull(file.getCanonicalPath(), toFile)[ CD ]
Line_11 $$ final File file = new File(toDir.getPath(), relativePath)-->Line_12 $$ FileUtil.createIfDoesntExist(file)[ FD ]
Line_19 $$ for (int i = streamsToClose.size() - 1; i >= 0; --i) -->Line_20 $$ streamsToClose.get(i).close()[ FD ]
Line_13 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_17 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_6 $$ relativePath = StringUtil.trimStart(relativePath, "/")-->Line_7 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)[ FD ]
Line_5 $$ for (String relativePath : relativePaths) -->Line_9 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)[ FD ]
Line_2 $$ protected Map<VirtualFile, EditorInfo> copyFilesFillingEditorInfos(@NotNull VirtualFile fromDir, @NotNull VirtualFile toDir, @NotNull String... relativePaths) throws IOException -->Line_19 $$ for (int i = streamsToClose.size() - 1; i >= 0; --i) [ CD ]
Line_10 $$ if (toFile == null) -->Line_13 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ CD ]
Line_7 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)-->Line_16 $$ toFile.putUserData(VfsTestUtil.TEST_DATA_FILE_PATH, FileUtil.toSystemDependentName(fromFile.getPath()))[ FD ]
Line_9 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_13 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ FD ]
Line_2 $$ protected Map<VirtualFile, EditorInfo> copyFilesFillingEditorInfos(@NotNull VirtualFile fromDir, @NotNull VirtualFile toDir, @NotNull String... relativePaths) throws IOException -->Line_8 $$ assertNotNull(fromDir.getPath() + "/" + relativePath, fromFile)[ FD ]
Line_9 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_17 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_19 $$ for (int i = streamsToClose.size() - 1; i >= 0; --i) -->Line_20 $$ streamsToClose.get(i).close()[ CD ]
Line_2 $$ protected Map<VirtualFile, EditorInfo> copyFilesFillingEditorInfos(@NotNull VirtualFile fromDir, @NotNull VirtualFile toDir, @NotNull String... relativePaths) throws IOException -->Line_4 $$ List<OutputStream> streamsToClose = new ArrayList<OutputStream>()[ CD ]
Line_5 $$ for (String relativePath : relativePaths) -->Line_6 $$ relativePath = StringUtil.trimStart(relativePath, "/")[ FD ]
