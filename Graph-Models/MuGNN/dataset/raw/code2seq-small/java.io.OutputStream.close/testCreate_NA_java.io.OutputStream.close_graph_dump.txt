Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_10 $$ FileStatus status = fs.getFileStatus(path)[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_5 $$ OutputStream os = fs.create(new Path(path.toUri().getPath()), permission, override, 1024, (short) 2, 100 * 1024 * 1024, null)[ FD ]
Line_3 $$ FileSystem fs = getHttpFSFileSystem()-->Line_16 $$ InputStream is = fs.open(path)[ FD ]
Line_3 $$ FileSystem fs = getHttpFSFileSystem()-->Line_9 $$ fs = FileSystem.get(getProxiedFSConf())[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_19 $$ fs.close()[ CD ]
Line_9 $$ fs = FileSystem.get(getProxiedFSConf())-->Line_10 $$ FileStatus status = fs.getFileStatus(path)[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_10 $$ FileStatus status = fs.getFileStatus(path)[ CD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_16 $$ InputStream is = fs.open(path)[ FD ]
Line_9 $$ fs = FileSystem.get(getProxiedFSConf())-->Line_19 $$ fs.close()[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_5 $$ OutputStream os = fs.create(new Path(path.toUri().getPath()), permission, override, 1024, (short) 2, 100 * 1024 * 1024, null)[ CD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_17 $$ Assert.assertEquals(is.read(), 1)[ CD ]
Line_10 $$ FileStatus status = fs.getFileStatus(path)-->Line_13 $$ Assert.assertEquals(status.getBlockSize(), 100 * 1024 * 1024)[ FD ]
Line_10 $$ FileStatus status = fs.getFileStatus(path)-->Line_15 $$ Assert.assertEquals(status.getPermission(), permission)[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_15 $$ Assert.assertEquals(status.getPermission(), permission)[ CD ]
Line_3 $$ FileSystem fs = getHttpFSFileSystem()-->Line_8 $$ fs.close()[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_3 $$ FileSystem fs = getHttpFSFileSystem()[ CD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_6 $$ os.write(1)[ CD ]
Line_11 $$ if (!isLocalFS()) -->Line_13 $$ Assert.assertEquals(status.getBlockSize(), 100 * 1024 * 1024)[ CD ]
Line_5 $$ OutputStream os = fs.create(new Path(path.toUri().getPath()), permission, override, 1024, (short) 2, 100 * 1024 * 1024, null)-->Line_7 $$ os.close()[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_11 $$ if (!isLocalFS()) [ CD ]
Line_3 $$ FileSystem fs = getHttpFSFileSystem()-->Line_10 $$ FileStatus status = fs.getFileStatus(path)[ FD ]
Line_11 $$ if (!isLocalFS()) -->Line_12 $$ Assert.assertEquals(status.getReplication(), 2)[ CD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_8 $$ fs.close()[ CD ]
Line_16 $$ InputStream is = fs.open(path)-->Line_18 $$ is.close()[ FD ]
Line_4 $$ FsPermission permission = new FsPermission(FsAction.READ_WRITE, FsAction.NONE, FsAction.NONE)-->Line_5 $$ OutputStream os = fs.create(new Path(path.toUri().getPath()), permission, override, 1024, (short) 2, 100 * 1024 * 1024, null)[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_18 $$ is.close()[ CD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_4 $$ FsPermission permission = new FsPermission(FsAction.READ_WRITE, FsAction.NONE, FsAction.NONE)[ CD ]
Line_3 $$ FileSystem fs = getHttpFSFileSystem()-->Line_5 $$ OutputStream os = fs.create(new Path(path.toUri().getPath()), permission, override, 1024, (short) 2, 100 * 1024 * 1024, null)[ FD ]
Line_4 $$ FsPermission permission = new FsPermission(FsAction.READ_WRITE, FsAction.NONE, FsAction.NONE)-->Line_15 $$ Assert.assertEquals(status.getPermission(), permission)[ FD ]
Line_16 $$ InputStream is = fs.open(path)-->Line_17 $$ Assert.assertEquals(is.read(), 1)[ FD ]
Line_3 $$ FileSystem fs = getHttpFSFileSystem()-->Line_19 $$ fs.close()[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_16 $$ InputStream is = fs.open(path)[ CD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_7 $$ os.close()[ CD ]
Line_10 $$ FileStatus status = fs.getFileStatus(path)-->Line_12 $$ Assert.assertEquals(status.getReplication(), 2)[ FD ]
Line_2 $$ private void testCreate(Path path, boolean override) throws Exception -->Line_9 $$ fs = FileSystem.get(getProxiedFSConf())[ CD ]
Line_9 $$ fs = FileSystem.get(getProxiedFSConf())-->Line_16 $$ InputStream is = fs.open(path)[ FD ]
Line_5 $$ OutputStream os = fs.create(new Path(path.toUri().getPath()), permission, override, 1024, (short) 2, 100 * 1024 * 1024, null)-->Line_6 $$ os.write(1)[ FD ]
