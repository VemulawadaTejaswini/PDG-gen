Line_13 $$ isToUse = dis-->Line_26 $$ major = isToUse.read()[ FD ]
Line_25 $$ if (code == 'H') -->Line_32 $$ out = new Hessian2Output(osToUse)[ CD ]
Line_34 $$ if (code == 'C') -->Line_38 $$ in.readCall()[ CD ]
Line_23 $$ AbstractHessianInput in-->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_16 $$ if (!isToUse.markSupported()) -->Line_18 $$ isToUse.mark(1)[ CD ]
Line_37 $$ out = new Hessian2Output(osToUse)-->Line_53 $$ out.setSerializerFactory(this.serializerFactory)[ FD ]
Line_31 $$ in = new Hessian2Input(isToUse)-->Line_33 $$ in.readCall()[ FD ]
Line_23 $$ AbstractHessianInput in-->Line_56 $$ in.setRemoteResolver(this.remoteResolver)[ FD ]
Line_26 $$ major = isToUse.read()-->Line_43 $$ if (major >= 2) [ FD ]
Line_13 $$ isToUse = dis-->Line_27 $$ minor = isToUse.read()[ FD ]
Line_13 $$ isToUse = dis-->Line_35 $$ isToUse.reset()[ FD ]
Line_21 $$ int major-->Line_26 $$ major = isToUse.read()[ FD ]
Line_31 $$ in = new Hessian2Input(isToUse)-->Line_42 $$ in = new HessianInput(isToUse)[ FD ]
Line_25 $$ if (code == 'H') -->Line_33 $$ in.readCall()[ CD ]
Line_37 $$ out = new Hessian2Output(osToUse)-->Line_46 $$ out = new HessianOutput(osToUse)[ FD ]
Line_13 $$ isToUse = dis-->Line_41 $$ minor = isToUse.read()[ FD ]
Line_36 $$ in = new Hessian2Input(isToUse)-->Line_52 $$ in.setSerializerFactory(this.serializerFactory)[ FD ]
Line_42 $$ in = new HessianInput(isToUse)-->Line_52 $$ in.setSerializerFactory(this.serializerFactory)[ FD ]
Line_36 $$ in = new Hessian2Input(isToUse)-->Line_62 $$ in.close()[ FD ]
Line_9 $$ HessianDebugInputStream dis = new HessianDebugInputStream(inputStream, debugWriter)-->Line_11 $$ dis.startTop2()[ FD ]
Line_24 $$ AbstractHessianOutput out-->Line_32 $$ out = new Hessian2Output(osToUse)[ FD ]
Line_42 $$ in = new HessianInput(isToUse)-->Line_62 $$ in.close()[ FD ]
Line_10 $$ HessianDebugOutputStream dos = new HessianDebugOutputStream(outputStream, debugWriter)-->Line_12 $$ dos.startTop2()[ FD ]
Line_44 $$ out = new Hessian2Output(osToUse)-->Line_67 $$ out.close()[ FD ]
Line_43 $$ if (major >= 2) -->Line_44 $$ out = new Hessian2Output(osToUse)[ CD ]
Line_55 $$ if (this.remoteResolver != null) -->Line_56 $$ in.setRemoteResolver(this.remoteResolver)[ CD ]
Line_10 $$ HessianDebugOutputStream dos = new HessianDebugOutputStream(outputStream, debugWriter)-->Line_14 $$ osToUse = dos[ FD ]
Line_27 $$ minor = isToUse.read()-->Line_41 $$ minor = isToUse.read()[ FD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_35 $$ isToUse.reset()[ FD ]
Line_13 $$ isToUse = dis-->Line_40 $$ major = isToUse.read()[ FD ]
Line_6 $$ OutputStream osToUse = outputStream-->Line_14 $$ osToUse = dos[ FD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_26 $$ major = isToUse.read()[ FD ]
Line_7 $$ if (this.debugLogger != null && this.debugLogger.isDebugEnabled()) -->Line_14 $$ osToUse = dos[ CD ]
Line_25 $$ if (code == 'H') -->Line_26 $$ major = isToUse.read()[ CD ]
Line_44 $$ out = new Hessian2Output(osToUse)-->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_32 $$ out = new Hessian2Output(osToUse)-->Line_37 $$ out = new Hessian2Output(osToUse)[ FD ]
Line_25 $$ if (code == 'H') -->Line_28 $$ if (major != 0x02) [ CD ]
Line_34 $$ if (code == 'C') -->Line_39 $$ if (code == 'c') [ CD ]
Line_17 $$ isToUse = new BufferedInputStream(isToUse)-->Line_40 $$ major = isToUse.read()[ FD ]
Line_20 $$ int code = isToUse.read()-->Line_39 $$ if (code == 'c') [ FD ]
Line_46 $$ out = new HessianOutput(osToUse)-->Line_67 $$ out.close()[ FD ]
Line_34 $$ if (code == 'C') -->Line_35 $$ isToUse.reset()[ CD ]
Line_26 $$ major = isToUse.read()-->Line_28 $$ if (major != 0x02) [ FD ]
Line_51 $$ if (this.serializerFactory != null) -->Line_53 $$ out.setSerializerFactory(this.serializerFactory)[ CD ]
Line_13 $$ isToUse = dis-->Line_18 $$ isToUse.mark(1)[ FD ]
Line_31 $$ in = new Hessian2Input(isToUse)-->Line_52 $$ in.setSerializerFactory(this.serializerFactory)[ FD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_17 $$ isToUse = new BufferedInputStream(isToUse)[ FD ]
Line_17 $$ isToUse = new BufferedInputStream(isToUse)-->Line_35 $$ isToUse.reset()[ FD ]
Line_43 $$ if (major >= 2) -->Line_46 $$ out = new HessianOutput(osToUse)[ CD ]
Line_25 $$ if (code == 'H') -->Line_31 $$ in = new Hessian2Input(isToUse)[ CD ]
Line_23 $$ AbstractHessianInput in-->Line_31 $$ in = new Hessian2Input(isToUse)[ FD ]
Line_7 $$ if (this.debugLogger != null && this.debugLogger.isDebugEnabled()) -->Line_8 $$ PrintWriter debugWriter = new PrintWriter(new CommonsLogWriter(this.debugLogger))[ CD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_13 $$ isToUse = dis[ FD ]
Line_9 $$ HessianDebugInputStream dis = new HessianDebugInputStream(inputStream, debugWriter)-->Line_13 $$ isToUse = dis[ FD ]
Line_13 $$ isToUse = dis-->Line_17 $$ isToUse = new BufferedInputStream(isToUse)[ FD ]
Line_34 $$ if (code == 'C') -->Line_37 $$ out = new Hessian2Output(osToUse)[ CD ]
Line_37 $$ out = new Hessian2Output(osToUse)-->Line_44 $$ out = new Hessian2Output(osToUse)[ FD ]
Line_23 $$ AbstractHessianInput in-->Line_52 $$ in.setSerializerFactory(this.serializerFactory)[ FD ]
Line_32 $$ out = new Hessian2Output(osToUse)-->Line_46 $$ out = new HessianOutput(osToUse)[ FD ]
Line_23 $$ AbstractHessianInput in-->Line_42 $$ in = new HessianInput(isToUse)[ FD ]
Line_44 $$ out = new Hessian2Output(osToUse)-->Line_53 $$ out.setSerializerFactory(this.serializerFactory)[ FD ]
Line_7 $$ if (this.debugLogger != null && this.debugLogger.isDebugEnabled()) -->Line_12 $$ dos.startTop2()[ CD ]
Line_36 $$ in = new Hessian2Input(isToUse)-->Line_56 $$ in.setRemoteResolver(this.remoteResolver)[ FD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_16 $$ if (!isToUse.markSupported()) [ FD ]
Line_23 $$ AbstractHessianInput in-->Line_33 $$ in.readCall()[ FD ]
Line_42 $$ in = new HessianInput(isToUse)-->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_25 $$ if (code == 'H') -->Line_34 $$ if (code == 'C') [ CD ]
Line_26 $$ major = isToUse.read()-->Line_40 $$ major = isToUse.read()[ FD ]
Line_31 $$ in = new Hessian2Input(isToUse)-->Line_38 $$ in.readCall()[ FD ]
Line_22 $$ int minor-->Line_41 $$ minor = isToUse.read()[ FD ]
Line_31 $$ in = new Hessian2Input(isToUse)-->Line_36 $$ in = new Hessian2Input(isToUse)[ FD ]
Line_32 $$ out = new Hessian2Output(osToUse)-->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_39 $$ if (code == 'c') -->Line_40 $$ major = isToUse.read()[ CD ]
Line_39 $$ if (code == 'c') -->Line_42 $$ in = new HessianInput(isToUse)[ CD ]
Line_31 $$ in = new Hessian2Input(isToUse)-->Line_56 $$ in.setRemoteResolver(this.remoteResolver)[ FD ]
Line_24 $$ AbstractHessianOutput out-->Line_53 $$ out.setSerializerFactory(this.serializerFactory)[ FD ]
Line_20 $$ int code = isToUse.read()-->Line_25 $$ if (code == 'H') [ FD ]
Line_17 $$ isToUse = new BufferedInputStream(isToUse)-->Line_20 $$ int code = isToUse.read()[ FD ]
Line_21 $$ int major-->Line_43 $$ if (major >= 2) [ FD ]
Line_17 $$ isToUse = new BufferedInputStream(isToUse)-->Line_63 $$ isToUse.close()[ FD ]
Line_32 $$ out = new Hessian2Output(osToUse)-->Line_44 $$ out = new Hessian2Output(osToUse)[ FD ]
Line_2 $$ protected void doInvoke(HessianSkeleton skeleton, InputStream inputStream, OutputStream outputStream) throws Throwable -->Line_3 $$ ClassLoader originalClassLoader = overrideThreadContextClassLoader()[ CD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_18 $$ isToUse.mark(1)[ FD ]
Line_7 $$ if (this.debugLogger != null && this.debugLogger.isDebugEnabled()) -->Line_9 $$ HessianDebugInputStream dis = new HessianDebugInputStream(inputStream, debugWriter)[ CD ]
Line_17 $$ isToUse = new BufferedInputStream(isToUse)-->Line_26 $$ major = isToUse.read()[ FD ]
Line_36 $$ in = new Hessian2Input(isToUse)-->Line_42 $$ in = new HessianInput(isToUse)[ FD ]
Line_7 $$ if (this.debugLogger != null && this.debugLogger.isDebugEnabled()) -->Line_10 $$ HessianDebugOutputStream dos = new HessianDebugOutputStream(outputStream, debugWriter)[ CD ]
Line_46 $$ out = new HessianOutput(osToUse)-->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_24 $$ AbstractHessianOutput out-->Line_44 $$ out = new Hessian2Output(osToUse)[ FD ]
Line_21 $$ int major-->Line_40 $$ major = isToUse.read()[ FD ]
Line_32 $$ out = new Hessian2Output(osToUse)-->Line_53 $$ out.setSerializerFactory(this.serializerFactory)[ FD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_41 $$ minor = isToUse.read()[ FD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_40 $$ major = isToUse.read()[ FD ]
Line_20 $$ int code = isToUse.read()-->Line_34 $$ if (code == 'C') [ FD ]
Line_22 $$ int minor-->Line_27 $$ minor = isToUse.read()[ FD ]
Line_23 $$ AbstractHessianInput in-->Line_36 $$ in = new Hessian2Input(isToUse)[ FD ]
Line_31 $$ in = new Hessian2Input(isToUse)-->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_27 $$ minor = isToUse.read()[ FD ]
Line_37 $$ out = new Hessian2Output(osToUse)-->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_3 $$ ClassLoader originalClassLoader = overrideThreadContextClassLoader()-->Line_73 $$ resetThreadContextClassLoader(originalClassLoader)[ FD ]
Line_46 $$ out = new HessianOutput(osToUse)-->Line_53 $$ out.setSerializerFactory(this.serializerFactory)[ FD ]
Line_23 $$ AbstractHessianInput in-->Line_62 $$ in.close()[ FD ]
Line_23 $$ AbstractHessianInput in-->Line_38 $$ in.readCall()[ FD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_20 $$ int code = isToUse.read()[ FD ]
Line_17 $$ isToUse = new BufferedInputStream(isToUse)-->Line_41 $$ minor = isToUse.read()[ FD ]
Line_13 $$ isToUse = dis-->Line_16 $$ if (!isToUse.markSupported()) [ FD ]
Line_21 $$ int major-->Line_28 $$ if (major != 0x02) [ FD ]
Line_13 $$ isToUse = dis-->Line_20 $$ int code = isToUse.read()[ FD ]
Line_37 $$ out = new Hessian2Output(osToUse)-->Line_67 $$ out.close()[ FD ]
Line_40 $$ major = isToUse.read()-->Line_43 $$ if (major >= 2) [ FD ]
Line_7 $$ if (this.debugLogger != null && this.debugLogger.isDebugEnabled()) -->Line_13 $$ isToUse = dis[ CD ]
Line_31 $$ in = new Hessian2Input(isToUse)-->Line_62 $$ in.close()[ FD ]
Line_39 $$ if (code == 'c') -->Line_43 $$ if (major >= 2) [ CD ]
Line_32 $$ out = new Hessian2Output(osToUse)-->Line_67 $$ out.close()[ FD ]
Line_42 $$ in = new HessianInput(isToUse)-->Line_56 $$ in.setRemoteResolver(this.remoteResolver)[ FD ]
Line_13 $$ isToUse = dis-->Line_63 $$ isToUse.close()[ FD ]
Line_36 $$ in = new Hessian2Input(isToUse)-->Line_38 $$ in.readCall()[ FD ]
Line_34 $$ if (code == 'C') -->Line_36 $$ in = new Hessian2Input(isToUse)[ CD ]
Line_17 $$ isToUse = new BufferedInputStream(isToUse)-->Line_18 $$ isToUse.mark(1)[ FD ]
Line_2 $$ protected void doInvoke(HessianSkeleton skeleton, InputStream inputStream, OutputStream outputStream) throws Throwable -->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_5 $$ InputStream isToUse = inputStream-->Line_63 $$ isToUse.close()[ FD ]
Line_6 $$ OutputStream osToUse = outputStream-->Line_68 $$ osToUse.close()[ FD ]
Line_24 $$ AbstractHessianOutput out-->Line_46 $$ out = new HessianOutput(osToUse)[ FD ]
Line_39 $$ if (code == 'c') -->Line_41 $$ minor = isToUse.read()[ CD ]
Line_17 $$ isToUse = new BufferedInputStream(isToUse)-->Line_27 $$ minor = isToUse.read()[ FD ]
Line_51 $$ if (this.serializerFactory != null) -->Line_52 $$ in.setSerializerFactory(this.serializerFactory)[ CD ]
Line_24 $$ AbstractHessianOutput out-->Line_67 $$ out.close()[ FD ]
Line_7 $$ if (this.debugLogger != null && this.debugLogger.isDebugEnabled()) -->Line_11 $$ dis.startTop2()[ CD ]
Line_36 $$ in = new Hessian2Input(isToUse)-->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_14 $$ osToUse = dos-->Line_68 $$ osToUse.close()[ FD ]
Line_25 $$ if (code == 'H') -->Line_27 $$ minor = isToUse.read()[ CD ]
Line_44 $$ out = new Hessian2Output(osToUse)-->Line_46 $$ out = new HessianOutput(osToUse)[ FD ]
Line_24 $$ AbstractHessianOutput out-->Line_59 $$ skeleton.invoke(in, out)[ FD ]
Line_16 $$ if (!isToUse.markSupported()) -->Line_17 $$ isToUse = new BufferedInputStream(isToUse)[ CD ]
Line_24 $$ AbstractHessianOutput out-->Line_37 $$ out = new Hessian2Output(osToUse)[ FD ]
