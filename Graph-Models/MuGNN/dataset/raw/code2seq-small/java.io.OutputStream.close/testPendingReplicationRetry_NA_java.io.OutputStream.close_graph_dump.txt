Line_12 $$ Configuration conf = new HdfsConfiguration()-->Line_52 $$ conf = new HdfsConfiguration()[ FD ]
Line_2 $$ public void testPendingReplicationRetry() throws IOException -->Line_3 $$ MiniDFSCluster cluster = null[ CD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_22 $$ cluster.shutdown()[ FD ]
Line_32 $$ if (fileCount == 0) -->Line_38 $$ assertTrue(len > 50)[ CD ]
Line_12 $$ Configuration conf = new HdfsConfiguration()-->Line_13 $$ conf.set(DFSConfigKeys.DFS_REPLICATION_KEY, Integer.toString(numDataNodes))[ FD ]
Line_23 $$ cluster = null-->Line_58 $$ cluster.waitActive()[ FD ]
Line_12 $$ Configuration conf = new HdfsConfiguration()-->Line_54 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY, Integer.toString(2))[ FD ]
Line_2 $$ public void testPendingReplicationRetry() throws IOException -->Line_5 $$ String testFile = "/replication-test-file"[ CD ]
Line_12 $$ Configuration conf = new HdfsConfiguration()-->Line_53 $$ conf.set(DFSConfigKeys.DFS_REPLICATION_KEY, Integer.toString(numDataNodes))[ FD ]
Line_52 $$ conf = new HdfsConfiguration()-->Line_54 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY, Integer.toString(2))[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_62 $$ if (cluster != null) [ FD ]
Line_17 $$ OutputStream out = cluster.getFileSystem().create(testPath)-->Line_18 $$ out.write(buffer)[ FD ]
Line_52 $$ conf = new HdfsConfiguration()-->Line_55 $$ conf.set("dfs.datanode.block.write.timeout.sec", Integer.toString(5))[ FD ]
Line_32 $$ if (fileCount == 0) -->Line_34 $$ assertTrue(blockFile.delete())[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_23 $$ cluster = null[ FD ]
Line_62 $$ if (cluster != null) -->Line_63 $$ cluster.shutdown()[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_16 $$ DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_27 $$ int fileCount = 0-->Line_32 $$ if (fileCount == 0) [ FD ]
Line_29 $$ File blockFile = MiniDFSCluster.getBlockFile(dnIndex, block)-->Line_31 $$ if (blockFile != null && blockFile.exists()) [ FD ]
Line_2 $$ public void testPendingReplicationRetry() throws IOException -->Line_4 $$ int numDataNodes = 4[ CD ]
Line_28 $$ for (int dnIndex = 0; dnIndex < 3; dnIndex++) -->Line_29 $$ File blockFile = MiniDFSCluster.getBlockFile(dnIndex, block)[ FD ]
Line_2 $$ public void testPendingReplicationRetry() throws IOException -->Line_8 $$ for (int i = 0; i < buffer.length; i++) [ CD ]
Line_17 $$ OutputStream out = cluster.getFileSystem().create(testPath)-->Line_19 $$ out.close()[ FD ]
Line_16 $$ DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)-->Line_21 $$ ExtendedBlock block = dfsClient.getNamenode().getBlockLocations(testFile, 0, Long.MAX_VALUE).get(0).getBlock()[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_23 $$ cluster = null[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_17 $$ OutputStream out = cluster.getFileSystem().create(testPath)[ FD ]
Line_31 $$ if (blockFile != null && blockFile.exists()) -->Line_32 $$ if (fileCount == 0) [ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_17 $$ OutputStream out = cluster.getFileSystem().create(testPath)[ FD ]
Line_28 $$ for (int dnIndex = 0; dnIndex < 3; dnIndex++) -->Line_30 $$ LOG.info("Checking for file " + blockFile)[ CD ]
Line_23 $$ cluster = null-->Line_63 $$ cluster.shutdown()[ FD ]
Line_57 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes * 2).format(false).build()-->Line_59 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_57 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes * 2).format(false).build()[ FD ]
Line_5 $$ String testFile = "/replication-test-file"-->Line_20 $$ waitForBlockReplication(testFile, dfsClient.getNamenode(), numDataNodes, -1)[ FD ]
Line_2 $$ public void testPendingReplicationRetry() throws IOException -->Line_7 $$ byte[] buffer = new byte[1024][ CD ]
Line_27 $$ int fileCount = 0-->Line_50 $$ assertEquals(3, fileCount)[ FD ]
Line_21 $$ ExtendedBlock block = dfsClient.getNamenode().getBlockLocations(testFile, 0, Long.MAX_VALUE).get(0).getBlock()-->Line_29 $$ File blockFile = MiniDFSCluster.getBlockFile(dnIndex, block)[ FD ]
Line_23 $$ cluster = null-->Line_57 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes * 2).format(false).build()[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_16 $$ DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_62 $$ if (cluster != null) [ FD ]
Line_24 $$ for (int i = 0; i < 25; i++) -->Line_25 $$ buffer[i] = '0'[ CD ]
Line_7 $$ byte[] buffer = new byte[1024]-->Line_42 $$ blockOut.write(buffer, 0, 25)[ FD ]
Line_4 $$ int numDataNodes = 4-->Line_60 $$ waitForBlockReplication(testFile, dfsClient.getNamenode(), numDataNodes, -1)[ FD ]
Line_7 $$ byte[] buffer = new byte[1024]-->Line_18 $$ out.write(buffer)[ FD ]
Line_29 $$ File blockFile = MiniDFSCluster.getBlockFile(dnIndex, block)-->Line_37 $$ long len = blockFile.length()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_22 $$ cluster.shutdown()[ FD ]
Line_5 $$ String testFile = "/replication-test-file"-->Line_21 $$ ExtendedBlock block = dfsClient.getNamenode().getBlockLocations(testFile, 0, Long.MAX_VALUE).get(0).getBlock()[ FD ]
Line_8 $$ for (int i = 0; i < buffer.length; i++) -->Line_9 $$ buffer[i] = '1'[ CD ]
Line_57 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes * 2).format(false).build()-->Line_58 $$ cluster.waitActive()[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_59 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_32 $$ if (fileCount == 0) -->Line_33 $$ LOG.info("Deleting file " + blockFile)[ CD ]
Line_4 $$ int numDataNodes = 4-->Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()[ FD ]
Line_59 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)-->Line_60 $$ waitForBlockReplication(testFile, dfsClient.getNamenode(), numDataNodes, -1)[ FD ]
Line_23 $$ cluster = null-->Line_62 $$ if (cluster != null) [ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_63 $$ cluster.shutdown()[ FD ]
Line_16 $$ DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)-->Line_59 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_15 $$ cluster.waitActive()[ FD ]
Line_32 $$ if (fileCount == 0) -->Line_37 $$ long len = blockFile.length()[ CD ]
Line_39 $$ RandomAccessFile blockOut = new RandomAccessFile(blockFile, "rw")-->Line_44 $$ blockOut.close()[ FD ]
Line_5 $$ String testFile = "/replication-test-file"-->Line_60 $$ waitForBlockReplication(testFile, dfsClient.getNamenode(), numDataNodes, -1)[ FD ]
Line_8 $$ for (int i = 0; i < buffer.length; i++) -->Line_24 $$ for (int i = 0; i < 25; i++) [ FD ]
Line_16 $$ DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)-->Line_60 $$ waitForBlockReplication(testFile, dfsClient.getNamenode(), numDataNodes, -1)[ FD ]
Line_32 $$ if (fileCount == 0) -->Line_39 $$ RandomAccessFile blockOut = new RandomAccessFile(blockFile, "rw")[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_58 $$ cluster.waitActive()[ FD ]
Line_16 $$ DFSClient dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)-->Line_20 $$ waitForBlockReplication(testFile, dfsClient.getNamenode(), numDataNodes, -1)[ FD ]
Line_52 $$ conf = new HdfsConfiguration()-->Line_53 $$ conf.set(DFSConfigKeys.DFS_REPLICATION_KEY, Integer.toString(numDataNodes))[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_58 $$ cluster.waitActive()[ FD ]
Line_32 $$ if (fileCount == 0) -->Line_36 $$ LOG.info("Corrupting file " + blockFile)[ CD ]
Line_57 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes * 2).format(false).build()-->Line_63 $$ cluster.shutdown()[ FD ]
Line_28 $$ for (int dnIndex = 0; dnIndex < 3; dnIndex++) -->Line_31 $$ if (blockFile != null && blockFile.exists()) [ CD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_57 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes * 2).format(false).build()[ FD ]
Line_2 $$ public void testPendingReplicationRetry() throws IOException -->Line_6 $$ Path testPath = new Path(testFile)[ CD ]
Line_39 $$ RandomAccessFile blockOut = new RandomAccessFile(blockFile, "rw")-->Line_41 $$ blockOut.seek(len / 3)[ FD ]
Line_12 $$ Configuration conf = new HdfsConfiguration()-->Line_55 $$ conf.set("dfs.datanode.block.write.timeout.sec", Integer.toString(5))[ FD ]
Line_4 $$ int numDataNodes = 4-->Line_53 $$ conf.set(DFSConfigKeys.DFS_REPLICATION_KEY, Integer.toString(numDataNodes))[ FD ]
Line_6 $$ Path testPath = new Path(testFile)-->Line_17 $$ OutputStream out = cluster.getFileSystem().create(testPath)[ FD ]
Line_27 $$ int fileCount = 0-->Line_47 $$ fileCount++[ FD ]
Line_28 $$ for (int dnIndex = 0; dnIndex < 3; dnIndex++) -->Line_29 $$ File blockFile = MiniDFSCluster.getBlockFile(dnIndex, block)[ CD ]
Line_57 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes * 2).format(false).build()-->Line_62 $$ if (cluster != null) [ FD ]
Line_29 $$ File blockFile = MiniDFSCluster.getBlockFile(dnIndex, block)-->Line_34 $$ assertTrue(blockFile.delete())[ FD ]
Line_31 $$ if (blockFile != null && blockFile.exists()) -->Line_47 $$ fileCount++[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_63 $$ cluster.shutdown()[ FD ]
Line_4 $$ int numDataNodes = 4-->Line_13 $$ conf.set(DFSConfigKeys.DFS_REPLICATION_KEY, Integer.toString(numDataNodes))[ FD ]
Line_52 $$ conf = new HdfsConfiguration()-->Line_56 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY, "0.75f")[ FD ]
Line_23 $$ cluster = null-->Line_59 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_14 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()[ FD ]
Line_4 $$ int numDataNodes = 4-->Line_20 $$ waitForBlockReplication(testFile, dfsClient.getNamenode(), numDataNodes, -1)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_15 $$ cluster.waitActive()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_59 $$ dfsClient = new DFSClient(new InetSocketAddress("localhost", cluster.getNameNodePort()), conf)[ FD ]
Line_39 $$ RandomAccessFile blockOut = new RandomAccessFile(blockFile, "rw")-->Line_42 $$ blockOut.write(buffer, 0, 25)[ FD ]
Line_12 $$ Configuration conf = new HdfsConfiguration()-->Line_56 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY, "0.75f")[ FD ]
