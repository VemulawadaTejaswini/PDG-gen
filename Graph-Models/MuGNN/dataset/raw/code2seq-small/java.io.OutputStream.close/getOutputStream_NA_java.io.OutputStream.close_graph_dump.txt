Line_2 $$ public OutputStream getOutputStream(@NotNull final VirtualFile file, final Object requestor, final long modStamp, final long timeStamp) throws IOException -->Line_3 $$ return new ByteArrayOutputStream() [ CD ]
Line_10 $$ VFileContentChangeEvent event = new VFileContentChangeEvent(requestor, file, file.getModificationStamp(), modStamp, false)-->Line_26 $$ executeTouch(file, false, event.getModificationStamp())[ FD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_15 $$ OutputStream ioFileStream = delegate.getOutputStream(file, requestor, modStamp, timeStamp)[ CD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_13 $$ publisher.before(events)[ CD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_11 $$ List<VFileContentChangeEvent> events = Collections.singletonList(event)[ CD ]
Line_12 $$ BulkFileListener publisher = myEventBus.syncPublisher(VirtualFileManager.VFS_CHANGES)-->Line_13 $$ publisher.before(events)[ FD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_12 $$ BulkFileListener publisher = myEventBus.syncPublisher(VirtualFileManager.VFS_CHANGES)[ CD ]
Line_2 $$ public OutputStream getOutputStream(@NotNull final VirtualFile file, final Object requestor, final long modStamp, final long timeStamp) throws IOException -->Line_15 $$ OutputStream ioFileStream = delegate.getOutputStream(file, requestor, modStamp, timeStamp)[ FD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_9 $$ ApplicationManager.getApplication().assertWriteAccessAllowed()[ CD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_8 $$ super.close()[ CD ]
Line_16 $$ OutputStream persistenceStream = writeContent(file, delegate.isReadOnly())-->Line_18 $$ persistenceStream.write(buf, 0, count)[ FD ]
Line_15 $$ OutputStream ioFileStream = delegate.getOutputStream(file, requestor, modStamp, timeStamp)-->Line_25 $$ ioFileStream.close()[ FD ]
Line_10 $$ VFileContentChangeEvent event = new VFileContentChangeEvent(requestor, file, file.getModificationStamp(), modStamp, false)-->Line_11 $$ List<VFileContentChangeEvent> events = Collections.singletonList(event)[ FD ]
Line_11 $$ List<VFileContentChangeEvent> events = Collections.singletonList(event)-->Line_13 $$ publisher.before(events)[ FD ]
Line_16 $$ OutputStream persistenceStream = writeContent(file, delegate.isReadOnly())-->Line_24 $$ persistenceStream.close()[ FD ]
Line_14 $$ NewVirtualFileSystem delegate = getDelegate(file)-->Line_16 $$ OutputStream persistenceStream = writeContent(file, delegate.isReadOnly())[ FD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_6 $$ if (closed)[ CD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_16 $$ OutputStream persistenceStream = writeContent(file, delegate.isReadOnly())[ CD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_14 $$ NewVirtualFileSystem delegate = getDelegate(file)[ CD ]
Line_14 $$ NewVirtualFileSystem delegate = getDelegate(file)-->Line_15 $$ OutputStream ioFileStream = delegate.getOutputStream(file, requestor, modStamp, timeStamp)[ FD ]
Line_2 $$ public OutputStream getOutputStream(@NotNull final VirtualFile file, final Object requestor, final long modStamp, final long timeStamp) throws IOException -->Line_16 $$ OutputStream persistenceStream = writeContent(file, delegate.isReadOnly())[ FD ]
Line_6 $$ if (closed)-->Line_7 $$ return[ CD ]
Line_2 $$ public OutputStream getOutputStream(@NotNull final VirtualFile file, final Object requestor, final long modStamp, final long timeStamp) throws IOException -->Line_26 $$ executeTouch(file, false, event.getModificationStamp())[ FD ]
Line_12 $$ BulkFileListener publisher = myEventBus.syncPublisher(VirtualFileManager.VFS_CHANGES)-->Line_27 $$ publisher.after(events)[ FD ]
Line_2 $$ public OutputStream getOutputStream(@NotNull final VirtualFile file, final Object requestor, final long modStamp, final long timeStamp) throws IOException -->Line_14 $$ NewVirtualFileSystem delegate = getDelegate(file)[ FD ]
Line_3 $$ return new ByteArrayOutputStream() -->Line_10 $$ VFileContentChangeEvent event = new VFileContentChangeEvent(requestor, file, file.getModificationStamp(), modStamp, false)[ CD ]
Line_11 $$ List<VFileContentChangeEvent> events = Collections.singletonList(event)-->Line_27 $$ publisher.after(events)[ FD ]
Line_15 $$ OutputStream ioFileStream = delegate.getOutputStream(file, requestor, modStamp, timeStamp)-->Line_21 $$ ioFileStream.write(buf, 0, count)[ FD ]
Line_2 $$ public OutputStream getOutputStream(@NotNull final VirtualFile file, final Object requestor, final long modStamp, final long timeStamp) throws IOException -->Line_10 $$ VFileContentChangeEvent event = new VFileContentChangeEvent(requestor, file, file.getModificationStamp(), modStamp, false)[ FD ]
