Line_2 $$ public void testFailToFlush() throws IOException -->Line_5 $$ fos.close()[ CD ]
Line_2 $$ public void testFailToFlush() throws IOException -->Line_4 $$ fos.write(TEST_STRING_2.getBytes())[ CD ]
Line_2 $$ public void testFailToFlush() throws IOException -->Line_13 $$ assertEquals(TEST_STRING_2, DFSTestUtil.readFile(DST_FILE))[ CD ]
Line_3 $$ FileOutputStream fos = new FileOutputStream(DST_FILE)-->Line_4 $$ fos.write(TEST_STRING_2.getBytes())[ FD ]
Line_2 $$ public void testFailToFlush() throws IOException -->Line_3 $$ FileOutputStream fos = new FileOutputStream(DST_FILE)[ CD ]
Line_2 $$ public void testFailToFlush() throws IOException -->Line_6 $$ OutputStream failingStream = createFailingStream()[ CD ]
Line_2 $$ public void testFailToFlush() throws IOException -->Line_7 $$ failingStream.write(TEST_STRING.getBytes())[ CD ]
Line_6 $$ OutputStream failingStream = createFailingStream()-->Line_7 $$ failingStream.write(TEST_STRING.getBytes())[ FD ]
Line_2 $$ public void testFailToFlush() throws IOException -->Line_14 $$ assertEquals("Temporary file should have been cleaned up", DST_FILE.getName(), Joiner.on(",").join(TEST_DIR.list()))[ CD ]
Line_3 $$ FileOutputStream fos = new FileOutputStream(DST_FILE)-->Line_5 $$ fos.close()[ FD ]
Line_6 $$ OutputStream failingStream = createFailingStream()-->Line_9 $$ failingStream.close()[ FD ]
