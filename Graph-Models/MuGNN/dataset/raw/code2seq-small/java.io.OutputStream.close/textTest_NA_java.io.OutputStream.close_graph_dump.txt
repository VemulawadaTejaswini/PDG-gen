Line_38 $$ byte[] outbytes = "foo".getBytes()-->Line_48 $$ assertTrue("Output doesn't match input", Arrays.equals(outbytes, out.toByteArray()))[ FD ]
Line_30 $$ argv = new String[2]-->Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_19 $$ String[] argv = new String[2]-->Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_70 $$ out = new ByteArrayOutputStream()-->Line_78 $$ out.reset()[ FD ]
Line_43 $$ argv = new String[2]-->Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_41 $$ out = new ByteArrayOutputStream()-->Line_77 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_41 $$ out = new ByteArrayOutputStream()-->Line_70 $$ out = new ByteArrayOutputStream()[ FD ]
Line_2 $$ private void textTest(Path root, Configuration conf) throws Exception -->Line_3 $$ PrintStream bak = null[ CD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_41 $$ out = new ByteArrayOutputStream()[ FD ]
Line_19 $$ String[] argv = new String[2]-->Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_63 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_23 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_7 $$ OutputStream zout = new GZIPOutputStream(fs.create(new Path(root, "file.gz")))-->Line_16 $$ zout.close()[ FD ]
Line_37 $$ OutputStream dout = new DeflaterOutputStream(fs.create(new Path(root, "file.deflate")))-->Line_40 $$ dout.close()[ FD ]
Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_63 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_76 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_77 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_34 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_5 $$ final FileSystem fs = root.getFileSystem(conf)-->Line_53 $$ OutputStream fout = new DataOutputStream(codec.createOutputStream(fs.create(p, true)))[ FD ]
Line_12 $$ char c = Character.forDigit(r.nextInt(26) + 10, 36)-->Line_13 $$ file.write(c)[ FD ]
Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_70 $$ out = new ByteArrayOutputStream()-->Line_77 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_47 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_19 $$ String[] argv = new String[2]-->Line_72 $$ argv = new String[2][ FD ]
Line_67 $$ writebytes = "bar".getBytes()-->Line_77 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_65 $$ out.reset()[ FD ]
Line_57 $$ out = new ByteArrayOutputStream()-->Line_64 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_41 $$ out = new ByteArrayOutputStream()[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_78 $$ out.reset()[ FD ]
Line_43 $$ argv = new String[2]-->Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_41 $$ out = new ByteArrayOutputStream()-->Line_57 $$ out = new ByteArrayOutputStream()[ FD ]
Line_2 $$ private void textTest(Path root, Configuration conf) throws Exception -->Line_5 $$ final FileSystem fs = root.getFileSystem(conf)[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_35 $$ assertTrue("Output doesn't match input", Arrays.equals("Foo\tBar\n".getBytes(), out.toByteArray()))[ FD ]
Line_43 $$ argv = new String[2]-->Line_59 $$ argv = new String[2][ FD ]
Line_66 $$ OutputStream pout = fs.create(new Path(root, "file.txt"))-->Line_68 $$ pout.write(writebytes)[ FD ]
Line_10 $$ ByteArrayOutputStream file = new ByteArrayOutputStream()-->Line_24 $$ assertTrue("Output doesn't match input", Arrays.equals(file.toByteArray(), out.toByteArray()))[ FD ]
Line_2 $$ private void textTest(Path root, Configuration conf) throws Exception -->Line_25 $$ SequenceFile.Writer writer = SequenceFile.createWriter(conf, SequenceFile.Writer.file(new Path(root, "file.gz")), SequenceFile.Writer.keyClass(Text.class), SequenceFile.Writer.valueClass(Text.class))[ FD ]
Line_50 $$ CompressionCodec codec = ReflectionUtils.newInstance(BZip2Codec.class, conf)-->Line_51 $$ String extension = codec.getDefaultExtension()[ FD ]
Line_38 $$ byte[] outbytes = "foo".getBytes()-->Line_39 $$ dout.write(outbytes)[ FD ]
Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_47 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_57 $$ out = new ByteArrayOutputStream()-->Line_78 $$ out.reset()[ FD ]
Line_5 $$ final FileSystem fs = root.getFileSystem(conf)-->Line_7 $$ OutputStream zout = new GZIPOutputStream(fs.create(new Path(root, "file.gz")))[ FD ]
Line_12 $$ char c = Character.forDigit(r.nextInt(26) + 10, 36)-->Line_14 $$ zout.write(c)[ FD ]
Line_19 $$ String[] argv = new String[2]-->Line_30 $$ argv = new String[2][ FD ]
Line_19 $$ String[] argv = new String[2]-->Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_54 $$ byte[] writebytes = "foo".getBytes()-->Line_77 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_52 $$ Path p = new Path(root, "file." + extension)-->Line_53 $$ OutputStream fout = new DataOutputStream(codec.createOutputStream(fs.create(p, true)))[ FD ]
Line_30 $$ argv = new String[2]-->Line_59 $$ argv = new String[2][ FD ]
Line_54 $$ byte[] writebytes = "foo".getBytes()-->Line_55 $$ fout.write(writebytes)[ FD ]
Line_54 $$ byte[] writebytes = "foo".getBytes()-->Line_68 $$ pout.write(writebytes)[ FD ]
Line_11 $$ for (int i = 0; i < 1024; ++i) -->Line_13 $$ file.write(c)[ CD ]
Line_57 $$ out = new ByteArrayOutputStream()-->Line_70 $$ out = new ByteArrayOutputStream()[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_36 $$ out.reset()[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_70 $$ out = new ByteArrayOutputStream()[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_65 $$ out.reset()[ FD ]
Line_25 $$ SequenceFile.Writer writer = SequenceFile.createWriter(conf, SequenceFile.Writer.file(new Path(root, "file.gz")), SequenceFile.Writer.keyClass(Text.class), SequenceFile.Writer.valueClass(Text.class))-->Line_26 $$ writer.append(new Text("Foo"), new Text("Bar"))[ FD ]
Line_30 $$ argv = new String[2]-->Line_43 $$ argv = new String[2][ FD ]
Line_41 $$ out = new ByteArrayOutputStream()-->Line_64 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_43 $$ argv = new String[2]-->Line_72 $$ argv = new String[2][ FD ]
Line_3 $$ PrintStream bak = null-->Line_80 $$ if (null != bak) [ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_49 $$ out.reset()[ FD ]
Line_50 $$ CompressionCodec codec = ReflectionUtils.newInstance(BZip2Codec.class, conf)-->Line_53 $$ OutputStream fout = new DataOutputStream(codec.createOutputStream(fs.create(p, true)))[ FD ]
Line_19 $$ String[] argv = new String[2]-->Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_77 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_2 $$ private void textTest(Path root, Configuration conf) throws Exception -->Line_50 $$ CompressionCodec codec = ReflectionUtils.newInstance(BZip2Codec.class, conf)[ FD ]
Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_63 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_8 $$ Random r = new Random()-->Line_12 $$ char c = Character.forDigit(r.nextInt(26) + 10, 36)[ FD ]
Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_76 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_5 $$ final FileSystem fs = root.getFileSystem(conf)-->Line_37 $$ OutputStream dout = new DeflaterOutputStream(fs.create(new Path(root, "file.deflate")))[ FD ]
Line_9 $$ bak = System.out-->Line_81 $$ System.setOut(bak)[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_78 $$ out.reset()[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_28 $$ out = new ByteArrayOutputStream()[ FD ]
Line_19 $$ String[] argv = new String[2]-->Line_59 $$ argv = new String[2][ FD ]
Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_47 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_11 $$ for (int i = 0; i < 1024; ++i) -->Line_12 $$ char c = Character.forDigit(r.nextInt(26) + 10, 36)[ CD ]
Line_53 $$ OutputStream fout = new DataOutputStream(codec.createOutputStream(fs.create(p, true)))-->Line_55 $$ fout.write(writebytes)[ FD ]
Line_54 $$ byte[] writebytes = "foo".getBytes()-->Line_64 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_9 $$ bak = System.out-->Line_80 $$ if (null != bak) [ FD ]
Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_57 $$ out = new ByteArrayOutputStream()-->Line_77 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_48 $$ assertTrue("Output doesn't match input", Arrays.equals(outbytes, out.toByteArray()))[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_36 $$ out.reset()[ FD ]
Line_30 $$ argv = new String[2]-->Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_5 $$ final FileSystem fs = root.getFileSystem(conf)-->Line_6 $$ fs.mkdirs(root)[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_64 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_19 $$ String[] argv = new String[2]-->Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_5 $$ final FileSystem fs = root.getFileSystem(conf)-->Line_66 $$ OutputStream pout = fs.create(new Path(root, "file.txt"))[ FD ]
Line_66 $$ OutputStream pout = fs.create(new Path(root, "file.txt"))-->Line_69 $$ pout.close()[ FD ]
Line_3 $$ PrintStream bak = null-->Line_81 $$ System.setOut(bak)[ FD ]
Line_59 $$ argv = new String[2]-->Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_76 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_76 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_72 $$ argv = new String[2]-->Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_10 $$ ByteArrayOutputStream file = new ByteArrayOutputStream()-->Line_13 $$ file.write(c)[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_49 $$ out.reset()[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_35 $$ assertTrue("Output doesn't match input", Arrays.equals("Foo\tBar\n".getBytes(), out.toByteArray()))[ FD ]
Line_37 $$ OutputStream dout = new DeflaterOutputStream(fs.create(new Path(root, "file.deflate")))-->Line_39 $$ dout.write(outbytes)[ FD ]
Line_19 $$ String[] argv = new String[2]-->Line_43 $$ argv = new String[2][ FD ]
Line_57 $$ out = new ByteArrayOutputStream()-->Line_65 $$ out.reset()[ FD ]
Line_30 $$ argv = new String[2]-->Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_34 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_67 $$ writebytes = "bar".getBytes()-->Line_68 $$ pout.write(writebytes)[ FD ]
Line_43 $$ argv = new String[2]-->Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_63 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_24 $$ assertTrue("Output doesn't match input", Arrays.equals(file.toByteArray(), out.toByteArray()))[ FD ]
Line_59 $$ argv = new String[2]-->Line_72 $$ argv = new String[2][ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_48 $$ assertTrue("Output doesn't match input", Arrays.equals(outbytes, out.toByteArray()))[ FD ]
Line_59 $$ argv = new String[2]-->Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_3 $$ PrintStream bak = null-->Line_9 $$ bak = System.out[ FD ]
Line_41 $$ out = new ByteArrayOutputStream()-->Line_48 $$ assertTrue("Output doesn't match input", Arrays.equals(outbytes, out.toByteArray()))[ FD ]
Line_53 $$ OutputStream fout = new DataOutputStream(codec.createOutputStream(fs.create(p, true)))-->Line_56 $$ fout.close()[ FD ]
Line_41 $$ out = new ByteArrayOutputStream()-->Line_78 $$ out.reset()[ FD ]
Line_11 $$ for (int i = 0; i < 1024; ++i) -->Line_14 $$ zout.write(c)[ CD ]
Line_54 $$ byte[] writebytes = "foo".getBytes()-->Line_67 $$ writebytes = "bar".getBytes()[ FD ]
Line_30 $$ argv = new String[2]-->Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_64 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_70 $$ out = new ByteArrayOutputStream()[ FD ]
Line_80 $$ if (null != bak) -->Line_81 $$ System.setOut(bak)[ CD ]
Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_41 $$ out = new ByteArrayOutputStream()-->Line_65 $$ out.reset()[ FD ]
Line_17 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_57 $$ out = new ByteArrayOutputStream()[ FD ]
Line_28 $$ out = new ByteArrayOutputStream()-->Line_57 $$ out = new ByteArrayOutputStream()[ FD ]
Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_46 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_62 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_22 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_75 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_25 $$ SequenceFile.Writer writer = SequenceFile.createWriter(conf, SequenceFile.Writer.file(new Path(root, "file.gz")), SequenceFile.Writer.keyClass(Text.class), SequenceFile.Writer.valueClass(Text.class))-->Line_27 $$ writer.close()[ FD ]
Line_2 $$ private void textTest(Path root, Configuration conf) throws Exception -->Line_6 $$ fs.mkdirs(root)[ FD ]
Line_30 $$ argv = new String[2]-->Line_72 $$ argv = new String[2][ FD ]
Line_41 $$ out = new ByteArrayOutputStream()-->Line_49 $$ out.reset()[ FD ]
Line_33 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_76 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_7 $$ OutputStream zout = new GZIPOutputStream(fs.create(new Path(root, "file.gz")))-->Line_14 $$ zout.write(c)[ FD ]
