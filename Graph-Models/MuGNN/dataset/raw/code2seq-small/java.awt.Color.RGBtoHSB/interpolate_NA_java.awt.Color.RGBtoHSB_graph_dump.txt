Line_2 $$ private static int interpolate(float fraction, long lowRgb, long highRgb) -->Line_7 $$ float v = fraction * (highHsv[2] - lowHsv[2]) + lowHsv[2][ CD ]
Line_2 $$ private static int interpolate(float fraction, long lowRgb, long highRgb) -->Line_8 $$ return Color.HSBtoRGB(h, s, v) & 0xFF_FF_FF[ CD ]
Line_7 $$ float v = fraction * (highHsv[2] - lowHsv[2]) + lowHsv[2]-->Line_8 $$ return Color.HSBtoRGB(h, s, v) & 0xFF_FF_FF[ FD ]
Line_2 $$ private static int interpolate(float fraction, long lowRgb, long highRgb) -->Line_4 $$ float[] highHsv = Color.RGBtoHSB(getRed(highRgb), getGreen(highRgb), getBlue(highRgb), null)[ CD ]
Line_2 $$ private static int interpolate(float fraction, long lowRgb, long highRgb) -->Line_6 $$ float s = fraction * (highHsv[1] - lowHsv[1]) + lowHsv[1][ CD ]
Line_2 $$ private static int interpolate(float fraction, long lowRgb, long highRgb) -->Line_3 $$ float[] lowHsv = Color.RGBtoHSB(getRed(lowRgb), getGreen(lowRgb), getBlue(lowRgb), null)[ CD ]
Line_6 $$ float s = fraction * (highHsv[1] - lowHsv[1]) + lowHsv[1]-->Line_8 $$ return Color.HSBtoRGB(h, s, v) & 0xFF_FF_FF[ FD ]
Line_5 $$ float h = fraction * (highHsv[0] - lowHsv[0]) + lowHsv[0]-->Line_8 $$ return Color.HSBtoRGB(h, s, v) & 0xFF_FF_FF[ FD ]
Line_2 $$ private static int interpolate(float fraction, long lowRgb, long highRgb) -->Line_4 $$ float[] highHsv = Color.RGBtoHSB(getRed(highRgb), getGreen(highRgb), getBlue(highRgb), null)[ FD ]
Line_2 $$ private static int interpolate(float fraction, long lowRgb, long highRgb) -->Line_3 $$ float[] lowHsv = Color.RGBtoHSB(getRed(lowRgb), getGreen(lowRgb), getBlue(lowRgb), null)[ FD ]
Line_2 $$ private static int interpolate(float fraction, long lowRgb, long highRgb) -->Line_5 $$ float h = fraction * (highHsv[0] - lowHsv[0]) + lowHsv[0][ CD ]
