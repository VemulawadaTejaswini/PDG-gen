Line_22 $$ if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) -->Line_23 $$ generateCodeForArgument(mv, cf, lastchild, paramDescriptors[p])[ CD ]
Line_28 $$ while (p < childCount) -->Line_33 $$ CodeFlow.insertArrayStore(mv, arraytype)[ CD ]
Line_14 $$ if (isVarargs) -->Line_38 $$ for (int i = 0; i < paramDescriptors.length; i++) [ CD ]
Line_3 $$ String[] paramDescriptors = null-->Line_7 $$ paramDescriptors = CodeFlow.toDescriptors(ctor.getParameterTypes())[ FD ]
Line_28 $$ while (p < childCount) -->Line_30 $$ mv.visitInsn(DUP)[ CD ]
Line_29 $$ SpelNodeImpl child = arguments[p]-->Line_32 $$ generateCodeForArgument(mv, cf, child, arraytype)[ FD ]
Line_5 $$ if (member instanceof Constructor) -->Line_6 $$ Constructor<?> ctor = (Constructor<?>) member[ CD ]
Line_14 $$ if (isVarargs) -->Line_15 $$ int p = 0[ CD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_18 $$ generateCodeForArgument(mv, cf, arguments[p], paramDescriptors[p])[ FD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_23 $$ generateCodeForArgument(mv, cf, lastchild, paramDescriptors[p])[ FD ]
Line_28 $$ while (p < childCount) -->Line_32 $$ generateCodeForArgument(mv, cf, child, arraytype)[ CD ]
Line_5 $$ if (member instanceof Constructor) -->Line_11 $$ paramDescriptors = CodeFlow.toDescriptors(method.getParameterTypes())[ CD ]
Line_4 $$ boolean isVarargs = false-->Line_12 $$ isVarargs = method.isVarArgs()[ FD ]
Line_14 $$ if (isVarargs) -->Line_16 $$ int childCount = arguments.length[ CD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_14 $$ if (isVarargs) [ CD ]
Line_25 $$ arraytype = arraytype.substring(1)-->Line_32 $$ generateCodeForArgument(mv, cf, child, arraytype)[ FD ]
Line_6 $$ Constructor<?> ctor = (Constructor<?>) member-->Line_7 $$ paramDescriptors = CodeFlow.toDescriptors(ctor.getParameterTypes())[ FD ]
Line_22 $$ if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) -->Line_26 $$ CodeFlow.insertNewArrayCode(mv, childCount - p, arraytype)[ CD ]
Line_20 $$ SpelNodeImpl lastchild = (childCount == 0 ? null : arguments[childCount - 1])-->Line_23 $$ generateCodeForArgument(mv, cf, lastchild, paramDescriptors[p])[ FD ]
Line_28 $$ while (p < childCount) -->Line_31 $$ CodeFlow.insertOptimalLoad(mv, arrayindex++)[ CD ]
Line_5 $$ if (member instanceof Constructor) -->Line_12 $$ isVarargs = method.isVarArgs()[ CD ]
Line_22 $$ if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) -->Line_28 $$ while (p < childCount) [ CD ]
Line_27 $$ int arrayindex = 0-->Line_31 $$ CodeFlow.insertOptimalLoad(mv, arrayindex++)[ FD ]
Line_15 $$ int p = 0-->Line_34 $$ p++[ FD ]
Line_17 $$ for (p = 0; p < paramDescriptors.length - 1; p++) -->Line_18 $$ generateCodeForArgument(mv, cf, arguments[p], paramDescriptors[p])[ CD ]
Line_25 $$ arraytype = arraytype.substring(1)-->Line_26 $$ CodeFlow.insertNewArrayCode(mv, childCount - p, arraytype)[ FD ]
Line_25 $$ arraytype = arraytype.substring(1)-->Line_33 $$ CodeFlow.insertArrayStore(mv, arraytype)[ FD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_26 $$ CodeFlow.insertNewArrayCode(mv, childCount - p, arraytype)[ FD ]
Line_38 $$ for (int i = 0; i < paramDescriptors.length; i++) -->Line_39 $$ generateCodeForArgument(mv, cf, arguments[i], paramDescriptors[i])[ CD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_5 $$ if (member instanceof Constructor) [ CD ]
Line_21 $$ String arraytype = paramDescriptors[paramDescriptors.length - 1]-->Line_33 $$ CodeFlow.insertArrayStore(mv, arraytype)[ FD ]
Line_10 $$ Method method = (Method) member-->Line_12 $$ isVarargs = method.isVarArgs()[ FD ]
Line_14 $$ if (isVarargs) -->Line_20 $$ SpelNodeImpl lastchild = (childCount == 0 ? null : arguments[childCount - 1])[ CD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_4 $$ boolean isVarargs = false[ CD ]
Line_5 $$ if (member instanceof Constructor) -->Line_10 $$ Method method = (Method) member[ CD ]
Line_28 $$ while (p < childCount) -->Line_29 $$ SpelNodeImpl child = arguments[p][ CD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_3 $$ String[] paramDescriptors = null[ CD ]
Line_21 $$ String arraytype = paramDescriptors[paramDescriptors.length - 1]-->Line_25 $$ arraytype = arraytype.substring(1)[ FD ]
Line_15 $$ int p = 0-->Line_17 $$ for (p = 0; p < paramDescriptors.length - 1; p++) [ FD ]
Line_16 $$ int childCount = arguments.length-->Line_28 $$ while (p < childCount) [ FD ]
Line_15 $$ int p = 0-->Line_28 $$ while (p < childCount) [ FD ]
Line_17 $$ for (p = 0; p < paramDescriptors.length - 1; p++) -->Line_34 $$ p++[ FD ]
Line_21 $$ String arraytype = paramDescriptors[paramDescriptors.length - 1]-->Line_22 $$ if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) [ FD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_39 $$ generateCodeForArgument(mv, cf, arguments[i], paramDescriptors[i])[ FD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_30 $$ mv.visitInsn(DUP)[ FD ]
Line_4 $$ boolean isVarargs = false-->Line_8 $$ isVarargs = ctor.isVarArgs()[ FD ]
Line_14 $$ if (isVarargs) -->Line_21 $$ String arraytype = paramDescriptors[paramDescriptors.length - 1][ CD ]
Line_7 $$ paramDescriptors = CodeFlow.toDescriptors(ctor.getParameterTypes())-->Line_11 $$ paramDescriptors = CodeFlow.toDescriptors(method.getParameterTypes())[ FD ]
Line_5 $$ if (member instanceof Constructor) -->Line_8 $$ isVarargs = ctor.isVarArgs()[ CD ]
Line_8 $$ isVarargs = ctor.isVarArgs()-->Line_12 $$ isVarargs = method.isVarArgs()[ FD ]
Line_22 $$ if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) -->Line_25 $$ arraytype = arraytype.substring(1)[ CD ]
Line_3 $$ String[] paramDescriptors = null-->Line_11 $$ paramDescriptors = CodeFlow.toDescriptors(method.getParameterTypes())[ FD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_32 $$ generateCodeForArgument(mv, cf, child, arraytype)[ FD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_5 $$ if (member instanceof Constructor) [ FD ]
Line_14 $$ if (isVarargs) -->Line_22 $$ if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) [ CD ]
Line_6 $$ Constructor<?> ctor = (Constructor<?>) member-->Line_8 $$ isVarargs = ctor.isVarArgs()[ FD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_33 $$ CodeFlow.insertArrayStore(mv, arraytype)[ FD ]
Line_17 $$ for (p = 0; p < paramDescriptors.length - 1; p++) -->Line_28 $$ while (p < childCount) [ FD ]
Line_21 $$ String arraytype = paramDescriptors[paramDescriptors.length - 1]-->Line_32 $$ generateCodeForArgument(mv, cf, child, arraytype)[ FD ]
Line_2 $$ protected static void generateCodeForArguments(MethodVisitor mv, CodeFlow cf, Member member, SpelNodeImpl[] arguments) -->Line_31 $$ CodeFlow.insertOptimalLoad(mv, arrayindex++)[ FD ]
Line_21 $$ String arraytype = paramDescriptors[paramDescriptors.length - 1]-->Line_26 $$ CodeFlow.insertNewArrayCode(mv, childCount - p, arraytype)[ FD ]
Line_28 $$ while (p < childCount) -->Line_34 $$ p++[ CD ]
Line_22 $$ if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) -->Line_27 $$ int arrayindex = 0[ CD ]
Line_10 $$ Method method = (Method) member-->Line_11 $$ paramDescriptors = CodeFlow.toDescriptors(method.getParameterTypes())[ FD ]
Line_14 $$ if (isVarargs) -->Line_17 $$ for (p = 0; p < paramDescriptors.length - 1; p++) [ CD ]
Line_5 $$ if (member instanceof Constructor) -->Line_7 $$ paramDescriptors = CodeFlow.toDescriptors(ctor.getParameterTypes())[ CD ]
Line_20 $$ SpelNodeImpl lastchild = (childCount == 0 ? null : arguments[childCount - 1])-->Line_22 $$ if (lastchild != null && lastchild.getExitDescriptor().equals(arraytype)) [ FD ]
