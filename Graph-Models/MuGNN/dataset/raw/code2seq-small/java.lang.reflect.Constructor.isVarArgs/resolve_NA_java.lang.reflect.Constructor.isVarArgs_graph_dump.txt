Line_29 $$ if (matchInfo.isExactMatch()) -->Line_31 $$ if (matchInfo.isCloseMatch()) [ CD ]
Line_7 $$ Arrays.sort(ctors, new Comparator<Constructor<?>>() -->Line_9 $$ int c1pl = c1.getParameterTypes().length[ FD ]
Line_25 $$ if (paramTypes.length == argumentTypes.size()) -->Line_26 $$ matchInfo = ReflectionHelper.compareArguments(paramDescriptors, argumentTypes, typeConverter)[ CD ]
Line_23 $$ if (ctor.isVarArgs() && argumentTypes.size() >= paramTypes.length - 1) -->Line_25 $$ if (paramTypes.length == argumentTypes.size()) [ CD ]
Line_29 $$ if (matchInfo.isExactMatch()) -->Line_30 $$ return new ReflectiveConstructorExecutor(ctor)[ CD ]
Line_40 $$ if (matchRequiringConversion != null) -->Line_41 $$ return new ReflectiveConstructorExecutor(matchRequiringConversion)[ CD ]
Line_2 $$ public ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_26 $$ matchInfo = ReflectionHelper.compareArguments(paramDescriptors, argumentTypes, typeConverter)[ FD ]
Line_6 $$ Constructor<?>[] ctors = type.getConstructors()-->Line_7 $$ Arrays.sort(ctors, new Comparator<Constructor<?>>() [ FD ]
Line_23 $$ if (ctor.isVarArgs() && argumentTypes.size() >= paramTypes.length - 1) -->Line_24 $$ matchInfo = ReflectionHelper.compareArgumentsVarargs(paramDescriptors, argumentTypes, typeConverter)[ CD ]
Line_2 $$ public ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_23 $$ if (ctor.isVarArgs() && argumentTypes.size() >= paramTypes.length - 1) [ FD ]
Line_2 $$ public ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_24 $$ matchInfo = ReflectionHelper.compareArgumentsVarargs(paramDescriptors, argumentTypes, typeConverter)[ FD ]
Line_2 $$ public ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_5 $$ Class<?> type = context.getTypeLocator().findType(typeName)[ FD ]
Line_7 $$ Arrays.sort(ctors, new Comparator<Constructor<?>>() -->Line_9 $$ int c1pl = c1.getParameterTypes().length[ CD ]
Line_5 $$ Class<?> type = context.getTypeLocator().findType(typeName)-->Line_6 $$ Constructor<?>[] ctors = type.getConstructors()[ FD ]
Line_28 $$ if (matchInfo != null) -->Line_29 $$ if (matchInfo.isExactMatch()) [ CD ]
Line_4 $$ TypeConverter typeConverter = context.getTypeConverter()-->Line_26 $$ matchInfo = ReflectionHelper.compareArguments(paramDescriptors, argumentTypes, typeConverter)[ FD ]
Line_38 $$ if (closeMatch != null) -->Line_40 $$ if (matchRequiringConversion != null) [ CD ]
Line_40 $$ if (matchRequiringConversion != null) -->Line_43 $$ return null[ CD ]
Line_2 $$ public ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_25 $$ if (paramTypes.length == argumentTypes.size()) [ FD ]
Line_7 $$ Arrays.sort(ctors, new Comparator<Constructor<?>>() -->Line_10 $$ int c2pl = c2.getParameterTypes().length[ FD ]
Line_19 $$ for (int i = 0; i < paramTypes.length; i++) -->Line_20 $$ paramDescriptors.add(new TypeDescriptor(new MethodParameter(ctor, i)))[ CD ]
Line_38 $$ if (closeMatch != null) -->Line_39 $$ return new ReflectiveConstructorExecutor(closeMatch)[ CD ]
Line_2 $$ public ConstructorExecutor resolve(EvaluationContext context, String typeName, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_4 $$ TypeConverter typeConverter = context.getTypeConverter()[ FD ]
Line_7 $$ Arrays.sort(ctors, new Comparator<Constructor<?>>() -->Line_10 $$ int c2pl = c2.getParameterTypes().length[ CD ]
Line_4 $$ TypeConverter typeConverter = context.getTypeConverter()-->Line_24 $$ matchInfo = ReflectionHelper.compareArgumentsVarargs(paramDescriptors, argumentTypes, typeConverter)[ FD ]
Line_7 $$ Arrays.sort(ctors, new Comparator<Constructor<?>>() -->Line_11 $$ return (c1pl < c2pl ? -1 : (c1pl > c2pl ? 1 : 0))[ CD ]
Line_31 $$ if (matchInfo.isCloseMatch()) -->Line_33 $$ if (matchInfo.isMatchRequiringConversion()) [ CD ]
