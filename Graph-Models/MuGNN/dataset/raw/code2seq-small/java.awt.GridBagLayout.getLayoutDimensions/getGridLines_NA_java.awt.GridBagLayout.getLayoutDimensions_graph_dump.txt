Line_2 $$ private static int[] getGridLines(final RadContainer container, final int rowColIndex, final int delta) -->Line_13 $$ return result[ CD ]
Line_3 $$ final GridBagLayout gridBag = getGridBag(container)-->Line_4 $$ Point layoutOrigin = gridBag.getLayoutOrigin()[ FD ]
Line_3 $$ final GridBagLayout gridBag = getGridBag(container)-->Line_5 $$ int[][] layoutDimensions = gridBag.getLayoutDimensions()[ FD ]
Line_7 $$ if (result.length > 0) -->Line_8 $$ result[0] = (rowColIndex == 0) ? layoutOrigin.x : layoutOrigin.y[ CD ]
Line_2 $$ private static int[] getGridLines(final RadContainer container, final int rowColIndex, final int delta) -->Line_4 $$ Point layoutOrigin = gridBag.getLayoutOrigin()[ CD ]
Line_2 $$ private static int[] getGridLines(final RadContainer container, final int rowColIndex, final int delta) -->Line_7 $$ if (result.length > 0) [ CD ]
Line_7 $$ if (result.length > 0) -->Line_9 $$ for (int i = 1; i < result.length; i++) [ CD ]
Line_2 $$ private static int[] getGridLines(final RadContainer container, final int rowColIndex, final int delta) -->Line_5 $$ int[][] layoutDimensions = gridBag.getLayoutDimensions()[ CD ]
Line_9 $$ for (int i = 1; i < result.length; i++) -->Line_10 $$ result[i] = result[i - 1] + layoutDimensions[rowColIndex][i - 1][ CD ]
Line_2 $$ private static int[] getGridLines(final RadContainer container, final int rowColIndex, final int delta) -->Line_3 $$ final GridBagLayout gridBag = getGridBag(container)[ CD ]
Line_2 $$ private static int[] getGridLines(final RadContainer container, final int rowColIndex, final int delta) -->Line_6 $$ int[] result = new int[layoutDimensions[rowColIndex].length + delta][ CD ]
Line_2 $$ private static int[] getGridLines(final RadContainer container, final int rowColIndex, final int delta) -->Line_3 $$ final GridBagLayout gridBag = getGridBag(container)[ FD ]
