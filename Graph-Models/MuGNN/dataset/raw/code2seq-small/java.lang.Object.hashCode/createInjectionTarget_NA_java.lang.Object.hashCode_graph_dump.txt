Line_8 $$ type = transformer.getEnhancedAnnotatedType(clazz, bdaId)-->Line_10 $$ if (Beans.getBeanConstructor(type) == null) [ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_4 $$ final Class<T> clazz = (Class<T>) componentClass[ CD ]
Line_13 $$ WeldInjectionTargetBuilder<T> builder = beanManager.createInjectionTargetBuilder(type)-->Line_15 $$ builder.setResourceInjectionEnabled(false)[ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_15 $$ builder.setResourceInjectionEnabled(false)[ CD ]
Line_13 $$ WeldInjectionTargetBuilder<T> builder = beanManager.createInjectionTargetBuilder(type)-->Line_17 $$ return builder.build()[ FD ]
Line_4 $$ final Class<T> clazz = (Class<T>) componentClass-->Line_5 $$ EnhancedAnnotatedType<T> type = transformer.getEnhancedAnnotatedType(clazz, beanManager.getId())[ FD ]
Line_6 $$ if (!type.getJavaClass().equals(componentClass)) -->Line_8 $$ type = transformer.getEnhancedAnnotatedType(clazz, bdaId)[ CD ]
Line_5 $$ EnhancedAnnotatedType<T> type = transformer.getEnhancedAnnotatedType(clazz, beanManager.getId())-->Line_13 $$ WeldInjectionTargetBuilder<T> builder = beanManager.createInjectionTargetBuilder(type)[ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_10 $$ if (Beans.getBeanConstructor(type) == null) [ CD ]
Line_3 $$ final ClassTransformer transformer = beanManager.getServices().get(ClassTransformer.class)-->Line_8 $$ type = transformer.getEnhancedAnnotatedType(clazz, bdaId)[ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_13 $$ WeldInjectionTargetBuilder<T> builder = beanManager.createInjectionTargetBuilder(type)[ CD ]
Line_7 $$ final String bdaId = beanManager.getId() + componentClass.getClassLoader().hashCode()-->Line_8 $$ type = transformer.getEnhancedAnnotatedType(clazz, bdaId)[ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_14 $$ builder.setBean(bean)[ CD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_6 $$ if (!type.getJavaClass().equals(componentClass)) [ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_3 $$ final ClassTransformer transformer = beanManager.getServices().get(ClassTransformer.class)[ CD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_11 $$ return beanManager.getInjectionTargetFactory(type).createNonProducibleInjectionTarget()[ FD ]
Line_13 $$ WeldInjectionTargetBuilder<T> builder = beanManager.createInjectionTargetBuilder(type)-->Line_19 $$ return builder.setInterceptionEnabled(false).setTargetClassLifecycleCallbacksEnabled(false).setDecorationEnabled(false).build()[ FD ]
Line_5 $$ EnhancedAnnotatedType<T> type = transformer.getEnhancedAnnotatedType(clazz, beanManager.getId())-->Line_10 $$ if (Beans.getBeanConstructor(type) == null) [ FD ]
Line_5 $$ EnhancedAnnotatedType<T> type = transformer.getEnhancedAnnotatedType(clazz, beanManager.getId())-->Line_8 $$ type = transformer.getEnhancedAnnotatedType(clazz, bdaId)[ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_7 $$ final String bdaId = beanManager.getId() + componentClass.getClassLoader().hashCode()[ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_6 $$ if (!type.getJavaClass().equals(componentClass)) [ CD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_5 $$ EnhancedAnnotatedType<T> type = transformer.getEnhancedAnnotatedType(clazz, beanManager.getId())[ FD ]
Line_8 $$ type = transformer.getEnhancedAnnotatedType(clazz, bdaId)-->Line_11 $$ return beanManager.getInjectionTargetFactory(type).createNonProducibleInjectionTarget()[ FD ]
Line_6 $$ if (!type.getJavaClass().equals(componentClass)) -->Line_7 $$ final String bdaId = beanManager.getId() + componentClass.getClassLoader().hashCode()[ CD ]
Line_4 $$ final Class<T> clazz = (Class<T>) componentClass-->Line_8 $$ type = transformer.getEnhancedAnnotatedType(clazz, bdaId)[ FD ]
Line_8 $$ type = transformer.getEnhancedAnnotatedType(clazz, bdaId)-->Line_13 $$ WeldInjectionTargetBuilder<T> builder = beanManager.createInjectionTargetBuilder(type)[ FD ]
Line_13 $$ WeldInjectionTargetBuilder<T> builder = beanManager.createInjectionTargetBuilder(type)-->Line_14 $$ builder.setBean(bean)[ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_5 $$ EnhancedAnnotatedType<T> type = transformer.getEnhancedAnnotatedType(clazz, beanManager.getId())[ CD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_3 $$ final ClassTransformer transformer = beanManager.getServices().get(ClassTransformer.class)[ FD ]
Line_5 $$ EnhancedAnnotatedType<T> type = transformer.getEnhancedAnnotatedType(clazz, beanManager.getId())-->Line_11 $$ return beanManager.getInjectionTargetFactory(type).createNonProducibleInjectionTarget()[ FD ]
Line_16 $$ if (interceptionSupport) -->Line_19 $$ return builder.setInterceptionEnabled(false).setTargetClassLifecycleCallbacksEnabled(false).setDecorationEnabled(false).build()[ CD ]
Line_16 $$ if (interceptionSupport) -->Line_17 $$ return builder.build()[ CD ]
Line_5 $$ EnhancedAnnotatedType<T> type = transformer.getEnhancedAnnotatedType(clazz, beanManager.getId())-->Line_6 $$ if (!type.getJavaClass().equals(componentClass)) [ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_14 $$ builder.setBean(bean)[ FD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_16 $$ if (interceptionSupport) [ CD ]
Line_3 $$ final ClassTransformer transformer = beanManager.getServices().get(ClassTransformer.class)-->Line_5 $$ EnhancedAnnotatedType<T> type = transformer.getEnhancedAnnotatedType(clazz, beanManager.getId())[ FD ]
Line_10 $$ if (Beans.getBeanConstructor(type) == null) -->Line_11 $$ return beanManager.getInjectionTargetFactory(type).createNonProducibleInjectionTarget()[ CD ]
Line_2 $$ public static <T> WeldInjectionTarget<T> createInjectionTarget(Class<?> componentClass, Bean<T> bean, BeanManagerImpl beanManager, boolean interceptionSupport) -->Line_13 $$ WeldInjectionTargetBuilder<T> builder = beanManager.createInjectionTargetBuilder(type)[ FD ]
