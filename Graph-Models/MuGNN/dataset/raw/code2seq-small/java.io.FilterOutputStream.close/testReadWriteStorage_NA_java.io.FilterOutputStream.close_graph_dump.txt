Line_6 $$ Text service1 = new Text("service1")-->Line_11 $$ token1.setService(service1)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_17 $$ Map<Text, byte[]> m = new HashMap<Text, byte[]>(10)[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_31 $$ Collection<Token<? extends TokenIdentifier>> list = ts.getAllTokens()[ CD ]
Line_34 $$ boolean foundSecond = false-->Line_40 $$ foundSecond = true[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_8 $$ Collection<Text> services = new ArrayList<Text>()[ CD ]
Line_7 $$ Text service2 = new Text("service2")-->Line_12 $$ token2.setService(service2)[ FD ]
Line_28 $$ ts = new Credentials()-->Line_47 $$ byte[] kTS = ts.getSecretKey(a)[ FD ]
Line_4 $$ Token<T> token1 = new Token()-->Line_11 $$ token1.setService(service1)[ FD ]
Line_27 $$ DataInputStream dis = new DataInputStream(new FileInputStream(tmpFileName))-->Line_30 $$ dis.close()[ FD ]
Line_19 $$ Key key = kg.generateKey()-->Line_20 $$ m.put(new Text(alias + i), key.getEncoded())[ FD ]
Line_35 $$ for (Token<? extends TokenIdentifier> token : list) -->Line_39 $$ if (token.getService().equals(service2)) [ FD ]
Line_3 $$ Credentials ts = new Credentials()-->Line_14 $$ ts.addToken(new Text("sometoken2"), token2)[ FD ]
Line_7 $$ Text service2 = new Text("service2")-->Line_39 $$ if (token.getService().equals(service2)) [ FD ]
Line_44 $$ int mapLen = m.size()-->Line_45 $$ assertEquals("wrong number of keys in the Storage", mapLen, ts.numberOfSecretKeys())[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_10 $$ services.add(service2)[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_32 $$ assertEquals("getAllTokens should return collection of size 2", list.size(), 2)[ CD ]
Line_47 $$ byte[] kTS = ts.getSecretKey(a)-->Line_49 $$ assertTrue("keys don't match for " + a, WritableComparator.compareBytes(kTS, 0, kTS.length, kLocal, 0, kLocal.length) == 0)[ FD ]
Line_3 $$ Credentials ts = new Credentials()-->Line_28 $$ ts = new Credentials()[ FD ]
Line_15 $$ final KeyGenerator kg = KeyGenerator.getInstance(DEFAULT_HMAC_ALGORITHM)-->Line_19 $$ Key key = kg.generateKey()[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_26 $$ dos.close()[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_45 $$ assertEquals("wrong number of keys in the Storage", mapLen, ts.numberOfSecretKeys())[ CD ]
Line_18 $$ for (int i = 0; i < 10; i++) -->Line_19 $$ Key key = kg.generateKey()[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_3 $$ Credentials ts = new Credentials()[ CD ]
Line_7 $$ Text service2 = new Text("service2")-->Line_10 $$ services.add(service2)[ FD ]
Line_24 $$ DataOutputStream dos = new DataOutputStream(new FileOutputStream(tmpFileName))-->Line_25 $$ ts.write(dos)[ FD ]
Line_3 $$ Credentials ts = new Credentials()-->Line_29 $$ ts.readFields(dis)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_6 $$ Text service1 = new Text("service1")[ CD ]
Line_4 $$ Token<T> token1 = new Token()-->Line_13 $$ ts.addToken(new Text("sometoken1"), token1)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_33 $$ boolean foundFirst = false[ CD ]
Line_36 $$ if (token.getService().equals(service1)) -->Line_37 $$ foundFirst = true[ CD ]
Line_3 $$ Credentials ts = new Credentials()-->Line_13 $$ ts.addToken(new Text("sometoken1"), token1)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_13 $$ ts.addToken(new Text("sometoken1"), token1)[ CD ]
Line_6 $$ Text service1 = new Text("service1")-->Line_9 $$ services.add(service1)[ FD ]
Line_23 $$ File tmpFileName = new File(tmpDir, "tokenStorageTest")-->Line_51 $$ tmpFileName.delete()[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_44 $$ int mapLen = m.size()[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_34 $$ boolean foundSecond = false[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_28 $$ ts = new Credentials()[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_5 $$ Token<T> token2 = new Token()[ CD ]
Line_18 $$ for (int i = 0; i < 10; i++) -->Line_21 $$ ts.addSecretKey(new Text(alias + i), key.getEncoded())[ CD ]
Line_3 $$ Credentials ts = new Credentials()-->Line_25 $$ ts.write(dos)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_27 $$ DataInputStream dis = new DataInputStream(new FileInputStream(tmpFileName))[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_29 $$ ts.readFields(dis)[ CD ]
Line_18 $$ for (int i = 0; i < 10; i++) -->Line_20 $$ m.put(new Text(alias + i), key.getEncoded())[ CD ]
Line_17 $$ Map<Text, byte[]> m = new HashMap<Text, byte[]>(10)-->Line_46 $$ for (Text a : m.keySet()) [ FD ]
Line_8 $$ Collection<Text> services = new ArrayList<Text>()-->Line_9 $$ services.add(service1)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_4 $$ Token<T> token1 = new Token()[ CD ]
Line_6 $$ Text service1 = new Text("service1")-->Line_36 $$ if (token.getService().equals(service1)) [ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_9 $$ services.add(service1)[ CD ]
Line_46 $$ for (Text a : m.keySet()) -->Line_48 $$ byte[] kLocal = m.get(a)[ FD ]
Line_35 $$ for (Token<? extends TokenIdentifier> token : list) -->Line_36 $$ if (token.getService().equals(service1)) [ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_43 $$ assertTrue("Tokens for services service1 and service2 must be present", foundFirst && foundSecond)[ CD ]
Line_3 $$ Credentials ts = new Credentials()-->Line_47 $$ byte[] kTS = ts.getSecretKey(a)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_18 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_3 $$ Credentials ts = new Credentials()-->Line_45 $$ assertEquals("wrong number of keys in the Storage", mapLen, ts.numberOfSecretKeys())[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_12 $$ token2.setService(service2)[ CD ]
Line_48 $$ byte[] kLocal = m.get(a)-->Line_49 $$ assertTrue("keys don't match for " + a, WritableComparator.compareBytes(kTS, 0, kTS.length, kLocal, 0, kLocal.length) == 0)[ FD ]
Line_27 $$ DataInputStream dis = new DataInputStream(new FileInputStream(tmpFileName))-->Line_29 $$ ts.readFields(dis)[ FD ]
Line_3 $$ Credentials ts = new Credentials()-->Line_31 $$ Collection<Token<? extends TokenIdentifier>> list = ts.getAllTokens()[ FD ]
Line_39 $$ if (token.getService().equals(service2)) -->Line_40 $$ foundSecond = true[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_30 $$ dis.close()[ CD ]
Line_8 $$ Collection<Text> services = new ArrayList<Text>()-->Line_10 $$ services.add(service2)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_16 $$ String alias = "alias"[ CD ]
Line_17 $$ Map<Text, byte[]> m = new HashMap<Text, byte[]>(10)-->Line_48 $$ byte[] kLocal = m.get(a)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_24 $$ DataOutputStream dos = new DataOutputStream(new FileOutputStream(tmpFileName))[ CD ]
Line_3 $$ Credentials ts = new Credentials()-->Line_21 $$ ts.addSecretKey(new Text(alias + i), key.getEncoded())[ FD ]
Line_46 $$ for (Text a : m.keySet()) -->Line_47 $$ byte[] kTS = ts.getSecretKey(a)[ FD ]
Line_17 $$ Map<Text, byte[]> m = new HashMap<Text, byte[]>(10)-->Line_44 $$ int mapLen = m.size()[ FD ]
Line_28 $$ ts = new Credentials()-->Line_29 $$ ts.readFields(dis)[ FD ]
Line_24 $$ DataOutputStream dos = new DataOutputStream(new FileOutputStream(tmpFileName))-->Line_26 $$ dos.close()[ FD ]
Line_5 $$ Token<T> token2 = new Token()-->Line_12 $$ token2.setService(service2)[ FD ]
Line_19 $$ Key key = kg.generateKey()-->Line_21 $$ ts.addSecretKey(new Text(alias + i), key.getEncoded())[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_11 $$ token1.setService(service1)[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_23 $$ File tmpFileName = new File(tmpDir, "tokenStorageTest")[ CD ]
Line_5 $$ Token<T> token2 = new Token()-->Line_14 $$ ts.addToken(new Text("sometoken2"), token2)[ FD ]
Line_33 $$ boolean foundFirst = false-->Line_37 $$ foundFirst = true[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_14 $$ ts.addToken(new Text("sometoken2"), token2)[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_25 $$ ts.write(dos)[ CD ]
Line_28 $$ ts = new Credentials()-->Line_45 $$ assertEquals("wrong number of keys in the Storage", mapLen, ts.numberOfSecretKeys())[ FD ]
Line_17 $$ Map<Text, byte[]> m = new HashMap<Text, byte[]>(10)-->Line_20 $$ m.put(new Text(alias + i), key.getEncoded())[ FD ]
Line_28 $$ ts = new Credentials()-->Line_31 $$ Collection<Token<? extends TokenIdentifier>> list = ts.getAllTokens()[ FD ]
Line_31 $$ Collection<Token<? extends TokenIdentifier>> list = ts.getAllTokens()-->Line_32 $$ assertEquals("getAllTokens should return collection of size 2", list.size(), 2)[ FD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_15 $$ final KeyGenerator kg = KeyGenerator.getInstance(DEFAULT_HMAC_ALGORITHM)[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_51 $$ tmpFileName.delete()[ CD ]
Line_2 $$ public <T extends TokenIdentifier> void testReadWriteStorage() throws IOException, NoSuchAlgorithmException -->Line_7 $$ Text service2 = new Text("service2")[ CD ]
