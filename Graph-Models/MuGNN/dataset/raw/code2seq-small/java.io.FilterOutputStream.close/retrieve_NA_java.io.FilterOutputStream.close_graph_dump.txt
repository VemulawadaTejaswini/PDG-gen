Line_7 $$ out = new BufferedOutputStream(new FileOutputStream(file))-->Line_10 $$ if (out != null) [ FD ]
Line_2 $$ public InputStream retrieve(String key, long byteRangeStart) throws IOException -->Line_5 $$ BufferedOutputStream out = null[ CD ]
Line_7 $$ out = new BufferedOutputStream(new FileOutputStream(file))-->Line_8 $$ out.write(data, (int) byteRangeStart, data.length - (int) byteRangeStart)[ FD ]
Line_3 $$ byte[] data = dataMap.get(key)-->Line_8 $$ out.write(data, (int) byteRangeStart, data.length - (int) byteRangeStart)[ FD ]
Line_2 $$ public InputStream retrieve(String key, long byteRangeStart) throws IOException -->Line_3 $$ byte[] data = dataMap.get(key)[ CD ]
Line_2 $$ public InputStream retrieve(String key, long byteRangeStart) throws IOException -->Line_14 $$ return new FileInputStream(file)[ CD ]
Line_5 $$ BufferedOutputStream out = null-->Line_8 $$ out.write(data, (int) byteRangeStart, data.length - (int) byteRangeStart)[ FD ]
Line_2 $$ public InputStream retrieve(String key, long byteRangeStart) throws IOException -->Line_4 $$ File file = createTempFile()[ CD ]
Line_5 $$ BufferedOutputStream out = null-->Line_10 $$ if (out != null) [ FD ]
Line_10 $$ if (out != null) -->Line_11 $$ out.close()[ CD ]
Line_5 $$ BufferedOutputStream out = null-->Line_11 $$ out.close()[ FD ]
Line_7 $$ out = new BufferedOutputStream(new FileOutputStream(file))-->Line_11 $$ out.close()[ FD ]
Line_2 $$ public InputStream retrieve(String key, long byteRangeStart) throws IOException -->Line_3 $$ byte[] data = dataMap.get(key)[ FD ]
Line_5 $$ BufferedOutputStream out = null-->Line_7 $$ out = new BufferedOutputStream(new FileOutputStream(file))[ FD ]
