Line_22 $$ final int lastCrc = crcInput.readInt()-->Line_25 $$ LOG.debug(String.format("project configuration changed: lastCrc = %d, currentCrc = %d, projectRootModificationCount = %d, mavenConfigCrc = %d", lastCrc, crc, projectRootModificationCount, mavenConfigCrc))[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_44 $$ MavenId parentId = mavenProject.getParentId()[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_82 $$ addNonMavenResources(projectConfig)[ CD ]
Line_36 $$ Module module = fileIndex.getModuleForFile(pomXml)-->Line_80 $$ generateManifest(mavenProject, module, resourceConfig)[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_8 $$ if (projectSystemDir == null) [ CD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_48 $$ resourceConfig.directory = FileUtil.toSystemIndependentName(mavenProject.getDirectory())[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_3 $$ if (!myMavenProjectsManager.isMavenizedProject()) [ CD ]
Line_50 $$ for (Map.Entry<String, String> entry : mavenProject.getModelMap().entrySet()) -->Line_52 $$ String value = entry.getValue()[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_13 $$ ProjectFileIndex fileIndex = projectRootManager.getFileIndex()[ CD ]
Line_33 $$ MavenProjectConfiguration projectConfig = new MavenProjectConfiguration()-->Line_82 $$ addNonMavenResources(projectConfig)[ FD ]
Line_83 $$ final Document document = new Document(new Element("maven-project-configuration"))-->Line_84 $$ XmlSerializer.serializeInto(projectConfig, document.getRootElement())[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_64 $$ addEjbClientArtifactConfiguration(module, projectConfig, mavenProject)[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_11 $$ final File mavenConfigFile = new File(projectSystemDir, MavenProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH)[ CD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_62 $$ addResources(resourceConfig.testResources, mavenProject.getTestResources())[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_17 $$ final File crcFile = new File(mavenConfigFile.getParent(), "configuration.crc")[ CD ]
Line_15 $$ final int mavenConfigCrc = myProjectsTree.getFilterConfigCrc(fileIndex)-->Line_25 $$ LOG.debug(String.format("project configuration changed: lastCrc = %d, currentCrc = %d, projectRootModificationCount = %d, mavenConfigCrc = %d", lastCrc, crc, projectRootModificationCount, mavenConfigCrc))[ FD ]
Line_13 $$ ProjectFileIndex fileIndex = projectRootManager.getFileIndex()-->Line_39 $$ if (!Comparing.equal(mavenProject.getDirectoryFile(), fileIndex.getContentRootForFile(pomXml)))[ FD ]
Line_53 $$ if (value != null) -->Line_54 $$ resourceConfig.modelMap.put(key, value)[ CD ]
Line_75 $$ String overwrite = MavenJDOMUtil.findChildValueByPath(pluginConfiguration, "overwrite")-->Line_77 $$ resourceConfig.overwrite = Boolean.parseBoolean(overwrite)[ FD ]
Line_58 $$ Element pluginConfiguration = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_75 $$ String overwrite = MavenJDOMUtil.findChildValueByPath(pluginConfiguration, "overwrite")[ FD ]
Line_20 $$ DataInputStream crcInput = new DataInputStream(new FileInputStream(crcFile))-->Line_22 $$ final int lastCrc = crcInput.readInt()[ FD ]
Line_16 $$ final int crc = mavenConfigCrc + projectRootModificationCount-->Line_23 $$ if (lastCrc == crc)[ FD ]
Line_12 $$ ProjectRootManager projectRootManager = ProjectRootManager.getInstance(myProject)-->Line_14 $$ final int projectRootModificationCount = (int) projectRootManager.getModificationCount()[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_16 $$ final int crc = mavenConfigCrc + projectRootModificationCount[ CD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_18 $$ if (!force) [ FD ]
Line_91 $$ DataOutputStream crcOutput = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(crcFile)))-->Line_93 $$ crcOutput.writeInt(crc)[ FD ]
Line_20 $$ DataInputStream crcInput = new DataInputStream(new FileInputStream(crcFile))-->Line_27 $$ crcInput.close()[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_14 $$ final int projectRootModificationCount = (int) projectRootManager.getModificationCount()[ CD ]
Line_66 $$ final Properties properties = getFilteringProperties(mavenProject)-->Line_67 $$ for (Map.Entry<Object, Object> propEntry : properties.entrySet()) [ FD ]
Line_11 $$ final File mavenConfigFile = new File(projectSystemDir, MavenProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH)-->Line_88 $$ FileUtil.createIfDoesntExist(mavenConfigFile)[ FD ]
Line_12 $$ ProjectRootManager projectRootManager = ProjectRootManager.getInstance(myProject)-->Line_13 $$ ProjectFileIndex fileIndex = projectRootManager.getFileIndex()[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_58 $$ Element pluginConfiguration = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")[ FD ]
Line_72 $$ if (escapeWindowsPaths != null) -->Line_73 $$ resourceConfig.escapeWindowsPaths = Boolean.parseBoolean(escapeWindowsPaths)[ CD ]
Line_71 $$ String escapeWindowsPaths = MavenJDOMUtil.findChildValueByPath(pluginConfiguration, "escapeWindowsPaths")-->Line_72 $$ if (escapeWindowsPaths != null) [ FD ]
Line_33 $$ MavenProjectConfiguration projectConfig = new MavenProjectConfiguration()-->Line_63 $$ addWebResources(module, projectConfig, mavenProject)[ FD ]
Line_23 $$ if (lastCrc == crc)-->Line_24 $$ return[ CD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_49 $$ resourceConfig.delimitersPattern = MavenFilteredPropertyPsiReferenceProvider.getDelimitersPattern(mavenProject).pattern()[ FD ]
Line_44 $$ MavenId parentId = mavenProject.getParentId()-->Line_45 $$ if (parentId != null) [ FD ]
Line_45 $$ if (parentId != null) -->Line_46 $$ resourceConfig.parentId = new MavenIdBean(parentId.getGroupId(), parentId.getArtifactId(), parentId.getVersion())[ CD ]
Line_44 $$ MavenId parentId = mavenProject.getParentId()-->Line_46 $$ resourceConfig.parentId = new MavenIdBean(parentId.getGroupId(), parentId.getArtifactId(), parentId.getVersion())[ FD ]
Line_33 $$ MavenProjectConfiguration projectConfig = new MavenProjectConfiguration()-->Line_64 $$ addEjbClientArtifactConfiguration(module, projectConfig, mavenProject)[ FD ]
Line_58 $$ Element pluginConfiguration = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_59 $$ resourceConfig.outputDirectory = getResourcesPluginGoalOutputDirectory(mavenProject, pluginConfiguration, "resources")[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_57 $$ addEarModelMapEntries(mavenProject, resourceConfig.modelMap)[ FD ]
Line_52 $$ String value = entry.getValue()-->Line_53 $$ if (value != null) [ FD ]
Line_16 $$ final int crc = mavenConfigCrc + projectRootModificationCount-->Line_93 $$ crcOutput.writeInt(crc)[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_65 $$ resourceConfig.filteringExclusions.addAll(MavenProjectsTree.getFilterExclusions(mavenProject))[ FD ]
Line_36 $$ Module module = fileIndex.getModuleForFile(pomXml)-->Line_79 $$ projectConfig.moduleConfigurations.put(module.getName(), resourceConfig)[ FD ]
Line_41 $$ MavenModuleResourceConfiguration resourceConfig = new MavenModuleResourceConfiguration()-->Line_79 $$ projectConfig.moduleConfigurations.put(module.getName(), resourceConfig)[ FD ]
Line_58 $$ Element pluginConfiguration = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_60 $$ resourceConfig.testOutputDirectory = getResourcesPluginGoalOutputDirectory(mavenProject, pluginConfiguration, "testResources")[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_50 $$ for (Map.Entry<String, String> entry : mavenProject.getModelMap().entrySet()) [ FD ]
Line_7 $$ final File projectSystemDir = buildManager.getProjectSystemDirectory(myProject)-->Line_8 $$ if (projectSystemDir == null) [ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_39 $$ if (!Comparing.equal(mavenProject.getDirectoryFile(), fileIndex.getContentRootForFile(pomXml)))[ FD ]
Line_33 $$ MavenProjectConfiguration projectConfig = new MavenProjectConfiguration()-->Line_84 $$ XmlSerializer.serializeInto(projectConfig, document.getRootElement())[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_59 $$ resourceConfig.outputDirectory = getResourcesPluginGoalOutputDirectory(mavenProject, pluginConfiguration, "resources")[ FD ]
Line_22 $$ final int lastCrc = crcInput.readInt()-->Line_23 $$ if (lastCrc == crc)[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_15 $$ final int mavenConfigCrc = myProjectsTree.getFilterConfigCrc(fileIndex)[ CD ]
Line_6 $$ final BuildManager buildManager = BuildManager.getInstance()-->Line_87 $$ buildManager.clearState(myProject)[ FD ]
Line_11 $$ final File mavenConfigFile = new File(projectSystemDir, MavenProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH)-->Line_17 $$ final File crcFile = new File(mavenConfigFile.getParent(), "configuration.crc")[ FD ]
Line_13 $$ ProjectFileIndex fileIndex = projectRootManager.getFileIndex()-->Line_15 $$ final int mavenConfigCrc = myProjectsTree.getFilterConfigCrc(fileIndex)[ FD ]
Line_42 $$ MavenId projectId = mavenProject.getMavenId()-->Line_43 $$ resourceConfig.id = new MavenIdBean(projectId.getGroupId(), projectId.getArtifactId(), projectId.getVersion())[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_60 $$ resourceConfig.testOutputDirectory = getResourcesPluginGoalOutputDirectory(mavenProject, pluginConfiguration, "testResources")[ FD ]
Line_14 $$ final int projectRootModificationCount = (int) projectRootManager.getModificationCount()-->Line_25 $$ LOG.debug(String.format("project configuration changed: lastCrc = %d, currentCrc = %d, projectRootModificationCount = %d, mavenConfigCrc = %d", lastCrc, crc, projectRootModificationCount, mavenConfigCrc))[ FD ]
Line_11 $$ final File mavenConfigFile = new File(projectSystemDir, MavenProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH)-->Line_90 $$ JDOMUtil.writeDocument(document, mavenConfigFile, "\n")[ FD ]
Line_85 $$ buildManager.runCommand(new Runnable() -->Line_88 $$ FileUtil.createIfDoesntExist(mavenConfigFile)[ CD ]
Line_75 $$ String overwrite = MavenJDOMUtil.findChildValueByPath(pluginConfiguration, "overwrite")-->Line_76 $$ if (overwrite != null) [ FD ]
Line_36 $$ Module module = fileIndex.getModuleForFile(pomXml)-->Line_64 $$ addEjbClientArtifactConfiguration(module, projectConfig, mavenProject)[ FD ]
Line_35 $$ VirtualFile pomXml = mavenProject.getFile()-->Line_39 $$ if (!Comparing.equal(mavenProject.getDirectoryFile(), fileIndex.getContentRootForFile(pomXml)))[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_7 $$ final File projectSystemDir = buildManager.getProjectSystemDirectory(myProject)[ CD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_83 $$ final Document document = new Document(new Element("maven-project-configuration"))[ CD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_61 $$ addResources(resourceConfig.resources, mavenProject.getResources())[ FD ]
Line_51 $$ String key = entry.getKey()-->Line_54 $$ resourceConfig.modelMap.put(key, value)[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_63 $$ addWebResources(module, projectConfig, mavenProject)[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_66 $$ final Properties properties = getFilteringProperties(mavenProject)[ FD ]
Line_76 $$ if (overwrite != null) -->Line_77 $$ resourceConfig.overwrite = Boolean.parseBoolean(overwrite)[ CD ]
Line_3 $$ if (!myMavenProjectsManager.isMavenizedProject()) -->Line_4 $$ return[ CD ]
Line_83 $$ final Document document = new Document(new Element("maven-project-configuration"))-->Line_90 $$ JDOMUtil.writeDocument(document, mavenConfigFile, "\n")[ FD ]
Line_67 $$ for (Map.Entry<Object, Object> propEntry : properties.entrySet()) -->Line_68 $$ resourceConfig.properties.put((String) propEntry.getKey(), (String) propEntry.getValue())[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_85 $$ buildManager.runCommand(new Runnable() [ CD ]
Line_58 $$ Element pluginConfiguration = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_70 $$ resourceConfig.escapeString = MavenJDOMUtil.findChildValueByPath(pluginConfiguration, "escapeString", null)[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_35 $$ VirtualFile pomXml = mavenProject.getFile()[ FD ]
Line_6 $$ final BuildManager buildManager = BuildManager.getInstance()-->Line_7 $$ final File projectSystemDir = buildManager.getProjectSystemDirectory(myProject)[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_33 $$ MavenProjectConfiguration projectConfig = new MavenProjectConfiguration()[ CD ]
Line_36 $$ Module module = fileIndex.getModuleForFile(pomXml)-->Line_37 $$ if (module == null)[ FD ]
Line_50 $$ for (Map.Entry<String, String> entry : mavenProject.getModelMap().entrySet()) -->Line_51 $$ String key = entry.getKey()[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_84 $$ XmlSerializer.serializeInto(projectConfig, document.getRootElement())[ CD ]
Line_71 $$ String escapeWindowsPaths = MavenJDOMUtil.findChildValueByPath(pluginConfiguration, "escapeWindowsPaths")-->Line_73 $$ resourceConfig.escapeWindowsPaths = Boolean.parseBoolean(escapeWindowsPaths)[ FD ]
Line_16 $$ final int crc = mavenConfigCrc + projectRootModificationCount-->Line_25 $$ LOG.debug(String.format("project configuration changed: lastCrc = %d, currentCrc = %d, projectRootModificationCount = %d, mavenConfigCrc = %d", lastCrc, crc, projectRootModificationCount, mavenConfigCrc))[ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_18 $$ if (!force) [ CD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_42 $$ MavenId projectId = mavenProject.getMavenId()[ FD ]
Line_85 $$ buildManager.runCommand(new Runnable() -->Line_87 $$ buildManager.clearState(myProject)[ CD ]
Line_58 $$ Element pluginConfiguration = mavenProject.getPluginConfiguration("org.apache.maven.plugins", "maven-resources-plugin")-->Line_71 $$ String escapeWindowsPaths = MavenJDOMUtil.findChildValueByPath(pluginConfiguration, "escapeWindowsPaths")[ FD ]
Line_36 $$ Module module = fileIndex.getModuleForFile(pomXml)-->Line_63 $$ addWebResources(module, projectConfig, mavenProject)[ FD ]
Line_6 $$ final BuildManager buildManager = BuildManager.getInstance()-->Line_85 $$ buildManager.runCommand(new Runnable() [ FD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_6 $$ final BuildManager buildManager = BuildManager.getInstance()[ CD ]
Line_91 $$ DataOutputStream crcOutput = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(crcFile)))-->Line_95 $$ crcOutput.close()[ FD ]
Line_13 $$ ProjectFileIndex fileIndex = projectRootManager.getFileIndex()-->Line_36 $$ Module module = fileIndex.getModuleForFile(pomXml)[ FD ]
Line_35 $$ VirtualFile pomXml = mavenProject.getFile()-->Line_36 $$ Module module = fileIndex.getModuleForFile(pomXml)[ FD ]
Line_34 $$ for (MavenProject mavenProject : myMavenProjectsManager.getProjects()) -->Line_80 $$ generateManifest(mavenProject, module, resourceConfig)[ FD ]
Line_8 $$ if (projectSystemDir == null) -->Line_9 $$ return[ CD ]
Line_2 $$ public void generateBuildConfiguration(boolean force) -->Line_12 $$ ProjectRootManager projectRootManager = ProjectRootManager.getInstance(myProject)[ CD ]
Line_52 $$ String value = entry.getValue()-->Line_54 $$ resourceConfig.modelMap.put(key, value)[ FD ]
Line_41 $$ MavenModuleResourceConfiguration resourceConfig = new MavenModuleResourceConfiguration()-->Line_80 $$ generateManifest(mavenProject, module, resourceConfig)[ FD ]
