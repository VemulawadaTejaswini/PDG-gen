Line_11 $$ final String fullOutputPath = JpsArtifactPathUtil.appendToPath(outputPath, relativePath)-->Line_17 $$ if (outSrcMapping.getState(fullOutputPath) == null) [ FD ]
Line_18 $$ final BufferedInputStream from = new BufferedInputStream(inputStream)-->Line_23 $$ from.close()[ FD ]
Line_17 $$ if (outSrcMapping.getState(fullOutputPath) == null) -->Line_26 $$ outputConsumer.registerOutputFile(outputFile, Collections.singletonList(filePath))[ CD ]
Line_14 $$ if (inputStream == null) -->Line_17 $$ if (outSrcMapping.getState(fullOutputPath) == null) [ CD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_28 $$ outSrcMapping.appendData(fullOutputPath, rootIndex, filePath)[ FD ]
Line_12 $$ final File outputFile = new File(fullOutputPath)-->Line_15 $$ outputFile.mkdir()[ FD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_6 $$ if (logger.isEnabled()) [ CD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_3 $$ if (!myRoot.isFile())[ CD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_9 $$ processEntries(new EntryProcessor() [ CD ]
Line_3 $$ if (!myRoot.isFile())-->Line_4 $$ return[ CD ]
Line_17 $$ if (outSrcMapping.getState(fullOutputPath) == null) -->Line_18 $$ final BufferedInputStream from = new BufferedInputStream(inputStream)[ CD ]
Line_19 $$ final BufferedOutputStream to = new BufferedOutputStream(new FileOutputStream(outputFile))-->Line_24 $$ to.close()[ FD ]
Line_5 $$ ProjectBuilderLogger logger = context.getLoggingManager().getProjectBuilderLogger()-->Line_6 $$ if (logger.isEnabled()) [ FD ]
Line_9 $$ processEntries(new EntryProcessor() -->Line_11 $$ final String fullOutputPath = JpsArtifactPathUtil.appendToPath(outputPath, relativePath)[ CD ]
Line_14 $$ if (inputStream == null) -->Line_15 $$ outputFile.mkdir()[ CD ]
Line_9 $$ processEntries(new EntryProcessor() -->Line_11 $$ final String fullOutputPath = JpsArtifactPathUtil.appendToPath(outputPath, relativePath)[ FD ]
Line_9 $$ processEntries(new EntryProcessor() -->Line_14 $$ if (inputStream == null) [ FD ]
Line_11 $$ final String fullOutputPath = JpsArtifactPathUtil.appendToPath(outputPath, relativePath)-->Line_28 $$ outSrcMapping.appendData(fullOutputPath, rootIndex, filePath)[ FD ]
Line_9 $$ processEntries(new EntryProcessor() -->Line_13 $$ FileUtil.createParentDirs(outputFile)[ CD ]
Line_9 $$ processEntries(new EntryProcessor() -->Line_14 $$ if (inputStream == null) [ CD ]
Line_17 $$ if (outSrcMapping.getState(fullOutputPath) == null) -->Line_19 $$ final BufferedOutputStream to = new BufferedOutputStream(new FileOutputStream(outputFile))[ CD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_7 $$ logger.logCompiledPaths(Collections.singletonList(filePath), IncArtifactBuilder.BUILDER_NAME, "Extracting archive:")[ FD ]
Line_18 $$ final BufferedInputStream from = new BufferedInputStream(inputStream)-->Line_21 $$ FileUtil.copy(from, to)[ FD ]
Line_12 $$ final File outputFile = new File(fullOutputPath)-->Line_26 $$ outputConsumer.registerOutputFile(outputFile, Collections.singletonList(filePath))[ FD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_26 $$ outputConsumer.registerOutputFile(outputFile, Collections.singletonList(filePath))[ FD ]
Line_9 $$ processEntries(new EntryProcessor() -->Line_12 $$ final File outputFile = new File(fullOutputPath)[ CD ]
Line_14 $$ if (inputStream == null) -->Line_28 $$ outSrcMapping.appendData(fullOutputPath, rootIndex, filePath)[ CD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_5 $$ ProjectBuilderLogger logger = context.getLoggingManager().getProjectBuilderLogger()[ CD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_11 $$ final String fullOutputPath = JpsArtifactPathUtil.appendToPath(outputPath, relativePath)[ FD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_17 $$ if (outSrcMapping.getState(fullOutputPath) == null) [ FD ]
Line_12 $$ final File outputFile = new File(fullOutputPath)-->Line_13 $$ FileUtil.createParentDirs(outputFile)[ FD ]
Line_6 $$ if (logger.isEnabled()) -->Line_7 $$ logger.logCompiledPaths(Collections.singletonList(filePath), IncArtifactBuilder.BUILDER_NAME, "Extracting archive:")[ CD ]
Line_5 $$ ProjectBuilderLogger logger = context.getLoggingManager().getProjectBuilderLogger()-->Line_7 $$ logger.logCompiledPaths(Collections.singletonList(filePath), IncArtifactBuilder.BUILDER_NAME, "Extracting archive:")[ FD ]
Line_2 $$ public void copyFromRoot(final String filePath, final int rootIndex, final String outputPath, CompileContext context, final BuildOutputConsumer outputConsumer, final ArtifactOutputToSourceMapping outSrcMapping) throws IOException -->Line_5 $$ ProjectBuilderLogger logger = context.getLoggingManager().getProjectBuilderLogger()[ FD ]
Line_19 $$ final BufferedOutputStream to = new BufferedOutputStream(new FileOutputStream(outputFile))-->Line_21 $$ FileUtil.copy(from, to)[ FD ]
