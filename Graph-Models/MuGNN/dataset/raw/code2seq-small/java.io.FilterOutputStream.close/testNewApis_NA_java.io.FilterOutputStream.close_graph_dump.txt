Line_2 $$ public void testNewApis() throws Exception -->Line_3 $$ Random r = new Random(System.currentTimeMillis())[ CD ]
Line_5 $$ final Path inDir = new Path(tmpBaseDir, "input")-->Line_12 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_8 $$ FileSystem inFs = inDir.getFileSystem(conf)-->Line_11 $$ if (!inFs.mkdirs(inDir)) [ FD ]
Line_5 $$ final Path inDir = new Path(tmpBaseDir, "input")-->Line_11 $$ if (!inFs.mkdirs(inDir)) [ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_17 $$ file.close()[ CD ]
Line_19 $$ Job job = Job.getInstance(conf, "word count")-->Line_21 $$ job.setMapperClass(TokenizerMapper.class)[ FD ]
Line_6 $$ final Path outDir = new Path(tmpBaseDir, "output")-->Line_27 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_5 $$ final Path inDir = new Path(tmpBaseDir, "input")-->Line_8 $$ FileSystem inFs = inDir.getFileSystem(conf)[ FD ]
Line_4 $$ Path tmpBaseDir = new Path("/tmp/wc-" + r.nextInt())-->Line_31 $$ outFs.delete(tmpBaseDir, true)[ FD ]
Line_19 $$ Job job = Job.getInstance(conf, "word count")-->Line_25 $$ job.setOutputValueClass(IntWritable.class)[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_28 $$ assertEquals(job.waitForCompletion(true), true)[ CD ]
Line_9 $$ FileSystem outFs = outDir.getFileSystem(conf)-->Line_10 $$ outFs.delete(outDir, true)[ FD ]
Line_8 $$ FileSystem inFs = inDir.getFileSystem(conf)-->Line_15 $$ DataOutputStream file = inFs.create(new Path(inDir, "part-0"))[ FD ]
Line_19 $$ Job job = Job.getInstance(conf, "word count")-->Line_20 $$ job.setJarByClass(TestLocalModeWithNewApis.class)[ FD ]
Line_19 $$ Job job = Job.getInstance(conf, "word count")-->Line_27 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_11 $$ if (!inFs.mkdirs(inDir)) [ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_26 $$ FileInputFormat.addInputPath(job, inDir)[ CD ]
Line_29 $$ String output = readOutput(outDir, conf)-->Line_30 $$ assertEquals("The\t1\nbrown\t1\nfox\t2\nhas\t1\nmany\t1\n" + "quick\t1\nred\t1\nsilly\t1\nsox\t1\n", output)[ FD ]
Line_6 $$ final Path outDir = new Path(tmpBaseDir, "output")-->Line_9 $$ FileSystem outFs = outDir.getFileSystem(conf)[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_31 $$ outFs.delete(tmpBaseDir, true)[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_4 $$ Path tmpBaseDir = new Path("/tmp/wc-" + r.nextInt())[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_9 $$ FileSystem outFs = outDir.getFileSystem(conf)[ CD ]
Line_19 $$ Job job = Job.getInstance(conf, "word count")-->Line_28 $$ assertEquals(job.waitForCompletion(true), true)[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_19 $$ Job job = Job.getInstance(conf, "word count")[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_24 $$ job.setOutputKeyClass(Text.class)[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_22 $$ job.setCombinerClass(IntSumReducer.class)[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_30 $$ assertEquals("The\t1\nbrown\t1\nfox\t2\nhas\t1\nmany\t1\n" + "quick\t1\nred\t1\nsilly\t1\nsox\t1\n", output)[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_7 $$ String input = "The quick brown fox\nhas many silly\nred fox sox\n"[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_23 $$ job.setReducerClass(IntSumReducer.class)[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_16 $$ file.writeBytes(input)[ CD ]
Line_6 $$ final Path outDir = new Path(tmpBaseDir, "output")-->Line_10 $$ outFs.delete(outDir, true)[ FD ]
Line_9 $$ FileSystem outFs = outDir.getFileSystem(conf)-->Line_31 $$ outFs.delete(tmpBaseDir, true)[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_27 $$ FileOutputFormat.setOutputPath(job, outDir)[ CD ]
Line_6 $$ final Path outDir = new Path(tmpBaseDir, "output")-->Line_29 $$ String output = readOutput(outDir, conf)[ FD ]
Line_19 $$ Job job = Job.getInstance(conf, "word count")-->Line_22 $$ job.setCombinerClass(IntSumReducer.class)[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_8 $$ FileSystem inFs = inDir.getFileSystem(conf)[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_25 $$ job.setOutputValueClass(IntWritable.class)[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_6 $$ final Path outDir = new Path(tmpBaseDir, "output")[ CD ]
Line_15 $$ DataOutputStream file = inFs.create(new Path(inDir, "part-0"))-->Line_17 $$ file.close()[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_29 $$ String output = readOutput(outDir, conf)[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_10 $$ outFs.delete(outDir, true)[ CD ]
Line_5 $$ final Path inDir = new Path(tmpBaseDir, "input")-->Line_26 $$ FileInputFormat.addInputPath(job, inDir)[ FD ]
Line_15 $$ DataOutputStream file = inFs.create(new Path(inDir, "part-0"))-->Line_16 $$ file.writeBytes(input)[ FD ]
Line_3 $$ Random r = new Random(System.currentTimeMillis())-->Line_4 $$ Path tmpBaseDir = new Path("/tmp/wc-" + r.nextInt())[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_15 $$ DataOutputStream file = inFs.create(new Path(inDir, "part-0"))[ CD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_5 $$ final Path inDir = new Path(tmpBaseDir, "input")[ CD ]
Line_7 $$ String input = "The quick brown fox\nhas many silly\nred fox sox\n"-->Line_16 $$ file.writeBytes(input)[ FD ]
Line_19 $$ Job job = Job.getInstance(conf, "word count")-->Line_26 $$ FileInputFormat.addInputPath(job, inDir)[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_21 $$ job.setMapperClass(TokenizerMapper.class)[ CD ]
Line_19 $$ Job job = Job.getInstance(conf, "word count")-->Line_24 $$ job.setOutputKeyClass(Text.class)[ FD ]
Line_2 $$ public void testNewApis() throws Exception -->Line_20 $$ job.setJarByClass(TestLocalModeWithNewApis.class)[ CD ]
Line_19 $$ Job job = Job.getInstance(conf, "word count")-->Line_23 $$ job.setReducerClass(IntSumReducer.class)[ FD ]
