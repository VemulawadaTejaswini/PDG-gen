Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_18 $$ out.close()[ FD ]
Line_2 $$ public void testBytesRead() throws Exception -->Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)[ CD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_13 $$ out.writeFloat(1.0f)[ FD ]
Line_35 $$ int i = tracker.readInt()-->Line_36 $$ assertEquals(1, i)[ FD ]
Line_2 $$ public void testBytesRead() throws Exception -->Line_55 $$ assertEquals(0, tracker.getBytesRead())[ CD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_44 $$ double d = tracker.readDouble()[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_23 $$ boolean bool = tracker.readBoolean()[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_25 $$ assertEquals(1, tracker.getBytesRead())[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_55 $$ assertEquals(0, tracker.getBytesRead())[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_8 $$ out.writeByte(0x1)[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_41 $$ float f = tracker.readFloat()[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_31 $$ assertEquals(4, tracker.getBytesRead())[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_9 $$ out.writeChar('a')[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_35 $$ int i = tracker.readInt()[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_10 $$ out.writeShort(1)[ FD ]
Line_23 $$ boolean bool = tracker.readBoolean()-->Line_24 $$ assertTrue(bool)[ FD ]
Line_2 $$ public void testBytesRead() throws Exception -->Line_5 $$ DataOutputStream out = new DataOutputStream(baos)[ CD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_34 $$ assertEquals((short) 6, tracker.getBytesRead())[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_32 $$ short s = tracker.readShort()[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_37 $$ assertEquals(10, tracker.getBytesRead())[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_14 $$ out.writeDouble(1.0d)[ FD ]
Line_41 $$ float f = tracker.readFloat()-->Line_42 $$ assertEquals(1.0f, f, 0)[ FD ]
Line_47 $$ String str = tracker.readUTF()-->Line_48 $$ assertEquals("abc", str)[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_43 $$ assertEquals(22, tracker.getBytesRead())[ FD ]
Line_38 $$ long l = tracker.readLong()-->Line_39 $$ assertEquals(1L, l)[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_38 $$ long l = tracker.readLong()[ FD ]
Line_4 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_16 $$ testData = baos.toByteArray()[ FD ]
Line_26 $$ byte b = tracker.readByte()-->Line_27 $$ assertEquals(b, 0x1)[ FD ]
Line_3 $$ byte[] testData-->Line_16 $$ testData = baos.toByteArray()[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_50 $$ assertEquals(testData.length, tracker.getBytesRead())[ FD ]
Line_2 $$ public void testBytesRead() throws Exception -->Line_54 $$ tracker.reset(0)[ CD ]
Line_29 $$ char c = tracker.readChar()-->Line_30 $$ assertEquals('a', c)[ FD ]
Line_44 $$ double d = tracker.readDouble()-->Line_45 $$ assertEquals(1.0d, d, 0)[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_49 $$ assertEquals(35, tracker.getBytesRead())[ FD ]
Line_20 $$ DataInputStream in = new DataInputStream(new ByteArrayInputStream(testData))-->Line_52 $$ in.close()[ FD ]
Line_2 $$ public void testBytesRead() throws Exception -->Line_3 $$ byte[] testData[ CD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_46 $$ assertEquals(30, tracker.getBytesRead())[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_47 $$ String str = tracker.readUTF()[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_11 $$ out.writeInt(1)[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_29 $$ char c = tracker.readChar()[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_40 $$ assertEquals(18, tracker.getBytesRead())[ FD ]
Line_2 $$ public void testBytesRead() throws Exception -->Line_4 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testBytesRead() throws Exception -->Line_20 $$ DataInputStream in = new DataInputStream(new ByteArrayInputStream(testData))[ CD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_26 $$ byte b = tracker.readByte()[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_15 $$ out.writeUTF("abc")[ FD ]
Line_32 $$ short s = tracker.readShort()-->Line_33 $$ assertEquals(1, s)[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_12 $$ out.writeLong(1L)[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_28 $$ assertEquals(2, tracker.getBytesRead())[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(baos)-->Line_7 $$ out.writeBoolean(true)[ FD ]
Line_21 $$ BytesReadTracker tracker = new BytesReadTracker(in)-->Line_54 $$ tracker.reset(0)[ FD ]
