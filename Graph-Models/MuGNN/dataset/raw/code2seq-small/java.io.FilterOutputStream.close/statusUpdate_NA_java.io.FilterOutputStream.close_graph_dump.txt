Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_9 $$ DataOutputStream dos = new DataOutputStream(baos)[ CD ]
Line_12 $$ taskStatus = TaskStatus.createTaskStatus(taskStatus.getIsMap())-->Line_18 $$ partialMapProgress[mapTaskIndex] = taskStatus.getProgress()[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_15 $$ int mapTaskIndex = mapIds.indexOf(taskId)[ CD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_4 $$ feedback.setTaskFound(true)[ CD ]
Line_3 $$ AMFeedback feedback = new AMFeedback()-->Line_4 $$ feedback.setTaskFound(true)[ FD ]
Line_21 $$ for (float f : partialMapProgress) -->Line_22 $$ partialProgress += f[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_12 $$ taskStatus = TaskStatus.createTaskStatus(taskStatus.getIsMap())[ CD ]
Line_16 $$ if (mapTaskIndex >= 0) -->Line_24 $$ status.setMapProgress(partialProgress / numTasks)[ CD ]
Line_8 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_13 $$ taskStatus.readFields(new DataInputStream(new ByteArrayInputStream(baos.toByteArray())))[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_14 $$ LOG.info(taskStatus.getStateString())[ CD ]
Line_9 $$ DataOutputStream dos = new DataOutputStream(baos)-->Line_11 $$ dos.close()[ FD ]
Line_15 $$ int mapTaskIndex = mapIds.indexOf(taskId)-->Line_16 $$ if (mapTaskIndex >= 0) [ FD ]
Line_12 $$ taskStatus = TaskStatus.createTaskStatus(taskStatus.getIsMap())-->Line_29 $$ reduceCounters[reduceTaskIndex] = taskStatus.getCounters()[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_14 $$ LOG.info(taskStatus.getStateString())[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_11 $$ dos.close()[ CD ]
Line_12 $$ taskStatus = TaskStatus.createTaskStatus(taskStatus.getIsMap())-->Line_13 $$ taskStatus.readFields(new DataInputStream(new ByteArrayInputStream(baos.toByteArray())))[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_15 $$ int mapTaskIndex = mapIds.indexOf(taskId)[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_16 $$ if (mapTaskIndex >= 0) [ CD ]
Line_20 $$ float partialProgress = 0.0f-->Line_22 $$ partialProgress += f[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_10 $$ taskStatus.write(dos)[ FD ]
Line_16 $$ if (mapTaskIndex >= 0) -->Line_34 $$ status.setReduceProgress(partialProgress / numTasks)[ CD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_8 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_22 $$ partialProgress += f-->Line_32 $$ partialProgress += f[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_28 $$ partialReduceProgress[reduceTaskIndex] = taskStatus.getProgress()[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_19 $$ mapCounters[mapTaskIndex] = taskStatus.getCounters()[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_36 $$ return feedback[ CD ]
Line_16 $$ if (mapTaskIndex >= 0) -->Line_28 $$ partialReduceProgress[reduceTaskIndex] = taskStatus.getProgress()[ CD ]
Line_20 $$ float partialProgress = 0.0f-->Line_32 $$ partialProgress += f[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_12 $$ taskStatus = TaskStatus.createTaskStatus(taskStatus.getIsMap())[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_3 $$ AMFeedback feedback = new AMFeedback()[ CD ]
Line_16 $$ if (mapTaskIndex >= 0) -->Line_18 $$ partialMapProgress[mapTaskIndex] = taskStatus.getProgress()[ CD ]
Line_12 $$ taskStatus = TaskStatus.createTaskStatus(taskStatus.getIsMap())-->Line_14 $$ LOG.info(taskStatus.getStateString())[ FD ]
Line_16 $$ if (mapTaskIndex >= 0) -->Line_29 $$ reduceCounters[reduceTaskIndex] = taskStatus.getCounters()[ CD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_5 $$ if (null == taskStatus) [ CD ]
Line_16 $$ if (mapTaskIndex >= 0) -->Line_17 $$ float numTasks = (float) this.numMapTasks[ CD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_26 $$ int reduceTaskIndex = taskId.getTaskID().getId()[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_10 $$ taskStatus.write(dos)[ CD ]
Line_5 $$ if (null == taskStatus) -->Line_6 $$ return feedback[ CD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_29 $$ reduceCounters[reduceTaskIndex] = taskStatus.getCounters()[ FD ]
Line_16 $$ if (mapTaskIndex >= 0) -->Line_19 $$ mapCounters[mapTaskIndex] = taskStatus.getCounters()[ CD ]
Line_9 $$ DataOutputStream dos = new DataOutputStream(baos)-->Line_10 $$ taskStatus.write(dos)[ FD ]
Line_16 $$ if (mapTaskIndex >= 0) -->Line_26 $$ int reduceTaskIndex = taskId.getTaskID().getId()[ CD ]
Line_12 $$ taskStatus = TaskStatus.createTaskStatus(taskStatus.getIsMap())-->Line_28 $$ partialReduceProgress[reduceTaskIndex] = taskStatus.getProgress()[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_13 $$ taskStatus.readFields(new DataInputStream(new ByteArrayInputStream(baos.toByteArray())))[ CD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_13 $$ taskStatus.readFields(new DataInputStream(new ByteArrayInputStream(baos.toByteArray())))[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_18 $$ partialMapProgress[mapTaskIndex] = taskStatus.getProgress()[ FD ]
Line_12 $$ taskStatus = TaskStatus.createTaskStatus(taskStatus.getIsMap())-->Line_19 $$ mapCounters[mapTaskIndex] = taskStatus.getCounters()[ FD ]
Line_2 $$ public synchronized AMFeedback statusUpdate(TaskAttemptID taskId, TaskStatus taskStatus) throws IOException, InterruptedException -->Line_5 $$ if (null == taskStatus) [ FD ]
Line_21 $$ for (float f : partialMapProgress) -->Line_32 $$ partialProgress += f[ FD ]
Line_16 $$ if (mapTaskIndex >= 0) -->Line_20 $$ float partialProgress = 0.0f[ CD ]
