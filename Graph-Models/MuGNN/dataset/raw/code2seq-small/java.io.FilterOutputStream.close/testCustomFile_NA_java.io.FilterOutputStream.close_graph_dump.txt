Line_2 $$ public void testCustomFile() throws Exception -->Line_49 $$ assertTrue(map0)[ CD ]
Line_5 $$ if (isLocalFS()) -->Line_8 $$ outDir = new Path(localPathRoot, outDir)[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_40 $$ boolean map0 = false[ CD ]
Line_8 $$ outDir = new Path(localPathRoot, outDir)-->Line_43 $$ FileStatus[] statuses = fs.listStatus(outDir)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_29 $$ conf.setMapperClass(TestMap.class)[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_4 $$ Path outDir = new Path("testing/fileoutputformat/output")[ CD ]
Line_44 $$ for (FileStatus status : statuses) -->Line_45 $$ map0 = map0 || status.getPath().getName().equals("test-m-00000")[ FD ]
Line_4 $$ Path outDir = new Path("testing/fileoutputformat/output")-->Line_12 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_19 $$ file = fs.create(new Path(inDir, "part-1"))[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_50 $$ assertTrue(map1)[ CD ]
Line_45 $$ map0 = map0 || status.getPath().getName().equals("test-m-00000")-->Line_49 $$ assertTrue(map0)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_12 $$ fs.delete(outDir, true)[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_32 $$ FileInputFormat.setInputPaths(conf, inDir)[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_41 $$ boolean map1 = false[ CD ]
Line_42 $$ boolean reduce = false-->Line_47 $$ reduce = reduce || status.getPath().getName().equals("test-r-00000")[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_18 $$ file.close()[ CD ]
Line_11 $$ FileSystem fs = FileSystem.get(conf)-->Line_19 $$ file = fs.create(new Path(inDir, "part-1"))[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_43 $$ FileStatus[] statuses = fs.listStatus(outDir)[ CD ]
Line_47 $$ reduce = reduce || status.getPath().getName().equals("test-r-00000")-->Line_51 $$ assertTrue(reduce)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_20 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_30 $$ conf.setReducerClass(TestReduce.class)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_39 $$ assertTrue(job.isSuccessful())[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_25 $$ conf.setMapOutputValueClass(Text.class)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_23 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_33 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_19 $$ file = fs.create(new Path(inDir, "part-1"))-->Line_20 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_16 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_21 $$ file.close()[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_3 $$ Path inDir = new Path("testing/fileoutputformat/input")[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_27 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_41 $$ boolean map1 = false-->Line_50 $$ assertTrue(map1)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.get(conf)-->Line_16 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_35 $$ RunningJob job = jc.submitJob(conf)[ CD ]
Line_35 $$ RunningJob job = jc.submitJob(conf)-->Line_36 $$ while (!job.isComplete()) [ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_26 $$ conf.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_16 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_20 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_8 $$ outDir = new Path(localPathRoot, outDir)-->Line_33 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.get(conf)-->Line_12 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_21 $$ file.close()[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_23 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_30 $$ conf.setReducerClass(TestReduce.class)[ CD ]
Line_5 $$ if (isLocalFS()) -->Line_7 $$ inDir = new Path(localPathRoot, inDir)[ CD ]
Line_3 $$ Path inDir = new Path("testing/fileoutputformat/input")-->Line_7 $$ inDir = new Path(localPathRoot, inDir)[ FD ]
Line_16 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_18 $$ file.close()[ FD ]
Line_11 $$ FileSystem fs = FileSystem.get(conf)-->Line_13 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_5 $$ if (isLocalFS()) -->Line_6 $$ String localPathRoot = System.getProperty("test.build.data", "/tmp").replace(' ', '+')[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_11 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_8 $$ outDir = new Path(localPathRoot, outDir)-->Line_12 $$ fs.delete(outDir, true)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.get(conf)-->Line_43 $$ FileStatus[] statuses = fs.listStatus(outDir)[ FD ]
Line_40 $$ boolean map0 = false-->Line_45 $$ map0 = map0 || status.getPath().getName().equals("test-m-00000")[ FD ]
Line_34 $$ JobClient jc = new JobClient(conf)-->Line_35 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_36 $$ while (!job.isComplete()) -->Line_37 $$ Thread.sleep(100)[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_13 $$ if (!fs.mkdirs(inDir)) [ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_35 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_4 $$ Path outDir = new Path("testing/fileoutputformat/output")-->Line_33 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_10 $$ JobConf conf = createJobConf()[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_22 $$ conf.setJobName("fof")[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_24 $$ conf.setMapOutputKeyClass(LongWritable.class)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_11 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_29 $$ conf.setMapperClass(TestMap.class)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_24 $$ conf.setMapOutputKeyClass(LongWritable.class)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_31 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ FD ]
Line_41 $$ boolean map1 = false-->Line_46 $$ map1 = map1 || status.getPath().getName().equals("test-m-00001")[ FD ]
Line_44 $$ for (FileStatus status : statuses) -->Line_46 $$ map1 = map1 || status.getPath().getName().equals("test-m-00001")[ FD ]
Line_7 $$ inDir = new Path(localPathRoot, inDir)-->Line_32 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_42 $$ boolean reduce = false[ CD ]
Line_46 $$ map1 = map1 || status.getPath().getName().equals("test-m-00001")-->Line_50 $$ assertTrue(map1)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_17 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ CD ]
Line_3 $$ Path inDir = new Path("testing/fileoutputformat/input")-->Line_13 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_40 $$ boolean map0 = false-->Line_49 $$ assertTrue(map0)[ FD ]
Line_19 $$ file = fs.create(new Path(inDir, "part-1"))-->Line_21 $$ file.close()[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_36 $$ while (!job.isComplete()) [ CD ]
Line_7 $$ inDir = new Path(localPathRoot, inDir)-->Line_14 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_25 $$ conf.setMapOutputValueClass(Text.class)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_5 $$ if (isLocalFS()) [ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_26 $$ conf.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_34 $$ JobClient jc = new JobClient(conf)[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_51 $$ assertTrue(reduce)[ CD ]
Line_4 $$ Path outDir = new Path("testing/fileoutputformat/output")-->Line_43 $$ FileStatus[] statuses = fs.listStatus(outDir)[ FD ]
Line_3 $$ Path inDir = new Path("testing/fileoutputformat/input")-->Line_14 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_42 $$ boolean reduce = false-->Line_51 $$ assertTrue(reduce)[ FD ]
Line_16 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_19 $$ file = fs.create(new Path(inDir, "part-1"))[ FD ]
Line_35 $$ RunningJob job = jc.submitJob(conf)-->Line_39 $$ assertTrue(job.isSuccessful())[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_31 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ CD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_28 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_4 $$ Path outDir = new Path("testing/fileoutputformat/output")-->Line_8 $$ outDir = new Path(localPathRoot, outDir)[ FD ]
Line_16 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_17 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_27 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_44 $$ for (FileStatus status : statuses) -->Line_47 $$ reduce = reduce || status.getPath().getName().equals("test-r-00000")[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_16 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_28 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_7 $$ inDir = new Path(localPathRoot, inDir)-->Line_13 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_32 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_22 $$ conf.setJobName("fof")[ CD ]
Line_3 $$ Path inDir = new Path("testing/fileoutputformat/input")-->Line_32 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_2 $$ public void testCustomFile() throws Exception -->Line_33 $$ FileOutputFormat.setOutputPath(conf, outDir)[ CD ]
