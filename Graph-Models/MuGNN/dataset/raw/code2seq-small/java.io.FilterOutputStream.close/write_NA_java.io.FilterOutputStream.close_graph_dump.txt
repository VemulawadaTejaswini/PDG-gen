Line_5 $$ CountingOutputStream countingOutputStream = new CountingOutputStream(new BufferedOutputStream(new RandomAccessFileOutputStream(file)))-->Line_13 $$ outputStream.writeLong(countingOutputStream.getCount())[ FD ]
Line_2 $$ public void write() throws Exception -->Line_7 $$ BlockPayload payload = getPayload()[ CD ]
Line_11 $$ long finalSize = pos + HEADER_SIZE + TAIL_SIZE + payloadSize-->Line_16 $$ file.setLength(finalSize)[ FD ]
Line_6 $$ DataOutputStream outputStream = new DataOutputStream(countingOutputStream)-->Line_9 $$ outputStream.writeByte(payload.getType())[ FD ]
Line_7 $$ BlockPayload payload = getPayload()-->Line_9 $$ outputStream.writeByte(payload.getType())[ FD ]
Line_3 $$ long pos = getPos().getPos()-->Line_4 $$ file.seek(pos)[ FD ]
Line_15 $$ if (currentFileSize < finalSize) -->Line_16 $$ file.setLength(finalSize)[ CD ]
Line_2 $$ public void write() throws Exception -->Line_15 $$ if (currentFileSize < finalSize) [ CD ]
Line_2 $$ public void write() throws Exception -->Line_5 $$ CountingOutputStream countingOutputStream = new CountingOutputStream(new BufferedOutputStream(new RandomAccessFileOutputStream(file)))[ CD ]
Line_11 $$ long finalSize = pos + HEADER_SIZE + TAIL_SIZE + payloadSize-->Line_15 $$ if (currentFileSize < finalSize) [ FD ]
Line_6 $$ DataOutputStream outputStream = new DataOutputStream(countingOutputStream)-->Line_8 $$ outputStream.writeByte(BLOCK_MARKER)[ FD ]
Line_6 $$ DataOutputStream outputStream = new DataOutputStream(countingOutputStream)-->Line_10 $$ outputStream.writeInt(payloadSize)[ FD ]
Line_2 $$ public void write() throws Exception -->Line_8 $$ outputStream.writeByte(BLOCK_MARKER)[ CD ]
Line_2 $$ public void write() throws Exception -->Line_10 $$ outputStream.writeInt(payloadSize)[ CD ]
Line_2 $$ public void write() throws Exception -->Line_4 $$ file.seek(pos)[ CD ]
Line_6 $$ DataOutputStream outputStream = new DataOutputStream(countingOutputStream)-->Line_13 $$ outputStream.writeLong(countingOutputStream.getCount())[ FD ]
Line_2 $$ public void write() throws Exception -->Line_9 $$ outputStream.writeByte(payload.getType())[ CD ]
Line_2 $$ public void write() throws Exception -->Line_14 $$ outputStream.close()[ CD ]
Line_2 $$ public void write() throws Exception -->Line_12 $$ payload.write(outputStream)[ CD ]
Line_7 $$ BlockPayload payload = getPayload()-->Line_12 $$ payload.write(outputStream)[ FD ]
Line_2 $$ public void write() throws Exception -->Line_13 $$ outputStream.writeLong(countingOutputStream.getCount())[ CD ]
Line_2 $$ public void write() throws Exception -->Line_6 $$ DataOutputStream outputStream = new DataOutputStream(countingOutputStream)[ CD ]
Line_6 $$ DataOutputStream outputStream = new DataOutputStream(countingOutputStream)-->Line_14 $$ outputStream.close()[ FD ]
Line_6 $$ DataOutputStream outputStream = new DataOutputStream(countingOutputStream)-->Line_12 $$ payload.write(outputStream)[ FD ]
Line_2 $$ public void write() throws Exception -->Line_3 $$ long pos = getPos().getPos()[ CD ]
Line_2 $$ public void write() throws Exception -->Line_11 $$ long finalSize = pos + HEADER_SIZE + TAIL_SIZE + payloadSize[ CD ]
