Line_16 $$ Path recordFile = new Path(tempDir, "record")-->Line_17 $$ OutputStream outStream = CompressionEmulationUtil.getPossiblyCompressedOutputStream(recordFile, conf)[ FD ]
Line_7 $$ int dataSize = 1024 * 1024 * 10-->Line_27 $$ assertEquals("Record size mismatch in a compressible GridmixRecord", dataSize, recordRead.getSize())[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_6 $$ FileSystem lfs = FileSystem.getLocal(conf)[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_17 $$ OutputStream outStream = CompressionEmulationUtil.getPossiblyCompressedOutputStream(recordFile, conf)[ CD ]
Line_8 $$ float ratio = 0.357F-->Line_30 $$ assertEquals(CompressionEmulationUtil.standardizeCompressionRatio(ratio), CompressionEmulationUtil.standardizeCompressionRatio(seenRatio), 1.0D)[ FD ]
Line_22 $$ Path actualRecordFile = recordFile.suffix(".gz")-->Line_23 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(actualRecordFile, conf, 0)[ FD ]
Line_29 $$ float seenRatio = ((float) compressedFileSize) / dataSize-->Line_30 $$ assertEquals(CompressionEmulationUtil.standardizeCompressionRatio(ratio), CompressionEmulationUtil.standardizeCompressionRatio(seenRatio), 1.0D)[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_4 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_14 $$ conf.setClass(FileOutputFormat.COMPRESS_CODEC, GzipCodec.class, CompressionCodec.class)[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_11 $$ lfs.delete(tempDir, true)[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_18 $$ DataOutputStream out = new DataOutputStream(outStream)[ CD ]
Line_16 $$ Path recordFile = new Path(tempDir, "record")-->Line_22 $$ Path actualRecordFile = recordFile.suffix(".gz")[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_9 $$ Path rootTempDir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(lfs.getUri(), lfs.getWorkingDirectory())[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_13 $$ record.setCompressibility(true, ratio)[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_29 $$ float seenRatio = ((float) compressedFileSize) / dataSize[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_15 $$ org.apache.hadoop.mapred.FileOutputFormat.setCompressOutput(conf, true)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_16 $$ Path recordFile = new Path(tempDir, "record")[ CD ]
Line_17 $$ OutputStream outStream = CompressionEmulationUtil.getPossiblyCompressedOutputStream(recordFile, conf)-->Line_21 $$ outStream.close()[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_30 $$ assertEquals(CompressionEmulationUtil.standardizeCompressionRatio(ratio), CompressionEmulationUtil.standardizeCompressionRatio(seenRatio), 1.0D)[ CD ]
Line_6 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_24 $$ long compressedFileSize = lfs.listStatus(actualRecordFile)[0].getLen()[ FD ]
Line_22 $$ Path actualRecordFile = recordFile.suffix(".gz")-->Line_24 $$ long compressedFileSize = lfs.listStatus(actualRecordFile)[0].getLen()[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_24 $$ long compressedFileSize = lfs.listStatus(actualRecordFile)[0].getLen()[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_7 $$ int dataSize = 1024 * 1024 * 10[ CD ]
Line_6 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_9 $$ Path rootTempDir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(lfs.getUri(), lfs.getWorkingDirectory())[ FD ]
Line_8 $$ float ratio = 0.357F-->Line_13 $$ record.setCompressibility(true, ratio)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_3 $$ JobConf conf = new JobConf()[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_5 $$ CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf, true)[ FD ]
Line_6 $$ FileSystem lfs = FileSystem.getLocal(conf)-->Line_11 $$ lfs.delete(tempDir, true)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_4 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_21 $$ outStream.close()[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_23 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(actualRecordFile, conf, 0)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_26 $$ recordRead.readFields(new DataInputStream(in))[ CD ]
Line_10 $$ Path tempDir = new Path(rootTempDir, "TestPossiblyCompressibleGridmixRecord")-->Line_11 $$ lfs.delete(tempDir, true)[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_6 $$ FileSystem lfs = FileSystem.getLocal(conf)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_8 $$ float ratio = 0.357F[ CD ]
Line_18 $$ DataOutputStream out = new DataOutputStream(outStream)-->Line_20 $$ out.close()[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_28 $$ assertTrue("Failed to generate a compressible GridmixRecord", recordRead.getSize() > compressedFileSize)[ CD ]
Line_12 $$ GridmixRecord record = new GridmixRecord(dataSize, 0)-->Line_19 $$ record.write(out)[ FD ]
Line_25 $$ GridmixRecord recordRead = new GridmixRecord()-->Line_26 $$ recordRead.readFields(new DataInputStream(in))[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_19 $$ record.write(out)[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_23 $$ InputStream in = CompressionEmulationUtil.getPossiblyDecompressedInputStream(actualRecordFile, conf, 0)[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_10 $$ Path tempDir = new Path(rootTempDir, "TestPossiblyCompressibleGridmixRecord")[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_14 $$ conf.setClass(FileOutputFormat.COMPRESS_CODEC, GzipCodec.class, CompressionCodec.class)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_25 $$ GridmixRecord recordRead = new GridmixRecord()[ CD ]
Line_25 $$ GridmixRecord recordRead = new GridmixRecord()-->Line_28 $$ assertTrue("Failed to generate a compressible GridmixRecord", recordRead.getSize() > compressedFileSize)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_15 $$ org.apache.hadoop.mapred.FileOutputFormat.setCompressOutput(conf, true)[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_5 $$ CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf, true)[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_27 $$ assertEquals("Record size mismatch in a compressible GridmixRecord", dataSize, recordRead.getSize())[ CD ]
Line_18 $$ DataOutputStream out = new DataOutputStream(outStream)-->Line_19 $$ record.write(out)[ FD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_17 $$ OutputStream outStream = CompressionEmulationUtil.getPossiblyCompressedOutputStream(recordFile, conf)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_22 $$ Path actualRecordFile = recordFile.suffix(".gz")[ CD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_12 $$ GridmixRecord record = new GridmixRecord(dataSize, 0)[ CD ]
Line_25 $$ GridmixRecord recordRead = new GridmixRecord()-->Line_27 $$ assertEquals("Record size mismatch in a compressible GridmixRecord", dataSize, recordRead.getSize())[ FD ]
Line_12 $$ GridmixRecord record = new GridmixRecord(dataSize, 0)-->Line_13 $$ record.setCompressibility(true, ratio)[ FD ]
Line_2 $$ public void testCompressibleGridmixRecord() throws IOException -->Line_20 $$ out.close()[ CD ]
