Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_6 $$ int count = m.size()[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_14 $$ DataInputStream dis = new DataInputStream(bais)[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_4 $$ final Text t = new Text(getName())[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_8 $$ DataOutputStream dos = new DataOutputStream(baos)[ CD ]
Line_8 $$ DataOutputStream dos = new DataOutputStream(baos)-->Line_10 $$ dos.close()[ FD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_15 $$ m.readFields(dis)[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_9 $$ m.write(dos)[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_16 $$ assertEquals(count, m.size())[ CD ]
Line_3 $$ MapWritable m = new MapWritable()-->Line_17 $$ assertTrue(m.get(t).equals(t))[ FD ]
Line_3 $$ MapWritable m = new MapWritable()-->Line_16 $$ assertEquals(count, m.size())[ FD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_18 $$ dis.close()[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_17 $$ assertTrue(m.get(t).equals(t))[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_12 $$ m.put(new Text("key2"), new Text("value2"))[ CD ]
Line_3 $$ MapWritable m = new MapWritable()-->Line_5 $$ m.put(t, t)[ FD ]
Line_3 $$ MapWritable m = new MapWritable()-->Line_11 $$ m.put(new Text("key1"), new Text("value1"))[ FD ]
Line_3 $$ MapWritable m = new MapWritable()-->Line_12 $$ m.put(new Text("key2"), new Text("value2"))[ FD ]
Line_8 $$ DataOutputStream dos = new DataOutputStream(baos)-->Line_9 $$ m.write(dos)[ FD ]
Line_3 $$ MapWritable m = new MapWritable()-->Line_9 $$ m.write(dos)[ FD ]
Line_14 $$ DataInputStream dis = new DataInputStream(bais)-->Line_18 $$ dis.close()[ FD ]
Line_7 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_13 $$ ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_3 $$ MapWritable m = new MapWritable()-->Line_15 $$ m.readFields(dis)[ FD ]
Line_6 $$ int count = m.size()-->Line_16 $$ assertEquals(count, m.size())[ FD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_10 $$ dos.close()[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_5 $$ m.put(t, t)[ CD ]
Line_4 $$ final Text t = new Text(getName())-->Line_17 $$ assertTrue(m.get(t).equals(t))[ FD ]
Line_14 $$ DataInputStream dis = new DataInputStream(bais)-->Line_15 $$ m.readFields(dis)[ FD ]
Line_3 $$ MapWritable m = new MapWritable()-->Line_6 $$ int count = m.size()[ FD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_7 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_3 $$ MapWritable m = new MapWritable()[ CD ]
Line_4 $$ final Text t = new Text(getName())-->Line_5 $$ m.put(t, t)[ FD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_13 $$ ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())[ CD ]
Line_2 $$ public void testMultipleCallsToReadFieldsAreSafe() throws Exception -->Line_11 $$ m.put(new Text("key1"), new Text("value1"))[ CD ]
