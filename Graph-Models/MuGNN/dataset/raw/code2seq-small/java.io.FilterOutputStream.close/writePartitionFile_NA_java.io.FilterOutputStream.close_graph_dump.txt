Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_9 $$ final List<InputSplit> splits = inFormat.getSplits(job)[ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_13 $$ System.out.println("Sampling " + samples + " splits of " + splits.size())[ CD ]
Line_9 $$ final List<InputSplit> splits = inFormat.getSplits(job)-->Line_15 $$ final int sampleStep = splits.size() / samples[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_12 $$ int samples = Math.min(conf.getInt(NUM_PARTITIONS, 10), splits.size())[ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_14 $$ final long recordsPerSample = sampleSize / samples[ CD ]
Line_25 $$ long records = 0-->Line_33 $$ if (recordsPerSample <= records) [ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_48 $$ for (int i = 0; i < samples; i++) [ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_10 $$ long t2 = System.currentTimeMillis()[ CD ]
Line_18 $$ for (int i = 0; i < samples; ++i) -->Line_48 $$ for (int i = 0; i < samples; i++) [ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_15 $$ final int sampleStep = splits.size() / samples[ CD ]
Line_20 $$ samplerReader[i] = new Thread(threadGroup, "Sampler Reader " + idx) -->Line_25 $$ long records = 0[ CD ]
Line_17 $$ SamplerThreadGroup threadGroup = new SamplerThreadGroup("Sampler Reader Thread Group")-->Line_52 $$ throw threadGroup.getThrowable()[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_27 $$ TaskAttemptContext context = new TaskAttemptContextImpl(job.getConfiguration(), new TaskAttemptID())[ FD ]
Line_9 $$ final List<InputSplit> splits = inFormat.getSplits(job)-->Line_28 $$ RecordReader<Text, Text> reader = inFormat.createRecordReader(splits.get(sampleStep * idx), context)[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_3 $$ long t1 = System.currentTimeMillis()[ CD ]
Line_28 $$ RecordReader<Text, Text> reader = inFormat.createRecordReader(splits.get(sampleStep * idx), context)-->Line_29 $$ reader.initialize(splits.get(sampleStep * idx), context)[ FD ]
Line_30 $$ while (reader.nextKeyValue()) -->Line_32 $$ records += 1[ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_17 $$ SamplerThreadGroup threadGroup = new SamplerThreadGroup("Sampler Reader Thread Group")[ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_62 $$ System.out.println("Computing parititions took " + (t3 - t2) + "ms")[ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_4 $$ Configuration conf = job.getConfiguration()[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_6 $$ final TextSampler sampler = new TextSampler()[ CD ]
Line_9 $$ final List<InputSplit> splits = inFormat.getSplits(job)-->Line_12 $$ int samples = Math.min(conf.getInt(NUM_PARTITIONS, 10), splits.size())[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_60 $$ writer.close()[ CD ]
Line_17 $$ SamplerThreadGroup threadGroup = new SamplerThreadGroup("Sampler Reader Thread Group")-->Line_51 $$ if (threadGroup.getThrowable() != null) [ FD ]
Line_30 $$ while (reader.nextKeyValue()) -->Line_33 $$ if (recordsPerSample <= records) [ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_11 $$ System.out.println("Computing input splits took " + (t2 - t1) + "ms")[ CD ]
Line_9 $$ final List<InputSplit> splits = inFormat.getSplits(job)-->Line_13 $$ System.out.println("Sampling " + samples + " splits of " + splits.size())[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_16 $$ Thread[] samplerReader = new Thread[samples][ CD ]
Line_18 $$ for (int i = 0; i < samples; ++i) -->Line_44 $$ samplerReader[i].start()[ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_47 $$ DataOutputStream writer = outFs.create(partFile, true, 64 * 1024, (short) 10, outFs.getDefaultBlockSize(partFile))[ CD ]
Line_9 $$ final List<InputSplit> splits = inFormat.getSplits(job)-->Line_29 $$ reader.initialize(splits.get(sampleStep * idx), context)[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_7 $$ int partitions = job.getNumReduceTasks()[ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_4 $$ Configuration conf = job.getConfiguration()[ CD ]
Line_28 $$ RecordReader<Text, Text> reader = inFormat.createRecordReader(splits.get(sampleStep * idx), context)-->Line_31 $$ sampler.addKey(new Text(reader.getCurrentKey()))[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_47 $$ DataOutputStream writer = outFs.create(partFile, true, 64 * 1024, (short) 10, outFs.getDefaultBlockSize(partFile))[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_9 $$ final List<InputSplit> splits = inFormat.getSplits(job)[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_46 $$ FileSystem outFs = partFile.getFileSystem(conf)[ CD ]
Line_18 $$ for (int i = 0; i < samples; ++i) -->Line_20 $$ samplerReader[i] = new Thread(threadGroup, "Sampler Reader " + idx) [ CD ]
Line_5 $$ final TeraInputFormat inFormat = new TeraInputFormat()-->Line_9 $$ final List<InputSplit> splits = inFormat.getSplits(job)[ FD ]
Line_6 $$ final TextSampler sampler = new TextSampler()-->Line_31 $$ sampler.addKey(new Text(reader.getCurrentKey()))[ FD ]
Line_6 $$ final TextSampler sampler = new TextSampler()-->Line_57 $$ for (Text split : sampler.createPartitions(partitions)) [ FD ]
Line_5 $$ final TeraInputFormat inFormat = new TeraInputFormat()-->Line_28 $$ RecordReader<Text, Text> reader = inFormat.createRecordReader(splits.get(sampleStep * idx), context)[ FD ]
Line_27 $$ TaskAttemptContext context = new TaskAttemptContextImpl(job.getConfiguration(), new TaskAttemptID())-->Line_29 $$ reader.initialize(splits.get(sampleStep * idx), context)[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_7 $$ int partitions = job.getNumReduceTasks()[ FD ]
Line_27 $$ TaskAttemptContext context = new TaskAttemptContextImpl(job.getConfiguration(), new TaskAttemptID())-->Line_28 $$ RecordReader<Text, Text> reader = inFormat.createRecordReader(splits.get(sampleStep * idx), context)[ FD ]
Line_4 $$ Configuration conf = job.getConfiguration()-->Line_46 $$ FileSystem outFs = partFile.getFileSystem(conf)[ FD ]
Line_28 $$ RecordReader<Text, Text> reader = inFormat.createRecordReader(splits.get(sampleStep * idx), context)-->Line_30 $$ while (reader.nextKeyValue()) [ FD ]
Line_12 $$ int samples = Math.min(conf.getInt(NUM_PARTITIONS, 10), splits.size())-->Line_18 $$ for (int i = 0; i < samples; ++i) [ FD ]
Line_7 $$ int partitions = job.getNumReduceTasks()-->Line_57 $$ for (Text split : sampler.createPartitions(partitions)) [ FD ]
Line_30 $$ while (reader.nextKeyValue()) -->Line_31 $$ sampler.addKey(new Text(reader.getCurrentKey()))[ CD ]
Line_25 $$ long records = 0-->Line_32 $$ records += 1[ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_46 $$ FileSystem outFs = partFile.getFileSystem(conf)[ FD ]
Line_18 $$ for (int i = 0; i < samples; ++i) -->Line_19 $$ final int idx = i[ CD ]
Line_12 $$ int samples = Math.min(conf.getInt(NUM_PARTITIONS, 10), splits.size())-->Line_48 $$ for (int i = 0; i < samples; i++) [ FD ]
Line_4 $$ Configuration conf = job.getConfiguration()-->Line_12 $$ int samples = Math.min(conf.getInt(NUM_PARTITIONS, 10), splits.size())[ FD ]
Line_14 $$ final long recordsPerSample = sampleSize / samples-->Line_33 $$ if (recordsPerSample <= records) [ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_8 $$ long sampleSize = conf.getLong(SAMPLE_SIZE, 100000)[ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_61 $$ long t3 = System.currentTimeMillis()[ CD ]
Line_32 $$ records += 1-->Line_33 $$ if (recordsPerSample <= records) [ FD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_18 $$ for (int i = 0; i < samples; ++i) [ CD ]
Line_2 $$ public static void writePartitionFile(final JobContext job, Path partFile) throws Throwable -->Line_5 $$ final TeraInputFormat inFormat = new TeraInputFormat()[ CD ]
Line_4 $$ Configuration conf = job.getConfiguration()-->Line_8 $$ long sampleSize = conf.getLong(SAMPLE_SIZE, 100000)[ FD ]
