Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_3 $$ final DataInputStream iStream = PERSISTENCE.readAttribute(fileOrDir)[ CD ]
Line_17 $$ if (!child.isDirectory() && StdFileTypes.JAVA.equals(child.getFileType())) -->Line_18 $$ PushedFilePropertiesUpdater.getInstance(project).filePropertiesChanged(child)[ CD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_7 $$ if (oldLevelOrdinal == level.ordinal())[ FD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_16 $$ for (VirtualFile child : fileOrDir.getChildren()) [ FD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_15 $$ oStream.close()[ CD ]
Line_3 $$ final DataInputStream iStream = PERSISTENCE.readAttribute(fileOrDir)-->Line_6 $$ final int oldLevelOrdinal = DataInputOutputUtil.readINT(iStream)[ FD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_14 $$ DataInputOutputUtil.writeINT(oStream, level.ordinal())[ FD ]
Line_16 $$ for (VirtualFile child : fileOrDir.getChildren()) -->Line_18 $$ PushedFilePropertiesUpdater.getInstance(project).filePropertiesChanged(child)[ FD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_4 $$ if (iStream != null) [ CD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_13 $$ final DataOutputStream oStream = PERSISTENCE.writeAttribute(fileOrDir)[ CD ]
Line_13 $$ final DataOutputStream oStream = PERSISTENCE.writeAttribute(fileOrDir)-->Line_14 $$ DataInputOutputUtil.writeINT(oStream, level.ordinal())[ FD ]
Line_7 $$ if (oldLevelOrdinal == level.ordinal())-->Line_8 $$ return[ CD ]
Line_3 $$ final DataInputStream iStream = PERSISTENCE.readAttribute(fileOrDir)-->Line_10 $$ iStream.close()[ FD ]
Line_13 $$ final DataOutputStream oStream = PERSISTENCE.writeAttribute(fileOrDir)-->Line_15 $$ oStream.close()[ FD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_18 $$ PushedFilePropertiesUpdater.getInstance(project).filePropertiesChanged(child)[ FD ]
Line_6 $$ final int oldLevelOrdinal = DataInputOutputUtil.readINT(iStream)-->Line_7 $$ if (oldLevelOrdinal == level.ordinal())[ FD ]
Line_3 $$ final DataInputStream iStream = PERSISTENCE.readAttribute(fileOrDir)-->Line_4 $$ if (iStream != null) [ FD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_3 $$ final DataInputStream iStream = PERSISTENCE.readAttribute(fileOrDir)[ FD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_13 $$ final DataOutputStream oStream = PERSISTENCE.writeAttribute(fileOrDir)[ FD ]
Line_2 $$ public void persistAttribute(@NotNull Project project, @NotNull VirtualFile fileOrDir, @NotNull LanguageLevel level) throws IOException -->Line_14 $$ DataInputOutputUtil.writeINT(oStream, level.ordinal())[ CD ]
Line_16 $$ for (VirtualFile child : fileOrDir.getChildren()) -->Line_17 $$ if (!child.isDirectory() && StdFileTypes.JAVA.equals(child.getFileType())) [ FD ]
