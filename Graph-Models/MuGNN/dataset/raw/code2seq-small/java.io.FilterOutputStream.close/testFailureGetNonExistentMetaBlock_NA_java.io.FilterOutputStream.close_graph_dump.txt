Line_6 $$ DataOutputStream outMeta = writer.prepareMetaBlock("testX", Compression.Algorithm.GZ.getName())-->Line_7 $$ outMeta.write(123)[ FD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_12 $$ DataInputStream mb = reader.getMetaBlock("testX")[ CD ]
Line_11 $$ Reader reader = new Reader(fs.open(path), fs.getFileStatus(path).getLen(), conf)-->Line_16 $$ DataInputStream mbBad = reader.getMetaBlock("testY")[ FD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_8 $$ outMeta.write("foo".getBytes())[ CD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_20 $$ reader.close()[ CD ]
Line_12 $$ DataInputStream mb = reader.getMetaBlock("testX")-->Line_13 $$ Assert.assertNotNull(mb)[ FD ]
Line_11 $$ Reader reader = new Reader(fs.open(path), fs.getFileStatus(path).getLen(), conf)-->Line_12 $$ DataInputStream mb = reader.getMetaBlock("testX")[ FD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_10 $$ closeOutput()[ CD ]
Line_11 $$ Reader reader = new Reader(fs.open(path), fs.getFileStatus(path).getLen(), conf)-->Line_20 $$ reader.close()[ FD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_13 $$ Assert.assertNotNull(mb)[ CD ]
Line_6 $$ DataOutputStream outMeta = writer.prepareMetaBlock("testX", Compression.Algorithm.GZ.getName())-->Line_9 $$ outMeta.close()[ FD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_14 $$ mb.close()[ CD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_3 $$ if (skip)[ CD ]
Line_6 $$ DataOutputStream outMeta = writer.prepareMetaBlock("testX", Compression.Algorithm.GZ.getName())-->Line_8 $$ outMeta.write("foo".getBytes())[ FD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_7 $$ outMeta.write(123)[ CD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_6 $$ DataOutputStream outMeta = writer.prepareMetaBlock("testX", Compression.Algorithm.GZ.getName())[ CD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_5 $$ writer.append("keyX".getBytes(), "valueX".getBytes())[ CD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_11 $$ Reader reader = new Reader(fs.open(path), fs.getFileStatus(path).getLen(), conf)[ CD ]
Line_3 $$ if (skip)-->Line_4 $$ return[ CD ]
Line_2 $$ public void testFailureGetNonExistentMetaBlock() throws IOException -->Line_9 $$ outMeta.close()[ CD ]
Line_12 $$ DataInputStream mb = reader.getMetaBlock("testX")-->Line_14 $$ mb.close()[ FD ]
