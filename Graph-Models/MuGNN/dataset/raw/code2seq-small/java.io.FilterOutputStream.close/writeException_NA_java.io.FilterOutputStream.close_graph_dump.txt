Line_14 $$ final Marshaller marshaller = this.prepareForMarshalling(marshallerFactory, outputStream)-->Line_16 $$ this.writeAttachments(marshaller, attachments)[ FD ]
Line_10 $$ outputStream = new DataOutputStream(messageOutputStream)-->Line_12 $$ outputStream.write(HEADER_INVOCATION_EXCEPTION)[ FD ]
Line_2 $$ protected void writeException(final ChannelAssociation channelAssociation, final MarshallerFactory marshallerFactory, final short invocationId, final Throwable t, final Map<String, Object> attachments) throws IOException -->Line_14 $$ final Marshaller marshaller = this.prepareForMarshalling(marshallerFactory, outputStream)[ FD ]
Line_10 $$ outputStream = new DataOutputStream(messageOutputStream)-->Line_14 $$ final Marshaller marshaller = this.prepareForMarshalling(marshallerFactory, outputStream)[ FD ]
Line_2 $$ protected void writeException(final ChannelAssociation channelAssociation, final MarshallerFactory marshallerFactory, final short invocationId, final Throwable t, final Map<String, Object> attachments) throws IOException -->Line_19 $$ channelAssociation.releaseChannelMessageOutputStream(messageOutputStream)[ FD ]
Line_3 $$ final DataOutputStream outputStream-->Line_13 $$ outputStream.writeShort(invocationId)[ FD ]
Line_2 $$ protected void writeException(final ChannelAssociation channelAssociation, final MarshallerFactory marshallerFactory, final short invocationId, final Throwable t, final Map<String, Object> attachments) throws IOException -->Line_3 $$ final DataOutputStream outputStream[ CD ]
Line_4 $$ final MessageOutputStream messageOutputStream-->Line_6 $$ messageOutputStream = channelAssociation.acquireChannelMessageOutputStream()[ FD ]
Line_3 $$ final DataOutputStream outputStream-->Line_14 $$ final Marshaller marshaller = this.prepareForMarshalling(marshallerFactory, outputStream)[ FD ]
Line_2 $$ protected void writeException(final ChannelAssociation channelAssociation, final MarshallerFactory marshallerFactory, final short invocationId, final Throwable t, final Map<String, Object> attachments) throws IOException -->Line_13 $$ outputStream.writeShort(invocationId)[ FD ]
Line_2 $$ protected void writeException(final ChannelAssociation channelAssociation, final MarshallerFactory marshallerFactory, final short invocationId, final Throwable t, final Map<String, Object> attachments) throws IOException -->Line_4 $$ final MessageOutputStream messageOutputStream[ CD ]
Line_2 $$ protected void writeException(final ChannelAssociation channelAssociation, final MarshallerFactory marshallerFactory, final short invocationId, final Throwable t, final Map<String, Object> attachments) throws IOException -->Line_15 $$ marshaller.writeObject(t)[ FD ]
Line_6 $$ messageOutputStream = channelAssociation.acquireChannelMessageOutputStream()-->Line_19 $$ channelAssociation.releaseChannelMessageOutputStream(messageOutputStream)[ FD ]
Line_2 $$ protected void writeException(final ChannelAssociation channelAssociation, final MarshallerFactory marshallerFactory, final short invocationId, final Throwable t, final Map<String, Object> attachments) throws IOException -->Line_16 $$ this.writeAttachments(marshaller, attachments)[ FD ]
Line_2 $$ protected void writeException(final ChannelAssociation channelAssociation, final MarshallerFactory marshallerFactory, final short invocationId, final Throwable t, final Map<String, Object> attachments) throws IOException -->Line_10 $$ outputStream = new DataOutputStream(messageOutputStream)[ CD ]
Line_14 $$ final Marshaller marshaller = this.prepareForMarshalling(marshallerFactory, outputStream)-->Line_15 $$ marshaller.writeObject(t)[ FD ]
Line_3 $$ final DataOutputStream outputStream-->Line_10 $$ outputStream = new DataOutputStream(messageOutputStream)[ FD ]
Line_3 $$ final DataOutputStream outputStream-->Line_20 $$ outputStream.close()[ FD ]
Line_10 $$ outputStream = new DataOutputStream(messageOutputStream)-->Line_20 $$ outputStream.close()[ FD ]
Line_4 $$ final MessageOutputStream messageOutputStream-->Line_19 $$ channelAssociation.releaseChannelMessageOutputStream(messageOutputStream)[ FD ]
Line_2 $$ protected void writeException(final ChannelAssociation channelAssociation, final MarshallerFactory marshallerFactory, final short invocationId, final Throwable t, final Map<String, Object> attachments) throws IOException -->Line_6 $$ messageOutputStream = channelAssociation.acquireChannelMessageOutputStream()[ FD ]
Line_3 $$ final DataOutputStream outputStream-->Line_12 $$ outputStream.write(HEADER_INVOCATION_EXCEPTION)[ FD ]
Line_14 $$ final Marshaller marshaller = this.prepareForMarshalling(marshallerFactory, outputStream)-->Line_17 $$ marshaller.finish()[ FD ]
Line_10 $$ outputStream = new DataOutputStream(messageOutputStream)-->Line_13 $$ outputStream.writeShort(invocationId)[ FD ]
