Line_52 $$ mirrorFile = new File(jarDir, mirrorName)-->Line_55 $$ FileUtil.delete(mirrorFile)[ FD ]
Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)-->Line_52 $$ mirrorFile = new File(jarDir, mirrorName)[ FD ]
Line_22 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_32 $$ sha1.update(buffer, 0, read)[ FD ]
Line_14 $$ MessageDigest sha1 = null-->Line_24 $$ sha1.update((byte) 0)[ FD ]
Line_14 $$ MessageDigest sha1 = null-->Line_23 $$ sha1.update(String.valueOf(originalAttributes.length).getBytes(Charset.defaultCharset()))[ FD ]
Line_3 $$ File mirrorFile = null-->Line_52 $$ mirrorFile = new File(jarDir, mirrorName)[ FD ]
Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)-->Line_56 $$ FileUtil.rename(tempJarFile, mirrorFile)[ FD ]
Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)-->Line_59 $$ reportIOErrorWithJars(originalFile, mirrorFile, ex)[ FD ]
Line_31 $$ totalBytes += read-->Line_34 $$ if (totalBytes == originalAttributes.length)[ FD ]
Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)-->Line_10 $$ if (!mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) [ FD ]
Line_52 $$ mirrorFile = new File(jarDir, mirrorName)-->Line_57 $$ FileUtil.setLastModified(mirrorFile, originalAttributes.lastModified)[ FD ]
Line_44 $$ File target = mirrorFile != null ? mirrorFile : tempJarFile != null ? tempJarFile : new File(jarDir)-->Line_45 $$ reportIOErrorWithJars(originalFile, target, ex)[ FD ]
Line_3 $$ File mirrorFile = null-->Line_57 $$ FileUtil.setLastModified(mirrorFile, originalAttributes.lastModified)[ FD ]
Line_3 $$ File mirrorFile = null-->Line_65 $$ info = new CacheLibraryInfo(mirrorFile.getName(), originalAttributes.lastModified, originalAttributes.length)[ FD ]
Line_14 $$ MessageDigest sha1 = null-->Line_51 $$ String mirrorName = getSnapshotName(originalFile.getName(), sha1.digest())[ FD ]
Line_52 $$ mirrorFile = new File(jarDir, mirrorName)-->Line_53 $$ if (mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) [ FD ]
Line_6 $$ String path = originalFile.getPath()-->Line_7 $$ CacheLibraryInfo info = CacheLibraryInfo.ourCachedLibraryInfo.get(path)[ FD ]
Line_3 $$ File mirrorFile = null-->Line_56 $$ FileUtil.rename(tempJarFile, mirrorFile)[ FD ]
Line_7 $$ CacheLibraryInfo info = CacheLibraryInfo.ourCachedLibraryInfo.get(path)-->Line_66 $$ CacheLibraryInfo.ourCachedLibraryInfo.put(path, info)[ FD ]
Line_28 $$ int read = is.read(buffer)-->Line_33 $$ os.write(buffer, 0, read)[ FD ]
Line_25 $$ byte[] buffer = new byte[Math.min(1024 * 1024, (int) originalAttributes.length)]-->Line_32 $$ sha1.update(buffer, 0, read)[ FD ]
Line_18 $$ DataOutputStream os = new DataOutputStream(new FileOutputStream(tempJarFile))-->Line_33 $$ os.write(buffer, 0, read)[ FD ]
Line_22 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_51 $$ String mirrorName = getSnapshotName(originalFile.getName(), sha1.digest())[ FD ]
Line_8 $$ if (info != null && originalAttributes.length == info.myFileLength && Math.abs(originalAttributes.lastModified - info.myModificationTime) <= FS_TIME_RESOLUTION) -->Line_10 $$ if (!mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) [ CD ]
Line_28 $$ int read = is.read(buffer)-->Line_31 $$ totalBytes += read[ FD ]
Line_27 $$ while (true) -->Line_31 $$ totalBytes += read[ CD ]
Line_20 $$ FileInputStream is = new FileInputStream(originalFile)-->Line_38 $$ is.close()[ FD ]
Line_26 $$ long totalBytes = 0-->Line_34 $$ if (totalBytes == originalAttributes.length)[ FD ]
Line_28 $$ int read = is.read(buffer)-->Line_32 $$ sha1.update(buffer, 0, read)[ FD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_51 $$ String mirrorName = getSnapshotName(originalFile.getName(), sha1.digest())[ FD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_17 $$ tempJarFile = FileUtil.createTempFile(new File(jarDir), originalFile.getName(), "", true, false)[ FD ]
Line_20 $$ FileInputStream is = new FileInputStream(originalFile)-->Line_28 $$ int read = is.read(buffer)[ FD ]
Line_14 $$ MessageDigest sha1 = null-->Line_22 $$ sha1 = MessageDigest.getInstance("SHA1")[ FD ]
Line_25 $$ byte[] buffer = new byte[Math.min(1024 * 1024, (int) originalAttributes.length)]-->Line_28 $$ int read = is.read(buffer)[ FD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_3 $$ File mirrorFile = null[ CD ]
Line_10 $$ if (!mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) -->Line_11 $$ return mirrorFile[ CD ]
Line_27 $$ while (true) -->Line_29 $$ if (read < 0)[ CD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_4 $$ String jarDir = getJarsDir()[ CD ]
Line_52 $$ mirrorFile = new File(jarDir, mirrorName)-->Line_65 $$ info = new CacheLibraryInfo(mirrorFile.getName(), originalAttributes.lastModified, originalAttributes.length)[ FD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_53 $$ if (mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) [ FD ]
Line_27 $$ while (true) -->Line_32 $$ sha1.update(buffer, 0, read)[ CD ]
Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)-->Line_65 $$ info = new CacheLibraryInfo(mirrorFile.getName(), originalAttributes.lastModified, originalAttributes.length)[ FD ]
Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)-->Line_55 $$ FileUtil.delete(mirrorFile)[ FD ]
Line_52 $$ mirrorFile = new File(jarDir, mirrorName)-->Line_56 $$ FileUtil.rename(tempJarFile, mirrorFile)[ FD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_70 $$ reportIOErrorWithJars(originalFile, mirrorFile != null ? mirrorFile : new File(jarDir, originalFile.getName()), ex)[ FD ]
Line_3 $$ File mirrorFile = null-->Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)[ FD ]
Line_52 $$ mirrorFile = new File(jarDir, mirrorName)-->Line_59 $$ reportIOErrorWithJars(originalFile, mirrorFile, ex)[ FD ]
Line_22 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_24 $$ sha1.update((byte) 0)[ FD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_10 $$ if (!mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) [ FD ]
Line_15 $$ File tempJarFile = null-->Line_56 $$ FileUtil.rename(tempJarFile, mirrorFile)[ FD ]
Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)-->Line_53 $$ if (mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) [ FD ]
Line_15 $$ File tempJarFile = null-->Line_63 $$ FileUtil.delete(tempJarFile)[ FD ]
Line_14 $$ MessageDigest sha1 = null-->Line_32 $$ sha1.update(buffer, 0, read)[ FD ]
Line_17 $$ tempJarFile = FileUtil.createTempFile(new File(jarDir), originalFile.getName(), "", true, false)-->Line_56 $$ FileUtil.rename(tempJarFile, mirrorFile)[ FD ]
Line_28 $$ int read = is.read(buffer)-->Line_29 $$ if (read < 0)[ FD ]
Line_17 $$ tempJarFile = FileUtil.createTempFile(new File(jarDir), originalFile.getName(), "", true, false)-->Line_63 $$ FileUtil.delete(tempJarFile)[ FD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_59 $$ reportIOErrorWithJars(originalFile, mirrorFile, ex)[ FD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_6 $$ String path = originalFile.getPath()[ FD ]
Line_7 $$ CacheLibraryInfo info = CacheLibraryInfo.ourCachedLibraryInfo.get(path)-->Line_65 $$ info = new CacheLibraryInfo(mirrorFile.getName(), originalAttributes.lastModified, originalAttributes.length)[ FD ]
Line_25 $$ byte[] buffer = new byte[Math.min(1024 * 1024, (int) originalAttributes.length)]-->Line_33 $$ os.write(buffer, 0, read)[ FD ]
Line_18 $$ DataOutputStream os = new DataOutputStream(new FileOutputStream(tempJarFile))-->Line_41 $$ os.close()[ FD ]
Line_26 $$ long totalBytes = 0-->Line_31 $$ totalBytes += read[ FD ]
Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)-->Line_57 $$ FileUtil.setLastModified(mirrorFile, originalAttributes.lastModified)[ FD ]
Line_27 $$ while (true) -->Line_33 $$ os.write(buffer, 0, read)[ CD ]
Line_3 $$ File mirrorFile = null-->Line_59 $$ reportIOErrorWithJars(originalFile, mirrorFile, ex)[ FD ]
Line_15 $$ File tempJarFile = null-->Line_17 $$ tempJarFile = FileUtil.createTempFile(new File(jarDir), originalFile.getName(), "", true, false)[ FD ]
Line_3 $$ File mirrorFile = null-->Line_55 $$ FileUtil.delete(mirrorFile)[ FD ]
Line_65 $$ info = new CacheLibraryInfo(mirrorFile.getName(), originalAttributes.lastModified, originalAttributes.length)-->Line_66 $$ CacheLibraryInfo.ourCachedLibraryInfo.put(path, info)[ FD ]
Line_53 $$ if (mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) -->Line_63 $$ FileUtil.delete(tempJarFile)[ CD ]
Line_3 $$ File mirrorFile = null-->Line_10 $$ if (!mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) [ FD ]
Line_2 $$ private File getMirrorWithContentHash(File originalFile, FileAttributes originalAttributes) -->Line_45 $$ reportIOErrorWithJars(originalFile, target, ex)[ FD ]
Line_8 $$ if (info != null && originalAttributes.length == info.myFileLength && Math.abs(originalAttributes.lastModified - info.myModificationTime) <= FS_TIME_RESOLUTION) -->Line_9 $$ mirrorFile = new File(jarDir, info.mySnapshotPath)[ CD ]
Line_27 $$ while (true) -->Line_28 $$ int read = is.read(buffer)[ CD ]
Line_6 $$ String path = originalFile.getPath()-->Line_66 $$ CacheLibraryInfo.ourCachedLibraryInfo.put(path, info)[ FD ]
Line_27 $$ while (true) -->Line_34 $$ if (totalBytes == originalAttributes.length)[ CD ]
Line_22 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_23 $$ sha1.update(String.valueOf(originalAttributes.length).getBytes(Charset.defaultCharset()))[ FD ]
Line_3 $$ File mirrorFile = null-->Line_53 $$ if (mirrorDiffers(originalAttributes, FileSystemUtil.getAttributes(mirrorFile), true)) [ FD ]
