Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_4 $$ final Path outDir = new Path("/testing/output")[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_16 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_26 $$ RunningJob runningJob = JobClient.runJob(conf)-->Line_34 $$ LOG.info("job is complete: " + runningJob.isSuccessful())[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_5 $$ FileSystem fs = FileSystem.get(fileSys, conf)[ CD ]
Line_4 $$ final Path outDir = new Path("/testing/output")-->Line_6 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_20 $$ conf.setMapperClass(IdentityMapper.class)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_18 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_6 $$ fs.delete(outDir, true)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_13 $$ file.close()[ CD ]
Line_3 $$ final Path inDir = new Path("/testing/input")-->Line_7 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_3 $$ final Path inDir = new Path("/testing/input")[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_21 $$ conf.setReducerClass(IdentityReducer.class)[ FD ]
Line_26 $$ RunningJob runningJob = JobClient.runJob(conf)-->Line_35 $$ return (runningJob.isSuccessful())[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_24 $$ conf.setNumMapTasks(numMaps)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_12 $$ file.writeBytes("foo foo2 foo3")[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_21 $$ conf.setReducerClass(IdentityReducer.class)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_15 $$ conf.setJobName("foo")[ FD ]
Line_7 $$ if (!fs.mkdirs(inDir)) -->Line_9 $$ return false[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_14 $$ FileSystem.setDefaultUri(conf, fileSys)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_15 $$ conf.setJobName("foo")[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_16 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_35 $$ return (runningJob.isSuccessful())[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_23 $$ FileOutputFormat.setOutputPath(conf, outDir)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_20 $$ conf.setMapperClass(IdentityMapper.class)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_25 $$ conf.setNumReduceTasks(numReduces)[ CD ]
Line_7 $$ if (!fs.mkdirs(inDir)) -->Line_8 $$ LOG.warn("Can't create " + inDir)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_11 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_19 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_23 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_14 $$ FileSystem.setDefaultUri(conf, fileSys)[ CD ]
Line_26 $$ RunningJob runningJob = JobClient.runJob(conf)-->Line_29 $$ assertTrue(runningJob.isSuccessful())[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_34 $$ LOG.info("job is complete: " + runningJob.isSuccessful())[ CD ]
Line_5 $$ FileSystem fs = FileSystem.get(fileSys, conf)-->Line_7 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_4 $$ final Path outDir = new Path("/testing/output")-->Line_23 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_5 $$ FileSystem fs = FileSystem.get(fileSys, conf)-->Line_30 $$ assertTrue("Output folder not found!", fs.exists(new Path("/testing/output/" + OUTPUT_FILENAME)))[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_26 $$ RunningJob runningJob = JobClient.runJob(conf)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_25 $$ conf.setNumReduceTasks(numReduces)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_7 $$ if (!fs.mkdirs(inDir)) [ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_26 $$ RunningJob runningJob = JobClient.runJob(conf)[ FD ]
Line_5 $$ FileSystem fs = FileSystem.get(fileSys, conf)-->Line_6 $$ fs.delete(outDir, true)[ FD ]
Line_26 $$ RunningJob runningJob = JobClient.runJob(conf)-->Line_28 $$ assertTrue(runningJob.isComplete())[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_17 $$ conf.setOutputFormat(SpecialTextOutputFormat.class)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_24 $$ conf.setNumMapTasks(numMaps)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_5 $$ FileSystem fs = FileSystem.get(fileSys, conf)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_19 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_11 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_13 $$ file.close()[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_18 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_22 $$ FileInputFormat.setInputPaths(conf, inDir)[ CD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_22 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_3 $$ final Path inDir = new Path("/testing/input")-->Line_22 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_2 $$ public static boolean launchJob(URI fileSys, JobConf conf, int numMaps, int numReduces) throws IOException -->Line_17 $$ conf.setOutputFormat(SpecialTextOutputFormat.class)[ CD ]
Line_5 $$ FileSystem fs = FileSystem.get(fileSys, conf)-->Line_11 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ FD ]
Line_11 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_12 $$ file.writeBytes("foo foo2 foo3")[ FD ]
