Line_13 $$ for (Map.Entry<String, String> entry : mr.createJobConf()) -->Line_15 $$ args.add(entry.getKey() + "=" + entry.getValue())[ FD ]
Line_11 $$ mr = new MiniMRCluster(1, namenode, 3)-->Line_13 $$ for (Map.Entry<String, String> entry : mr.createJobConf()) [ FD ]
Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))-->Line_24 $$ file.writeBytes(mapString + "\n")[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_17 $$ String[] argv = new String[] [ FD ]
Line_4 $$ MiniMRCluster mr = null-->Line_54 $$ mr.shutdown()[ FD ]
Line_12 $$ List<String> args = new ArrayList<String>()-->Line_19 $$ args.add(arg)[ FD ]
Line_17 $$ String[] argv = new String[] -->Line_21 $$ argv = args.toArray(new String[args.size()])[ FD ]
Line_9 $$ FileSystem fileSys = dfs.getFileSystem()-->Line_35 $$ fileSys = dfs.getFileSystem()[ FD ]
Line_8 $$ dfs = new MiniDFSCluster.Builder(conf).build()-->Line_9 $$ FileSystem fileSys = dfs.getFileSystem()[ FD ]
Line_39 $$ for (int i = 0; i < fileList.length; i++) -->Line_43 $$ System.out.println(line)[ CD ]
Line_8 $$ dfs = new MiniDFSCluster.Builder(conf).build()-->Line_50 $$ if (dfs != null) [ FD ]
Line_11 $$ mr = new MiniMRCluster(1, namenode, 3)-->Line_54 $$ mr.shutdown()[ FD ]
Line_9 $$ FileSystem fileSys = dfs.getFileSystem()-->Line_10 $$ String namenode = fileSys.getUri().toString()[ FD ]
Line_39 $$ for (int i = 0; i < fileList.length; i++) -->Line_44 $$ line2 = bread.readLine()[ CD ]
Line_44 $$ line2 = bread.readLine()-->Line_48 $$ assertEquals(cacheString2 + "\t", line2)[ FD ]
Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))-->Line_25 $$ file.writeBytes(mapString2 + "\n")[ FD ]
Line_27 $$ file = fileSys.create(new Path(CACHE_FILE))-->Line_31 $$ file.writeBytes(cacheString2 + "\n")[ FD ]
Line_36 $$ String line = null-->Line_47 $$ assertEquals(cacheString + "\t", line)[ FD ]
Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))-->Line_31 $$ file.writeBytes(cacheString2 + "\n")[ FD ]
Line_4 $$ MiniMRCluster mr = null-->Line_13 $$ for (Map.Entry<String, String> entry : mr.createJobConf()) [ FD ]
Line_5 $$ MiniDFSCluster dfs = null-->Line_9 $$ FileSystem fileSys = dfs.getFileSystem()[ FD ]
Line_2 $$ public void testMultipleCachefiles() throws Exception -->Line_4 $$ MiniMRCluster mr = null[ CD ]
Line_18 $$ for (String arg : argv) -->Line_19 $$ args.add(arg)[ FD ]
Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))-->Line_28 $$ file.writeBytes(cacheString + "\n")[ FD ]
Line_5 $$ MiniDFSCluster dfs = null-->Line_8 $$ dfs = new MiniDFSCluster.Builder(conf).build()[ FD ]
Line_12 $$ List<String> args = new ArrayList<String>()-->Line_14 $$ args.add("-jobconf")[ FD ]
Line_12 $$ List<String> args = new ArrayList<String>()-->Line_21 $$ argv = args.toArray(new String[args.size()])[ FD ]
Line_5 $$ MiniDFSCluster dfs = null-->Line_35 $$ fileSys = dfs.getFileSystem()[ FD ]
Line_8 $$ dfs = new MiniDFSCluster.Builder(conf).build()-->Line_35 $$ fileSys = dfs.getFileSystem()[ FD ]
Line_39 $$ for (int i = 0; i < fileList.length; i++) -->Line_40 $$ System.out.println(fileList[i].toString())[ CD ]
Line_41 $$ BufferedReader bread = new BufferedReader(new InputStreamReader(fileSys.open(fileList[i])))-->Line_42 $$ line = bread.readLine()[ FD ]
Line_39 $$ for (int i = 0; i < fileList.length; i++) -->Line_45 $$ System.out.println(line2)[ CD ]
Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))-->Line_29 $$ file.close()[ FD ]
Line_27 $$ file = fileSys.create(new Path(CACHE_FILE))-->Line_32 $$ file.close()[ FD ]
Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))-->Line_30 $$ file = fileSys.create(new Path(CACHE_FILE_2))[ FD ]
Line_9 $$ FileSystem fileSys = dfs.getFileSystem()-->Line_41 $$ BufferedReader bread = new BufferedReader(new InputStreamReader(fileSys.open(fileList[i])))[ FD ]
Line_9 $$ FileSystem fileSys = dfs.getFileSystem()-->Line_38 $$ Path[] fileList = FileUtil.stat2Paths(fileSys.listStatus(new Path(OUTPUT_DIR), new Utils.OutputFileUtils.OutputFilesFilter()))[ FD ]
Line_41 $$ BufferedReader bread = new BufferedReader(new InputStreamReader(fileSys.open(fileList[i])))-->Line_44 $$ line2 = bread.readLine()[ FD ]
Line_8 $$ dfs = new MiniDFSCluster.Builder(conf).build()-->Line_51 $$ dfs.shutdown()[ FD ]
Line_37 $$ String line2 = null-->Line_44 $$ line2 = bread.readLine()[ FD ]
Line_4 $$ MiniMRCluster mr = null-->Line_53 $$ if (mr != null) [ FD ]
Line_30 $$ file = fileSys.create(new Path(CACHE_FILE_2))-->Line_31 $$ file.writeBytes(cacheString2 + "\n")[ FD ]
Line_39 $$ for (int i = 0; i < fileList.length; i++) -->Line_42 $$ line = bread.readLine()[ CD ]
Line_37 $$ String line2 = null-->Line_45 $$ System.out.println(line2)[ FD ]
Line_9 $$ FileSystem fileSys = dfs.getFileSystem()-->Line_17 $$ String[] argv = new String[] [ FD ]
Line_27 $$ file = fileSys.create(new Path(CACHE_FILE))-->Line_30 $$ file = fileSys.create(new Path(CACHE_FILE_2))[ FD ]
Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))-->Line_32 $$ file.close()[ FD ]
Line_42 $$ line = bread.readLine()-->Line_43 $$ System.out.println(line)[ FD ]
Line_9 $$ FileSystem fileSys = dfs.getFileSystem()-->Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))[ FD ]
Line_44 $$ line2 = bread.readLine()-->Line_45 $$ System.out.println(line2)[ FD ]
Line_37 $$ String line2 = null-->Line_48 $$ assertEquals(cacheString2 + "\t", line2)[ FD ]
Line_12 $$ List<String> args = new ArrayList<String>()-->Line_15 $$ args.add(entry.getKey() + "=" + entry.getValue())[ FD ]
Line_50 $$ if (dfs != null) -->Line_51 $$ dfs.shutdown()[ CD ]
Line_9 $$ FileSystem fileSys = dfs.getFileSystem()-->Line_27 $$ file = fileSys.create(new Path(CACHE_FILE))[ FD ]
Line_4 $$ MiniMRCluster mr = null-->Line_11 $$ mr = new MiniMRCluster(1, namenode, 3)[ FD ]
Line_2 $$ public void testMultipleCachefiles() throws Exception -->Line_5 $$ MiniDFSCluster dfs = null[ CD ]
Line_27 $$ file = fileSys.create(new Path(CACHE_FILE))-->Line_29 $$ file.close()[ FD ]
Line_35 $$ fileSys = dfs.getFileSystem()-->Line_38 $$ Path[] fileList = FileUtil.stat2Paths(fileSys.listStatus(new Path(OUTPUT_DIR), new Utils.OutputFileUtils.OutputFilesFilter()))[ FD ]
Line_2 $$ public void testMultipleCachefiles() throws Exception -->Line_3 $$ boolean mayExit = false[ CD ]
Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))-->Line_26 $$ file.close()[ FD ]
Line_36 $$ String line = null-->Line_42 $$ line = bread.readLine()[ FD ]
Line_36 $$ String line = null-->Line_43 $$ System.out.println(line)[ FD ]
Line_35 $$ fileSys = dfs.getFileSystem()-->Line_41 $$ BufferedReader bread = new BufferedReader(new InputStreamReader(fileSys.open(fileList[i])))[ FD ]
Line_42 $$ line = bread.readLine()-->Line_47 $$ assertEquals(cacheString + "\t", line)[ FD ]
Line_9 $$ FileSystem fileSys = dfs.getFileSystem()-->Line_22 $$ fileSys.delete(new Path(OUTPUT_DIR), true)[ FD ]
Line_30 $$ file = fileSys.create(new Path(CACHE_FILE_2))-->Line_32 $$ file.close()[ FD ]
Line_39 $$ for (int i = 0; i < fileList.length; i++) -->Line_41 $$ BufferedReader bread = new BufferedReader(new InputStreamReader(fileSys.open(fileList[i])))[ CD ]
Line_5 $$ MiniDFSCluster dfs = null-->Line_51 $$ dfs.shutdown()[ FD ]
Line_11 $$ mr = new MiniMRCluster(1, namenode, 3)-->Line_53 $$ if (mr != null) [ FD ]
Line_53 $$ if (mr != null) -->Line_54 $$ mr.shutdown()[ CD ]
Line_5 $$ MiniDFSCluster dfs = null-->Line_50 $$ if (dfs != null) [ FD ]
Line_23 $$ DataOutputStream file = fileSys.create(new Path(INPUT_FILE))-->Line_27 $$ file = fileSys.create(new Path(CACHE_FILE))[ FD ]
Line_9 $$ FileSystem fileSys = dfs.getFileSystem()-->Line_30 $$ file = fileSys.create(new Path(CACHE_FILE_2))[ FD ]
Line_27 $$ file = fileSys.create(new Path(CACHE_FILE))-->Line_28 $$ file.writeBytes(cacheString + "\n")[ FD ]
