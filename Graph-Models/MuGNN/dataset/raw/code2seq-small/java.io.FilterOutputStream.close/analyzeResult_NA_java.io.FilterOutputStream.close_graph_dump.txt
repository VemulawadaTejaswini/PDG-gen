Line_16 $$ in = fs.open(reduceFiles[i].getPath())-->Line_38 $$ in.close()[ FD ]
Line_14 $$ BufferedReader lines = null-->Line_17 $$ lines = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_4 $$ DataOutputStream out = null-->Line_45 $$ out.close()[ FD ]
Line_5 $$ BufferedWriter writer = null-->Line_31 $$ writer.write(String.valueOf((float) val))[ FD ]
Line_37 $$ if (in != null)-->Line_38 $$ in.close()[ CD ]
Line_7 $$ out = new DataOutputStream(fs.create(resFileName))-->Line_45 $$ out.close()[ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_25 $$ writer.write(attr.substring(2))[ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_43 $$ writer.close()[ FD ]
Line_2 $$ private static void analyzeResult(FileSystem fs, int testType, long execTime, Path resFileName) throws IOException -->Line_16 $$ in = fs.open(reduceFiles[i].getPath())[ FD ]
Line_2 $$ private static void analyzeResult(FileSystem fs, int testType, long execTime, Path resFileName) throws IOException -->Line_4 $$ DataOutputStream out = null[ CD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_22 $$ String dateTime = tokens.nextToken()[ CD ]
Line_13 $$ DataInputStream in = null-->Line_38 $$ in.close()[ FD ]
Line_5 $$ BufferedWriter writer = null-->Line_42 $$ if (writer != null)[ FD ]
Line_18 $$ String line-->Line_19 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_27 $$ writer.write(dateTime)[ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_29 $$ writer.write(taskType)[ FD ]
Line_2 $$ private static void analyzeResult(FileSystem fs, int testType, long execTime, Path resFileName) throws IOException -->Line_3 $$ LOG.info("Analizing results ...")[ CD ]
Line_5 $$ BufferedWriter writer = null-->Line_32 $$ writer.newLine()[ FD ]
Line_2 $$ private static void analyzeResult(FileSystem fs, int testType, long execTime, Path resFileName) throws IOException -->Line_7 $$ out = new DataOutputStream(fs.create(resFileName))[ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_31 $$ writer.write(String.valueOf((float) val))[ FD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_27 $$ writer.write(dateTime)[ CD ]
Line_5 $$ BufferedWriter writer = null-->Line_27 $$ writer.write(dateTime)[ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_28 $$ writer.write("\t")[ FD ]
Line_5 $$ BufferedWriter writer = null-->Line_26 $$ writer.write("\t")[ FD ]
Line_14 $$ BufferedReader lines = null-->Line_36 $$ lines.close()[ FD ]
Line_5 $$ BufferedWriter writer = null-->Line_25 $$ writer.write(attr.substring(2))[ FD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_24 $$ double val = Long.parseLong(tokens.nextToken()) / (double) DEFAULT_TIME_INTERVAL_MSEC[ CD ]
Line_7 $$ out = new DataOutputStream(fs.create(resFileName))-->Line_44 $$ if (out != null)[ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_9 $$ writer.write("SERIES\tPERIOD\tTYPE\tSLOT_HOUR\n")[ FD ]
Line_4 $$ DataOutputStream out = null-->Line_7 $$ out = new DataOutputStream(fs.create(resFileName))[ FD ]
Line_35 $$ if (lines != null)-->Line_36 $$ lines.close()[ CD ]
Line_17 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_19 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_20 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")-->Line_23 $$ String taskType = tokens.nextToken()[ FD ]
Line_5 $$ BufferedWriter writer = null-->Line_30 $$ writer.write("\t")[ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_42 $$ if (writer != null)[ FD ]
Line_2 $$ private static void analyzeResult(FileSystem fs, int testType, long execTime, Path resFileName) throws IOException -->Line_10 $$ FileStatus[] reduceFiles = fs.listStatus(OUTPUT_DIR)[ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_26 $$ writer.write("\t")[ FD ]
Line_16 $$ in = fs.open(reduceFiles[i].getPath())-->Line_37 $$ if (in != null)[ FD ]
Line_23 $$ String taskType = tokens.nextToken()-->Line_29 $$ writer.write(taskType)[ FD ]
Line_20 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")-->Line_21 $$ String attr = tokens.nextToken()[ FD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_25 $$ writer.write(attr.substring(2))[ CD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_30 $$ writer.write("\t")[ CD ]
Line_13 $$ DataInputStream in = null-->Line_16 $$ in = fs.open(reduceFiles[i].getPath())[ FD ]
Line_20 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")-->Line_22 $$ String dateTime = tokens.nextToken()[ FD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_20 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")[ CD ]
Line_5 $$ BufferedWriter writer = null-->Line_28 $$ writer.write("\t")[ FD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_23 $$ String taskType = tokens.nextToken()[ CD ]
Line_4 $$ DataOutputStream out = null-->Line_44 $$ if (out != null)[ FD ]
Line_22 $$ String dateTime = tokens.nextToken()-->Line_27 $$ writer.write(dateTime)[ FD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_28 $$ writer.write("\t")[ CD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_30 $$ writer.write("\t")[ FD ]
Line_5 $$ BufferedWriter writer = null-->Line_43 $$ writer.close()[ FD ]
Line_20 $$ StringTokenizer tokens = new StringTokenizer(line, "\t*")-->Line_24 $$ double val = Long.parseLong(tokens.nextToken()) / (double) DEFAULT_TIME_INTERVAL_MSEC[ FD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_21 $$ String attr = tokens.nextToken()[ CD ]
Line_17 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_35 $$ if (lines != null)[ FD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_26 $$ writer.write("\t")[ CD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_29 $$ writer.write(taskType)[ CD ]
Line_5 $$ BufferedWriter writer = null-->Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))[ FD ]
Line_13 $$ DataInputStream in = null-->Line_37 $$ if (in != null)[ FD ]
Line_44 $$ if (out != null)-->Line_45 $$ out.close()[ CD ]
Line_2 $$ private static void analyzeResult(FileSystem fs, int testType, long execTime, Path resFileName) throws IOException -->Line_5 $$ BufferedWriter writer = null[ CD ]
Line_17 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_36 $$ lines.close()[ FD ]
Line_14 $$ BufferedReader lines = null-->Line_19 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_12 $$ for (int i = 0; i < JHLAPartitioner.NUM_REDUCERS; i++) -->Line_14 $$ BufferedReader lines = null[ CD ]
Line_12 $$ for (int i = 0; i < JHLAPartitioner.NUM_REDUCERS; i++) -->Line_13 $$ DataInputStream in = null[ CD ]
Line_5 $$ BufferedWriter writer = null-->Line_29 $$ writer.write(taskType)[ FD ]
Line_14 $$ BufferedReader lines = null-->Line_35 $$ if (lines != null)[ FD ]
Line_8 $$ writer = new BufferedWriter(new OutputStreamWriter(out))-->Line_32 $$ writer.newLine()[ FD ]
Line_42 $$ if (writer != null)-->Line_43 $$ writer.close()[ CD ]
Line_21 $$ String attr = tokens.nextToken()-->Line_25 $$ writer.write(attr.substring(2))[ FD ]
Line_5 $$ BufferedWriter writer = null-->Line_9 $$ writer.write("SERIES\tPERIOD\tTYPE\tSLOT_HOUR\n")[ FD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_32 $$ writer.newLine()[ CD ]
Line_2 $$ private static void analyzeResult(FileSystem fs, int testType, long execTime, Path resFileName) throws IOException -->Line_47 $$ LOG.info("Analizing results ... done.")[ CD ]
Line_19 $$ while ((line = lines.readLine()) != null) -->Line_31 $$ writer.write(String.valueOf((float) val))[ CD ]
