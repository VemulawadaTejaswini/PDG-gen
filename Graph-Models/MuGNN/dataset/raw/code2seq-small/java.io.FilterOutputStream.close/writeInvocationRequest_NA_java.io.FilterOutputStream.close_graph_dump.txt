Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_16 $$ dataOutput.close()[ CD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_5 $$ dataOutput.writeUTF("java.lang.String")[ CD ]
Line_7 $$ final EJBLocator locator = new StatelessEJBLocator<T>(remoteInterface, "", "ejb-invocation-compression-test", CompressingBean.class.getSimpleName(), "")-->Line_10 $$ marshaller.writeObject(locator.getDistinctName())[ FD ]
Line_6 $$ final Marshaller marshaller = prepareMarshaller(dataOutput)-->Line_13 $$ marshaller.writeObject("message")[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_16 $$ dataOutput.close()[ FD ]
Line_6 $$ final Marshaller marshaller = prepareMarshaller(dataOutput)-->Line_8 $$ marshaller.writeObject(locator.getAppName())[ FD ]
Line_7 $$ final EJBLocator locator = new StatelessEJBLocator<T>(remoteInterface, "", "ejb-invocation-compression-test", CompressingBean.class.getSimpleName(), "")-->Line_8 $$ marshaller.writeObject(locator.getAppName())[ FD ]
Line_7 $$ final EJBLocator locator = new StatelessEJBLocator<T>(remoteInterface, "", "ejb-invocation-compression-test", CompressingBean.class.getSimpleName(), "")-->Line_9 $$ marshaller.writeObject(locator.getModuleName())[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_14 $$ marshaller.finish()[ CD ]
Line_6 $$ final Marshaller marshaller = prepareMarshaller(dataOutput)-->Line_10 $$ marshaller.writeObject(locator.getDistinctName())[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_6 $$ final Marshaller marshaller = prepareMarshaller(dataOutput)[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_15 $$ dataOutput.writeByte(0)[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_4 $$ dataOutput.writeUTF(methodName)[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_13 $$ marshaller.writeObject("message")[ CD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_5 $$ dataOutput.writeUTF("java.lang.String")[ FD ]
Line_6 $$ final Marshaller marshaller = prepareMarshaller(dataOutput)-->Line_12 $$ marshaller.writeObject(locator)[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_15 $$ dataOutput.writeByte(0)[ CD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_6 $$ final Marshaller marshaller = prepareMarshaller(dataOutput)[ CD ]
Line_7 $$ final EJBLocator locator = new StatelessEJBLocator<T>(remoteInterface, "", "ejb-invocation-compression-test", CompressingBean.class.getSimpleName(), "")-->Line_11 $$ marshaller.writeObject(locator.getBeanName())[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_3 $$ dataOutput.writeShort(0)[ CD ]
Line_6 $$ final Marshaller marshaller = prepareMarshaller(dataOutput)-->Line_9 $$ marshaller.writeObject(locator.getModuleName())[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_11 $$ marshaller.writeObject(locator.getBeanName())[ CD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_3 $$ dataOutput.writeShort(0)[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_7 $$ final EJBLocator locator = new StatelessEJBLocator<T>(remoteInterface, "", "ejb-invocation-compression-test", CompressingBean.class.getSimpleName(), "")[ CD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_10 $$ marshaller.writeObject(locator.getDistinctName())[ CD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_9 $$ marshaller.writeObject(locator.getModuleName())[ CD ]
Line_6 $$ final Marshaller marshaller = prepareMarshaller(dataOutput)-->Line_11 $$ marshaller.writeObject(locator.getBeanName())[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_12 $$ marshaller.writeObject(locator)[ CD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_8 $$ marshaller.writeObject(locator.getAppName())[ CD ]
Line_6 $$ final Marshaller marshaller = prepareMarshaller(dataOutput)-->Line_14 $$ marshaller.finish()[ FD ]
Line_2 $$ private <T> void writeInvocationRequest(DataOutputStream dataOutput, Class<T> remoteInterface, String methodName) throws IOException -->Line_4 $$ dataOutput.writeUTF(methodName)[ CD ]
Line_7 $$ final EJBLocator locator = new StatelessEJBLocator<T>(remoteInterface, "", "ejb-invocation-compression-test", CompressingBean.class.getSimpleName(), "")-->Line_12 $$ marshaller.writeObject(locator)[ FD ]
