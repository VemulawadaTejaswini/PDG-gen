Line_2 $$ public void testContainerLogPageAccess() throws IOException -->Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null[ CD ]
Line_26 $$ containerDir = new File(appDir, container1.toString())-->Line_55 $$ containerDir.delete()[ FD ]
Line_7 $$ absLogDir = new File("target", TestContainerLogsPage.class.getSimpleName() + "LogDir").getAbsoluteFile()-->Line_10 $$ conf.set(YarnConfiguration.NM_LOG_DIRS, absLogDir.toURI().toString())[ FD ]
Line_24 $$ appDir = new File(absLogDir, appId.toString())-->Line_25 $$ appDir.mkdir()[ FD ]
Line_44 $$ Map<String, String> params = new HashMap<String, String>()-->Line_46 $$ params.put(YarnWebParams.CONTAINER_LOG_TYPE, "syslog")[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_57 $$ if (appDir != null) [ FD ]
Line_9 $$ Configuration conf = new Configuration()-->Line_11 $$ conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")[ FD ]
Line_48 $$ PrintWriter spyPw = WebAppTests.getPrintWriter(injector)-->Line_49 $$ verify(spyPw).write("Exception reading log file. Application submitted by '" + user + "' doesn't own requested log file : syslog")[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_58 $$ appDir.delete()[ FD ]
Line_33 $$ Context context = mock(Context.class)-->Line_36 $$ when(context.getApplications()).thenReturn(appMap)[ FD ]
Line_26 $$ containerDir = new File(appDir, container1.toString())-->Line_27 $$ containerDir.mkdir()[ FD ]
Line_28 $$ syslog = new File(containerDir, "syslog")-->Line_29 $$ syslog.createNewFile()[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_10 $$ conf.set(YarnConfiguration.NM_LOG_DIRS, absLogDir.toURI().toString())[ FD ]
Line_60 $$ if (absLogDir != null) -->Line_61 $$ absLogDir.delete()[ CD ]
Line_18 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)-->Line_22 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)[ FD ]
Line_28 $$ syslog = new File(containerDir, "syslog")-->Line_52 $$ syslog.delete()[ FD ]
Line_33 $$ Context context = mock(Context.class)-->Line_38 $$ when(context.getContainers()).thenReturn(containers)[ FD ]
Line_40 $$ MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), conf, user, appId, 1)-->Line_42 $$ context.getContainers().put(container1, container)[ FD ]
Line_47 $$ Injector injector = WebAppTests.testPage(ContainerLogsPage.class, ContainersLogsBlock.class, cLogsBlock, params, (Module[]) null)-->Line_48 $$ PrintWriter spyPw = WebAppTests.getPrintWriter(injector)[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_54 $$ if (containerDir != null) [ FD ]
Line_7 $$ absLogDir = new File("target", TestContainerLogsPage.class.getSimpleName() + "LogDir").getAbsoluteFile()-->Line_8 $$ absLogDir.mkdir()[ FD ]
Line_4 $$ String user = "randomUser" + System.currentTimeMillis()-->Line_21 $$ when(app.getUser()).thenReturn(user)[ FD ]
Line_2 $$ public void testContainerLogPageAccess() throws IOException -->Line_3 $$ assumeTrue(NativeIO.isAvailable())[ CD ]
Line_18 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)-->Line_35 $$ appMap.put(appId, app)[ FD ]
Line_44 $$ Map<String, String> params = new HashMap<String, String>()-->Line_45 $$ params.put(YarnWebParams.CONTAINER_ID, container1.toString())[ FD ]
Line_7 $$ absLogDir = new File("target", TestContainerLogsPage.class.getSimpleName() + "LogDir").getAbsoluteFile()-->Line_60 $$ if (absLogDir != null) [ FD ]
Line_9 $$ Configuration conf = new Configuration()-->Line_12 $$ UserGroupInformation.setConfiguration(conf)[ FD ]
Line_23 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)-->Line_42 $$ context.getContainers().put(container1, container)[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_27 $$ containerDir.mkdir()[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_60 $$ if (absLogDir != null) [ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_55 $$ containerDir.delete()[ FD ]
Line_7 $$ absLogDir = new File("target", TestContainerLogsPage.class.getSimpleName() + "LogDir").getAbsoluteFile()-->Line_61 $$ absLogDir.delete()[ FD ]
Line_19 $$ Application app = mock(Application.class)-->Line_20 $$ when(app.getAppId()).thenReturn(appId)[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_26 $$ containerDir = new File(appDir, container1.toString())[ FD ]
Line_9 $$ Configuration conf = new Configuration()-->Line_14 $$ healthChecker.init(conf)[ FD ]
Line_51 $$ if (syslog != null) -->Line_52 $$ syslog.delete()[ CD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_52 $$ syslog.delete()[ FD ]
Line_26 $$ containerDir = new File(appDir, container1.toString())-->Line_54 $$ if (containerDir != null) [ FD ]
Line_9 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.set(YarnConfiguration.NM_LOG_DIRS, absLogDir.toURI().toString())[ FD ]
Line_34 $$ ConcurrentMap<ApplicationId, Application> appMap = new ConcurrentHashMap<ApplicationId, Application>()-->Line_36 $$ when(context.getApplications()).thenReturn(appMap)[ FD ]
Line_37 $$ ConcurrentHashMap<ContainerId, Container> containers = new ConcurrentHashMap<ContainerId, Container>()-->Line_38 $$ when(context.getContainers()).thenReturn(containers)[ FD ]
Line_19 $$ Application app = mock(Application.class)-->Line_21 $$ when(app.getUser()).thenReturn(user)[ FD ]
Line_34 $$ ConcurrentMap<ApplicationId, Application> appMap = new ConcurrentHashMap<ApplicationId, Application>()-->Line_35 $$ appMap.put(appId, app)[ FD ]
Line_30 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(syslog))-->Line_32 $$ out.close()[ FD ]
Line_22 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)-->Line_23 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_29 $$ syslog.createNewFile()[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_7 $$ absLogDir = new File("target", TestContainerLogsPage.class.getSimpleName() + "LogDir").getAbsoluteFile()[ FD ]
Line_15 $$ LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler()-->Line_39 $$ when(context.getLocalDirsHandler()).thenReturn(dirsHandler)[ FD ]
Line_30 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(syslog))-->Line_31 $$ out.write("Log file Content".getBytes())[ FD ]
Line_33 $$ Context context = mock(Context.class)-->Line_42 $$ context.getContainers().put(container1, container)[ FD ]
Line_16 $$ RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf)-->Line_23 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)[ FD ]
Line_18 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)-->Line_20 $$ when(app.getAppId()).thenReturn(appId)[ FD ]
Line_24 $$ appDir = new File(absLogDir, appId.toString())-->Line_57 $$ if (appDir != null) [ FD ]
Line_28 $$ syslog = new File(containerDir, "syslog")-->Line_51 $$ if (syslog != null) [ FD ]
Line_23 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)-->Line_26 $$ containerDir = new File(appDir, container1.toString())[ FD ]
Line_9 $$ Configuration conf = new Configuration()-->Line_16 $$ RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf)[ FD ]
Line_18 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)-->Line_23 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)[ FD ]
Line_23 $$ ContainerId container1 = BuilderUtils.newContainerId(recordFactory, appId, appAttemptId, 0)-->Line_45 $$ params.put(YarnWebParams.CONTAINER_ID, container1.toString())[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_24 $$ appDir = new File(absLogDir, appId.toString())[ FD ]
Line_57 $$ if (appDir != null) -->Line_58 $$ appDir.delete()[ CD ]
Line_43 $$ ContainersLogsBlock cLogsBlock = new ContainersLogsBlock(context)-->Line_47 $$ Injector injector = WebAppTests.testPage(ContainerLogsPage.class, ContainersLogsBlock.class, cLogsBlock, params, (Module[]) null)[ FD ]
Line_40 $$ MockContainer container = new MockContainer(appAttemptId, new AsyncDispatcher(), conf, user, appId, 1)-->Line_41 $$ container.setState(ContainerState.RUNNING)[ FD ]
Line_33 $$ Context context = mock(Context.class)-->Line_39 $$ when(context.getLocalDirsHandler()).thenReturn(dirsHandler)[ FD ]
Line_13 $$ NodeHealthCheckerService healthChecker = new NodeHealthCheckerService()-->Line_14 $$ healthChecker.init(conf)[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_28 $$ syslog = new File(containerDir, "syslog")[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_25 $$ appDir.mkdir()[ FD ]
Line_44 $$ Map<String, String> params = new HashMap<String, String>()-->Line_47 $$ Injector injector = WebAppTests.testPage(ContainerLogsPage.class, ContainersLogsBlock.class, cLogsBlock, params, (Module[]) null)[ FD ]
Line_24 $$ appDir = new File(absLogDir, appId.toString())-->Line_58 $$ appDir.delete()[ FD ]
Line_19 $$ Application app = mock(Application.class)-->Line_35 $$ appMap.put(appId, app)[ FD ]
Line_2 $$ public void testContainerLogPageAccess() throws IOException -->Line_4 $$ String user = "randomUser" + System.currentTimeMillis()[ CD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_8 $$ absLogDir.mkdir()[ FD ]
Line_13 $$ NodeHealthCheckerService healthChecker = new NodeHealthCheckerService()-->Line_15 $$ LocalDirsHandlerService dirsHandler = healthChecker.getDiskHandler()[ FD ]
Line_18 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)-->Line_24 $$ appDir = new File(absLogDir, appId.toString())[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_61 $$ absLogDir.delete()[ FD ]
Line_54 $$ if (containerDir != null) -->Line_55 $$ containerDir.delete()[ CD ]
Line_17 $$ long clusterTimeStamp = 1234-->Line_18 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)[ FD ]
Line_5 $$ File absLogDir = null, appDir = null, containerDir = null, syslog = null-->Line_51 $$ if (syslog != null) [ FD ]
Line_16 $$ RecordFactory recordFactory = RecordFactoryProvider.getRecordFactory(conf)-->Line_18 $$ ApplicationId appId = BuilderUtils.newApplicationId(recordFactory, clusterTimeStamp, 1)[ FD ]
