Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_5 $$ FileUtil.deleteWithRenaming(file)[ FD ]
Line_8 $$ final DataOutputStream os = FileUtilRt.doIOOperation(new FileUtilRt.RepeatableIOOperation<DataOutputStream, FileNotFoundException>() -->Line_21 $$ DataInputOutputUtil.writeINT(os, version)[ FD ]
Line_8 $$ final DataOutputStream os = FileUtilRt.doIOOperation(new FileUtilRt.RepeatableIOOperation<DataOutputStream, FileNotFoundException>() -->Line_23 $$ DataInputOutputUtil.writeTIME(os, FSRecords.getCreationTimestamp())[ FD ]
Line_30 $$ if (!lastModifiedSuccess) -->Line_32 $$ ourLastStamp = Math.max(ourLastStamp, file.lastModified())[ CD ]
Line_30 $$ if (!lastModifiedSuccess) -->Line_31 $$ Logger.getInstance(IndexingStamp.class).info("Setting lastModified failed for " + file + " timestamp:" + max)[ CD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_4 $$ if (file.exists()) [ CD ]
Line_4 $$ if (file.exists()) -->Line_5 $$ FileUtil.deleteWithRenaming(file)[ CD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_7 $$ file.getParentFile().mkdirs()[ CD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_29 $$ final boolean lastModifiedSuccess = file.setLastModified(max)[ FD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_3 $$ final long prevLastModifiedValue = file.lastModified()[ FD ]
Line_8 $$ final DataOutputStream os = FileUtilRt.doIOOperation(new FileUtilRt.RepeatableIOOperation<DataOutputStream, FileNotFoundException>() -->Line_26 $$ os.close()[ FD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_32 $$ ourLastStamp = Math.max(ourLastStamp, file.lastModified())[ FD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_4 $$ if (file.exists()) [ FD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_21 $$ DataInputOutputUtil.writeINT(os, version)[ FD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_8 $$ final DataOutputStream os = FileUtilRt.doIOOperation(new FileUtilRt.RepeatableIOOperation<DataOutputStream, FileNotFoundException>() [ CD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_3 $$ final long prevLastModifiedValue = file.lastModified()[ CD ]
Line_2 $$ public static synchronized void rewriteVersion(@NotNull final File file, final int version) throws IOException -->Line_7 $$ file.getParentFile().mkdirs()[ FD ]
Line_8 $$ final DataOutputStream os = FileUtilRt.doIOOperation(new FileUtilRt.RepeatableIOOperation<DataOutputStream, FileNotFoundException>() -->Line_22 $$ DataInputOutputUtil.writeINT(os, VERSION)[ FD ]
