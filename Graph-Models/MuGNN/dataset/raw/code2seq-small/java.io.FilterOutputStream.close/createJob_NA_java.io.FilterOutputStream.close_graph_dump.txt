Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_13 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + i))[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_8 $$ if (fs.exists(inDir)) [ CD ]
Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_11 $$ fs.mkdirs(inDir)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_18 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_8 $$ if (fs.exists(inDir)) -->Line_9 $$ fs.delete(inDir, true)[ CD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_11 $$ fs.mkdirs(inDir)[ CD ]
Line_3 $$ Job job = Job.getInstance(conf)-->Line_17 $$ FileInputFormat.setInputPaths(job, inDir)[ FD ]
Line_3 $$ Job job = Job.getInstance(conf)-->Line_18 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_3 $$ Job job = Job.getInstance(conf)[ CD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_17 $$ FileInputFormat.setInputPaths(job, inDir)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_19 $$ job.setNumReduceTasks(numReds)[ FD ]
Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_5 $$ if (fs.exists(outDir)) [ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_11 $$ fs.mkdirs(inDir)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_3 $$ Job job = Job.getInstance(conf)[ FD ]
Line_13 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + i))-->Line_14 $$ file.writeBytes(input)[ FD ]
Line_12 $$ for (int i = 0; i < numInputFiles; ++i) -->Line_14 $$ file.writeBytes(input)[ CD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_4 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_12 $$ for (int i = 0; i < numInputFiles; ++i) [ CD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_20 $$ return job[ CD ]
Line_12 $$ for (int i = 0; i < numInputFiles; ++i) -->Line_13 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + i))[ CD ]
Line_5 $$ if (fs.exists(outDir)) -->Line_6 $$ fs.delete(outDir, true)[ CD ]
Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_6 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_5 $$ if (fs.exists(outDir)) [ CD ]
Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_9 $$ fs.delete(inDir, true)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_17 $$ FileInputFormat.setInputPaths(job, inDir)[ CD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_14 $$ file.writeBytes(input)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_12 $$ for (int i = 0; i < numInputFiles; ++i) [ FD ]
Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_8 $$ if (fs.exists(inDir)) [ FD ]
Line_12 $$ for (int i = 0; i < numInputFiles; ++i) -->Line_15 $$ file.close()[ CD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_9 $$ fs.delete(inDir, true)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_5 $$ if (fs.exists(outDir)) [ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_8 $$ if (fs.exists(inDir)) [ FD ]
Line_13 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + i))-->Line_15 $$ file.close()[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_4 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_18 $$ FileOutputFormat.setOutputPath(job, outDir)[ CD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_19 $$ job.setNumReduceTasks(numReds)[ CD ]
Line_3 $$ Job job = Job.getInstance(conf)-->Line_19 $$ job.setNumReduceTasks(numReds)[ FD ]
Line_2 $$ public static Job createJob(Configuration conf, Path inDir, Path outDir, int numInputFiles, int numReds, String input) throws IOException -->Line_6 $$ fs.delete(outDir, true)[ FD ]
