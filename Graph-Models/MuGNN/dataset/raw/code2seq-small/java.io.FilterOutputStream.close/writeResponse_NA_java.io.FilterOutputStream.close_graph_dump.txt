Line_2 $$ private void writeResponse(final Xid[] xids) throws IOException -->Line_10 $$ dataOutputStream = new DataOutputStream(messageOutputStream)[ CD ]
Line_16 $$ final Marshaller marshaller = TransactionRecoverMessageHandler.this.prepareForMarshalling(marshallerFactory, dataOutputStream)-->Line_20 $$ marshaller.finish()[ FD ]
Line_3 $$ final DataOutputStream dataOutputStream-->Line_13 $$ dataOutputStream.writeShort(invocationId)[ FD ]
Line_15 $$ if (xids.length > 0) -->Line_17 $$ for (int i = 0; i < xids.length; i++) [ CD ]
Line_4 $$ final MessageOutputStream messageOutputStream-->Line_23 $$ channelAssociation.releaseChannelMessageOutputStream(messageOutputStream)[ FD ]
Line_3 $$ final DataOutputStream dataOutputStream-->Line_10 $$ dataOutputStream = new DataOutputStream(messageOutputStream)[ FD ]
Line_15 $$ if (xids.length > 0) -->Line_20 $$ marshaller.finish()[ CD ]
Line_15 $$ if (xids.length > 0) -->Line_16 $$ final Marshaller marshaller = TransactionRecoverMessageHandler.this.prepareForMarshalling(marshallerFactory, dataOutputStream)[ CD ]
Line_3 $$ final DataOutputStream dataOutputStream-->Line_12 $$ dataOutputStream.writeByte(HEADER_TX_RECOVER_RESPONSE)[ FD ]
Line_16 $$ final Marshaller marshaller = TransactionRecoverMessageHandler.this.prepareForMarshalling(marshallerFactory, dataOutputStream)-->Line_18 $$ marshaller.writeObject(new XidTransactionID(xids[i]))[ FD ]
Line_6 $$ messageOutputStream = channelAssociation.acquireChannelMessageOutputStream()-->Line_23 $$ channelAssociation.releaseChannelMessageOutputStream(messageOutputStream)[ FD ]
Line_3 $$ final DataOutputStream dataOutputStream-->Line_14 $$ PackedInteger.writePackedInteger(dataOutputStream, xids.length)[ FD ]
Line_4 $$ final MessageOutputStream messageOutputStream-->Line_6 $$ messageOutputStream = channelAssociation.acquireChannelMessageOutputStream()[ FD ]
Line_10 $$ dataOutputStream = new DataOutputStream(messageOutputStream)-->Line_13 $$ dataOutputStream.writeShort(invocationId)[ FD ]
Line_10 $$ dataOutputStream = new DataOutputStream(messageOutputStream)-->Line_24 $$ dataOutputStream.close()[ FD ]
Line_17 $$ for (int i = 0; i < xids.length; i++) -->Line_18 $$ marshaller.writeObject(new XidTransactionID(xids[i]))[ CD ]
Line_2 $$ private void writeResponse(final Xid[] xids) throws IOException -->Line_3 $$ final DataOutputStream dataOutputStream[ CD ]
Line_10 $$ dataOutputStream = new DataOutputStream(messageOutputStream)-->Line_16 $$ final Marshaller marshaller = TransactionRecoverMessageHandler.this.prepareForMarshalling(marshallerFactory, dataOutputStream)[ FD ]
Line_2 $$ private void writeResponse(final Xid[] xids) throws IOException -->Line_4 $$ final MessageOutputStream messageOutputStream[ CD ]
Line_10 $$ dataOutputStream = new DataOutputStream(messageOutputStream)-->Line_12 $$ dataOutputStream.writeByte(HEADER_TX_RECOVER_RESPONSE)[ FD ]
Line_3 $$ final DataOutputStream dataOutputStream-->Line_16 $$ final Marshaller marshaller = TransactionRecoverMessageHandler.this.prepareForMarshalling(marshallerFactory, dataOutputStream)[ FD ]
Line_3 $$ final DataOutputStream dataOutputStream-->Line_24 $$ dataOutputStream.close()[ FD ]
Line_10 $$ dataOutputStream = new DataOutputStream(messageOutputStream)-->Line_14 $$ PackedInteger.writePackedInteger(dataOutputStream, xids.length)[ FD ]
