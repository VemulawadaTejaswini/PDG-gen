Line_7 $$ for (Token<? extends TokenIdentifier> t : cred1.getAllTokens()) -->Line_8 $$ cred2.addToken(new Text(DELEGATION_TOKEN_KEY), t)[ FD ]
Line_2 $$ private void setupBinaryTokenFile(Job job) -->Line_16 $$ job.getConfiguration().set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY, binaryTokenFileName.toString())[ FD ]
Line_2 $$ private void setupBinaryTokenFile(Job job) -->Line_6 $$ TokenCache.obtainTokensForNamenodesInternal(cred1, new Path[] [ FD ]
Line_2 $$ private void setupBinaryTokenFile(Job job) -->Line_17 $$ job.getConfiguration().set(KEY_SECURITY_TOKEN_FILE_NAME, binaryTokenFileName.toString())[ FD ]
Line_5 $$ Credentials cred2 = new Credentials()-->Line_8 $$ cred2.addToken(new Text(DELEGATION_TOKEN_KEY), t)[ FD ]
Line_5 $$ Credentials cred2 = new Credentials()-->Line_12 $$ cred2.writeTokenStorageToStream(os)[ FD ]
Line_4 $$ Credentials cred1 = new Credentials()-->Line_6 $$ TokenCache.obtainTokensForNamenodesInternal(cred1, new Path[] [ FD ]
Line_10 $$ DataOutputStream os = new DataOutputStream(new FileOutputStream(binaryTokenFileName.toString()))-->Line_12 $$ cred2.writeTokenStorageToStream(os)[ FD ]
Line_4 $$ Credentials cred1 = new Credentials()-->Line_7 $$ for (Token<? extends TokenIdentifier> t : cred1.getAllTokens()) [ FD ]
Line_10 $$ DataOutputStream os = new DataOutputStream(new FileOutputStream(binaryTokenFileName.toString()))-->Line_14 $$ os.close()[ FD ]
