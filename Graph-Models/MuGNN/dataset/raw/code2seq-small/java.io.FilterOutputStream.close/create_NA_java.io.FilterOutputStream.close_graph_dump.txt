Line_118 $$ if (isAlphaAtlas) -->Line_121 $$ int w = levelPixmap.getWidth(), h = levelPixmap.getHeight()[ CD ]
Line_152 $$ facePixmap = null-->Line_156 $$ facePixmap.dispose()[ FD ]
Line_72 $$ texHeight = ktx.getHeight()-->Line_85 $$ if (!MathUtils.isPowerOfTwo(texWidth) || !MathUtils.isPowerOfTwo(texHeight))[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_204 $$ out.writeInt(glTypeSize)[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_131 $$ levelPixmap = pm[ FD ]
Line_150 $$ if (levelPixmap != null) -->Line_151 $$ levelPixmap.dispose()[ CD ]
Line_145 $$ levelPixmap = null-->Line_130 $$ levelPixmap.dispose()[ FD ]
Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_187 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_55 $$ ETC1Data etc1 = null-->Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_144 $$ levelPixmap.dispose()[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_65 $$ if (ktx == null || ktx.getNumberOfFaces() != 6) [ FD ]
Line_174 $$ glType = glFormat = 0-->Line_181 $$ glFormat = images[0][0].pixmap.getGLFormat()[ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_215 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_174 $$ glType = glFormat = 0-->Line_183 $$ glBaseInternalFormat = glFormat[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_137 $$ System.out.println("Converting from " + levelPixmap.getFormat() + " to RGB888 for ETC1 compression")[ FD ]
Line_159 $$ if (etc1 != null) -->Line_161 $$ etc1 = null[ CD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_201 $$ out.write(HEADER_MAGIC)[ FD ]
Line_64 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) -->Line_72 $$ texHeight = ktx.getHeight()[ CD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_57 $$ int ktxFace = 0[ CD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_170 $$ ktx = null[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_96 $$ if (ktx != null) [ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_12 $$ System.out.println("  options:")[ CD ]
Line_41 $$ KTXTextureData ktx = null-->Line_65 $$ if (ktx == null || ktx.getNumberOfFaces() != 6) [ FD ]
Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)-->Line_148 $$ images[face][level].etcData = levelETCData[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_213 $$ out.writeInt(nLevels)[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) [ FD ]
Line_145 $$ levelPixmap = null-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_43 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) -->Line_45 $$ if (ktx.getNumberOfFaces() == 6)[ CD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_155 $$ if (facePixmap != null) [ FD ]
Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) -->Line_140 $$ levelPixmap.dispose()[ CD ]
Line_173 $$ if (isPackETC1) -->Line_174 $$ glType = glFormat = 0[ CD ]
Line_178 $$ if (images[0][0].pixmap != null) -->Line_179 $$ glType = images[0][0].pixmap.getGLType()[ CD ]
Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())-->Line_127 $$ pm.drawPixel(x, y + h, (alpha << 24) | (alpha << 16) | (alpha << 8) | 0x0FF)[ FD ]
Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_91 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_2 $$ public void create() -->Line_49 $$ int nFaces = isCubemap ? 6 : 1[ CD ]
Line_56 $$ Pixmap facePixmap = null-->Line_79 $$ facePixmap = new Pixmap(file)[ FD ]
Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) -->Line_80 $$ nLevels = 1[ CD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_202 $$ out.writeInt(0x04030201)[ FD ]
Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_91 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_145 $$ levelPixmap = null-->Line_144 $$ levelPixmap.dispose()[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_19 $$ System.out.println("    KTXProcessor in.png out.zktx                                       Create a Zipped KTX file with the provided 2D texture")[ CD ]
Line_101 $$ if (ktx != null && levelETCData == null && facePixmap == null) -->Line_102 $$ ByteBuffer ktxData = ktx.getData(0, ktxFace)[ CD ]
Line_36 $$ if ("-mipmaps".equals(args[i]))-->Line_37 $$ isGenMipMaps = true[ CD ]
Line_132 $$ levelETCData = null-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_213 $$ out.writeInt(nLevels)[ FD ]
Line_76 $$ texWidth = etc1.width-->Line_208 $$ out.writeInt(texWidth)[ FD ]
Line_215 $$ for (int level = 0; level < nLevels; level++) -->Line_216 $$ int faceLodSize = images[0][level].getSize()[ CD ]
Line_187 $$ for (int level = 0; level < nLevels; level++) -->Line_190 $$ int faceLodSizeRounded = (faceLodSize + 3) & ~3[ CD ]
Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) -->Line_82 $$ texHeight = facePixmap.getHeight()[ CD ]
Line_35 $$ isAlphaAtlas = isPackETC1 = true-->Line_134 $$ if (levelETCData == null && isPackETC1) [ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())[ FD ]
Line_2 $$ public void create() -->Line_187 $$ for (int level = 0; level < nLevels; level++) [ CD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_215 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_56 $$ Pixmap facePixmap = null-->Line_152 $$ facePixmap = null[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_130 $$ levelPixmap.dispose()[ FD ]
Line_121 $$ int w = levelPixmap.getWidth(), h = levelPixmap.getHeight()-->Line_125 $$ for (int x = 0; x < w; x++) [ FD ]
Line_2 $$ public void create() -->Line_43 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) [ CD ]
Line_75 $$ nLevels = 1-->Line_213 $$ out.writeInt(nLevels)[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_95 $$ ETC1Data levelETCData = null[ CD ]
Line_81 $$ texWidth = facePixmap.getWidth()-->Line_208 $$ out.writeInt(texWidth)[ FD ]
Line_42 $$ FileHandle file = new FileHandle(args[0])-->Line_62 $$ file = new FileHandle(args[face])[ FD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_43 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) -->Line_47 $$ ktxDispose = DISPOSE_PACK[ CD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_68 $$ ktx.prepare()[ FD ]
Line_26 $$ for (int i = 0; i < args.length; i++) -->Line_36 $$ if ("-mipmaps".equals(args[i]))[ CD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_11 $$ System.out.println()[ CD ]
Line_182 $$ glInternalFormat = images[0][0].pixmap.getGLInternalFormat()-->Line_206 $$ out.writeInt(glInternalFormat)[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_207 $$ out.writeInt(glBaseInternalFormat)[ FD ]
Line_107 $$ levelETCData = etc1-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_43 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) -->Line_44 $$ ktx = new KTXTextureData(file, false)[ CD ]
Line_95 $$ ETC1Data levelETCData = null-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_203 $$ out.writeInt(glType)[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_141 $$ levelPixmap = tmp[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_72 $$ texHeight = ktx.getHeight()[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_68 $$ ktx.prepare()[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_137 $$ System.out.println("Converting from " + levelPixmap.getFormat() + " to RGB888 for ETC1 compression")[ FD ]
Line_155 $$ if (facePixmap != null) -->Line_157 $$ facePixmap = null[ CD ]
Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) -->Line_79 $$ facePixmap = new Pixmap(file)[ CD ]
Line_141 $$ levelPixmap = tmp-->Line_119 $$ if (levelPixmap == null)[ FD ]
Line_163 $$ if (ktx != null && ktxDispose == DISPOSE_FACE) -->Line_164 $$ ktx.disposePreparedData()[ CD ]
Line_131 $$ levelPixmap = pm-->Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) [ FD ]
Line_49 $$ int nFaces = isCubemap ? 6 : 1-->Line_212 $$ out.writeInt(nFaces)[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_170 $$ ktx = null[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_71 $$ texWidth = ktx.getWidth()[ FD ]
Line_131 $$ levelPixmap = pm-->Line_130 $$ levelPixmap.dispose()[ FD ]
Line_72 $$ texHeight = ktx.getHeight()-->Line_77 $$ texHeight = etc1.height[ FD ]
Line_163 $$ if (ktx != null && ktxDispose == DISPOSE_FACE) -->Line_165 $$ ktx = null[ CD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_214 $$ out.writeInt(0)[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_126 $$ int alpha = (levelPixmap.getPixel(x, y)) & 0x0FF[ FD ]
Line_132 $$ levelETCData = null-->Line_112 $$ if (levelETCData == null) [ FD ]
Line_165 $$ ktx = null-->Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)-->Line_157 $$ facePixmap = null[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_148 $$ images[face][level].etcData = levelETCData[ CD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_182 $$ glInternalFormat = images[0][0].pixmap.getGLInternalFormat()[ FD ]
Line_131 $$ levelPixmap = pm-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_121 $$ int w = levelPixmap.getWidth(), h = levelPixmap.getHeight()[ FD ]
Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_187 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_141 $$ levelPixmap = tmp-->Line_150 $$ if (levelPixmap != null) [ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_225 $$ out.close()[ FD ]
Line_134 $$ if (levelETCData == null && isPackETC1) -->Line_145 $$ levelPixmap = null[ CD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_96 $$ if (ktx != null) [ CD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_82 $$ texHeight = facePixmap.getHeight()[ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_163 $$ if (ktx != null && ktxDispose == DISPOSE_FACE) [ CD ]
Line_65 $$ if (ktx == null || ktx.getNumberOfFaces() != 6) -->Line_66 $$ ktxDispose = DISPOSE_FACE[ CD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_156 $$ facePixmap.dispose()[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)[ FD ]
Line_95 $$ ETC1Data levelETCData = null-->Line_112 $$ if (levelETCData == null) [ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_168 $$ if (ktx != null) [ FD ]
Line_109 $$ if (levelETCData == null && etc1 != null && facePixmap == null) -->Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)[ CD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_23 $$ System.exit(-1)[ CD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_220 $$ byte[] bytes = images[face][level].getBytes()-->Line_221 $$ out.write(bytes)[ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_71 $$ texWidth = ktx.getWidth()[ FD ]
Line_64 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) -->Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) [ CD ]
Line_2 $$ public void create() -->Line_5 $$ boolean isPackETC1 = false, isAlphaAtlas = false, isGenMipMaps = false[ CD ]
Line_195 $$ DataOutputStream out-->Line_211 $$ out.writeInt(0)[ FD ]
Line_118 $$ if (isAlphaAtlas) -->Line_130 $$ levelPixmap.dispose()[ CD ]
Line_195 $$ DataOutputStream out-->Line_212 $$ out.writeInt(nFaces)[ FD ]
Line_4 $$ boolean isTexture = args.length == 2 || args.length == 3 || args.length == 4-->Line_28 $$ if (isTexture && i < 2)[ FD ]
Line_55 $$ ETC1Data etc1 = null-->Line_74 $$ etc1 = new ETC1Data(file)[ FD ]
Line_177 $$ glBaseInternalFormat = GL20.GL_RGB-->Line_183 $$ glBaseInternalFormat = glFormat[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_106 $$ if (level == 0 && etc1 != null) [ CD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_169 $$ ktx.disposePreparedData()[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_72 $$ texHeight = ktx.getHeight()[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_205 $$ out.writeInt(glFormat)[ FD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())[ FD ]
Line_56 $$ Pixmap facePixmap = null-->Line_157 $$ facePixmap = null[ FD ]
Line_42 $$ FileHandle file = new FileHandle(args[0])-->Line_64 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) [ FD ]
Line_76 $$ texWidth = etc1.width-->Line_85 $$ if (!MathUtils.isPowerOfTwo(texWidth) || !MathUtils.isPowerOfTwo(texHeight))[ FD ]
Line_55 $$ ETC1Data etc1 = null-->Line_159 $$ if (etc1 != null) [ FD ]
Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)-->Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)[ FD ]
Line_132 $$ levelETCData = null-->Line_148 $$ images[face][level].etcData = levelETCData[ FD ]
Line_82 $$ texHeight = facePixmap.getHeight()-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())[ FD ]
Line_165 $$ ktx = null-->Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_2 $$ public void create() -->Line_51 $$ Pixmap.setBlending(Blending.None)[ CD ]
Line_131 $$ levelPixmap = pm-->Line_144 $$ levelPixmap.dispose()[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_213 $$ out.writeInt(nLevels)[ FD ]
Line_152 $$ facePixmap = null-->Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_9 $$ System.out.println("              for cube map, just provide 6 input files corresponding to the faces in the following order : X+, X-, Y+, Y-, Z+, Z-")[ CD ]
Line_81 $$ texWidth = facePixmap.getWidth()-->Line_85 $$ if (!MathUtils.isPowerOfTwo(texWidth) || !MathUtils.isPowerOfTwo(texHeight))[ FD ]
Line_150 $$ if (levelPixmap != null) -->Line_152 $$ facePixmap = null[ CD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_169 $$ ktx.disposePreparedData()[ FD ]
Line_56 $$ Pixmap facePixmap = null-->Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())[ FD ]
Line_195 $$ DataOutputStream out-->Line_204 $$ out.writeInt(glTypeSize)[ FD ]
Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) -->Line_64 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) [ CD ]
Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) -->Line_60 $$ ktxFace = face[ CD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_144 $$ levelPixmap.dispose()[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_139 $$ tmp.drawPixmap(levelPixmap, 0, 0, 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_195 $$ DataOutputStream out-->Line_201 $$ out.write(HEADER_MAGIC)[ FD ]
Line_195 $$ DataOutputStream out-->Line_209 $$ out.writeInt(isAlphaAtlas ? (2 * texHeight) : texHeight)[ FD ]
Line_195 $$ DataOutputStream out-->Line_222 $$ out.write((byte) 0x00)[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_13 $$ System.out.println("    -etc1    input file will be packed using ETC1 compression, dropping the alpha channel")[ CD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_21 $$ System.out.println("    KTXProcessor px.ktx nx.ktx py.ktx ny.ktx pz.ktx nz.ktx out.zktx    Create a Zipped KTX file with the provided cubemap textures")[ CD ]
Line_174 $$ glType = glFormat = 0-->Line_205 $$ out.writeInt(glFormat)[ FD ]
Line_215 $$ for (int level = 0; level < nLevels; level++) -->Line_217 $$ int faceLodSizeRounded = (faceLodSize + 3) & ~3[ CD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_183 $$ glBaseInternalFormat = glFormat[ FD ]
Line_2 $$ public void create() -->Line_54 $$ for (int face = 0; face < nFaces; face++) [ CD ]
Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) -->Line_74 $$ etc1 = new ETC1Data(file)[ CD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_67 $$ ktx = new KTXTextureData(file, false)[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_14 $$ System.out.println("    -etc1a   input file will be packed using ETC1 compression, doubling the height and placing the alpha channel in the bottom half")[ CD ]
Line_71 $$ texWidth = ktx.getWidth()-->Line_76 $$ texWidth = etc1.width[ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_60 $$ ktxFace = face[ FD ]
Line_2 $$ public void create() -->Line_41 $$ KTXTextureData ktx = null[ CD ]
Line_168 $$ if (ktx != null) -->Line_170 $$ ktx = null[ CD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_72 $$ texHeight = ktx.getHeight()[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_214 $$ out.writeInt(0)[ FD ]
Line_131 $$ levelPixmap = pm-->Line_123 $$ pm.drawPixmap(levelPixmap, 0, 0)[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_170 $$ ktx = null[ FD ]
Line_98 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)-->Line_99 $$ levelETCData = new ETC1Data(levelWidth, levelHeight, ktxData, 0)[ CD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_177 $$ glBaseInternalFormat = GL20.GL_RGB[ FD ]
Line_56 $$ Pixmap facePixmap = null-->Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_210 $$ out.writeInt(0)[ FD ]
Line_26 $$ for (int i = 0; i < args.length; i++) -->Line_27 $$ System.out.println(i + " = " + args[i])[ CD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_204 $$ out.writeInt(glTypeSize)[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_145 $$ levelPixmap = null[ FD ]
Line_161 $$ etc1 = null-->Line_160 $$ etc1.dispose()[ FD ]
Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_80 $$ nLevels = 1[ FD ]
Line_145 $$ levelPixmap = null-->Line_123 $$ pm.drawPixmap(levelPixmap, 0, 0)[ FD ]
Line_99 $$ levelETCData = new ETC1Data(levelWidth, levelHeight, ktxData, 0)-->Line_112 $$ if (levelETCData == null) [ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_225 $$ out.close()[ FD ]
Line_62 $$ file = new FileHandle(args[face])-->Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) [ FD ]
Line_40 $$ int ktxDispose = DISPOSE_DONT-->Line_66 $$ ktxDispose = DISPOSE_FACE[ FD ]
Line_95 $$ ETC1Data levelETCData = null-->Line_148 $$ images[face][level].etcData = levelETCData[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)[ FD ]
Line_2 $$ public void create() -->Line_50 $$ Image[][] images = new Image[nFaces][][ CD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_121 $$ int w = levelPixmap.getWidth(), h = levelPixmap.getHeight()[ FD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_206 $$ out.writeInt(glInternalFormat)[ FD ]
Line_107 $$ levelETCData = etc1-->Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)[ FD ]
Line_131 $$ levelPixmap = pm-->Line_119 $$ if (levelPixmap == null)[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_123 $$ pm.drawPixmap(levelPixmap, 0, 0)[ FD ]
Line_26 $$ for (int i = 0; i < args.length; i++) -->Line_32 $$ if ("-etc1".equals(args[i]))[ CD ]
Line_168 $$ if (ktx != null) -->Line_169 $$ ktx.disposePreparedData()[ CD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_140 $$ levelPixmap.dispose()[ FD ]
Line_5 $$ boolean isPackETC1 = false, isAlphaAtlas = false, isGenMipMaps = false-->Line_134 $$ if (levelETCData == null && isPackETC1) [ FD ]
Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)-->Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())[ FD ]
Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)-->Line_156 $$ facePixmap.dispose()[ FD ]
Line_118 $$ if (isAlphaAtlas) -->Line_119 $$ if (levelPixmap == null)[ CD ]
Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)-->Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())[ FD ]
Line_95 $$ ETC1Data levelETCData = null-->Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)[ FD ]
Line_195 $$ DataOutputStream out-->Line_225 $$ out.close()[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_151 $$ levelPixmap.dispose()[ FD ]
Line_187 $$ for (int level = 0; level < nLevels; level++) -->Line_192 $$ totalSize += nFaces * faceLodSizeRounded[ CD ]
Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_75 $$ nLevels = 1[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_164 $$ ktx.disposePreparedData()[ FD ]
Line_107 $$ levelETCData = etc1-->Line_132 $$ levelETCData = null[ FD ]
Line_131 $$ levelPixmap = pm-->Line_137 $$ System.out.println("Converting from " + levelPixmap.getFormat() + " to RGB888 for ETC1 compression")[ FD ]
Line_191 $$ totalSize += 4-->Line_192 $$ totalSize += nFaces * faceLodSizeRounded[ FD ]
Line_165 $$ ktx = null-->Line_71 $$ texWidth = ktx.getWidth()[ FD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_175 $$ glTypeSize = 1[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_112 $$ if (levelETCData == null) [ CD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_209 $$ out.writeInt(isAlphaAtlas ? (2 * texHeight) : texHeight)[ FD ]
Line_34 $$ if ("-etc1a".equals(args[i]))-->Line_35 $$ isAlphaAtlas = isPackETC1 = true[ CD ]
Line_145 $$ levelPixmap = null-->Line_138 $$ Pixmap tmp = new Pixmap(levelPixmap.getWidth(), levelPixmap.getHeight(), Format.RGB888)[ FD ]
Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())-->Line_123 $$ pm.drawPixmap(levelPixmap, 0, 0)[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)-->Line_152 $$ facePixmap = null[ FD ]
Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) -->Line_139 $$ tmp.drawPixmap(levelPixmap, 0, 0, 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ CD ]
Line_107 $$ levelETCData = etc1-->Line_148 $$ images[face][level].etcData = levelETCData[ FD ]
Line_187 $$ for (int level = 0; level < nLevels; level++) -->Line_188 $$ System.out.println("Level: " + level)[ CD ]
Line_80 $$ nLevels = 1-->Line_213 $$ out.writeInt(nLevels)[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_102 $$ ByteBuffer ktxData = ktx.getData(0, ktxFace)[ FD ]
Line_80 $$ nLevels = 1-->Line_187 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)-->Line_155 $$ if (facePixmap != null) [ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_119 $$ if (levelPixmap == null)[ FD ]
Line_4 $$ boolean isTexture = args.length == 2 || args.length == 3 || args.length == 4-->Line_6 $$ if (!isCubemap && !isTexture) [ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_159 $$ if (etc1 != null) [ CD ]
Line_41 $$ KTXTextureData ktx = null-->Line_168 $$ if (ktx != null) [ FD ]
Line_75 $$ nLevels = 1-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)-->Line_157 $$ facePixmap = null[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_201 $$ out.write(HEADER_MAGIC)[ FD ]
Line_195 $$ DataOutputStream out-->Line_198 $$ out.writeInt(totalSize)[ FD ]
Line_216 $$ int faceLodSize = images[0][level].getSize()-->Line_218 $$ out.writeInt(faceLodSize)[ FD ]
Line_190 $$ int faceLodSizeRounded = (faceLodSize + 3) & ~3-->Line_192 $$ totalSize += nFaces * faceLodSizeRounded[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_212 $$ out.writeInt(nFaces)[ FD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_205 $$ out.writeInt(glFormat)[ FD ]
Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) -->Line_62 $$ file = new FileHandle(args[face])[ CD ]
Line_77 $$ texHeight = etc1.height-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) -->Line_76 $$ texWidth = etc1.width[ CD ]
Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))-->Line_91 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_126 $$ int alpha = (levelPixmap.getPixel(x, y)) & 0x0FF[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_102 $$ ByteBuffer ktxData = ktx.getData(0, ktxFace)[ FD ]
Line_95 $$ ETC1Data levelETCData = null-->Line_99 $$ levelETCData = new ETC1Data(levelWidth, levelHeight, ktxData, 0)[ FD ]
Line_125 $$ for (int x = 0; x < w; x++) -->Line_126 $$ int alpha = (levelPixmap.getPixel(x, y)) & 0x0FF[ CD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_152 $$ facePixmap = null-->Line_157 $$ facePixmap = null[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_47 $$ ktxDispose = DISPOSE_PACK-->Line_66 $$ ktxDispose = DISPOSE_FACE[ FD ]
Line_64 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) -->Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()[ CD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_198 $$ out.writeInt(totalSize)[ FD ]
Line_60 $$ ktxFace = face-->Line_97 $$ ByteBuffer ktxData = ktx.getData(level, ktxFace)[ FD ]
Line_124 $$ for (int y = 0; y < h; y++) -->Line_126 $$ int alpha = (levelPixmap.getPixel(x, y)) & 0x0FF[ FD ]
Line_2 $$ public void create() -->Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0[ CD ]
Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_80 $$ nLevels = 1[ FD ]
Line_75 $$ nLevels = 1-->Line_80 $$ nLevels = 1[ FD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_157 $$ facePixmap = null[ FD ]
Line_165 $$ ktx = null-->Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) [ FD ]
Line_99 $$ levelETCData = new ETC1Data(levelWidth, levelHeight, ktxData, 0)-->Line_148 $$ images[face][level].etcData = levelETCData[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_97 $$ ByteBuffer ktxData = ktx.getData(level, ktxFace)[ FD ]
Line_181 $$ glFormat = images[0][0].pixmap.getGLFormat()-->Line_205 $$ out.writeInt(glFormat)[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_208 $$ out.writeInt(texWidth)[ FD ]
Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))-->Line_187 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_44 $$ ktx = new KTXTextureData(file, false)[ FD ]
Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) -->Line_81 $$ texWidth = facePixmap.getWidth()[ CD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_82 $$ texHeight = facePixmap.getHeight()[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_203 $$ out.writeInt(glType)[ FD ]
Line_195 $$ DataOutputStream out-->Line_218 $$ out.writeInt(faceLodSize)[ FD ]
Line_107 $$ levelETCData = etc1-->Line_112 $$ if (levelETCData == null) [ FD ]
Line_190 $$ int faceLodSizeRounded = (faceLodSize + 3) & ~3-->Line_222 $$ for (int j = bytes.length; j < faceLodSizeRounded; j++) out.write((byte) 0x00)[ FD ]
Line_196 $$ if (output.getName().toLowerCase().endsWith(".zktx")) -->Line_198 $$ out.writeInt(totalSize)[ CD ]
Line_41 $$ KTXTextureData ktx = null-->Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) [ FD ]
Line_5 $$ boolean isPackETC1 = false, isAlphaAtlas = false, isGenMipMaps = false-->Line_37 $$ isGenMipMaps = true[ FD ]
Line_118 $$ if (isAlphaAtlas) -->Line_124 $$ for (int y = 0; y < h; y++) [ CD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_75 $$ nLevels = 1[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_140 $$ levelPixmap.dispose()[ FD ]
Line_178 $$ if (images[0][0].pixmap != null) -->Line_182 $$ glInternalFormat = images[0][0].pixmap.getGLInternalFormat()[ CD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_164 $$ ktx.disposePreparedData()[ FD ]
Line_134 $$ if (levelETCData == null && isPackETC1) -->Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) [ CD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_16 $$ System.out.println()[ CD ]
Line_141 $$ levelPixmap = tmp-->Line_140 $$ levelPixmap.dispose()[ FD ]
Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)-->Line_152 $$ facePixmap = null[ FD ]
Line_45 $$ if (ktx.getNumberOfFaces() == 6)-->Line_46 $$ isCubemap = true[ CD ]
Line_186 $$ int totalSize = 12 + 13 * 4-->Line_198 $$ out.writeInt(totalSize)[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_150 $$ if (levelPixmap != null) [ CD ]
Line_178 $$ if (images[0][0].pixmap != null) -->Line_180 $$ glTypeSize = 1[ CD ]
Line_56 $$ Pixmap facePixmap = null-->Line_81 $$ texWidth = facePixmap.getWidth()[ FD ]
Line_57 $$ int ktxFace = 0-->Line_97 $$ ByteBuffer ktxData = ktx.getData(level, ktxFace)[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_126 $$ int alpha = (levelPixmap.getPixel(x, y)) & 0x0FF[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_20 $$ System.out.println("    KTXProcessor in.png out.zktx -mipmaps                              Create a Zipped KTX file with the provided 2D texture, generating all mipmap levels")[ CD ]
Line_173 $$ if (isPackETC1) -->Line_176 $$ glInternalFormat = ETC1.ETC1_RGB8_OES[ CD ]
Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))-->Line_213 $$ out.writeInt(nLevels)[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_71 $$ texWidth = ktx.getWidth()[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_18 $$ System.out.println("    KTXProcessor in.png out.ktx                                        Create a KTX file with the provided 2D texture")[ CD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_174 $$ glType = glFormat = 0[ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_155 $$ if (facePixmap != null) [ CD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_145 $$ levelPixmap = null[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_138 $$ Pixmap tmp = new Pixmap(levelPixmap.getWidth(), levelPixmap.getHeight(), Format.RGB888)[ FD ]
Line_118 $$ if (isAlphaAtlas) -->Line_123 $$ pm.drawPixmap(levelPixmap, 0, 0)[ CD ]
Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_131 $$ levelPixmap = pm-->Line_149 $$ images[face][level].pixmap = levelPixmap[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_139 $$ tmp.drawPixmap(levelPixmap, 0, 0, 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_169 $$ ktx.disposePreparedData()[ FD ]
Line_176 $$ glInternalFormat = ETC1.ETC1_RGB8_OES-->Line_206 $$ out.writeInt(glInternalFormat)[ FD ]
Line_177 $$ glBaseInternalFormat = GL20.GL_RGB-->Line_207 $$ out.writeInt(glBaseInternalFormat)[ FD ]
Line_215 $$ for (int level = 0; level < nLevels; level++) -->Line_218 $$ out.writeInt(faceLodSize)[ CD ]
Line_32 $$ if ("-etc1".equals(args[i]))-->Line_33 $$ isPackETC1 = true[ CD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_96 $$ if (ktx != null) [ FD ]
Line_219 $$ for (int face = 0; face < nFaces; face++) -->Line_220 $$ byte[] bytes = images[face][level].getBytes()[ CD ]
Line_3 $$ boolean isCubemap = args.length == 7 || args.length == 8 || args.length == 9-->Line_46 $$ isCubemap = true[ FD ]
Line_49 $$ int nFaces = isCubemap ? 6 : 1-->Line_54 $$ for (int face = 0; face < nFaces; face++) [ FD ]
Line_131 $$ levelPixmap = pm-->Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())[ FD ]
Line_157 $$ facePixmap = null-->Line_81 $$ texWidth = facePixmap.getWidth()[ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) [ CD ]
Line_41 $$ KTXTextureData ktx = null-->Line_98 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)[ FD ]
Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_161 $$ etc1 = null-->Line_159 $$ if (etc1 != null) [ FD ]
Line_217 $$ int faceLodSizeRounded = (faceLodSize + 3) & ~3-->Line_222 $$ for (int j = bytes.length; j < faceLodSizeRounded; j++) out.write((byte) 0x00)[ FD ]
Line_112 $$ if (levelETCData == null) -->Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())[ CD ]
Line_180 $$ glTypeSize = 1-->Line_204 $$ out.writeInt(glTypeSize)[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_165 $$ ktx = null[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_149 $$ images[face][level].pixmap = levelPixmap[ FD ]
Line_5 $$ boolean isPackETC1 = false, isAlphaAtlas = false, isGenMipMaps = false-->Line_33 $$ isPackETC1 = true[ FD ]
Line_195 $$ DataOutputStream out-->Line_203 $$ out.writeInt(glType)[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_8 $$ System.out.println("  input_file  is the texture file to include in the output KTX or ZKTX file.")[ CD ]
Line_155 $$ if (facePixmap != null) -->Line_156 $$ facePixmap.dispose()[ CD ]
Line_121 $$ int w = levelPixmap.getWidth(), h = levelPixmap.getHeight()-->Line_124 $$ for (int y = 0; y < h; y++) [ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_72 $$ texHeight = ktx.getHeight()[ FD ]
Line_64 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) -->Line_71 $$ texWidth = ktx.getWidth()[ CD ]
Line_2 $$ public void create() -->Line_26 $$ for (int i = 0; i < args.length; i++) [ CD ]
Line_141 $$ levelPixmap = tmp-->Line_138 $$ Pixmap tmp = new Pixmap(levelPixmap.getWidth(), levelPixmap.getHeight(), Format.RGB888)[ FD ]
Line_173 $$ if (isPackETC1) -->Line_177 $$ glBaseInternalFormat = GL20.GL_RGB[ CD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_209 $$ out.writeInt(isAlphaAtlas ? (2 * texHeight) : texHeight)[ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_80 $$ nLevels = 1[ FD ]
Line_187 $$ for (int level = 0; level < nLevels; level++) -->Line_215 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_152 $$ facePixmap = null[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_165 $$ ktx = null[ FD ]
Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_215 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_219 $$ for (int face = 0; face < nFaces; face++) -->Line_222 $$ for (int j = bytes.length; j < faceLodSizeRounded; j++) out.write((byte) 0x00)[ CD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_130 $$ levelPixmap.dispose()[ FD ]
Line_178 $$ if (images[0][0].pixmap != null) -->Line_183 $$ glBaseInternalFormat = glFormat[ CD ]
Line_145 $$ levelPixmap = null-->Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) [ FD ]
Line_145 $$ levelPixmap = null-->Line_137 $$ System.out.println("Converting from " + levelPixmap.getFormat() + " to RGB888 for ETC1 compression")[ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_85 $$ if (!MathUtils.isPowerOfTwo(texWidth) || !MathUtils.isPowerOfTwo(texHeight))[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_45 $$ if (ktx.getNumberOfFaces() == 6)[ FD ]
Line_173 $$ if (isPackETC1) -->Line_178 $$ if (images[0][0].pixmap != null) [ CD ]
Line_195 $$ DataOutputStream out-->Line_208 $$ out.writeInt(texWidth)[ FD ]
Line_71 $$ texWidth = ktx.getWidth()-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_187 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_33 $$ isPackETC1 = true-->Line_35 $$ isAlphaAtlas = isPackETC1 = true[ FD ]
Line_77 $$ texHeight = etc1.height-->Line_82 $$ texHeight = facePixmap.getHeight()[ FD ]
Line_145 $$ levelPixmap = null-->Line_150 $$ if (levelPixmap != null) [ FD ]
Line_64 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) -->Line_65 $$ if (ktx == null || ktx.getNumberOfFaces() != 6) [ CD ]
Line_165 $$ ktx = null-->Line_65 $$ if (ktx == null || ktx.getNumberOfFaces() != 6) [ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_77 $$ texHeight = etc1.height[ FD ]
Line_187 $$ for (int level = 0; level < nLevels; level++) -->Line_189 $$ int faceLodSize = images[0][level].getSize()[ CD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_176 $$ glInternalFormat = ETC1.ETC1_RGB8_OES[ FD ]
Line_175 $$ glTypeSize = 1-->Line_204 $$ out.writeInt(glTypeSize)[ FD ]
Line_131 $$ levelPixmap = pm-->Line_140 $$ levelPixmap.dispose()[ FD ]
Line_157 $$ facePixmap = null-->Line_82 $$ texHeight = facePixmap.getHeight()[ FD ]
Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)-->Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_149 $$ images[face][level].pixmap = levelPixmap[ CD ]
Line_179 $$ glType = images[0][0].pixmap.getGLType()-->Line_203 $$ out.writeInt(glType)[ FD ]
Line_145 $$ levelPixmap = null-->Line_119 $$ if (levelPixmap == null)[ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_81 $$ texWidth = facePixmap.getWidth()[ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_208 $$ out.writeInt(texWidth)[ FD ]
Line_2 $$ public void create() -->Line_39 $$ File output = new File(args[isCubemap ? 6 : 1])[ CD ]
Line_174 $$ glType = glFormat = 0-->Line_179 $$ glType = images[0][0].pixmap.getGLType()[ FD ]
Line_165 $$ ktx = null-->Line_68 $$ ktx.prepare()[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) [ FD ]
Line_99 $$ levelETCData = new ETC1Data(levelWidth, levelHeight, ktxData, 0)-->Line_107 $$ levelETCData = etc1[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_144 $$ levelPixmap.dispose()[ FD ]
Line_125 $$ for (int x = 0; x < w; x++) -->Line_127 $$ pm.drawPixel(x, y + h, (alpha << 24) | (alpha << 16) | (alpha << 8) | 0x0FF)[ FD ]
Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) -->Line_84 $$ if (isGenMipMaps) [ CD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_134 $$ if (levelETCData == null && isPackETC1) [ CD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())[ FD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)[ FD ]
Line_84 $$ if (isGenMipMaps) -->Line_85 $$ if (!MathUtils.isPowerOfTwo(texWidth) || !MathUtils.isPowerOfTwo(texHeight))[ CD ]
Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())-->Line_131 $$ levelPixmap = pm[ FD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_181 $$ glFormat = images[0][0].pixmap.getGLFormat()[ FD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_180 $$ glTypeSize = 1[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_102 $$ ByteBuffer ktxData = ktx.getData(0, ktxFace)[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) [ FD ]
Line_75 $$ nLevels = 1-->Line_91 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_2 $$ public void create() -->Line_186 $$ int totalSize = 12 + 13 * 4[ CD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_130 $$ levelPixmap.dispose()[ FD ]
Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)-->Line_112 $$ if (levelETCData == null) [ FD ]
Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_215 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_221 $$ out.write(bytes)[ FD ]
Line_2 $$ public void create() -->Line_42 $$ FileHandle file = new FileHandle(args[0])[ CD ]
Line_26 $$ for (int i = 0; i < args.length; i++) -->Line_28 $$ if (isTexture && i < 2)[ CD ]
Line_42 $$ FileHandle file = new FileHandle(args[0])-->Line_43 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) [ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_71 $$ texWidth = ktx.getWidth()[ FD ]
Line_2 $$ public void create() -->Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat[ CD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))[ FD ]
Line_173 $$ if (isPackETC1) -->Line_175 $$ glTypeSize = 1[ CD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_206 $$ out.writeInt(glInternalFormat)[ FD ]
Line_132 $$ levelETCData = null-->Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_218 $$ out.writeInt(faceLodSize)[ FD ]
Line_77 $$ texHeight = etc1.height-->Line_85 $$ if (!MathUtils.isPowerOfTwo(texWidth) || !MathUtils.isPowerOfTwo(texHeight))[ FD ]
Line_195 $$ DataOutputStream out-->Line_206 $$ out.writeInt(glInternalFormat)[ FD ]
Line_42 $$ FileHandle file = new FileHandle(args[0])-->Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) [ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_91 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_56 $$ Pixmap facePixmap = null-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_206 $$ out.writeInt(glInternalFormat)[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_202 $$ out.writeInt(0x04030201)[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_151 $$ levelPixmap.dispose()[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_210 $$ out.writeInt(0)[ FD ]
Line_2 $$ public void create() -->Line_52 $$ Pixmap.setFilter(Filter.BiLinear)[ CD ]
Line_145 $$ levelPixmap = null-->Line_151 $$ levelPixmap.dispose()[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_119 $$ if (levelPixmap == null)[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_123 $$ pm.drawPixmap(levelPixmap, 0, 0)[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) [ FD ]
Line_124 $$ for (int y = 0; y < h; y++) -->Line_125 $$ for (int x = 0; x < w; x++) [ CD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_150 $$ if (levelPixmap != null) [ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_139 $$ tmp.drawPixmap(levelPixmap, 0, 0, 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_165 $$ ktx = null-->Line_170 $$ ktx = null[ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_219 $$ for (int face = 0; face < nFaces; face++) [ FD ]
Line_131 $$ levelPixmap = pm-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_2 $$ public void create() -->Line_3 $$ boolean isCubemap = args.length == 7 || args.length == 8 || args.length == 9[ CD ]
Line_96 $$ if (ktx != null) -->Line_98 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)[ CD ]
Line_95 $$ ETC1Data levelETCData = null-->Line_132 $$ levelETCData = null[ FD ]
Line_74 $$ etc1 = new ETC1Data(file)-->Line_161 $$ etc1 = null[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_98 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)[ FD ]
Line_65 $$ if (ktx == null || ktx.getNumberOfFaces() != 6) -->Line_67 $$ ktx = new KTXTextureData(file, false)[ CD ]
Line_141 $$ levelPixmap = tmp-->Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) [ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_7 $$ System.out.println("usage : KTXProcessor input_file output_file [-etc1|-etc1a] [-mipmaps]")[ CD ]
Line_195 $$ DataOutputStream out-->Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_131 $$ levelPixmap = pm[ FD ]
Line_145 $$ levelPixmap = null-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_179 $$ glType = images[0][0].pixmap.getGLType()[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_149 $$ images[face][level].pixmap = levelPixmap[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())[ FD ]
Line_118 $$ if (isAlphaAtlas) -->Line_131 $$ levelPixmap = pm[ CD ]
Line_5 $$ boolean isPackETC1 = false, isAlphaAtlas = false, isGenMipMaps = false-->Line_35 $$ isAlphaAtlas = isPackETC1 = true[ FD ]
Line_183 $$ glBaseInternalFormat = glFormat-->Line_207 $$ out.writeInt(glBaseInternalFormat)[ FD ]
Line_134 $$ if (levelETCData == null && isPackETC1) -->Line_144 $$ levelPixmap.dispose()[ CD ]
Line_118 $$ if (isAlphaAtlas) -->Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())[ CD ]
Line_187 $$ for (int level = 0; level < nLevels; level++) -->Line_191 $$ totalSize += 4[ CD ]
Line_49 $$ int nFaces = isCubemap ? 6 : 1-->Line_192 $$ totalSize += nFaces * faceLodSizeRounded[ FD ]
Line_96 $$ if (ktx != null) -->Line_97 $$ ByteBuffer ktxData = ktx.getData(level, ktxFace)[ CD ]
Line_131 $$ levelPixmap = pm-->Line_145 $$ levelPixmap = null[ FD ]
Line_181 $$ glFormat = images[0][0].pixmap.getGLFormat()-->Line_183 $$ glBaseInternalFormat = glFormat[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_103 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)[ FD ]
Line_2 $$ public void create() -->Line_4 $$ boolean isTexture = args.length == 2 || args.length == 3 || args.length == 4[ CD ]
Line_76 $$ texWidth = etc1.width-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_131 $$ levelPixmap = pm[ FD ]
Line_80 $$ nLevels = 1-->Line_215 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_186 $$ int totalSize = 12 + 13 * 4-->Line_191 $$ totalSize += 4[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_222 $$ out.write((byte) 0x00)[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_208 $$ out.writeInt(texWidth)[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_96 $$ if (ktx != null) [ FD ]
Line_72 $$ texHeight = ktx.getHeight()-->Line_82 $$ texHeight = facePixmap.getHeight()[ FD ]
Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) -->Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()[ CD ]
Line_49 $$ int nFaces = isCubemap ? 6 : 1-->Line_219 $$ for (int face = 0; face < nFaces; face++) [ FD ]
Line_195 $$ DataOutputStream out-->Line_210 $$ out.writeInt(0)[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_97 $$ ByteBuffer ktxData = ktx.getData(level, ktxFace)[ FD ]
Line_131 $$ levelPixmap = pm-->Line_138 $$ Pixmap tmp = new Pixmap(levelPixmap.getWidth(), levelPixmap.getHeight(), Format.RGB888)[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_130 $$ levelPixmap.dispose()[ FD ]
Line_55 $$ ETC1Data etc1 = null-->Line_107 $$ levelETCData = etc1[ FD ]
Line_103 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)-->Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)[ CD ]
Line_195 $$ DataOutputStream out-->Line_205 $$ out.writeInt(glFormat)[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_67 $$ ktx = new KTXTextureData(file, false)[ FD ]
Line_118 $$ if (isAlphaAtlas) -->Line_132 $$ levelETCData = null[ CD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_212 $$ out.writeInt(nFaces)[ FD ]
Line_195 $$ DataOutputStream out-->Line_213 $$ out.writeInt(nLevels)[ FD ]
Line_74 $$ etc1 = new ETC1Data(file)-->Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)[ FD ]
Line_95 $$ ETC1Data levelETCData = null-->Line_107 $$ levelETCData = etc1[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_141 $$ levelPixmap = tmp[ FD ]
Line_56 $$ Pixmap facePixmap = null-->Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_140 $$ levelPixmap.dispose()[ FD ]
Line_71 $$ texWidth = ktx.getWidth()-->Line_208 $$ out.writeInt(texWidth)[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_92 $$ int levelWidth = Math.max(1, texWidth >> level)[ CD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_141 $$ levelPixmap = tmp[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_150 $$ if (levelPixmap != null) [ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_137 $$ System.out.println("Converting from " + levelPixmap.getFormat() + " to RGB888 for ETC1 compression")[ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_213 $$ out.writeInt(nLevels)[ FD ]
Line_76 $$ texWidth = etc1.width-->Line_81 $$ texWidth = facePixmap.getWidth()[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_138 $$ Pixmap tmp = new Pixmap(levelPixmap.getWidth(), levelPixmap.getHeight(), Format.RGB888)[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_123 $$ pm.drawPixmap(levelPixmap, 0, 0)[ FD ]
Line_26 $$ for (int i = 0; i < args.length; i++) -->Line_30 $$ if (isCubemap && i < 7)[ CD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_121 $$ int w = levelPixmap.getWidth(), h = levelPixmap.getHeight()[ FD ]
Line_165 $$ ktx = null-->Line_168 $$ if (ktx != null) [ FD ]
Line_165 $$ ktx = null-->Line_164 $$ ktx.disposePreparedData()[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_118 $$ if (isAlphaAtlas) [ CD ]
Line_192 $$ totalSize += nFaces * faceLodSizeRounded-->Line_198 $$ out.writeInt(totalSize)[ FD ]
Line_165 $$ ktx = null-->Line_169 $$ ktx.disposePreparedData()[ FD ]
Line_145 $$ levelPixmap = null-->Line_122 $$ Pixmap pm = new Pixmap(w, h * 2, levelPixmap.getFormat())[ FD ]
Line_99 $$ levelETCData = new ETC1Data(levelWidth, levelHeight, ktxData, 0)-->Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)[ FD ]
Line_2 $$ public void create() -->Line_40 $$ int ktxDispose = DISPOSE_DONT[ CD ]
Line_62 $$ file = new FileHandle(args[face])-->Line_64 $$ if (file.name().toLowerCase().endsWith(".ktx") || file.name().toLowerCase().endsWith(".zktx")) [ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_98 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)[ FD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_15 $$ System.out.println("    -mipmaps input file will be processed to generate mipmaps")[ CD ]
Line_186 $$ int totalSize = 12 + 13 * 4-->Line_192 $$ totalSize += nFaces * faceLodSizeRounded[ FD ]
Line_106 $$ if (level == 0 && etc1 != null) -->Line_107 $$ levelETCData = etc1[ CD ]
Line_152 $$ facePixmap = null-->Line_155 $$ if (facePixmap != null) [ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) [ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_17 $$ System.out.println("  examples:")[ CD ]
Line_80 $$ nLevels = 1-->Line_91 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_196 $$ if (output.getName().toLowerCase().endsWith(".zktx")) -->Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))[ CD ]
Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)-->Line_156 $$ facePixmap.dispose()[ FD ]
Line_219 $$ for (int face = 0; face < nFaces; face++) -->Line_221 $$ out.write(bytes)[ CD ]
Line_141 $$ levelPixmap = tmp-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_205 $$ out.writeInt(glFormat)[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_22 $$ System.out.println("    KTXProcessor in.ktx out.zktx                                       Convert a KTX file to a Zipped KTX file")[ CD ]
Line_195 $$ DataOutputStream out-->Line_202 $$ out.writeInt(0x04030201)[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_165 $$ ktx = null[ FD ]
Line_75 $$ nLevels = 1-->Line_215 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_109 $$ if (levelETCData == null && etc1 != null && facePixmap == null) [ CD ]
Line_80 $$ nLevels = 1-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_119 $$ if (levelPixmap == null)[ FD ]
Line_195 $$ DataOutputStream out-->Line_221 $$ out.write(bytes)[ FD ]
Line_110 $$ facePixmap = ETC1.decodeImage(etc1, Format.RGB888)-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_90 $$ images[face] = new Image[nLevels][ CD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_57 $$ int ktxFace = 0-->Line_60 $$ ktxFace = face[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_139 $$ tmp.drawPixmap(levelPixmap, 0, 0, 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_97 $$ ByteBuffer ktxData = ktx.getData(level, ktxFace)[ FD ]
Line_152 $$ facePixmap = null-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_99 $$ levelETCData = new ETC1Data(levelWidth, levelHeight, ktxData, 0)-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_75 $$ nLevels = 1[ FD ]
Line_136 $$ if (!isAlphaAtlas)-->Line_137 $$ System.out.println("Converting from " + levelPixmap.getFormat() + " to RGB888 for ETC1 compression")[ CD ]
Line_99 $$ levelETCData = new ETC1Data(levelWidth, levelHeight, ktxData, 0)-->Line_132 $$ levelETCData = null[ FD ]
Line_125 $$ for (int x = 0; x < w; x++) -->Line_127 $$ pm.drawPixel(x, y + h, (alpha << 24) | (alpha << 16) | (alpha << 8) | 0x0FF)[ CD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_211 $$ out.writeInt(0)[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_218 $$ out.writeInt(faceLodSize)[ FD ]
Line_165 $$ ktx = null-->Line_72 $$ texHeight = ktx.getHeight()[ FD ]
Line_72 $$ texHeight = ktx.getHeight()-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_55 $$ ETC1Data etc1 = null-->Line_161 $$ etc1 = null[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_65 $$ if (ktx == null || ktx.getNumberOfFaces() != 6) [ FD ]
Line_159 $$ if (etc1 != null) -->Line_160 $$ etc1.dispose()[ CD ]
Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)-->Line_155 $$ if (facePixmap != null) [ FD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_207 $$ out.writeInt(glBaseInternalFormat)[ FD ]
Line_57 $$ int ktxFace = 0-->Line_102 $$ ByteBuffer ktxData = ktx.getData(0, ktxFace)[ FD ]
Line_39 $$ File output = new File(args[isCubemap ? 6 : 1])-->Line_196 $$ if (output.getName().toLowerCase().endsWith(".zktx")) [ FD ]
Line_59 $$ nLevels = ktx.getNumberOfMipMapLevels()-->Line_213 $$ out.writeInt(nLevels)[ FD ]
Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) -->Line_75 $$ nLevels = 1[ CD ]
Line_2 $$ public void create() -->Line_173 $$ if (isPackETC1) [ CD ]
Line_131 $$ levelPixmap = pm-->Line_151 $$ levelPixmap.dispose()[ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_56 $$ Pixmap facePixmap = null[ CD ]
Line_41 $$ KTXTextureData ktx = null-->Line_68 $$ ktx.prepare()[ FD ]
Line_71 $$ texWidth = ktx.getWidth()-->Line_81 $$ texWidth = facePixmap.getWidth()[ FD ]
Line_55 $$ ETC1Data etc1 = null-->Line_160 $$ etc1.dispose()[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_121 $$ int w = levelPixmap.getWidth(), h = levelPixmap.getHeight()[ FD ]
Line_75 $$ nLevels = 1-->Line_187 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_3 $$ boolean isCubemap = args.length == 7 || args.length == 8 || args.length == 9-->Line_6 $$ if (!isCubemap && !isTexture) [ FD ]
Line_82 $$ texHeight = facePixmap.getHeight()-->Line_85 $$ if (!MathUtils.isPowerOfTwo(texWidth) || !MathUtils.isPowerOfTwo(texHeight))[ FD ]
Line_84 $$ if (isGenMipMaps) -->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ CD ]
Line_33 $$ isPackETC1 = true-->Line_134 $$ if (levelETCData == null && isPackETC1) [ FD ]
Line_112 $$ if (levelETCData == null) -->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ CD ]
Line_39 $$ File output = new File(args[isCubemap ? 6 : 1])-->Line_227 $$ Gdx.app.error("KTXProcessor", "Error writing to file: " + output.getName(), e)[ FD ]
Line_73 $$ if (file.name().toLowerCase().endsWith(".etc1")) -->Line_77 $$ texHeight = etc1.height[ CD ]
Line_141 $$ levelPixmap = tmp-->Line_123 $$ pm.drawPixmap(levelPixmap, 0, 0)[ FD ]
Line_56 $$ Pixmap facePixmap = null-->Line_155 $$ if (facePixmap != null) [ FD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_76 $$ texWidth = etc1.width[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_187 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) -->Line_136 $$ if (!isAlphaAtlas)[ CD ]
Line_41 $$ KTXTextureData ktx = null-->Line_164 $$ ktx.disposePreparedData()[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_116 $$ if (levelETCData == null && levelPixmap == null)[ CD ]
Line_94 $$ Pixmap levelPixmap = null-->Line_145 $$ levelPixmap = null[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_97 $$ ByteBuffer ktxData = ktx.getData(level, ktxFace)[ FD ]
Line_56 $$ Pixmap facePixmap = null-->Line_82 $$ texHeight = facePixmap.getHeight()[ FD ]
Line_178 $$ if (images[0][0].pixmap != null) -->Line_181 $$ glFormat = images[0][0].pixmap.getGLFormat()[ CD ]
Line_131 $$ levelPixmap = pm-->Line_141 $$ levelPixmap = tmp[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ FD ]
Line_145 $$ levelPixmap = null-->Line_149 $$ images[face][level].pixmap = levelPixmap[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_144 $$ levelPixmap.dispose()[ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_168 $$ if (ktx != null) [ FD ]
Line_44 $$ ktx = new KTXTextureData(file, false)-->Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_149 $$ images[face][level].pixmap = levelPixmap[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_45 $$ if (ktx.getNumberOfFaces() == 6)[ FD ]
Line_176 $$ glInternalFormat = ETC1.ETC1_RGB8_OES-->Line_182 $$ glInternalFormat = images[0][0].pixmap.getGLInternalFormat()[ FD ]
Line_56 $$ Pixmap facePixmap = null-->Line_156 $$ facePixmap.dispose()[ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_137 $$ System.out.println("Converting from " + levelPixmap.getFormat() + " to RGB888 for ETC1 compression")[ FD ]
Line_6 $$ if (!isCubemap && !isTexture) -->Line_10 $$ System.out.println("  output_file is the path to the output file, its type is based on the extension which must be either KTX or ZKTX")[ CD ]
Line_2 $$ public void create() -->Line_25 $$ LwjglNativesLoader.load()[ CD ]
Line_35 $$ isAlphaAtlas = isPackETC1 = true-->Line_136 $$ if (!isAlphaAtlas)[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_222 $$ out.write((byte) 0x00)[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_221 $$ out.write(bytes)[ FD ]
Line_119 $$ if (levelPixmap == null)-->Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)[ CD ]
Line_196 $$ if (output.getName().toLowerCase().endsWith(".zktx")) -->Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))[ CD ]
Line_175 $$ glTypeSize = 1-->Line_180 $$ glTypeSize = 1[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_203 $$ out.writeInt(glType)[ FD ]
Line_5 $$ boolean isPackETC1 = false, isAlphaAtlas = false, isGenMipMaps = false-->Line_136 $$ if (!isAlphaAtlas)[ FD ]
Line_145 $$ levelPixmap = null-->Line_139 $$ tmp.drawPixmap(levelPixmap, 0, 0, 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_81 $$ texWidth = facePixmap.getWidth()[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_151 $$ levelPixmap.dispose()[ FD ]
Line_40 $$ int ktxDispose = DISPOSE_DONT-->Line_47 $$ ktxDispose = DISPOSE_PACK[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_101 $$ if (ktx != null && levelETCData == null && facePixmap == null) [ CD ]
Line_2 $$ public void create() -->Line_168 $$ if (ktx != null) [ CD ]
Line_145 $$ levelPixmap = null-->Line_140 $$ levelPixmap.dispose()[ FD ]
Line_134 $$ if (levelETCData == null && isPackETC1) -->Line_143 $$ levelETCData = ETC1.encodeImagePKM(levelPixmap)[ CD ]
Line_53 $$ int texWidth = -1, texHeight = -1, texFormat = -1, nLevels = 0-->Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_94 $$ Pixmap levelPixmap = null[ CD ]
Line_195 $$ DataOutputStream out-->Line_207 $$ out.writeInt(glBaseInternalFormat)[ FD ]
Line_131 $$ levelPixmap = pm-->Line_150 $$ if (levelPixmap != null) [ FD ]
Line_120 $$ levelPixmap = ETC1.decodeImage(levelETCData, Format.RGB888)-->Line_151 $$ levelPixmap.dispose()[ FD ]
Line_79 $$ facePixmap = new Pixmap(file)-->Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)[ FD ]
Line_131 $$ levelPixmap = pm-->Line_121 $$ int w = levelPixmap.getWidth(), h = levelPixmap.getHeight()[ FD ]
Line_74 $$ etc1 = new ETC1Data(file)-->Line_160 $$ etc1.dispose()[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_138 $$ Pixmap tmp = new Pixmap(levelPixmap.getWidth(), levelPixmap.getHeight(), Format.RGB888)[ FD ]
Line_74 $$ etc1 = new ETC1Data(file)-->Line_159 $$ if (etc1 != null) [ FD ]
Line_174 $$ glType = glFormat = 0-->Line_203 $$ out.writeInt(glType)[ FD ]
Line_74 $$ etc1 = new ETC1Data(file)-->Line_107 $$ levelETCData = etc1[ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_55 $$ ETC1Data etc1 = null[ CD ]
Line_195 $$ DataOutputStream out-->Line_214 $$ out.writeInt(0)[ FD ]
Line_58 $$ if (ktx != null && ktx.getNumberOfFaces() == 6) -->Line_63 $$ System.out.println("Processing : " + file + " for face #" + face)[ CD ]
Line_3 $$ boolean isCubemap = args.length == 7 || args.length == 8 || args.length == 9-->Line_30 $$ if (isCubemap && i < 7)[ FD ]
Line_131 $$ levelPixmap = pm-->Line_139 $$ tmp.drawPixmap(levelPixmap, 0, 0, 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_26 $$ for (int i = 0; i < args.length; i++) -->Line_34 $$ if ("-etc1a".equals(args[i]))[ CD ]
Line_189 $$ int faceLodSize = images[0][level].getSize()-->Line_218 $$ out.writeInt(faceLodSize)[ FD ]
Line_157 $$ facePixmap = null-->Line_155 $$ if (facePixmap != null) [ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_149 $$ images[face][level].pixmap = levelPixmap[ FD ]
Line_54 $$ for (int face = 0; face < nFaces; face++) -->Line_91 $$ for (int level = 0; level < nLevels; level++) [ CD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_147 $$ images[face][level] = new Image()[ CD ]
Line_195 $$ DataOutputStream out-->Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))[ FD ]
Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))-->Line_215 $$ for (int level = 0; level < nLevels; level++) [ FD ]
Line_71 $$ texWidth = ktx.getWidth()-->Line_85 $$ if (!MathUtils.isPowerOfTwo(texWidth) || !MathUtils.isPowerOfTwo(texHeight))[ FD ]
Line_104 $$ facePixmap = ETC1.decodeImage(new ETC1Data(levelWidth, levelHeight, ktxData, 0), Format.RGB888)-->Line_114 $$ levelPixmap.drawPixmap(facePixmap, 0, 0, facePixmap.getWidth(), facePixmap.getHeight(), 0, 0, levelPixmap.getWidth(), levelPixmap.getHeight())[ FD ]
Line_125 $$ for (int x = 0; x < w; x++) -->Line_126 $$ int alpha = (levelPixmap.getPixel(x, y)) & 0x0FF[ FD ]
Line_65 $$ if (ktx == null || ktx.getNumberOfFaces() != 6) -->Line_68 $$ ktx.prepare()[ CD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_70 $$ nLevels = ktx.getNumberOfMipMapLevels()[ FD ]
Line_215 $$ for (int level = 0; level < nLevels; level++) -->Line_219 $$ for (int face = 0; face < nFaces; face++) [ CD ]
Line_67 $$ ktx = new KTXTextureData(file, false)-->Line_103 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)[ FD ]
Line_41 $$ KTXTextureData ktx = null-->Line_103 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)[ FD ]
Line_141 $$ levelPixmap = tmp-->Line_145 $$ levelPixmap = null[ FD ]
Line_172 $$ int glType, glTypeSize, glFormat, glInternalFormat, glBaseInternalFormat-->Line_204 $$ out.writeInt(glTypeSize)[ FD ]
Line_113 $$ levelPixmap = new Pixmap(levelWidth, levelHeight, facePixmap.getFormat())-->Line_150 $$ if (levelPixmap != null) [ FD ]
Line_135 $$ if (levelPixmap.getFormat() != Format.RGB888 && levelPixmap.getFormat() != Format.RGB565) -->Line_141 $$ levelPixmap = tmp[ CD ]
Line_91 $$ for (int level = 0; level < nLevels; level++) -->Line_93 $$ int levelHeight = Math.max(1, texHeight >> level)[ CD ]
Line_191 $$ totalSize += 4-->Line_198 $$ out.writeInt(totalSize)[ FD ]
Line_2 $$ public void create() -->Line_6 $$ if (!isCubemap && !isTexture) [ CD ]
Line_60 $$ ktxFace = face-->Line_102 $$ ByteBuffer ktxData = ktx.getData(0, ktxFace)[ FD ]
Line_200 $$ out = new DataOutputStream(new FileOutputStream(output))-->Line_211 $$ out.writeInt(0)[ FD ]
Line_101 $$ if (ktx != null && levelETCData == null && facePixmap == null) -->Line_103 $$ if (ktxData != null && ktx.getGlInternalFormat() == ETC1.ETC1_RGB8_OES)[ CD ]
Line_81 $$ texWidth = facePixmap.getWidth()-->Line_87 $$ nLevels = Math.max(Integer.SIZE - Integer.numberOfLeadingZeros(texWidth), Integer.SIZE - Integer.numberOfLeadingZeros(texHeight))[ FD ]
Line_145 $$ levelPixmap = null-->Line_121 $$ int w = levelPixmap.getWidth(), h = levelPixmap.getHeight()[ FD ]
Line_157 $$ facePixmap = null-->Line_156 $$ facePixmap.dispose()[ FD ]
Line_197 $$ out = new DataOutputStream(new GZIPOutputStream(new FileOutputStream(output)))-->Line_207 $$ out.writeInt(glBaseInternalFormat)[ FD ]
