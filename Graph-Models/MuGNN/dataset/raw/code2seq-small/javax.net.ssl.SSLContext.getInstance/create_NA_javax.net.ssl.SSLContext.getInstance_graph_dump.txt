Line_59 $$ if (keyAlgorithm == null) -->Line_60 $$ keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm()[ CD ]
Line_57 $$ KeyManagerFactory kmFactory = null-->Line_75 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_58 $$ String keyAlgorithm = System.getProperty("ssl.KeyManagerFactory.algorithm")-->Line_60 $$ keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm()[ FD ]
Line_29 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_88 $$ instream.close()[ FD ]
Line_28 $$ String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword")-->Line_50 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_75 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_94 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_18 $$ if (s != null) -->Line_39 $$ if (!file.exists()) [ CD ]
Line_79 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)-->Line_86 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_40 $$ file = new File(javaHome, "lib/security/cacerts")-->Line_41 $$ trustStoreFile = file[ FD ]
Line_28 $$ String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword")-->Line_31 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_13 $$ if ("none".equalsIgnoreCase(trustStoreType)) -->Line_17 $$ String s = System.getProperty("javax.net.ssl.trustStore")[ CD ]
Line_19 $$ trustStoreFile = new File(s)-->Line_41 $$ trustStoreFile = file[ FD ]
Line_76 $$ String keyStoreProvider = System.getProperty("javax.net.ssl.keyStoreProvider")-->Line_79 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ FD ]
Line_5 $$ String trustAlgorithm = System.getProperty("ssl.TrustManagerFactory.algorithm")-->Line_20 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_72 $$ keyStoreFile = new File(s)-->Line_74 $$ if (keyStoreFile != null) [ FD ]
Line_67 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_90 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_81 $$ keyStore = KeyStore.getInstance(keyStoreType)-->Line_90 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_71 $$ if (s != null) -->Line_72 $$ keyStoreFile = new File(s)[ CD ]
Line_77 $$ KeyStore keyStore-->Line_86 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_60 $$ keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm()-->Line_75 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_22 $$ KeyStore trustStore-->Line_35 $$ tmFactory.init(trustStore)[ FD ]
Line_16 $$ File trustStoreFile-->Line_43 $$ trustStoreFile = file[ FD ]
Line_14 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_94 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_38 $$ File file = new File(javaHome, "lib/security/jssecacerts")-->Line_40 $$ file = new File(javaHome, "lib/security/cacerts")[ FD ]
Line_64 $$ keyStoreType = KeyStore.getDefaultType()-->Line_66 $$ if ("none".equalsIgnoreCase(keyStoreType)) [ FD ]
Line_76 $$ String keyStoreProvider = System.getProperty("javax.net.ssl.keyStoreProvider")-->Line_78 $$ if (keyStoreProvider != null) [ FD ]
Line_83 $$ String keyStorePassword = System.getProperty("javax.net.ssl.keyStorePassword")-->Line_90 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_69 $$ File keyStoreFile = null-->Line_72 $$ keyStoreFile = new File(s)[ FD ]
Line_11 $$ trustStoreType = KeyStore.getDefaultType()-->Line_13 $$ if ("none".equalsIgnoreCase(trustStoreType)) [ FD ]
Line_4 $$ TrustManagerFactory tmFactory-->Line_35 $$ tmFactory.init(trustStore)[ FD ]
Line_74 $$ if (keyStoreFile != null) -->Line_90 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ CD ]
Line_20 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_94 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_26 $$ trustStore = KeyStore.getInstance(trustStoreType)-->Line_54 $$ tmFactory.init(trustStore)[ FD ]
Line_18 $$ if (s != null) -->Line_28 $$ String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword")[ CD ]
Line_74 $$ if (keyStoreFile != null) -->Line_77 $$ KeyStore keyStore[ CD ]
Line_67 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_75 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_18 $$ if (s != null) -->Line_21 $$ String trustStoreProvider = System.getProperty("javax.net.ssl.trustStoreProvider")[ CD ]
Line_22 $$ KeyStore trustStore-->Line_31 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_39 $$ if (!file.exists()) -->Line_40 $$ file = new File(javaHome, "lib/security/cacerts")[ CD ]
Line_39 $$ if (!file.exists()) -->Line_41 $$ trustStoreFile = file[ CD ]
Line_93 $$ SSLContext sslcontext = SSLContext.getInstance("TLS")-->Line_94 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_18 $$ if (s != null) -->Line_35 $$ tmFactory.init(trustStore)[ CD ]
Line_62 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_79 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ FD ]
Line_64 $$ keyStoreType = KeyStore.getDefaultType()-->Line_79 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ FD ]
Line_64 $$ keyStoreType = KeyStore.getDefaultType()-->Line_81 $$ keyStore = KeyStore.getInstance(keyStoreType)[ FD ]
Line_41 $$ trustStoreFile = file-->Line_43 $$ trustStoreFile = file[ FD ]
Line_26 $$ trustStore = KeyStore.getInstance(trustStoreType)-->Line_35 $$ tmFactory.init(trustStore)[ FD ]
Line_66 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_74 $$ if (keyStoreFile != null) [ CD ]
Line_39 $$ if (!file.exists()) -->Line_43 $$ trustStoreFile = file[ CD ]
Line_4 $$ TrustManagerFactory tmFactory-->Line_14 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_38 $$ File file = new File(javaHome, "lib/security/jssecacerts")-->Line_39 $$ if (!file.exists()) [ FD ]
Line_62 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_64 $$ keyStoreType = KeyStore.getDefaultType()[ FD ]
Line_77 $$ KeyStore keyStore-->Line_90 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_18 $$ if (s != null) -->Line_45 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())[ CD ]
Line_62 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_66 $$ if ("none".equalsIgnoreCase(keyStoreType)) [ FD ]
Line_67 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_94 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_57 $$ KeyManagerFactory kmFactory = null-->Line_94 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_18 $$ if (s != null) -->Line_54 $$ tmFactory.init(trustStore)[ CD ]
Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_35 $$ tmFactory.init(trustStore)[ FD ]
Line_74 $$ if (keyStoreFile != null) -->Line_83 $$ String keyStorePassword = System.getProperty("javax.net.ssl.keyStorePassword")[ CD ]
Line_9 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_11 $$ trustStoreType = KeyStore.getDefaultType()[ FD ]
Line_18 $$ if (s != null) -->Line_38 $$ File file = new File(javaHome, "lib/security/jssecacerts")[ CD ]
Line_29 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_31 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_79 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)-->Line_90 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_77 $$ KeyStore keyStore-->Line_79 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ FD ]
Line_22 $$ KeyStore trustStore-->Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ FD ]
Line_18 $$ if (s != null) -->Line_19 $$ trustStoreFile = new File(s)[ CD ]
Line_18 $$ if (s != null) -->Line_22 $$ KeyStore trustStore[ CD ]
Line_14 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_35 $$ tmFactory.init(trustStore)[ FD ]
Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_54 $$ tmFactory.init(trustStore)[ FD ]
Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_50 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_74 $$ if (keyStoreFile != null) -->Line_75 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ CD ]
Line_11 $$ trustStoreType = KeyStore.getDefaultType()-->Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ FD ]
Line_4 $$ TrustManagerFactory tmFactory-->Line_45 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())[ FD ]
Line_38 $$ File file = new File(javaHome, "lib/security/jssecacerts")-->Line_41 $$ trustStoreFile = file[ FD ]
Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_31 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_38 $$ File file = new File(javaHome, "lib/security/jssecacerts")-->Line_43 $$ trustStoreFile = file[ FD ]
Line_23 $$ if (trustStoreProvider != null) -->Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ CD ]
Line_22 $$ KeyStore trustStore-->Line_54 $$ tmFactory.init(trustStore)[ FD ]
Line_17 $$ String s = System.getProperty("javax.net.ssl.trustStore")-->Line_18 $$ if (s != null) [ FD ]
Line_16 $$ File trustStoreFile-->Line_19 $$ trustStoreFile = new File(s)[ FD ]
Line_11 $$ trustStoreType = KeyStore.getDefaultType()-->Line_26 $$ trustStore = KeyStore.getInstance(trustStoreType)[ FD ]
Line_18 $$ if (s != null) -->Line_20 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ CD ]
Line_29 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_33 $$ instream.close()[ FD ]
Line_9 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_26 $$ trustStore = KeyStore.getInstance(trustStoreType)[ FD ]
Line_5 $$ String trustAlgorithm = System.getProperty("ssl.TrustManagerFactory.algorithm")-->Line_7 $$ trustAlgorithm = TrustManagerFactory.getDefaultAlgorithm()[ FD ]
Line_4 $$ TrustManagerFactory tmFactory-->Line_20 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_18 $$ if (s != null) -->Line_47 $$ String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword")[ CD ]
Line_14 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_54 $$ tmFactory.init(trustStore)[ FD ]
Line_4 $$ TrustManagerFactory tmFactory-->Line_94 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_62 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_63 $$ if (keyStoreType == null) [ FD ]
Line_66 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_67 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ CD ]
Line_45 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())-->Line_94 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_13 $$ if ("none".equalsIgnoreCase(trustStoreType)) -->Line_14 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ CD ]
Line_19 $$ trustStoreFile = new File(s)-->Line_43 $$ trustStoreFile = file[ FD ]
Line_9 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_10 $$ if (trustStoreType == null) [ FD ]
Line_18 $$ if (s != null) -->Line_46 $$ KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType())[ CD ]
Line_63 $$ if (keyStoreType == null) -->Line_64 $$ keyStoreType = KeyStore.getDefaultType()[ CD ]
Line_58 $$ String keyAlgorithm = System.getProperty("ssl.KeyManagerFactory.algorithm")-->Line_59 $$ if (keyAlgorithm == null) [ FD ]
Line_74 $$ if (keyStoreFile != null) -->Line_76 $$ String keyStoreProvider = System.getProperty("javax.net.ssl.keyStoreProvider")[ CD ]
Line_40 $$ file = new File(javaHome, "lib/security/cacerts")-->Line_43 $$ trustStoreFile = file[ FD ]
Line_66 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_71 $$ if (s != null) [ CD ]
Line_57 $$ KeyManagerFactory kmFactory = null-->Line_67 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_60 $$ keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm()-->Line_67 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_17 $$ String s = System.getProperty("javax.net.ssl.trustStore")-->Line_71 $$ if (s != null) [ FD ]
Line_78 $$ if (keyStoreProvider != null) -->Line_79 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ CD ]
Line_18 $$ if (s != null) -->Line_29 $$ FileInputStream instream = new FileInputStream(trustStoreFile)[ CD ]
Line_78 $$ if (keyStoreProvider != null) -->Line_81 $$ keyStore = KeyStore.getInstance(keyStoreType)[ CD ]
Line_16 $$ File trustStoreFile-->Line_41 $$ trustStoreFile = file[ FD ]
Line_79 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)-->Line_81 $$ keyStore = KeyStore.getInstance(keyStoreType)[ FD ]
Line_7 $$ trustAlgorithm = TrustManagerFactory.getDefaultAlgorithm()-->Line_14 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_74 $$ if (keyStoreFile != null) -->Line_78 $$ if (keyStoreProvider != null) [ CD ]
Line_13 $$ if ("none".equalsIgnoreCase(trustStoreType)) -->Line_18 $$ if (s != null) [ CD ]
Line_18 $$ if (s != null) -->Line_37 $$ File javaHome = SystemProperties.getInstance().getJavaHomeDir()[ CD ]
Line_13 $$ if ("none".equalsIgnoreCase(trustStoreType)) -->Line_16 $$ File trustStoreFile[ CD ]
Line_29 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_52 $$ instream.close()[ FD ]
Line_45 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())-->Line_54 $$ tmFactory.init(trustStore)[ FD ]
Line_23 $$ if (trustStoreProvider != null) -->Line_26 $$ trustStore = KeyStore.getInstance(trustStoreType)[ CD ]
Line_14 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_45 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())[ FD ]
Line_77 $$ KeyStore keyStore-->Line_81 $$ keyStore = KeyStore.getInstance(keyStoreType)[ FD ]
Line_6 $$ if (trustAlgorithm == null) -->Line_7 $$ trustAlgorithm = TrustManagerFactory.getDefaultAlgorithm()[ CD ]
Line_10 $$ if (trustStoreType == null) -->Line_11 $$ trustStoreType = KeyStore.getDefaultType()[ CD ]
Line_58 $$ String keyAlgorithm = System.getProperty("ssl.KeyManagerFactory.algorithm")-->Line_75 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_22 $$ KeyStore trustStore-->Line_50 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_66 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_69 $$ File keyStoreFile = null[ CD ]
Line_26 $$ trustStore = KeyStore.getInstance(trustStoreType)-->Line_50 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_83 $$ String keyStorePassword = System.getProperty("javax.net.ssl.keyStorePassword")-->Line_86 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_75 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_90 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_81 $$ keyStore = KeyStore.getInstance(keyStoreType)-->Line_86 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_66 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_70 $$ String s = System.getProperty("javax.net.ssl.keyStore")[ CD ]
Line_57 $$ KeyManagerFactory kmFactory = null-->Line_90 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_4 $$ TrustManagerFactory tmFactory-->Line_54 $$ tmFactory.init(trustStore)[ FD ]
Line_7 $$ trustAlgorithm = TrustManagerFactory.getDefaultAlgorithm()-->Line_20 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_5 $$ String trustAlgorithm = System.getProperty("ssl.TrustManagerFactory.algorithm")-->Line_14 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_26 $$ trustStore = KeyStore.getInstance(trustStoreType)[ FD ]
Line_21 $$ String trustStoreProvider = System.getProperty("javax.net.ssl.trustStoreProvider")-->Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ FD ]
Line_20 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_54 $$ tmFactory.init(trustStore)[ FD ]
Line_14 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_20 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_18 $$ if (s != null) -->Line_23 $$ if (trustStoreProvider != null) [ CD ]
Line_20 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_35 $$ tmFactory.init(trustStore)[ FD ]
Line_5 $$ String trustAlgorithm = System.getProperty("ssl.TrustManagerFactory.algorithm")-->Line_6 $$ if (trustAlgorithm == null) [ FD ]
Line_22 $$ KeyStore trustStore-->Line_26 $$ trustStore = KeyStore.getInstance(trustStoreType)[ FD ]
Line_9 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_24 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ FD ]
Line_62 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_81 $$ keyStore = KeyStore.getInstance(keyStoreType)[ FD ]
Line_29 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_50 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_20 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_45 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())[ FD ]
Line_58 $$ String keyAlgorithm = System.getProperty("ssl.KeyManagerFactory.algorithm")-->Line_67 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_29 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_86 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_69 $$ File keyStoreFile = null-->Line_74 $$ if (keyStoreFile != null) [ FD ]
Line_9 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_13 $$ if ("none".equalsIgnoreCase(trustStoreType)) [ FD ]
Line_21 $$ String trustStoreProvider = System.getProperty("javax.net.ssl.trustStoreProvider")-->Line_23 $$ if (trustStoreProvider != null) [ FD ]
Line_26 $$ trustStore = KeyStore.getInstance(trustStoreType)-->Line_31 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
