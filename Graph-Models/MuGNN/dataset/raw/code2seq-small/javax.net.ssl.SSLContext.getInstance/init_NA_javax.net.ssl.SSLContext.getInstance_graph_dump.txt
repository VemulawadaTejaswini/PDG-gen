Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_6 $$ sslCtx.init(server.getKeyManagerFactory().getKeyManagers(), new TrustManager[] [ FD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_25 $$ return chain[ CD ]
Line_17 $$ List<String> enabledProtocols = transport.getEnabledProtocols()-->Line_18 $$ if ((enabledProtocols != null) && !enabledProtocols.isEmpty()) [ FD ]
Line_11 $$ SslFilter sslFilter = new SslFilter(sslCtx)-->Line_21 $$ sslFilter.setEnabledProtocols(new String[] [ FD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_11 $$ SslFilter sslFilter = new SslFilter(sslCtx)[ CD ]
Line_11 $$ SslFilter sslFilter = new SslFilter(sslCtx)-->Line_19 $$ sslFilter.setEnabledProtocols(enabledProtocols.toArray(new String[enabledProtocols.size()]))[ FD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_17 $$ List<String> enabledProtocols = transport.getEnabledProtocols()[ FD ]
Line_11 $$ SslFilter sslFilter = new SslFilter(sslCtx)-->Line_24 $$ chain.addLast("sslFilter", sslFilter)[ FD ]
Line_12 $$ List<String> cipherSuites = transport.getCipherSuite()-->Line_13 $$ if ((cipherSuites != null) && !cipherSuites.isEmpty()) [ FD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_12 $$ List<String> cipherSuites = transport.getCipherSuite()[ CD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_13 $$ if ((cipherSuites != null) && !cipherSuites.isEmpty()) [ CD ]
Line_11 $$ SslFilter sslFilter = new SslFilter(sslCtx)-->Line_14 $$ sslFilter.setEnabledCipherSuites(cipherSuites.toArray(new String[cipherSuites.size()]))[ FD ]
Line_18 $$ if ((enabledProtocols != null) && !enabledProtocols.isEmpty()) -->Line_19 $$ sslFilter.setEnabledProtocols(enabledProtocols.toArray(new String[enabledProtocols.size()]))[ CD ]
Line_11 $$ SslFilter sslFilter = new SslFilter(sslCtx)-->Line_16 $$ sslFilter.setWantClientAuth(true)[ FD ]
Line_13 $$ if ((cipherSuites != null) && !cipherSuites.isEmpty()) -->Line_14 $$ sslFilter.setEnabledCipherSuites(cipherSuites.toArray(new String[cipherSuites.size()]))[ CD ]
Line_5 $$ sslCtx = SSLContext.getInstance("TLS")-->Line_6 $$ sslCtx.init(server.getKeyManagerFactory().getKeyManagers(), new TrustManager[] [ FD ]
Line_3 $$ SSLContext sslCtx-->Line_5 $$ sslCtx = SSLContext.getInstance("TLS")[ FD ]
Line_18 $$ if ((enabledProtocols != null) && !enabledProtocols.isEmpty()) -->Line_21 $$ sslFilter.setEnabledProtocols(new String[] [ CD ]
Line_10 $$ DefaultIoFilterChainBuilder chain = new DefaultIoFilterChainBuilder()-->Line_24 $$ chain.addLast("sslFilter", sslFilter)[ FD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_18 $$ if ((enabledProtocols != null) && !enabledProtocols.isEmpty()) [ CD ]
Line_11 $$ SslFilter sslFilter = new SslFilter(sslCtx)-->Line_23 $$ sslFilter.setNeedClientAuth(transport.isNeedClientAuth())[ FD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_10 $$ DefaultIoFilterChainBuilder chain = new DefaultIoFilterChainBuilder()[ CD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_16 $$ sslFilter.setWantClientAuth(true)[ CD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_17 $$ List<String> enabledProtocols = transport.getEnabledProtocols()[ CD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_12 $$ List<String> cipherSuites = transport.getCipherSuite()[ FD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_24 $$ chain.addLast("sslFilter", sslFilter)[ CD ]
Line_12 $$ List<String> cipherSuites = transport.getCipherSuite()-->Line_14 $$ sslFilter.setEnabledCipherSuites(cipherSuites.toArray(new String[cipherSuites.size()]))[ FD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_23 $$ sslFilter.setNeedClientAuth(transport.isNeedClientAuth())[ FD ]
Line_17 $$ List<String> enabledProtocols = transport.getEnabledProtocols()-->Line_19 $$ sslFilter.setEnabledProtocols(enabledProtocols.toArray(new String[enabledProtocols.size()]))[ FD ]
Line_3 $$ SSLContext sslCtx-->Line_6 $$ sslCtx.init(server.getKeyManagerFactory().getKeyManagers(), new TrustManager[] [ FD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_3 $$ SSLContext sslCtx[ CD ]
Line_2 $$ public static IoFilterChainBuilder init(LdapServer server, TcpTransport transport) throws LdapException -->Line_23 $$ sslFilter.setNeedClientAuth(transport.isNeedClientAuth())[ CD ]
