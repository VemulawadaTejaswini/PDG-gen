Line_3 $$ DataInputStream in = new DataInputStream(underlyingIn)-->Line_12 $$ byte[] remoteResponse = readSaslMessage(in)[ FD ]
Line_4 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_16 $$ return sasl.createStreamPair(out, in)[ FD ]
Line_5 $$ SaslParticipant sasl = SaslParticipant.createServerSaslParticipant(saslProps, callbackHandler)-->Line_16 $$ return sasl.createStreamPair(out, in)[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_4 $$ DataOutputStream out = new DataOutputStream(underlyingOut)[ CD ]
Line_18 $$ if (ioe instanceof SaslException && ioe.getCause() != null && ioe.getCause() instanceof InvalidEncryptionKeyException) -->Line_21 $$ sendGenericSaslErrorMessage(out, ioe.getMessage())[ CD ]
Line_5 $$ SaslParticipant sasl = SaslParticipant.createServerSaslParticipant(saslProps, callbackHandler)-->Line_15 $$ checkSaslComplete(sasl, saslProps)[ FD ]
Line_13 $$ byte[] localResponse = sasl.evaluateChallengeOrResponse(remoteResponse)-->Line_14 $$ sendSaslMessage(out, localResponse)[ FD ]
Line_3 $$ DataInputStream in = new DataInputStream(underlyingIn)-->Line_6 $$ int magicNumber = in.readInt()[ FD ]
Line_6 $$ int magicNumber = in.readInt()-->Line_7 $$ if (magicNumber != SASL_TRANSFER_MAGIC_NUMBER) [ FD ]
Line_3 $$ DataInputStream in = new DataInputStream(underlyingIn)-->Line_11 $$ performSaslStep1(out, in, sasl)[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_3 $$ DataInputStream in = new DataInputStream(underlyingIn)[ CD ]
Line_4 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_21 $$ sendGenericSaslErrorMessage(out, ioe.getMessage())[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_7 $$ if (magicNumber != SASL_TRANSFER_MAGIC_NUMBER) [ CD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_6 $$ int magicNumber = in.readInt()[ CD ]
Line_5 $$ SaslParticipant sasl = SaslParticipant.createServerSaslParticipant(saslProps, callbackHandler)-->Line_11 $$ performSaslStep1(out, in, sasl)[ FD ]
Line_4 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_11 $$ performSaslStep1(out, in, sasl)[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_15 $$ checkSaslComplete(sasl, saslProps)[ FD ]
Line_5 $$ SaslParticipant sasl = SaslParticipant.createServerSaslParticipant(saslProps, callbackHandler)-->Line_13 $$ byte[] localResponse = sasl.evaluateChallengeOrResponse(remoteResponse)[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_5 $$ SaslParticipant sasl = SaslParticipant.createServerSaslParticipant(saslProps, callbackHandler)[ FD ]
Line_4 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_14 $$ sendSaslMessage(out, localResponse)[ FD ]
Line_18 $$ if (ioe instanceof SaslException && ioe.getCause() != null && ioe.getCause() instanceof InvalidEncryptionKeyException) -->Line_19 $$ sendInvalidKeySaslErrorMessage(out, ioe.getCause().getMessage())[ CD ]
Line_3 $$ DataInputStream in = new DataInputStream(underlyingIn)-->Line_16 $$ return sasl.createStreamPair(out, in)[ FD ]
Line_12 $$ byte[] remoteResponse = readSaslMessage(in)-->Line_13 $$ byte[] localResponse = sasl.evaluateChallengeOrResponse(remoteResponse)[ FD ]
Line_2 $$ private IOStreamPair doSaslHandshake(OutputStream underlyingOut, InputStream underlyingIn, Map<String, String> saslProps, CallbackHandler callbackHandler) throws IOException -->Line_5 $$ SaslParticipant sasl = SaslParticipant.createServerSaslParticipant(saslProps, callbackHandler)[ CD ]
Line_4 $$ DataOutputStream out = new DataOutputStream(underlyingOut)-->Line_19 $$ sendInvalidKeySaslErrorMessage(out, ioe.getCause().getMessage())[ FD ]
