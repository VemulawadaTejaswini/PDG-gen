Line_9 $$ int totalLen = inStream.readInt()-->Line_20 $$ if (totalLen != responseWrapper.getLength()) [ FD ]
Line_4 $$ DataOutputStream outStream = new DataOutputStream(new BufferedOutputStream(outS))-->Line_78 $$ sendSaslMessage(outStream, response.build())[ FD ]
Line_40 $$ byte[] challengeToken = null-->Line_47 $$ responseToken = (challengeToken != null) ? saslClient.evaluateChallenge(challengeToken) : new byte[0][ FD ]
Line_64 $$ if (saslClient == null) -->Line_67 $$ saslEvaluateToken(saslMessage, true)[ CD ]
Line_37 $$ if (authMethod == AuthMethod.SIMPLE) -->Line_38 $$ done = true[ CD ]
Line_27 $$ if (LOG.isDebugEnabled()) -->Line_28 $$ LOG.debug("Received SASL message " + saslMessage)[ CD ]
Line_8 $$ do -->Line_30 $$ RpcSaslProto.Builder response = null[ CD ]
Line_36 $$ byte[] responseToken = null-->Line_47 $$ responseToken = (challengeToken != null) ? saslClient.evaluateChallenge(challengeToken) : new byte[0][ FD ]
Line_36 $$ byte[] responseToken = null-->Line_49 $$ response = createSaslReply(SaslState.INITIATE, responseToken)[ FD ]
Line_8 $$ do -->Line_11 $$ responseWrapper.readFields(inStream)[ CD ]
Line_8 $$ do -->Line_23 $$ if (header.getCallId() != AuthProtocol.SASL.callId) [ CD ]
Line_37 $$ if (authMethod == AuthMethod.SIMPLE) -->Line_40 $$ byte[] challengeToken = null[ CD ]
Line_59 $$ response = createSaslReply(SaslState.RESPONSE, responseToken)-->Line_78 $$ sendSaslMessage(outStream, response.build())[ FD ]
Line_8 $$ do -->Line_26 $$ RpcSaslProto saslMessage = RpcSaslProto.parseFrom(responseWrapper.getMessageBytes())[ CD ]
Line_7 $$ boolean done = false-->Line_38 $$ done = true[ FD ]
Line_69 $$ done = true-->Line_8 $$ do [ FD ]
Line_59 $$ response = createSaslReply(SaslState.RESPONSE, responseToken)-->Line_50 $$ response.addAuths(saslAuthType)[ FD ]
Line_47 $$ responseToken = (challengeToken != null) ? saslClient.evaluateChallenge(challengeToken) : new byte[0]-->Line_49 $$ response = createSaslReply(SaslState.INITIATE, responseToken)[ FD ]
Line_40 $$ byte[] challengeToken = null-->Line_42 $$ challengeToken = saslAuthType.getChallenge().toByteArray()[ FD ]
Line_38 $$ done = true-->Line_8 $$ do [ FD ]
Line_10 $$ RpcResponseMessageWrapper responseWrapper = new RpcResponseMessageWrapper()-->Line_11 $$ responseWrapper.readFields(inStream)[ FD ]
Line_2 $$ public AuthMethod saslConnect(InputStream inS, OutputStream outS) throws IOException -->Line_7 $$ boolean done = false[ CD ]
Line_3 $$ DataInputStream inStream = new DataInputStream(new BufferedInputStream(inS))-->Line_9 $$ int totalLen = inStream.readInt()[ FD ]
Line_4 $$ DataOutputStream outStream = new DataOutputStream(new BufferedOutputStream(outS))-->Line_6 $$ sendSaslMessage(outStream, negotiateRequest)[ FD ]
Line_43 $$ saslAuthType = SaslAuth.newBuilder(saslAuthType).clearChallenge().build()-->Line_42 $$ challengeToken = saslAuthType.getChallenge().toByteArray()[ FD ]
Line_8 $$ do -->Line_20 $$ if (totalLen != responseWrapper.getLength()) [ CD ]
Line_42 $$ challengeToken = saslAuthType.getChallenge().toByteArray()-->Line_45 $$ challengeToken = new byte[0][ FD ]
Line_49 $$ response = createSaslReply(SaslState.INITIATE, responseToken)-->Line_50 $$ response.addAuths(saslAuthType)[ FD ]
Line_47 $$ responseToken = (challengeToken != null) ? saslClient.evaluateChallenge(challengeToken) : new byte[0]-->Line_59 $$ response = createSaslReply(SaslState.RESPONSE, responseToken)[ FD ]
Line_8 $$ do -->Line_12 $$ RpcResponseHeaderProto header = responseWrapper.getMessageHeader()[ CD ]
Line_2 $$ public AuthMethod saslConnect(InputStream inS, OutputStream outS) throws IOException -->Line_6 $$ sendSaslMessage(outStream, negotiateRequest)[ CD ]
Line_30 $$ RpcSaslProto.Builder response = null-->Line_49 $$ response = createSaslReply(SaslState.INITIATE, responseToken)[ FD ]
Line_26 $$ RpcSaslProto saslMessage = RpcSaslProto.parseFrom(responseWrapper.getMessageBytes())-->Line_58 $$ byte[] responseToken = saslEvaluateToken(saslMessage, false)[ FD ]
Line_37 $$ if (authMethod == AuthMethod.SIMPLE) -->Line_41 $$ if (saslAuthType.hasChallenge()) [ CD ]
Line_34 $$ SaslAuth saslAuthType = selectSaslClient(saslMessage.getAuthsList())-->Line_42 $$ challengeToken = saslAuthType.getChallenge().toByteArray()[ FD ]
Line_42 $$ challengeToken = saslAuthType.getChallenge().toByteArray()-->Line_47 $$ responseToken = (challengeToken != null) ? saslClient.evaluateChallenge(challengeToken) : new byte[0][ FD ]
Line_43 $$ saslAuthType = SaslAuth.newBuilder(saslAuthType).clearChallenge().build()-->Line_50 $$ response.addAuths(saslAuthType)[ FD ]
Line_41 $$ if (saslAuthType.hasChallenge()) -->Line_44 $$ if (saslClient.hasInitialResponse()) [ CD ]
Line_2 $$ public AuthMethod saslConnect(InputStream inS, OutputStream outS) throws IOException -->Line_8 $$ do [ CD ]
Line_8 $$ do -->Line_77 $$ if (response != null) [ CD ]
Line_7 $$ boolean done = false-->Line_69 $$ done = true[ FD ]
Line_44 $$ if (saslClient.hasInitialResponse()) -->Line_45 $$ challengeToken = new byte[0][ CD ]
Line_8 $$ do -->Line_9 $$ int totalLen = inStream.readInt()[ CD ]
Line_2 $$ public AuthMethod saslConnect(InputStream inS, OutputStream outS) throws IOException -->Line_81 $$ return authMethod[ CD ]
Line_34 $$ SaslAuth saslAuthType = selectSaslClient(saslMessage.getAuthsList())-->Line_43 $$ saslAuthType = SaslAuth.newBuilder(saslAuthType).clearChallenge().build()[ FD ]
Line_41 $$ if (saslAuthType.hasChallenge()) -->Line_42 $$ challengeToken = saslAuthType.getChallenge().toByteArray()[ CD ]
Line_8 $$ do -->Line_27 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_59 $$ response = createSaslReply(SaslState.RESPONSE, responseToken)-->Line_77 $$ if (response != null) [ FD ]
Line_37 $$ if (authMethod == AuthMethod.SIMPLE) -->Line_47 $$ responseToken = (challengeToken != null) ? saslClient.evaluateChallenge(challengeToken) : new byte[0][ CD ]
Line_10 $$ RpcResponseMessageWrapper responseWrapper = new RpcResponseMessageWrapper()-->Line_26 $$ RpcSaslProto saslMessage = RpcSaslProto.parseFrom(responseWrapper.getMessageBytes())[ FD ]
Line_43 $$ saslAuthType = SaslAuth.newBuilder(saslAuthType).clearChallenge().build()-->Line_41 $$ if (saslAuthType.hasChallenge()) [ FD ]
Line_12 $$ RpcResponseHeaderProto header = responseWrapper.getMessageHeader()-->Line_23 $$ if (header.getCallId() != AuthProtocol.SASL.callId) [ FD ]
Line_3 $$ DataInputStream inStream = new DataInputStream(new BufferedInputStream(inS))-->Line_11 $$ responseWrapper.readFields(inStream)[ FD ]
Line_30 $$ RpcSaslProto.Builder response = null-->Line_78 $$ sendSaslMessage(outStream, response.build())[ FD ]
Line_12 $$ RpcResponseHeaderProto header = responseWrapper.getMessageHeader()-->Line_16 $$ throw new RemoteException(header.getExceptionClassName(), header.getErrorMsg())[ FD ]
Line_40 $$ byte[] challengeToken = null-->Line_45 $$ challengeToken = new byte[0][ FD ]
Line_36 $$ byte[] responseToken = null-->Line_59 $$ response = createSaslReply(SaslState.RESPONSE, responseToken)[ FD ]
Line_2 $$ public AuthMethod saslConnect(InputStream inS, OutputStream outS) throws IOException -->Line_4 $$ DataOutputStream outStream = new DataOutputStream(new BufferedOutputStream(outS))[ CD ]
Line_43 $$ saslAuthType = SaslAuth.newBuilder(saslAuthType).clearChallenge().build()-->Line_35 $$ authMethod = AuthMethod.valueOf(saslAuthType.getMethod())[ FD ]
Line_30 $$ RpcSaslProto.Builder response = null-->Line_59 $$ response = createSaslReply(SaslState.RESPONSE, responseToken)[ FD ]
Line_8 $$ do -->Line_10 $$ RpcResponseMessageWrapper responseWrapper = new RpcResponseMessageWrapper()[ CD ]
Line_34 $$ SaslAuth saslAuthType = selectSaslClient(saslMessage.getAuthsList())-->Line_50 $$ response.addAuths(saslAuthType)[ FD ]
Line_26 $$ RpcSaslProto saslMessage = RpcSaslProto.parseFrom(responseWrapper.getMessageBytes())-->Line_34 $$ SaslAuth saslAuthType = selectSaslClient(saslMessage.getAuthsList())[ FD ]
Line_45 $$ challengeToken = new byte[0]-->Line_47 $$ responseToken = (challengeToken != null) ? saslClient.evaluateChallenge(challengeToken) : new byte[0][ FD ]
Line_26 $$ RpcSaslProto saslMessage = RpcSaslProto.parseFrom(responseWrapper.getMessageBytes())-->Line_74 $$ throw new SaslException("RPC client doesn't support SASL " + saslMessage.getState())[ FD ]
Line_49 $$ response = createSaslReply(SaslState.INITIATE, responseToken)-->Line_78 $$ sendSaslMessage(outStream, response.build())[ FD ]
Line_7 $$ boolean done = false-->Line_8 $$ do [ FD ]
Line_38 $$ done = true-->Line_69 $$ done = true[ FD ]
Line_12 $$ RpcResponseHeaderProto header = responseWrapper.getMessageHeader()-->Line_13 $$ switch(header.getStatus()) [ FD ]
Line_10 $$ RpcResponseMessageWrapper responseWrapper = new RpcResponseMessageWrapper()-->Line_20 $$ if (totalLen != responseWrapper.getLength()) [ FD ]
Line_10 $$ RpcResponseMessageWrapper responseWrapper = new RpcResponseMessageWrapper()-->Line_12 $$ RpcResponseHeaderProto header = responseWrapper.getMessageHeader()[ FD ]
Line_49 $$ response = createSaslReply(SaslState.INITIATE, responseToken)-->Line_59 $$ response = createSaslReply(SaslState.RESPONSE, responseToken)[ FD ]
Line_77 $$ if (response != null) -->Line_78 $$ sendSaslMessage(outStream, response.build())[ CD ]
Line_34 $$ SaslAuth saslAuthType = selectSaslClient(saslMessage.getAuthsList())-->Line_41 $$ if (saslAuthType.hasChallenge()) [ FD ]
Line_26 $$ RpcSaslProto saslMessage = RpcSaslProto.parseFrom(responseWrapper.getMessageBytes())-->Line_31 $$ switch(saslMessage.getState()) [ FD ]
Line_2 $$ public AuthMethod saslConnect(InputStream inS, OutputStream outS) throws IOException -->Line_3 $$ DataInputStream inStream = new DataInputStream(new BufferedInputStream(inS))[ CD ]
Line_30 $$ RpcSaslProto.Builder response = null-->Line_50 $$ response.addAuths(saslAuthType)[ FD ]
Line_26 $$ RpcSaslProto saslMessage = RpcSaslProto.parseFrom(responseWrapper.getMessageBytes())-->Line_67 $$ saslEvaluateToken(saslMessage, true)[ FD ]
Line_49 $$ response = createSaslReply(SaslState.INITIATE, responseToken)-->Line_77 $$ if (response != null) [ FD ]
Line_34 $$ SaslAuth saslAuthType = selectSaslClient(saslMessage.getAuthsList())-->Line_35 $$ authMethod = AuthMethod.valueOf(saslAuthType.getMethod())[ FD ]
Line_41 $$ if (saslAuthType.hasChallenge()) -->Line_43 $$ saslAuthType = SaslAuth.newBuilder(saslAuthType).clearChallenge().build()[ CD ]
Line_30 $$ RpcSaslProto.Builder response = null-->Line_77 $$ if (response != null) [ FD ]
