Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_14 $$ FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte)[ CD ]
Line_19 $$ FSEditLogOp op = cache.get(opCode)-->Line_31 $$ op.readFields(in, logVersion)[ FD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_5 $$ if (checksum != null) [ CD ]
Line_14 $$ FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte)-->Line_19 $$ FSEditLogOp op = cache.get(opCode)[ FD ]
Line_15 $$ if (opCode == OP_INVALID) -->Line_16 $$ verifyTerminator()[ CD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_23 $$ if (supportEditLogLength) [ CD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_3 $$ limiter.setLimit(maxOpSize)[ CD ]
Line_14 $$ FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte)-->Line_15 $$ if (opCode == OP_INVALID) [ FD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_26 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.STORED_TXIDS, logVersion)) [ CD ]
Line_23 $$ if (supportEditLogLength) -->Line_24 $$ in.readInt()[ CD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_31 $$ op.readFields(in, logVersion)[ CD ]
Line_19 $$ FSEditLogOp op = cache.get(opCode)-->Line_29 $$ op.setTransactionId(HdfsConstants.INVALID_TXID)[ FD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_33 $$ return op[ CD ]
Line_19 $$ FSEditLogOp op = cache.get(opCode)-->Line_20 $$ if (op == null) [ FD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_15 $$ if (opCode == OP_INVALID) [ CD ]
Line_15 $$ if (opCode == OP_INVALID) -->Line_17 $$ return null[ CD ]
Line_5 $$ if (checksum != null) -->Line_6 $$ checksum.reset()[ CD ]
Line_26 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.STORED_TXIDS, logVersion)) -->Line_27 $$ op.setTransactionId(in.readLong())[ CD ]
Line_8 $$ byte opCodeByte-->Line_14 $$ FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte)[ FD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_20 $$ if (op == null) [ CD ]
Line_10 $$ opCodeByte = in.readByte()-->Line_14 $$ FSEditLogOpCodes opCode = FSEditLogOpCodes.fromByte(opCodeByte)[ FD ]
Line_8 $$ byte opCodeByte-->Line_10 $$ opCodeByte = in.readByte()[ FD ]
Line_19 $$ FSEditLogOp op = cache.get(opCode)-->Line_27 $$ op.setTransactionId(in.readLong())[ FD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_32 $$ validateChecksum(in, checksum, op.txid)[ CD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_8 $$ byte opCodeByte[ CD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_19 $$ FSEditLogOp op = cache.get(opCode)[ CD ]
Line_26 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.STORED_TXIDS, logVersion)) -->Line_29 $$ op.setTransactionId(HdfsConstants.INVALID_TXID)[ CD ]
Line_2 $$ private FSEditLogOp decodeOp() throws IOException -->Line_4 $$ in.mark(maxOpSize)[ CD ]
