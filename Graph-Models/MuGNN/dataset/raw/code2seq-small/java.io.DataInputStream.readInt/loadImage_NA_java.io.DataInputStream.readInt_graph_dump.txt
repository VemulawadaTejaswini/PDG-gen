Line_37 $$ if (NameNodeLayoutVersion.supports(Feature.FSIMAGE_COMPRESSION, imageVersion)) -->Line_39 $$ v.visit(ImageElement.IS_COMPRESSED, String.valueOf(isCompressed))[ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_15 $$ long numInodes = in.readLong()[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_61 $$ v.leaveEnclosingElement()[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_7 $$ imageVersion = in.readInt()[ FD ]
Line_33 $$ for (int i = 0; i < numSnapshots; i++) -->Line_34 $$ processSnapshot(in, v)[ CD ]
Line_44 $$ CompressionCodec codec = codecFac.getCodecByClassName(codecClassName)-->Line_45 $$ if (codec == null) [ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_31 $$ int numSnapshots = in.readInt()[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_65 $$ v.finish()[ FD ]
Line_29 $$ if (supportSnapshot) -->Line_32 $$ v.visit(ImageElement.NUM_SNAPSHOTS_TOTAL, numSnapshots)[ CD ]
Line_25 $$ if (NameNodeLayoutVersion.supports(Feature.ADD_INODE_ID, imageVersion)) -->Line_26 $$ v.visit(ImageElement.LAST_INODE_ID, in.readLong())[ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_20 $$ v.visit(ImageElement.LAST_ALLOCATED_BLOCK_ID, in.readLong())[ FD ]
Line_48 $$ in = new DataInputStream(codec.createInputStream(in))-->Line_59 $$ processCacheManagerState(in, v)[ FD ]
Line_29 $$ if (supportSnapshot) -->Line_30 $$ v.visit(ImageElement.SNAPSHOT_COUNTER, in.readInt())[ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_41 $$ String codecClassName = Text.readString(in)[ FD ]
Line_40 $$ if (isCompressed) -->Line_44 $$ CompressionCodec codec = codecFac.getCodecByClassName(codecClassName)[ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_34 $$ processSnapshot(in, v)[ FD ]
Line_38 $$ boolean isCompressed = in.readBoolean()-->Line_39 $$ v.visit(ImageElement.IS_COMPRESSED, String.valueOf(isCompressed))[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_18 $$ v.visit(ImageElement.GENERATION_STAMP_V2, in.readLong())[ FD ]
Line_17 $$ if (NameNodeLayoutVersion.supports(Feature.SEQUENTIAL_BLOCK_ID, imageVersion)) -->Line_18 $$ v.visit(ImageElement.GENERATION_STAMP_V2, in.readLong())[ CD ]
Line_40 $$ if (isCompressed) -->Line_42 $$ v.visit(ImageElement.COMPRESS_CODEC, codecClassName)[ CD ]
Line_41 $$ String codecClassName = Text.readString(in)-->Line_44 $$ CompressionCodec codec = codecFac.getCodecByClassName(codecClassName)[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_3 $$ boolean done = false[ CD ]
Line_29 $$ if (supportSnapshot) -->Line_33 $$ for (int i = 0; i < numSnapshots; i++) [ CD ]
Line_43 $$ CompressionCodecFactory codecFac = new CompressionCodecFactory(new Configuration())-->Line_44 $$ CompressionCodec codec = codecFac.getCodecByClassName(codecClassName)[ FD ]
Line_40 $$ if (isCompressed) -->Line_48 $$ in = new DataInputStream(codec.createInputStream(in))[ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_14 $$ v.visit(ImageElement.NAMESPACE_ID, in.readInt())[ FD ]
Line_31 $$ int numSnapshots = in.readInt()-->Line_32 $$ v.visit(ImageElement.NUM_SNAPSHOTS_TOTAL, numSnapshots)[ FD ]
Line_64 $$ if (done) -->Line_67 $$ v.finishAbnormally()[ CD ]
Line_58 $$ if (NameNodeLayoutVersion.supports(Feature.CACHING, imageVersion)) -->Line_59 $$ processCacheManagerState(in, v)[ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_32 $$ v.visit(ImageElement.NUM_SNAPSHOTS_TOTAL, numSnapshots)[ FD ]
Line_48 $$ in = new DataInputStream(codec.createInputStream(in))-->Line_54 $$ processINodesUC(in, v, skipBlocks)[ FD ]
Line_41 $$ String codecClassName = Text.readString(in)-->Line_42 $$ v.visit(ImageElement.COMPRESS_CODEC, codecClassName)[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_16 $$ v.visit(ImageElement.GENERATION_STAMP, in.readLong())[ FD ]
Line_40 $$ if (isCompressed) -->Line_41 $$ String codecClassName = Text.readString(in)[ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_23 $$ v.visit(ImageElement.TRANSACTION_ID, in.readLong())[ FD ]
Line_37 $$ if (NameNodeLayoutVersion.supports(Feature.FSIMAGE_COMPRESSION, imageVersion)) -->Line_40 $$ if (isCompressed) [ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_39 $$ v.visit(ImageElement.IS_COMPRESSED, String.valueOf(isCompressed))[ FD ]
Line_28 $$ boolean supportSnapshot = NameNodeLayoutVersion.supports(Feature.SNAPSHOT, imageVersion)-->Line_51 $$ processINodes(in, v, numInodes, skipBlocks, supportSnapshot)[ FD ]
Line_48 $$ in = new DataInputStream(codec.createInputStream(in))-->Line_56 $$ processDelegationTokens(in, v)[ FD ]
Line_31 $$ int numSnapshots = in.readInt()-->Line_33 $$ for (int i = 0; i < numSnapshots; i++) [ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_6 $$ v.visitEnclosingElement(ImageElement.FS_IMAGE)[ FD ]
Line_40 $$ if (isCompressed) -->Line_45 $$ if (codec == null) [ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_48 $$ in = new DataInputStream(codec.createInputStream(in))[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_38 $$ boolean isCompressed = in.readBoolean()[ FD ]
Line_44 $$ CompressionCodec codec = codecFac.getCodecByClassName(codecClassName)-->Line_48 $$ in = new DataInputStream(codec.createInputStream(in))[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_56 $$ processDelegationTokens(in, v)[ FD ]
Line_48 $$ in = new DataInputStream(codec.createInputStream(in))-->Line_51 $$ processINodes(in, v, numInodes, skipBlocks, supportSnapshot)[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_59 $$ processCacheManagerState(in, v)[ FD ]
Line_10 $$ if (NameNodeLayoutVersion.supports(Feature.ADD_LAYOUT_FLAGS, imageVersion)) -->Line_11 $$ LayoutFlags.read(in)[ CD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_13 $$ v.visit(ImageElement.IMAGE_VERSION, imageVersion)[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_19 $$ v.visit(ImageElement.GENERATION_STAMP_V1_LIMIT, in.readLong())[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_26 $$ v.visit(ImageElement.LAST_INODE_ID, in.readLong())[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_42 $$ v.visit(ImageElement.COMPRESS_CODEC, codecClassName)[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_30 $$ v.visit(ImageElement.SNAPSHOT_COUNTER, in.readInt())[ FD ]
Line_3 $$ boolean done = false-->Line_62 $$ done = true[ FD ]
Line_17 $$ if (NameNodeLayoutVersion.supports(Feature.SEQUENTIAL_BLOCK_ID, imageVersion)) -->Line_20 $$ v.visit(ImageElement.LAST_ALLOCATED_BLOCK_ID, in.readLong())[ CD ]
Line_29 $$ if (supportSnapshot) -->Line_31 $$ int numSnapshots = in.readInt()[ CD ]
Line_40 $$ if (isCompressed) -->Line_43 $$ CompressionCodecFactory codecFac = new CompressionCodecFactory(new Configuration())[ CD ]
Line_17 $$ if (NameNodeLayoutVersion.supports(Feature.SEQUENTIAL_BLOCK_ID, imageVersion)) -->Line_19 $$ v.visit(ImageElement.GENERATION_STAMP_V1_LIMIT, in.readLong())[ CD ]
Line_37 $$ if (NameNodeLayoutVersion.supports(Feature.FSIMAGE_COMPRESSION, imageVersion)) -->Line_38 $$ boolean isCompressed = in.readBoolean()[ CD ]
Line_15 $$ long numInodes = in.readLong()-->Line_51 $$ processINodes(in, v, numInodes, skipBlocks, supportSnapshot)[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_54 $$ processINodesUC(in, v, skipBlocks)[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_51 $$ processINodes(in, v, numInodes, skipBlocks, supportSnapshot)[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_67 $$ v.finishAbnormally()[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_5 $$ v.start()[ FD ]
Line_2 $$ public void loadImage(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_11 $$ LayoutFlags.read(in)[ FD ]
Line_64 $$ if (done) -->Line_65 $$ v.finish()[ CD ]
Line_55 $$ if (NameNodeLayoutVersion.supports(Feature.DELEGATION_TOKEN, imageVersion)) -->Line_56 $$ processDelegationTokens(in, v)[ CD ]
Line_22 $$ if (NameNodeLayoutVersion.supports(Feature.STORED_TXIDS, imageVersion)) -->Line_23 $$ v.visit(ImageElement.TRANSACTION_ID, in.readLong())[ CD ]
