Line_24 $$ ProtobufRpcEngine.RpcWrapper resWrapper = (ProtobufRpcEngine.RpcWrapper) call.getRpcResponse()-->Line_25 $$ if (totalLen != headerLen + resWrapper.getLength()) [ FD ]
Line_2 $$ private void receiveRpcResponse() -->Line_6 $$ touch()[ CD ]
Line_13 $$ int callId = header.getCallId()-->Line_16 $$ Call call = calls.get(callId)[ FD ]
Line_16 $$ Call call = calls.get(callId)-->Line_24 $$ ProtobufRpcEngine.RpcWrapper resWrapper = (ProtobufRpcEngine.RpcWrapper) call.getRpcResponse()[ FD ]
Line_13 $$ int callId = header.getCallId()-->Line_21 $$ calls.remove(callId)[ FD ]
Line_11 $$ int headerLen = header.getSerializedSize()-->Line_12 $$ headerLen += CodedOutputStream.computeRawVarint32Size(headerLen)[ FD ]
Line_16 $$ Call call = calls.get(callId)-->Line_22 $$ call.setRpcResponse(value)[ FD ]
Line_43 $$ if (status == RpcStatusProto.FATAL) -->Line_44 $$ markClosed(re)[ CD ]
Line_19 $$ Writable value = ReflectionUtils.newInstance(valueClass, conf)-->Line_22 $$ call.setRpcResponse(value)[ FD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_19 $$ Writable value = ReflectionUtils.newInstance(valueClass, conf)[ CD ]
Line_9 $$ RpcResponseHeaderProto header = RpcResponseHeaderProto.parseDelimitedFrom(in)-->Line_10 $$ checkResponse(header)[ FD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_20 $$ value.readFields(in)[ CD ]
Line_40 $$ if (status == RpcStatusProto.ERROR) -->Line_41 $$ calls.remove(callId)[ CD ]
Line_9 $$ RpcResponseHeaderProto header = RpcResponseHeaderProto.parseDelimitedFrom(in)-->Line_11 $$ int headerLen = header.getSerializedSize()[ FD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_23 $$ if (call.getRpcResponse() instanceof ProtobufRpcEngine.RpcWrapper) [ CD ]
Line_16 $$ Call call = calls.get(callId)-->Line_42 $$ call.setException(re)[ FD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_21 $$ calls.remove(callId)[ CD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_39 $$ RemoteException re = ((erCode == null) ? new RemoteException(exceptionClassName, errorMsg) : new RemoteException(exceptionClassName, errorMsg, erCode))[ CD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_35 $$ final RpcErrorCodeProto erCode = (header.hasErrorDetail() ? header.getErrorDetail() : null)[ CD ]
Line_17 $$ RpcStatusProto status = header.getStatus()-->Line_18 $$ if (status == RpcStatusProto.SUCCESS) [ FD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_22 $$ call.setRpcResponse(value)[ CD ]
Line_8 $$ int totalLen = in.readInt()-->Line_25 $$ if (totalLen != headerLen + resWrapper.getLength()) [ FD ]
Line_36 $$ if (erCode == null) -->Line_37 $$ LOG.warn("Detailed error code not set by server on rpc error")[ CD ]
Line_39 $$ RemoteException re = ((erCode == null) ? new RemoteException(exceptionClassName, errorMsg) : new RemoteException(exceptionClassName, errorMsg, erCode))-->Line_42 $$ call.setException(re)[ FD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_33 $$ final String exceptionClassName = header.hasExceptionClassName() ? header.getExceptionClassName() : "ServerDidNotSetExceptionClassName"[ CD ]
Line_17 $$ RpcStatusProto status = header.getStatus()-->Line_43 $$ if (status == RpcStatusProto.FATAL) [ FD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_30 $$ if (totalLen != headerLen) [ CD ]
Line_12 $$ headerLen += CodedOutputStream.computeRawVarint32Size(headerLen)-->Line_30 $$ if (totalLen != headerLen) [ FD ]
Line_19 $$ Writable value = ReflectionUtils.newInstance(valueClass, conf)-->Line_20 $$ value.readFields(in)[ FD ]
Line_23 $$ if (call.getRpcResponse() instanceof ProtobufRpcEngine.RpcWrapper) -->Line_24 $$ ProtobufRpcEngine.RpcWrapper resWrapper = (ProtobufRpcEngine.RpcWrapper) call.getRpcResponse()[ CD ]
Line_11 $$ int headerLen = header.getSerializedSize()-->Line_30 $$ if (totalLen != headerLen) [ FD ]
Line_13 $$ int callId = header.getCallId()-->Line_41 $$ calls.remove(callId)[ FD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_34 $$ final String errorMsg = header.hasErrorMsg() ? header.getErrorMsg() : "ServerDidNotSetErrorMsg"[ CD ]
Line_9 $$ RpcResponseHeaderProto header = RpcResponseHeaderProto.parseDelimitedFrom(in)-->Line_35 $$ final RpcErrorCodeProto erCode = (header.hasErrorDetail() ? header.getErrorDetail() : null)[ FD ]
Line_16 $$ Call call = calls.get(callId)-->Line_23 $$ if (call.getRpcResponse() instanceof ProtobufRpcEngine.RpcWrapper) [ FD ]
Line_17 $$ RpcStatusProto status = header.getStatus()-->Line_40 $$ if (status == RpcStatusProto.ERROR) [ FD ]
Line_40 $$ if (status == RpcStatusProto.ERROR) -->Line_42 $$ call.setException(re)[ CD ]
Line_2 $$ private void receiveRpcResponse() -->Line_3 $$ if (shouldCloseConnection.get()) [ CD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_36 $$ if (erCode == null) [ CD ]
Line_18 $$ if (status == RpcStatusProto.SUCCESS) -->Line_40 $$ if (status == RpcStatusProto.ERROR) [ CD ]
Line_39 $$ RemoteException re = ((erCode == null) ? new RemoteException(exceptionClassName, errorMsg) : new RemoteException(exceptionClassName, errorMsg, erCode))-->Line_44 $$ markClosed(re)[ FD ]
Line_23 $$ if (call.getRpcResponse() instanceof ProtobufRpcEngine.RpcWrapper) -->Line_25 $$ if (totalLen != headerLen + resWrapper.getLength()) [ CD ]
Line_9 $$ RpcResponseHeaderProto header = RpcResponseHeaderProto.parseDelimitedFrom(in)-->Line_17 $$ RpcStatusProto status = header.getStatus()[ FD ]
Line_9 $$ RpcResponseHeaderProto header = RpcResponseHeaderProto.parseDelimitedFrom(in)-->Line_33 $$ final String exceptionClassName = header.hasExceptionClassName() ? header.getExceptionClassName() : "ServerDidNotSetExceptionClassName"[ FD ]
Line_9 $$ RpcResponseHeaderProto header = RpcResponseHeaderProto.parseDelimitedFrom(in)-->Line_34 $$ final String errorMsg = header.hasErrorMsg() ? header.getErrorMsg() : "ServerDidNotSetErrorMsg"[ FD ]
Line_14 $$ if (LOG.isDebugEnabled())-->Line_15 $$ LOG.debug(getName() + " got value #" + callId)[ CD ]
Line_35 $$ final RpcErrorCodeProto erCode = (header.hasErrorDetail() ? header.getErrorDetail() : null)-->Line_36 $$ if (erCode == null) [ FD ]
Line_3 $$ if (shouldCloseConnection.get()) -->Line_4 $$ return[ CD ]
Line_8 $$ int totalLen = in.readInt()-->Line_30 $$ if (totalLen != headerLen) [ FD ]
Line_40 $$ if (status == RpcStatusProto.ERROR) -->Line_43 $$ if (status == RpcStatusProto.FATAL) [ CD ]
Line_9 $$ RpcResponseHeaderProto header = RpcResponseHeaderProto.parseDelimitedFrom(in)-->Line_13 $$ int callId = header.getCallId()[ FD ]
