Line_2 $$ protected void assertPrepared() throws Exception -->Line_15 $$ LZ4Compressor.instance.uncompress(compressed, 0, offset - 4, uncompressed, 0)[ CD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_4 $$ Assert.assertTrue(offsetsFile.exists())[ CD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_9 $$ Assert.assertEquals(fullContents.length, offsets.readLong())[ CD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_14 $$ byte[] uncompressed = new byte[fullContents.length][ CD ]
Line_14 $$ byte[] uncompressed = new byte[fullContents.length]-->Line_16 $$ LZ4Compressor.instance.uncompress(compressed, offset, compressed.length - (4 + offset), uncompressed, partialContents.length)[ FD ]
Line_14 $$ byte[] uncompressed = new byte[fullContents.length]-->Line_15 $$ LZ4Compressor.instance.uncompress(compressed, 0, offset - 4, uncompressed, 0)[ FD ]
Line_13 $$ byte[] compressed = readFileToByteArray(file)-->Line_16 $$ LZ4Compressor.instance.uncompress(compressed, offset, compressed.length - (4 + offset), uncompressed, partialContents.length)[ FD ]
Line_5 $$ DataInputStream offsets = new DataInputStream(new ByteArrayInputStream(readFileToByteArray(offsetsFile)))-->Line_6 $$ Assert.assertTrue(offsets.readUTF().endsWith("LZ4Compressor"))[ FD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_7 $$ Assert.assertEquals(0, offsets.readInt())[ CD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_13 $$ byte[] compressed = readFileToByteArray(file)[ CD ]
Line_5 $$ DataInputStream offsets = new DataInputStream(new ByteArrayInputStream(readFileToByteArray(offsetsFile)))-->Line_8 $$ Assert.assertEquals(BUFFER_SIZE, offsets.readInt())[ FD ]
Line_5 $$ DataInputStream offsets = new DataInputStream(new ByteArrayInputStream(readFileToByteArray(offsetsFile)))-->Line_12 $$ int offset = (int) offsets.readLong()[ FD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_6 $$ Assert.assertTrue(offsets.readUTF().endsWith("LZ4Compressor"))[ CD ]
Line_5 $$ DataInputStream offsets = new DataInputStream(new ByteArrayInputStream(readFileToByteArray(offsetsFile)))-->Line_7 $$ Assert.assertEquals(0, offsets.readInt())[ FD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_3 $$ Assert.assertTrue(file.exists())[ CD ]
Line_14 $$ byte[] uncompressed = new byte[fullContents.length]-->Line_17 $$ Assert.assertTrue(Arrays.equals(fullContents, uncompressed))[ FD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_8 $$ Assert.assertEquals(BUFFER_SIZE, offsets.readInt())[ CD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_10 $$ Assert.assertEquals(2, offsets.readInt())[ CD ]
Line_5 $$ DataInputStream offsets = new DataInputStream(new ByteArrayInputStream(readFileToByteArray(offsetsFile)))-->Line_9 $$ Assert.assertEquals(fullContents.length, offsets.readLong())[ FD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_12 $$ int offset = (int) offsets.readLong()[ CD ]
Line_13 $$ byte[] compressed = readFileToByteArray(file)-->Line_15 $$ LZ4Compressor.instance.uncompress(compressed, 0, offset - 4, uncompressed, 0)[ FD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_17 $$ Assert.assertTrue(Arrays.equals(fullContents, uncompressed))[ CD ]
Line_5 $$ DataInputStream offsets = new DataInputStream(new ByteArrayInputStream(readFileToByteArray(offsetsFile)))-->Line_11 $$ Assert.assertEquals(0, offsets.readLong())[ FD ]
Line_5 $$ DataInputStream offsets = new DataInputStream(new ByteArrayInputStream(readFileToByteArray(offsetsFile)))-->Line_10 $$ Assert.assertEquals(2, offsets.readInt())[ FD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_11 $$ Assert.assertEquals(0, offsets.readLong())[ CD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_5 $$ DataInputStream offsets = new DataInputStream(new ByteArrayInputStream(readFileToByteArray(offsetsFile)))[ CD ]
Line_12 $$ int offset = (int) offsets.readLong()-->Line_16 $$ LZ4Compressor.instance.uncompress(compressed, offset, compressed.length - (4 + offset), uncompressed, partialContents.length)[ FD ]
Line_2 $$ protected void assertPrepared() throws Exception -->Line_16 $$ LZ4Compressor.instance.uncompress(compressed, offset, compressed.length - (4 + offset), uncompressed, partialContents.length)[ CD ]
