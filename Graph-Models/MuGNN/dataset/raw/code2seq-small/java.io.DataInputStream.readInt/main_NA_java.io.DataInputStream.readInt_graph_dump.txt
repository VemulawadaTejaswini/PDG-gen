Line_37 $$ if (success) -->Line_41 $$ if (projectPathToPreload != null && globalsPathToPreload != null) [ CD ]
Line_61 $$ if (version == BuildFSState.VERSION) -->Line_63 $$ final boolean hasWorkToDo = in.readBoolean()[ CD ]
Line_37 $$ if (success) -->Line_40 $$ final String globalsPathToPreload = System.getProperty(PRELOAD_CONFIG_PATH, null)[ CD ]
Line_61 $$ if (version == BuildFSState.VERSION) -->Line_65 $$ data.setFsEventOrdinal(savedOrdinal)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ System.out.println(startMessage)[ CD ]
Line_41 $$ if (projectPathToPreload != null && globalsPathToPreload != null) -->Line_85 $$ if (projectPathToPreload != null || globalsPathToPreload != null) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_30 $$ final Bootstrap bootstrap = new Bootstrap().group(ourEventLoopGroup).channel(NioSocketChannel.class).handler(new ChannelInitializer() [ CD ]
Line_37 $$ if (success) -->Line_88 $$ future.channel().writeAndFlush(CmdlineProtoUtil.toMessage(sessionId, CmdlineProtoUtil.createParamRequest()))[ CD ]
Line_30 $$ final Bootstrap bootstrap = new Bootstrap().group(ourEventLoopGroup).channel(NioSocketChannel.class).handler(new ChannelInitializer() -->Line_35 $$ final ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port)).awaitUninterruptibly()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ final int port = Integer.parseInt(args[PORT_ARG])[ CD ]
Line_61 $$ if (version == BuildFSState.VERSION) -->Line_62 $$ final long savedOrdinal = in.readLong()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ final long connectStart = System.currentTimeMillis()[ CD ]
Line_61 $$ if (version == BuildFSState.VERSION) -->Line_66 $$ data.setHasHasWorkToDo(hasWorkToDo)[ CD ]
Line_8 $$ final int port = Integer.parseInt(args[PORT_ARG])-->Line_19 $$ printErrorAndExit(host, port, e)[ FD ]
Line_10 $$ final File systemDir = new File(FileUtil.toCanonicalPath(args[SYSTEM_DIR_ARG]))-->Line_11 $$ Utils.setSystemRoot(systemDir)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_35 $$ final ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port)).awaitUninterruptibly()[ CD ]
Line_50 $$ final ProjectDescriptor pd = runner.load(new MessageHandler() -->Line_52 $$ data.addMessage(msg)[ CD ]
Line_37 $$ if (success) -->Line_38 $$ LOG.info("Connection to IDE established in " + (System.currentTimeMillis() - connectStart) + " ms")[ CD ]
Line_50 $$ final ProjectDescriptor pd = runner.load(new MessageHandler() -->Line_52 $$ data.addMessage(msg)[ FD ]
Line_61 $$ if (version == BuildFSState.VERSION) -->Line_64 $$ fsState.load(in, pd.getModel(), pd.getBuildRootIndex())[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ final UUID sessionId = UUID.fromString(args[SESSION_ID_ARG])[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ final String startMessage = "Build process started. Classpath: " + System.getProperty("java.class.path")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ Utils.setSystemRoot(systemDir)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_37 $$ if (success) [ CD ]
Line_8 $$ final int port = Integer.parseInt(args[PORT_ARG])-->Line_90 $$ printErrorAndExit(host, port, future.cause())[ FD ]
Line_85 $$ if (projectPathToPreload != null || globalsPathToPreload != null) -->Line_86 $$ LOG.info("Skipping project pre-loading step: both paths to project configuration files and path to global settings must be specified")[ CD ]
Line_4 $$ final String startMessage = "Build process started. Classpath: " + System.getProperty("java.class.path")-->Line_6 $$ LOG.info(startMessage)[ FD ]
Line_4 $$ final String startMessage = "Build process started. Classpath: " + System.getProperty("java.class.path")-->Line_5 $$ System.out.println(startMessage)[ FD ]
Line_7 $$ final String host = args[HOST_ARG]-->Line_19 $$ printErrorAndExit(host, port, e)[ FD ]
Line_30 $$ final Bootstrap bootstrap = new Bootstrap().group(ourEventLoopGroup).channel(NioSocketChannel.class).handler(new ChannelInitializer() -->Line_32 $$ channel.pipeline().addLast(new ProtobufVarint32FrameDecoder(), new ProtobufDecoder(CmdlineRemoteProto.Message.getDefaultInstance()), new ProtobufVarint32LengthFieldPrepender(), new ProtobufEncoder(), new MyMessageHandler(sessionId))[ FD ]
Line_18 $$ if (attempt == 2) -->Line_22 $$ LOG.warn("Cannot create event loop, attempt #" + attempt, e)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_36 $$ final boolean success = future.isSuccess()[ CD ]
Line_30 $$ final Bootstrap bootstrap = new Bootstrap().group(ourEventLoopGroup).channel(NioSocketChannel.class).handler(new ChannelInitializer() -->Line_32 $$ channel.pipeline().addLast(new ProtobufVarint32FrameDecoder(), new ProtobufDecoder(CmdlineRemoteProto.Message.getDefaultInstance()), new ProtobufVarint32LengthFieldPrepender(), new ProtobufEncoder(), new MyMessageHandler(sessionId))[ CD ]
Line_18 $$ if (attempt == 2) -->Line_19 $$ printErrorAndExit(host, port, e)[ CD ]
Line_37 $$ if (success) -->Line_90 $$ printErrorAndExit(host, port, future.cause())[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ final long processStart = System.currentTimeMillis()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ final String host = args[HOST_ARG][ CD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ for (int attempt = 0; attempt < 3; attempt++) [ CD ]
Line_9 $$ final UUID sessionId = UUID.fromString(args[SESSION_ID_ARG])-->Line_88 $$ future.channel().writeAndFlush(CmdlineProtoUtil.toMessage(sessionId, CmdlineProtoUtil.createParamRequest()))[ FD ]
Line_37 $$ if (success) -->Line_39 $$ final String projectPathToPreload = System.getProperty(PRELOAD_PROJECT_PATH, null)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ final File systemDir = new File(FileUtil.toCanonicalPath(args[SYSTEM_DIR_ARG]))[ CD ]
Line_18 $$ if (attempt == 2) -->Line_20 $$ return[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ LOG.info(startMessage)[ CD ]
Line_13 $$ for (int attempt = 0; attempt < 3; attempt++) -->Line_18 $$ if (attempt == 2) [ FD ]
Line_7 $$ final String host = args[HOST_ARG]-->Line_90 $$ printErrorAndExit(host, port, future.cause())[ FD ]
