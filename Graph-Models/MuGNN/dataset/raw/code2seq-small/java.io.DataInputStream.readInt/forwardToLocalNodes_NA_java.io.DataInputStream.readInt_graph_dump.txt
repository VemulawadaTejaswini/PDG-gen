Line_3 $$ try (DataInputStream in = new DataInputStream(new FastByteArrayInputStream(forwardBytes))) -->Line_7 $$ InetAddress address = CompactEndpointSerializationHelper.deserialize(in)[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_7 $$ InetAddress address = CompactEndpointSerializationHelper.deserialize(in)[ CD ]
Line_3 $$ try (DataInputStream in = new DataInputStream(new FastByteArrayInputStream(forwardBytes))) -->Line_8 $$ int id = in.readInt()[ FD ]
Line_5 $$ MessageOut<Mutation> message = new MessageOut(verb, mutation, Mutation.serializer).withParameter(Mutation.FORWARD_FROM, from.getAddress())-->Line_10 $$ MessagingService.instance().sendOneWay(message, id, address)[ FD ]
Line_7 $$ InetAddress address = CompactEndpointSerializationHelper.deserialize(in)-->Line_9 $$ Tracing.trace("Enqueuing forwarded write to [ FD ]
Line_3 $$ try (DataInputStream in = new DataInputStream(new FastByteArrayInputStream(forwardBytes))) -->Line_4 $$ int size = in.readInt()[ FD ]
Line_8 $$ int id = in.readInt()-->Line_10 $$ MessagingService.instance().sendOneWay(message, id, address)[ FD ]
Line_7 $$ InetAddress address = CompactEndpointSerializationHelper.deserialize(in)-->Line_10 $$ MessagingService.instance().sendOneWay(message, id, address)[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_8 $$ int id = in.readInt()[ CD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_10 $$ MessagingService.instance().sendOneWay(message, id, address)[ CD ]
Line_4 $$ int size = in.readInt()-->Line_6 $$ for (int i = 0; i < size; i++) [ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_9 $$ Tracing.trace("Enqueuing forwarded write to [ CD ]
Line_2 $$ private static void forwardToLocalNodes(Mutation mutation, MessagingService.Verb verb, byte[] forwardBytes, InetAddress from) throws IOException -->Line_5 $$ MessageOut<Mutation> message = new MessageOut(verb, mutation, Mutation.serializer).withParameter(Mutation.FORWARD_FROM, from.getAddress())[ FD ]
