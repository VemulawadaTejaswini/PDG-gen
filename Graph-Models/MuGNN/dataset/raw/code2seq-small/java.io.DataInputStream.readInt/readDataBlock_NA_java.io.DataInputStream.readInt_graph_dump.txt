Line_13 $$ int skipped = inputStream.skipBytes(origLength - length)-->Line_15 $$ LOG.info(String.format("Skipped %s bytes", skipped))[ FD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_13 $$ int skipped = inputStream.skipBytes(origLength - length)[ FD ]
Line_6 $$ length = MAX_INPUT_LENGTH-->Line_7 $$ LOG.info(String.format("Too large input: %d bytes. Reading %s bytes and skipping all other.", origLength, length))[ FD ]
Line_9 $$ length = origLength-->Line_12 $$ readAsMuchAsAvailable(inputStream, data, length)[ FD ]
Line_3 $$ final int origLength = inputStream.readInt()-->Line_9 $$ length = origLength[ FD ]
Line_4 $$ final int length-->Line_7 $$ LOG.info(String.format("Too large input: %d bytes. Reading %s bytes and skipping all other.", origLength, length))[ FD ]
Line_6 $$ length = MAX_INPUT_LENGTH-->Line_9 $$ length = origLength[ FD ]
Line_3 $$ final int origLength = inputStream.readInt()-->Line_5 $$ if (origLength > MAX_INPUT_LENGTH) [ FD ]
Line_14 $$ if (skipped > 0) -->Line_15 $$ LOG.info(String.format("Skipped %s bytes", skipped))[ CD ]
Line_11 $$ byte[] data = new byte[length]-->Line_12 $$ readAsMuchAsAvailable(inputStream, data, length)[ FD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_17 $$ return data[ CD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_13 $$ int skipped = inputStream.skipBytes(origLength - length)[ CD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_12 $$ readAsMuchAsAvailable(inputStream, data, length)[ CD ]
Line_5 $$ if (origLength > MAX_INPUT_LENGTH) -->Line_6 $$ length = MAX_INPUT_LENGTH[ CD ]
Line_4 $$ final int length-->Line_9 $$ length = origLength[ FD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_5 $$ if (origLength > MAX_INPUT_LENGTH) [ CD ]
Line_6 $$ length = MAX_INPUT_LENGTH-->Line_12 $$ readAsMuchAsAvailable(inputStream, data, length)[ FD ]
Line_13 $$ int skipped = inputStream.skipBytes(origLength - length)-->Line_14 $$ if (skipped > 0) [ FD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_11 $$ byte[] data = new byte[length][ CD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_4 $$ final int length[ CD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_12 $$ readAsMuchAsAvailable(inputStream, data, length)[ FD ]
Line_4 $$ final int length-->Line_12 $$ readAsMuchAsAvailable(inputStream, data, length)[ FD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_3 $$ final int origLength = inputStream.readInt()[ CD ]
Line_5 $$ if (origLength > MAX_INPUT_LENGTH) -->Line_7 $$ LOG.info(String.format("Too large input: %d bytes. Reading %s bytes and skipping all other.", origLength, length))[ CD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_3 $$ final int origLength = inputStream.readInt()[ FD ]
Line_3 $$ final int origLength = inputStream.readInt()-->Line_7 $$ LOG.info(String.format("Too large input: %d bytes. Reading %s bytes and skipping all other.", origLength, length))[ FD ]
Line_5 $$ if (origLength > MAX_INPUT_LENGTH) -->Line_9 $$ length = origLength[ CD ]
Line_2 $$ protected static byte[] readDataBlock(DataInputStream inputStream) throws IOException -->Line_14 $$ if (skipped > 0) [ CD ]
Line_4 $$ final int length-->Line_6 $$ length = MAX_INPUT_LENGTH[ FD ]
