Line_2 $$ private static List<MavenProject> readProjectsRecursively(DataInputStream in, MavenProjectsTree tree) throws IOException -->Line_3 $$ int count = in.readInt()[ CD ]
Line_6 $$ MavenProject project = MavenProject.read(in)-->Line_10 $$ result.add(project)[ FD ]
Line_9 $$ if (project != null) -->Line_12 $$ tree.myVirtualFileToProjectMapping.put(project.getFile(), project)[ CD ]
Line_5 $$ while (count-- > 0) -->Line_9 $$ if (project != null) [ CD ]
Line_5 $$ while (count-- > 0) -->Line_8 $$ List<MavenProject> modules = readProjectsRecursively(in, tree)[ CD ]
Line_3 $$ int count = in.readInt()-->Line_5 $$ while (count-- > 0) [ FD ]
Line_6 $$ MavenProject project = MavenProject.read(in)-->Line_14 $$ tree.myAggregatorToModuleMapping.put(project, modules)[ FD ]
Line_6 $$ MavenProject project = MavenProject.read(in)-->Line_12 $$ tree.myVirtualFileToProjectMapping.put(project.getFile(), project)[ FD ]
Line_5 $$ while (count-- > 0) -->Line_6 $$ MavenProject project = MavenProject.read(in)[ CD ]
Line_9 $$ if (project != null) -->Line_10 $$ result.add(project)[ CD ]
Line_7 $$ MavenProjectTimestamp timestamp = MavenProjectTimestamp.read(in)-->Line_11 $$ tree.myTimestamps.put(project, timestamp)[ FD ]
Line_6 $$ MavenProject project = MavenProject.read(in)-->Line_9 $$ if (project != null) [ FD ]
Line_2 $$ private static List<MavenProject> readProjectsRecursively(DataInputStream in, MavenProjectsTree tree) throws IOException -->Line_13 $$ tree.fillIDMaps(project)[ FD ]
Line_9 $$ if (project != null) -->Line_13 $$ tree.fillIDMaps(project)[ CD ]
Line_2 $$ private static List<MavenProject> readProjectsRecursively(DataInputStream in, MavenProjectsTree tree) throws IOException -->Line_4 $$ List<MavenProject> result = new ArrayList<MavenProject>(count)[ CD ]
Line_9 $$ if (project != null) -->Line_14 $$ tree.myAggregatorToModuleMapping.put(project, modules)[ CD ]
Line_5 $$ while (count-- > 0) -->Line_7 $$ MavenProjectTimestamp timestamp = MavenProjectTimestamp.read(in)[ CD ]
Line_8 $$ List<MavenProject> modules = readProjectsRecursively(in, tree)-->Line_14 $$ tree.myAggregatorToModuleMapping.put(project, modules)[ FD ]
Line_2 $$ private static List<MavenProject> readProjectsRecursively(DataInputStream in, MavenProjectsTree tree) throws IOException -->Line_6 $$ MavenProject project = MavenProject.read(in)[ FD ]
Line_2 $$ private static List<MavenProject> readProjectsRecursively(DataInputStream in, MavenProjectsTree tree) throws IOException -->Line_3 $$ int count = in.readInt()[ FD ]
Line_2 $$ private static List<MavenProject> readProjectsRecursively(DataInputStream in, MavenProjectsTree tree) throws IOException -->Line_20 $$ return result[ CD ]
Line_15 $$ for (MavenProject eachModule : modules) -->Line_16 $$ tree.myModuleToAggregatorMapping.put(eachModule, project)[ FD ]
Line_4 $$ List<MavenProject> result = new ArrayList<MavenProject>(count)-->Line_10 $$ result.add(project)[ FD ]
Line_9 $$ if (project != null) -->Line_11 $$ tree.myTimestamps.put(project, timestamp)[ CD ]
Line_2 $$ private static List<MavenProject> readProjectsRecursively(DataInputStream in, MavenProjectsTree tree) throws IOException -->Line_8 $$ List<MavenProject> modules = readProjectsRecursively(in, tree)[ FD ]
Line_2 $$ private static List<MavenProject> readProjectsRecursively(DataInputStream in, MavenProjectsTree tree) throws IOException -->Line_7 $$ MavenProjectTimestamp timestamp = MavenProjectTimestamp.read(in)[ FD ]
Line_2 $$ private static List<MavenProject> readProjectsRecursively(DataInputStream in, MavenProjectsTree tree) throws IOException -->Line_5 $$ while (count-- > 0) [ CD ]
Line_6 $$ MavenProject project = MavenProject.read(in)-->Line_16 $$ tree.myModuleToAggregatorMapping.put(eachModule, project)[ FD ]
Line_6 $$ MavenProject project = MavenProject.read(in)-->Line_11 $$ tree.myTimestamps.put(project, timestamp)[ FD ]
Line_6 $$ MavenProject project = MavenProject.read(in)-->Line_13 $$ tree.fillIDMaps(project)[ FD ]
