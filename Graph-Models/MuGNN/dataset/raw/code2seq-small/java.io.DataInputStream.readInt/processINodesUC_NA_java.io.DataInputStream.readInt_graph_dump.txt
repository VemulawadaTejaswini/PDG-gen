Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_6 $$ v.visitEnclosingElement(ImageElement.INODE_UNDER_CONSTRUCTION)[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_12 $$ v.visit(ImageElement.INODE_ID, inodeId)[ FD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_15 $$ v.visit(ImageElement.MODIFICATION_TIME, formatDate(in.readLong()))[ CD ]
Line_17 $$ int numBlocks = in.readInt()-->Line_18 $$ processBlocks(in, v, numBlocks, skipBlocks)[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_20 $$ v.visit(ImageElement.CLIENT_NAME, FSImageSerialization.readString(in))[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_4 $$ v.visitEnclosingElement(ImageElement.INODES_UNDER_CONSTRUCTION, ImageElement.NUM_INODES_UNDER_CONSTRUCTION, numINUC)[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_28 $$ in.readInt()[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_29 $$ FSImageSerialization.readString(in)[ FD ]
Line_8 $$ String n = new String(name, "UTF8")-->Line_9 $$ v.visit(ImageElement.INODE_PATH, n)[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_14 $$ v.visit(ImageElement.REPLICATION, in.readShort())[ FD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_16 $$ v.visit(ImageElement.PREFERRED_BLOCK_SIZE, in.readLong())[ CD ]
Line_23 $$ for (int j = 0; j < numLocs; j++) -->Line_30 $$ FSImageSerialization.readString(in)[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_31 $$ WritableUtils.readEnum(in, AdminStates.class)[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_4 $$ v.visitEnclosingElement(ImageElement.INODES_UNDER_CONSTRUCTION, ImageElement.NUM_INODES_UNDER_CONSTRUCTION, numINUC)[ FD ]
Line_23 $$ for (int j = 0; j < numLocs; j++) -->Line_28 $$ in.readInt()[ CD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_7 $$ byte[] name = FSImageSerialization.readBytes(in)[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_26 $$ in.readLong()[ FD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_19 $$ processPermission(in, v)[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_11 $$ long inodeId = in.readLong()[ FD ]
Line_3 $$ int numINUC = in.readInt()-->Line_4 $$ v.visitEnclosingElement(ImageElement.INODES_UNDER_CONSTRUCTION, ImageElement.NUM_INODES_UNDER_CONSTRUCTION, numINUC)[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_3 $$ int numINUC = in.readInt()[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_17 $$ int numBlocks = in.readInt()[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_30 $$ FSImageSerialization.readString(in)[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_19 $$ processPermission(in, v)[ FD ]
Line_23 $$ for (int j = 0; j < numLocs; j++) -->Line_24 $$ in.readShort()[ CD ]
Line_23 $$ for (int j = 0; j < numLocs; j++) -->Line_31 $$ WritableUtils.readEnum(in, AdminStates.class)[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_35 $$ v.leaveEnclosingElement()[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_5 $$ for (int i = 0; i < numINUC; i++) [ CD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_9 $$ v.visit(ImageElement.INODE_PATH, n)[ CD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_23 $$ for (int j = 0; j < numLocs; j++) [ CD ]
Line_10 $$ if (NameNodeLayoutVersion.supports(Feature.ADD_INODE_ID, imageVersion)) -->Line_12 $$ v.visit(ImageElement.INODE_ID, inodeId)[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_35 $$ v.leaveEnclosingElement()[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_16 $$ v.visit(ImageElement.PREFERRED_BLOCK_SIZE, in.readLong())[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_21 $$ v.visit(ImageElement.CLIENT_MACHINE, FSImageSerialization.readString(in))[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_18 $$ processBlocks(in, v, numBlocks, skipBlocks)[ FD ]
Line_11 $$ long inodeId = in.readLong()-->Line_12 $$ v.visit(ImageElement.INODE_ID, inodeId)[ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_33 $$ v.leaveEnclosingElement()[ FD ]
Line_23 $$ for (int j = 0; j < numLocs; j++) -->Line_25 $$ in.readLong()[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_27 $$ in.readLong()[ FD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_20 $$ v.visit(ImageElement.CLIENT_NAME, FSImageSerialization.readString(in))[ CD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_22 $$ int numLocs = in.readInt()[ CD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_18 $$ processBlocks(in, v, numBlocks, skipBlocks)[ CD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_21 $$ v.visit(ImageElement.CLIENT_MACHINE, FSImageSerialization.readString(in))[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_22 $$ int numLocs = in.readInt()[ FD ]
Line_23 $$ for (int j = 0; j < numLocs; j++) -->Line_29 $$ FSImageSerialization.readString(in)[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_3 $$ int numINUC = in.readInt()[ CD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_14 $$ v.visit(ImageElement.REPLICATION, in.readShort())[ CD ]
Line_23 $$ for (int j = 0; j < numLocs; j++) -->Line_27 $$ in.readLong()[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_25 $$ in.readLong()[ FD ]
Line_22 $$ int numLocs = in.readInt()-->Line_23 $$ for (int j = 0; j < numLocs; j++) [ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_7 $$ byte[] name = FSImageSerialization.readBytes(in)[ FD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_33 $$ v.leaveEnclosingElement()[ CD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_10 $$ if (NameNodeLayoutVersion.supports(Feature.ADD_INODE_ID, imageVersion)) [ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_15 $$ v.visit(ImageElement.MODIFICATION_TIME, formatDate(in.readLong()))[ FD ]
Line_10 $$ if (NameNodeLayoutVersion.supports(Feature.ADD_INODE_ID, imageVersion)) -->Line_11 $$ long inodeId = in.readLong()[ CD ]
Line_3 $$ int numINUC = in.readInt()-->Line_5 $$ for (int i = 0; i < numINUC; i++) [ FD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_24 $$ in.readShort()[ FD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_6 $$ v.visitEnclosingElement(ImageElement.INODE_UNDER_CONSTRUCTION)[ CD ]
Line_23 $$ for (int j = 0; j < numLocs; j++) -->Line_26 $$ in.readLong()[ CD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_17 $$ int numBlocks = in.readInt()[ CD ]
Line_2 $$ private void processINodesUC(DataInputStream in, ImageVisitor v, boolean skipBlocks) throws IOException -->Line_9 $$ v.visit(ImageElement.INODE_PATH, n)[ FD ]
Line_5 $$ for (int i = 0; i < numINUC; i++) -->Line_8 $$ String n = new String(name, "UTF8")[ CD ]
