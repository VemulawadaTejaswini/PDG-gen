Line_9 $$ for (CoverageSuite coverageSuite : suite.getSuites()) -->Line_10 $$ final String fileName = coverageSuite.getCoverageDataFileName()[ FD ]
Line_61 $$ for (Integer line : lineNumbers) -->Line_62 $$ final int lineIdx = line.intValue() - 1[ FD ]
Line_70 $$ final LineData lineData = new LineData(lineIdx, methodSig)-->Line_72 $$ loadedClassData.registerMethodSignature(lineData)[ FD ]
Line_45 $$ ClassData loadedClassData = projectData.getClassData(className)-->Line_77 $$ loadedClassData.setLines(lines)[ FD ]
Line_62 $$ final int lineIdx = line.intValue() - 1-->Line_65 $$ final LineData oldLineData = oldData.getLineData(lineIdx)[ FD ]
Line_71 $$ if (methodSig != null) -->Line_72 $$ loadedClassData.registerMethodSignature(lineData)[ CD ]
Line_43 $$ final ProjectData projectData = new ProjectData()-->Line_45 $$ ClassData loadedClassData = projectData.getClassData(className)[ FD ]
Line_19 $$ for (int i = 0; i < traceSize; i++) -->Line_23 $$ if (lines == null) [ CD ]
Line_50 $$ final ClassData oldData = data.getClassData(className)-->Line_65 $$ final LineData oldLineData = oldData.getLineData(lineIdx)[ FD ]
Line_63 $$ String methodSig = null-->Line_67 $$ methodSig = oldLineData.getMethodSignature()[ FD ]
Line_17 $$ in = new DataInputStream(new FileInputStream(file))-->Line_20 $$ final String className = in.readUTF()[ FD ]
Line_24 $$ lines = new HashSet<Integer>()-->Line_23 $$ if (lines == null) [ FD ]
Line_20 $$ final String className = in.readUTF()-->Line_22 $$ Set<Integer> lines = executionTrace.get(className)[ FD ]
Line_44 $$ for (String className : executionTrace.keySet()) -->Line_47 $$ loadedClassData = projectData.getOrCreateClassData(className)[ FD ]
Line_62 $$ final int lineIdx = line.intValue() - 1-->Line_64 $$ if (lineIdx < oldData.getLines().length) [ FD ]
Line_18 $$ int traceSize = in.readInt()-->Line_19 $$ for (int i = 0; i < traceSize; i++) [ FD ]
Line_20 $$ final String className = in.readUTF()-->Line_25 $$ executionTrace.put(className, lines)[ FD ]
Line_60 $$ final LineData[] lines = new LineData[maxNumber]-->Line_77 $$ loadedClassData.setLines(lines)[ FD ]
Line_67 $$ methodSig = oldLineData.getMethodSignature()-->Line_71 $$ if (methodSig != null) [ FD ]
Line_4 $$ final ProjectData data = suite.getCoverageData()-->Line_5 $$ if (data == null)[ FD ]
Line_64 $$ if (lineIdx < oldData.getLines().length) -->Line_66 $$ if (oldLineData != null) [ CD ]
Line_23 $$ if (lines == null) -->Line_25 $$ executionTrace.put(className, lines)[ CD ]
Line_45 $$ ClassData loadedClassData = projectData.getClassData(className)-->Line_46 $$ if (loadedClassData == null) [ FD ]
Line_17 $$ in = new DataInputStream(new FileInputStream(file))-->Line_28 $$ lines.add(in.readInt())[ FD ]
Line_50 $$ final ClassData oldData = data.getClassData(className)-->Line_52 $$ final Object[] oldLines = oldData.getLines()[ FD ]
Line_20 $$ final String className = in.readUTF()-->Line_47 $$ loadedClassData = projectData.getOrCreateClassData(className)[ FD ]
Line_5 $$ if (data == null)-->Line_6 $$ return[ CD ]
Line_15 $$ DataInputStream in = null-->Line_28 $$ lines.add(in.readInt())[ FD ]
Line_20 $$ final String className = in.readUTF()-->Line_49 $$ final Set<Integer> lineNumbers = executionTrace.get(className)[ FD ]
Line_23 $$ if (lines == null) -->Line_24 $$ lines = new HashSet<Integer>()[ CD ]
Line_19 $$ for (int i = 0; i < traceSize; i++) -->Line_20 $$ final String className = in.readUTF()[ CD ]
Line_55 $$ for (Integer lineNumber : lineNumbers) -->Line_56 $$ if (lineNumber >= maxNumber) [ FD ]
Line_19 $$ for (int i = 0; i < traceSize; i++) -->Line_21 $$ final int linesSize = in.readInt()[ CD ]
Line_22 $$ Set<Integer> lines = executionTrace.get(className)-->Line_28 $$ lines.add(in.readInt())[ FD ]
Line_46 $$ if (loadedClassData == null) -->Line_47 $$ loadedClassData = projectData.getOrCreateClassData(className)[ CD ]
Line_43 $$ final ProjectData projectData = new ProjectData()-->Line_47 $$ loadedClassData = projectData.getOrCreateClassData(className)[ FD ]
Line_54 $$ int maxNumber = oldLines.length-->Line_56 $$ if (lineNumber >= maxNumber) [ FD ]
Line_17 $$ in = new DataInputStream(new FileInputStream(file))-->Line_21 $$ final int linesSize = in.readInt()[ FD ]
Line_55 $$ for (Integer lineNumber : lineNumbers) -->Line_57 $$ maxNumber = lineNumber + 1[ FD ]
Line_44 $$ for (String className : executionTrace.keySet()) -->Line_49 $$ final Set<Integer> lineNumbers = executionTrace.get(className)[ FD ]
Line_45 $$ ClassData loadedClassData = projectData.getClassData(className)-->Line_72 $$ loadedClassData.registerMethodSignature(lineData)[ FD ]
Line_50 $$ final ClassData oldData = data.getClassData(className)-->Line_64 $$ if (lineIdx < oldData.getLines().length) [ FD ]
Line_24 $$ lines = new HashSet<Integer>()-->Line_25 $$ executionTrace.put(className, lines)[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_4 $$ final ProjectData data = suite.getCoverageData()[ FD ]
Line_22 $$ Set<Integer> lines = executionTrace.get(className)-->Line_23 $$ if (lines == null) [ FD ]
Line_22 $$ Set<Integer> lines = executionTrace.get(className)-->Line_77 $$ loadedClassData.setLines(lines)[ FD ]
Line_19 $$ for (int i = 0; i < traceSize; i++) -->Line_27 $$ for (int l = 0; l < linesSize; l++) [ CD ]
Line_13 $$ final File file = new File(tracesDir, FileUtil.sanitizeFileName(testName) + ".tr")-->Line_14 $$ if (file.exists()) [ FD ]
Line_47 $$ loadedClassData = projectData.getOrCreateClassData(className)-->Line_77 $$ loadedClassData.setLines(lines)[ FD ]
Line_27 $$ for (int l = 0; l < linesSize; l++) -->Line_28 $$ lines.add(in.readInt())[ CD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_5 $$ if (data == null)[ CD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_3 $$ suite.restoreCoverageData()[ FD ]
Line_8 $$ final Map<String, Set<Integer>> executionTrace = new HashMap<String, Set<Integer>>()-->Line_44 $$ for (String className : executionTrace.keySet()) [ FD ]
Line_15 $$ DataInputStream in = null-->Line_35 $$ in.close()[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_80 $$ renewCoverageData(suite)[ FD ]
Line_64 $$ if (lineIdx < oldData.getLines().length) -->Line_65 $$ final LineData oldLineData = oldData.getLineData(lineIdx)[ CD ]
Line_44 $$ for (String className : executionTrace.keySet()) -->Line_45 $$ ClassData loadedClassData = projectData.getClassData(className)[ FD ]
Line_54 $$ int maxNumber = oldLines.length-->Line_57 $$ maxNumber = lineNumber + 1[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_8 $$ final Map<String, Set<Integer>> executionTrace = new HashMap<String, Set<Integer>>()[ CD ]
Line_43 $$ final ProjectData projectData = new ProjectData()-->Line_79 $$ suite.setCoverageData(projectData)[ FD ]
Line_22 $$ Set<Integer> lines = executionTrace.get(className)-->Line_24 $$ lines = new HashSet<Integer>()[ FD ]
Line_70 $$ final LineData lineData = new LineData(lineIdx, methodSig)-->Line_74 $$ lineData.setStatus(LineCoverage.FULL)[ FD ]
Line_10 $$ final String fileName = coverageSuite.getCoverageDataFileName()-->Line_11 $$ final File tracesDir = getTracesDirectory(fileName)[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_80 $$ renewCoverageData(suite)[ CD ]
Line_21 $$ final int linesSize = in.readInt()-->Line_27 $$ for (int l = 0; l < linesSize; l++) [ FD ]
Line_65 $$ final LineData oldLineData = oldData.getLineData(lineIdx)-->Line_67 $$ methodSig = oldLineData.getMethodSignature()[ FD ]
Line_65 $$ final LineData oldLineData = oldData.getLineData(lineIdx)-->Line_66 $$ if (oldLineData != null) [ FD ]
Line_15 $$ DataInputStream in = null-->Line_17 $$ in = new DataInputStream(new FileInputStream(file))[ FD ]
Line_45 $$ ClassData loadedClassData = projectData.getClassData(className)-->Line_47 $$ loadedClassData = projectData.getOrCreateClassData(className)[ FD ]
Line_22 $$ Set<Integer> lines = executionTrace.get(className)-->Line_25 $$ executionTrace.put(className, lines)[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_9 $$ for (CoverageSuite coverageSuite : suite.getSuites()) [ FD ]
Line_70 $$ final LineData lineData = new LineData(lineIdx, methodSig)-->Line_75 $$ lines[lineIdx] = lineData[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_43 $$ final ProjectData projectData = new ProjectData()[ CD ]
Line_24 $$ lines = new HashSet<Integer>()-->Line_28 $$ lines.add(in.readInt())[ FD ]
Line_4 $$ final ProjectData data = suite.getCoverageData()-->Line_50 $$ final ClassData oldData = data.getClassData(className)[ FD ]
Line_20 $$ final String className = in.readUTF()-->Line_45 $$ ClassData loadedClassData = projectData.getClassData(className)[ FD ]
Line_17 $$ in = new DataInputStream(new FileInputStream(file))-->Line_35 $$ in.close()[ FD ]
Line_15 $$ DataInputStream in = null-->Line_20 $$ final String className = in.readUTF()[ FD ]
Line_47 $$ loadedClassData = projectData.getOrCreateClassData(className)-->Line_72 $$ loadedClassData.registerMethodSignature(lineData)[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_79 $$ suite.setCoverageData(projectData)[ CD ]
Line_20 $$ final String className = in.readUTF()-->Line_50 $$ final ClassData oldData = data.getClassData(className)[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_79 $$ suite.setCoverageData(projectData)[ FD ]
Line_14 $$ if (file.exists()) -->Line_15 $$ DataInputStream in = null[ CD ]
Line_8 $$ final Map<String, Set<Integer>> executionTrace = new HashMap<String, Set<Integer>>()-->Line_25 $$ executionTrace.put(className, lines)[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_4 $$ final ProjectData data = suite.getCoverageData()[ CD ]
Line_63 $$ String methodSig = null-->Line_71 $$ if (methodSig != null) [ FD ]
Line_56 $$ if (lineNumber >= maxNumber) -->Line_57 $$ maxNumber = lineNumber + 1[ CD ]
Line_66 $$ if (oldLineData != null) -->Line_67 $$ methodSig = oldLineData.getMethodSignature()[ CD ]
Line_24 $$ lines = new HashSet<Integer>()-->Line_77 $$ loadedClassData.setLines(lines)[ FD ]
Line_8 $$ final Map<String, Set<Integer>> executionTrace = new HashMap<String, Set<Integer>>()-->Line_22 $$ Set<Integer> lines = executionTrace.get(className)[ FD ]
Line_15 $$ DataInputStream in = null-->Line_21 $$ final int linesSize = in.readInt()[ FD ]
Line_44 $$ for (String className : executionTrace.keySet()) -->Line_50 $$ final ClassData oldData = data.getClassData(className)[ FD ]
Line_17 $$ in = new DataInputStream(new FileInputStream(file))-->Line_18 $$ int traceSize = in.readInt()[ FD ]
Line_12 $$ for (String testName : testNames) -->Line_13 $$ final File file = new File(tracesDir, FileUtil.sanitizeFileName(testName) + ".tr")[ FD ]
Line_19 $$ for (int i = 0; i < traceSize; i++) -->Line_22 $$ Set<Integer> lines = executionTrace.get(className)[ CD ]
Line_15 $$ DataInputStream in = null-->Line_18 $$ int traceSize = in.readInt()[ FD ]
Line_8 $$ final Map<String, Set<Integer>> executionTrace = new HashMap<String, Set<Integer>>()-->Line_49 $$ final Set<Integer> lineNumbers = executionTrace.get(className)[ FD ]
Line_2 $$ public void selectSubCoverage(@NotNull final CoverageSuitesBundle suite, final List<String> testNames) -->Line_3 $$ suite.restoreCoverageData()[ CD ]
