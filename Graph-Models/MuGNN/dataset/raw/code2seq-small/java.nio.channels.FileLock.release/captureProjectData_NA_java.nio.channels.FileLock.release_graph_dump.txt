Line_5 $$ try (RandomAccessFile randomAccessFile = new RandomAccessFile(InstrumentationAgent.getLockFile(), "rw")) -->Line_6 $$ FileChannel fileChannel = randomAccessFile.getChannel()[ FD ]
Line_2 $$ public static ProjectData captureProjectData(boolean saveSessionData, boolean useDataFile) -->Line_3 $$ String className = ProjectDataUtil.class.getName()[ CD ]
Line_15 $$ if (useDataFile) -->Line_18 $$ _pipingBackProjectData(_projectData)[ CD ]
Line_10 $$ if (dataFile.exists()) -->Line_12 $$ dataFile.delete()[ CD ]
Line_10 $$ if (dataFile.exists()) -->Line_11 $$ _projectData.merge(_readProjectData(dataFile))[ CD ]
Line_15 $$ if (useDataFile) -->Line_16 $$ _writeProjectData(_projectData, dataFile)[ CD ]
Line_3 $$ String className = ProjectDataUtil.class.getName()-->Line_4 $$ synchronized (className.intern()) [ FD ]
Line_6 $$ FileChannel fileChannel = randomAccessFile.getChannel()-->Line_7 $$ FileLock fileLock = fileChannel.lock()[ FD ]
Line_14 $$ if (saveSessionData) -->Line_15 $$ if (useDataFile) [ CD ]
Line_9 $$ File dataFile = InstrumentationAgent.getDataFile()-->Line_11 $$ _projectData.merge(_readProjectData(dataFile))[ FD ]
Line_7 $$ FileLock fileLock = fileChannel.lock()-->Line_23 $$ fileLock.release()[ FD ]
Line_9 $$ File dataFile = InstrumentationAgent.getDataFile()-->Line_10 $$ if (dataFile.exists()) [ FD ]
Line_9 $$ File dataFile = InstrumentationAgent.getDataFile()-->Line_12 $$ dataFile.delete()[ FD ]
Line_9 $$ File dataFile = InstrumentationAgent.getDataFile()-->Line_16 $$ _writeProjectData(_projectData, dataFile)[ FD ]
