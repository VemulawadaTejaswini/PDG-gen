Line_14 $$ MiniJournalCluster cluster = new MiniJournalCluster.Builder(conf).build()-->Line_53 $$ cluster.shutdown()[ FD ]
Line_23 $$ QuorumJournalManager qjm = createRandomFaultyQJM(cluster, r)-->Line_27 $$ recovered = QJMTestUtil.recoverAndReturnLastTxn(qjm)[ FD ]
Line_27 $$ recovered = QJMTestUtil.recoverAndReturnLastTxn(qjm)-->Line_34 $$ txid = recovered + 1[ FD ]
Line_23 $$ QuorumJournalManager qjm = createRandomFaultyQJM(cluster, r)-->Line_40 $$ lastAcked = writeSegmentUntilCrash(cluster, qjm, txid, 4, thrown)[ FD ]
Line_3 $$ long seed-->Line_10 $$ seed = new Random().nextLong()[ FD ]
Line_34 $$ txid = recovered + 1-->Line_40 $$ lastAcked = writeSegmentUntilCrash(cluster, qjm, txid, 4, thrown)[ FD ]
Line_5 $$ if (userSpecifiedSeed != null) -->Line_6 $$ LOG.info("Using seed specified in system property")[ CD ]
Line_19 $$ long txid = 0-->Line_40 $$ lastAcked = writeSegmentUntilCrash(cluster, qjm, txid, 4, thrown)[ FD ]
Line_15 $$ QuorumJournalManager qjmForInitialFormat = createInjectableQJM(cluster)-->Line_16 $$ qjmForInitialFormat.format(FAKE_NSINFO)[ FD ]
Line_5 $$ if (userSpecifiedSeed != null) -->Line_8 $$ ((Log4JLogger) ProtobufRpcEngine.LOG).getLogger().setLevel(Level.ALL)[ CD ]
Line_5 $$ if (userSpecifiedSeed != null) -->Line_7 $$ seed = userSpecifiedSeed[ CD ]
Line_2 $$ public void testRandomized() throws Exception -->Line_5 $$ if (userSpecifiedSeed != null) [ CD ]
Line_3 $$ long seed-->Line_7 $$ seed = userSpecifiedSeed[ FD ]
Line_41 $$ if (thrown.held != null) -->Line_43 $$ checkException(thrown.held)[ CD ]
Line_46 $$ txid += 4-->Line_40 $$ lastAcked = writeSegmentUntilCrash(cluster, qjm, txid, 4, thrown)[ FD ]
Line_5 $$ if (userSpecifiedSeed != null) -->Line_10 $$ seed = new Random().nextLong()[ CD ]
Line_2 $$ public void testRandomized() throws Exception -->Line_3 $$ long seed[ CD ]
Line_4 $$ Long userSpecifiedSeed = Long.getLong(RAND_SEED_PROPERTY)-->Line_7 $$ seed = userSpecifiedSeed[ FD ]
Line_2 $$ public void testRandomized() throws Exception -->Line_14 $$ MiniJournalCluster cluster = new MiniJournalCluster.Builder(conf).build()[ CD ]
Line_14 $$ MiniJournalCluster cluster = new MiniJournalCluster.Builder(conf).build()-->Line_15 $$ QuorumJournalManager qjmForInitialFormat = createInjectableQJM(cluster)[ FD ]
Line_14 $$ MiniJournalCluster cluster = new MiniJournalCluster.Builder(conf).build()-->Line_23 $$ QuorumJournalManager qjm = createRandomFaultyQJM(cluster, r)[ FD ]
Line_19 $$ long txid = 0-->Line_34 $$ txid = recovered + 1[ FD ]
Line_34 $$ txid = recovered + 1-->Line_46 $$ txid += 4[ FD ]
Line_13 $$ Random r = new Random(seed)-->Line_23 $$ QuorumJournalManager qjm = createRandomFaultyQJM(cluster, r)[ FD ]
Line_25 $$ long recovered-->Line_34 $$ txid = recovered + 1[ FD ]
Line_2 $$ public void testRandomized() throws Exception -->Line_17 $$ qjmForInitialFormat.close()[ CD ]
Line_39 $$ for (int j = 0; j < SEGMENTS_PER_WRITER; j++) -->Line_41 $$ if (thrown.held != null) [ CD ]
Line_20 $$ long lastAcked = 0-->Line_40 $$ lastAcked = writeSegmentUntilCrash(cluster, qjm, txid, 4, thrown)[ FD ]
Line_2 $$ public void testRandomized() throws Exception -->Line_12 $$ LOG.info("Random seed: " + seed)[ CD ]
Line_2 $$ public void testRandomized() throws Exception -->Line_16 $$ qjmForInitialFormat.format(FAKE_NSINFO)[ CD ]
Line_19 $$ long txid = 0-->Line_46 $$ txid += 4[ FD ]
Line_21 $$ for (int i = 0; i < NUM_WRITER_ITERS; i++) -->Line_22 $$ LOG.info("Starting writer " + i + "\n-------------------")[ CD ]
Line_25 $$ long recovered-->Line_27 $$ recovered = QJMTestUtil.recoverAndReturnLastTxn(qjm)[ FD ]
Line_14 $$ MiniJournalCluster cluster = new MiniJournalCluster.Builder(conf).build()-->Line_40 $$ lastAcked = writeSegmentUntilCrash(cluster, qjm, txid, 4, thrown)[ FD ]
Line_2 $$ public void testRandomized() throws Exception -->Line_15 $$ QuorumJournalManager qjmForInitialFormat = createInjectableQJM(cluster)[ CD ]
Line_15 $$ QuorumJournalManager qjmForInitialFormat = createInjectableQJM(cluster)-->Line_17 $$ qjmForInitialFormat.close()[ FD ]
Line_23 $$ QuorumJournalManager qjm = createRandomFaultyQJM(cluster, r)-->Line_36 $$ qjm.purgeLogsOlderThan(txid - 100)[ FD ]
Line_2 $$ public void testRandomized() throws Exception -->Line_4 $$ Long userSpecifiedSeed = Long.getLong(RAND_SEED_PROPERTY)[ CD ]
Line_38 $$ Holder<Throwable> thrown = new Holder<Throwable>(null)-->Line_40 $$ lastAcked = writeSegmentUntilCrash(cluster, qjm, txid, 4, thrown)[ FD ]
Line_41 $$ if (thrown.held != null) -->Line_42 $$ LOG.info("Failed write", thrown.held)[ CD ]
Line_21 $$ for (int i = 0; i < NUM_WRITER_ITERS; i++) -->Line_23 $$ QuorumJournalManager qjm = createRandomFaultyQJM(cluster, r)[ CD ]
Line_39 $$ for (int j = 0; j < SEGMENTS_PER_WRITER; j++) -->Line_46 $$ txid += 4[ CD ]
Line_2 $$ public void testRandomized() throws Exception -->Line_13 $$ Random r = new Random(seed)[ CD ]
Line_39 $$ for (int j = 0; j < SEGMENTS_PER_WRITER; j++) -->Line_40 $$ lastAcked = writeSegmentUntilCrash(cluster, qjm, txid, 4, thrown)[ CD ]
Line_23 $$ QuorumJournalManager qjm = createRandomFaultyQJM(cluster, r)-->Line_49 $$ qjm.close()[ FD ]
Line_35 $$ if (txid > 100 && i % 10 == 1) -->Line_36 $$ qjm.purgeLogsOlderThan(txid - 100)[ CD ]
Line_7 $$ seed = userSpecifiedSeed-->Line_10 $$ seed = new Random().nextLong()[ FD ]
Line_4 $$ Long userSpecifiedSeed = Long.getLong(RAND_SEED_PROPERTY)-->Line_5 $$ if (userSpecifiedSeed != null) [ FD ]
