Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_7 $$ ClassLoader antClassLoader = classLoaderFactory.createIsolatedClassLoader(antClasspath)[ CD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_13 $$ mainMethod.invoke(entryPoint, new Object[] [ CD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_6 $$ ClassPath runtimeClasspath = classPathRegistry.getClassPath("GRADLE_RUNTIME")[ CD ]
Line_3 $$ ClassPathRegistry classPathRegistry = new DefaultClassPathRegistry(new DefaultClassPathProvider(new DefaultModuleRegistry()))-->Line_5 $$ ClassPath antClasspath = classPathRegistry.getClassPath("ANT")[ FD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_12 $$ Method mainMethod = mainClass.getMethod("run", String[].class)[ CD ]
Line_3 $$ ClassPathRegistry classPathRegistry = new DefaultClassPathRegistry(new DefaultClassPathProvider(new DefaultModuleRegistry()))-->Line_6 $$ ClassPath runtimeClasspath = classPathRegistry.getClassPath("GRADLE_RUNTIME")[ FD ]
Line_10 $$ Class<?> mainClass = runtimeClassLoader.loadClass(mainClassName)-->Line_11 $$ Object entryPoint = mainClass.newInstance()[ FD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_5 $$ ClassPath antClasspath = classPathRegistry.getClassPath("ANT")[ CD ]
Line_8 $$ ClassLoader runtimeClassLoader = new MutableURLClassLoader(antClassLoader, runtimeClasspath)-->Line_9 $$ Thread.currentThread().setContextClassLoader(runtimeClassLoader)[ FD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_3 $$ ClassPathRegistry classPathRegistry = new DefaultClassPathRegistry(new DefaultClassPathProvider(new DefaultModuleRegistry()))[ CD ]
Line_8 $$ ClassLoader runtimeClassLoader = new MutableURLClassLoader(antClassLoader, runtimeClasspath)-->Line_10 $$ Class<?> mainClass = runtimeClassLoader.loadClass(mainClassName)[ FD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_10 $$ Class<?> mainClass = runtimeClassLoader.loadClass(mainClassName)[ CD ]
Line_11 $$ Object entryPoint = mainClass.newInstance()-->Line_13 $$ mainMethod.invoke(entryPoint, new Object[] [ FD ]
Line_12 $$ Method mainMethod = mainClass.getMethod("run", String[].class)-->Line_13 $$ mainMethod.invoke(entryPoint, new Object[] [ FD ]
Line_5 $$ ClassPath antClasspath = classPathRegistry.getClassPath("ANT")-->Line_7 $$ ClassLoader antClassLoader = classLoaderFactory.createIsolatedClassLoader(antClasspath)[ FD ]
Line_4 $$ ClassLoaderFactory classLoaderFactory = new DefaultClassLoaderFactory()-->Line_7 $$ ClassLoader antClassLoader = classLoaderFactory.createIsolatedClassLoader(antClasspath)[ FD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_9 $$ Thread.currentThread().setContextClassLoader(runtimeClassLoader)[ CD ]
Line_10 $$ Class<?> mainClass = runtimeClassLoader.loadClass(mainClassName)-->Line_12 $$ Method mainMethod = mainClass.getMethod("run", String[].class)[ FD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_4 $$ ClassLoaderFactory classLoaderFactory = new DefaultClassLoaderFactory()[ CD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_10 $$ Class<?> mainClass = runtimeClassLoader.loadClass(mainClassName)[ FD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_8 $$ ClassLoader runtimeClassLoader = new MutableURLClassLoader(antClassLoader, runtimeClasspath)[ CD ]
Line_2 $$ private void runNoExit(String mainClassName, String[] args) throws Exception -->Line_11 $$ Object entryPoint = mainClass.newInstance()[ CD ]
