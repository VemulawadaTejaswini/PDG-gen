Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_27 $$ if (line.hasOption("files")) [ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_54 $$ conf.set("mapreduce.job.credentials.json", p.toString(), "from -tokenCacheFile command line option")[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_44 $$ String fileName = line.getOptionValue("tokenCacheFile")[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_53 $$ UserGroupInformation.getCurrentUser().addCredentials(Credentials.readTokenStorageFile(p, conf))[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_20 $$ conf.set("tmpjars", validateFiles(line.getOptionValue("libjars"), conf), "from -libjars command line option")[ FD ]
Line_50 $$ if (LOG.isDebugEnabled()) -->Line_51 $$ LOG.debug("setting conf tokensFile: " + fileName)[ CD ]
Line_19 $$ if (line.hasOption("libjars")) -->Line_21 $$ URL[] libjars = getLibJars(conf)[ CD ]
Line_3 $$ if (line.hasOption("fs")) -->Line_4 $$ FileSystem.setDefaultUri(conf, line.getOptionValue("fs"))[ CD ]
Line_6 $$ if (line.hasOption("jt")) -->Line_8 $$ if (optionValue.equalsIgnoreCase("local")) [ CD ]
Line_22 $$ if (libjars != null && libjars.length > 0) -->Line_23 $$ conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()))[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_13 $$ if (line.hasOption("conf")) [ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_30 $$ if (line.hasOption("archives")) [ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_33 $$ if (line.hasOption('D')) [ FD ]
Line_33 $$ if (line.hasOption('D')) -->Line_34 $$ String[] property = line.getOptionValues('D')[ CD ]
Line_27 $$ if (line.hasOption("files")) -->Line_28 $$ conf.set("tmpfiles", validateFiles(line.getOptionValue("files"), conf), "from -files command line option")[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_42 $$ conf.setBoolean("mapreduce.client.genericoptionsparser.used", true)[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_28 $$ conf.set("tmpfiles", validateFiles(line.getOptionValue("files"), conf), "from -files command line option")[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_43 $$ if (line.hasOption("tokenCacheFile")) [ CD ]
Line_46 $$ Path p = localFs.makeQualified(new Path(fileName))-->Line_54 $$ conf.set("mapreduce.job.credentials.json", p.toString(), "from -tokenCacheFile command line option")[ FD ]
Line_7 $$ String optionValue = line.getOptionValue("jt")-->Line_11 $$ conf.set("yarn.resourcemanager.address", optionValue, "from -jt command line option")[ FD ]
Line_6 $$ if (line.hasOption("jt")) -->Line_11 $$ conf.set("yarn.resourcemanager.address", optionValue, "from -jt command line option")[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_38 $$ conf.set(keyval[0], keyval[1], "from command line")[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_6 $$ if (line.hasOption("jt")) [ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_19 $$ if (line.hasOption("libjars")) [ CD ]
Line_6 $$ if (line.hasOption("jt")) -->Line_7 $$ String optionValue = line.getOptionValue("jt")[ CD ]
Line_43 $$ if (line.hasOption("tokenCacheFile")) -->Line_45 $$ FileSystem localFs = FileSystem.getLocal(conf)[ CD ]
Line_8 $$ if (optionValue.equalsIgnoreCase("local")) -->Line_9 $$ conf.set("mapreduce.framework.name", optionValue)[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_4 $$ FileSystem.setDefaultUri(conf, line.getOptionValue("fs"))[ FD ]
Line_30 $$ if (line.hasOption("archives")) -->Line_31 $$ conf.set("tmparchives", validateFiles(line.getOptionValue("archives"), conf), "from -archives command line option")[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_34 $$ String[] property = line.getOptionValues('D')[ FD ]
Line_43 $$ if (line.hasOption("tokenCacheFile")) -->Line_44 $$ String fileName = line.getOptionValue("tokenCacheFile")[ CD ]
Line_37 $$ if (keyval.length == 2) -->Line_38 $$ conf.set(keyval[0], keyval[1], "from command line")[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_11 $$ conf.set("yarn.resourcemanager.address", optionValue, "from -jt command line option")[ FD ]
Line_22 $$ if (libjars != null && libjars.length > 0) -->Line_24 $$ Thread.currentThread().setContextClassLoader(new URLClassLoader(libjars, Thread.currentThread().getContextClassLoader()))[ CD ]
Line_43 $$ if (line.hasOption("tokenCacheFile")) -->Line_47 $$ if (!localFs.exists(p)) [ CD ]
Line_45 $$ FileSystem localFs = FileSystem.getLocal(conf)-->Line_47 $$ if (!localFs.exists(p)) [ FD ]
Line_45 $$ FileSystem localFs = FileSystem.getLocal(conf)-->Line_46 $$ Path p = localFs.makeQualified(new Path(fileName))[ FD ]
Line_43 $$ if (line.hasOption("tokenCacheFile")) -->Line_53 $$ UserGroupInformation.getCurrentUser().addCredentials(Credentials.readTokenStorageFile(p, conf))[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_3 $$ if (line.hasOption("fs")) [ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_16 $$ conf.addResource(new Path(value))[ FD ]
Line_13 $$ if (line.hasOption("conf")) -->Line_14 $$ String[] values = line.getOptionValues("conf")[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_45 $$ FileSystem localFs = FileSystem.getLocal(conf)[ FD ]
Line_35 $$ for (String prop : property) -->Line_36 $$ String[] keyval = prop.split("=", 2)[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_42 $$ conf.setBoolean("mapreduce.client.genericoptionsparser.used", true)[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_30 $$ if (line.hasOption("archives")) [ CD ]
Line_7 $$ String optionValue = line.getOptionValue("jt")-->Line_8 $$ if (optionValue.equalsIgnoreCase("local")) [ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_21 $$ URL[] libjars = getLibJars(conf)[ FD ]
Line_46 $$ Path p = localFs.makeQualified(new Path(fileName))-->Line_53 $$ UserGroupInformation.getCurrentUser().addCredentials(Credentials.readTokenStorageFile(p, conf))[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_27 $$ if (line.hasOption("files")) [ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_31 $$ conf.set("tmparchives", validateFiles(line.getOptionValue("archives"), conf), "from -archives command line option")[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_7 $$ String optionValue = line.getOptionValue("jt")[ FD ]
Line_7 $$ String optionValue = line.getOptionValue("jt")-->Line_9 $$ conf.set("mapreduce.framework.name", optionValue)[ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_3 $$ if (line.hasOption("fs")) [ FD ]
Line_43 $$ if (line.hasOption("tokenCacheFile")) -->Line_46 $$ Path p = localFs.makeQualified(new Path(fileName))[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_6 $$ if (line.hasOption("jt")) [ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_9 $$ conf.set("mapreduce.framework.name", optionValue)[ FD ]
Line_43 $$ if (line.hasOption("tokenCacheFile")) -->Line_50 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_13 $$ if (line.hasOption("conf")) [ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_33 $$ if (line.hasOption('D')) [ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_23 $$ conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()))[ FD ]
Line_43 $$ if (line.hasOption("tokenCacheFile")) -->Line_54 $$ conf.set("mapreduce.job.credentials.json", p.toString(), "from -tokenCacheFile command line option")[ CD ]
Line_19 $$ if (line.hasOption("libjars")) -->Line_22 $$ if (libjars != null && libjars.length > 0) [ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_43 $$ if (line.hasOption("tokenCacheFile")) [ FD ]
Line_19 $$ if (line.hasOption("libjars")) -->Line_20 $$ conf.set("tmpjars", validateFiles(line.getOptionValue("libjars"), conf), "from -libjars command line option")[ CD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_14 $$ String[] values = line.getOptionValues("conf")[ FD ]
Line_46 $$ Path p = localFs.makeQualified(new Path(fileName))-->Line_47 $$ if (!localFs.exists(p)) [ FD ]
Line_2 $$ private void processGeneralOptions(Configuration conf, CommandLine line) throws IOException -->Line_19 $$ if (line.hasOption("libjars")) [ FD ]
