Line_16 $$ for (MavenProject project : projects) -->Line_17 $$ ClassLoader projectRealm = project.getClassRealm()[ FD ]
Line_7 $$ ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader()-->Line_29 $$ Thread.currentThread().setContextClassLoader(originalClassLoader)[ FD ]
Line_18 $$ if (projectRealm != null && scannedRealms.add(projectRealm)) -->Line_19 $$ Thread.currentThread().setContextClassLoader(projectRealm)[ CD ]
Line_17 $$ ClassLoader projectRealm = project.getClassRealm()-->Line_19 $$ Thread.currentThread().setContextClassLoader(projectRealm)[ FD ]
Line_15 $$ Collection<ClassLoader> scannedRealms = new HashSet<ClassLoader>()-->Line_18 $$ if (projectRealm != null && scannedRealms.add(projectRealm)) [ FD ]
Line_17 $$ ClassLoader projectRealm = project.getClassRealm()-->Line_18 $$ if (projectRealm != null && scannedRealms.add(projectRealm)) [ FD ]
Line_6 $$ Collection<AbstractMavenLifecycleParticipant> lifecycleListeners = new LinkedHashSet<AbstractMavenLifecycleParticipant>()-->Line_21 $$ lifecycleListeners.addAll(myContainer.lookupList(AbstractMavenLifecycleParticipant.class))[ FD ]
Line_6 $$ Collection<AbstractMavenLifecycleParticipant> lifecycleListeners = new LinkedHashSet<AbstractMavenLifecycleParticipant>()-->Line_10 $$ lifecycleListeners.addAll(myContainer.lookupList(AbstractMavenLifecycleParticipant.class))[ FD ]
