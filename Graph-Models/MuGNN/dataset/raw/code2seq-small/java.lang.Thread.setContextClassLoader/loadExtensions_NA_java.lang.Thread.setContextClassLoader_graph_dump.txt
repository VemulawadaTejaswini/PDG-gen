Line_5 $$ if (!lifecycleParticipants.isEmpty()) -->Line_9 $$ session.setProjects(Arrays.asList(project))[ CD ]
Line_2 $$ private void loadExtensions(MavenProject project, List<Exception> exceptions) -->Line_8 $$ session.setCurrentProject(project)[ FD ]
Line_2 $$ private void loadExtensions(MavenProject project, List<Exception> exceptions) -->Line_3 $$ ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_3 $$ ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader()-->Line_17 $$ Thread.currentThread().setContextClassLoader(originalClassLoader)[ FD ]
Line_2 $$ private void loadExtensions(MavenProject project, List<Exception> exceptions) -->Line_5 $$ if (!lifecycleParticipants.isEmpty()) [ CD ]
Line_2 $$ private void loadExtensions(MavenProject project, List<Exception> exceptions) -->Line_9 $$ session.setProjects(Arrays.asList(project))[ FD ]
Line_4 $$ Collection<AbstractMavenLifecycleParticipant> lifecycleParticipants = getLifecycleParticipants(Arrays.asList(project))-->Line_5 $$ if (!lifecycleParticipants.isEmpty()) [ FD ]
Line_2 $$ private void loadExtensions(MavenProject project, List<Exception> exceptions) -->Line_4 $$ Collection<AbstractMavenLifecycleParticipant> lifecycleParticipants = getLifecycleParticipants(Arrays.asList(project))[ FD ]
Line_2 $$ private void loadExtensions(MavenProject project, List<Exception> exceptions) -->Line_15 $$ exceptions.add(e)[ FD ]
Line_10 $$ for (AbstractMavenLifecycleParticipant listener : lifecycleParticipants) -->Line_13 $$ listener.afterProjectsRead(session)[ FD ]
Line_5 $$ if (!lifecycleParticipants.isEmpty()) -->Line_8 $$ session.setCurrentProject(project)[ CD ]
Line_2 $$ private void loadExtensions(MavenProject project, List<Exception> exceptions) -->Line_4 $$ Collection<AbstractMavenLifecycleParticipant> lifecycleParticipants = getLifecycleParticipants(Arrays.asList(project))[ CD ]
Line_7 $$ MavenSession session = legacySupport.getSession()-->Line_13 $$ listener.afterProjectsRead(session)[ FD ]
Line_5 $$ if (!lifecycleParticipants.isEmpty()) -->Line_6 $$ LegacySupport legacySupport = getComponent(LegacySupport.class)[ CD ]
Line_7 $$ MavenSession session = legacySupport.getSession()-->Line_9 $$ session.setProjects(Arrays.asList(project))[ FD ]
Line_5 $$ if (!lifecycleParticipants.isEmpty()) -->Line_7 $$ MavenSession session = legacySupport.getSession()[ CD ]
Line_7 $$ MavenSession session = legacySupport.getSession()-->Line_8 $$ session.setCurrentProject(project)[ FD ]
Line_10 $$ for (AbstractMavenLifecycleParticipant listener : lifecycleParticipants) -->Line_11 $$ Thread.currentThread().setContextClassLoader(listener.getClass().getClassLoader())[ FD ]
Line_6 $$ LegacySupport legacySupport = getComponent(LegacySupport.class)-->Line_7 $$ MavenSession session = legacySupport.getSession()[ FD ]
