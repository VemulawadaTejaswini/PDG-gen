Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_4 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ CD ]
Line_28 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)-->Line_46 $$ annotatedEndpoints.add(moduleClass)[ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_44 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)[ FD ]
Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()-->Line_63 $$ UndertowLogger.ROOT_LOGGER.couldNotLoadWebSocketConfig(clazz.name().toString(), e)[ FD ]
Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()-->Line_71 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_5 $$ if (module == null) [ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_11 $$ WarMetaData metaData = deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY)[ FD ]
Line_24 $$ for (AnnotationInstance endpoint : serverEndpoints) -->Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()[ FD ]
Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()-->Line_44 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)[ FD ]
Line_54 $$ final Set<ClassInfo> subclasses = index.getAllKnownImplementors(SERVER_APPLICATION_CONFIG)-->Line_55 $$ if (subclasses != null) [ FD ]
Line_38 $$ final List<AnnotationInstance> clientEndpoints = index.getAnnotations(CLIENT_ENDPOINT)-->Line_39 $$ if (clientEndpoints != null) [ FD ]
Line_18 $$ final Set<Class<?>> annotatedEndpoints = new HashSet()-->Line_81 $$ doDeployment(deploymentUnit, webSocketDeploymentInfo, annotatedEndpoints, config, endpoints)[ FD ]
Line_18 $$ final Set<Class<?>> annotatedEndpoints = new HashSet()-->Line_30 $$ annotatedEndpoints.add(moduleClass)[ FD ]
Line_21 $$ final CompositeIndex index = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX)-->Line_67 $$ final Set<ClassInfo> epClasses = index.getAllKnownSubclasses(ENDPOINT)[ FD ]
Line_59 $$ if (!Modifier.isAbstract(moduleClass.getModifiers())) -->Line_60 $$ config.add((Class) moduleClass)[ CD ]
Line_8 $$ ClassLoader oldCl = Thread.currentThread().getContextClassLoader()-->Line_84 $$ Thread.currentThread().setContextClassLoader(oldCl)[ FD ]
Line_29 $$ if (!Modifier.isAbstract(moduleClass.getModifiers())) -->Line_30 $$ annotatedEndpoints.add(moduleClass)[ CD ]
Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()-->Line_49 $$ UndertowLogger.ROOT_LOGGER.couldNotLoadWebSocketEndpoint(clazz.name().toString(), e)[ FD ]
Line_19 $$ final Set<Class<? extends Endpoint>> endpoints = new HashSet()-->Line_73 $$ endpoints.add((Class) moduleClass)[ FD ]
Line_12 $$ if (metaData == null || metaData.getMergedJBossWebMetaData() == null) -->Line_13 $$ return[ CD ]
Line_28 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)-->Line_30 $$ annotatedEndpoints.add(moduleClass)[ FD ]
Line_20 $$ final Set<Class<? extends ServerApplicationConfig>> config = new HashSet()-->Line_81 $$ doDeployment(deploymentUnit, webSocketDeploymentInfo, annotatedEndpoints, config, endpoints)[ FD ]
Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()-->Line_58 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)[ FD ]
Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()-->Line_28 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)[ FD ]
Line_28 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)-->Line_45 $$ if (!Modifier.isAbstract(moduleClass.getModifiers())) [ FD ]
Line_45 $$ if (!Modifier.isAbstract(moduleClass.getModifiers())) -->Line_46 $$ annotatedEndpoints.add(moduleClass)[ CD ]
Line_25 $$ if (endpoint.target() instanceof ClassInfo) -->Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()[ CD ]
Line_72 $$ if (!Modifier.isAbstract(moduleClass.getModifiers())) -->Line_73 $$ endpoints.add((Class) moduleClass)[ CD ]
Line_19 $$ final Set<Class<? extends Endpoint>> endpoints = new HashSet()-->Line_81 $$ doDeployment(deploymentUnit, webSocketDeploymentInfo, annotatedEndpoints, config, endpoints)[ FD ]
Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()-->Line_76 $$ UndertowLogger.ROOT_LOGGER.couldNotLoadWebSocketConfig(clazz.name().toString(), e)[ FD ]
Line_11 $$ WarMetaData metaData = deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY)-->Line_12 $$ if (metaData == null || metaData.getMergedJBossWebMetaData() == null) [ FD ]
Line_18 $$ final Set<Class<?>> annotatedEndpoints = new HashSet()-->Line_46 $$ annotatedEndpoints.add(moduleClass)[ FD ]
Line_67 $$ final Set<ClassInfo> epClasses = index.getAllKnownSubclasses(ENDPOINT)-->Line_68 $$ if (epClasses != null) [ FD ]
Line_28 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)-->Line_59 $$ if (!Modifier.isAbstract(moduleClass.getModifiers())) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_82 $$ installWebsockets(phaseContext, webSocketDeploymentInfo)[ FD ]
Line_22 $$ final List<AnnotationInstance> serverEndpoints = index.getAnnotations(SERVER_ENDPOINT)-->Line_23 $$ if (serverEndpoints != null) [ FD ]
Line_15 $$ if (!metaData.getMergedJBossWebMetaData().isEnableWebSockets()) -->Line_16 $$ return[ CD ]
Line_28 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)-->Line_29 $$ if (!Modifier.isAbstract(moduleClass.getModifiers())) [ FD ]
Line_28 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)-->Line_72 $$ if (!Modifier.isAbstract(moduleClass.getModifiers())) [ FD ]
Line_24 $$ for (AnnotationInstance endpoint : serverEndpoints) -->Line_41 $$ if (endpoint.target() instanceof ClassInfo) [ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_71 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)[ FD ]
Line_24 $$ for (AnnotationInstance endpoint : serverEndpoints) -->Line_25 $$ if (endpoint.target() instanceof ClassInfo) [ FD ]
Line_5 $$ if (module == null) -->Line_6 $$ return[ CD ]
Line_21 $$ final CompositeIndex index = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX)-->Line_22 $$ final List<AnnotationInstance> serverEndpoints = index.getAnnotations(SERVER_ENDPOINT)[ FD ]
Line_21 $$ final CompositeIndex index = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX)-->Line_54 $$ final Set<ClassInfo> subclasses = index.getAllKnownImplementors(SERVER_APPLICATION_CONFIG)[ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_5 $$ if (module == null) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_8 $$ ClassLoader oldCl = Thread.currentThread().getContextClassLoader()[ CD ]
Line_24 $$ for (AnnotationInstance endpoint : serverEndpoints) -->Line_42 $$ ClassInfo clazz = (ClassInfo) endpoint.target()[ FD ]
Line_20 $$ final Set<Class<? extends ServerApplicationConfig>> config = new HashSet()-->Line_60 $$ config.add((Class) moduleClass)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_81 $$ doDeployment(deploymentUnit, webSocketDeploymentInfo, annotatedEndpoints, config, endpoints)[ FD ]
Line_21 $$ final CompositeIndex index = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX)-->Line_38 $$ final List<AnnotationInstance> clientEndpoints = index.getAnnotations(CLIENT_ENDPOINT)[ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_28 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)[ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_10 $$ Thread.currentThread().setContextClassLoader(module.getClassLoader())[ FD ]
Line_26 $$ ClassInfo clazz = (ClassInfo) endpoint.target()-->Line_33 $$ UndertowLogger.ROOT_LOGGER.couldNotLoadWebSocketEndpoint(clazz.name().toString(), e)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_58 $$ Class<?> moduleClass = ClassLoadingUtils.loadClass(clazz.name().toString(), module)[ FD ]
Line_11 $$ WarMetaData metaData = deploymentUnit.getAttachment(WarMetaData.ATTACHMENT_KEY)-->Line_15 $$ if (!metaData.getMergedJBossWebMetaData().isEnableWebSockets()) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_21 $$ final CompositeIndex index = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_4 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ FD ]
Line_80 $$ WebSocketDeploymentInfo webSocketDeploymentInfo = new WebSocketDeploymentInfo()-->Line_82 $$ installWebsockets(phaseContext, webSocketDeploymentInfo)[ FD ]
Line_80 $$ WebSocketDeploymentInfo webSocketDeploymentInfo = new WebSocketDeploymentInfo()-->Line_81 $$ doDeployment(deploymentUnit, webSocketDeploymentInfo, annotatedEndpoints, config, endpoints)[ FD ]
