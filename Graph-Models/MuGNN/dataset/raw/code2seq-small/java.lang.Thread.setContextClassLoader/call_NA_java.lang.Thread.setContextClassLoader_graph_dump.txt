Line_13 $$ WeavingClassLoader weavingClassLoader = new WeavingClassLoader(ClassPathUtil.getClassPathURLs(ClassPathUtil.getJVMClassPath(true)), aspectClasses, _dumpDir)-->Line_14 $$ currentThread.setContextClassLoader(weavingClassLoader)[ FD ]
Line_13 $$ WeavingClassLoader weavingClassLoader = new WeavingClassLoader(ClassPathUtil.getClassPathURLs(ClassPathUtil.getJVMClassPath(true)), aspectClasses, _dumpDir)-->Line_15 $$ return ReflectionTestUtil.invoke(SerializableUtil.deserialize(_encodedProcessCallable, weavingClassLoader), "call", new Class<?>[0])[ FD ]
Line_8 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()-->Line_19 $$ currentThread.setContextClassLoader(contextClassLoader)[ FD ]
Line_8 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()-->Line_11 $$ aspectClasses[i] = contextClassLoader.loadClass(aspectClassNames[i])[ FD ]
Line_7 $$ Thread currentThread = Thread.currentThread()-->Line_19 $$ currentThread.setContextClassLoader(contextClassLoader)[ FD ]
Line_7 $$ Thread currentThread = Thread.currentThread()-->Line_8 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()[ FD ]
Line_7 $$ Thread currentThread = Thread.currentThread()-->Line_14 $$ currentThread.setContextClassLoader(weavingClassLoader)[ FD ]
Line_10 $$ for (int i = 0; i < aspectClassNames.length; i++) -->Line_11 $$ aspectClasses[i] = contextClassLoader.loadClass(aspectClassNames[i])[ CD ]
