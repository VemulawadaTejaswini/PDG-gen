Line_2 $$ protected File compress(File orig, IWrapCompression wrapper) throws IOException --> Line_3 $$ File compressed = File.createTempFile("test.", ".gz") [CD]
Line_2 $$ protected File compress(File orig, IWrapCompression wrapper) throws IOException --> Line_4 $$ FileOutputStream fos = new FileOutputStream(compressed) [CD]
Line_2 $$ protected File compress(File orig, IWrapCompression wrapper) throws IOException --> Line_5 $$ OutputStream wos = wrapper.wrap(fos) [CD]
Line_2 $$ protected File compress(File orig, IWrapCompression wrapper) throws IOException --> Line_5 $$ OutputStream wos = wrapper.wrap(fos) [FD]
Line_4 $$ FileOutputStream fos = new FileOutputStream(compressed) --> Line_5 $$ OutputStream wos = wrapper.wrap(fos) [FD]
Line_2 $$ protected File compress(File orig, IWrapCompression wrapper) throws IOException --> Line_6 $$ FileInputStream fis = new FileInputStream(orig) [CD]
Line_2 $$ protected File compress(File orig, IWrapCompression wrapper) throws IOException --> Line_7 $$ IOUtils.copy(fis, wos) [CD]
Line_6 $$ FileInputStream fis = new FileInputStream(orig) --> Line_7 $$ IOUtils.copy(fis, wos) [FD]
Line_5 $$ OutputStream wos = wrapper.wrap(fos) --> Line_7 $$ IOUtils.copy(fis, wos) [FD]
Line_2 $$ protected File compress(File orig, IWrapCompression wrapper) throws IOException --> Line_8 $$ IOUtils.closeQuietly(fis) [CD]
Line_6 $$ FileInputStream fis = new FileInputStream(orig) --> Line_8 $$ IOUtils.closeQuietly(fis) [FD]
Line_2 $$ protected File compress(File orig, IWrapCompression wrapper) throws IOException --> Line_9 $$ IOUtils.closeQuietly(wos) [CD]
Line_5 $$ OutputStream wos = wrapper.wrap(fos) --> Line_9 $$ IOUtils.closeQuietly(wos) [FD]
Line_2 $$ protected File compress(File orig, IWrapCompression wrapper) throws IOException --> Line_10 $$ return compressed [CD]
