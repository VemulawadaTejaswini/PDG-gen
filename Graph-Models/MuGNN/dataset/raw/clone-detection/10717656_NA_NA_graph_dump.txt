Line_2 $$ public void run() --> Line_3 $$ StringBuffer xml [CD]
Line_2 $$ public void run() --> Line_4 $$ String tabName [CD]
Line_2 $$ public void run() --> Line_5 $$ Element guiElement [CD]
Line_2 $$ public void run() --> Line_6 $$ setBold(monitor.getReading()) [CD]
Line_2 $$ public void run() --> Line_7 $$ setBold(monitor.getReadingStatus()) [CD]
Line_2 $$ public void run() --> Line_8 $$ monitor.getReadingStatus().setText("      Working") [CD]
Line_2 $$ public void run() --> Line_9 $$ HttpMethod method = null [CD]
Line_2 $$ public void run() --> Line_10 $$ xml = new StringBuffer() [CD]
Line_3 $$ StringBuffer xml --> Line_10 $$ xml = new StringBuffer() [FD]
Line_2 $$ public void run() --> Line_11 $$ File tempfile = new File(url) [CD]
Line_2 $$ public void run() --> Line_12 $$ if (tempfile.exists()) [CD]
Line_11 $$ File tempfile = new File(url) --> Line_12 $$ if (tempfile.exists()) [FD]
Line_15 $$ int temp --> Line_16 $$ while ((temp = in.read()) != -1) [FD]
Line_14 $$ InputStream in = new FileInputStream(tempfile) --> Line_16 $$ while ((temp = in.read()) != -1) [FD]
Line_16 $$ while ((temp = in.read()) != -1) --> Line_17 $$ xml.append((char) temp) [CD]
Line_3 $$ StringBuffer xml --> Line_17 $$ xml.append((char) temp) [FD]
Line_10 $$ xml = new StringBuffer() --> Line_17 $$ xml.append((char) temp) [FD]
Line_14 $$ InputStream in = new FileInputStream(tempfile) --> Line_19 $$ in.close() [FD]
Line_9 $$ HttpMethod method = null --> Line_28 $$ method = new GetMethod(url) [FD]
Line_27 $$ HttpClient client = new HttpClient() --> Line_29 $$ int response = client.executeMethod(method) [FD]
Line_9 $$ HttpMethod method = null --> Line_29 $$ int response = client.executeMethod(method) [FD]
Line_28 $$ method = new GetMethod(url) --> Line_29 $$ int response = client.executeMethod(method) [FD]
Line_29 $$ int response = client.executeMethod(method) --> Line_30 $$ if (response == 200) [FD]
Line_30 $$ if (response == 200) --> Line_31 $$ InputStream in = method.getResponseBodyAsStream() [CD]
Line_9 $$ HttpMethod method = null --> Line_31 $$ InputStream in = method.getResponseBodyAsStream() [FD]
Line_28 $$ method = new GetMethod(url) --> Line_31 $$ InputStream in = method.getResponseBodyAsStream() [FD]
Line_30 $$ if (response == 200) --> Line_33 $$ while ((temp = in.read()) != -1) [CD]
Line_16 $$ while ((temp = in.read()) != -1) --> Line_33 $$ while ((temp = in.read()) != -1) [FD]
Line_15 $$ int temp --> Line_33 $$ while ((temp = in.read()) != -1) [FD]
Line_14 $$ InputStream in = new FileInputStream(tempfile) --> Line_33 $$ while ((temp = in.read()) != -1) [FD]
Line_33 $$ while ((temp = in.read()) != -1) --> Line_34 $$ xml.append((char) temp) [CD]
Line_3 $$ StringBuffer xml --> Line_34 $$ xml.append((char) temp) [FD]
Line_10 $$ xml = new StringBuffer() --> Line_34 $$ xml.append((char) temp) [FD]
Line_30 $$ if (response == 200) --> Line_36 $$ in.close() [CD]
Line_14 $$ InputStream in = new FileInputStream(tempfile) --> Line_36 $$ in.close() [FD]
Line_30 $$ if (response == 200) --> Line_38 $$ if (method != null) [CD]
Line_9 $$ HttpMethod method = null --> Line_38 $$ if (method != null) [FD]
Line_28 $$ method = new GetMethod(url) --> Line_38 $$ if (method != null) [FD]
Line_38 $$ if (method != null) --> Line_39 $$ method.releaseConnection() [CD]
Line_9 $$ HttpMethod method = null --> Line_39 $$ method.releaseConnection() [FD]
Line_28 $$ method = new GetMethod(url) --> Line_39 $$ method.releaseConnection() [FD]
Line_30 $$ if (response == 200) --> Line_41 $$ System.out.println("Loading Monitor Failed. Incorrect response from HTTP Server " + response) [CD]
Line_30 $$ if (response == 200) --> Line_42 $$ return [CD]
Line_9 $$ HttpMethod method = null --> Line_45 $$ if (method != null) [FD]
Line_28 $$ method = new GetMethod(url) --> Line_45 $$ if (method != null) [FD]
Line_45 $$ if (method != null) --> Line_46 $$ method.releaseConnection() [CD]
Line_9 $$ HttpMethod method = null --> Line_46 $$ method.releaseConnection() [FD]
Line_28 $$ method = new GetMethod(url) --> Line_46 $$ method.releaseConnection() [FD]
Line_2 $$ public void run() --> Line_53 $$ setPlain(monitor.getReading()) [CD]
Line_2 $$ public void run() --> Line_54 $$ setPlain(monitor.getReadingStatus()) [CD]
Line_2 $$ public void run() --> Line_55 $$ monitor.getReadingStatus().setText("      Done") [CD]
Line_2 $$ public void run() --> Line_56 $$ setBold(monitor.getValidating()) [CD]
Line_2 $$ public void run() --> Line_57 $$ setBold(monitor.getValidatingStatus()) [CD]
Line_2 $$ public void run() --> Line_58 $$ monitor.getValidatingStatus().setText("      Working") [CD]
Line_2 $$ public void run() --> Line_59 $$ DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl() [CD]
Line_59 $$ DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl() --> Line_61 $$ DocumentBuilder parser = factory.newDocumentBuilder() [FD]
Line_61 $$ DocumentBuilder parser = factory.newDocumentBuilder() --> Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes())) [FD]
Line_3 $$ StringBuffer xml --> Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes())) [FD]
Line_10 $$ xml = new StringBuffer() --> Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes())) [FD]
Line_9 $$ HttpMethod method = null --> Line_63 $$ if (method != null) [FD]
Line_28 $$ method = new GetMethod(url) --> Line_63 $$ if (method != null) [FD]
Line_63 $$ if (method != null) --> Line_64 $$ method.releaseConnection() [CD]
Line_9 $$ HttpMethod method = null --> Line_64 $$ method.releaseConnection() [FD]
Line_28 $$ method = new GetMethod(url) --> Line_64 $$ method.releaseConnection() [FD]
Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes())) --> Line_66 $$ Element root = document.getDocumentElement() [FD]
Line_66 $$ Element root = document.getDocumentElement() --> Line_67 $$ NodeList temp = root.getElementsByTagName("resource") [FD]
Line_33 $$ while ((temp = in.read()) != -1) --> Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [FD]
Line_16 $$ while ((temp = in.read()) != -1) --> Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [FD]
Line_15 $$ int temp --> Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [FD]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) --> Line_69 $$ Element resource = (Element) temp.item(j) [CD]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) --> Line_69 $$ Element resource = (Element) temp.item(j) [FD]
Line_33 $$ while ((temp = in.read()) != -1) --> Line_69 $$ Element resource = (Element) temp.item(j) [FD]
Line_16 $$ while ((temp = in.read()) != -1) --> Line_69 $$ Element resource = (Element) temp.item(j) [FD]
Line_15 $$ int temp --> Line_69 $$ Element resource = (Element) temp.item(j) [FD]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) --> Line_70 $$ resources.add(new URL(resource.getAttribute("url"))) [CD]
Line_69 $$ Element resource = (Element) temp.item(j) --> Line_70 $$ resources.add(new URL(resource.getAttribute("url"))) [FD]
Line_66 $$ Element root = document.getDocumentElement() --> Line_72 $$ NodeList connections = root.getElementsByTagName("jmxserver") [FD]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) --> Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [FD]
Line_72 $$ NodeList connections = root.getElementsByTagName("jmxserver") --> Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [FD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_74 $$ Element connection = (Element) connections.item(j) [CD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_74 $$ Element connection = (Element) connections.item(j) [FD]
Line_72 $$ NodeList connections = root.getElementsByTagName("jmxserver") --> Line_74 $$ Element connection = (Element) connections.item(j) [FD]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) --> Line_74 $$ Element connection = (Element) connections.item(j) [FD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_75 $$ String name = connection.getAttribute("name") [CD]
Line_74 $$ Element connection = (Element) connections.item(j) --> Line_75 $$ String name = connection.getAttribute("name") [FD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_76 $$ String tempUrl = connection.getAttribute("url") [CD]
Line_74 $$ Element connection = (Element) connections.item(j) --> Line_76 $$ String tempUrl = connection.getAttribute("url") [FD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_77 $$ if (tempUrl.indexOf("$ [CD]
Line_76 $$ String tempUrl = connection.getAttribute("url") --> Line_77 $$ if (tempUrl.indexOf("$ [FD]
Line_77 $$ if (tempUrl.indexOf("$ --> Line_78 $$ HostDialog dialog = new HostDialog(Config.getHosts()) [CD]
Line_77 $$ if (tempUrl.indexOf("$ --> Line_79 $$ String host = dialog.showDialog() [CD]
Line_78 $$ HostDialog dialog = new HostDialog(Config.getHosts()) --> Line_79 $$ String host = dialog.showDialog() [FD]
Line_77 $$ if (tempUrl.indexOf("$ --> Line_80 $$ if (host == null) [CD]
Line_79 $$ String host = dialog.showDialog() --> Line_80 $$ if (host == null) [FD]
Line_80 $$ if (host == null) --> Line_81 $$ System.out.println("Host can not be null, unable to create panel.") [CD]
Line_80 $$ if (host == null) --> Line_82 $$ return [CD]
Line_77 $$ if (tempUrl.indexOf("$ --> Line_84 $$ tempUrl = tempUrl.replaceAll("\\$\\ [CD]
Line_76 $$ String tempUrl = connection.getAttribute("url") --> Line_84 $$ tempUrl = tempUrl.replaceAll("\\$\\ [FD]
Line_79 $$ String host = dialog.showDialog() --> Line_84 $$ tempUrl = tempUrl.replaceAll("\\$\\ [FD]
Line_77 $$ if (tempUrl.indexOf("$ --> Line_85 $$ Config.addHost(host) [CD]
Line_79 $$ String host = dialog.showDialog() --> Line_85 $$ Config.addHost(host) [FD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_87 $$ JMXServiceURL jmxUrl = new JMXServiceURL(tempUrl) [CD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_88 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false)) [CD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_89 $$ servers.put(name, server) [CD]
Line_75 $$ String name = connection.getAttribute("name") --> Line_89 $$ servers.put(name, server) [FD]
Line_88 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false)) --> Line_89 $$ servers.put(name, server) [FD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_90 $$ NodeList listeners = connection.getElementsByTagName("listener") [CD]
Line_74 $$ Element connection = (Element) connections.item(j) --> Line_90 $$ NodeList listeners = connection.getElementsByTagName("listener") [FD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) [CD]
Line_90 $$ NodeList listeners = connection.getElementsByTagName("listener") --> Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_92 $$ Element attribute = (Element) listeners.item(i) [CD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_92 $$ Element attribute = (Element) listeners.item(i) [FD]
Line_90 $$ NodeList listeners = connection.getElementsByTagName("listener") --> Line_92 $$ Element attribute = (Element) listeners.item(i) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_93 $$ String taskname = attribute.getAttribute("taskname") [CD]
Line_92 $$ Element attribute = (Element) listeners.item(i) --> Line_93 $$ String taskname = attribute.getAttribute("taskname") [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_94 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) [CD]
Line_92 $$ Element attribute = (Element) listeners.item(i) --> Line_94 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_95 $$ String filtertype = attribute.getAttribute("filterType") [CD]
Line_92 $$ Element attribute = (Element) listeners.item(i) --> Line_95 $$ String filtertype = attribute.getAttribute("filterType") [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_96 $$ TaskNotificationListener listener = new TaskNotificationListener() [CD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_97 $$ NotificationFilterSupport filter = new NotificationFilterSupport() [CD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_98 $$ if (filtertype == null || "".equals(filtertype)) [CD]
Line_95 $$ String filtertype = attribute.getAttribute("filterType") --> Line_98 $$ if (filtertype == null || "".equals(filtertype)) [FD]
Line_98 $$ if (filtertype == null || "".equals(filtertype)) --> Line_99 $$ filter = null [CD]
Line_97 $$ NotificationFilterSupport filter = new NotificationFilterSupport() --> Line_99 $$ filter = null [FD]
Line_98 $$ if (filtertype == null || "".equals(filtertype)) --> Line_101 $$ filter.enableType(filtertype) [CD]
Line_97 $$ NotificationFilterSupport filter = new NotificationFilterSupport() --> Line_101 $$ filter.enableType(filtertype) [FD]
Line_99 $$ filter = null --> Line_101 $$ filter.enableType(filtertype) [FD]
Line_95 $$ String filtertype = attribute.getAttribute("filterType") --> Line_101 $$ filter.enableType(filtertype) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) [CD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_104 $$ task.setMbean(mbean) [CD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_104 $$ task.setMbean(mbean) [FD]
Line_94 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) --> Line_104 $$ task.setMbean(mbean) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_105 $$ task.setListener(listener) [CD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_105 $$ task.setListener(listener) [FD]
Line_96 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_105 $$ task.setListener(listener) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_106 $$ task.setFilter(filter) [CD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_106 $$ task.setFilter(filter) [FD]
Line_97 $$ NotificationFilterSupport filter = new NotificationFilterSupport() --> Line_106 $$ task.setFilter(filter) [FD]
Line_99 $$ filter = null --> Line_106 $$ task.setFilter(filter) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_107 $$ server.getWorker().addTask(task) [CD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_107 $$ server.getWorker().addTask(task) [FD]
Line_88 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false)) --> Line_107 $$ server.getWorker().addTask(task) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_108 $$ if (tasks.get(taskname) != null) [CD]
Line_93 $$ String taskname = attribute.getAttribute("taskname") --> Line_108 $$ if (tasks.get(taskname) != null) [FD]
Line_108 $$ if (tasks.get(taskname) != null) --> Line_109 $$ System.out.println("Task " + taskname + " already exists.") [CD]
Line_108 $$ if (tasks.get(taskname) != null) --> Line_110 $$ return [CD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_112 $$ List<Task> hashTempList = new ArrayList<Task>() [CD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_113 $$ hashTempList.add(task) [CD]
Line_112 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_113 $$ hashTempList.add(task) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_113 $$ hashTempList.add(task) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_114 $$ tasks.put(taskname, hashTempList) [CD]
Line_93 $$ String taskname = attribute.getAttribute("taskname") --> Line_114 $$ tasks.put(taskname, hashTempList) [FD]
Line_112 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_114 $$ tasks.put(taskname, hashTempList) [FD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_116 $$ NodeList attributes = connection.getElementsByTagName("attribute") [CD]
Line_74 $$ Element connection = (Element) connections.item(j) --> Line_116 $$ NodeList attributes = connection.getElementsByTagName("attribute") [FD]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) --> Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) [CD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_118 $$ Element attribute = (Element) attributes.item(i) [CD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_118 $$ Element attribute = (Element) attributes.item(i) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_118 $$ Element attribute = (Element) attributes.item(i) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_119 $$ String taskname = attribute.getAttribute("taskname") [CD]
Line_118 $$ Element attribute = (Element) attributes.item(i) --> Line_119 $$ String taskname = attribute.getAttribute("taskname") [FD]
Line_92 $$ Element attribute = (Element) listeners.item(i) --> Line_119 $$ String taskname = attribute.getAttribute("taskname") [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_120 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) [CD]
Line_118 $$ Element attribute = (Element) attributes.item(i) --> Line_120 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) [FD]
Line_92 $$ Element attribute = (Element) listeners.item(i) --> Line_120 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_121 $$ String attributename = attribute.getAttribute("attributename") [CD]
Line_118 $$ Element attribute = (Element) attributes.item(i) --> Line_121 $$ String attributename = attribute.getAttribute("attributename") [FD]
Line_92 $$ Element attribute = (Element) listeners.item(i) --> Line_121 $$ String attributename = attribute.getAttribute("attributename") [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_122 $$ String frequency = attribute.getAttribute("frequency") [CD]
Line_118 $$ Element attribute = (Element) attributes.item(i) --> Line_122 $$ String frequency = attribute.getAttribute("frequency") [FD]
Line_92 $$ Element attribute = (Element) listeners.item(i) --> Line_122 $$ String frequency = attribute.getAttribute("frequency") [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_123 $$ String onEvent = attribute.getAttribute("onEvent") [CD]
Line_118 $$ Element attribute = (Element) attributes.item(i) --> Line_123 $$ String onEvent = attribute.getAttribute("onEvent") [FD]
Line_92 $$ Element attribute = (Element) listeners.item(i) --> Line_123 $$ String onEvent = attribute.getAttribute("onEvent") [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) [CD]
Line_122 $$ String frequency = attribute.getAttribute("frequency") --> Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_125 $$ TaskNotificationListener listener = new TaskNotificationListener() [CD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_126 $$ AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter() [CD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_127 $$ filter.enableAttribute(attributename) [CD]
Line_126 $$ AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter() --> Line_127 $$ filter.enableAttribute(attributename) [FD]
Line_97 $$ NotificationFilterSupport filter = new NotificationFilterSupport() --> Line_127 $$ filter.enableAttribute(attributename) [FD]
Line_99 $$ filter = null --> Line_127 $$ filter.enableAttribute(attributename) [FD]
Line_121 $$ String attributename = attribute.getAttribute("attributename") --> Line_127 $$ filter.enableAttribute(attributename) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) [CD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_129 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename) [CD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_130 $$ task.setAttribute(att) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_130 $$ task.setAttribute(att) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_130 $$ task.setAttribute(att) [FD]
Line_129 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename) --> Line_130 $$ task.setAttribute(att) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_131 $$ task.setMbean(mbean) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_131 $$ task.setMbean(mbean) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_131 $$ task.setMbean(mbean) [FD]
Line_120 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) --> Line_131 $$ task.setMbean(mbean) [FD]
Line_94 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) --> Line_131 $$ task.setMbean(mbean) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_132 $$ task.setListener(listener) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_132 $$ task.setListener(listener) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_132 $$ task.setListener(listener) [FD]
Line_125 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_132 $$ task.setListener(listener) [FD]
Line_96 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_132 $$ task.setListener(listener) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_133 $$ task.setFilter(filter) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_133 $$ task.setFilter(filter) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_133 $$ task.setFilter(filter) [FD]
Line_126 $$ AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter() --> Line_133 $$ task.setFilter(filter) [FD]
Line_97 $$ NotificationFilterSupport filter = new NotificationFilterSupport() --> Line_133 $$ task.setFilter(filter) [FD]
Line_99 $$ filter = null --> Line_133 $$ task.setFilter(filter) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_134 $$ server.getWorker().addTask(task) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_134 $$ server.getWorker().addTask(task) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_134 $$ server.getWorker().addTask(task) [FD]
Line_88 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false)) --> Line_134 $$ server.getWorker().addTask(task) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_135 $$ if (tasks.get(taskname) != null) [CD]
Line_119 $$ String taskname = attribute.getAttribute("taskname") --> Line_135 $$ if (tasks.get(taskname) != null) [FD]
Line_93 $$ String taskname = attribute.getAttribute("taskname") --> Line_135 $$ if (tasks.get(taskname) != null) [FD]
Line_135 $$ if (tasks.get(taskname) != null) --> Line_136 $$ System.out.println("Task " + taskname + " already exists.") [CD]
Line_135 $$ if (tasks.get(taskname) != null) --> Line_137 $$ return [CD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_139 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server) [CD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_140 $$ task2.setAttribute(att) [CD]
Line_139 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server) --> Line_140 $$ task2.setAttribute(att) [FD]
Line_129 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename) --> Line_140 $$ task2.setAttribute(att) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_141 $$ task2.setMbean(mbean) [CD]
Line_139 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server) --> Line_141 $$ task2.setMbean(mbean) [FD]
Line_120 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) --> Line_141 $$ task2.setMbean(mbean) [FD]
Line_94 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) --> Line_141 $$ task2.setMbean(mbean) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_142 $$ server.getWorker().addTask(task2) [CD]
Line_139 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server) --> Line_142 $$ server.getWorker().addTask(task2) [FD]
Line_88 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false)) --> Line_142 $$ server.getWorker().addTask(task2) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_143 $$ List<Task> hashTempList = new ArrayList<Task>() [CD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_144 $$ hashTempList.add(task) [CD]
Line_143 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_144 $$ hashTempList.add(task) [FD]
Line_112 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_144 $$ hashTempList.add(task) [FD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_144 $$ hashTempList.add(task) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_144 $$ hashTempList.add(task) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_145 $$ hashTempList.add(task2) [CD]
Line_143 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_145 $$ hashTempList.add(task2) [FD]
Line_112 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_145 $$ hashTempList.add(task2) [FD]
Line_139 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server) --> Line_145 $$ hashTempList.add(task2) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_146 $$ tasks.put(taskname, hashTempList) [CD]
Line_119 $$ String taskname = attribute.getAttribute("taskname") --> Line_146 $$ tasks.put(taskname, hashTempList) [FD]
Line_93 $$ String taskname = attribute.getAttribute("taskname") --> Line_146 $$ tasks.put(taskname, hashTempList) [FD]
Line_143 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_146 $$ tasks.put(taskname, hashTempList) [FD]
Line_112 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_146 $$ tasks.put(taskname, hashTempList) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_148 $$ int frequency2 = Integer.parseInt(frequency) [CD]
Line_122 $$ String frequency = attribute.getAttribute("frequency") --> Line_148 $$ int frequency2 = Integer.parseInt(frequency) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_151 $$ task.setAttribute(att) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_151 $$ task.setAttribute(att) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_151 $$ task.setAttribute(att) [FD]
Line_129 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename) --> Line_151 $$ task.setAttribute(att) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_152 $$ task.setMbean(mbean) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_152 $$ task.setMbean(mbean) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_152 $$ task.setMbean(mbean) [FD]
Line_120 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) --> Line_152 $$ task.setMbean(mbean) [FD]
Line_94 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null) --> Line_152 $$ task.setMbean(mbean) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_153 $$ if (tasks.get(taskname) != null) [CD]
Line_119 $$ String taskname = attribute.getAttribute("taskname") --> Line_153 $$ if (tasks.get(taskname) != null) [FD]
Line_93 $$ String taskname = attribute.getAttribute("taskname") --> Line_153 $$ if (tasks.get(taskname) != null) [FD]
Line_153 $$ if (tasks.get(taskname) != null) --> Line_154 $$ System.out.println("Task " + taskname + " already exists.") [CD]
Line_153 $$ if (tasks.get(taskname) != null) --> Line_155 $$ return [CD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_158 $$ hashTempList.add(task) [CD]
Line_143 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_158 $$ hashTempList.add(task) [FD]
Line_112 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_158 $$ hashTempList.add(task) [FD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_158 $$ hashTempList.add(task) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_158 $$ hashTempList.add(task) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_159 $$ tasks.put(taskname, hashTempList) [CD]
Line_119 $$ String taskname = attribute.getAttribute("taskname") --> Line_159 $$ tasks.put(taskname, hashTempList) [FD]
Line_93 $$ String taskname = attribute.getAttribute("taskname") --> Line_159 $$ tasks.put(taskname, hashTempList) [FD]
Line_143 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_159 $$ tasks.put(taskname, hashTempList) [FD]
Line_112 $$ List<Task> hashTempList = new ArrayList<Task>() --> Line_159 $$ tasks.put(taskname, hashTempList) [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_161 $$ if (onEvent != null && !"".equals(onEvent)) [CD]
Line_123 $$ String onEvent = attribute.getAttribute("onEvent") --> Line_161 $$ if (onEvent != null && !"".equals(onEvent)) [FD]
Line_161 $$ if (onEvent != null && !"".equals(onEvent)) --> Line_162 $$ Task tempTask = tasks.get(onEvent).get(0) [CD]
Line_123 $$ String onEvent = attribute.getAttribute("onEvent") --> Line_162 $$ Task tempTask = tasks.get(onEvent).get(0) [FD]
Line_161 $$ if (onEvent != null && !"".equals(onEvent)) --> Line_163 $$ if (tempTask == null) [CD]
Line_162 $$ Task tempTask = tasks.get(onEvent).get(0) --> Line_163 $$ if (tempTask == null) [FD]
Line_163 $$ if (tempTask == null) --> Line_164 $$ System.out.println(onEvent + " was not found.") [CD]
Line_163 $$ if (tempTask == null) --> Line_165 $$ return [CD]
Line_163 $$ if (tempTask == null) --> Line_167 $$ listener = (TaskNotificationListener) tempTask.getListener() [CD]
Line_125 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_167 $$ listener = (TaskNotificationListener) tempTask.getListener() [FD]
Line_96 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_167 $$ listener = (TaskNotificationListener) tempTask.getListener() [FD]
Line_162 $$ Task tempTask = tasks.get(onEvent).get(0) --> Line_167 $$ listener = (TaskNotificationListener) tempTask.getListener() [FD]
Line_124 $$ if (frequency.equalsIgnoreCase("onchange")) --> Line_170 $$ if (listener == null) [CD]
Line_125 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_170 $$ if (listener == null) [FD]
Line_167 $$ listener = (TaskNotificationListener) tempTask.getListener() --> Line_170 $$ if (listener == null) [FD]
Line_96 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_170 $$ if (listener == null) [FD]
Line_170 $$ if (listener == null) --> Line_171 $$ server.getWorker().addTask(task) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_171 $$ server.getWorker().addTask(task) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_171 $$ server.getWorker().addTask(task) [FD]
Line_88 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false)) --> Line_171 $$ server.getWorker().addTask(task) [FD]
Line_170 $$ if (listener == null) --> Line_173 $$ listener.addTask(task) [CD]
Line_125 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_173 $$ listener.addTask(task) [FD]
Line_167 $$ listener = (TaskNotificationListener) tempTask.getListener() --> Line_173 $$ listener.addTask(task) [FD]
Line_96 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_173 $$ listener.addTask(task) [FD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_173 $$ listener.addTask(task) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_173 $$ listener.addTask(task) [FD]
Line_66 $$ Element root = document.getDocumentElement() --> Line_178 $$ NodeList guiTemp = root.getElementsByTagName("gui") [FD]
Line_5 $$ Element guiElement --> Line_179 $$ guiElement = (Element) guiTemp.item(0) [FD]
Line_178 $$ NodeList guiTemp = root.getElementsByTagName("gui") --> Line_179 $$ guiElement = (Element) guiTemp.item(0) [FD]
Line_4 $$ String tabName --> Line_180 $$ tabName = guiElement.getAttribute("name") [FD]
Line_5 $$ Element guiElement --> Line_180 $$ tabName = guiElement.getAttribute("name") [FD]
Line_179 $$ guiElement = (Element) guiTemp.item(0) --> Line_180 $$ tabName = guiElement.getAttribute("name") [FD]
Line_4 $$ String tabName --> Line_181 $$ if (MonitorServer.contains(tabName)) [FD]
Line_180 $$ tabName = guiElement.getAttribute("name") --> Line_181 $$ if (MonitorServer.contains(tabName)) [FD]
Line_181 $$ if (MonitorServer.contains(tabName)) --> Line_182 $$ JOptionPane.showMessageDialog(null, "This panel is already open, stoping creating of panel.", "Panel already exists", JOptionPane.ERROR_MESSAGE) [CD]
Line_181 $$ if (MonitorServer.contains(tabName)) --> Line_183 $$ return [CD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [FD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_186 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [CD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_186 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_186 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_186 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [FD]
Line_186 $$ if (monitor.getTab().getComponent(i).equals(monitor)) --> Line_187 $$ monitor.getTab().setTitleAt(i, tabName) [CD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_187 $$ monitor.getTab().setTitleAt(i, tabName) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_187 $$ monitor.getTab().setTitleAt(i, tabName) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_187 $$ monitor.getTab().setTitleAt(i, tabName) [FD]
Line_4 $$ String tabName --> Line_187 $$ monitor.getTab().setTitleAt(i, tabName) [FD]
Line_180 $$ tabName = guiElement.getAttribute("name") --> Line_187 $$ monitor.getTab().setTitleAt(i, tabName) [FD]
Line_66 $$ Element root = document.getDocumentElement() --> Line_191 $$ NodeList tempBindings = root.getElementsByTagName("binding") [FD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) [FD]
Line_191 $$ NodeList tempBindings = root.getElementsByTagName("binding") --> Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_193 $$ Element binding = (Element) tempBindings.item(i) [CD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_193 $$ Element binding = (Element) tempBindings.item(i) [FD]
Line_191 $$ NodeList tempBindings = root.getElementsByTagName("binding") --> Line_193 $$ Element binding = (Element) tempBindings.item(i) [FD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_193 $$ Element binding = (Element) tempBindings.item(i) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_193 $$ Element binding = (Element) tempBindings.item(i) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_193 $$ Element binding = (Element) tempBindings.item(i) [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_194 $$ String guiname = binding.getAttribute("guiname") [CD]
Line_193 $$ Element binding = (Element) tempBindings.item(i) --> Line_194 $$ String guiname = binding.getAttribute("guiname") [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_195 $$ String tmethod = binding.getAttribute("method") [CD]
Line_193 $$ Element binding = (Element) tempBindings.item(i) --> Line_195 $$ String tmethod = binding.getAttribute("method") [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_196 $$ String taskname = binding.getAttribute("taskname") [CD]
Line_193 $$ Element binding = (Element) tempBindings.item(i) --> Line_196 $$ String taskname = binding.getAttribute("taskname") [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_197 $$ String formater = binding.getAttribute("formater") [CD]
Line_193 $$ Element binding = (Element) tempBindings.item(i) --> Line_197 $$ String formater = binding.getAttribute("formater") [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_198 $$ BindingContainer tempBinding [CD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_199 $$ if (formater == null || (formater != null && formater.equals(""))) [CD]
Line_197 $$ String formater = binding.getAttribute("formater") --> Line_199 $$ if (formater == null || (formater != null && formater.equals(""))) [FD]
Line_199 $$ if (formater == null || (formater != null && formater.equals(""))) --> Line_200 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname) [CD]
Line_198 $$ BindingContainer tempBinding --> Line_200 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname) [FD]
Line_199 $$ if (formater == null || (formater != null && formater.equals(""))) --> Line_202 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater) [CD]
Line_198 $$ BindingContainer tempBinding --> Line_202 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater) [FD]
Line_200 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname) --> Line_202 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater) [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_204 $$ bindings.add(tempBinding) [CD]
Line_198 $$ BindingContainer tempBinding --> Line_204 $$ bindings.add(tempBinding) [FD]
Line_200 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname) --> Line_204 $$ bindings.add(tempBinding) [FD]
Line_202 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater) --> Line_204 $$ bindings.add(tempBinding) [FD]
Line_2 $$ public void run() --> Line_212 $$ setPlain(monitor.getValidating()) [CD]
Line_2 $$ public void run() --> Line_213 $$ setPlain(monitor.getValidatingStatus()) [CD]
Line_2 $$ public void run() --> Line_214 $$ monitor.getValidatingStatus().setText("      Done") [CD]
Line_2 $$ public void run() --> Line_215 $$ setBold(monitor.getDownload()) [CD]
Line_2 $$ public void run() --> Line_216 $$ setBold(monitor.getDownloadStatus()) [CD]
Line_2 $$ public void run() --> Line_217 $$ monitor.getDownloadStatus().setText("      Working") [CD]
Line_2 $$ public void run() --> Line_218 $$ List<File> jarFiles = new ArrayList<File>() [CD]
Line_2 $$ public void run() --> Line_219 $$ File cacheDir = new File(Config.getCacheDir()) [CD]
Line_2 $$ public void run() --> Line_220 $$ if (!cacheDir.exists()) [CD]
Line_219 $$ File cacheDir = new File(Config.getCacheDir()) --> Line_220 $$ if (!cacheDir.exists()) [FD]
Line_220 $$ if (!cacheDir.exists()) --> Line_221 $$ cacheDir.mkdir() [CD]
Line_219 $$ File cacheDir = new File(Config.getCacheDir()) --> Line_221 $$ cacheDir.mkdir() [FD]
Line_223 $$ for (URL resUrl : resources) --> Line_226 $$ HttpMethod methodRes = new GetMethod(resUrl.toString()) [FD]
Line_27 $$ HttpClient client = new HttpClient() --> Line_227 $$ int response = client.executeMethod(methodRes) [FD]
Line_226 $$ HttpMethod methodRes = new GetMethod(resUrl.toString()) --> Line_227 $$ int response = client.executeMethod(methodRes) [FD]
Line_29 $$ int response = client.executeMethod(method) --> Line_228 $$ if (response == 200) [FD]
Line_228 $$ if (response == 200) --> Line_229 $$ int index = resUrl.toString().lastIndexOf("/") + 1 [CD]
Line_223 $$ for (URL resUrl : resources) --> Line_229 $$ int index = resUrl.toString().lastIndexOf("/") + 1 [FD]
Line_228 $$ if (response == 200) --> Line_230 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index)) [CD]
Line_229 $$ int index = resUrl.toString().lastIndexOf("/") + 1 --> Line_230 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index)) [FD]
Line_223 $$ for (URL resUrl : resources) --> Line_230 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index)) [FD]
Line_228 $$ if (response == 200) --> Line_231 $$ FileOutputStream out = new FileOutputStream(file) [CD]
Line_228 $$ if (response == 200) --> Line_232 $$ InputStream in = methodRes.getResponseBodyAsStream() [CD]
Line_226 $$ HttpMethod methodRes = new GetMethod(resUrl.toString()) --> Line_232 $$ InputStream in = methodRes.getResponseBodyAsStream() [FD]
Line_228 $$ if (response == 200) --> Line_233 $$ int readTemp = 0 [CD]
Line_228 $$ if (response == 200) --> Line_234 $$ while ((readTemp = in.read()) != -1) [CD]
Line_233 $$ int readTemp = 0 --> Line_234 $$ while ((readTemp = in.read()) != -1) [FD]
Line_14 $$ InputStream in = new FileInputStream(tempfile) --> Line_234 $$ while ((readTemp = in.read()) != -1) [FD]
Line_234 $$ while ((readTemp = in.read()) != -1) --> Line_235 $$ out.write(readTemp) [CD]
Line_234 $$ while ((readTemp = in.read()) != -1) --> Line_235 $$ out.write(readTemp) [FD]
Line_231 $$ FileOutputStream out = new FileOutputStream(file) --> Line_235 $$ out.write(readTemp) [FD]
Line_233 $$ int readTemp = 0 --> Line_235 $$ out.write(readTemp) [FD]
Line_228 $$ if (response == 200) --> Line_237 $$ System.out.println(file.getName() + " downloaded.") [CD]
Line_230 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index)) --> Line_237 $$ System.out.println(file.getName() + " downloaded.") [FD]
Line_228 $$ if (response == 200) --> Line_238 $$ methodRes.releaseConnection() [CD]
Line_226 $$ HttpMethod methodRes = new GetMethod(resUrl.toString()) --> Line_238 $$ methodRes.releaseConnection() [FD]
Line_228 $$ if (response == 200) --> Line_239 $$ if (file.getName().endsWith(".jar")) [CD]
Line_230 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index)) --> Line_239 $$ if (file.getName().endsWith(".jar")) [FD]
Line_239 $$ if (file.getName().endsWith(".jar")) --> Line_240 $$ jarFiles.add(file) [CD]
Line_218 $$ List<File> jarFiles = new ArrayList<File>() --> Line_240 $$ jarFiles.add(file) [FD]
Line_230 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index)) --> Line_240 $$ jarFiles.add(file) [FD]
Line_228 $$ if (response == 200) --> Line_243 $$ methodRes.releaseConnection() [CD]
Line_226 $$ HttpMethod methodRes = new GetMethod(resUrl.toString()) --> Line_243 $$ methodRes.releaseConnection() [FD]
Line_228 $$ if (response == 200) --> Line_244 $$ System.out.println("Loading Monitor Failed. Unable to get resource " + url) [CD]
Line_228 $$ if (response == 200) --> Line_245 $$ return [CD]
Line_2 $$ public void run() --> Line_253 $$ URL[] urls = new URL[jarFiles.size()] [CD]
Line_218 $$ List<File> jarFiles = new ArrayList<File>() --> Line_253 $$ URL[] urls = new URL[jarFiles.size()] [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) [FD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) [FD]
Line_218 $$ List<File> jarFiles = new ArrayList<File>() --> Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) [FD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_256 $$ File file = jarFiles.get(i) [CD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_256 $$ File file = jarFiles.get(i) [FD]
Line_218 $$ List<File> jarFiles = new ArrayList<File>() --> Line_256 $$ File file = jarFiles.get(i) [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_256 $$ File file = jarFiles.get(i) [FD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_256 $$ File file = jarFiles.get(i) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_256 $$ File file = jarFiles.get(i) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_256 $$ File file = jarFiles.get(i) [FD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_257 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName()) [CD]
Line_256 $$ File file = jarFiles.get(i) --> Line_257 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName()) [FD]
Line_230 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index)) --> Line_257 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName()) [FD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_258 $$ FileInputStream in = new FileInputStream(file) [CD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_259 $$ FileOutputStream out = new FileOutputStream(newFile) [CD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_260 $$ int n = 0 [CD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_261 $$ byte[] buf = new byte[1024] [CD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_262 $$ while ((n = in.read(buf, 0, 1024)) > -1) [CD]
Line_260 $$ int n = 0 --> Line_262 $$ while ((n = in.read(buf, 0, 1024)) > -1) [FD]
Line_258 $$ FileInputStream in = new FileInputStream(file) --> Line_262 $$ while ((n = in.read(buf, 0, 1024)) > -1) [FD]
Line_14 $$ InputStream in = new FileInputStream(tempfile) --> Line_262 $$ while ((n = in.read(buf, 0, 1024)) > -1) [FD]
Line_261 $$ byte[] buf = new byte[1024] --> Line_262 $$ while ((n = in.read(buf, 0, 1024)) > -1) [FD]
Line_262 $$ while ((n = in.read(buf, 0, 1024)) > -1) --> Line_263 $$ out.write(buf, 0, n) [CD]
Line_262 $$ while ((n = in.read(buf, 0, 1024)) > -1) --> Line_263 $$ out.write(buf, 0, n) [FD]
Line_259 $$ FileOutputStream out = new FileOutputStream(newFile) --> Line_263 $$ out.write(buf, 0, n) [FD]
Line_231 $$ FileOutputStream out = new FileOutputStream(file) --> Line_263 $$ out.write(buf, 0, n) [FD]
Line_261 $$ byte[] buf = new byte[1024] --> Line_263 $$ out.write(buf, 0, n) [FD]
Line_260 $$ int n = 0 --> Line_263 $$ out.write(buf, 0, n) [FD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_265 $$ out.close() [CD]
Line_259 $$ FileOutputStream out = new FileOutputStream(newFile) --> Line_265 $$ out.close() [FD]
Line_231 $$ FileOutputStream out = new FileOutputStream(file) --> Line_265 $$ out.close() [FD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_266 $$ out.close() [CD]
Line_259 $$ FileOutputStream out = new FileOutputStream(newFile) --> Line_266 $$ out.close() [FD]
Line_231 $$ FileOutputStream out = new FileOutputStream(file) --> Line_266 $$ out.close() [FD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_267 $$ in.close() [CD]
Line_258 $$ FileInputStream in = new FileInputStream(file) --> Line_267 $$ in.close() [FD]
Line_14 $$ InputStream in = new FileInputStream(tempfile) --> Line_267 $$ in.close() [FD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_268 $$ urls[i] = new URL("file:" + newFile.getAbsolutePath()) [CD]
Line_257 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName()) --> Line_268 $$ urls[i] = new URL("file:" + newFile.getAbsolutePath()) [FD]
Line_2 $$ public void run() --> Line_274 $$ URLClassLoader loader = new URLClassLoader(urls) [CD]
Line_2 $$ public void run() --> Line_275 $$ engine.setClassLoader(loader) [CD]
Line_274 $$ URLClassLoader loader = new URLClassLoader(urls) --> Line_275 $$ engine.setClassLoader(loader) [FD]
Line_2 $$ public void run() --> Line_276 $$ setPlain(monitor.getDownload()) [CD]
Line_2 $$ public void run() --> Line_277 $$ setPlain(monitor.getDownloadStatus()) [CD]
Line_2 $$ public void run() --> Line_278 $$ monitor.getDownloadStatus().setText("      Done") [CD]
Line_2 $$ public void run() --> Line_279 $$ setBold(monitor.getGui()) [CD]
Line_2 $$ public void run() --> Line_280 $$ setBold(monitor.getGuiStatus()) [CD]
Line_2 $$ public void run() --> Line_281 $$ monitor.getGuiStatus().setText("      Working") [CD]
Line_2 $$ public void run() --> Line_282 $$ Container container [CD]
Line_3 $$ StringBuffer xml --> Line_284 $$ String tempXml = xml.toString() [FD]
Line_10 $$ xml = new StringBuffer() --> Line_284 $$ String tempXml = xml.toString() [FD]
Line_284 $$ String tempXml = xml.toString() --> Line_285 $$ int start = tempXml.indexOf("<gui") [FD]
Line_285 $$ int start = tempXml.indexOf("<gui") --> Line_286 $$ start = tempXml.indexOf('>', start) + 1 [FD]
Line_284 $$ String tempXml = xml.toString() --> Line_286 $$ start = tempXml.indexOf('>', start) + 1 [FD]
Line_284 $$ String tempXml = xml.toString() --> Line_287 $$ int end = tempXml.indexOf("</gui>") [FD]
Line_282 $$ Container container --> Line_288 $$ container = engine.render(new StringReader(tempXml.substring(start, end))) [FD]
Line_284 $$ String tempXml = xml.toString() --> Line_288 $$ container = engine.render(new StringReader(tempXml.substring(start, end))) [FD]
Line_285 $$ int start = tempXml.indexOf("<gui") --> Line_288 $$ container = engine.render(new StringReader(tempXml.substring(start, end))) [FD]
Line_286 $$ start = tempXml.indexOf('>', start) + 1 --> Line_288 $$ container = engine.render(new StringReader(tempXml.substring(start, end))) [FD]
Line_287 $$ int end = tempXml.indexOf("</gui>") --> Line_288 $$ container = engine.render(new StringReader(tempXml.substring(start, end))) [FD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_296 $$ for (Task task : tasks.get(bcon.getTask())) [FD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_297 $$ if (task != null) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_297 $$ if (task != null) [FD]
Line_296 $$ for (Task task : tasks.get(bcon.getTask())) --> Line_297 $$ if (task != null) [FD]
Line_297 $$ if (task != null) --> Line_298 $$ Object comp = engine.find(bcon.getComponent()) [CD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_298 $$ Object comp = engine.find(bcon.getComponent()) [FD]
Line_297 $$ if (task != null) --> Line_299 $$ if (comp != null) [CD]
Line_298 $$ Object comp = engine.find(bcon.getComponent()) --> Line_299 $$ if (comp != null) [FD]
Line_299 $$ if (comp != null) --> Line_300 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_300 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_300 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [FD]
Line_296 $$ for (Task task : tasks.get(bcon.getTask())) --> Line_300 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [FD]
Line_300 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) --> Line_301 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener() [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_301 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener() [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_301 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener() [FD]
Line_296 $$ for (Task task : tasks.get(bcon.getTask())) --> Line_301 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener() [FD]
Line_300 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) --> Line_302 $$ if (bcon.getFormater() == null) [CD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_302 $$ if (bcon.getFormater() == null) [FD]
Line_302 $$ if (bcon.getFormater() == null) --> Line_303 $$ listener.addResultListener(new Binding(comp, bcon.getMethod())) [CD]
Line_125 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_303 $$ listener.addResultListener(new Binding(comp, bcon.getMethod())) [FD]
Line_167 $$ listener = (TaskNotificationListener) tempTask.getListener() --> Line_303 $$ listener.addResultListener(new Binding(comp, bcon.getMethod())) [FD]
Line_96 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_303 $$ listener.addResultListener(new Binding(comp, bcon.getMethod())) [FD]
Line_301 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener() --> Line_303 $$ listener.addResultListener(new Binding(comp, bcon.getMethod())) [FD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_303 $$ listener.addResultListener(new Binding(comp, bcon.getMethod())) [FD]
Line_302 $$ if (bcon.getFormater() == null) --> Line_305 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [CD]
Line_125 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_305 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [FD]
Line_167 $$ listener = (TaskNotificationListener) tempTask.getListener() --> Line_305 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [FD]
Line_96 $$ TaskNotificationListener listener = new TaskNotificationListener() --> Line_305 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [FD]
Line_301 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener() --> Line_305 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [FD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_305 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [FD]
Line_300 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) --> Line_308 $$ if (bcon.getFormater() == null) [CD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_308 $$ if (bcon.getFormater() == null) [FD]
Line_308 $$ if (bcon.getFormater() == null) --> Line_309 $$ task.addResultListener(new Binding(comp, bcon.getMethod())) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_309 $$ task.addResultListener(new Binding(comp, bcon.getMethod())) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_309 $$ task.addResultListener(new Binding(comp, bcon.getMethod())) [FD]
Line_296 $$ for (Task task : tasks.get(bcon.getTask())) --> Line_309 $$ task.addResultListener(new Binding(comp, bcon.getMethod())) [FD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_309 $$ task.addResultListener(new Binding(comp, bcon.getMethod())) [FD]
Line_308 $$ if (bcon.getFormater() == null) --> Line_311 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [CD]
Line_128 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_311 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [FD]
Line_103 $$ Task task = new Task(-1, Task.LISTEN, server) --> Line_311 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [FD]
Line_296 $$ for (Task task : tasks.get(bcon.getTask())) --> Line_311 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [FD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_311 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader)) [FD]
Line_299 $$ if (comp != null) --> Line_315 $$ System.out.println("Refering to gui name, " + bcon.getComponent() + ", that doesnt exist. Unable to create monitor.") [CD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_315 $$ System.out.println("Refering to gui name, " + bcon.getComponent() + ", that doesnt exist. Unable to create monitor.") [FD]
Line_299 $$ if (comp != null) --> Line_316 $$ return [CD]
Line_297 $$ if (task != null) --> Line_319 $$ System.out.println("Refering to task name, " + bcon.getTask() + ", that doesnt exist. Unable to create monitor.") [CD]
Line_295 $$ for (BindingContainer bcon : bindings) --> Line_319 $$ System.out.println("Refering to task name, " + bcon.getTask() + ", that doesnt exist. Unable to create monitor.") [FD]
Line_297 $$ if (task != null) --> Line_320 $$ return [CD]
Line_2 $$ public void run() --> Line_324 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [CD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_324 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_324 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [FD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_324 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_324 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_324 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [FD]
Line_324 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_325 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [CD]
Line_324 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_325 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [FD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_325 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_325 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [FD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_325 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_325 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_325 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [FD]
Line_325 $$ if (monitor.getTab().getComponent(i).equals(monitor)) --> Line_326 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this)) [CD]
Line_324 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_326 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this)) [FD]
Line_255 $$ for (int i = 0; i < jarFiles.size(); i++) --> Line_326 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this)) [FD]
Line_192 $$ for (int i = 0; i < tempBindings.getLength(); i++) --> Line_326 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this)) [FD]
Line_185 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) --> Line_326 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this)) [FD]
Line_117 $$ for (int i = 0; i < attributes.getLength(); i++) --> Line_326 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this)) [FD]
Line_91 $$ for (int i = 0; i < listeners.getLength(); i++) --> Line_326 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this)) [FD]
Line_2 $$ public void run() --> Line_330 $$ System.out.println("Connecting to server(s).") [CD]
Line_2 $$ public void run() --> Line_331 $$ Enumeration<JmxServerGraph> e = servers.elements() [CD]
Line_2 $$ public void run() --> Line_332 $$ List<JmxWorker> list = new ArrayList<JmxWorker>() [CD]
Line_2 $$ public void run() --> Line_333 $$ while (e.hasMoreElements()) [CD]
Line_331 $$ Enumeration<JmxServerGraph> e = servers.elements() --> Line_333 $$ while (e.hasMoreElements()) [FD]
Line_333 $$ while (e.hasMoreElements()) --> Line_334 $$ JmxWorker worker = e.nextElement().getWorker() [CD]
Line_331 $$ Enumeration<JmxServerGraph> e = servers.elements() --> Line_334 $$ JmxWorker worker = e.nextElement().getWorker() [FD]
Line_333 $$ while (e.hasMoreElements()) --> Line_335 $$ worker.setRunning(true) [CD]
Line_334 $$ JmxWorker worker = e.nextElement().getWorker() --> Line_335 $$ worker.setRunning(true) [FD]
Line_333 $$ while (e.hasMoreElements()) --> Line_336 $$ worker.start() [CD]
Line_334 $$ JmxWorker worker = e.nextElement().getWorker() --> Line_336 $$ worker.start() [FD]
Line_333 $$ while (e.hasMoreElements()) --> Line_337 $$ list.add(worker) [CD]
Line_332 $$ List<JmxWorker> list = new ArrayList<JmxWorker>() --> Line_337 $$ list.add(worker) [FD]
Line_334 $$ JmxWorker worker = e.nextElement().getWorker() --> Line_337 $$ list.add(worker) [FD]
Line_2 $$ public void run() --> Line_339 $$ MonitorServer.add(tabName, list) [CD]
Line_4 $$ String tabName --> Line_339 $$ MonitorServer.add(tabName, list) [FD]
Line_180 $$ tabName = guiElement.getAttribute("name") --> Line_339 $$ MonitorServer.add(tabName, list) [FD]
Line_332 $$ List<JmxWorker> list = new ArrayList<JmxWorker>() --> Line_339 $$ MonitorServer.add(tabName, list) [FD]
Line_2 $$ public void run() --> Line_340 $$ Config.addUrl(url) [CD]
Line_84 $$ tempUrl = tempUrl.replaceAll("\\$\\ --> Line_77 $$ if (tempUrl.indexOf("$ [FD]
Line_167 $$ listener = (TaskNotificationListener) tempTask.getListener() --> Line_132 $$ task.setListener(listener) [FD]
