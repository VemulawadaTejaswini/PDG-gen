Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_3 $$ if (!outputDirectory.exists()) [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_3 $$ if (!outputDirectory.exists()) [FD]
Line_3 $$ if (!outputDirectory.exists()) --> Line_4 $$ outputDirectory.createFolder() [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_4 $$ outputDirectory.createFolder() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_6 $$ ZipUtils.extractZip(new ClasspathResource(classResolver, "/com/erinors/tapestry/tapdoc/standalone/resources.zip"), outputDirectory) [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_6 $$ ZipUtils.extractZip(new ClasspathResource(classResolver, "/com/erinors/tapestry/tapdoc/standalone/resources.zip"), outputDirectory) [FD]
Line_7 $$ for (Library library : libraryModels) --> Line_8 $$ String libraryName = library.getName() [FD]
Line_7 $$ for (Library library : libraryModels) --> Line_9 $$ String libraryLocation = library.getLocation() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_10 $$ outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).createFolder() [FD]
Line_9 $$ String libraryLocation = library.getLocation() --> Line_10 $$ outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).createFolder() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_13 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) [FD]
Line_8 $$ String libraryName = library.getName() --> Line_13 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_14 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.html") [FD]
Line_9 $$ String libraryLocation = library.getLocation() --> Line_14 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.html") [FD]
Line_14 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.html") --> Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_16 $$ out.write(result) [FD]
Line_13 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) --> Line_16 $$ out.write(result) [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_17 $$ out.close() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_20 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("ComponentIndex.xsl"), "libraryName", libraryName) [FD]
Line_8 $$ String libraryName = library.getName() --> Line_20 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("ComponentIndex.xsl"), "libraryName", libraryName) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_21 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("components.html") [FD]
Line_9 $$ String libraryLocation = library.getLocation() --> Line_21 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("components.html") [FD]
Line_14 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.html") --> Line_22 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_23 $$ out.write(result) [FD]
Line_13 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) --> Line_23 $$ out.write(result) [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_24 $$ out.close() [FD]
Line_7 $$ for (Library library : libraryModels) --> Line_29 $$ for (Component component : library.getComponents()) [FD]
Line_29 $$ for (Component component : library.getComponents()) --> Line_30 $$ String componentName = component.getName() [FD]
Line_32 $$ Map<String, String> parameters = new HashMap<String, String>() --> Line_33 $$ parameters.put("libraryName", libraryName) [FD]
Line_8 $$ String libraryName = library.getName() --> Line_33 $$ parameters.put("libraryName", libraryName) [FD]
Line_32 $$ Map<String, String> parameters = new HashMap<String, String>() --> Line_34 $$ parameters.put("componentName", componentName) [FD]
Line_30 $$ String componentName = component.getName() --> Line_34 $$ parameters.put("componentName", componentName) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_35 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Component.xsl"), parameters) [FD]
Line_32 $$ Map<String, String> parameters = new HashMap<String, String>() --> Line_35 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Component.xsl"), parameters) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_38 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true)) [FD]
Line_9 $$ String libraryLocation = library.getLocation() --> Line_38 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true)) [FD]
Line_30 $$ String componentName = component.getName() --> Line_38 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true)) [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_14 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.html") --> Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_40 $$ out.write(result) [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_40 $$ out.write(result) [FD]
Line_13 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) --> Line_40 $$ out.write(result) [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_41 $$ out.close() [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_41 $$ out.close() [FD]
Line_29 $$ for (Component component : library.getComponents()) --> Line_42 $$ Resource specificationLocation = component.getSpecificationLocation() [FD]
Line_42 $$ Resource specificationLocation = component.getSpecificationLocation() --> Line_43 $$ if (specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL() != null) [FD]
Line_43 $$ if (specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL() != null) --> Line_44 $$ File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL().toURI()) [CD]
Line_42 $$ Resource specificationLocation = component.getSpecificationLocation() --> Line_44 $$ File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL().toURI()) [FD]
Line_43 $$ if (specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL() != null) --> Line_45 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_45 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") [FD]
Line_9 $$ String libraryLocation = library.getLocation() --> Line_45 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") [FD]
Line_30 $$ String componentName = component.getName() --> Line_45 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") [FD]
Line_43 $$ if (specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL() != null) --> Line_46 $$ if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) [CD]
Line_44 $$ File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL().toURI()) --> Line_46 $$ if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) [FD]
Line_46 $$ if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) --> Line_47 $$ File[] files = srcResourcesDirectory.listFiles() [CD]
Line_44 $$ File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL().toURI()) --> Line_47 $$ File[] files = srcResourcesDirectory.listFiles() [FD]
Line_46 $$ if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) --> Line_48 $$ if (files != null) [CD]
Line_47 $$ File[] files = srcResourcesDirectory.listFiles() --> Line_48 $$ if (files != null) [FD]
Line_49 $$ for (File resource : files) --> Line_50 $$ if (resource.isFile() && !resource.isHidden()) [FD]
Line_50 $$ if (resource.isFile() && !resource.isHidden()) --> Line_51 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) [CD]
Line_45 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") --> Line_51 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) [FD]
Line_49 $$ for (File resource : files) --> Line_51 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) [FD]
Line_50 $$ if (resource.isFile() && !resource.isHidden()) --> Line_52 $$ resourceFileObject.createFile() [CD]
Line_51 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) --> Line_52 $$ resourceFileObject.createFile() [FD]
Line_50 $$ if (resource.isFile() && !resource.isHidden()) --> Line_53 $$ InputStream inResource = null [CD]
Line_50 $$ if (resource.isFile() && !resource.isHidden()) --> Line_54 $$ OutputStream outResource = null [CD]
Line_53 $$ InputStream inResource = null --> Line_56 $$ inResource = new FileInputStream(resource) [FD]
Line_54 $$ OutputStream outResource = null --> Line_57 $$ outResource = resourceFileObject.getContent().getOutputStream() [FD]
Line_51 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) --> Line_57 $$ outResource = resourceFileObject.getContent().getOutputStream() [FD]
Line_53 $$ InputStream inResource = null --> Line_58 $$ IOUtils.copy(inResource, outResource) [FD]
Line_56 $$ inResource = new FileInputStream(resource) --> Line_58 $$ IOUtils.copy(inResource, outResource) [FD]
Line_54 $$ OutputStream outResource = null --> Line_58 $$ IOUtils.copy(inResource, outResource) [FD]
Line_57 $$ outResource = resourceFileObject.getContent().getOutputStream() --> Line_58 $$ IOUtils.copy(inResource, outResource) [FD]
Line_53 $$ InputStream inResource = null --> Line_60 $$ IOUtils.closeQuietly(inResource) [FD]
Line_56 $$ inResource = new FileInputStream(resource) --> Line_60 $$ IOUtils.closeQuietly(inResource) [FD]
Line_54 $$ OutputStream outResource = null --> Line_61 $$ IOUtils.closeQuietly(outResource) [FD]
Line_57 $$ outResource = resourceFileObject.getContent().getOutputStream() --> Line_61 $$ IOUtils.closeQuietly(outResource) [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_71 $$ if (out != null) [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_71 $$ if (out != null) [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_73 $$ out.close() [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_73 $$ out.close() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_85 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("LibraryIndex.xsl")) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_86 $$ FileObject index = outputDirectory.resolveFile("libraries.html") [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_14 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.html") --> Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_88 $$ out.write(result) [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_88 $$ out.write(result) [FD]
Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_88 $$ out.write(result) [FD]
Line_13 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) --> Line_88 $$ out.write(result) [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_89 $$ out.close() [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_89 $$ out.close() [FD]
Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_89 $$ out.close() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_92 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Overview.xsl")) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_93 $$ FileObject index = outputDirectory.resolveFile("overview.html") [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_14 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.html") --> Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_95 $$ out.write(result) [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_95 $$ out.write(result) [FD]
Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_95 $$ out.write(result) [FD]
Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_95 $$ out.write(result) [FD]
Line_13 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) --> Line_95 $$ out.write(result) [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_96 $$ out.close() [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_96 $$ out.close() [FD]
Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_96 $$ out.close() [FD]
Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_96 $$ out.close() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_99 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("AllComponents.xsl")) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_100 $$ FileObject index = outputDirectory.resolveFile("allcomponents.html") [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_101 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_101 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_101 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_101 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_14 $$ FileObject index = outputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.html") --> Line_101 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_102 $$ out.write(result) [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_102 $$ out.write(result) [FD]
Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_102 $$ out.write(result) [FD]
Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_102 $$ out.write(result) [FD]
Line_101 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_102 $$ out.write(result) [FD]
Line_13 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) --> Line_102 $$ out.write(result) [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_103 $$ out.close() [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_103 $$ out.close() [FD]
Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_103 $$ out.close() [FD]
Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_103 $$ out.close() [FD]
Line_101 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_103 $$ out.close() [FD]
Line_15 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_108 $$ IOUtils.closeQuietly(out) [FD]
Line_39 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_108 $$ IOUtils.closeQuietly(out) [FD]
Line_87 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_108 $$ IOUtils.closeQuietly(out) [FD]
Line_94 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_108 $$ IOUtils.closeQuietly(out) [FD]
Line_101 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_108 $$ IOUtils.closeQuietly(out) [FD]
