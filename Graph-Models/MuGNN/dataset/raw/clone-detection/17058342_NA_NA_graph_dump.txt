Line_2 $$ public void executeUpdate(Native nativeResource) throws Exception --> Line_3 $$ Connection con = null [CD]
Line_2 $$ public void executeUpdate(Native nativeResource) throws Exception --> Line_4 $$ boolean autoCommit = true [CD]
Line_2 $$ public void executeUpdate(Native nativeResource) throws Exception --> Line_5 $$ PreparedStatement st = null [CD]
Line_3 $$ Connection con = null --> Line_9 $$ con = mc.getJdbcConnection() [FD]
Line_8 $$ ManagedConnection mc = returnConnection() --> Line_9 $$ con = mc.getJdbcConnection() [FD]
Line_4 $$ boolean autoCommit = true --> Line_10 $$ autoCommit = con.getAutoCommit() [FD]
Line_3 $$ Connection con = null --> Line_10 $$ autoCommit = con.getAutoCommit() [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_10 $$ autoCommit = con.getAutoCommit() [FD]
Line_3 $$ Connection con = null --> Line_11 $$ con.setAutoCommit(false) [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_11 $$ con.setAutoCommit(false) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) [FD]
Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) --> Line_17 $$ sUuid = hr.getUuid() [CD]
Line_14 $$ String sUuid = "" --> Line_17 $$ sUuid = hr.getUuid() [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_17 $$ sUuid = hr.getUuid() [FD]
Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) --> Line_18 $$ finableBeforeUpdate = queryFindable(con) [CD]
Line_15 $$ boolean finableBeforeUpdate = false --> Line_18 $$ finableBeforeUpdate = queryFindable(con) [FD]
Line_3 $$ Connection con = null --> Line_18 $$ finableBeforeUpdate = queryFindable(con) [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_18 $$ finableBeforeUpdate = queryFindable(con) [FD]
Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) --> Line_19 $$ sql = createUpdateSQL() [CD]
Line_12 $$ String sql = "" --> Line_19 $$ sql = createUpdateSQL() [FD]
Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) --> Line_20 $$ st = con.prepareStatement(sql) [CD]
Line_5 $$ PreparedStatement st = null --> Line_20 $$ st = con.prepareStatement(sql) [FD]
Line_3 $$ Connection con = null --> Line_20 $$ st = con.prepareStatement(sql) [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_20 $$ st = con.prepareStatement(sql) [FD]
Line_12 $$ String sql = "" --> Line_20 $$ st = con.prepareStatement(sql) [FD]
Line_19 $$ sql = createUpdateSQL() --> Line_20 $$ st = con.prepareStatement(sql) [FD]
Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) --> Line_21 $$ isUpdate = true [CD]
Line_13 $$ boolean isUpdate = false --> Line_21 $$ isUpdate = true [FD]
Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) --> Line_23 $$ sUuid = UuidUtil.makeUuid(true) [CD]
Line_14 $$ String sUuid = "" --> Line_23 $$ sUuid = UuidUtil.makeUuid(true) [FD]
Line_17 $$ sUuid = hr.getUuid() --> Line_23 $$ sUuid = UuidUtil.makeUuid(true) [FD]
Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) --> Line_24 $$ finableBeforeUpdate = hr.getFindable() [CD]
Line_15 $$ boolean finableBeforeUpdate = false --> Line_24 $$ finableBeforeUpdate = hr.getFindable() [FD]
Line_18 $$ finableBeforeUpdate = queryFindable(con) --> Line_24 $$ finableBeforeUpdate = hr.getFindable() [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_24 $$ finableBeforeUpdate = hr.getFindable() [FD]
Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) --> Line_25 $$ sql = createInsertSQL() [CD]
Line_12 $$ String sql = "" --> Line_25 $$ sql = createInsertSQL() [FD]
Line_19 $$ sql = createUpdateSQL() --> Line_25 $$ sql = createInsertSQL() [FD]
Line_16 $$ if (UuidUtil.isUuid(hr.getUuid())) --> Line_26 $$ st = con.prepareStatement(sql) [CD]
Line_5 $$ PreparedStatement st = null --> Line_26 $$ st = con.prepareStatement(sql) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_26 $$ st = con.prepareStatement(sql) [FD]
Line_3 $$ Connection con = null --> Line_26 $$ st = con.prepareStatement(sql) [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_26 $$ st = con.prepareStatement(sql) [FD]
Line_12 $$ String sql = "" --> Line_26 $$ st = con.prepareStatement(sql) [FD]
Line_19 $$ sql = createUpdateSQL() --> Line_26 $$ st = con.prepareStatement(sql) [FD]
Line_25 $$ sql = createInsertSQL() --> Line_26 $$ st = con.prepareStatement(sql) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_28 $$ if (hr.getOwnerId() < 0) [FD]
Line_28 $$ if (hr.getOwnerId() < 0) --> Line_29 $$ hr.setOwnerId(getOwner().getLocalID()) [CD]
Line_7 $$ HrRecord hr = getRepository() --> Line_29 $$ hr.setOwnerId(getOwner().getLocalID()) [FD]
Line_5 $$ PreparedStatement st = null --> Line_32 $$ st.setInt(n++, hr.getOwnerId()) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_32 $$ st.setInt(n++, hr.getOwnerId()) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_32 $$ st.setInt(n++, hr.getOwnerId()) [FD]
Line_31 $$ int n = 1 --> Line_32 $$ st.setInt(n++, hr.getOwnerId()) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_32 $$ st.setInt(n++, hr.getOwnerId()) [FD]
Line_5 $$ PreparedStatement st = null --> Line_33 $$ st.setTimestamp(n++, makeTimestamp(hr.getInputDate())) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_33 $$ st.setTimestamp(n++, makeTimestamp(hr.getInputDate())) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_33 $$ st.setTimestamp(n++, makeTimestamp(hr.getInputDate())) [FD]
Line_31 $$ int n = 1 --> Line_33 $$ st.setTimestamp(n++, makeTimestamp(hr.getInputDate())) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_33 $$ st.setTimestamp(n++, makeTimestamp(hr.getInputDate())) [FD]
Line_5 $$ PreparedStatement st = null --> Line_34 $$ st.setTimestamp(n++, makeTimestamp(hr.getUpdateDate())) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_34 $$ st.setTimestamp(n++, makeTimestamp(hr.getUpdateDate())) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_34 $$ st.setTimestamp(n++, makeTimestamp(hr.getUpdateDate())) [FD]
Line_31 $$ int n = 1 --> Line_34 $$ st.setTimestamp(n++, makeTimestamp(hr.getUpdateDate())) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_34 $$ st.setTimestamp(n++, makeTimestamp(hr.getUpdateDate())) [FD]
Line_5 $$ PreparedStatement st = null --> Line_35 $$ st.setString(n++, hr.getName()) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_35 $$ st.setString(n++, hr.getName()) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_35 $$ st.setString(n++, hr.getName()) [FD]
Line_31 $$ int n = 1 --> Line_35 $$ st.setString(n++, hr.getName()) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_35 $$ st.setString(n++, hr.getName()) [FD]
Line_5 $$ PreparedStatement st = null --> Line_36 $$ st.setString(n++, hr.getHostUrl()) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_36 $$ st.setString(n++, hr.getHostUrl()) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_36 $$ st.setString(n++, hr.getHostUrl()) [FD]
Line_31 $$ int n = 1 --> Line_36 $$ st.setString(n++, hr.getHostUrl()) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_36 $$ st.setString(n++, hr.getHostUrl()) [FD]
Line_5 $$ PreparedStatement st = null --> Line_37 $$ st.setString(n++, hr.getHarvestFrequency().toString()) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_37 $$ st.setString(n++, hr.getHarvestFrequency().toString()) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_37 $$ st.setString(n++, hr.getHarvestFrequency().toString()) [FD]
Line_31 $$ int n = 1 --> Line_37 $$ st.setString(n++, hr.getHarvestFrequency().toString()) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_37 $$ st.setString(n++, hr.getHarvestFrequency().toString()) [FD]
Line_5 $$ PreparedStatement st = null --> Line_38 $$ st.setString(n++, Boolean.toString(hr.getSendNotification())) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_38 $$ st.setString(n++, Boolean.toString(hr.getSendNotification())) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_38 $$ st.setString(n++, Boolean.toString(hr.getSendNotification())) [FD]
Line_31 $$ int n = 1 --> Line_38 $$ st.setString(n++, Boolean.toString(hr.getSendNotification())) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_38 $$ st.setString(n++, Boolean.toString(hr.getSendNotification())) [FD]
Line_5 $$ PreparedStatement st = null --> Line_39 $$ st.setString(n++, hr.getProtocol().getKind().toLowerCase()) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_39 $$ st.setString(n++, hr.getProtocol().getKind().toLowerCase()) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_39 $$ st.setString(n++, hr.getProtocol().getKind().toLowerCase()) [FD]
Line_31 $$ int n = 1 --> Line_39 $$ st.setString(n++, hr.getProtocol().getKind().toLowerCase()) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_39 $$ st.setString(n++, hr.getProtocol().getKind().toLowerCase()) [FD]
Line_5 $$ PreparedStatement st = null --> Line_40 $$ st.setString(n++, ProtocolSerializer.toXmlString(hr.getProtocol())) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_40 $$ st.setString(n++, ProtocolSerializer.toXmlString(hr.getProtocol())) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_40 $$ st.setString(n++, ProtocolSerializer.toXmlString(hr.getProtocol())) [FD]
Line_31 $$ int n = 1 --> Line_40 $$ st.setString(n++, ProtocolSerializer.toXmlString(hr.getProtocol())) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_40 $$ st.setString(n++, ProtocolSerializer.toXmlString(hr.getProtocol())) [FD]
Line_5 $$ PreparedStatement st = null --> Line_41 $$ st.setString(n++, PublicationMethod.registration.name()) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_41 $$ st.setString(n++, PublicationMethod.registration.name()) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_41 $$ st.setString(n++, PublicationMethod.registration.name()) [FD]
Line_31 $$ int n = 1 --> Line_41 $$ st.setString(n++, PublicationMethod.registration.name()) [FD]
Line_13 $$ boolean isUpdate = false --> Line_42 $$ if (!isUpdate) [FD]
Line_21 $$ isUpdate = true --> Line_42 $$ if (!isUpdate) [FD]
Line_42 $$ if (!isUpdate) --> Line_43 $$ if (getRequestContext().getApplicationConfiguration().getHarvesterConfiguration().getResourceAutoApprove()) [CD]
Line_43 $$ if (getRequestContext().getApplicationConfiguration().getHarvesterConfiguration().getResourceAutoApprove()) --> Line_44 $$ st.setString(n++, ApprovalStatus.approved.name()) [CD]
Line_5 $$ PreparedStatement st = null --> Line_44 $$ st.setString(n++, ApprovalStatus.approved.name()) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_44 $$ st.setString(n++, ApprovalStatus.approved.name()) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_44 $$ st.setString(n++, ApprovalStatus.approved.name()) [FD]
Line_31 $$ int n = 1 --> Line_44 $$ st.setString(n++, ApprovalStatus.approved.name()) [FD]
Line_43 $$ if (getRequestContext().getApplicationConfiguration().getHarvesterConfiguration().getResourceAutoApprove()) --> Line_46 $$ st.setString(n++, ApprovalStatus.posted.name()) [CD]
Line_5 $$ PreparedStatement st = null --> Line_46 $$ st.setString(n++, ApprovalStatus.posted.name()) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_46 $$ st.setString(n++, ApprovalStatus.posted.name()) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_46 $$ st.setString(n++, ApprovalStatus.posted.name()) [FD]
Line_31 $$ int n = 1 --> Line_46 $$ st.setString(n++, ApprovalStatus.posted.name()) [FD]
Line_5 $$ PreparedStatement st = null --> Line_49 $$ st.setString(n++, Boolean.toString(hr.getSearchable())) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_49 $$ st.setString(n++, Boolean.toString(hr.getSearchable())) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_49 $$ st.setString(n++, Boolean.toString(hr.getSearchable())) [FD]
Line_31 $$ int n = 1 --> Line_49 $$ st.setString(n++, Boolean.toString(hr.getSearchable())) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_49 $$ st.setString(n++, Boolean.toString(hr.getSearchable())) [FD]
Line_5 $$ PreparedStatement st = null --> Line_50 $$ st.setString(n++, Boolean.toString(hr.getSynchronizable())) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_50 $$ st.setString(n++, Boolean.toString(hr.getSynchronizable())) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_50 $$ st.setString(n++, Boolean.toString(hr.getSynchronizable())) [FD]
Line_31 $$ int n = 1 --> Line_50 $$ st.setString(n++, Boolean.toString(hr.getSynchronizable())) [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_50 $$ st.setString(n++, Boolean.toString(hr.getSynchronizable())) [FD]
Line_5 $$ PreparedStatement st = null --> Line_51 $$ st.setString(n++, sUuid) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_51 $$ st.setString(n++, sUuid) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_51 $$ st.setString(n++, sUuid) [FD]
Line_14 $$ String sUuid = "" --> Line_51 $$ st.setString(n++, sUuid) [FD]
Line_17 $$ sUuid = hr.getUuid() --> Line_51 $$ st.setString(n++, sUuid) [FD]
Line_23 $$ sUuid = UuidUtil.makeUuid(true) --> Line_51 $$ st.setString(n++, sUuid) [FD]
Line_31 $$ int n = 1 --> Line_51 $$ st.setString(n++, sUuid) [FD]
Line_12 $$ String sql = "" --> Line_52 $$ logExpression(sql) [FD]
Line_19 $$ sql = createUpdateSQL() --> Line_52 $$ logExpression(sql) [FD]
Line_25 $$ sql = createInsertSQL() --> Line_52 $$ logExpression(sql) [FD]
Line_5 $$ PreparedStatement st = null --> Line_53 $$ int nRowCount = st.executeUpdate() [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_53 $$ int nRowCount = st.executeUpdate() [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_53 $$ int nRowCount = st.executeUpdate() [FD]
Line_53 $$ int nRowCount = st.executeUpdate() --> Line_54 $$ getActionResult().setNumberOfRecordsModified(nRowCount) [FD]
Line_13 $$ boolean isUpdate = false --> Line_55 $$ if (!isUpdate && nRowCount == 1) [FD]
Line_21 $$ isUpdate = true --> Line_55 $$ if (!isUpdate && nRowCount == 1) [FD]
Line_55 $$ if (!isUpdate && nRowCount == 1) --> Line_56 $$ closeStatement(st) [CD]
Line_5 $$ PreparedStatement st = null --> Line_56 $$ closeStatement(st) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_56 $$ closeStatement(st) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_56 $$ closeStatement(st) [FD]
Line_55 $$ if (!isUpdate && nRowCount == 1) --> Line_57 $$ st = con.prepareStatement("SELECT ID FROM " + getHarvestingTableName() + " WHERE UPPER(DOCUUID)=?") [CD]
Line_5 $$ PreparedStatement st = null --> Line_57 $$ st = con.prepareStatement("SELECT ID FROM " + getHarvestingTableName() + " WHERE UPPER(DOCUUID)=?") [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_57 $$ st = con.prepareStatement("SELECT ID FROM " + getHarvestingTableName() + " WHERE UPPER(DOCUUID)=?") [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_57 $$ st = con.prepareStatement("SELECT ID FROM " + getHarvestingTableName() + " WHERE UPPER(DOCUUID)=?") [FD]
Line_3 $$ Connection con = null --> Line_57 $$ st = con.prepareStatement("SELECT ID FROM " + getHarvestingTableName() + " WHERE UPPER(DOCUUID)=?") [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_57 $$ st = con.prepareStatement("SELECT ID FROM " + getHarvestingTableName() + " WHERE UPPER(DOCUUID)=?") [FD]
Line_55 $$ if (!isUpdate && nRowCount == 1) --> Line_58 $$ st.setString(1, sUuid.toUpperCase()) [CD]
Line_5 $$ PreparedStatement st = null --> Line_58 $$ st.setString(1, sUuid.toUpperCase()) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_58 $$ st.setString(1, sUuid.toUpperCase()) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_58 $$ st.setString(1, sUuid.toUpperCase()) [FD]
Line_57 $$ st = con.prepareStatement("SELECT ID FROM " + getHarvestingTableName() + " WHERE UPPER(DOCUUID)=?") --> Line_58 $$ st.setString(1, sUuid.toUpperCase()) [FD]
Line_14 $$ String sUuid = "" --> Line_58 $$ st.setString(1, sUuid.toUpperCase()) [FD]
Line_17 $$ sUuid = hr.getUuid() --> Line_58 $$ st.setString(1, sUuid.toUpperCase()) [FD]
Line_23 $$ sUuid = UuidUtil.makeUuid(true) --> Line_58 $$ st.setString(1, sUuid.toUpperCase()) [FD]
Line_55 $$ if (!isUpdate && nRowCount == 1) --> Line_59 $$ ResultSet genKeys = st.executeQuery() [CD]
Line_5 $$ PreparedStatement st = null --> Line_59 $$ ResultSet genKeys = st.executeQuery() [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_59 $$ ResultSet genKeys = st.executeQuery() [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_59 $$ ResultSet genKeys = st.executeQuery() [FD]
Line_57 $$ st = con.prepareStatement("SELECT ID FROM " + getHarvestingTableName() + " WHERE UPPER(DOCUUID)=?") --> Line_59 $$ ResultSet genKeys = st.executeQuery() [FD]
Line_55 $$ if (!isUpdate && nRowCount == 1) --> Line_60 $$ genKeys.next() [CD]
Line_59 $$ ResultSet genKeys = st.executeQuery() --> Line_60 $$ genKeys.next() [FD]
Line_55 $$ if (!isUpdate && nRowCount == 1) --> Line_61 $$ int nLocalId = genKeys.getInt(1) [CD]
Line_59 $$ ResultSet genKeys = st.executeQuery() --> Line_61 $$ int nLocalId = genKeys.getInt(1) [FD]
Line_55 $$ if (!isUpdate && nRowCount == 1) --> Line_62 $$ hr.setLocalId(nLocalId) [CD]
Line_7 $$ HrRecord hr = getRepository() --> Line_62 $$ hr.setLocalId(nLocalId) [FD]
Line_61 $$ int nLocalId = genKeys.getInt(1) --> Line_62 $$ hr.setLocalId(nLocalId) [FD]
Line_55 $$ if (!isUpdate && nRowCount == 1) --> Line_63 $$ hr.setUuid(sUuid) [CD]
Line_7 $$ HrRecord hr = getRepository() --> Line_63 $$ hr.setUuid(sUuid) [FD]
Line_14 $$ String sUuid = "" --> Line_63 $$ hr.setUuid(sUuid) [FD]
Line_17 $$ sUuid = hr.getUuid() --> Line_63 $$ hr.setUuid(sUuid) [FD]
Line_23 $$ sUuid = UuidUtil.makeUuid(true) --> Line_63 $$ hr.setUuid(sUuid) [FD]
Line_55 $$ if (!isUpdate && nRowCount == 1) --> Line_64 $$ closeResultSet(genKeys) [CD]
Line_59 $$ ResultSet genKeys = st.executeQuery() --> Line_64 $$ closeResultSet(genKeys) [FD]
Line_3 $$ Connection con = null --> Line_66 $$ con.commit() [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_66 $$ con.commit() [FD]
Line_7 $$ HrRecord hr = getRepository() --> Line_67 $$ if (nativeResource != null || (isUpdate && finableBeforeUpdate != hr.getFindable())) [FD]
Line_13 $$ boolean isUpdate = false --> Line_69 $$ if (nativeResource == null && isUpdate) [FD]
Line_21 $$ isUpdate = true --> Line_69 $$ if (nativeResource == null && isUpdate) [FD]
Line_69 $$ if (nativeResource == null && isUpdate) --> Line_70 $$ nativeResource = queryNative(con) [CD]
Line_2 $$ public void executeUpdate(Native nativeResource) throws Exception --> Line_70 $$ nativeResource = queryNative(con) [FD]
Line_3 $$ Connection con = null --> Line_70 $$ nativeResource = queryNative(con) [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_70 $$ nativeResource = queryNative(con) [FD]
Line_2 $$ public void executeUpdate(Native nativeResource) throws Exception --> Line_72 $$ if (nativeResource != null) [FD]
Line_70 $$ nativeResource = queryNative(con) --> Line_72 $$ if (nativeResource != null) [FD]
Line_72 $$ if (nativeResource != null) --> Line_73 $$ String content = nativeResource.getContent() [CD]
Line_2 $$ public void executeUpdate(Native nativeResource) throws Exception --> Line_73 $$ String content = nativeResource.getContent() [FD]
Line_70 $$ nativeResource = queryNative(con) --> Line_73 $$ String content = nativeResource.getContent() [FD]
Line_72 $$ if (nativeResource != null) --> Line_74 $$ String sourceUri = nativeResource.getSourceUri().asString() [CD]
Line_2 $$ public void executeUpdate(Native nativeResource) throws Exception --> Line_74 $$ String sourceUri = nativeResource.getSourceUri().asString() [FD]
Line_70 $$ nativeResource = queryNative(con) --> Line_74 $$ String sourceUri = nativeResource.getSourceUri().asString() [FD]
Line_72 $$ if (nativeResource != null) --> Line_75 $$ Publisher publisher = createPublisherOfRepository() [CD]
Line_72 $$ if (nativeResource != null) --> Line_76 $$ PublicationRequest publicationRequest = createPublicationRequest(publisher, content, sourceUri) [CD]
Line_75 $$ Publisher publisher = createPublisherOfRepository() --> Line_76 $$ PublicationRequest publicationRequest = createPublicationRequest(publisher, content, sourceUri) [FD]
Line_73 $$ String content = nativeResource.getContent() --> Line_76 $$ PublicationRequest publicationRequest = createPublicationRequest(publisher, content, sourceUri) [FD]
Line_74 $$ String sourceUri = nativeResource.getSourceUri().asString() --> Line_76 $$ PublicationRequest publicationRequest = createPublicationRequest(publisher, content, sourceUri) [FD]
Line_72 $$ if (nativeResource != null) --> Line_77 $$ publicationRequest.publish() [CD]
Line_76 $$ PublicationRequest publicationRequest = createPublicationRequest(publisher, content, sourceUri) --> Line_77 $$ publicationRequest.publish() [FD]
Line_84 $$ if (_repository.getIsHarvestDue()) --> Line_85 $$ harvestEngine.submit(getRequestContext(), _repository, null, _repository.getLastSyncDate()) [CD]
Line_83 $$ Harvester harvestEngine = getRequestContext().getApplicationContext().getHarvestingEngine() --> Line_85 $$ harvestEngine.submit(getRequestContext(), _repository, null, _repository.getLastSyncDate()) [FD]
Line_83 $$ Harvester harvestEngine = getRequestContext().getApplicationContext().getHarvestingEngine() --> Line_87 $$ harvestEngine.reselect() [FD]
Line_3 $$ Connection con = null --> Line_89 $$ if (con != null) [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_89 $$ if (con != null) [FD]
Line_89 $$ if (con != null) --> Line_90 $$ con.rollback() [CD]
Line_3 $$ Connection con = null --> Line_90 $$ con.rollback() [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_90 $$ con.rollback() [FD]
Line_5 $$ PreparedStatement st = null --> Line_94 $$ closeStatement(st) [FD]
Line_20 $$ st = con.prepareStatement(sql) --> Line_94 $$ closeStatement(st) [FD]
Line_26 $$ st = con.prepareStatement(sql) --> Line_94 $$ closeStatement(st) [FD]
Line_57 $$ st = con.prepareStatement("SELECT ID FROM " + getHarvestingTableName() + " WHERE UPPER(DOCUUID)=?") --> Line_94 $$ closeStatement(st) [FD]
Line_3 $$ Connection con = null --> Line_95 $$ if (con != null) [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_95 $$ if (con != null) [FD]
Line_95 $$ if (con != null) --> Line_96 $$ con.setAutoCommit(autoCommit) [CD]
Line_3 $$ Connection con = null --> Line_96 $$ con.setAutoCommit(autoCommit) [FD]
Line_9 $$ con = mc.getJdbcConnection() --> Line_96 $$ con.setAutoCommit(autoCommit) [FD]
Line_4 $$ boolean autoCommit = true --> Line_96 $$ con.setAutoCommit(autoCommit) [FD]
Line_10 $$ autoCommit = con.getAutoCommit() --> Line_96 $$ con.setAutoCommit(autoCommit) [FD]
