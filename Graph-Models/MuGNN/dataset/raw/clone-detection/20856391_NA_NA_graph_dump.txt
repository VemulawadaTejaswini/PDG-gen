Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_3 $$ logger.info("called for job: " + jobID) [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_4 $$ MessageContext mc = MessageContext.getCurrentContext() [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_5 $$ HttpServletRequest req = (HttpServletRequest) mc.getProperty(HTTPConstants.MC_HTTP_SERVLETREQUEST) [CD]
Line_4 $$ MessageContext mc = MessageContext.getCurrentContext() --> Line_5 $$ HttpServletRequest req = (HttpServletRequest) mc.getProperty(HTTPConstants.MC_HTTP_SERVLETREQUEST) [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_6 $$ String clientDN = (String) req.getAttribute(GSIConstants.GSI_USER_DN) [CD]
Line_5 $$ HttpServletRequest req = (HttpServletRequest) mc.getProperty(HTTPConstants.MC_HTTP_SERVLETREQUEST) --> Line_6 $$ String clientDN = (String) req.getAttribute(GSIConstants.GSI_USER_DN) [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_7 $$ if (clientDN != null) [CD]
Line_6 $$ String clientDN = (String) req.getAttribute(GSIConstants.GSI_USER_DN) --> Line_7 $$ if (clientDN != null) [FD]
Line_7 $$ if (clientDN != null) --> Line_8 $$ logger.info("Client's DN: " + clientDN) [CD]
Line_7 $$ if (clientDN != null) --> Line_10 $$ clientDN = "Unknown client" [CD]
Line_6 $$ String clientDN = (String) req.getAttribute(GSIConstants.GSI_USER_DN) --> Line_10 $$ clientDN = "Unknown client" [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_12 $$ String remoteIP = req.getRemoteAddr() [CD]
Line_5 $$ HttpServletRequest req = (HttpServletRequest) mc.getProperty(HTTPConstants.MC_HTTP_SERVLETREQUEST) --> Line_12 $$ String remoteIP = req.getRemoteAddr() [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_13 $$ SOAPService service = mc.getService() [CD]
Line_4 $$ MessageContext mc = MessageContext.getCurrentContext() --> Line_13 $$ SOAPService service = mc.getService() [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_14 $$ String serviceName = service.getName() [CD]
Line_13 $$ SOAPService service = mc.getService() --> Line_14 $$ String serviceName = service.getName() [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_15 $$ if (serviceName == null) [CD]
Line_14 $$ String serviceName = service.getName() --> Line_15 $$ if (serviceName == null) [FD]
Line_15 $$ if (serviceName == null) --> Line_16 $$ serviceName = "Unknown service" [CD]
Line_14 $$ String serviceName = service.getName() --> Line_16 $$ serviceName = "Unknown service" [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_18 $$ if (appConfig.isParallel()) [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_18 $$ if (appConfig.isParallel()) [FD]
Line_18 $$ if (appConfig.isParallel()) --> Line_19 $$ if (AppServiceImpl.drmaaInUse) [CD]
Line_19 $$ if (AppServiceImpl.drmaaInUse) --> Line_20 $$ if (AppServiceImpl.drmaaPE == null) [CD]
Line_20 $$ if (AppServiceImpl.drmaaPE == null) --> Line_21 $$ logger.error("drmaa.pe property must be specified in opal.properties " + "for parallel execution using DRMAA") [CD]
Line_19 $$ if (AppServiceImpl.drmaaInUse) --> Line_24 $$ if (AppServiceImpl.mpiRun == null) [CD]
Line_24 $$ if (AppServiceImpl.mpiRun == null) --> Line_25 $$ logger.error("mpi.run property must be specified in opal.properties " + "for parallel execution using DRMAA") [CD]
Line_19 $$ if (AppServiceImpl.drmaaInUse) --> Line_28 $$ if (!AppServiceImpl.globusInUse) [CD]
Line_28 $$ if (!AppServiceImpl.globusInUse) --> Line_29 $$ if (AppServiceImpl.mpiRun == null) [CD]
Line_29 $$ if (AppServiceImpl.mpiRun == null) --> Line_30 $$ logger.error("mpi.run property must be specified in opal.properties " + "for parallel execution without using Globus") [CD]
Line_18 $$ if (appConfig.isParallel()) --> Line_34 $$ if (jobIn.getNumProcs() == null) [CD]
Line_34 $$ if (jobIn.getNumProcs() == null) --> Line_35 $$ logger.error("Number of processes unspecified for parallel job") [CD]
Line_34 $$ if (jobIn.getNumProcs() == null) --> Line_37 $$ if (jobIn.getNumProcs().intValue() > AppServiceImpl.numProcs) [CD]
Line_37 $$ if (jobIn.getNumProcs().intValue() > AppServiceImpl.numProcs) --> Line_38 $$ logger.error("Processors required - " + jobIn.getNumProcs() + ", available - " + AppServiceImpl.numProcs) [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_50 $$ if (!AppServiceImpl.dbInUse) [CD]
Line_50 $$ if (!AppServiceImpl.dbInUse) --> Line_51 $$ AppServiceImpl.statusTable.put(jobID, status) [CD]
Line_50 $$ if (!AppServiceImpl.dbInUse) --> Line_53 $$ Connection conn = null [CD]
Line_53 $$ Connection conn = null --> Line_55 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) [FD]
Line_50 $$ if (!AppServiceImpl.dbInUse) --> Line_60 $$ String time = new SimpleDateFormat("MMM d, yyyy h:mm:ss a", Locale.US).format(new Date()) [CD]
Line_50 $$ if (!AppServiceImpl.dbInUse) --> Line_61 $$ String sqlStmt = "insert into job_status(job_id, code, message, base_url, " + "client_dn, client_ip, service_name, start_time, last_update) " + "values ('" + jobID + "', " + status.getCode() + ", " + "'" + status.getMessage() + "', " + "'" + status.getBaseURL() + "', " + "'" + clientDN + "', " + "'" + remoteIP + "', " + "'" + serviceName + "', " + "'" + time + "', " + "'" + time + "');" [CD]
Line_53 $$ Connection conn = null --> Line_63 $$ Statement stmt = conn.createStatement() [FD]
Line_55 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) --> Line_63 $$ Statement stmt = conn.createStatement() [FD]
Line_63 $$ Statement stmt = conn.createStatement() --> Line_64 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_61 $$ String sqlStmt = "insert into job_status(job_id, code, message, base_url, " + "client_dn, client_ip, service_name, start_time, last_update) " + "values ('" + jobID + "', " + status.getCode() + ", " + "'" + status.getMessage() + "', " + "'" + status.getBaseURL() + "', " + "'" + clientDN + "', " + "'" + remoteIP + "', " + "'" + serviceName + "', " + "'" + time + "', " + "'" + time + "');" --> Line_64 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_53 $$ Connection conn = null --> Line_65 $$ conn.close() [FD]
Line_55 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) --> Line_65 $$ conn.close() [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_71 $$ String args = appConfig.getDefaultArgs() [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_71 $$ String args = appConfig.getDefaultArgs() [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_72 $$ if (args == null) [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_72 $$ if (args == null) [FD]
Line_72 $$ if (args == null) --> Line_73 $$ args = jobIn.getArgList() [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_73 $$ args = jobIn.getArgList() [FD]
Line_72 $$ if (args == null) --> Line_75 $$ String userArgs = jobIn.getArgList() [CD]
Line_72 $$ if (args == null) --> Line_76 $$ args += " " + userArgs [CD]
Line_75 $$ String userArgs = jobIn.getArgList() --> Line_76 $$ args += " " + userArgs [FD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_76 $$ args += " " + userArgs [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_76 $$ args += " " + userArgs [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_78 $$ if (args != null) [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_78 $$ if (args != null) [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_78 $$ if (args != null) [FD]
Line_76 $$ args += " " + userArgs --> Line_78 $$ if (args != null) [FD]
Line_78 $$ if (args != null) --> Line_79 $$ args = args.trim() [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_79 $$ args = args.trim() [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_79 $$ args = args.trim() [FD]
Line_76 $$ args += " " + userArgs --> Line_79 $$ args = args.trim() [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_81 $$ logger.debug("Argument list: " + args) [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_82 $$ if (AppServiceImpl.drmaaInUse) [CD]
Line_82 $$ if (AppServiceImpl.drmaaInUse) --> Line_83 $$ String cmd = null [CD]
Line_82 $$ if (AppServiceImpl.drmaaInUse) --> Line_84 $$ String[] argsArray = null [CD]
Line_82 $$ if (AppServiceImpl.drmaaInUse) --> Line_85 $$ if (appConfig.isParallel()) [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_85 $$ if (appConfig.isParallel()) [FD]
Line_85 $$ if (appConfig.isParallel()) --> Line_86 $$ cmd = "/bin/sh" [CD]
Line_83 $$ String cmd = null --> Line_86 $$ cmd = "/bin/sh" [FD]
Line_85 $$ if (appConfig.isParallel()) --> Line_87 $$ String newArgs = AppServiceImpl.mpiRun + " -machinefile $TMPDIR/machines" + " -np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation() [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_87 $$ String newArgs = AppServiceImpl.mpiRun + " -machinefile $TMPDIR/machines" + " -np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation() [FD]
Line_85 $$ if (appConfig.isParallel()) --> Line_88 $$ if (args != null) [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_88 $$ if (args != null) [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_88 $$ if (args != null) [FD]
Line_76 $$ args += " " + userArgs --> Line_88 $$ if (args != null) [FD]
Line_79 $$ args = args.trim() --> Line_88 $$ if (args != null) [FD]
Line_88 $$ if (args != null) --> Line_89 $$ args = newArgs + " " + args [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_89 $$ args = newArgs + " " + args [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_89 $$ args = newArgs + " " + args [FD]
Line_76 $$ args += " " + userArgs --> Line_89 $$ args = newArgs + " " + args [FD]
Line_79 $$ args = args.trim() --> Line_89 $$ args = newArgs + " " + args [FD]
Line_88 $$ if (args != null) --> Line_91 $$ args = newArgs [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_91 $$ args = newArgs [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_91 $$ args = newArgs [FD]
Line_76 $$ args += " " + userArgs --> Line_91 $$ args = newArgs [FD]
Line_79 $$ args = args.trim() --> Line_91 $$ args = newArgs [FD]
Line_89 $$ args = newArgs + " " + args --> Line_91 $$ args = newArgs [FD]
Line_87 $$ String newArgs = AppServiceImpl.mpiRun + " -machinefile $TMPDIR/machines" + " -np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation() --> Line_91 $$ args = newArgs [FD]
Line_85 $$ if (appConfig.isParallel()) --> Line_93 $$ logger.debug("CMD: " + args) [CD]
Line_85 $$ if (appConfig.isParallel()) --> Line_94 $$ argsArray = new String[] [CD]
Line_84 $$ String[] argsArray = null --> Line_94 $$ argsArray = new String[] [FD]
Line_85 $$ if (appConfig.isParallel()) --> Line_96 $$ cmd = appConfig.getBinaryLocation() [CD]
Line_83 $$ String cmd = null --> Line_96 $$ cmd = appConfig.getBinaryLocation() [FD]
Line_86 $$ cmd = "/bin/sh" --> Line_96 $$ cmd = appConfig.getBinaryLocation() [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_96 $$ cmd = appConfig.getBinaryLocation() [FD]
Line_85 $$ if (appConfig.isParallel()) --> Line_97 $$ if (args == null) [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_97 $$ if (args == null) [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_97 $$ if (args == null) [FD]
Line_76 $$ args += " " + userArgs --> Line_97 $$ if (args == null) [FD]
Line_79 $$ args = args.trim() --> Line_97 $$ if (args == null) [FD]
Line_89 $$ args = newArgs + " " + args --> Line_97 $$ if (args == null) [FD]
Line_91 $$ args = newArgs --> Line_97 $$ if (args == null) [FD]
Line_85 $$ if (appConfig.isParallel()) --> Line_98 $$ logger.debug("CMD: " + cmd + " " + args) [CD]
Line_85 $$ if (appConfig.isParallel()) --> Line_99 $$ argsArray = args.split(" ") [CD]
Line_84 $$ String[] argsArray = null --> Line_99 $$ argsArray = args.split(" ") [FD]
Line_94 $$ argsArray = new String[] --> Line_99 $$ argsArray = args.split(" ") [FD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_99 $$ argsArray = args.split(" ") [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_99 $$ argsArray = args.split(" ") [FD]
Line_76 $$ args += " " + userArgs --> Line_99 $$ argsArray = args.split(" ") [FD]
Line_79 $$ args = args.trim() --> Line_99 $$ argsArray = args.split(" ") [FD]
Line_89 $$ args = newArgs + " " + args --> Line_99 $$ argsArray = args.split(" ") [FD]
Line_91 $$ args = newArgs --> Line_99 $$ argsArray = args.split(" ") [FD]
Line_97 $$ if (args == null) --> Line_99 $$ argsArray = args.split(" ") [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_104 $$ jt.setNativeSpecification("-pe " + AppServiceImpl.drmaaPE + " " + jobIn.getNumProcs()) [FD]
Line_103 $$ JobTemplate jt = session.createJobTemplate() --> Line_104 $$ jt.setNativeSpecification("-pe " + AppServiceImpl.drmaaPE + " " + jobIn.getNumProcs()) [FD]
Line_103 $$ JobTemplate jt = session.createJobTemplate() --> Line_105 $$ jt.setRemoteCommand(cmd) [FD]
Line_83 $$ String cmd = null --> Line_105 $$ jt.setRemoteCommand(cmd) [FD]
Line_86 $$ cmd = "/bin/sh" --> Line_105 $$ jt.setRemoteCommand(cmd) [FD]
Line_96 $$ cmd = appConfig.getBinaryLocation() --> Line_105 $$ jt.setRemoteCommand(cmd) [FD]
Line_103 $$ JobTemplate jt = session.createJobTemplate() --> Line_106 $$ jt.setArgs(argsArray) [FD]
Line_84 $$ String[] argsArray = null --> Line_106 $$ jt.setArgs(argsArray) [FD]
Line_94 $$ argsArray = new String[] --> Line_106 $$ jt.setArgs(argsArray) [FD]
Line_99 $$ argsArray = args.split(" ") --> Line_106 $$ jt.setArgs(argsArray) [FD]
Line_103 $$ JobTemplate jt = session.createJobTemplate() --> Line_107 $$ jt.setJobName(jobID) [FD]
Line_103 $$ JobTemplate jt = session.createJobTemplate() --> Line_108 $$ jt.setWorkingDirectory(workingDir) [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_108 $$ jt.setWorkingDirectory(workingDir) [FD]
Line_103 $$ JobTemplate jt = session.createJobTemplate() --> Line_109 $$ jt.setErrorPath(":" + workingDir + "/stderr.txt") [FD]
Line_103 $$ JobTemplate jt = session.createJobTemplate() --> Line_110 $$ jt.setOutputPath(":" + workingDir + "/stdout.txt") [FD]
Line_103 $$ JobTemplate jt = session.createJobTemplate() --> Line_111 $$ drmaaJobID = session.runJob(jt) [FD]
Line_103 $$ JobTemplate jt = session.createJobTemplate() --> Line_113 $$ session.deleteJobTemplate(jt) [FD]
Line_82 $$ if (AppServiceImpl.drmaaInUse) --> Line_128 $$ status.setCode(GramJob.STATUS_ACTIVE) [CD]
Line_82 $$ if (AppServiceImpl.drmaaInUse) --> Line_129 $$ status.setMessage("Execution in progress") [CD]
Line_82 $$ if (AppServiceImpl.drmaaInUse) --> Line_130 $$ if (AppServiceImpl.dbInUse) [CD]
Line_82 $$ if (AppServiceImpl.drmaaInUse) --> Line_138 $$ if (AppServiceImpl.globusInUse) [CD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_139 $$ String rsl = null [CD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_140 $$ if (appConfig.isParallel()) [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_140 $$ if (appConfig.isParallel()) [FD]
Line_140 $$ if (appConfig.isParallel()) --> Line_141 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(count=" + jobIn.getNumProcs() + ")" + "(jobtype=mpi)" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" [CD]
Line_139 $$ String rsl = null --> Line_141 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(count=" + jobIn.getNumProcs() + ")" + "(jobtype=mpi)" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_141 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(count=" + jobIn.getNumProcs() + ")" + "(jobtype=mpi)" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" [FD]
Line_140 $$ if (appConfig.isParallel()) --> Line_143 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" [CD]
Line_139 $$ String rsl = null --> Line_143 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" [FD]
Line_141 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(count=" + jobIn.getNumProcs() + ")" + "(jobtype=mpi)" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" --> Line_143 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_143 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" [FD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_145 $$ if (args != null) [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_145 $$ if (args != null) [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_145 $$ if (args != null) [FD]
Line_76 $$ args += " " + userArgs --> Line_145 $$ if (args != null) [FD]
Line_79 $$ args = args.trim() --> Line_145 $$ if (args != null) [FD]
Line_89 $$ args = newArgs + " " + args --> Line_145 $$ if (args != null) [FD]
Line_91 $$ args = newArgs --> Line_145 $$ if (args != null) [FD]
Line_97 $$ if (args == null) --> Line_145 $$ if (args != null) [FD]
Line_145 $$ if (args != null) --> Line_146 $$ args = "\"" + args + "\"" [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_146 $$ args = "\"" + args + "\"" [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_146 $$ args = "\"" + args + "\"" [FD]
Line_76 $$ args += " " + userArgs --> Line_146 $$ args = "\"" + args + "\"" [FD]
Line_79 $$ args = args.trim() --> Line_146 $$ args = "\"" + args + "\"" [FD]
Line_89 $$ args = newArgs + " " + args --> Line_146 $$ args = "\"" + args + "\"" [FD]
Line_91 $$ args = newArgs --> Line_146 $$ args = "\"" + args + "\"" [FD]
Line_97 $$ if (args == null) --> Line_146 $$ args = "\"" + args + "\"" [FD]
Line_145 $$ if (args != null) --> Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") [FD]
Line_76 $$ args += " " + userArgs --> Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") [FD]
Line_79 $$ args = args.trim() --> Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") [FD]
Line_89 $$ args = newArgs + " " + args --> Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") [FD]
Line_91 $$ args = newArgs --> Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") [FD]
Line_97 $$ if (args == null) --> Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") [FD]
Line_146 $$ args = "\"" + args + "\"" --> Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") [FD]
Line_145 $$ if (args != null) --> Line_148 $$ rsl += "(arguments=" + args + ")" [CD]
Line_139 $$ String rsl = null --> Line_148 $$ rsl += "(arguments=" + args + ")" [FD]
Line_141 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(count=" + jobIn.getNumProcs() + ")" + "(jobtype=mpi)" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" --> Line_148 $$ rsl += "(arguments=" + args + ")" [FD]
Line_143 $$ rsl = "&(directory=" + workingDir + ")" + "(executable=" + appConfig.getBinaryLocation() + ")" + "(stdout=stdout.txt)" + "(stderr=stderr.txt)" --> Line_148 $$ rsl += "(arguments=" + args + ")" [FD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_150 $$ logger.debug("RSL: " + rsl) [CD]
Line_154 $$ GSSCredential gssCred = new GlobusGSSCredentialImpl(globusCred, GSSCredential.INITIATE_AND_ACCEPT) --> Line_155 $$ job.setCredentials(gssCred) [FD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_174 $$ if (appConfig.isParallel()) [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_174 $$ if (appConfig.isParallel()) [FD]
Line_174 $$ if (appConfig.isParallel()) --> Line_175 $$ cmd = new String(AppServiceImpl.mpiRun + " " + "-np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation()) [CD]
Line_83 $$ String cmd = null --> Line_175 $$ cmd = new String(AppServiceImpl.mpiRun + " " + "-np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation()) [FD]
Line_86 $$ cmd = "/bin/sh" --> Line_175 $$ cmd = new String(AppServiceImpl.mpiRun + " " + "-np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation()) [FD]
Line_96 $$ cmd = appConfig.getBinaryLocation() --> Line_175 $$ cmd = new String(AppServiceImpl.mpiRun + " " + "-np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation()) [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_175 $$ cmd = new String(AppServiceImpl.mpiRun + " " + "-np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation()) [FD]
Line_174 $$ if (appConfig.isParallel()) --> Line_177 $$ cmd = new String(appConfig.getBinaryLocation()) [CD]
Line_83 $$ String cmd = null --> Line_177 $$ cmd = new String(appConfig.getBinaryLocation()) [FD]
Line_86 $$ cmd = "/bin/sh" --> Line_177 $$ cmd = new String(appConfig.getBinaryLocation()) [FD]
Line_96 $$ cmd = appConfig.getBinaryLocation() --> Line_177 $$ cmd = new String(appConfig.getBinaryLocation()) [FD]
Line_175 $$ cmd = new String(AppServiceImpl.mpiRun + " " + "-np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation()) --> Line_177 $$ cmd = new String(appConfig.getBinaryLocation()) [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_177 $$ cmd = new String(appConfig.getBinaryLocation()) [FD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_179 $$ if (args != null) [CD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_179 $$ if (args != null) [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_179 $$ if (args != null) [FD]
Line_76 $$ args += " " + userArgs --> Line_179 $$ if (args != null) [FD]
Line_79 $$ args = args.trim() --> Line_179 $$ if (args != null) [FD]
Line_89 $$ args = newArgs + " " + args --> Line_179 $$ if (args != null) [FD]
Line_91 $$ args = newArgs --> Line_179 $$ if (args != null) [FD]
Line_97 $$ if (args == null) --> Line_179 $$ if (args != null) [FD]
Line_146 $$ args = "\"" + args + "\"" --> Line_179 $$ if (args != null) [FD]
Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") --> Line_179 $$ if (args != null) [FD]
Line_179 $$ if (args != null) --> Line_180 $$ cmd += " " + args [CD]
Line_83 $$ String cmd = null --> Line_180 $$ cmd += " " + args [FD]
Line_86 $$ cmd = "/bin/sh" --> Line_180 $$ cmd += " " + args [FD]
Line_96 $$ cmd = appConfig.getBinaryLocation() --> Line_180 $$ cmd += " " + args [FD]
Line_175 $$ cmd = new String(AppServiceImpl.mpiRun + " " + "-np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation()) --> Line_180 $$ cmd += " " + args [FD]
Line_177 $$ cmd = new String(appConfig.getBinaryLocation()) --> Line_180 $$ cmd += " " + args [FD]
Line_71 $$ String args = appConfig.getDefaultArgs() --> Line_180 $$ cmd += " " + args [FD]
Line_73 $$ args = jobIn.getArgList() --> Line_180 $$ cmd += " " + args [FD]
Line_76 $$ args += " " + userArgs --> Line_180 $$ cmd += " " + args [FD]
Line_79 $$ args = args.trim() --> Line_180 $$ cmd += " " + args [FD]
Line_89 $$ args = newArgs + " " + args --> Line_180 $$ cmd += " " + args [FD]
Line_91 $$ args = newArgs --> Line_180 $$ cmd += " " + args [FD]
Line_97 $$ if (args == null) --> Line_180 $$ cmd += " " + args [FD]
Line_146 $$ args = "\"" + args + "\"" --> Line_180 $$ cmd += " " + args [FD]
Line_147 $$ args = args.replaceAll("[\\s]+", "\" \"") --> Line_180 $$ cmd += " " + args [FD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_182 $$ logger.debug("CMD: " + cmd) [CD]
Line_83 $$ String cmd = null --> Line_185 $$ proc = Runtime.getRuntime().exec(cmd, null, new File(workingDir)) [FD]
Line_86 $$ cmd = "/bin/sh" --> Line_185 $$ proc = Runtime.getRuntime().exec(cmd, null, new File(workingDir)) [FD]
Line_96 $$ cmd = appConfig.getBinaryLocation() --> Line_185 $$ proc = Runtime.getRuntime().exec(cmd, null, new File(workingDir)) [FD]
Line_175 $$ cmd = new String(AppServiceImpl.mpiRun + " " + "-np " + jobIn.getNumProcs() + " " + appConfig.getBinaryLocation()) --> Line_185 $$ proc = Runtime.getRuntime().exec(cmd, null, new File(workingDir)) [FD]
Line_177 $$ cmd = new String(appConfig.getBinaryLocation()) --> Line_185 $$ proc = Runtime.getRuntime().exec(cmd, null, new File(workingDir)) [FD]
Line_180 $$ cmd += " " + args --> Line_185 $$ proc = Runtime.getRuntime().exec(cmd, null, new File(workingDir)) [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_186 $$ stdoutThread = writeStdOut(proc, workingDir) [FD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_187 $$ stderrThread = writeStdErr(proc, workingDir) [FD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_202 $$ status.setCode(GramJob.STATUS_ACTIVE) [CD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_203 $$ status.setMessage("Execution in progress") [CD]
Line_138 $$ if (AppServiceImpl.globusInUse) --> Line_204 $$ if (AppServiceImpl.dbInUse) [CD]
Line_2 $$ public void launchJob(final String workingDir, final AppConfigType appConfig) throws FaultType --> Line_213 $$ new Thread() [CD]
Line_213 $$ new Thread() --> Line_224 $$ if (AppServiceImpl.drmaaInUse || !AppServiceImpl.globusInUse) [CD]
Line_224 $$ if (AppServiceImpl.drmaaInUse || !AppServiceImpl.globusInUse) --> Line_226 $$ status.setCode(GramJob.STATUS_STAGE_OUT) [CD]
Line_224 $$ if (AppServiceImpl.drmaaInUse || !AppServiceImpl.globusInUse) --> Line_227 $$ status.setMessage("Writing output metadata") [CD]
Line_224 $$ if (AppServiceImpl.drmaaInUse || !AppServiceImpl.globusInUse) --> Line_228 $$ if (AppServiceImpl.dbInUse) [CD]
Line_252 $$ File stdOutFile = new File(workingDir + File.separator + "stdout.txt") --> Line_253 $$ if (!stdOutFile.exists()) [FD]
Line_256 $$ File stdErrFile = new File(workingDir + File.separator + "stderr.txt") --> Line_257 $$ if (!stdErrFile.exists()) [FD]
Line_260 $$ if (AppServiceImpl.archiveData) --> Line_261 $$ logger.debug("Archiving output files") [CD]
Line_260 $$ if (AppServiceImpl.archiveData) --> Line_262 $$ File f = new File(workingDir) [CD]
Line_260 $$ if (AppServiceImpl.archiveData) --> Line_263 $$ File[] outputFiles = f.listFiles() [CD]
Line_262 $$ File f = new File(workingDir) --> Line_263 $$ File[] outputFiles = f.listFiles() [FD]
Line_260 $$ if (AppServiceImpl.archiveData) --> Line_264 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(workingDir + File.separator + jobID + ".zip")) [CD]
Line_260 $$ if (AppServiceImpl.archiveData) --> Line_265 $$ byte[] buf = new byte[1024] [CD]
Line_267 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_268 $$ FileInputStream in = new FileInputStream(outputFiles[i]) [CD]
Line_267 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_269 $$ out.putNextEntry(new ZipEntry(outputFiles[i].getName())) [CD]
Line_264 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(workingDir + File.separator + jobID + ".zip")) --> Line_269 $$ out.putNextEntry(new ZipEntry(outputFiles[i].getName())) [FD]
Line_267 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_270 $$ int len [CD]
Line_267 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_271 $$ while ((len = in.read(buf)) > 0) [CD]
Line_270 $$ int len --> Line_271 $$ while ((len = in.read(buf)) > 0) [FD]
Line_268 $$ FileInputStream in = new FileInputStream(outputFiles[i]) --> Line_271 $$ while ((len = in.read(buf)) > 0) [FD]
Line_265 $$ byte[] buf = new byte[1024] --> Line_271 $$ while ((len = in.read(buf)) > 0) [FD]
Line_271 $$ while ((len = in.read(buf)) > 0) --> Line_272 $$ out.write(buf, 0, len) [CD]
Line_271 $$ while ((len = in.read(buf)) > 0) --> Line_272 $$ out.write(buf, 0, len) [FD]
Line_264 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(workingDir + File.separator + jobID + ".zip")) --> Line_272 $$ out.write(buf, 0, len) [FD]
Line_265 $$ byte[] buf = new byte[1024] --> Line_272 $$ out.write(buf, 0, len) [FD]
Line_270 $$ int len --> Line_272 $$ out.write(buf, 0, len) [FD]
Line_267 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_274 $$ out.closeEntry() [CD]
Line_264 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(workingDir + File.separator + jobID + ".zip")) --> Line_274 $$ out.closeEntry() [FD]
Line_267 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_275 $$ in.close() [CD]
Line_268 $$ FileInputStream in = new FileInputStream(outputFiles[i]) --> Line_275 $$ in.close() [FD]
Line_264 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(workingDir + File.separator + jobID + ".zip")) --> Line_277 $$ out.close() [FD]
Line_262 $$ File f = new File(workingDir) --> Line_284 $$ File[] outputFiles = f.listFiles() [FD]
Line_267 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_287 $$ for (int i = 0; i < outputFiles.length; i++) [FD]
Line_287 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_288 $$ if (outputFiles[i].getName().equals("stdout.txt")) [CD]
Line_288 $$ if (outputFiles[i].getName().equals("stdout.txt")) --> Line_289 $$ outputs.setStdOut(new URI(AppServiceImpl.tomcatURL + jobID + "/stdout.txt")) [CD]
Line_288 $$ if (outputFiles[i].getName().equals("stdout.txt")) --> Line_290 $$ if (outputFiles[i].getName().equals("stderr.txt")) [CD]
Line_290 $$ if (outputFiles[i].getName().equals("stderr.txt")) --> Line_291 $$ outputs.setStdErr(new URI(AppServiceImpl.tomcatURL + jobID + "/stderr.txt")) [CD]
Line_290 $$ if (outputFiles[i].getName().equals("stderr.txt")) --> Line_293 $$ OutputFileType next = new OutputFileType() [CD]
Line_290 $$ if (outputFiles[i].getName().equals("stderr.txt")) --> Line_294 $$ next.setName(outputFiles[i].getName()) [CD]
Line_293 $$ OutputFileType next = new OutputFileType() --> Line_294 $$ next.setName(outputFiles[i].getName()) [FD]
Line_290 $$ if (outputFiles[i].getName().equals("stderr.txt")) --> Line_295 $$ next.setUrl(new URI(AppServiceImpl.tomcatURL + jobID + "/" + outputFiles[i].getName())) [CD]
Line_293 $$ OutputFileType next = new OutputFileType() --> Line_295 $$ next.setUrl(new URI(AppServiceImpl.tomcatURL + jobID + "/" + outputFiles[i].getName())) [FD]
Line_290 $$ if (outputFiles[i].getName().equals("stderr.txt")) --> Line_296 $$ outputFileObj[j++] = next [CD]
Line_293 $$ OutputFileType next = new OutputFileType() --> Line_296 $$ outputFileObj[j++] = next [FD]
Line_286 $$ int j = 0 --> Line_296 $$ outputFileObj[j++] = next [FD]
Line_285 $$ OutputFileType[] outputFileObj = new OutputFileType[outputFiles.length - 2] --> Line_299 $$ outputs.setOutputFile(outputFileObj) [FD]
Line_213 $$ new Thread() --> Line_316 $$ if (!AppServiceImpl.dbInUse) [CD]
Line_316 $$ if (!AppServiceImpl.dbInUse) --> Line_317 $$ AppServiceImpl.outputTable.put(jobID, outputs) [CD]
Line_316 $$ if (!AppServiceImpl.dbInUse) --> Line_319 $$ Connection conn = null [CD]
Line_319 $$ Connection conn = null --> Line_321 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) [FD]
Line_53 $$ Connection conn = null --> Line_321 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) [FD]
Line_55 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) --> Line_321 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) [FD]
Line_316 $$ if (!AppServiceImpl.dbInUse) --> Line_331 $$ String sqlStmt = "insert into job_output(job_id, std_out, std_err) " + "values ('" + jobID + "', " + "'" + outputs.getStdOut().toString() + "', " + "'" + outputs.getStdErr().toString() + "');" [CD]
Line_316 $$ if (!AppServiceImpl.dbInUse) --> Line_332 $$ Statement stmt = null [CD]
Line_332 $$ Statement stmt = null --> Line_334 $$ stmt = conn.createStatement() [FD]
Line_63 $$ Statement stmt = conn.createStatement() --> Line_334 $$ stmt = conn.createStatement() [FD]
Line_319 $$ Connection conn = null --> Line_334 $$ stmt = conn.createStatement() [FD]
Line_321 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) --> Line_334 $$ stmt = conn.createStatement() [FD]
Line_53 $$ Connection conn = null --> Line_334 $$ stmt = conn.createStatement() [FD]
Line_55 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) --> Line_334 $$ stmt = conn.createStatement() [FD]
Line_332 $$ Statement stmt = null --> Line_335 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_334 $$ stmt = conn.createStatement() --> Line_335 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_63 $$ Statement stmt = conn.createStatement() --> Line_335 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_331 $$ String sqlStmt = "insert into job_output(job_id, std_out, std_err) " + "values ('" + jobID + "', " + "'" + outputs.getStdOut().toString() + "', " + "'" + outputs.getStdErr().toString() + "');" --> Line_335 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_61 $$ String sqlStmt = "insert into job_status(job_id, code, message, base_url, " + "client_dn, client_ip, service_name, start_time, last_update) " + "values ('" + jobID + "', " + status.getCode() + ", " + "'" + status.getMessage() + "', " + "'" + status.getBaseURL() + "', " + "'" + clientDN + "', " + "'" + remoteIP + "', " + "'" + serviceName + "', " + "'" + time + "', " + "'" + time + "');" --> Line_335 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_316 $$ if (!AppServiceImpl.dbInUse) --> Line_350 $$ OutputFileType[] outputFile = outputs.getOutputFile() [CD]
Line_316 $$ if (!AppServiceImpl.dbInUse) --> Line_351 $$ for (int i = 0; i < outputFile.length; i++) [CD]
Line_287 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_351 $$ for (int i = 0; i < outputFile.length; i++) [FD]
Line_267 $$ for (int i = 0; i < outputFiles.length; i++) --> Line_351 $$ for (int i = 0; i < outputFile.length; i++) [FD]
Line_351 $$ for (int i = 0; i < outputFile.length; i++) --> Line_352 $$ sqlStmt = "insert into output_file(job_id, name, url) " + "values ('" + jobID + "', " + "'" + outputFile[i].getName() + "', " + "'" + outputFile[i].getUrl().toString() + "');" [CD]
Line_331 $$ String sqlStmt = "insert into job_output(job_id, std_out, std_err) " + "values ('" + jobID + "', " + "'" + outputs.getStdOut().toString() + "', " + "'" + outputs.getStdErr().toString() + "');" --> Line_352 $$ sqlStmt = "insert into output_file(job_id, name, url) " + "values ('" + jobID + "', " + "'" + outputFile[i].getName() + "', " + "'" + outputFile[i].getUrl().toString() + "');" [FD]
Line_61 $$ String sqlStmt = "insert into job_status(job_id, code, message, base_url, " + "client_dn, client_ip, service_name, start_time, last_update) " + "values ('" + jobID + "', " + status.getCode() + ", " + "'" + status.getMessage() + "', " + "'" + status.getBaseURL() + "', " + "'" + clientDN + "', " + "'" + remoteIP + "', " + "'" + serviceName + "', " + "'" + time + "', " + "'" + time + "');" --> Line_352 $$ sqlStmt = "insert into output_file(job_id, name, url) " + "values ('" + jobID + "', " + "'" + outputFile[i].getName() + "', " + "'" + outputFile[i].getUrl().toString() + "');" [FD]
Line_332 $$ Statement stmt = null --> Line_354 $$ stmt = conn.createStatement() [FD]
Line_334 $$ stmt = conn.createStatement() --> Line_354 $$ stmt = conn.createStatement() [FD]
Line_63 $$ Statement stmt = conn.createStatement() --> Line_354 $$ stmt = conn.createStatement() [FD]
Line_319 $$ Connection conn = null --> Line_354 $$ stmt = conn.createStatement() [FD]
Line_321 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) --> Line_354 $$ stmt = conn.createStatement() [FD]
Line_53 $$ Connection conn = null --> Line_354 $$ stmt = conn.createStatement() [FD]
Line_55 $$ conn = DriverManager.getConnection(AppServiceImpl.dbUrl, AppServiceImpl.dbUser, AppServiceImpl.dbPasswd) --> Line_354 $$ stmt = conn.createStatement() [FD]
Line_354 $$ stmt = conn.createStatement() --> Line_355 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_332 $$ Statement stmt = null --> Line_355 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_334 $$ stmt = conn.createStatement() --> Line_355 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_63 $$ Statement stmt = conn.createStatement() --> Line_355 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_352 $$ sqlStmt = "insert into output_file(job_id, name, url) " + "values ('" + jobID + "', " + "'" + outputFile[i].getName() + "', " + "'" + outputFile[i].getUrl().toString() + "');" --> Line_355 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_331 $$ String sqlStmt = "insert into job_output(job_id, std_out, std_err) " + "values ('" + jobID + "', " + "'" + outputs.getStdOut().toString() + "', " + "'" + outputs.getStdErr().toString() + "');" --> Line_355 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_61 $$ String sqlStmt = "insert into job_status(job_id, code, message, base_url, " + "client_dn, client_ip, service_name, start_time, last_update) " + "values ('" + jobID + "', " + status.getCode() + ", " + "'" + status.getMessage() + "', " + "'" + status.getBaseURL() + "', " + "'" + clientDN + "', " + "'" + remoteIP + "', " + "'" + serviceName + "', " + "'" + time + "', " + "'" + time + "');" --> Line_355 $$ stmt.executeUpdate(sqlStmt) [FD]
Line_213 $$ new Thread() --> Line_372 $$ if (terminatedOK()) [CD]
Line_372 $$ if (terminatedOK()) --> Line_373 $$ status.setCode(GramJob.STATUS_DONE) [CD]
Line_372 $$ if (terminatedOK()) --> Line_374 $$ status.setMessage("Execution complete - " + "check outputs to verify successful execution") [CD]
Line_372 $$ if (terminatedOK()) --> Line_376 $$ status.setCode(GramJob.STATUS_FAILED) [CD]
Line_372 $$ if (terminatedOK()) --> Line_377 $$ status.setMessage("Execution failed") [CD]
Line_213 $$ new Thread() --> Line_379 $$ if (AppServiceImpl.dbInUse) [CD]
Line_213 $$ new Thread() --> Line_392 $$ AppServiceImpl.jobTable.remove(jobID) [CD]
Line_213 $$ new Thread() --> Line_396 $$ logger.info("Execution complete for job: " + jobID) [CD]
