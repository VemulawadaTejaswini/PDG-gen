Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_3 $$ AGLog.d(TAG, "Connecting to HTTP service to obtain IP addresses") [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_4 $$ String host = (String) ctx.getResources().getText(R.string.gg_webservice_addr) [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_4 $$ String host = (String) ctx.getResources().getText(R.string.gg_webservice_addr) [FD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_5 $$ String ver = App.getInstance().getGGClientVersion() [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_6 $$ String url = host + "?fmnumber=" + Long.toString(userId) + "&lastmsg=0&version=" + ver [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_6 $$ String url = host + "?fmnumber=" + Long.toString(userId) + "&lastmsg=0&version=" + ver [FD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_7 $$ HttpClient httpClient = new DefaultHttpClient() [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_8 $$ AGLog.d(TAG, "connecting to http service at " + url) [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_9 $$ HttpGet request = new HttpGet(url) [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_10 $$ HttpResponse response = httpClient.execute(request) [CD]
Line_7 $$ HttpClient httpClient = new DefaultHttpClient() --> Line_10 $$ HttpResponse response = httpClient.execute(request) [FD]
Line_9 $$ HttpGet request = new HttpGet(url) --> Line_10 $$ HttpResponse response = httpClient.execute(request) [FD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_11 $$ AGLog.d(TAG, "response status:" + response.getStatusLine().getReasonPhrase()) [CD]
Line_10 $$ HttpResponse response = httpClient.execute(request) --> Line_11 $$ AGLog.d(TAG, "response status:" + response.getStatusLine().getReasonPhrase()) [FD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_12 $$ HttpEntity ent = response.getEntity() [CD]
Line_10 $$ HttpResponse response = httpClient.execute(request) --> Line_12 $$ HttpEntity ent = response.getEntity() [FD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_13 $$ if (ent == null) [CD]
Line_12 $$ HttpEntity ent = response.getEntity() --> Line_13 $$ if (ent == null) [FD]
Line_13 $$ if (ent == null) --> Line_14 $$ AGLog.e(TAG, "No response entity") [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_17 $$ InputStream content = ent.getContent() [CD]
Line_12 $$ HttpEntity ent = response.getEntity() --> Line_17 $$ InputStream content = ent.getContent() [FD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_18 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(content)) [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_19 $$ String line = reader.readLine() [CD]
Line_18 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(content)) --> Line_19 $$ String line = reader.readLine() [FD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_20 $$ AGLog.d(TAG, "response: " + line) [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_21 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ") [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_22 $$ ArrayList<InetSocketAddress> result = new ArrayList<InetSocketAddress>() [CD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_23 $$ while (tokenizer.hasMoreTokens()) [CD]
Line_21 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ") --> Line_23 $$ while (tokenizer.hasMoreTokens()) [FD]
Line_23 $$ while (tokenizer.hasMoreTokens()) --> Line_24 $$ StringTokenizer addrport = new StringTokenizer(tokenizer.nextToken(), ":") [CD]
Line_21 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ") --> Line_24 $$ StringTokenizer addrport = new StringTokenizer(tokenizer.nextToken(), ":") [FD]
Line_23 $$ while (tokenizer.hasMoreTokens()) --> Line_25 $$ String addrStr = addrport.nextToken() [CD]
Line_24 $$ StringTokenizer addrport = new StringTokenizer(tokenizer.nextToken(), ":") --> Line_25 $$ String addrStr = addrport.nextToken() [FD]
Line_23 $$ while (tokenizer.hasMoreTokens()) --> Line_26 $$ if (InetAddressUtils.isIPv4Address(addrStr)) [CD]
Line_25 $$ String addrStr = addrport.nextToken() --> Line_26 $$ if (InetAddressUtils.isIPv4Address(addrStr)) [FD]
Line_26 $$ if (InetAddressUtils.isIPv4Address(addrStr)) --> Line_27 $$ AGLog.d(TAG, "Address decoded successfully: " + addrStr) [CD]
Line_26 $$ if (InetAddressUtils.isIPv4Address(addrStr)) --> Line_29 $$ AGLog.w(TAG, "Failed to decode address: " + addrStr) [CD]
Line_23 $$ while (tokenizer.hasMoreTokens()) --> Line_32 $$ String portStr [CD]
Line_23 $$ while (tokenizer.hasMoreTokens()) --> Line_33 $$ if (addrport.hasMoreTokens()) [CD]
Line_24 $$ StringTokenizer addrport = new StringTokenizer(tokenizer.nextToken(), ":") --> Line_33 $$ if (addrport.hasMoreTokens()) [FD]
Line_33 $$ if (addrport.hasMoreTokens()) --> Line_34 $$ portStr = addrport.nextToken() [CD]
Line_32 $$ String portStr --> Line_34 $$ portStr = addrport.nextToken() [FD]
Line_24 $$ StringTokenizer addrport = new StringTokenizer(tokenizer.nextToken(), ":") --> Line_34 $$ portStr = addrport.nextToken() [FD]
Line_33 $$ if (addrport.hasMoreTokens()) --> Line_36 $$ portStr = (String) ctx.getResources().getText(R.string.gg_default_port) [CD]
Line_32 $$ String portStr --> Line_36 $$ portStr = (String) ctx.getResources().getText(R.string.gg_default_port) [FD]
Line_34 $$ portStr = addrport.nextToken() --> Line_36 $$ portStr = (String) ctx.getResources().getText(R.string.gg_default_port) [FD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_36 $$ portStr = (String) ctx.getResources().getText(R.string.gg_default_port) [FD]
Line_23 $$ while (tokenizer.hasMoreTokens()) --> Line_38 $$ AGLog.d(TAG, "Port decoded successfully: " + portStr) [CD]
Line_23 $$ while (tokenizer.hasMoreTokens()) --> Line_39 $$ short port = Short.decode(portStr) [CD]
Line_32 $$ String portStr --> Line_39 $$ short port = Short.decode(portStr) [FD]
Line_34 $$ portStr = addrport.nextToken() --> Line_39 $$ short port = Short.decode(portStr) [FD]
Line_36 $$ portStr = (String) ctx.getResources().getText(R.string.gg_default_port) --> Line_39 $$ short port = Short.decode(portStr) [FD]
Line_23 $$ while (tokenizer.hasMoreTokens()) --> Line_40 $$ result.add(new InetSocketAddress(addrStr, port)) [CD]
Line_22 $$ ArrayList<InetSocketAddress> result = new ArrayList<InetSocketAddress>() --> Line_40 $$ result.add(new InetSocketAddress(addrStr, port)) [FD]
Line_2 $$ static Collection<InetSocketAddress> getAddresses(Context ctx, long userId) throws Exception --> Line_42 $$ return result [CD]
