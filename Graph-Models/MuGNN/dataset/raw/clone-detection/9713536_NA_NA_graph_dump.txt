Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_3 $$ final String url = request.getRequestURL().toString() [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_3 $$ final String url = request.getRequestURL().toString() [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_4 $$ if (url.endsWith("/favicon.ico")) [CD]
Line_3 $$ final String url = request.getRequestURL().toString() --> Line_4 $$ if (url.endsWith("/favicon.ico")) [FD]
Line_4 $$ if (url.endsWith("/favicon.ico")) --> Line_5 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_5 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND) [FD]
Line_4 $$ if (url.endsWith("/favicon.ico")) --> Line_6 $$ return [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_8 $$ if (url.contains("/delay")) [CD]
Line_3 $$ final String url = request.getRequestURL().toString() --> Line_8 $$ if (url.contains("/delay")) [FD]
Line_8 $$ if (url.contains("/delay")) --> Line_9 $$ final String delay = StringUtils.substringBetween(url, "/delay", "/") [CD]
Line_3 $$ final String url = request.getRequestURL().toString() --> Line_9 $$ final String delay = StringUtils.substringBetween(url, "/delay", "/") [FD]
Line_8 $$ if (url.contains("/delay")) --> Line_10 $$ final int ms = Integer.parseInt(delay) [CD]
Line_9 $$ final String delay = StringUtils.substringBetween(url, "/delay", "/") --> Line_10 $$ final int ms = Integer.parseInt(delay) [FD]
Line_8 $$ if (url.contains("/delay")) --> Line_11 $$ if (LOG.isDebugEnabled()) [CD]
Line_11 $$ if (LOG.isDebugEnabled()) --> Line_12 $$ LOG.debug("Sleeping for " + ms + " before to deliver " + url) [CD]
Line_8 $$ if (url.contains("/delay")) --> Line_14 $$ Thread.sleep(ms) [CD]
Line_10 $$ final int ms = Integer.parseInt(delay) --> Line_14 $$ Thread.sleep(ms) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_16 $$ final URL requestedUrl = new URL(url) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_17 $$ final WebRequest webRequest = new WebRequest(requestedUrl) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_18 $$ webRequest.setHttpMethod(HttpMethod.valueOf(request.getMethod())) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_18 $$ webRequest.setHttpMethod(HttpMethod.valueOf(request.getMethod())) [FD]
Line_17 $$ final WebRequest webRequest = new WebRequest(requestedUrl) --> Line_18 $$ webRequest.setHttpMethod(HttpMethod.valueOf(request.getMethod())) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_19 $$ for (final Enumeration<String> en = request.getHeaderNames(); en.hasMoreElements(); ) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_19 $$ for (final Enumeration<String> en = request.getHeaderNames(); en.hasMoreElements(); ) [FD]
Line_19 $$ for (final Enumeration<String> en = request.getHeaderNames(); en.hasMoreElements(); ) --> Line_20 $$ final String headerName = en.nextElement() [CD]
Line_19 $$ for (final Enumeration<String> en = request.getHeaderNames(); en.hasMoreElements(); ) --> Line_20 $$ final String headerName = en.nextElement() [FD]
Line_19 $$ for (final Enumeration<String> en = request.getHeaderNames(); en.hasMoreElements(); ) --> Line_21 $$ final String headerValue = request.getHeader(headerName) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_21 $$ final String headerValue = request.getHeader(headerName) [FD]
Line_20 $$ final String headerName = en.nextElement() --> Line_21 $$ final String headerValue = request.getHeader(headerName) [FD]
Line_19 $$ for (final Enumeration<String> en = request.getHeaderNames(); en.hasMoreElements(); ) --> Line_22 $$ webRequest.setAdditionalHeader(headerName, headerValue) [CD]
Line_17 $$ final WebRequest webRequest = new WebRequest(requestedUrl) --> Line_22 $$ webRequest.setAdditionalHeader(headerName, headerValue) [FD]
Line_20 $$ final String headerName = en.nextElement() --> Line_22 $$ webRequest.setAdditionalHeader(headerName, headerValue) [FD]
Line_21 $$ final String headerValue = request.getHeader(headerName) --> Line_22 $$ webRequest.setAdditionalHeader(headerName, headerValue) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_24 $$ final List<NameValuePair> requestParameters = new ArrayList<NameValuePair>() [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_25 $$ for (final Enumeration<String> paramNames = request.getParameterNames(); paramNames.hasMoreElements(); ) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_25 $$ for (final Enumeration<String> paramNames = request.getParameterNames(); paramNames.hasMoreElements(); ) [FD]
Line_25 $$ for (final Enumeration<String> paramNames = request.getParameterNames(); paramNames.hasMoreElements(); ) --> Line_26 $$ final String name = paramNames.nextElement() [CD]
Line_25 $$ for (final Enumeration<String> paramNames = request.getParameterNames(); paramNames.hasMoreElements(); ) --> Line_26 $$ final String name = paramNames.nextElement() [FD]
Line_25 $$ for (final Enumeration<String> paramNames = request.getParameterNames(); paramNames.hasMoreElements(); ) --> Line_27 $$ final String[] values = request.getParameterValues(name) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_27 $$ final String[] values = request.getParameterValues(name) [FD]
Line_26 $$ final String name = paramNames.nextElement() --> Line_27 $$ final String[] values = request.getParameterValues(name) [FD]
Line_24 $$ final List<NameValuePair> requestParameters = new ArrayList<NameValuePair>() --> Line_29 $$ requestParameters.add(new NameValuePair(name, value)) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_32 $$ if ("PUT".equals(request.getMethod()) && request.getContentLength() > 0) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_32 $$ if ("PUT".equals(request.getMethod()) && request.getContentLength() > 0) [FD]
Line_32 $$ if ("PUT".equals(request.getMethod()) && request.getContentLength() > 0) --> Line_33 $$ final byte[] buffer = new byte[request.getContentLength()] [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_33 $$ final byte[] buffer = new byte[request.getContentLength()] [FD]
Line_32 $$ if ("PUT".equals(request.getMethod()) && request.getContentLength() > 0) --> Line_34 $$ request.getInputStream().readLine(buffer, 0, buffer.length) [CD]
Line_33 $$ final byte[] buffer = new byte[request.getContentLength()] --> Line_34 $$ request.getInputStream().readLine(buffer, 0, buffer.length) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_34 $$ request.getInputStream().readLine(buffer, 0, buffer.length) [FD]
Line_32 $$ if ("PUT".equals(request.getMethod()) && request.getContentLength() > 0) --> Line_35 $$ webRequest.setRequestBody(new String(buffer)) [CD]
Line_17 $$ final WebRequest webRequest = new WebRequest(requestedUrl) --> Line_35 $$ webRequest.setRequestBody(new String(buffer)) [FD]
Line_32 $$ if ("PUT".equals(request.getMethod()) && request.getContentLength() > 0) --> Line_37 $$ webRequest.setRequestParameters(requestParameters) [CD]
Line_17 $$ final WebRequest webRequest = new WebRequest(requestedUrl) --> Line_37 $$ webRequest.setRequestParameters(requestParameters) [FD]
Line_24 $$ final List<NameValuePair> requestParameters = new ArrayList<NameValuePair>() --> Line_37 $$ webRequest.setRequestParameters(requestParameters) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_39 $$ final WebResponse resp = MockConnection_.getResponse(webRequest) [CD]
Line_17 $$ final WebRequest webRequest = new WebRequest(requestedUrl) --> Line_39 $$ final WebResponse resp = MockConnection_.getResponse(webRequest) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_40 $$ response.setStatus(resp.getStatusCode()) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_40 $$ response.setStatus(resp.getStatusCode()) [FD]
Line_39 $$ final WebResponse resp = MockConnection_.getResponse(webRequest) --> Line_40 $$ response.setStatus(resp.getStatusCode()) [FD]
Line_39 $$ final WebResponse resp = MockConnection_.getResponse(webRequest) --> Line_41 $$ for (final NameValuePair responseHeader : resp.getResponseHeaders()) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_42 $$ response.addHeader(responseHeader.getName(), responseHeader.getValue()) [FD]
Line_41 $$ for (final NameValuePair responseHeader : resp.getResponseHeaders()) --> Line_42 $$ response.addHeader(responseHeader.getName(), responseHeader.getValue()) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_44 $$ if (WriteContentAsBytes_) [CD]
Line_44 $$ if (WriteContentAsBytes_) --> Line_45 $$ IOUtils.copy(resp.getContentAsStream(), response.getOutputStream()) [CD]
Line_39 $$ final WebResponse resp = MockConnection_.getResponse(webRequest) --> Line_45 $$ IOUtils.copy(resp.getContentAsStream(), response.getOutputStream()) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_45 $$ IOUtils.copy(resp.getContentAsStream(), response.getOutputStream()) [FD]
Line_44 $$ if (WriteContentAsBytes_) --> Line_47 $$ final String newContent = getModifiedContent(resp.getContentAsString()) [CD]
Line_39 $$ final WebResponse resp = MockConnection_.getResponse(webRequest) --> Line_47 $$ final String newContent = getModifiedContent(resp.getContentAsString()) [FD]
Line_44 $$ if (WriteContentAsBytes_) --> Line_48 $$ final String contentCharset = resp.getContentCharset() [CD]
Line_39 $$ final WebResponse resp = MockConnection_.getResponse(webRequest) --> Line_48 $$ final String contentCharset = resp.getContentCharset() [FD]
Line_44 $$ if (WriteContentAsBytes_) --> Line_49 $$ response.setCharacterEncoding(contentCharset) [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_49 $$ response.setCharacterEncoding(contentCharset) [FD]
Line_48 $$ final String contentCharset = resp.getContentCharset() --> Line_49 $$ response.setCharacterEncoding(contentCharset) [FD]
Line_44 $$ if (WriteContentAsBytes_) --> Line_50 $$ response.getWriter().print(newContent) [CD]
Line_47 $$ final String newContent = getModifiedContent(resp.getContentAsString()) --> Line_50 $$ response.getWriter().print(newContent) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_50 $$ response.getWriter().print(newContent) [FD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_52 $$ response.flushBuffer() [CD]
Line_2 $$ private void doService(final HttpServletRequest request, final HttpServletResponse response) throws Exception --> Line_52 $$ response.flushBuffer() [FD]
