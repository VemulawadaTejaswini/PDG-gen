Line_2 $$ public static boolean copyFile(String source, String destination, boolean replace) --> Line_3 $$ File sourceFile = new File(source) [CD]
Line_2 $$ public static boolean copyFile(String source, String destination, boolean replace) --> Line_4 $$ File destinationFile = new File(destination) [CD]
Line_2 $$ public static boolean copyFile(String source, String destination, boolean replace) --> Line_5 $$ if (sourceFile.isDirectory() || destinationFile.isDirectory()) [CD]
Line_3 $$ File sourceFile = new File(source) --> Line_5 $$ if (sourceFile.isDirectory() || destinationFile.isDirectory()) [FD]
Line_4 $$ File destinationFile = new File(destination) --> Line_5 $$ if (sourceFile.isDirectory() || destinationFile.isDirectory()) [FD]
Line_2 $$ public static boolean copyFile(String source, String destination, boolean replace) --> Line_6 $$ if (destinationFile.isFile() && !replace) [CD]
Line_2 $$ public static boolean copyFile(String source, String destination, boolean replace) --> Line_6 $$ if (destinationFile.isFile() && !replace) [FD]
Line_4 $$ File destinationFile = new File(destination) --> Line_6 $$ if (destinationFile.isFile() && !replace) [FD]
Line_2 $$ public static boolean copyFile(String source, String destination, boolean replace) --> Line_7 $$ if (!sourceFile.isFile()) [CD]
Line_3 $$ File sourceFile = new File(source) --> Line_7 $$ if (!sourceFile.isFile()) [FD]
Line_2 $$ public static boolean copyFile(String source, String destination, boolean replace) --> Line_8 $$ destinationFile.delete() [CD]
Line_4 $$ File destinationFile = new File(destination) --> Line_8 $$ destinationFile.delete() [FD]
Line_4 $$ File destinationFile = new File(destination) --> Line_10 $$ File dir = destinationFile.getParentFile() [FD]
Line_10 $$ File dir = destinationFile.getParentFile() --> Line_11 $$ while (dir != null && !dir.exists()) [FD]
Line_11 $$ while (dir != null && !dir.exists()) --> Line_12 $$ dir.mkdir() [CD]
Line_10 $$ File dir = destinationFile.getParentFile() --> Line_12 $$ dir.mkdir() [FD]
Line_15 $$ DataInputStream inStream = new DataInputStream(new BufferedInputStream(new FileInputStream(sourceFile), 10240)) --> Line_17 $$ while (inStream.available() > 0) [FD]
Line_17 $$ while (inStream.available() > 0) --> Line_18 $$ outStream.write(inStream.readUnsignedByte()) [CD]
Line_14 $$ DataOutputStream outStream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destinationFile), 10240)) --> Line_18 $$ outStream.write(inStream.readUnsignedByte()) [FD]
Line_15 $$ DataInputStream inStream = new DataInputStream(new BufferedInputStream(new FileInputStream(sourceFile), 10240)) --> Line_18 $$ outStream.write(inStream.readUnsignedByte()) [FD]
Line_15 $$ DataInputStream inStream = new DataInputStream(new BufferedInputStream(new FileInputStream(sourceFile), 10240)) --> Line_22 $$ inStream.close() [FD]
Line_14 $$ DataOutputStream outStream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(destinationFile), 10240)) --> Line_23 $$ outStream.close() [FD]
Line_3 $$ File sourceFile = new File(source) --> Line_25 $$ throw new FailedException("Failed to copy file " + sourceFile.getAbsolutePath() + " to " + destinationFile.getAbsolutePath(), ex).setFile(destinationFile.getAbsolutePath()) [FD]
Line_4 $$ File destinationFile = new File(destination) --> Line_25 $$ throw new FailedException("Failed to copy file " + sourceFile.getAbsolutePath() + " to " + destinationFile.getAbsolutePath(), ex).setFile(destinationFile.getAbsolutePath()) [FD]
Line_2 $$ public static boolean copyFile(String source, String destination, boolean replace) --> Line_27 $$ return true [CD]
