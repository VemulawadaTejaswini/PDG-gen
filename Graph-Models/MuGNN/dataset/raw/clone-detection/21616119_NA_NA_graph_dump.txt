Line_2 $$ public Sequence eval(Sequence[] args, Sequence contextSequence) throws XPathException --> Line_3 $$ GrammarPool grammarpool = (GrammarPool) config.getProperty(XMLReaderObjectFactory.GRAMMER_POOL) [CD]
Line_2 $$ public Sequence eval(Sequence[] args, Sequence contextSequence) throws XPathException --> Line_4 $$ if (isCalledAs("clear-grammar-cache")) [CD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_5 $$ Sequence result = new ValueSequence() [CD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_6 $$ int before = countTotalNumberOfGrammar(grammarpool) [CD]
Line_3 $$ GrammarPool grammarpool = (GrammarPool) config.getProperty(XMLReaderObjectFactory.GRAMMER_POOL) --> Line_6 $$ int before = countTotalNumberOfGrammar(grammarpool) [FD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_7 $$ LOG.debug("Clearing " + before + " grammars") [CD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_8 $$ clearGrammarPool(grammarpool) [CD]
Line_3 $$ GrammarPool grammarpool = (GrammarPool) config.getProperty(XMLReaderObjectFactory.GRAMMER_POOL) --> Line_8 $$ clearGrammarPool(grammarpool) [FD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_9 $$ int after = countTotalNumberOfGrammar(grammarpool) [CD]
Line_3 $$ GrammarPool grammarpool = (GrammarPool) config.getProperty(XMLReaderObjectFactory.GRAMMER_POOL) --> Line_9 $$ int after = countTotalNumberOfGrammar(grammarpool) [FD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_10 $$ LOG.debug("Remained " + after + " grammars") [CD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_11 $$ int delta = before - after [CD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_12 $$ result.add(new IntegerValue(delta)) [CD]
Line_5 $$ Sequence result = new ValueSequence() --> Line_12 $$ result.add(new IntegerValue(delta)) [FD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_13 $$ return result [CD]
Line_4 $$ if (isCalledAs("clear-grammar-cache")) --> Line_14 $$ if (isCalledAs("show-grammar-cache")) [CD]
Line_14 $$ if (isCalledAs("show-grammar-cache")) --> Line_15 $$ MemTreeBuilder builder = context.getDocumentBuilder() [CD]
Line_14 $$ if (isCalledAs("show-grammar-cache")) --> Line_16 $$ NodeImpl result = writeReport(grammarpool, builder) [CD]
Line_3 $$ GrammarPool grammarpool = (GrammarPool) config.getProperty(XMLReaderObjectFactory.GRAMMER_POOL) --> Line_16 $$ NodeImpl result = writeReport(grammarpool, builder) [FD]
Line_15 $$ MemTreeBuilder builder = context.getDocumentBuilder() --> Line_16 $$ NodeImpl result = writeReport(grammarpool, builder) [FD]
Line_14 $$ if (isCalledAs("show-grammar-cache")) --> Line_17 $$ return result [CD]
Line_14 $$ if (isCalledAs("show-grammar-cache")) --> Line_18 $$ if (isCalledAs("pre-parse-grammar")) [CD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_19 $$ return Sequence.EMPTY_SEQUENCE [CD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_20 $$ XMLGrammarPreparser parser = new XMLGrammarPreparser() [CD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_21 $$ parser.registerPreparser(TYPE_XSD, null) [CD]
Line_20 $$ XMLGrammarPreparser parser = new XMLGrammarPreparser() --> Line_21 $$ parser.registerPreparser(TYPE_XSD, null) [FD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_22 $$ List<Grammar> allGrammars = new ArrayList<Grammar>() [CD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_23 $$ for (SequenceIterator i = args[0].iterate(); i.hasNext(); ) [CD]
Line_23 $$ for (SequenceIterator i = args[0].iterate(); i.hasNext(); ) --> Line_24 $$ String url = i.nextItem().getStringValue() [CD]
Line_23 $$ for (SequenceIterator i = args[0].iterate(); i.hasNext(); ) --> Line_24 $$ String url = i.nextItem().getStringValue() [FD]
Line_23 $$ for (SequenceIterator i = args[0].iterate(); i.hasNext(); ) --> Line_25 $$ if (url.startsWith("/")) [CD]
Line_24 $$ String url = i.nextItem().getStringValue() --> Line_25 $$ if (url.startsWith("/")) [FD]
Line_25 $$ if (url.startsWith("/")) --> Line_26 $$ url = "xmldb:exist://" + url [CD]
Line_24 $$ String url = i.nextItem().getStringValue() --> Line_26 $$ url = "xmldb:exist://" + url [FD]
Line_23 $$ for (SequenceIterator i = args[0].iterate(); i.hasNext(); ) --> Line_28 $$ LOG.debug("Parsing " + url) [CD]
Line_24 $$ String url = i.nextItem().getStringValue() --> Line_30 $$ if (url.endsWith(".xsd")) [FD]
Line_26 $$ url = "xmldb:exist://" + url --> Line_30 $$ if (url.endsWith(".xsd")) [FD]
Line_30 $$ if (url.endsWith(".xsd")) --> Line_31 $$ InputStream is = new URL(url).openStream() [CD]
Line_30 $$ if (url.endsWith(".xsd")) --> Line_32 $$ XMLInputSource xis = new XMLInputSource(null, url, url, is, null) [CD]
Line_30 $$ if (url.endsWith(".xsd")) --> Line_33 $$ Grammar schema = parser.preparseGrammar(TYPE_XSD, xis) [CD]
Line_20 $$ XMLGrammarPreparser parser = new XMLGrammarPreparser() --> Line_33 $$ Grammar schema = parser.preparseGrammar(TYPE_XSD, xis) [FD]
Line_32 $$ XMLInputSource xis = new XMLInputSource(null, url, url, is, null) --> Line_33 $$ Grammar schema = parser.preparseGrammar(TYPE_XSD, xis) [FD]
Line_30 $$ if (url.endsWith(".xsd")) --> Line_34 $$ is.close() [CD]
Line_31 $$ InputStream is = new URL(url).openStream() --> Line_34 $$ is.close() [FD]
Line_30 $$ if (url.endsWith(".xsd")) --> Line_35 $$ allGrammars.add(schema) [CD]
Line_22 $$ List<Grammar> allGrammars = new ArrayList<Grammar>() --> Line_35 $$ allGrammars.add(schema) [FD]
Line_33 $$ Grammar schema = parser.preparseGrammar(TYPE_XSD, xis) --> Line_35 $$ allGrammars.add(schema) [FD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_47 $$ LOG.debug("Successfully parsed " + allGrammars.size() + " grammars.") [CD]
Line_22 $$ List<Grammar> allGrammars = new ArrayList<Grammar>() --> Line_47 $$ LOG.debug("Successfully parsed " + allGrammars.size() + " grammars.") [FD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_48 $$ Grammar grammars[] = new Grammar[allGrammars.size()] [CD]
Line_22 $$ List<Grammar> allGrammars = new ArrayList<Grammar>() --> Line_48 $$ Grammar grammars[] = new Grammar[allGrammars.size()] [FD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_49 $$ grammars = allGrammars.toArray(grammars) [CD]
Line_22 $$ List<Grammar> allGrammars = new ArrayList<Grammar>() --> Line_49 $$ grammars = allGrammars.toArray(grammars) [FD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_50 $$ grammarpool.cacheGrammars(TYPE_XSD, grammars) [CD]
Line_3 $$ GrammarPool grammarpool = (GrammarPool) config.getProperty(XMLReaderObjectFactory.GRAMMER_POOL) --> Line_50 $$ grammarpool.cacheGrammars(TYPE_XSD, grammars) [FD]
Line_5 $$ Sequence result = new ValueSequence() --> Line_53 $$ result.add(new StringValue(one.getGrammarDescription().getNamespace())) [FD]
Line_52 $$ for (Grammar one : grammars) --> Line_53 $$ result.add(new StringValue(one.getGrammarDescription().getNamespace())) [FD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_55 $$ return result [CD]
Line_18 $$ if (isCalledAs("pre-parse-grammar")) --> Line_57 $$ LOG.error("function not found error") [CD]
Line_26 $$ url = "xmldb:exist://" + url --> Line_25 $$ if (url.startsWith("/")) [FD]
