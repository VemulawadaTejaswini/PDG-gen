Line_2 $$ public static void main(String[] args) throws Exception --> Line_3 $$ if (args.length < 3) [CD]
Line_3 $$ if (args.length < 3) --> Line_4 $$ usage(System.out) [CD]
Line_3 $$ if (args.length < 3) --> Line_5 $$ System.exit(1) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_7 $$ final File tmpFile = File.createTempFile("sej", null) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_8 $$ tmpFile.deleteOnExit() [CD]
Line_7 $$ final File tmpFile = File.createTempFile("sej", null) --> Line_8 $$ tmpFile.deleteOnExit() [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_9 $$ final FileOutputStream destination = new FileOutputStream(tmpFile) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_10 $$ final String mainClass = args[1] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_11 $$ final Collection jars = new LinkedList() [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_12 $$ for (int i = 2; i < args.length; i++) [CD]
Line_12 $$ for (int i = 2; i < args.length; i++) --> Line_13 $$ String arg = args[i] [CD]
Line_12 $$ for (int i = 2; i < args.length; i++) --> Line_14 $$ jars.add(arg) [CD]
Line_11 $$ final Collection jars = new LinkedList() --> Line_14 $$ jars.add(arg) [FD]
Line_13 $$ String arg = args[i] --> Line_14 $$ jars.add(arg) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_16 $$ JarInterpretted interpretted = new JarInterpretted(destination) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_17 $$ JarCat rowr = new JarCat(destination, createManifest(mainClass), jars) [CD]
Line_10 $$ final String mainClass = args[1] --> Line_17 $$ JarCat rowr = new JarCat(destination, createManifest(mainClass), jars) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_18 $$ interpretted.write() [CD]
Line_16 $$ JarInterpretted interpretted = new JarInterpretted(destination) --> Line_18 $$ interpretted.write() [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_19 $$ rowr.write() [CD]
Line_17 $$ JarCat rowr = new JarCat(destination, createManifest(mainClass), jars) --> Line_19 $$ rowr.write() [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_20 $$ destination.close() [CD]
Line_9 $$ final FileOutputStream destination = new FileOutputStream(tmpFile) --> Line_20 $$ destination.close() [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_21 $$ final File finalDestinationFile = new File(args[0]) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_22 $$ final FileOutputStream finalDestination = new FileOutputStream(finalDestinationFile) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_23 $$ IOUtils.copy(new FileInputStream(tmpFile), finalDestination) [CD]
Line_22 $$ final FileOutputStream finalDestination = new FileOutputStream(finalDestinationFile) --> Line_23 $$ IOUtils.copy(new FileInputStream(tmpFile), finalDestination) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_24 $$ finalDestination.close() [CD]
Line_22 $$ final FileOutputStream finalDestination = new FileOutputStream(finalDestinationFile) --> Line_24 $$ finalDestination.close() [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_25 $$ Chmod chmod = new Chmod("a+rx", new File[] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_26 $$ chmod.invoke() [CD]
Line_25 $$ Chmod chmod = new Chmod("a+rx", new File[] --> Line_26 $$ chmod.invoke() [FD]
