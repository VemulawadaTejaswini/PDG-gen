Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_3 $$ Data data = ref.data [CD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_4 $$ File file = new File(base + path) [CD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_5 $$ file.getParentFile().mkdirs() [CD]
Line_4 $$ File file = new File(base + path) --> Line_5 $$ file.getParentFile().mkdirs() [FD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_6 $$ System.err.println("read file " + data.file + " at index " + data.index) [CD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_7 $$ OutputStream output = new FileOutputStream(file) [CD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_8 $$ output = new DigestOutputStream(output, MessageDigest.getInstance("MD5")) [CD]
Line_7 $$ OutputStream output = new FileOutputStream(file) --> Line_8 $$ output = new DigestOutputStream(output, MessageDigest.getInstance("MD5")) [FD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_9 $$ reader.read(output, data.index, data.file) [CD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_9 $$ reader.read(output, data.index, data.file) [FD]
Line_7 $$ OutputStream output = new FileOutputStream(file) --> Line_9 $$ reader.read(output, data.index, data.file) [FD]
Line_8 $$ output = new DigestOutputStream(output, MessageDigest.getInstance("MD5")) --> Line_9 $$ reader.read(output, data.index, data.file) [FD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_10 $$ output.close() [CD]
Line_7 $$ OutputStream output = new FileOutputStream(file) --> Line_10 $$ output.close() [FD]
Line_8 $$ output = new DigestOutputStream(output, MessageDigest.getInstance("MD5")) --> Line_10 $$ output.close() [FD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_11 $$ if (hashall) [CD]
Line_11 $$ if (hashall) --> Line_12 $$ String filehash = StringUtils.toHex(((DigestOutputStream) output).getMessageDigest().digest()) [CD]
Line_11 $$ if (hashall) --> Line_13 $$ if (!hash.equals(filehash)) [CD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_13 $$ if (!hash.equals(filehash)) [FD]
Line_12 $$ String filehash = StringUtils.toHex(((DigestOutputStream) output).getMessageDigest().digest()) --> Line_13 $$ if (!hash.equals(filehash)) [FD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_15 $$ file.setLastModified(ref.lastmod) [CD]
Line_4 $$ File file = new File(base + path) --> Line_15 $$ file.setLastModified(ref.lastmod) [FD]
Line_2 $$ private void writeAndCheckFile(DataFileReader reader, String base, String path, String hash, Reference ref, boolean hashall) throws Exception --> Line_16 $$ if (file.length() != data.size) [CD]
Line_4 $$ File file = new File(base + path) --> Line_16 $$ if (file.length() != data.size) [FD]
