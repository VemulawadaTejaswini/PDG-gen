Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_3 $$ FTPClient client = new FTPClient() [CD]
Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_4 $$ client.connect(source.getSourceDetail().getHost()) [CD]
Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_4 $$ client.connect(source.getSourceDetail().getHost()) [FD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_4 $$ client.connect(source.getSourceDetail().getHost()) [FD]
Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_5 $$ client.login(source.getSourceDetail().getUser(), source.getSourceDetail().getPassword()) [CD]
Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_5 $$ client.login(source.getSourceDetail().getUser(), source.getSourceDetail().getPassword()) [FD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_5 $$ client.login(source.getSourceDetail().getUser(), source.getSourceDetail().getPassword()) [FD]
Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_6 $$ client.setFileType(FTPClient.BINARY_FILE_TYPE) [CD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_6 $$ client.setFileType(FTPClient.BINARY_FILE_TYPE) [FD]
Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_7 $$ FileOutputStream out = null [CD]
Line_8 $$ for (Node node : nodes) --> Line_9 $$ if (!node.isLeaf()) [FD]
Line_9 $$ if (!node.isLeaf()) --> Line_10 $$ Node[] childern = source.getChildern(node) [CD]
Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_10 $$ Node[] childern = source.getChildern(node) [FD]
Line_8 $$ for (Node node : nodes) --> Line_10 $$ Node[] childern = source.getChildern(node) [FD]
Line_9 $$ if (!node.isLeaf()) --> Line_11 $$ File dir = new File(outDirName + File.separator + node.getAlias()) [CD]
Line_8 $$ for (Node node : nodes) --> Line_11 $$ File dir = new File(outDirName + File.separator + node.getAlias()) [FD]
Line_9 $$ if (!node.isLeaf()) --> Line_12 $$ dir.mkdir() [CD]
Line_11 $$ File dir = new File(outDirName + File.separator + node.getAlias()) --> Line_12 $$ dir.mkdir() [FD]
Line_9 $$ if (!node.isLeaf()) --> Line_13 $$ retriveRemote(source, childern, outDirName + File.separator + node.getAlias(), isBinary) [CD]
Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_13 $$ retriveRemote(source, childern, outDirName + File.separator + node.getAlias(), isBinary) [FD]
Line_10 $$ Node[] childern = source.getChildern(node) --> Line_13 $$ retriveRemote(source, childern, outDirName + File.separator + node.getAlias(), isBinary) [FD]
Line_8 $$ for (Node node : nodes) --> Line_13 $$ retriveRemote(source, childern, outDirName + File.separator + node.getAlias(), isBinary) [FD]
Line_9 $$ if (!node.isLeaf()) --> Line_15 $$ out = new FileOutputStream(outDirName + File.separator + node.getAlias()) [CD]
Line_7 $$ FileOutputStream out = null --> Line_15 $$ out = new FileOutputStream(outDirName + File.separator + node.getAlias()) [FD]
Line_8 $$ for (Node node : nodes) --> Line_15 $$ out = new FileOutputStream(outDirName + File.separator + node.getAlias()) [FD]
Line_9 $$ if (!node.isLeaf()) --> Line_16 $$ client.retrieveFile(node.getAbsolutePath(), out) [CD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_16 $$ client.retrieveFile(node.getAbsolutePath(), out) [FD]
Line_7 $$ FileOutputStream out = null --> Line_16 $$ client.retrieveFile(node.getAbsolutePath(), out) [FD]
Line_15 $$ out = new FileOutputStream(outDirName + File.separator + node.getAlias()) --> Line_16 $$ client.retrieveFile(node.getAbsolutePath(), out) [FD]
Line_8 $$ for (Node node : nodes) --> Line_16 $$ client.retrieveFile(node.getAbsolutePath(), out) [FD]
Line_9 $$ if (!node.isLeaf()) --> Line_17 $$ out.flush() [CD]
Line_7 $$ FileOutputStream out = null --> Line_17 $$ out.flush() [FD]
Line_15 $$ out = new FileOutputStream(outDirName + File.separator + node.getAlias()) --> Line_17 $$ out.flush() [FD]
Line_9 $$ if (!node.isLeaf()) --> Line_18 $$ out.close() [CD]
Line_7 $$ FileOutputStream out = null --> Line_18 $$ out.close() [FD]
Line_15 $$ out = new FileOutputStream(outDirName + File.separator + node.getAlias()) --> Line_18 $$ out.close() [FD]
Line_2 $$ public static void retriveRemote(ISource source, Node[] nodes, String outDirName, boolean isBinary) throws Exception --> Line_21 $$ client.disconnect() [CD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_21 $$ client.disconnect() [FD]
