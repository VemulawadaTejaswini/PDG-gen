Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_3 $$ Log.info("saveMap: " + map) [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_4 $$ GUI.activateWaitCursor() [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_5 $$ if (map == null) [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_5 $$ if (map == null) [FD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_6 $$ File file = map.getFile() [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_6 $$ File file = map.getFile() [FD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_7 $$ int response = -1 [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_8 $$ if (map.getSaveFileModelVersion() == 0) [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_8 $$ if (map.getSaveFileModelVersion() == 0) [FD]
Line_8 $$ if (map.getSaveFileModelVersion() == 0) --> Line_9 $$ final Object[] defaultOrderButtons = [CD]
Line_8 $$ if (map.getSaveFileModelVersion() == 0) --> Line_10 $$ Object[] messageObject = [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_10 $$ Object[] messageObject = [FD]
Line_8 $$ if (map.getSaveFileModelVersion() == 0) --> Line_11 $$ response = VueUtil.option(VUE.getDialogParent(), VueResources.getFormatMessage(messageObject, "dialog.saveaction.message"), VueResources.getFormatMessage(messageObject, "dialog.saveaction.title"), JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, defaultOrderButtons, VueResources.getString("saveaction.saveacopy")) [CD]
Line_7 $$ int response = -1 --> Line_11 $$ response = VueUtil.option(VUE.getDialogParent(), VueResources.getFormatMessage(messageObject, "dialog.saveaction.message"), VueResources.getFormatMessage(messageObject, "dialog.saveaction.title"), JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, defaultOrderButtons, VueResources.getString("saveaction.saveacopy")) [FD]
Line_9 $$ final Object[] defaultOrderButtons = --> Line_11 $$ response = VueUtil.option(VUE.getDialogParent(), VueResources.getFormatMessage(messageObject, "dialog.saveaction.message"), VueResources.getFormatMessage(messageObject, "dialog.saveaction.title"), JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, defaultOrderButtons, VueResources.getString("saveaction.saveacopy")) [FD]
Line_10 $$ Object[] messageObject = --> Line_11 $$ response = VueUtil.option(VUE.getDialogParent(), VueResources.getFormatMessage(messageObject, "dialog.saveaction.message"), VueResources.getFormatMessage(messageObject, "dialog.saveaction.title"), JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, defaultOrderButtons, VueResources.getString("saveaction.saveacopy")) [FD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_13 $$ if (response == 0) [CD]
Line_7 $$ int response = -1 --> Line_13 $$ if (response == 0) [FD]
Line_11 $$ response = VueUtil.option(VUE.getDialogParent(), VueResources.getFormatMessage(messageObject, "dialog.saveaction.message"), VueResources.getFormatMessage(messageObject, "dialog.saveaction.title"), JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, defaultOrderButtons, VueResources.getString("saveaction.saveacopy")) --> Line_13 $$ if (response == 0) [FD]
Line_13 $$ if (response == 0) --> Line_14 $$ saveAs = true [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_14 $$ saveAs = true [FD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_16 $$ if ((saveAs || file == null) && !export) [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_16 $$ if ((saveAs || file == null) && !export) [FD]
Line_16 $$ if ((saveAs || file == null) && !export) --> Line_17 $$ file = ActionUtil.selectFile("Save Map", null) [CD]
Line_6 $$ File file = map.getFile() --> Line_17 $$ file = ActionUtil.selectFile("Save Map", null) [FD]
Line_16 $$ if ((saveAs || file == null) && !export) --> Line_18 $$ if (export) [CD]
Line_18 $$ if (export) --> Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") [CD]
Line_6 $$ File file = map.getFile() --> Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") [FD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_21 $$ if (file == null) [CD]
Line_6 $$ File file = map.getFile() --> Line_21 $$ if (file == null) [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_21 $$ if (file == null) [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_21 $$ if (file == null) [FD]
Line_6 $$ File file = map.getFile() --> Line_30 $$ final String name = file.getName().toLowerCase() [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_30 $$ final String name = file.getName().toLowerCase() [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_30 $$ final String name = file.getName().toLowerCase() [FD]
Line_30 $$ final String name = file.getName().toLowerCase() --> Line_31 $$ if (name.endsWith(".rli.xml")) [FD]
Line_31 $$ if (name.endsWith(".rli.xml")) --> Line_32 $$ new IMSResourceList().convert(map, file) [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_32 $$ new IMSResourceList().convert(map, file) [FD]
Line_6 $$ File file = map.getFile() --> Line_32 $$ new IMSResourceList().convert(map, file) [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_32 $$ new IMSResourceList().convert(map, file) [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_32 $$ new IMSResourceList().convert(map, file) [FD]
Line_31 $$ if (name.endsWith(".rli.xml")) --> Line_33 $$ if (name.endsWith(".xml") || name.endsWith(".vue")) [CD]
Line_30 $$ final String name = file.getName().toLowerCase() --> Line_33 $$ if (name.endsWith(".xml") || name.endsWith(".vue")) [FD]
Line_33 $$ if (name.endsWith(".xml") || name.endsWith(".vue")) --> Line_34 $$ ActionUtil.marshallMap(file, map) [CD]
Line_6 $$ File file = map.getFile() --> Line_34 $$ ActionUtil.marshallMap(file, map) [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_34 $$ ActionUtil.marshallMap(file, map) [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_34 $$ ActionUtil.marshallMap(file, map) [FD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_34 $$ ActionUtil.marshallMap(file, map) [FD]
Line_33 $$ if (name.endsWith(".xml") || name.endsWith(".vue")) --> Line_35 $$ ImageConversion.createActiveMapJpeg(file, VueResources.getDouble("imageExportFactor")) [CD]
Line_30 $$ final String name = file.getName().toLowerCase() --> Line_35 $$ ImageConversion.createActiveMapJpeg(file, VueResources.getDouble("imageExportFactor")) [FD]
Line_6 $$ File file = map.getFile() --> Line_35 $$ ImageConversion.createActiveMapJpeg(file, VueResources.getDouble("imageExportFactor")) [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_35 $$ ImageConversion.createActiveMapJpeg(file, VueResources.getDouble("imageExportFactor")) [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_35 $$ ImageConversion.createActiveMapJpeg(file, VueResources.getDouble("imageExportFactor")) [FD]
Line_35 $$ ImageConversion.createActiveMapJpeg(file, VueResources.getDouble("imageExportFactor")) --> Line_36 $$ PresentationNotes.createMapAsPDF(file) [CD]
Line_6 $$ File file = map.getFile() --> Line_36 $$ PresentationNotes.createMapAsPDF(file) [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_36 $$ PresentationNotes.createMapAsPDF(file) [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_36 $$ PresentationNotes.createMapAsPDF(file) [FD]
Line_35 $$ ImageConversion.createActiveMapJpeg(file, VueResources.getDouble("imageExportFactor")) --> Line_37 $$ if (name.endsWith(".zip")) [CD]
Line_30 $$ final String name = file.getName().toLowerCase() --> Line_37 $$ if (name.endsWith(".zip")) [FD]
Line_37 $$ if (name.endsWith(".zip")) --> Line_38 $$ Vector resourceVector = new Vector() [CD]
Line_37 $$ if (name.endsWith(".zip")) --> Line_39 $$ Iterator i = map.getAllDescendents(LWComponent.ChildKind.PROPER).iterator() [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_39 $$ Iterator i = map.getAllDescendents(LWComponent.ChildKind.PROPER).iterator() [FD]
Line_37 $$ if (name.endsWith(".zip")) --> Line_40 $$ while (i.hasNext()) [CD]
Line_39 $$ Iterator i = map.getAllDescendents(LWComponent.ChildKind.PROPER).iterator() --> Line_40 $$ while (i.hasNext()) [FD]
Line_40 $$ while (i.hasNext()) --> Line_41 $$ LWComponent component = (LWComponent) i.next() [CD]
Line_39 $$ Iterator i = map.getAllDescendents(LWComponent.ChildKind.PROPER).iterator() --> Line_41 $$ LWComponent component = (LWComponent) i.next() [FD]
Line_40 $$ while (i.hasNext()) --> Line_42 $$ System.out.println("Component:" + component + " has resource:" + component.hasResource()) [CD]
Line_41 $$ LWComponent component = (LWComponent) i.next() --> Line_42 $$ System.out.println("Component:" + component + " has resource:" + component.hasResource()) [FD]
Line_40 $$ while (i.hasNext()) --> Line_43 $$ if (component.hasResource() && (component.getResource() instanceof URLResource)) [CD]
Line_41 $$ LWComponent component = (LWComponent) i.next() --> Line_43 $$ if (component.hasResource() && (component.getResource() instanceof URLResource)) [FD]
Line_43 $$ if (component.hasResource() && (component.getResource() instanceof URLResource)) --> Line_44 $$ URLResource resource = (URLResource) component.getResource() [CD]
Line_41 $$ LWComponent component = (LWComponent) i.next() --> Line_44 $$ URLResource resource = (URLResource) component.getResource() [FD]
Line_44 $$ URLResource resource = (URLResource) component.getResource() --> Line_46 $$ if (resource.isLocalFile()) [FD]
Line_46 $$ if (resource.isLocalFile()) --> Line_47 $$ String spec = resource.getSpec() [CD]
Line_44 $$ URLResource resource = (URLResource) component.getResource() --> Line_47 $$ String spec = resource.getSpec() [FD]
Line_46 $$ if (resource.isLocalFile()) --> Line_48 $$ System.out.println(resource.getSpec()) [CD]
Line_44 $$ URLResource resource = (URLResource) component.getResource() --> Line_48 $$ System.out.println(resource.getSpec()) [FD]
Line_46 $$ if (resource.isLocalFile()) --> Line_49 $$ Vector row = new Vector() [CD]
Line_46 $$ if (resource.isLocalFile()) --> Line_50 $$ row.add(new Boolean(true)) [CD]
Line_49 $$ Vector row = new Vector() --> Line_50 $$ row.add(new Boolean(true)) [FD]
Line_46 $$ if (resource.isLocalFile()) --> Line_51 $$ row.add(resource) [CD]
Line_49 $$ Vector row = new Vector() --> Line_51 $$ row.add(resource) [FD]
Line_44 $$ URLResource resource = (URLResource) component.getResource() --> Line_51 $$ row.add(resource) [FD]
Line_46 $$ if (resource.isLocalFile()) --> Line_52 $$ row.add(new Long(file.length())) [CD]
Line_49 $$ Vector row = new Vector() --> Line_52 $$ row.add(new Long(file.length())) [FD]
Line_6 $$ File file = map.getFile() --> Line_52 $$ row.add(new Long(file.length())) [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_52 $$ row.add(new Long(file.length())) [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_52 $$ row.add(new Long(file.length())) [FD]
Line_46 $$ if (resource.isLocalFile()) --> Line_53 $$ row.add("Ready") [CD]
Line_49 $$ Vector row = new Vector() --> Line_53 $$ row.add("Ready") [FD]
Line_46 $$ if (resource.isLocalFile()) --> Line_54 $$ resourceVector.add(row) [CD]
Line_38 $$ Vector resourceVector = new Vector() --> Line_54 $$ resourceVector.add(row) [FD]
Line_49 $$ Vector row = new Vector() --> Line_54 $$ resourceVector.add(row) [FD]
Line_44 $$ URLResource resource = (URLResource) component.getResource() --> Line_57 $$ System.out.println("Publisher.setLocalResourceVector: Resource " + resource.getSpec() + ex) [FD]
Line_37 $$ if (name.endsWith(".zip")) --> Line_62 $$ File savedCMap = PublishUtil.createZip(map, resourceVector) [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_62 $$ File savedCMap = PublishUtil.createZip(map, resourceVector) [FD]
Line_38 $$ Vector resourceVector = new Vector() --> Line_62 $$ File savedCMap = PublishUtil.createZip(map, resourceVector) [FD]
Line_37 $$ if (name.endsWith(".zip")) --> Line_63 $$ InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap)) [CD]
Line_37 $$ if (name.endsWith(".zip")) --> Line_64 $$ OutputStream ostream = new BufferedOutputStream(new FileOutputStream(file)) [CD]
Line_37 $$ if (name.endsWith(".zip")) --> Line_65 $$ int fileLength = (int) savedCMap.length() [CD]
Line_62 $$ File savedCMap = PublishUtil.createZip(map, resourceVector) --> Line_65 $$ int fileLength = (int) savedCMap.length() [FD]
Line_37 $$ if (name.endsWith(".zip")) --> Line_66 $$ byte bytes[] = new byte[fileLength] [CD]
Line_63 $$ InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap)) --> Line_68 $$ while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength) [FD]
Line_65 $$ int fileLength = (int) savedCMap.length() --> Line_68 $$ while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength) [FD]
Line_64 $$ OutputStream ostream = new BufferedOutputStream(new FileOutputStream(file)) --> Line_68 $$ while (istream.read(bytes, 0, fileLength) != -1) ostream.write(bytes, 0, fileLength) [FD]
Line_63 $$ InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap)) --> Line_72 $$ istream.close() [FD]
Line_64 $$ OutputStream ostream = new BufferedOutputStream(new FileOutputStream(file)) --> Line_73 $$ ostream.close() [FD]
Line_37 $$ if (name.endsWith(".zip")) --> Line_75 $$ if (name.endsWith(".html")) [CD]
Line_30 $$ final String name = file.getName().toLowerCase() --> Line_75 $$ if (name.endsWith(".html")) [FD]
Line_75 $$ if (name.endsWith(".html")) --> Line_76 $$ HtmlOutputDialog hod = new HtmlOutputDialog() [CD]
Line_75 $$ if (name.endsWith(".html")) --> Line_77 $$ hod.setVisible(true) [CD]
Line_76 $$ HtmlOutputDialog hod = new HtmlOutputDialog() --> Line_77 $$ hod.setVisible(true) [FD]
Line_75 $$ if (name.endsWith(".html")) --> Line_78 $$ new ImageMap().createImageMap(file, hod.getScale(), hod.getFormat()) [CD]
Line_76 $$ HtmlOutputDialog hod = new HtmlOutputDialog() --> Line_78 $$ new ImageMap().createImageMap(file, hod.getScale(), hod.getFormat()) [FD]
Line_6 $$ File file = map.getFile() --> Line_78 $$ new ImageMap().createImageMap(file, hod.getScale(), hod.getFormat()) [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_78 $$ new ImageMap().createImageMap(file, hod.getScale(), hod.getFormat()) [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_78 $$ new ImageMap().createImageMap(file, hod.getScale(), hod.getFormat()) [FD]
Line_75 $$ if (name.endsWith(".html")) --> Line_79 $$ if (name.endsWith(".rdf")) [CD]
Line_30 $$ final String name = file.getName().toLowerCase() --> Line_79 $$ if (name.endsWith(".rdf")) [FD]
Line_79 $$ if (name.endsWith(".rdf")) --> Line_80 $$ edu.tufts.vue.rdf.RDFIndex index = new edu.tufts.vue.rdf.RDFIndex() [CD]
Line_79 $$ if (name.endsWith(".rdf")) --> Line_81 $$ String selectionType = VueResources.getString("rdf.export.selection") [CD]
Line_79 $$ if (name.endsWith(".rdf")) --> Line_82 $$ if (selectionType.equals("ALL")) [CD]
Line_81 $$ String selectionType = VueResources.getString("rdf.export.selection") --> Line_82 $$ if (selectionType.equals("ALL")) [FD]
Line_82 $$ if (selectionType.equals("ALL")) --> Line_83 $$ Iterator<LWMap> maps = VUE.getLeftTabbedPane().getAllMaps() [CD]
Line_82 $$ if (selectionType.equals("ALL")) --> Line_84 $$ while (maps.hasNext()) [CD]
Line_83 $$ Iterator<LWMap> maps = VUE.getLeftTabbedPane().getAllMaps() --> Line_84 $$ while (maps.hasNext()) [FD]
Line_84 $$ while (maps.hasNext()) --> Line_85 $$ index.index(maps.next()) [CD]
Line_80 $$ edu.tufts.vue.rdf.RDFIndex index = new edu.tufts.vue.rdf.RDFIndex() --> Line_85 $$ index.index(maps.next()) [FD]
Line_83 $$ Iterator<LWMap> maps = VUE.getLeftTabbedPane().getAllMaps() --> Line_85 $$ index.index(maps.next()) [FD]
Line_82 $$ if (selectionType.equals("ALL")) --> Line_87 $$ if (selectionType.equals("ACTIVE")) [CD]
Line_81 $$ String selectionType = VueResources.getString("rdf.export.selection") --> Line_87 $$ if (selectionType.equals("ACTIVE")) [FD]
Line_87 $$ if (selectionType.equals("ACTIVE")) --> Line_88 $$ index.index(VUE.getActiveMap()) [CD]
Line_80 $$ edu.tufts.vue.rdf.RDFIndex index = new edu.tufts.vue.rdf.RDFIndex() --> Line_88 $$ index.index(VUE.getActiveMap()) [FD]
Line_87 $$ if (selectionType.equals("ACTIVE")) --> Line_90 $$ index.index(VUE.getActiveMap()) [CD]
Line_80 $$ edu.tufts.vue.rdf.RDFIndex index = new edu.tufts.vue.rdf.RDFIndex() --> Line_90 $$ index.index(VUE.getActiveMap()) [FD]
Line_79 $$ if (name.endsWith(".rdf")) --> Line_92 $$ FileWriter writer = new FileWriter(file) [CD]
Line_79 $$ if (name.endsWith(".rdf")) --> Line_93 $$ index.write(writer) [CD]
Line_80 $$ edu.tufts.vue.rdf.RDFIndex index = new edu.tufts.vue.rdf.RDFIndex() --> Line_93 $$ index.write(writer) [FD]
Line_92 $$ FileWriter writer = new FileWriter(file) --> Line_93 $$ index.write(writer) [FD]
Line_79 $$ if (name.endsWith(".rdf")) --> Line_94 $$ writer.close() [CD]
Line_92 $$ FileWriter writer = new FileWriter(file) --> Line_94 $$ writer.close() [FD]
Line_79 $$ if (name.endsWith(".rdf")) --> Line_95 $$ if (name.endsWith(VueUtil.VueArchiveExtension)) [CD]
Line_30 $$ final String name = file.getName().toLowerCase() --> Line_95 $$ if (name.endsWith(VueUtil.VueArchiveExtension)) [FD]
Line_95 $$ if (name.endsWith(VueUtil.VueArchiveExtension)) --> Line_96 $$ Archive.writeArchive(map, file) [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_96 $$ Archive.writeArchive(map, file) [FD]
Line_6 $$ File file = map.getFile() --> Line_96 $$ Archive.writeArchive(map, file) [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_96 $$ Archive.writeArchive(map, file) [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_96 $$ Archive.writeArchive(map, file) [FD]
Line_95 $$ if (name.endsWith(VueUtil.VueArchiveExtension)) --> Line_98 $$ Log.warn("Unknown save type for filename extension: " + name) [CD]
Line_95 $$ if (name.endsWith(VueUtil.VueArchiveExtension)) --> Line_99 $$ return false [CD]
Line_102 $$ if (!VUE.isApplet()) --> Line_103 $$ VueFrame frame = (VueFrame) VUE.getMainWindow() [CD]
Line_102 $$ if (!VUE.isApplet()) --> Line_104 $$ String title = VUE.getName() + ": " + name [CD]
Line_102 $$ if (!VUE.isApplet()) --> Line_105 $$ frame.setTitle(title) [CD]
Line_103 $$ VueFrame frame = (VueFrame) VUE.getMainWindow() --> Line_105 $$ frame.setTitle(title) [FD]
Line_104 $$ String title = VUE.getName() + ": " + name --> Line_105 $$ frame.setTitle(title) [FD]
Line_30 $$ final String name = file.getName().toLowerCase() --> Line_107 $$ if (name.endsWith(".vue")) [FD]
Line_107 $$ if (name.endsWith(".vue")) --> Line_108 $$ RecentlyOpenedFilesManager rofm = RecentlyOpenedFilesManager.getInstance() [CD]
Line_107 $$ if (name.endsWith(".vue")) --> Line_109 $$ rofm.updateRecentlyOpenedFiles(file.getAbsolutePath()) [CD]
Line_108 $$ RecentlyOpenedFilesManager rofm = RecentlyOpenedFilesManager.getInstance() --> Line_109 $$ rofm.updateRecentlyOpenedFiles(file.getAbsolutePath()) [FD]
Line_6 $$ File file = map.getFile() --> Line_109 $$ rofm.updateRecentlyOpenedFiles(file.getAbsolutePath()) [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_109 $$ rofm.updateRecentlyOpenedFiles(file.getAbsolutePath()) [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_109 $$ rofm.updateRecentlyOpenedFiles(file.getAbsolutePath()) [FD]
Line_114 $$ Throwable e = t --> Line_115 $$ if (t.getCause() != null) [FD]
Line_114 $$ Throwable e = t --> Line_116 $$ if (e instanceof java.io.FileNotFoundException) [FD]
Line_115 $$ if (t.getCause() != null) --> Line_116 $$ if (e instanceof java.io.FileNotFoundException) [FD]
Line_116 $$ if (e instanceof java.io.FileNotFoundException) --> Line_117 $$ Log.error("Save Failed: " + e) [CD]
Line_116 $$ if (e instanceof java.io.FileNotFoundException) --> Line_119 $$ Log.error("Save failed for \"" + file + "\"; ", e) [CD]
Line_114 $$ Throwable e = t --> Line_119 $$ Log.error("Save failed for \"" + file + "\"; ", e) [FD]
Line_115 $$ if (t.getCause() != null) --> Line_119 $$ Log.error("Save failed for \"" + file + "\"; ", e) [FD]
Line_114 $$ Throwable e = t --> Line_121 $$ Log.error("Exception attempting to save file " + file + ": " + e) [FD]
Line_115 $$ if (t.getCause() != null) --> Line_121 $$ Log.error("Exception attempting to save file " + file + ": " + e) [FD]
Line_6 $$ File file = map.getFile() --> Line_122 $$ VueUtil.alert(String.format(Locale.getDefault(), VueResources.getString("saveaction.savemap.error") + "\"%s\";\n" + VueResources.getString("saveaction.targetfiel") + "\n\n" + VueResources.getString("saveaction.problem"), map.getLabel(), file, Util.formatLines(e.toString(), 80)), "Problem Saving Map") [FD]
Line_17 $$ file = ActionUtil.selectFile("Save Map", null) --> Line_122 $$ VueUtil.alert(String.format(Locale.getDefault(), VueResources.getString("saveaction.savemap.error") + "\"%s\";\n" + VueResources.getString("saveaction.targetfiel") + "\n\n" + VueResources.getString("saveaction.problem"), map.getLabel(), file, Util.formatLines(e.toString(), 80)), "Problem Saving Map") [FD]
Line_19 $$ file = ActionUtil.selectFile("Export Map", "export") --> Line_122 $$ VueUtil.alert(String.format(Locale.getDefault(), VueResources.getString("saveaction.savemap.error") + "\"%s\";\n" + VueResources.getString("saveaction.targetfiel") + "\n\n" + VueResources.getString("saveaction.problem"), map.getLabel(), file, Util.formatLines(e.toString(), 80)), "Problem Saving Map") [FD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_122 $$ VueUtil.alert(String.format(Locale.getDefault(), VueResources.getString("saveaction.savemap.error") + "\"%s\";\n" + VueResources.getString("saveaction.targetfiel") + "\n\n" + VueResources.getString("saveaction.problem"), map.getLabel(), file, Util.formatLines(e.toString(), 80)), "Problem Saving Map") [FD]
Line_114 $$ Throwable e = t --> Line_122 $$ VueUtil.alert(String.format(Locale.getDefault(), VueResources.getString("saveaction.savemap.error") + "\"%s\";\n" + VueResources.getString("saveaction.targetfiel") + "\n\n" + VueResources.getString("saveaction.problem"), map.getLabel(), file, Util.formatLines(e.toString(), 80)), "Problem Saving Map") [FD]
Line_115 $$ if (t.getCause() != null) --> Line_122 $$ VueUtil.alert(String.format(Locale.getDefault(), VueResources.getString("saveaction.savemap.error") + "\"%s\";\n" + VueResources.getString("saveaction.targetfiel") + "\n\n" + VueResources.getString("saveaction.problem"), map.getLabel(), file, Util.formatLines(e.toString(), 80)), "Problem Saving Map") [FD]
Line_124 $$ GUI.invokeAfterAWT(new Runnable() --> Line_126 $$ GUI.clearWaitCursor() [CD]
Line_2 $$ public static boolean saveMap(LWMap map, boolean saveAs, boolean export) --> Line_130 $$ return false [CD]
