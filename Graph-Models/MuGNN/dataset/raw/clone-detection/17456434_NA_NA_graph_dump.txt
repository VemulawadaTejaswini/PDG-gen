Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_3 $$ if (outputFile.exists() && outputFile.isDirectory()) [CD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_3 $$ if (outputFile.exists() && outputFile.isDirectory()) [FD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_4 $$ String outputFilePath = outputFile.getAbsolutePath() [CD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_4 $$ String outputFilePath = outputFile.getAbsolutePath() [FD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_5 $$ String outputFilePathTemp = outputFilePath + ".tmp" [CD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_6 $$ File tmpDownloadFile = FileUtil.createNewFile(outputFilePathTemp, false) [CD]
Line_5 $$ String outputFilePathTemp = outputFilePath + ".tmp" --> Line_6 $$ File tmpDownloadFile = FileUtil.createNewFile(outputFilePathTemp, false) [FD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_7 $$ if (!tmpDownloadFile.isFile()) [CD]
Line_6 $$ File tmpDownloadFile = FileUtil.createNewFile(outputFilePathTemp, false) --> Line_7 $$ if (!tmpDownloadFile.isFile()) [FD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_8 $$ MyFileLock fl = FileUtil.tryLockTempFile(tmpDownloadFile, 1000, ShareConstants.connectTimeout) [CD]
Line_6 $$ File tmpDownloadFile = FileUtil.createNewFile(outputFilePathTemp, false) --> Line_8 $$ MyFileLock fl = FileUtil.tryLockTempFile(tmpDownloadFile, 1000, ShareConstants.connectTimeout) [FD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_9 $$ if (fl != null) [CD]
Line_8 $$ MyFileLock fl = FileUtil.tryLockTempFile(tmpDownloadFile, 1000, ShareConstants.connectTimeout) --> Line_9 $$ if (fl != null) [FD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_15 $$ HttpClient httpclient = createHttpClient(creds) [FD]
Line_15 $$ HttpClient httpclient = createHttpClient(creds) --> Line_18 $$ HttpResponse response = httpclient.execute(httpget) [FD]
Line_17 $$ HttpGet httpget = new HttpGet(url) --> Line_18 $$ HttpResponse response = httpclient.execute(httpget) [FD]
Line_18 $$ HttpResponse response = httpclient.execute(httpget) --> Line_19 $$ StatusLine statusLine = response.getStatusLine() [FD]
Line_19 $$ StatusLine statusLine = response.getStatusLine() --> Line_20 $$ int status = statusLine.getStatusCode() / 100 [FD]
Line_20 $$ int status = statusLine.getStatusCode() / 100 --> Line_21 $$ if (status == 2) [FD]
Line_21 $$ if (status == 2) --> Line_22 $$ HttpEntity entity = response.getEntity() [CD]
Line_18 $$ HttpResponse response = httpclient.execute(httpget) --> Line_22 $$ HttpEntity entity = response.getEntity() [FD]
Line_21 $$ if (status == 2) --> Line_23 $$ if (entity != null) [CD]
Line_22 $$ HttpEntity entity = response.getEntity() --> Line_23 $$ if (entity != null) [FD]
Line_23 $$ if (entity != null) --> Line_24 $$ Header lastModifiedHeader = response.getFirstHeader("Last-Modified") [CD]
Line_18 $$ HttpResponse response = httpclient.execute(httpget) --> Line_24 $$ Header lastModifiedHeader = response.getFirstHeader("Last-Modified") [FD]
Line_23 $$ if (entity != null) --> Line_25 $$ Header contentLengthHeader = response.getFirstHeader("Content-Length") [CD]
Line_18 $$ HttpResponse response = httpclient.execute(httpget) --> Line_25 $$ Header contentLengthHeader = response.getFirstHeader("Content-Length") [FD]
Line_23 $$ if (entity != null) --> Line_26 $$ if (contentLengthHeader != null) [CD]
Line_25 $$ Header contentLengthHeader = response.getFirstHeader("Content-Length") --> Line_26 $$ if (contentLengthHeader != null) [FD]
Line_26 $$ if (contentLengthHeader != null) --> Line_27 $$ contentLength = Integer.parseInt(contentLengthHeader.getValue()) [CD]
Line_11 $$ long contentLength = -1 --> Line_27 $$ contentLength = Integer.parseInt(contentLengthHeader.getValue()) [FD]
Line_25 $$ Header contentLengthHeader = response.getFirstHeader("Content-Length") --> Line_27 $$ contentLength = Integer.parseInt(contentLengthHeader.getValue()) [FD]
Line_23 $$ if (entity != null) --> Line_29 $$ if (lastModifiedHeader != null) [CD]
Line_24 $$ Header lastModifiedHeader = response.getFirstHeader("Last-Modified") --> Line_29 $$ if (lastModifiedHeader != null) [FD]
Line_29 $$ if (lastModifiedHeader != null) --> Line_30 $$ SimpleDateFormat formatter = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz") [CD]
Line_29 $$ if (lastModifiedHeader != null) --> Line_31 $$ formatter.setDateFormatSymbols(new DateFormatSymbols(Locale.US)) [CD]
Line_30 $$ SimpleDateFormat formatter = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz") --> Line_31 $$ formatter.setDateFormatSymbols(new DateFormatSymbols(Locale.US)) [FD]
Line_12 $$ long lastModified = -1 --> Line_33 $$ lastModified = formatter.parse(lastModifiedHeader.getValue()).getTime() [FD]
Line_30 $$ SimpleDateFormat formatter = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz") --> Line_33 $$ lastModified = formatter.parse(lastModifiedHeader.getValue()).getTime() [FD]
Line_24 $$ Header lastModifiedHeader = response.getFirstHeader("Last-Modified") --> Line_33 $$ lastModified = formatter.parse(lastModifiedHeader.getValue()).getTime() [FD]
Line_23 $$ if (entity != null) --> Line_38 $$ in = entity.getContent() [CD]
Line_14 $$ InputStream in = null --> Line_38 $$ in = entity.getContent() [FD]
Line_22 $$ HttpEntity entity = response.getEntity() --> Line_38 $$ in = entity.getContent() [FD]
Line_23 $$ if (entity != null) --> Line_39 $$ out = new BufferedOutputStream(new FileOutputStream(tmpDownloadFile)) [CD]
Line_13 $$ OutputStream out = null --> Line_39 $$ out = new BufferedOutputStream(new FileOutputStream(tmpDownloadFile)) [FD]
Line_23 $$ if (entity != null) --> Line_40 $$ IOUtil.copyStreams(in, out) [CD]
Line_14 $$ InputStream in = null --> Line_40 $$ IOUtil.copyStreams(in, out) [FD]
Line_38 $$ in = entity.getContent() --> Line_40 $$ IOUtil.copyStreams(in, out) [FD]
Line_13 $$ OutputStream out = null --> Line_40 $$ IOUtil.copyStreams(in, out) [FD]
Line_39 $$ out = new BufferedOutputStream(new FileOutputStream(tmpDownloadFile)) --> Line_40 $$ IOUtil.copyStreams(in, out) [FD]
Line_14 $$ InputStream in = null --> Line_46 $$ IOUtil.close(in) [FD]
Line_38 $$ in = entity.getContent() --> Line_46 $$ IOUtil.close(in) [FD]
Line_13 $$ OutputStream out = null --> Line_47 $$ IOUtil.close(out) [FD]
Line_39 $$ out = new BufferedOutputStream(new FileOutputStream(tmpDownloadFile)) --> Line_47 $$ IOUtil.close(out) [FD]
Line_15 $$ HttpClient httpclient = createHttpClient(creds) --> Line_48 $$ httpclient.getConnectionManager().shutdown() [FD]
Line_6 $$ File tmpDownloadFile = FileUtil.createNewFile(outputFilePathTemp, false) --> Line_50 $$ if (tmpDownloadFile.isFile()) [FD]
Line_50 $$ if (tmpDownloadFile.isFile()) --> Line_51 $$ if ((contentLength == -1 && tmpDownloadFile.length() > 0) || tmpDownloadFile.length() == contentLength) [CD]
Line_6 $$ File tmpDownloadFile = FileUtil.createNewFile(outputFilePathTemp, false) --> Line_51 $$ if ((contentLength == -1 && tmpDownloadFile.length() > 0) || tmpDownloadFile.length() == contentLength) [FD]
Line_51 $$ if ((contentLength == -1 && tmpDownloadFile.length() > 0) || tmpDownloadFile.length() == contentLength) --> Line_52 $$ IOUtil.copyFile(tmpDownloadFile, outputFile) [CD]
Line_6 $$ File tmpDownloadFile = FileUtil.createNewFile(outputFilePathTemp, false) --> Line_52 $$ IOUtil.copyFile(tmpDownloadFile, outputFile) [FD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_52 $$ IOUtil.copyFile(tmpDownloadFile, outputFile) [FD]
Line_51 $$ if ((contentLength == -1 && tmpDownloadFile.length() > 0) || tmpDownloadFile.length() == contentLength) --> Line_53 $$ outputFile.setLastModified(lastModified) [CD]
Line_12 $$ long lastModified = -1 --> Line_53 $$ outputFile.setLastModified(lastModified) [FD]
Line_33 $$ lastModified = formatter.parse(lastModifiedHeader.getValue()).getTime() --> Line_53 $$ outputFile.setLastModified(lastModified) [FD]
Line_2 $$ public static void copyHttpContent(final String url, final File outputFile, UsernamePasswordCredentials creds) throws IOException --> Line_53 $$ outputFile.setLastModified(lastModified) [FD]
Line_6 $$ File tmpDownloadFile = FileUtil.createNewFile(outputFilePathTemp, false) --> Line_57 $$ tmpDownloadFile.delete() [FD]
Line_8 $$ MyFileLock fl = FileUtil.tryLockTempFile(tmpDownloadFile, 1000, ShareConstants.connectTimeout) --> Line_58 $$ fl.release() [FD]
