Line_2 $$ public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException --> Line_3 $$ final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder() [CD]
Line_2 $$ public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException --> Line_4 $$ final XPathExpression xpe = XPathFactory.newInstance().newXPath().compile(__xpath) [CD]
Line_2 $$ public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException --> Line_5 $$ final Multimap<String, String> proteins = HashMultimap.create() [CD]
Line_6 $$ for (final String query : queries) --> Line_9 $$ final String encoded = URLEncoder.encode(query.trim(), "UTF-8") [FD]
Line_9 $$ final String encoded = URLEncoder.encode(query.trim(), "UTF-8") --> Line_10 $$ final URL url = new URL(String.format(__urlTempl2, encoded, taxon)) [FD]
Line_2 $$ public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException --> Line_10 $$ final URL url = new URL(String.format(__urlTempl2, encoded, taxon)) [FD]
Line_7 $$ HttpURLConnection connection = null --> Line_11 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_10 $$ final URL url = new URL(String.format(__urlTempl2, encoded, taxon)) --> Line_11 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_7 $$ HttpURLConnection connection = null --> Line_12 $$ connection.setConnectTimeout(__connTimeout) [FD]
Line_11 $$ connection = (HttpURLConnection) url.openConnection() --> Line_12 $$ connection.setConnectTimeout(__connTimeout) [FD]
Line_7 $$ HttpURLConnection connection = null --> Line_13 $$ connection.setReadTimeout(__readTimeout) [FD]
Line_11 $$ connection = (HttpURLConnection) url.openConnection() --> Line_13 $$ connection.setReadTimeout(__readTimeout) [FD]
Line_7 $$ HttpURLConnection connection = null --> Line_14 $$ connection.setRequestProperty("Connection", "close") [FD]
Line_11 $$ connection = (HttpURLConnection) url.openConnection() --> Line_14 $$ connection.setRequestProperty("Connection", "close") [FD]
Line_7 $$ HttpURLConnection connection = null --> Line_15 $$ connection.connect() [FD]
Line_11 $$ connection = (HttpURLConnection) url.openConnection() --> Line_15 $$ connection.connect() [FD]
Line_7 $$ HttpURLConnection connection = null --> Line_16 $$ final InputStream stream = connection.getInputStream() [FD]
Line_11 $$ connection = (HttpURLConnection) url.openConnection() --> Line_16 $$ final InputStream stream = connection.getInputStream() [FD]
Line_3 $$ final DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder() --> Line_17 $$ final Document doc = parser.parse(stream) [FD]
Line_16 $$ final InputStream stream = connection.getInputStream() --> Line_17 $$ final Document doc = parser.parse(stream) [FD]
Line_4 $$ final XPathExpression xpe = XPathFactory.newInstance().newXPath().compile(__xpath) --> Line_18 $$ final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET) [FD]
Line_17 $$ final Document doc = parser.parse(stream) --> Line_18 $$ final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET) [FD]
Line_18 $$ final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET) --> Line_19 $$ if (nodes != null) [FD]
Line_19 $$ if (nodes != null) --> Line_20 $$ final int n = nodes.getLength() [CD]
Line_18 $$ final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET) --> Line_20 $$ final int n = nodes.getLength() [FD]
Line_19 $$ if (nodes != null) --> Line_21 $$ for (int i = 0; i < n; i++) [CD]
Line_20 $$ final int n = nodes.getLength() --> Line_21 $$ for (int i = 0; i < n; i++) [FD]
Line_21 $$ for (int i = 0; i < n; i++) --> Line_22 $$ final Node node = nodes.item(i) [CD]
Line_21 $$ for (int i = 0; i < n; i++) --> Line_22 $$ final Node node = nodes.item(i) [FD]
Line_18 $$ final NodeList nodes = (NodeList) xpe.evaluate(doc, XPathConstants.NODESET) --> Line_22 $$ final Node node = nodes.item(i) [FD]
Line_21 $$ for (int i = 0; i < n; i++) --> Line_23 $$ proteins.put(node.getTextContent().trim(), query.trim()) [CD]
Line_5 $$ final Multimap<String, String> proteins = HashMultimap.create() --> Line_23 $$ proteins.put(node.getTextContent().trim(), query.trim()) [FD]
Line_22 $$ final Node node = nodes.item(i) --> Line_23 $$ proteins.put(node.getTextContent().trim(), query.trim()) [FD]
Line_6 $$ for (final String query : queries) --> Line_23 $$ proteins.put(node.getTextContent().trim(), query.trim()) [FD]
Line_7 $$ HttpURLConnection connection = null --> Line_29 $$ if (connection != null) [FD]
Line_11 $$ connection = (HttpURLConnection) url.openConnection() --> Line_29 $$ if (connection != null) [FD]
Line_2 $$ public static Multimap<String, String> getProteins(final Set<String> queries, final int taxon) throws ParserConfigurationException, XPathExpressionException --> Line_32 $$ return proteins [CD]
