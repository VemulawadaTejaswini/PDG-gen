Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_3 $$ if (source == null) [CD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_3 $$ if (source == null) [FD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_4 $$ if (sink == null) [CD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_4 $$ if (sink == null) [FD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_5 $$ throw new IOException("Source file " + source.getPath() + " does not exist") [CD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_5 $$ throw new IOException("Source file " + source.getPath() + " does not exist") [FD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_6 $$ throw new IOException("Source file " + source.getPath() + " is not a regular file") [CD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_6 $$ throw new IOException("Source file " + source.getPath() + " is not a regular file") [FD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_7 $$ throw new IOException("Source file " + source.getPath() + " can not be read (missing acces right)") [CD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_7 $$ throw new IOException("Source file " + source.getPath() + " can not be read (missing acces right)") [FD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_8 $$ throw new IOException("Target file " + sink.getPath() + " does not exist") [CD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_8 $$ throw new IOException("Target file " + sink.getPath() + " does not exist") [FD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_9 $$ throw new IOException("Target file " + sink.getPath() + " is not a regular file") [CD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_9 $$ throw new IOException("Target file " + sink.getPath() + " is not a regular file") [FD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_10 $$ throw new IOException("Target file " + sink.getPath() + " is write protected") [CD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_10 $$ throw new IOException("Target file " + sink.getPath() + " is write protected") [FD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_11 $$ InputStream input = null [CD]
Line_2 $$ public static void copy(File source, File sink) throws IOException --> Line_12 $$ OutputStream output = null [CD]
Line_11 $$ InputStream input = null --> Line_14 $$ input = new FileInputStream(source) [FD]
Line_12 $$ OutputStream output = null --> Line_15 $$ output = new FileOutputStream(sink) [FD]
Line_11 $$ InputStream input = null --> Line_17 $$ while (input.available() > 0) [FD]
Line_14 $$ input = new FileInputStream(source) --> Line_17 $$ while (input.available() > 0) [FD]
Line_17 $$ while (input.available() > 0) --> Line_18 $$ int bread = input.read(buffer) [CD]
Line_11 $$ InputStream input = null --> Line_18 $$ int bread = input.read(buffer) [FD]
Line_14 $$ input = new FileInputStream(source) --> Line_18 $$ int bread = input.read(buffer) [FD]
Line_16 $$ byte[] buffer = new byte[1024] --> Line_18 $$ int bread = input.read(buffer) [FD]
Line_17 $$ while (input.available() > 0) --> Line_19 $$ output.write(buffer, 0, bread) [CD]
Line_18 $$ int bread = input.read(buffer) --> Line_19 $$ output.write(buffer, 0, bread) [FD]
Line_12 $$ OutputStream output = null --> Line_19 $$ output.write(buffer, 0, bread) [FD]
Line_15 $$ output = new FileOutputStream(sink) --> Line_19 $$ output.write(buffer, 0, bread) [FD]
Line_16 $$ byte[] buffer = new byte[1024] --> Line_19 $$ output.write(buffer, 0, bread) [FD]
Line_11 $$ InputStream input = null --> Line_22 $$ if (input != null) [FD]
Line_14 $$ input = new FileInputStream(source) --> Line_22 $$ if (input != null) [FD]
Line_11 $$ InputStream input = null --> Line_23 $$ input.close() [FD]
Line_14 $$ input = new FileInputStream(source) --> Line_23 $$ input.close() [FD]
Line_12 $$ OutputStream output = null --> Line_26 $$ if (output != null) [FD]
Line_15 $$ output = new FileOutputStream(sink) --> Line_26 $$ if (output != null) [FD]
Line_12 $$ OutputStream output = null --> Line_27 $$ output.close() [FD]
Line_15 $$ output = new FileOutputStream(sink) --> Line_27 $$ output.close() [FD]
