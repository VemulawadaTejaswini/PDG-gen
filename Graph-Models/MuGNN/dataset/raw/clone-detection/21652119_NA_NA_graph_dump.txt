Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_3 $$ String realpath = msgContext.getStrProp(Constants.MC_REALPATH) [CD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_3 $$ String realpath = msgContext.getStrProp(Constants.MC_REALPATH) [FD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_4 $$ String extension = (String) getOption(OPTION_JWS_FILE_EXTENSION) [CD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_5 $$ extension = DEFAULT_JWS_FILE_EXTENSION [CD]
Line_4 $$ String extension = (String) getOption(OPTION_JWS_FILE_EXTENSION) --> Line_5 $$ extension = DEFAULT_JWS_FILE_EXTENSION [FD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) [CD]
Line_3 $$ String realpath = msgContext.getStrProp(Constants.MC_REALPATH) --> Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) [FD]
Line_4 $$ String extension = (String) getOption(OPTION_JWS_FILE_EXTENSION) --> Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) [FD]
Line_5 $$ extension = DEFAULT_JWS_FILE_EXTENSION --> Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_7 $$ String jwsFile = realpath [CD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_8 $$ String rel = msgContext.getStrProp(Constants.MC_RELATIVE_PATH) [CD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_8 $$ String rel = msgContext.getStrProp(Constants.MC_RELATIVE_PATH) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_9 $$ File f2 = new File(jwsFile) [CD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_10 $$ if (!f2.exists()) [CD]
Line_9 $$ File f2 = new File(jwsFile) --> Line_10 $$ if (!f2.exists()) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_13 $$ if (rel.charAt(0) == '/') [CD]
Line_8 $$ String rel = msgContext.getStrProp(Constants.MC_RELATIVE_PATH) --> Line_13 $$ if (rel.charAt(0) == '/') [FD]
Line_13 $$ if (rel.charAt(0) == '/') --> Line_14 $$ rel = rel.substring(1) [CD]
Line_8 $$ String rel = msgContext.getStrProp(Constants.MC_RELATIVE_PATH) --> Line_14 $$ rel = rel.substring(1) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_16 $$ int lastSlash = rel.lastIndexOf('/') [CD]
Line_8 $$ String rel = msgContext.getStrProp(Constants.MC_RELATIVE_PATH) --> Line_16 $$ int lastSlash = rel.lastIndexOf('/') [FD]
Line_14 $$ rel = rel.substring(1) --> Line_16 $$ int lastSlash = rel.lastIndexOf('/') [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_17 $$ String dir = null [CD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_18 $$ if (lastSlash > 0) [CD]
Line_16 $$ int lastSlash = rel.lastIndexOf('/') --> Line_18 $$ if (lastSlash > 0) [FD]
Line_18 $$ if (lastSlash > 0) --> Line_19 $$ dir = rel.substring(0, lastSlash) [CD]
Line_17 $$ String dir = null --> Line_19 $$ dir = rel.substring(0, lastSlash) [FD]
Line_8 $$ String rel = msgContext.getStrProp(Constants.MC_RELATIVE_PATH) --> Line_19 $$ dir = rel.substring(0, lastSlash) [FD]
Line_14 $$ rel = rel.substring(1) --> Line_19 $$ dir = rel.substring(0, lastSlash) [FD]
Line_16 $$ int lastSlash = rel.lastIndexOf('/') --> Line_19 $$ dir = rel.substring(0, lastSlash) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_21 $$ String file = rel.substring(lastSlash + 1) [CD]
Line_8 $$ String rel = msgContext.getStrProp(Constants.MC_RELATIVE_PATH) --> Line_21 $$ String file = rel.substring(lastSlash + 1) [FD]
Line_14 $$ rel = rel.substring(1) --> Line_21 $$ String file = rel.substring(lastSlash + 1) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_22 $$ String outdir = msgContext.getStrProp(Constants.MC_JWS_CLASSDIR) [CD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_22 $$ String outdir = msgContext.getStrProp(Constants.MC_JWS_CLASSDIR) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_23 $$ if (outdir == null) [CD]
Line_22 $$ String outdir = msgContext.getStrProp(Constants.MC_JWS_CLASSDIR) --> Line_23 $$ if (outdir == null) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_24 $$ if (dir != null) [CD]
Line_17 $$ String dir = null --> Line_24 $$ if (dir != null) [FD]
Line_19 $$ dir = rel.substring(0, lastSlash) --> Line_24 $$ if (dir != null) [FD]
Line_24 $$ if (dir != null) --> Line_25 $$ outdir = outdir + File.separator + dir [CD]
Line_22 $$ String outdir = msgContext.getStrProp(Constants.MC_JWS_CLASSDIR) --> Line_25 $$ outdir = outdir + File.separator + dir [FD]
Line_23 $$ if (outdir == null) --> Line_25 $$ outdir = outdir + File.separator + dir [FD]
Line_17 $$ String dir = null --> Line_25 $$ outdir = outdir + File.separator + dir [FD]
Line_19 $$ dir = rel.substring(0, lastSlash) --> Line_25 $$ outdir = outdir + File.separator + dir [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_27 $$ File outDirectory = new File(outdir) [CD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_28 $$ if (!outDirectory.exists()) [CD]
Line_27 $$ File outDirectory = new File(outdir) --> Line_28 $$ if (!outDirectory.exists()) [FD]
Line_28 $$ if (!outDirectory.exists()) --> Line_29 $$ outDirectory.mkdirs() [CD]
Line_27 $$ File outDirectory = new File(outdir) --> Line_29 $$ outDirectory.mkdirs() [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_31 $$ log.debug("jwsFile: " + jwsFile) [CD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_32 $$ String jFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "java" [CD]
Line_21 $$ String file = rel.substring(lastSlash + 1) --> Line_32 $$ String jFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "java" [FD]
Line_4 $$ String extension = (String) getOption(OPTION_JWS_FILE_EXTENSION) --> Line_32 $$ String jFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "java" [FD]
Line_5 $$ extension = DEFAULT_JWS_FILE_EXTENSION --> Line_32 $$ String jFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "java" [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_33 $$ String cFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "class" [CD]
Line_21 $$ String file = rel.substring(lastSlash + 1) --> Line_33 $$ String cFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "class" [FD]
Line_4 $$ String extension = (String) getOption(OPTION_JWS_FILE_EXTENSION) --> Line_33 $$ String cFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "class" [FD]
Line_5 $$ extension = DEFAULT_JWS_FILE_EXTENSION --> Line_33 $$ String cFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "class" [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_34 $$ if (log.isDebugEnabled()) [CD]
Line_34 $$ if (log.isDebugEnabled()) --> Line_35 $$ log.debug("jFile: " + jFile) [CD]
Line_34 $$ if (log.isDebugEnabled()) --> Line_36 $$ log.debug("cFile: " + cFile) [CD]
Line_34 $$ if (log.isDebugEnabled()) --> Line_37 $$ log.debug("outdir: " + outdir) [CD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_39 $$ File f1 = new File(cFile) [CD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_40 $$ String clsName = null [CD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_41 $$ clsName = f2.getName() [CD]
Line_40 $$ String clsName = null --> Line_41 $$ clsName = f2.getName() [FD]
Line_9 $$ File f2 = new File(jwsFile) --> Line_41 $$ clsName = f2.getName() [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') [CD]
Line_40 $$ String clsName = null --> Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') [FD]
Line_41 $$ clsName = f2.getName() --> Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) [CD]
Line_40 $$ String clsName = null --> Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) [FD]
Line_41 $$ clsName = f2.getName() --> Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) [FD]
Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') --> Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) [FD]
Line_4 $$ String extension = (String) getOption(OPTION_JWS_FILE_EXTENSION) --> Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) [FD]
Line_5 $$ extension = DEFAULT_JWS_FILE_EXTENSION --> Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_44 $$ clsName = clsName.replace('/', '.') [CD]
Line_40 $$ String clsName = null --> Line_44 $$ clsName = clsName.replace('/', '.') [FD]
Line_41 $$ clsName = f2.getName() --> Line_44 $$ clsName = clsName.replace('/', '.') [FD]
Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') --> Line_44 $$ clsName = clsName.replace('/', '.') [FD]
Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) --> Line_44 $$ clsName = clsName.replace('/', '.') [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_45 $$ log.debug("ClsName: " + clsName) [CD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) [CD]
Line_39 $$ File f1 = new File(cFile) --> Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) [FD]
Line_9 $$ File f2 = new File(jwsFile) --> Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_47 $$ log.debug(Messages.getMessage("compiling00", jwsFile)) [CD]
Line_7 $$ String jwsFile = realpath --> Line_47 $$ log.debug(Messages.getMessage("compiling00", jwsFile)) [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_48 $$ log.debug(Messages.getMessage("copy00", jwsFile, jFile)) [CD]
Line_7 $$ String jwsFile = realpath --> Line_48 $$ log.debug(Messages.getMessage("copy00", jwsFile, jFile)) [FD]
Line_32 $$ String jFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "java" --> Line_48 $$ log.debug(Messages.getMessage("copy00", jwsFile, jFile)) [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_49 $$ FileReader fr = new FileReader(jwsFile) [CD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_50 $$ FileWriter fw = new FileWriter(jFile) [CD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_51 $$ char[] buf = new char[4096] [CD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_52 $$ int rc [CD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_53 $$ while ((rc = fr.read(buf, 0, 4095)) >= 0) fw.write(buf, 0, rc) [CD]
Line_52 $$ int rc --> Line_53 $$ while ((rc = fr.read(buf, 0, 4095)) >= 0) fw.write(buf, 0, rc) [FD]
Line_49 $$ FileReader fr = new FileReader(jwsFile) --> Line_53 $$ while ((rc = fr.read(buf, 0, 4095)) >= 0) fw.write(buf, 0, rc) [FD]
Line_51 $$ char[] buf = new char[4096] --> Line_53 $$ while ((rc = fr.read(buf, 0, 4095)) >= 0) fw.write(buf, 0, rc) [FD]
Line_50 $$ FileWriter fw = new FileWriter(jFile) --> Line_53 $$ while ((rc = fr.read(buf, 0, 4095)) >= 0) fw.write(buf, 0, rc) [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_54 $$ fw.close() [CD]
Line_50 $$ FileWriter fw = new FileWriter(jFile) --> Line_54 $$ fw.close() [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_55 $$ fr.close() [CD]
Line_49 $$ FileReader fr = new FileReader(jwsFile) --> Line_55 $$ fr.close() [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_56 $$ log.debug("javac " + jFile) [CD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_57 $$ Compiler compiler = CompilerFactory.getCompiler() [CD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_58 $$ compiler.setClasspath(ClasspathUtils.getDefaultClasspath(msgContext)) [CD]
Line_57 $$ Compiler compiler = CompilerFactory.getCompiler() --> Line_58 $$ compiler.setClasspath(ClasspathUtils.getDefaultClasspath(msgContext)) [FD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_58 $$ compiler.setClasspath(ClasspathUtils.getDefaultClasspath(msgContext)) [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_59 $$ compiler.setDestination(outdir) [CD]
Line_57 $$ Compiler compiler = CompilerFactory.getCompiler() --> Line_59 $$ compiler.setDestination(outdir) [FD]
Line_22 $$ String outdir = msgContext.getStrProp(Constants.MC_JWS_CLASSDIR) --> Line_59 $$ compiler.setDestination(outdir) [FD]
Line_23 $$ if (outdir == null) --> Line_59 $$ compiler.setDestination(outdir) [FD]
Line_25 $$ outdir = outdir + File.separator + dir --> Line_59 $$ compiler.setDestination(outdir) [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_60 $$ compiler.addFile(jFile) [CD]
Line_57 $$ Compiler compiler = CompilerFactory.getCompiler() --> Line_60 $$ compiler.addFile(jFile) [FD]
Line_32 $$ String jFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "java" --> Line_60 $$ compiler.addFile(jFile) [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_61 $$ boolean result = compiler.compile() [CD]
Line_57 $$ Compiler compiler = CompilerFactory.getCompiler() --> Line_61 $$ boolean result = compiler.compile() [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_62 $$ (new File(jFile)).delete() [CD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_63 $$ if (!result) [CD]
Line_61 $$ boolean result = compiler.compile() --> Line_63 $$ if (!result) [FD]
Line_63 $$ if (!result) --> Line_64 $$ (new File(cFile)).delete() [CD]
Line_63 $$ if (!result) --> Line_65 $$ Document doc = XMLUtils.newDocument() [CD]
Line_63 $$ if (!result) --> Line_66 $$ Element root = doc.createElementNS("", "Errors") [CD]
Line_65 $$ Document doc = XMLUtils.newDocument() --> Line_66 $$ Element root = doc.createElementNS("", "Errors") [FD]
Line_63 $$ if (!result) --> Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") [CD]
Line_63 $$ if (!result) --> Line_68 $$ message.append(jFile) [CD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_68 $$ message.append(jFile) [FD]
Line_32 $$ String jFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "java" --> Line_68 $$ message.append(jFile) [FD]
Line_63 $$ if (!result) --> Line_69 $$ message.append(":\n") [CD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_69 $$ message.append(":\n") [FD]
Line_63 $$ if (!result) --> Line_70 $$ List errors = compiler.getErrors() [CD]
Line_57 $$ Compiler compiler = CompilerFactory.getCompiler() --> Line_70 $$ List errors = compiler.getErrors() [FD]
Line_63 $$ if (!result) --> Line_71 $$ int count = errors.size() [CD]
Line_70 $$ List errors = compiler.getErrors() --> Line_71 $$ int count = errors.size() [FD]
Line_63 $$ if (!result) --> Line_72 $$ for (int i = 0; i < count; i++) [CD]
Line_71 $$ int count = errors.size() --> Line_72 $$ for (int i = 0; i < count; i++) [FD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_73 $$ CompilerError error = (CompilerError) errors.get(i) [CD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_73 $$ CompilerError error = (CompilerError) errors.get(i) [FD]
Line_70 $$ List errors = compiler.getErrors() --> Line_73 $$ CompilerError error = (CompilerError) errors.get(i) [FD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_74 $$ message.append("\n") [CD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_74 $$ message.append("\n") [FD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_74 $$ message.append("\n") [FD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_75 $$ message.append("Line ") [CD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_75 $$ message.append("Line ") [FD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_76 $$ message.append(error.getStartLine()) [CD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_76 $$ message.append(error.getStartLine()) [FD]
Line_73 $$ CompilerError error = (CompilerError) errors.get(i) --> Line_76 $$ message.append(error.getStartLine()) [FD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_77 $$ message.append(", column ") [CD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_77 $$ message.append(", column ") [FD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_78 $$ message.append(error.getStartColumn()) [CD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_78 $$ message.append(error.getStartColumn()) [FD]
Line_73 $$ CompilerError error = (CompilerError) errors.get(i) --> Line_78 $$ message.append(error.getStartColumn()) [FD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_79 $$ message.append(": ") [CD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_79 $$ message.append(": ") [FD]
Line_72 $$ for (int i = 0; i < count; i++) --> Line_80 $$ message.append(error.getMessage()) [CD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_80 $$ message.append(error.getMessage()) [FD]
Line_73 $$ CompilerError error = (CompilerError) errors.get(i) --> Line_80 $$ message.append(error.getMessage()) [FD]
Line_63 $$ if (!result) --> Line_82 $$ root.appendChild(doc.createTextNode(message.toString())) [CD]
Line_66 $$ Element root = doc.createElementNS("", "Errors") --> Line_82 $$ root.appendChild(doc.createTextNode(message.toString())) [FD]
Line_65 $$ Document doc = XMLUtils.newDocument() --> Line_82 $$ root.appendChild(doc.createTextNode(message.toString())) [FD]
Line_67 $$ StringBuffer message = new StringBuffer("Error compiling ") --> Line_82 $$ root.appendChild(doc.createTextNode(message.toString())) [FD]
Line_32 $$ String jFile = outdir + File.separator + file.substring(0, file.length() - extension.length() + 1) + "java" --> Line_83 $$ throw new AxisFault("Server.compileError", Messages.getMessage("badCompile00", jFile), null, new Element[] [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_85 $$ ClassUtils.removeClassLoader(clsName) [CD]
Line_40 $$ String clsName = null --> Line_85 $$ ClassUtils.removeClassLoader(clsName) [FD]
Line_41 $$ clsName = f2.getName() --> Line_85 $$ ClassUtils.removeClassLoader(clsName) [FD]
Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') --> Line_85 $$ ClassUtils.removeClassLoader(clsName) [FD]
Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) --> Line_85 $$ ClassUtils.removeClassLoader(clsName) [FD]
Line_44 $$ clsName = clsName.replace('/', '.') --> Line_85 $$ ClassUtils.removeClassLoader(clsName) [FD]
Line_46 $$ if (!f1.exists() || f2.lastModified() > f1.lastModified()) --> Line_86 $$ soapServices.remove(clsName) [CD]
Line_40 $$ String clsName = null --> Line_86 $$ soapServices.remove(clsName) [FD]
Line_41 $$ clsName = f2.getName() --> Line_86 $$ soapServices.remove(clsName) [FD]
Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') --> Line_86 $$ soapServices.remove(clsName) [FD]
Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) --> Line_86 $$ soapServices.remove(clsName) [FD]
Line_44 $$ clsName = clsName.replace('/', '.') --> Line_86 $$ soapServices.remove(clsName) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_88 $$ ClassLoader cl = ClassUtils.getClassLoader(clsName) [CD]
Line_40 $$ String clsName = null --> Line_88 $$ ClassLoader cl = ClassUtils.getClassLoader(clsName) [FD]
Line_41 $$ clsName = f2.getName() --> Line_88 $$ ClassLoader cl = ClassUtils.getClassLoader(clsName) [FD]
Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') --> Line_88 $$ ClassLoader cl = ClassUtils.getClassLoader(clsName) [FD]
Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) --> Line_88 $$ ClassLoader cl = ClassUtils.getClassLoader(clsName) [FD]
Line_44 $$ clsName = clsName.replace('/', '.') --> Line_88 $$ ClassLoader cl = ClassUtils.getClassLoader(clsName) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_89 $$ if (cl == null) [CD]
Line_88 $$ ClassLoader cl = ClassUtils.getClassLoader(clsName) --> Line_89 $$ if (cl == null) [FD]
Line_89 $$ if (cl == null) --> Line_90 $$ cl = new JWSClassLoader(clsName, msgContext.getClassLoader(), cFile) [CD]
Line_88 $$ ClassLoader cl = ClassUtils.getClassLoader(clsName) --> Line_90 $$ cl = new JWSClassLoader(clsName, msgContext.getClassLoader(), cFile) [FD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_90 $$ cl = new JWSClassLoader(clsName, msgContext.getClassLoader(), cFile) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_92 $$ msgContext.setClassLoader(cl) [CD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_92 $$ msgContext.setClassLoader(cl) [FD]
Line_88 $$ ClassLoader cl = ClassUtils.getClassLoader(clsName) --> Line_92 $$ msgContext.setClassLoader(cl) [FD]
Line_90 $$ cl = new JWSClassLoader(clsName, msgContext.getClassLoader(), cFile) --> Line_92 $$ msgContext.setClassLoader(cl) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) [CD]
Line_40 $$ String clsName = null --> Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) [FD]
Line_41 $$ clsName = f2.getName() --> Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) [FD]
Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') --> Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) [FD]
Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) --> Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) [FD]
Line_44 $$ clsName = clsName.replace('/', '.') --> Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_94 $$ if (rpc == null) [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_94 $$ if (rpc == null) [FD]
Line_94 $$ if (rpc == null) --> Line_95 $$ rpc = new SOAPService(new RPCProvider()) [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_95 $$ rpc = new SOAPService(new RPCProvider()) [FD]
Line_94 $$ if (rpc == null) --> Line_96 $$ rpc.setName(clsName) [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_96 $$ rpc.setName(clsName) [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_96 $$ rpc.setName(clsName) [FD]
Line_40 $$ String clsName = null --> Line_96 $$ rpc.setName(clsName) [FD]
Line_41 $$ clsName = f2.getName() --> Line_96 $$ rpc.setName(clsName) [FD]
Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') --> Line_96 $$ rpc.setName(clsName) [FD]
Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) --> Line_96 $$ rpc.setName(clsName) [FD]
Line_44 $$ clsName = clsName.replace('/', '.') --> Line_96 $$ rpc.setName(clsName) [FD]
Line_94 $$ if (rpc == null) --> Line_97 $$ rpc.setOption(RPCProvider.OPTION_CLASSNAME, clsName) [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_97 $$ rpc.setOption(RPCProvider.OPTION_CLASSNAME, clsName) [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_97 $$ rpc.setOption(RPCProvider.OPTION_CLASSNAME, clsName) [FD]
Line_40 $$ String clsName = null --> Line_97 $$ rpc.setOption(RPCProvider.OPTION_CLASSNAME, clsName) [FD]
Line_41 $$ clsName = f2.getName() --> Line_97 $$ rpc.setOption(RPCProvider.OPTION_CLASSNAME, clsName) [FD]
Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') --> Line_97 $$ rpc.setOption(RPCProvider.OPTION_CLASSNAME, clsName) [FD]
Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) --> Line_97 $$ rpc.setOption(RPCProvider.OPTION_CLASSNAME, clsName) [FD]
Line_44 $$ clsName = clsName.replace('/', '.') --> Line_97 $$ rpc.setOption(RPCProvider.OPTION_CLASSNAME, clsName) [FD]
Line_94 $$ if (rpc == null) --> Line_98 $$ rpc.setEngine(msgContext.getAxisEngine()) [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_98 $$ rpc.setEngine(msgContext.getAxisEngine()) [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_98 $$ rpc.setEngine(msgContext.getAxisEngine()) [FD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_98 $$ rpc.setEngine(msgContext.getAxisEngine()) [FD]
Line_94 $$ if (rpc == null) --> Line_99 $$ String allowed = (String) getOption(RPCProvider.OPTION_ALLOWEDMETHODS) [CD]
Line_94 $$ if (rpc == null) --> Line_100 $$ if (allowed == null) [CD]
Line_99 $$ String allowed = (String) getOption(RPCProvider.OPTION_ALLOWEDMETHODS) --> Line_100 $$ if (allowed == null) [FD]
Line_94 $$ if (rpc == null) --> Line_101 $$ rpc.setOption(RPCProvider.OPTION_ALLOWEDMETHODS, allowed) [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_101 $$ rpc.setOption(RPCProvider.OPTION_ALLOWEDMETHODS, allowed) [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_101 $$ rpc.setOption(RPCProvider.OPTION_ALLOWEDMETHODS, allowed) [FD]
Line_99 $$ String allowed = (String) getOption(RPCProvider.OPTION_ALLOWEDMETHODS) --> Line_101 $$ rpc.setOption(RPCProvider.OPTION_ALLOWEDMETHODS, allowed) [FD]
Line_100 $$ if (allowed == null) --> Line_101 $$ rpc.setOption(RPCProvider.OPTION_ALLOWEDMETHODS, allowed) [FD]
Line_94 $$ if (rpc == null) --> Line_102 $$ String scope = (String) getOption(RPCProvider.OPTION_SCOPE) [CD]
Line_94 $$ if (rpc == null) --> Line_103 $$ scope = Scope.DEFAULT.getName() [CD]
Line_102 $$ String scope = (String) getOption(RPCProvider.OPTION_SCOPE) --> Line_103 $$ scope = Scope.DEFAULT.getName() [FD]
Line_94 $$ if (rpc == null) --> Line_104 $$ rpc.setOption(RPCProvider.OPTION_SCOPE, scope) [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_104 $$ rpc.setOption(RPCProvider.OPTION_SCOPE, scope) [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_104 $$ rpc.setOption(RPCProvider.OPTION_SCOPE, scope) [FD]
Line_102 $$ String scope = (String) getOption(RPCProvider.OPTION_SCOPE) --> Line_104 $$ rpc.setOption(RPCProvider.OPTION_SCOPE, scope) [FD]
Line_103 $$ scope = Scope.DEFAULT.getName() --> Line_104 $$ rpc.setOption(RPCProvider.OPTION_SCOPE, scope) [FD]
Line_94 $$ if (rpc == null) --> Line_105 $$ rpc.getInitializedServiceDesc(msgContext) [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_105 $$ rpc.getInitializedServiceDesc(msgContext) [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_105 $$ rpc.getInitializedServiceDesc(msgContext) [FD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_105 $$ rpc.getInitializedServiceDesc(msgContext) [FD]
Line_94 $$ if (rpc == null) --> Line_106 $$ soapServices.put(clsName, rpc) [CD]
Line_40 $$ String clsName = null --> Line_106 $$ soapServices.put(clsName, rpc) [FD]
Line_41 $$ clsName = f2.getName() --> Line_106 $$ soapServices.put(clsName, rpc) [FD]
Line_42 $$ if (clsName != null && clsName.charAt(0) == '/') --> Line_106 $$ soapServices.put(clsName, rpc) [FD]
Line_43 $$ clsName = clsName.substring(0, clsName.length() - extension.length()) --> Line_106 $$ soapServices.put(clsName, rpc) [FD]
Line_44 $$ clsName = clsName.replace('/', '.') --> Line_106 $$ soapServices.put(clsName, rpc) [FD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_106 $$ soapServices.put(clsName, rpc) [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_106 $$ soapServices.put(clsName, rpc) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_108 $$ rpc.setEngine(msgContext.getAxisEngine()) [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_108 $$ rpc.setEngine(msgContext.getAxisEngine()) [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_108 $$ rpc.setEngine(msgContext.getAxisEngine()) [FD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_108 $$ rpc.setEngine(msgContext.getAxisEngine()) [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_109 $$ rpc.init() [CD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_109 $$ rpc.init() [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_109 $$ rpc.init() [FD]
Line_6 $$ if ((realpath != null) && (realpath.endsWith(extension))) --> Line_110 $$ msgContext.setService(rpc) [CD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_110 $$ msgContext.setService(rpc) [FD]
Line_93 $$ SOAPService rpc = (SOAPService) soapServices.get(clsName) --> Line_110 $$ msgContext.setService(rpc) [FD]
Line_95 $$ rpc = new SOAPService(new RPCProvider()) --> Line_110 $$ msgContext.setService(rpc) [FD]
Line_2 $$ protected void setupService(MessageContext msgContext) throws Exception --> Line_112 $$ if (log.isDebugEnabled()) [CD]
Line_112 $$ if (log.isDebugEnabled()) --> Line_113 $$ log.debug("Exit: JWSHandler::invoke") [CD]
