Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_3 $$ log.debug("Determining zip file organization...") [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_4 $$ BosVisitor visitor = new DxpFileOrganizingBosVisitor() [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_5 $$ visitor.visit(mapBos) [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_5 $$ visitor.visit(mapBos) [FD]
Line_4 $$ BosVisitor visitor = new DxpFileOrganizingBosVisitor() --> Line_5 $$ visitor.visit(mapBos) [FD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_6 $$ log.info("Creating DXP package \"" + outputZipFile.getAbsolutePath() + "\"...") [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_6 $$ log.info("Creating DXP package \"" + outputZipFile.getAbsolutePath() + "\"...") [FD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_7 $$ OutputStream outStream = new FileOutputStream(outputZipFile) [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_8 $$ ZipOutputStream zipOutStream = new ZipOutputStream(outStream) [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_9 $$ ZipEntry entry = null [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_10 $$ URI rootMapUri = mapBos.getRoot().getEffectiveUri() [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_10 $$ URI rootMapUri = mapBos.getRoot().getEffectiveUri() [FD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_11 $$ URI baseUri = null [CD]
Line_11 $$ URI baseUri = null --> Line_13 $$ baseUri = AddressingUtil.getParent(rootMapUri) [FD]
Line_10 $$ URI rootMapUri = mapBos.getRoot().getEffectiveUri() --> Line_13 $$ baseUri = AddressingUtil.getParent(rootMapUri) [FD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_17 $$ Set<String> dirs = new HashSet<String>() [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_18 $$ log.info("Constructing DXP package...") [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_18 $$ log.info("Constructing DXP package...") [FD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_19 $$ for (BosMember member : mapBos.getMembers()) [FD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_20 $$ log.info("Adding member " + member + " to zip...") [FD]
Line_11 $$ URI baseUri = null --> Line_21 $$ URI relativeUri = baseUri.relativize(member.getEffectiveUri()) [FD]
Line_13 $$ baseUri = AddressingUtil.getParent(rootMapUri) --> Line_21 $$ URI relativeUri = baseUri.relativize(member.getEffectiveUri()) [FD]
Line_19 $$ for (BosMember member : mapBos.getMembers()) --> Line_21 $$ URI relativeUri = baseUri.relativize(member.getEffectiveUri()) [FD]
Line_21 $$ URI relativeUri = baseUri.relativize(member.getEffectiveUri()) --> Line_22 $$ File temp = new File(relativeUri.getPath()) [FD]
Line_22 $$ File temp = new File(relativeUri.getPath()) --> Line_23 $$ String parentPath = temp.getParent() [FD]
Line_23 $$ String parentPath = temp.getParent() --> Line_24 $$ if (parentPath != null && !"".equals(parentPath) && !parentPath.endsWith("/")) [FD]
Line_24 $$ if (parentPath != null && !"".equals(parentPath) && !parentPath.endsWith("/")) --> Line_25 $$ parentPath += "/" [CD]
Line_23 $$ String parentPath = temp.getParent() --> Line_25 $$ parentPath += "/" [FD]
Line_23 $$ String parentPath = temp.getParent() --> Line_28 $$ if (!"".equals(parentPath) && parentPath != null && !dirs.contains(parentPath)) [FD]
Line_25 $$ parentPath += "/" --> Line_28 $$ if (!"".equals(parentPath) && parentPath != null && !dirs.contains(parentPath)) [FD]
Line_17 $$ Set<String> dirs = new HashSet<String>() --> Line_28 $$ if (!"".equals(parentPath) && parentPath != null && !dirs.contains(parentPath)) [FD]
Line_28 $$ if (!"".equals(parentPath) && parentPath != null && !dirs.contains(parentPath)) --> Line_29 $$ entry = new ZipEntry(parentPath) [CD]
Line_28 $$ if (!"".equals(parentPath) && parentPath != null && !dirs.contains(parentPath)) --> Line_30 $$ zipOutStream.putNextEntry(entry) [CD]
Line_8 $$ ZipOutputStream zipOutStream = new ZipOutputStream(outStream) --> Line_30 $$ zipOutStream.putNextEntry(entry) [FD]
Line_28 $$ if (!"".equals(parentPath) && parentPath != null && !dirs.contains(parentPath)) --> Line_31 $$ zipOutStream.closeEntry() [CD]
Line_8 $$ ZipOutputStream zipOutStream = new ZipOutputStream(outStream) --> Line_31 $$ zipOutStream.closeEntry() [FD]
Line_28 $$ if (!"".equals(parentPath) && parentPath != null && !dirs.contains(parentPath)) --> Line_32 $$ dirs.add(parentPath) [CD]
Line_17 $$ Set<String> dirs = new HashSet<String>() --> Line_32 $$ dirs.add(parentPath) [FD]
Line_23 $$ String parentPath = temp.getParent() --> Line_32 $$ dirs.add(parentPath) [FD]
Line_25 $$ parentPath += "/" --> Line_32 $$ dirs.add(parentPath) [FD]
Line_21 $$ URI relativeUri = baseUri.relativize(member.getEffectiveUri()) --> Line_34 $$ entry = new ZipEntry(relativeUri.getPath()) [FD]
Line_8 $$ ZipOutputStream zipOutStream = new ZipOutputStream(outStream) --> Line_35 $$ zipOutStream.putNextEntry(entry) [FD]
Line_8 $$ ZipOutputStream zipOutStream = new ZipOutputStream(outStream) --> Line_36 $$ IOUtils.copy(member.getInputStream(), zipOutStream) [FD]
Line_19 $$ for (BosMember member : mapBos.getMembers()) --> Line_36 $$ IOUtils.copy(member.getInputStream(), zipOutStream) [FD]
Line_8 $$ ZipOutputStream zipOutStream = new ZipOutputStream(outStream) --> Line_37 $$ zipOutStream.closeEntry() [FD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_39 $$ zipOutStream.close() [CD]
Line_8 $$ ZipOutputStream zipOutStream = new ZipOutputStream(outStream) --> Line_39 $$ zipOutStream.close() [FD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_40 $$ log.info("DXP package \"" + outputZipFile.getAbsolutePath() + "\" created.") [CD]
Line_2 $$ public static void zipMapBos(DitaBoundedObjectSet mapBos, File outputZipFile, MapBosProcessorOptions options) throws Exception --> Line_40 $$ log.info("DXP package \"" + outputZipFile.getAbsolutePath() + "\" created.") [FD]
