Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_3 $$ final Map<String, String> fileAttr = new HashMap<String, String>() [CD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_4 $$ boolean download = false [CD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_5 $$ String dw = req.getParameter("d") [CD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_5 $$ String dw = req.getParameter("d") [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_6 $$ if (StringUtils.isNotEmpty(dw) && StringUtils.equals(dw, "true")) [CD]
Line_5 $$ String dw = req.getParameter("d") --> Line_6 $$ if (StringUtils.isNotEmpty(dw) && StringUtils.equals(dw, "true")) [FD]
Line_6 $$ if (StringUtils.isNotEmpty(dw) && StringUtils.equals(dw, "true")) --> Line_7 $$ download = true [CD]
Line_4 $$ boolean download = false --> Line_7 $$ download = true [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_9 $$ final ByteArrayOutputStream imageOutputStream = new ByteArrayOutputStream(DEFAULT_CONTENT_LENGTH_SIZE) [CD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_10 $$ InputStream imageInputStream = null [CD]
Line_10 $$ InputStream imageInputStream = null --> Line_12 $$ imageInputStream = getImageAsStream(req, fileAttr) [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_12 $$ imageInputStream = getImageAsStream(req, fileAttr) [FD]
Line_3 $$ final Map<String, String> fileAttr = new HashMap<String, String>() --> Line_12 $$ imageInputStream = getImageAsStream(req, fileAttr) [FD]
Line_10 $$ InputStream imageInputStream = null --> Line_13 $$ IOUtils.copy(imageInputStream, imageOutputStream) [FD]
Line_12 $$ imageInputStream = getImageAsStream(req, fileAttr) --> Line_13 $$ IOUtils.copy(imageInputStream, imageOutputStream) [FD]
Line_9 $$ final ByteArrayOutputStream imageOutputStream = new ByteArrayOutputStream(DEFAULT_CONTENT_LENGTH_SIZE) --> Line_13 $$ IOUtils.copy(imageInputStream, imageOutputStream) [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_14 $$ resp.setHeader("Cache-Control", "no-store") [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_15 $$ resp.setHeader("Pragma", "no-cache") [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_16 $$ resp.setDateHeader("Expires", 0) [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_17 $$ resp.setContentType(fileAttr.get("mimetype")) [FD]
Line_3 $$ final Map<String, String> fileAttr = new HashMap<String, String>() --> Line_17 $$ resp.setContentType(fileAttr.get("mimetype")) [FD]
Line_18 $$ if (download) --> Line_19 $$ resp.setHeader("Content-Disposition", "attachment; filename=\"" + fileAttr.get("filename") + "\"") [CD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_19 $$ resp.setHeader("Content-Disposition", "attachment; filename=\"" + fileAttr.get("filename") + "\"") [FD]
Line_3 $$ final Map<String, String> fileAttr = new HashMap<String, String>() --> Line_19 $$ resp.setHeader("Content-Disposition", "attachment; filename=\"" + fileAttr.get("filename") + "\"") [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_21 $$ final ServletOutputStream responseOutputStream = resp.getOutputStream() [FD]
Line_21 $$ final ServletOutputStream responseOutputStream = resp.getOutputStream() --> Line_22 $$ responseOutputStream.write(imageOutputStream.toByteArray()) [FD]
Line_9 $$ final ByteArrayOutputStream imageOutputStream = new ByteArrayOutputStream(DEFAULT_CONTENT_LENGTH_SIZE) --> Line_22 $$ responseOutputStream.write(imageOutputStream.toByteArray()) [FD]
Line_21 $$ final ServletOutputStream responseOutputStream = resp.getOutputStream() --> Line_23 $$ responseOutputStream.flush() [FD]
Line_21 $$ final ServletOutputStream responseOutputStream = resp.getOutputStream() --> Line_24 $$ responseOutputStream.close() [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_27 $$ resp.setContentType("text/html") [FD]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException --> Line_28 $$ resp.getWriter().println("<h1>Sorry... cannot find document</h1>") [FD]
Line_10 $$ InputStream imageInputStream = null --> Line_30 $$ IOUtils.closeQuietly(imageInputStream) [FD]
Line_12 $$ imageInputStream = getImageAsStream(req, fileAttr) --> Line_30 $$ IOUtils.closeQuietly(imageInputStream) [FD]
Line_9 $$ final ByteArrayOutputStream imageOutputStream = new ByteArrayOutputStream(DEFAULT_CONTENT_LENGTH_SIZE) --> Line_31 $$ IOUtils.closeQuietly(imageOutputStream) [FD]
