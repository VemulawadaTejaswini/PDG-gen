Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_3 $$ List<String> signatureResourceNames = new LinkedList<String>() [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_4 $$ ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_4 $$ ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_5 $$ ZipArchiveEntry zipEntry [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_6 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [CD]
Line_4 $$ ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) --> Line_6 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_11 $$ if (null == zipEntry) [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_15 $$ String dsOriginPart = null [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_16 $$ JAXBElement<CTRelationships> packageRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) [CD]
Line_4 $$ ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) --> Line_16 $$ JAXBElement<CTRelationships> packageRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_17 $$ CTRelationships packageRelationships = packageRelationshipsElement.getValue() [CD]
Line_16 $$ JAXBElement<CTRelationships> packageRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) --> Line_17 $$ CTRelationships packageRelationships = packageRelationshipsElement.getValue() [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_18 $$ List<CTRelationship> packageRelationshipList = packageRelationships.getRelationship() [CD]
Line_17 $$ CTRelationships packageRelationships = packageRelationshipsElement.getValue() --> Line_18 $$ List<CTRelationship> packageRelationshipList = packageRelationships.getRelationship() [FD]
Line_19 $$ for (CTRelationship packageRelationship : packageRelationshipList) --> Line_20 $$ if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_ORIGIN_REL_TYPE.equals(packageRelationship.getType())) [FD]
Line_20 $$ if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_ORIGIN_REL_TYPE.equals(packageRelationship.getType())) --> Line_21 $$ dsOriginPart = packageRelationship.getTarget() [CD]
Line_15 $$ String dsOriginPart = null --> Line_21 $$ dsOriginPart = packageRelationship.getTarget() [FD]
Line_19 $$ for (CTRelationship packageRelationship : packageRelationshipList) --> Line_21 $$ dsOriginPart = packageRelationship.getTarget() [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_25 $$ if (null == dsOriginPart) [CD]
Line_15 $$ String dsOriginPart = null --> Line_25 $$ if (null == dsOriginPart) [FD]
Line_21 $$ dsOriginPart = packageRelationship.getTarget() --> Line_25 $$ if (null == dsOriginPart) [FD]
Line_25 $$ if (null == dsOriginPart) --> Line_26 $$ LOG.debug("no Digital Signature Origin part present") [CD]
Line_25 $$ if (null == dsOriginPart) --> Line_27 $$ return signatureResourceNames [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_29 $$ LOG.debug("Digital Signature Origin part: " + dsOriginPart) [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_30 $$ String dsOriginName = dsOriginPart.substring(dsOriginPart.lastIndexOf("/") + 1) [CD]
Line_15 $$ String dsOriginPart = null --> Line_30 $$ String dsOriginName = dsOriginPart.substring(dsOriginPart.lastIndexOf("/") + 1) [FD]
Line_21 $$ dsOriginPart = packageRelationship.getTarget() --> Line_30 $$ String dsOriginName = dsOriginPart.substring(dsOriginPart.lastIndexOf("/") + 1) [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_31 $$ LOG.debug("Digital Signature Origin base: " + dsOriginName) [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_32 $$ String dsOriginSegment = dsOriginPart.substring(0, dsOriginPart.lastIndexOf("/")) + "/" [CD]
Line_15 $$ String dsOriginPart = null --> Line_32 $$ String dsOriginSegment = dsOriginPart.substring(0, dsOriginPart.lastIndexOf("/")) + "/" [FD]
Line_21 $$ dsOriginPart = packageRelationship.getTarget() --> Line_32 $$ String dsOriginSegment = dsOriginPart.substring(0, dsOriginPart.lastIndexOf("/")) + "/" [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_33 $$ LOG.debug("Digital Signature Origin segment: " + dsOriginSegment) [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_34 $$ String dsOriginRels = dsOriginSegment + "_rels/" + dsOriginName + ".rels" [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_35 $$ LOG.debug("Digital Signature Origin relationship part: " + dsOriginRels) [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_36 $$ if (dsOriginRels.startsWith("/")) [CD]
Line_34 $$ String dsOriginRels = dsOriginSegment + "_rels/" + dsOriginName + ".rels" --> Line_36 $$ if (dsOriginRels.startsWith("/")) [FD]
Line_36 $$ if (dsOriginRels.startsWith("/")) --> Line_37 $$ dsOriginRels = dsOriginRels.substring(1) [CD]
Line_34 $$ String dsOriginRels = dsOriginSegment + "_rels/" + dsOriginName + ".rels" --> Line_37 $$ dsOriginRels = dsOriginRels.substring(1) [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_39 $$ zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_39 $$ zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) [FD]
Line_4 $$ ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) --> Line_39 $$ zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_40 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [CD]
Line_4 $$ ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) --> Line_40 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [FD]
Line_39 $$ zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) --> Line_40 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [FD]
Line_34 $$ String dsOriginRels = dsOriginSegment + "_rels/" + dsOriginName + ".rels" --> Line_41 $$ if (dsOriginRels.equals(zipEntry.getName())) [FD]
Line_37 $$ dsOriginRels = dsOriginRels.substring(1) --> Line_41 $$ if (dsOriginRels.equals(zipEntry.getName())) [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_45 $$ if (null == zipEntry) [CD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_49 $$ JAXBElement<CTRelationships> dsoRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) [CD]
Line_4 $$ ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) --> Line_49 $$ JAXBElement<CTRelationships> dsoRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) [FD]
Line_39 $$ zipInputStream = new ZipArchiveInputStream(url.openStream(), "UTF8", true, true) --> Line_49 $$ JAXBElement<CTRelationships> dsoRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_50 $$ CTRelationships dsoRelationships = dsoRelationshipsElement.getValue() [CD]
Line_49 $$ JAXBElement<CTRelationships> dsoRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) --> Line_50 $$ CTRelationships dsoRelationships = dsoRelationshipsElement.getValue() [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_51 $$ List<CTRelationship> dsoRelationshipList = dsoRelationships.getRelationship() [CD]
Line_50 $$ CTRelationships dsoRelationships = dsoRelationshipsElement.getValue() --> Line_51 $$ List<CTRelationship> dsoRelationshipList = dsoRelationships.getRelationship() [FD]
Line_52 $$ for (CTRelationship dsoRelationship : dsoRelationshipList) --> Line_53 $$ if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_REL_TYPE.equals(dsoRelationship.getType())) [FD]
Line_53 $$ if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_REL_TYPE.equals(dsoRelationship.getType())) --> Line_54 $$ String signatureResourceName [CD]
Line_53 $$ if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_REL_TYPE.equals(dsoRelationship.getType())) --> Line_55 $$ if (dsoRelationship.getTarget().startsWith("/")) [CD]
Line_52 $$ for (CTRelationship dsoRelationship : dsoRelationshipList) --> Line_55 $$ if (dsoRelationship.getTarget().startsWith("/")) [FD]
Line_55 $$ if (dsoRelationship.getTarget().startsWith("/")) --> Line_56 $$ signatureResourceName = dsoRelationship.getTarget() [CD]
Line_54 $$ String signatureResourceName --> Line_56 $$ signatureResourceName = dsoRelationship.getTarget() [FD]
Line_52 $$ for (CTRelationship dsoRelationship : dsoRelationshipList) --> Line_56 $$ signatureResourceName = dsoRelationship.getTarget() [FD]
Line_55 $$ if (dsoRelationship.getTarget().startsWith("/")) --> Line_58 $$ signatureResourceName = dsOriginSegment + dsoRelationship.getTarget() [CD]
Line_54 $$ String signatureResourceName --> Line_58 $$ signatureResourceName = dsOriginSegment + dsoRelationship.getTarget() [FD]
Line_56 $$ signatureResourceName = dsoRelationship.getTarget() --> Line_58 $$ signatureResourceName = dsOriginSegment + dsoRelationship.getTarget() [FD]
Line_32 $$ String dsOriginSegment = dsOriginPart.substring(0, dsOriginPart.lastIndexOf("/")) + "/" --> Line_58 $$ signatureResourceName = dsOriginSegment + dsoRelationship.getTarget() [FD]
Line_52 $$ for (CTRelationship dsoRelationship : dsoRelationshipList) --> Line_58 $$ signatureResourceName = dsOriginSegment + dsoRelationship.getTarget() [FD]
Line_53 $$ if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_REL_TYPE.equals(dsoRelationship.getType())) --> Line_60 $$ if (signatureResourceName.startsWith("/")) [CD]
Line_54 $$ String signatureResourceName --> Line_60 $$ if (signatureResourceName.startsWith("/")) [FD]
Line_56 $$ signatureResourceName = dsoRelationship.getTarget() --> Line_60 $$ if (signatureResourceName.startsWith("/")) [FD]
Line_58 $$ signatureResourceName = dsOriginSegment + dsoRelationship.getTarget() --> Line_60 $$ if (signatureResourceName.startsWith("/")) [FD]
Line_60 $$ if (signatureResourceName.startsWith("/")) --> Line_61 $$ signatureResourceName = signatureResourceName.substring(1) [CD]
Line_54 $$ String signatureResourceName --> Line_61 $$ signatureResourceName = signatureResourceName.substring(1) [FD]
Line_56 $$ signatureResourceName = dsoRelationship.getTarget() --> Line_61 $$ signatureResourceName = signatureResourceName.substring(1) [FD]
Line_58 $$ signatureResourceName = dsOriginSegment + dsoRelationship.getTarget() --> Line_61 $$ signatureResourceName = signatureResourceName.substring(1) [FD]
Line_53 $$ if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_REL_TYPE.equals(dsoRelationship.getType())) --> Line_63 $$ LOG.debug("signature resource name: " + signatureResourceName) [CD]
Line_53 $$ if (OOXMLSignatureVerifier.DIGITAL_SIGNATURE_REL_TYPE.equals(dsoRelationship.getType())) --> Line_64 $$ signatureResourceNames.add(signatureResourceName) [CD]
Line_3 $$ List<String> signatureResourceNames = new LinkedList<String>() --> Line_64 $$ signatureResourceNames.add(signatureResourceName) [FD]
Line_54 $$ String signatureResourceName --> Line_64 $$ signatureResourceNames.add(signatureResourceName) [FD]
Line_56 $$ signatureResourceName = dsoRelationship.getTarget() --> Line_64 $$ signatureResourceNames.add(signatureResourceName) [FD]
Line_58 $$ signatureResourceName = dsOriginSegment + dsoRelationship.getTarget() --> Line_64 $$ signatureResourceNames.add(signatureResourceName) [FD]
Line_61 $$ signatureResourceName = signatureResourceName.substring(1) --> Line_64 $$ signatureResourceNames.add(signatureResourceName) [FD]
Line_2 $$ private List<String> getSignatureResourceNames(URL url) throws IOException, ParserConfigurationException, SAXException, TransformerException, JAXBException --> Line_67 $$ return signatureResourceNames [CD]
