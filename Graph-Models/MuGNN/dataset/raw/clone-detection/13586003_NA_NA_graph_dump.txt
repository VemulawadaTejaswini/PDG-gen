Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_3 $$ System.out.println("GetObservationBasic.call url " + url) [CD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_4 $$ URL service = null [CD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_5 $$ URLConnection connection = null [CD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_6 $$ ArrayList<ObservationResult> obsList = new ArrayList<ObservationResult>() [CD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_7 $$ boolean isDataArrayRead = false [CD]
Line_4 $$ URL service = null --> Line_9 $$ service = new URL(url) [FD]
Line_5 $$ URLConnection connection = null --> Line_10 $$ connection = service.openConnection() [FD]
Line_4 $$ URL service = null --> Line_10 $$ connection = service.openConnection() [FD]
Line_9 $$ service = new URL(url) --> Line_10 $$ connection = service.openConnection() [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_16 $$ connection.setDoOutput(true) [CD]
Line_5 $$ URLConnection connection = null --> Line_16 $$ connection.setDoOutput(true) [FD]
Line_10 $$ connection = service.openConnection() --> Line_16 $$ connection.setDoOutput(true) [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_17 $$ connection.setDoInput(true) [CD]
Line_5 $$ URLConnection connection = null --> Line_17 $$ connection.setDoInput(true) [FD]
Line_10 $$ connection = service.openConnection() --> Line_17 $$ connection.setDoInput(true) [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_18 $$ connection.setUseCaches(false) [CD]
Line_5 $$ URLConnection connection = null --> Line_18 $$ connection.setUseCaches(false) [FD]
Line_10 $$ connection = service.openConnection() --> Line_18 $$ connection.setUseCaches(false) [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_19 $$ connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded") [CD]
Line_5 $$ URLConnection connection = null --> Line_19 $$ connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded") [FD]
Line_10 $$ connection = service.openConnection() --> Line_19 $$ connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded") [FD]
Line_5 $$ URLConnection connection = null --> Line_21 $$ DataOutputStream out = new DataOutputStream(connection.getOutputStream()) [FD]
Line_10 $$ connection = service.openConnection() --> Line_21 $$ DataOutputStream out = new DataOutputStream(connection.getOutputStream()) [FD]
Line_22 $$ GetObservationDocument getobDoc = GetObservationDocument.Factory.newInstance() --> Line_23 $$ GetObservation getob = getobDoc.addNewGetObservation() [FD]
Line_23 $$ GetObservation getob = getobDoc.addNewGetObservation() --> Line_24 $$ getob.setService(servicename) [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_24 $$ getob.setService(servicename) [FD]
Line_23 $$ GetObservation getob = getobDoc.addNewGetObservation() --> Line_25 $$ getob.setVersion(version) [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_25 $$ getob.setVersion(version) [FD]
Line_23 $$ GetObservation getob = getobDoc.addNewGetObservation() --> Line_26 $$ getob.setSrsName(srsname) [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_26 $$ getob.setSrsName(srsname) [FD]
Line_23 $$ GetObservation getob = getobDoc.addNewGetObservation() --> Line_27 $$ getob.setOffering(offering) [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_27 $$ getob.setOffering(offering) [FD]
Line_23 $$ GetObservation getob = getobDoc.addNewGetObservation() --> Line_28 $$ getob.setObservedPropertyArray(new String[] [FD]
Line_23 $$ GetObservation getob = getobDoc.addNewGetObservation() --> Line_29 $$ getob.setResponseFormat(responseFormat) [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_29 $$ getob.setResponseFormat(responseFormat) [FD]
Line_22 $$ GetObservationDocument getobDoc = GetObservationDocument.Factory.newInstance() --> Line_30 $$ String request = URLEncoder.encode(getobDoc.xmlText(), "UTF-8") [FD]
Line_21 $$ DataOutputStream out = new DataOutputStream(connection.getOutputStream()) --> Line_31 $$ out.writeBytes(request) [FD]
Line_30 $$ String request = URLEncoder.encode(getobDoc.xmlText(), "UTF-8") --> Line_31 $$ out.writeBytes(request) [FD]
Line_21 $$ DataOutputStream out = new DataOutputStream(connection.getOutputStream()) --> Line_32 $$ out.flush() [FD]
Line_21 $$ DataOutputStream out = new DataOutputStream(connection.getOutputStream()) --> Line_33 $$ out.close() [FD]
Line_40 $$ URL observation_url = new URL("file:///E:/Temp/Observation.xml") --> Line_41 $$ URLConnection urlc = observation_url.openConnection() [FD]
Line_41 $$ URLConnection urlc = observation_url.openConnection() --> Line_42 $$ urlc.connect() [FD]
Line_41 $$ URLConnection urlc = observation_url.openConnection() --> Line_43 $$ InputStream observation_url_is = urlc.getInputStream() [FD]
Line_43 $$ InputStream observation_url_is = urlc.getInputStream() --> Line_44 $$ ObservationCollectionDocument obsCollDoc = ObservationCollectionDocument.Factory.parse(observation_url_is) [FD]
Line_44 $$ ObservationCollectionDocument obsCollDoc = ObservationCollectionDocument.Factory.parse(observation_url_is) --> Line_45 $$ ObservationCollectionType obsColl = obsCollDoc.getObservationCollection() [FD]
Line_45 $$ ObservationCollectionType obsColl = obsCollDoc.getObservationCollection() --> Line_46 $$ ObservationPropertyType[] aObsPropType = obsColl.getMemberArray() [FD]
Line_47 $$ for (ObservationPropertyType observationPropertyType : aObsPropType) --> Line_48 $$ ObservationType observation = observationPropertyType.getObservation() [FD]
Line_48 $$ ObservationType observation = observationPropertyType.getObservation() --> Line_49 $$ if (observation != null) [FD]
Line_49 $$ if (observation != null) --> Line_50 $$ System.out.println("observation " + observation.getClass().getName()) [CD]
Line_48 $$ ObservationType observation = observationPropertyType.getObservation() --> Line_50 $$ System.out.println("observation " + observation.getClass().getName()) [FD]
Line_49 $$ if (observation != null) --> Line_51 $$ ObservationResult obsResult = new ObservationResult() [CD]
Line_49 $$ if (observation != null) --> Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) [CD]
Line_48 $$ ObservationType observation = observationPropertyType.getObservation() --> Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_53 $$ GeometryObservationTypeImpl geometryObservation = (GeometryObservationTypeImpl) observation [CD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_54 $$ TimeObjectPropertyType samplingTime = geometryObservation.getSamplingTime() [CD]
Line_53 $$ GeometryObservationTypeImpl geometryObservation = (GeometryObservationTypeImpl) observation --> Line_54 $$ TimeObjectPropertyType samplingTime = geometryObservation.getSamplingTime() [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_55 $$ TimeInstantTypeImpl timeInstant = (TimeInstantTypeImpl) samplingTime.getTimeObject() [CD]
Line_54 $$ TimeObjectPropertyType samplingTime = geometryObservation.getSamplingTime() --> Line_55 $$ TimeInstantTypeImpl timeInstant = (TimeInstantTypeImpl) samplingTime.getTimeObject() [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_56 $$ TimePositionType timePosition = timeInstant.getTimePosition() [CD]
Line_55 $$ TimeInstantTypeImpl timeInstant = (TimeInstantTypeImpl) samplingTime.getTimeObject() --> Line_56 $$ TimePositionType timePosition = timeInstant.getTimePosition() [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_57 $$ String time = (String) timePosition.getObjectValue() [CD]
Line_56 $$ TimePositionType timePosition = timeInstant.getTimePosition() --> Line_57 $$ String time = (String) timePosition.getObjectValue() [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_58 $$ StringTokenizer date_st [CD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_59 $$ String day = new StringTokenizer(time, "T").nextToken() [CD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_60 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd") [CD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_61 $$ Date d = sdf.parse(day) [CD]
Line_60 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd") --> Line_61 $$ Date d = sdf.parse(day) [FD]
Line_59 $$ String day = new StringTokenizer(time, "T").nextToken() --> Line_61 $$ Date d = sdf.parse(day) [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_62 $$ String timetemp = null [CD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_63 $$ date_st = new StringTokenizer(time, "T") [CD]
Line_58 $$ StringTokenizer date_st --> Line_63 $$ date_st = new StringTokenizer(time, "T") [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_64 $$ while (date_st.hasMoreElements()) timetemp = date_st.nextToken() [CD]
Line_58 $$ StringTokenizer date_st --> Line_64 $$ while (date_st.hasMoreElements()) timetemp = date_st.nextToken() [FD]
Line_63 $$ date_st = new StringTokenizer(time, "T") --> Line_64 $$ while (date_st.hasMoreElements()) timetemp = date_st.nextToken() [FD]
Line_62 $$ String timetemp = null --> Line_64 $$ while (date_st.hasMoreElements()) timetemp = date_st.nextToken() [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_65 $$ sdf = new SimpleDateFormat("HH:mm:ss") [CD]
Line_60 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd") --> Line_65 $$ sdf = new SimpleDateFormat("HH:mm:ss") [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_66 $$ Date ti = sdf.parse(timetemp.substring(0, timetemp.lastIndexOf(':') + 2)) [CD]
Line_60 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd") --> Line_66 $$ Date ti = sdf.parse(timetemp.substring(0, timetemp.lastIndexOf(':') + 2)) [FD]
Line_65 $$ sdf = new SimpleDateFormat("HH:mm:ss") --> Line_66 $$ Date ti = sdf.parse(timetemp.substring(0, timetemp.lastIndexOf(':') + 2)) [FD]
Line_64 $$ while (date_st.hasMoreElements()) timetemp = date_st.nextToken() --> Line_66 $$ Date ti = sdf.parse(timetemp.substring(0, timetemp.lastIndexOf(':') + 2)) [FD]
Line_62 $$ String timetemp = null --> Line_66 $$ Date ti = sdf.parse(timetemp.substring(0, timetemp.lastIndexOf(':') + 2)) [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_67 $$ d.setHours(ti.getHours()) [CD]
Line_61 $$ Date d = sdf.parse(day) --> Line_67 $$ d.setHours(ti.getHours()) [FD]
Line_66 $$ Date ti = sdf.parse(timetemp.substring(0, timetemp.lastIndexOf(':') + 2)) --> Line_67 $$ d.setHours(ti.getHours()) [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_68 $$ d.setMinutes(ti.getMinutes()) [CD]
Line_61 $$ Date d = sdf.parse(day) --> Line_68 $$ d.setMinutes(ti.getMinutes()) [FD]
Line_66 $$ Date ti = sdf.parse(timetemp.substring(0, timetemp.lastIndexOf(':') + 2)) --> Line_68 $$ d.setMinutes(ti.getMinutes()) [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_69 $$ d.setSeconds(ti.getSeconds()) [CD]
Line_61 $$ Date d = sdf.parse(day) --> Line_69 $$ d.setSeconds(ti.getSeconds()) [FD]
Line_66 $$ Date ti = sdf.parse(timetemp.substring(0, timetemp.lastIndexOf(':') + 2)) --> Line_69 $$ d.setSeconds(ti.getSeconds()) [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_70 $$ obsResult.setDatetime(d) [CD]
Line_51 $$ ObservationResult obsResult = new ObservationResult() --> Line_70 $$ obsResult.setDatetime(d) [FD]
Line_61 $$ Date d = sdf.parse(day) --> Line_70 $$ obsResult.setDatetime(d) [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_71 $$ String textValue = "null" [CD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_72 $$ FeaturePropertyType featureOfInterest = (FeaturePropertyType) geometryObservation.getFeatureOfInterest() [CD]
Line_53 $$ GeometryObservationTypeImpl geometryObservation = (GeometryObservationTypeImpl) observation --> Line_72 $$ FeaturePropertyType featureOfInterest = (FeaturePropertyType) geometryObservation.getFeatureOfInterest() [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_73 $$ Node fnode = featureOfInterest.getDomNode() [CD]
Line_72 $$ FeaturePropertyType featureOfInterest = (FeaturePropertyType) geometryObservation.getFeatureOfInterest() --> Line_73 $$ Node fnode = featureOfInterest.getDomNode() [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_74 $$ NodeList childNodes = fnode.getChildNodes() [CD]
Line_73 $$ Node fnode = featureOfInterest.getDomNode() --> Line_74 $$ NodeList childNodes = fnode.getChildNodes() [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_75 $$ for (int j = 0; j < childNodes.getLength(); j++) [CD]
Line_74 $$ NodeList childNodes = fnode.getChildNodes() --> Line_75 $$ for (int j = 0; j < childNodes.getLength(); j++) [FD]
Line_75 $$ for (int j = 0; j < childNodes.getLength(); j++) --> Line_76 $$ Node cnode = childNodes.item(j) [CD]
Line_75 $$ for (int j = 0; j < childNodes.getLength(); j++) --> Line_76 $$ Node cnode = childNodes.item(j) [FD]
Line_74 $$ NodeList childNodes = fnode.getChildNodes() --> Line_76 $$ Node cnode = childNodes.item(j) [FD]
Line_75 $$ for (int j = 0; j < childNodes.getLength(); j++) --> Line_77 $$ if (cnode.getNodeName().equals("n52:movingObject")) [CD]
Line_76 $$ Node cnode = childNodes.item(j) --> Line_77 $$ if (cnode.getNodeName().equals("n52:movingObject")) [FD]
Line_77 $$ if (cnode.getNodeName().equals("n52:movingObject")) --> Line_78 $$ NamedNodeMap att = cnode.getAttributes() [CD]
Line_76 $$ Node cnode = childNodes.item(j) --> Line_78 $$ NamedNodeMap att = cnode.getAttributes() [FD]
Line_77 $$ if (cnode.getNodeName().equals("n52:movingObject")) --> Line_79 $$ Node id = att.getNamedItem("gml:id") [CD]
Line_78 $$ NamedNodeMap att = cnode.getAttributes() --> Line_79 $$ Node id = att.getNamedItem("gml:id") [FD]
Line_77 $$ if (cnode.getNodeName().equals("n52:movingObject")) --> Line_80 $$ textValue = id.getNodeValue() [CD]
Line_71 $$ String textValue = "null" --> Line_80 $$ textValue = id.getNodeValue() [FD]
Line_79 $$ Node id = att.getNamedItem("gml:id") --> Line_80 $$ textValue = id.getNodeValue() [FD]
Line_77 $$ if (cnode.getNodeName().equals("n52:movingObject")) --> Line_81 $$ obsResult.setTextValue(textValue) [CD]
Line_51 $$ ObservationResult obsResult = new ObservationResult() --> Line_81 $$ obsResult.setTextValue(textValue) [FD]
Line_80 $$ textValue = id.getNodeValue() --> Line_81 $$ obsResult.setTextValue(textValue) [FD]
Line_71 $$ String textValue = "null" --> Line_81 $$ obsResult.setTextValue(textValue) [FD]
Line_77 $$ if (cnode.getNodeName().equals("n52:movingObject")) --> Line_82 $$ obsResult.setIsTextValue(true) [CD]
Line_51 $$ ObservationResult obsResult = new ObservationResult() --> Line_82 $$ obsResult.setIsTextValue(true) [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_85 $$ XmlObject result = geometryObservation.getResult() [CD]
Line_53 $$ GeometryObservationTypeImpl geometryObservation = (GeometryObservationTypeImpl) observation --> Line_85 $$ XmlObject result = geometryObservation.getResult() [FD]
Line_52 $$ if (observation instanceof GeometryObservationTypeImpl) --> Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) [CD]
Line_85 $$ XmlObject result = geometryObservation.getResult() --> Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) [FD]
Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) --> Line_87 $$ GeometryPropertyTypeImpl geometryPropertyType = (GeometryPropertyTypeImpl) result [CD]
Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) --> Line_88 $$ AbstractGeometryType geometry = geometryPropertyType.getGeometry() [CD]
Line_87 $$ GeometryPropertyTypeImpl geometryPropertyType = (GeometryPropertyTypeImpl) result --> Line_88 $$ AbstractGeometryType geometry = geometryPropertyType.getGeometry() [FD]
Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) --> Line_89 $$ String srsName = geometry.getSrsName() [CD]
Line_88 $$ AbstractGeometryType geometry = geometryPropertyType.getGeometry() --> Line_89 $$ String srsName = geometry.getSrsName() [FD]
Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) --> Line_90 $$ StringTokenizer st = new StringTokenizer(srsName, ":") [CD]
Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) --> Line_91 $$ String epsg = null [CD]
Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) --> Line_92 $$ while (st.hasMoreElements()) epsg = st.nextToken() [CD]
Line_90 $$ StringTokenizer st = new StringTokenizer(srsName, ":") --> Line_92 $$ while (st.hasMoreElements()) epsg = st.nextToken() [FD]
Line_91 $$ String epsg = null --> Line_92 $$ while (st.hasMoreElements()) epsg = st.nextToken() [FD]
Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) --> Line_93 $$ int sri = Integer.parseInt(epsg) [CD]
Line_92 $$ while (st.hasMoreElements()) epsg = st.nextToken() --> Line_93 $$ int sri = Integer.parseInt(epsg) [FD]
Line_91 $$ String epsg = null --> Line_93 $$ int sri = Integer.parseInt(epsg) [FD]
Line_86 $$ if (result instanceof GeometryPropertyTypeImpl) --> Line_94 $$ if (geometry instanceof PointTypeImpl) [CD]
Line_88 $$ AbstractGeometryType geometry = geometryPropertyType.getGeometry() --> Line_94 $$ if (geometry instanceof PointTypeImpl) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_95 $$ PointTypeImpl point = (PointTypeImpl) geometry [CD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_96 $$ Node node = point.getDomNode() [CD]
Line_95 $$ PointTypeImpl point = (PointTypeImpl) geometry --> Line_96 $$ Node node = point.getDomNode() [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_97 $$ PointDocument pointDocument = PointDocument.Factory.parse(node) [CD]
Line_96 $$ Node node = point.getDomNode() --> Line_97 $$ PointDocument pointDocument = PointDocument.Factory.parse(node) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_98 $$ PointType point2 = pointDocument.getPoint() [CD]
Line_97 $$ PointDocument pointDocument = PointDocument.Factory.parse(node) --> Line_98 $$ PointType point2 = pointDocument.getPoint() [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_99 $$ XmlCursor cursor = point.newCursor() [CD]
Line_95 $$ PointTypeImpl point = (PointTypeImpl) geometry --> Line_99 $$ XmlCursor cursor = point.newCursor() [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_100 $$ cursor.toFirstChild() [CD]
Line_99 $$ XmlCursor cursor = point.newCursor() --> Line_100 $$ cursor.toFirstChild() [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_101 $$ CoordinatesDocument coordinatesDocument = CoordinatesDocument.Factory.parse(cursor.xmlText()) [CD]
Line_99 $$ XmlCursor cursor = point.newCursor() --> Line_101 $$ CoordinatesDocument coordinatesDocument = CoordinatesDocument.Factory.parse(cursor.xmlText()) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_102 $$ CoordinatesType coords = coordinatesDocument.getCoordinates() [CD]
Line_101 $$ CoordinatesDocument coordinatesDocument = CoordinatesDocument.Factory.parse(cursor.xmlText()) --> Line_102 $$ CoordinatesType coords = coordinatesDocument.getCoordinates() [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_103 $$ StringTokenizer tok = new StringTokenizer(coords.getStringValue(), " ,;", false) [CD]
Line_102 $$ CoordinatesType coords = coordinatesDocument.getCoordinates() --> Line_103 $$ StringTokenizer tok = new StringTokenizer(coords.getStringValue(), " ,;", false) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_104 $$ double x = Double.parseDouble(tok.nextToken()) [CD]
Line_103 $$ StringTokenizer tok = new StringTokenizer(coords.getStringValue(), " ,;", false) --> Line_104 $$ double x = Double.parseDouble(tok.nextToken()) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_105 $$ double y = Double.parseDouble(tok.nextToken()) [CD]
Line_103 $$ StringTokenizer tok = new StringTokenizer(coords.getStringValue(), " ,;", false) --> Line_105 $$ double y = Double.parseDouble(tok.nextToken()) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_106 $$ double z = 0 [CD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_107 $$ if (tok.hasMoreTokens()) [CD]
Line_103 $$ StringTokenizer tok = new StringTokenizer(coords.getStringValue(), " ,;", false) --> Line_107 $$ if (tok.hasMoreTokens()) [FD]
Line_107 $$ if (tok.hasMoreTokens()) --> Line_108 $$ z = Double.parseDouble(tok.nextToken()) [CD]
Line_106 $$ double z = 0 --> Line_108 $$ z = Double.parseDouble(tok.nextToken()) [FD]
Line_103 $$ StringTokenizer tok = new StringTokenizer(coords.getStringValue(), " ,;", false) --> Line_108 $$ z = Double.parseDouble(tok.nextToken()) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_110 $$ x += 207561 [CD]
Line_104 $$ double x = Double.parseDouble(tok.nextToken()) --> Line_110 $$ x += 207561 [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_111 $$ y += 3318814 [CD]
Line_105 $$ double y = Double.parseDouble(tok.nextToken()) --> Line_111 $$ y += 3318814 [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_112 $$ z += 20 [CD]
Line_106 $$ double z = 0 --> Line_112 $$ z += 20 [FD]
Line_108 $$ z = Double.parseDouble(tok.nextToken()) --> Line_112 $$ z += 20 [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_113 $$ Point3d center = new Point3d(x, y, z) [CD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_114 $$ obsResult.setCenter(center) [CD]
Line_51 $$ ObservationResult obsResult = new ObservationResult() --> Line_114 $$ obsResult.setCenter(center) [FD]
Line_113 $$ Point3d center = new Point3d(x, y, z) --> Line_114 $$ obsResult.setCenter(center) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_115 $$ GeometryFactory fact = new GeometryFactory() [CD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_116 $$ Coordinate coordinate = new Coordinate(x, y, z) [CD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_117 $$ Geometry g1 = fact.createPoint(coordinate) [CD]
Line_115 $$ GeometryFactory fact = new GeometryFactory() --> Line_117 $$ Geometry g1 = fact.createPoint(coordinate) [FD]
Line_116 $$ Coordinate coordinate = new Coordinate(x, y, z) --> Line_117 $$ Geometry g1 = fact.createPoint(coordinate) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_118 $$ g1.setSRID(sri) [CD]
Line_117 $$ Geometry g1 = fact.createPoint(coordinate) --> Line_118 $$ g1.setSRID(sri) [FD]
Line_93 $$ int sri = Integer.parseInt(epsg) --> Line_118 $$ g1.setSRID(sri) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_119 $$ obsResult.setGeometry(g1) [CD]
Line_51 $$ ObservationResult obsResult = new ObservationResult() --> Line_119 $$ obsResult.setGeometry(g1) [FD]
Line_117 $$ Geometry g1 = fact.createPoint(coordinate) --> Line_119 $$ obsResult.setGeometry(g1) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_120 $$ String href = observation.getProcedure().getHref() [CD]
Line_48 $$ ObservationType observation = observationPropertyType.getObservation() --> Line_120 $$ String href = observation.getProcedure().getHref() [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_121 $$ obsResult.setProcedure(href) [CD]
Line_51 $$ ObservationResult obsResult = new ObservationResult() --> Line_121 $$ obsResult.setProcedure(href) [FD]
Line_120 $$ String href = observation.getProcedure().getHref() --> Line_121 $$ obsResult.setProcedure(href) [FD]
Line_94 $$ if (geometry instanceof PointTypeImpl) --> Line_122 $$ obsList.add(obsResult) [CD]
Line_6 $$ ArrayList<ObservationResult> obsList = new ArrayList<ObservationResult>() --> Line_122 $$ obsList.add(obsResult) [FD]
Line_51 $$ ObservationResult obsResult = new ObservationResult() --> Line_122 $$ obsList.add(obsResult) [FD]
Line_43 $$ InputStream observation_url_is = urlc.getInputStream() --> Line_128 $$ observation_url_is.close() [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_136 $$ ObservationResult[] ar = new ObservationResult[obsList.size()] [CD]
Line_6 $$ ArrayList<ObservationResult> obsList = new ArrayList<ObservationResult>() --> Line_136 $$ ObservationResult[] ar = new ObservationResult[obsList.size()] [FD]
Line_2 $$ public ObservationResult[] call(String url, String servicename, String srsname, String version, String offering, String observed_property, String responseFormat) --> Line_137 $$ return obsList.toArray(ar) [CD]
Line_6 $$ ArrayList<ObservationResult> obsList = new ArrayList<ObservationResult>() --> Line_137 $$ return obsList.toArray(ar) [FD]
Line_136 $$ ObservationResult[] ar = new ObservationResult[obsList.size()] --> Line_137 $$ return obsList.toArray(ar) [FD]
