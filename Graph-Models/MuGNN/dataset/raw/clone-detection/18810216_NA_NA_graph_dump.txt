Line_2 $$ private void doIt() throws Throwable --> Line_3 $$ int numCachedTiles = 0 [CD]
Line_8 $$ final XFile dstDir = new XFile(new XFile(Configuration.getInstance().getPublicMapStorage().toString()), backMapGuid) --> Line_9 $$ dstDir.mkdir() [FD]
Line_6 $$ final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(south, west), new LatLngPoint(north, east)) --> Line_10 $$ for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) [FD]
Line_10 $$ for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) --> Line_11 $$ final Tile tileStart = new Tile(bounds.getSouthWest().getLat(), bounds.getSouthWest().getLng(), z) [CD]
Line_6 $$ final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(south, west), new LatLngPoint(north, east)) --> Line_11 $$ final Tile tileStart = new Tile(bounds.getSouthWest().getLat(), bounds.getSouthWest().getLng(), z) [FD]
Line_10 $$ for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) --> Line_12 $$ final Tile tileEnd = new Tile(bounds.getNorthEast().getLat(), bounds.getNorthEast().getLng(), z) [CD]
Line_6 $$ final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(south, west), new LatLngPoint(north, east)) --> Line_12 $$ final Tile tileEnd = new Tile(bounds.getNorthEast().getLat(), bounds.getNorthEast().getLng(), z) [FD]
Line_10 $$ for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) --> Line_13 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) [CD]
Line_11 $$ final Tile tileStart = new Tile(bounds.getSouthWest().getLat(), bounds.getSouthWest().getLng(), z) --> Line_13 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) [FD]
Line_12 $$ final Tile tileEnd = new Tile(bounds.getNorthEast().getLat(), bounds.getNorthEast().getLng(), z) --> Line_13 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) [FD]
Line_13 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) --> Line_14 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) [CD]
Line_13 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) --> Line_15 $$ XFile file = new XFile(dstDir, tile.toKeyString()) [CD]
Line_14 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) --> Line_15 $$ XFile file = new XFile(dstDir, tile.toKeyString()) [FD]
Line_13 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) --> Line_16 $$ if (file.exists() && file.isFile()) [CD]
Line_15 $$ XFile file = new XFile(dstDir, tile.toKeyString()) --> Line_16 $$ if (file.exists() && file.isFile()) [FD]
Line_13 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) --> Line_17 $$ backTiles.add(tile) [CD]
Line_5 $$ List<MapTile> backTiles = new ArrayList<MapTile>() --> Line_17 $$ backTiles.add(tile) [FD]
Line_14 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) --> Line_17 $$ backTiles.add(tile) [FD]
Line_5 $$ List<MapTile> backTiles = new ArrayList<MapTile>() --> Line_20 $$ logger.info(backTiles.size() + " tiles to cache") [FD]
Line_14 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) --> Line_24 $$ final URL url = new URL(tile.getPath()) [FD]
Line_21 $$ for (MapTile tile : backTiles) --> Line_24 $$ final URL url = new URL(tile.getPath()) [FD]
Line_26 $$ int i = 4 --> Line_27 $$ while (--i > 0) [FD]
Line_27 $$ while (--i > 0) --> Line_28 $$ final XFile outFile = new XFile(dstDir, tile.toKeyString()) [CD]
Line_14 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) --> Line_28 $$ final XFile outFile = new XFile(dstDir, tile.toKeyString()) [FD]
Line_21 $$ for (MapTile tile : backTiles) --> Line_28 $$ final XFile outFile = new XFile(dstDir, tile.toKeyString()) [FD]
Line_27 $$ while (--i > 0) --> Line_29 $$ final URLConnection conn = url.openConnection() [CD]
Line_24 $$ final URL url = new URL(tile.getPath()) --> Line_29 $$ final URLConnection conn = url.openConnection() [FD]
Line_27 $$ while (--i > 0) --> Line_30 $$ if (conn == null || !conn.getContentType().startsWith("image")) [CD]
Line_29 $$ final URLConnection conn = url.openConnection() --> Line_30 $$ if (conn == null || !conn.getContentType().startsWith("image")) [FD]
Line_30 $$ if (conn == null || !conn.getContentType().startsWith("image")) --> Line_31 $$ logger.error("onearth.jpl.nasa.gov service returns non-image file, " + "content-type='" + conn.getContentType() + "'") [CD]
Line_29 $$ final URLConnection conn = url.openConnection() --> Line_31 $$ logger.error("onearth.jpl.nasa.gov service returns non-image file, " + "content-type='" + conn.getContentType() + "'") [FD]
Line_30 $$ if (conn == null || !conn.getContentType().startsWith("image")) --> Line_32 $$ Thread.sleep(1000L * (long) Math.pow(2, 8 - i)) [CD]
Line_27 $$ while (--i > 0) --> Line_35 $$ in = conn.getInputStream() [CD]
Line_22 $$ InputStream in = null --> Line_35 $$ in = conn.getInputStream() [FD]
Line_29 $$ final URLConnection conn = url.openConnection() --> Line_35 $$ in = conn.getInputStream() [FD]
Line_27 $$ while (--i > 0) --> Line_36 $$ if (in != null) [CD]
Line_35 $$ in = conn.getInputStream() --> Line_36 $$ if (in != null) [FD]
Line_22 $$ InputStream in = null --> Line_36 $$ if (in != null) [FD]
Line_36 $$ if (in != null) --> Line_37 $$ out = new XFileOutputStream(outFile) [CD]
Line_23 $$ OutputStream out = null --> Line_37 $$ out = new XFileOutputStream(outFile) [FD]
Line_36 $$ if (in != null) --> Line_38 $$ IOUtils.copy(in, out) [CD]
Line_35 $$ in = conn.getInputStream() --> Line_38 $$ IOUtils.copy(in, out) [FD]
Line_22 $$ InputStream in = null --> Line_38 $$ IOUtils.copy(in, out) [FD]
Line_37 $$ out = new XFileOutputStream(outFile) --> Line_38 $$ IOUtils.copy(in, out) [FD]
Line_23 $$ OutputStream out = null --> Line_38 $$ IOUtils.copy(in, out) [FD]
Line_37 $$ out = new XFileOutputStream(outFile) --> Line_43 $$ if (out != null) [FD]
Line_23 $$ OutputStream out = null --> Line_43 $$ if (out != null) [FD]
Line_43 $$ if (out != null) --> Line_44 $$ out.flush() [CD]
Line_37 $$ out = new XFileOutputStream(outFile) --> Line_44 $$ out.flush() [FD]
Line_23 $$ OutputStream out = null --> Line_44 $$ out.flush() [FD]
Line_43 $$ if (out != null) --> Line_45 $$ out.close() [CD]
Line_37 $$ out = new XFileOutputStream(outFile) --> Line_45 $$ out.close() [FD]
Line_23 $$ OutputStream out = null --> Line_45 $$ out.close() [FD]
Line_35 $$ in = conn.getInputStream() --> Line_47 $$ if (in != null) [FD]
Line_22 $$ InputStream in = null --> Line_47 $$ if (in != null) [FD]
Line_3 $$ int numCachedTiles = 0 --> Line_49 $$ if (++numCachedTiles % 10 == 0) [FD]
Line_49 $$ if (++numCachedTiles % 10 == 0) --> Line_50 $$ logger.info(numCachedTiles + " tiles cached") [CD]
Line_49 $$ if (++numCachedTiles % 10 == 0) --> Line_51 $$ Thread.sleep(sleep) [CD]
