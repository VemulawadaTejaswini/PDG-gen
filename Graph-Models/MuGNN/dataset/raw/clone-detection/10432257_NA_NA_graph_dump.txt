Line_2 $$ private void createImageArchive() throws Exception --> Line_4 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(imageArchive))) [CD]
Line_2 $$ private void createImageArchive() throws Exception --> Line_5 $$ out.writeInt(toNativeEndian(imageFiles.size())) [CD]
Line_4 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(imageArchive))) --> Line_5 $$ out.writeInt(toNativeEndian(imageFiles.size())) [FD]
Line_2 $$ private void createImageArchive() throws Exception --> Line_6 $$ for (int i = 0; i < imageFiles.size(); i++) [CD]
Line_6 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_7 $$ File f = imageFiles.get(i) [CD]
Line_6 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_7 $$ File f = imageFiles.get(i) [FD]
Line_6 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_8 $$ out.writeLong(toNativeEndian(f.length())) [CD]
Line_4 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(imageArchive))) --> Line_8 $$ out.writeLong(toNativeEndian(f.length())) [FD]
Line_7 $$ File f = imageFiles.get(i) --> Line_8 $$ out.writeLong(toNativeEndian(f.length())) [FD]
Line_6 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_9 $$ out.writeLong(toNativeEndian(new File(resFolder, f.getName().substring(0, f.getName().length() - 5)).length())) [CD]
Line_4 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(imageArchive))) --> Line_9 $$ out.writeLong(toNativeEndian(new File(resFolder, f.getName().substring(0, f.getName().length() - 5)).length())) [FD]
Line_7 $$ File f = imageFiles.get(i) --> Line_9 $$ out.writeLong(toNativeEndian(new File(resFolder, f.getName().substring(0, f.getName().length() - 5)).length())) [FD]
Line_2 $$ private void createImageArchive() throws Exception --> Line_11 $$ for (int i = 0; i < imageFiles.size(); i++) [CD]
Line_6 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_11 $$ for (int i = 0; i < imageFiles.size(); i++) [FD]
Line_11 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_12 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(imageFiles.get(i))) [CD]
Line_11 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_12 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(imageFiles.get(i))) [FD]
Line_6 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_12 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(imageFiles.get(i))) [FD]
Line_11 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_13 $$ int read [CD]
Line_11 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_14 $$ while ((read = in.read()) != -1) [CD]
Line_13 $$ int read --> Line_14 $$ while ((read = in.read()) != -1) [FD]
Line_12 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(imageFiles.get(i))) --> Line_14 $$ while ((read = in.read()) != -1) [FD]
Line_14 $$ while ((read = in.read()) != -1) --> Line_15 $$ out.write(read) [CD]
Line_14 $$ while ((read = in.read()) != -1) --> Line_15 $$ out.write(read) [FD]
Line_4 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(imageArchive))) --> Line_15 $$ out.write(read) [FD]
Line_13 $$ int read --> Line_15 $$ out.write(read) [FD]
Line_11 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_17 $$ in.close() [CD]
Line_12 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(imageFiles.get(i))) --> Line_17 $$ in.close() [FD]
Line_2 $$ private void createImageArchive() throws Exception --> Line_19 $$ out.close() [CD]
Line_4 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(imageArchive))) --> Line_19 $$ out.close() [FD]
