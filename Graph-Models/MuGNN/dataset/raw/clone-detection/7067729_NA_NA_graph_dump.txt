Line_2 $$ public void loadScripts() --> Line_3 $$ org.apache.batik.script.Window window = null [CD]
Line_2 $$ public void loadScripts() --> Line_4 $$ NodeList scripts = document.getElementsByTagNameNS(SVGConstants.SVG_NAMESPACE_URI, SVGConstants.SVG_SCRIPT_TAG) [CD]
Line_2 $$ public void loadScripts() --> Line_5 $$ int len = scripts.getLength() [CD]
Line_4 $$ NodeList scripts = document.getElementsByTagNameNS(SVGConstants.SVG_NAMESPACE_URI, SVGConstants.SVG_SCRIPT_TAG) --> Line_5 $$ int len = scripts.getLength() [FD]
Line_2 $$ public void loadScripts() --> Line_6 $$ if (len == 0) [CD]
Line_5 $$ int len = scripts.getLength() --> Line_6 $$ if (len == 0) [FD]
Line_6 $$ if (len == 0) --> Line_7 $$ return [CD]
Line_2 $$ public void loadScripts() --> Line_9 $$ for (int i = 0; i < len; i++) [CD]
Line_5 $$ int len = scripts.getLength() --> Line_9 $$ for (int i = 0; i < len; i++) [FD]
Line_9 $$ for (int i = 0; i < len; i++) --> Line_10 $$ Element script = (Element) scripts.item(i) [CD]
Line_9 $$ for (int i = 0; i < len; i++) --> Line_10 $$ Element script = (Element) scripts.item(i) [FD]
Line_4 $$ NodeList scripts = document.getElementsByTagNameNS(SVGConstants.SVG_NAMESPACE_URI, SVGConstants.SVG_SCRIPT_TAG) --> Line_10 $$ Element script = (Element) scripts.item(i) [FD]
Line_9 $$ for (int i = 0; i < len; i++) --> Line_11 $$ String type = script.getAttributeNS(null, SVGConstants.SVG_TYPE_ATTRIBUTE) [CD]
Line_10 $$ Element script = (Element) scripts.item(i) --> Line_11 $$ String type = script.getAttributeNS(null, SVGConstants.SVG_TYPE_ATTRIBUTE) [FD]
Line_9 $$ for (int i = 0; i < len; i++) --> Line_12 $$ if (type.length() == 0) [CD]
Line_11 $$ String type = script.getAttributeNS(null, SVGConstants.SVG_TYPE_ATTRIBUTE) --> Line_12 $$ if (type.length() == 0) [FD]
Line_12 $$ if (type.length() == 0) --> Line_13 $$ type = SVGConstants.SVG_SCRIPT_TYPE_DEFAULT_VALUE [CD]
Line_11 $$ String type = script.getAttributeNS(null, SVGConstants.SVG_TYPE_ATTRIBUTE) --> Line_13 $$ type = SVGConstants.SVG_SCRIPT_TYPE_DEFAULT_VALUE [FD]
Line_9 $$ for (int i = 0; i < len; i++) --> Line_15 $$ if (type.equals(SVGConstants.SVG_SCRIPT_TYPE_JAVA)) [CD]
Line_11 $$ String type = script.getAttributeNS(null, SVGConstants.SVG_TYPE_ATTRIBUTE) --> Line_15 $$ if (type.equals(SVGConstants.SVG_SCRIPT_TYPE_JAVA)) [FD]
Line_13 $$ type = SVGConstants.SVG_SCRIPT_TYPE_DEFAULT_VALUE --> Line_15 $$ if (type.equals(SVGConstants.SVG_SCRIPT_TYPE_JAVA)) [FD]
Line_10 $$ Element script = (Element) scripts.item(i) --> Line_17 $$ String href = XLinkSupport.getXLinkHref(script) [FD]
Line_10 $$ Element script = (Element) scripts.item(i) --> Line_18 $$ ParsedURL purl = new ParsedURL(XMLBaseSupport.getCascadedXMLBase(script), href) [FD]
Line_11 $$ String type = script.getAttributeNS(null, SVGConstants.SVG_TYPE_ATTRIBUTE) --> Line_19 $$ checkCompatibleScriptURL(type, purl) [FD]
Line_13 $$ type = SVGConstants.SVG_SCRIPT_TYPE_DEFAULT_VALUE --> Line_19 $$ checkCompatibleScriptURL(type, purl) [FD]
Line_18 $$ ParsedURL purl = new ParsedURL(XMLBaseSupport.getCascadedXMLBase(script), href) --> Line_19 $$ checkCompatibleScriptURL(type, purl) [FD]
Line_21 $$ URL docURL = null --> Line_23 $$ docURL = new URL(docPURL.toString()) [FD]
Line_20 $$ DocumentJarClassLoader cll --> Line_26 $$ cll = new DocumentJarClassLoader(new URL(purl.toString()), docURL) [FD]
Line_18 $$ ParsedURL purl = new ParsedURL(XMLBaseSupport.getCascadedXMLBase(script), href) --> Line_26 $$ cll = new DocumentJarClassLoader(new URL(purl.toString()), docURL) [FD]
Line_20 $$ DocumentJarClassLoader cll --> Line_27 $$ URL url = cll.findResource("META-INF/MANIFEST.MF") [FD]
Line_26 $$ cll = new DocumentJarClassLoader(new URL(purl.toString()), docURL) --> Line_27 $$ URL url = cll.findResource("META-INF/MANIFEST.MF") [FD]
Line_27 $$ URL url = cll.findResource("META-INF/MANIFEST.MF") --> Line_28 $$ if (url == null) [FD]
Line_27 $$ URL url = cll.findResource("META-INF/MANIFEST.MF") --> Line_31 $$ Manifest man = new Manifest(url.openStream()) [FD]
Line_32 $$ String sh --> Line_33 $$ sh = man.getMainAttributes().getValue("Script-Handler") [FD]
Line_31 $$ Manifest man = new Manifest(url.openStream()) --> Line_33 $$ sh = man.getMainAttributes().getValue("Script-Handler") [FD]
Line_32 $$ String sh --> Line_34 $$ if (sh != null) [FD]
Line_33 $$ sh = man.getMainAttributes().getValue("Script-Handler") --> Line_34 $$ if (sh != null) [FD]
Line_34 $$ if (sh != null) --> Line_35 $$ ScriptHandler h [CD]
Line_34 $$ if (sh != null) --> Line_36 $$ h = (ScriptHandler) cll.loadClass(sh).newInstance() [CD]
Line_35 $$ ScriptHandler h --> Line_36 $$ h = (ScriptHandler) cll.loadClass(sh).newInstance() [FD]
Line_20 $$ DocumentJarClassLoader cll --> Line_36 $$ h = (ScriptHandler) cll.loadClass(sh).newInstance() [FD]
Line_26 $$ cll = new DocumentJarClassLoader(new URL(purl.toString()), docURL) --> Line_36 $$ h = (ScriptHandler) cll.loadClass(sh).newInstance() [FD]
Line_32 $$ String sh --> Line_36 $$ h = (ScriptHandler) cll.loadClass(sh).newInstance() [FD]
Line_33 $$ sh = man.getMainAttributes().getValue("Script-Handler") --> Line_36 $$ h = (ScriptHandler) cll.loadClass(sh).newInstance() [FD]
Line_34 $$ if (sh != null) --> Line_37 $$ if (window == null) [CD]
Line_3 $$ org.apache.batik.script.Window window = null --> Line_37 $$ if (window == null) [FD]
Line_37 $$ if (window == null) --> Line_38 $$ window = createWindow() [CD]
Line_3 $$ org.apache.batik.script.Window window = null --> Line_38 $$ window = createWindow() [FD]
Line_34 $$ if (sh != null) --> Line_40 $$ h.run(document, window) [CD]
Line_35 $$ ScriptHandler h --> Line_40 $$ h.run(document, window) [FD]
Line_36 $$ h = (ScriptHandler) cll.loadClass(sh).newInstance() --> Line_40 $$ h.run(document, window) [FD]
Line_38 $$ window = createWindow() --> Line_40 $$ h.run(document, window) [FD]
Line_3 $$ org.apache.batik.script.Window window = null --> Line_40 $$ h.run(document, window) [FD]
Line_32 $$ String sh --> Line_42 $$ sh = man.getMainAttributes().getValue("SVG-Handler-Class") [FD]
Line_33 $$ sh = man.getMainAttributes().getValue("Script-Handler") --> Line_42 $$ sh = man.getMainAttributes().getValue("SVG-Handler-Class") [FD]
Line_31 $$ Manifest man = new Manifest(url.openStream()) --> Line_42 $$ sh = man.getMainAttributes().getValue("SVG-Handler-Class") [FD]
Line_32 $$ String sh --> Line_43 $$ if (sh != null) [FD]
Line_33 $$ sh = man.getMainAttributes().getValue("Script-Handler") --> Line_43 $$ if (sh != null) [FD]
Line_42 $$ sh = man.getMainAttributes().getValue("SVG-Handler-Class") --> Line_43 $$ if (sh != null) [FD]
Line_43 $$ if (sh != null) --> Line_44 $$ EventListenerInitializer initializer [CD]
Line_43 $$ if (sh != null) --> Line_45 $$ initializer = (EventListenerInitializer) cll.loadClass(sh).newInstance() [CD]
Line_44 $$ EventListenerInitializer initializer --> Line_45 $$ initializer = (EventListenerInitializer) cll.loadClass(sh).newInstance() [FD]
Line_20 $$ DocumentJarClassLoader cll --> Line_45 $$ initializer = (EventListenerInitializer) cll.loadClass(sh).newInstance() [FD]
Line_26 $$ cll = new DocumentJarClassLoader(new URL(purl.toString()), docURL) --> Line_45 $$ initializer = (EventListenerInitializer) cll.loadClass(sh).newInstance() [FD]
Line_32 $$ String sh --> Line_45 $$ initializer = (EventListenerInitializer) cll.loadClass(sh).newInstance() [FD]
Line_33 $$ sh = man.getMainAttributes().getValue("Script-Handler") --> Line_45 $$ initializer = (EventListenerInitializer) cll.loadClass(sh).newInstance() [FD]
Line_42 $$ sh = man.getMainAttributes().getValue("SVG-Handler-Class") --> Line_45 $$ initializer = (EventListenerInitializer) cll.loadClass(sh).newInstance() [FD]
Line_43 $$ if (sh != null) --> Line_46 $$ if (window == null) [CD]
Line_38 $$ window = createWindow() --> Line_46 $$ if (window == null) [FD]
Line_3 $$ org.apache.batik.script.Window window = null --> Line_46 $$ if (window == null) [FD]
Line_46 $$ if (window == null) --> Line_47 $$ window = createWindow() [CD]
Line_38 $$ window = createWindow() --> Line_47 $$ window = createWindow() [FD]
Line_3 $$ org.apache.batik.script.Window window = null --> Line_47 $$ window = createWindow() [FD]
Line_43 $$ if (sh != null) --> Line_49 $$ initializer.initializeEventListeners((SVGDocument) document) [CD]
Line_44 $$ EventListenerInitializer initializer --> Line_49 $$ initializer.initializeEventListeners((SVGDocument) document) [FD]
Line_45 $$ initializer = (EventListenerInitializer) cll.loadClass(sh).newInstance() --> Line_49 $$ initializer.initializeEventListeners((SVGDocument) document) [FD]
Line_52 $$ if (userAgent != null) --> Line_53 $$ userAgent.displayError(e) [CD]
Line_9 $$ for (int i = 0; i < len; i++) --> Line_58 $$ Interpreter interpreter = getInterpreter(type) [CD]
Line_11 $$ String type = script.getAttributeNS(null, SVGConstants.SVG_TYPE_ATTRIBUTE) --> Line_58 $$ Interpreter interpreter = getInterpreter(type) [FD]
Line_13 $$ type = SVGConstants.SVG_SCRIPT_TYPE_DEFAULT_VALUE --> Line_58 $$ Interpreter interpreter = getInterpreter(type) [FD]
Line_9 $$ for (int i = 0; i < len; i++) --> Line_59 $$ if (interpreter == null) [CD]
Line_58 $$ Interpreter interpreter = getInterpreter(type) --> Line_59 $$ if (interpreter == null) [FD]
Line_10 $$ Element script = (Element) scripts.item(i) --> Line_61 $$ String href = XLinkSupport.getXLinkHref(script) [FD]
Line_17 $$ String href = XLinkSupport.getXLinkHref(script) --> Line_64 $$ if (href.length() > 0) [FD]
Line_64 $$ if (href.length() > 0) --> Line_65 $$ desc = href [CD]
Line_62 $$ String desc = null --> Line_65 $$ desc = href [FD]
Line_17 $$ String href = XLinkSupport.getXLinkHref(script) --> Line_65 $$ desc = href [FD]
Line_10 $$ Element script = (Element) scripts.item(i) --> Line_66 $$ ParsedURL purl = new ParsedURL(XMLBaseSupport.getCascadedXMLBase(script), href) [FD]
Line_64 $$ if (href.length() > 0) --> Line_67 $$ checkCompatibleScriptURL(type, purl) [CD]
Line_11 $$ String type = script.getAttributeNS(null, SVGConstants.SVG_TYPE_ATTRIBUTE) --> Line_67 $$ checkCompatibleScriptURL(type, purl) [FD]
Line_13 $$ type = SVGConstants.SVG_SCRIPT_TYPE_DEFAULT_VALUE --> Line_67 $$ checkCompatibleScriptURL(type, purl) [FD]
Line_18 $$ ParsedURL purl = new ParsedURL(XMLBaseSupport.getCascadedXMLBase(script), href) --> Line_67 $$ checkCompatibleScriptURL(type, purl) [FD]
Line_64 $$ if (href.length() > 0) --> Line_68 $$ reader = new InputStreamReader(purl.openStream()) [CD]
Line_63 $$ Reader reader --> Line_68 $$ reader = new InputStreamReader(purl.openStream()) [FD]
Line_18 $$ ParsedURL purl = new ParsedURL(XMLBaseSupport.getCascadedXMLBase(script), href) --> Line_68 $$ reader = new InputStreamReader(purl.openStream()) [FD]
Line_64 $$ if (href.length() > 0) --> Line_70 $$ checkCompatibleScriptURL(type, docPURL) [CD]
Line_11 $$ String type = script.getAttributeNS(null, SVGConstants.SVG_TYPE_ATTRIBUTE) --> Line_70 $$ checkCompatibleScriptURL(type, docPURL) [FD]
Line_13 $$ type = SVGConstants.SVG_SCRIPT_TYPE_DEFAULT_VALUE --> Line_70 $$ checkCompatibleScriptURL(type, docPURL) [FD]
Line_64 $$ if (href.length() > 0) --> Line_71 $$ DocumentLoader dl = bridgeContext.getDocumentLoader() [CD]
Line_64 $$ if (href.length() > 0) --> Line_72 $$ Element e = script [CD]
Line_64 $$ if (href.length() > 0) --> Line_73 $$ SVGDocument d = (SVGDocument) e.getOwnerDocument() [CD]
Line_72 $$ Element e = script --> Line_73 $$ SVGDocument d = (SVGDocument) e.getOwnerDocument() [FD]
Line_64 $$ if (href.length() > 0) --> Line_74 $$ int line = dl.getLineNumber(script) [CD]
Line_71 $$ DocumentLoader dl = bridgeContext.getDocumentLoader() --> Line_74 $$ int line = dl.getLineNumber(script) [FD]
Line_10 $$ Element script = (Element) scripts.item(i) --> Line_74 $$ int line = dl.getLineNumber(script) [FD]
Line_64 $$ if (href.length() > 0) --> Line_75 $$ desc = Messages.formatMessage(INLINE_SCRIPT_DESCRIPTION, new Object[] [CD]
Line_62 $$ String desc = null --> Line_75 $$ desc = Messages.formatMessage(INLINE_SCRIPT_DESCRIPTION, new Object[] [FD]
Line_65 $$ desc = href --> Line_75 $$ desc = Messages.formatMessage(INLINE_SCRIPT_DESCRIPTION, new Object[] [FD]
Line_73 $$ SVGDocument d = (SVGDocument) e.getOwnerDocument() --> Line_75 $$ desc = Messages.formatMessage(INLINE_SCRIPT_DESCRIPTION, new Object[] [FD]
Line_10 $$ Element script = (Element) scripts.item(i) --> Line_75 $$ desc = Messages.formatMessage(INLINE_SCRIPT_DESCRIPTION, new Object[] [FD]
Line_64 $$ if (href.length() > 0) --> Line_76 $$ Node n = script.getFirstChild() [CD]
Line_10 $$ Element script = (Element) scripts.item(i) --> Line_76 $$ Node n = script.getFirstChild() [FD]
Line_64 $$ if (href.length() > 0) --> Line_77 $$ if (n != null) [CD]
Line_76 $$ Node n = script.getFirstChild() --> Line_77 $$ if (n != null) [FD]
Line_77 $$ if (n != null) --> Line_78 $$ StringBuffer sb = new StringBuffer() [CD]
Line_77 $$ if (n != null) --> Line_79 $$ while (n != null) [CD]
Line_76 $$ Node n = script.getFirstChild() --> Line_79 $$ while (n != null) [FD]
Line_79 $$ while (n != null) --> Line_80 $$ if (n.getNodeType() == Node.CDATA_SECTION_NODE || n.getNodeType() == Node.TEXT_NODE) [CD]
Line_76 $$ Node n = script.getFirstChild() --> Line_80 $$ if (n.getNodeType() == Node.CDATA_SECTION_NODE || n.getNodeType() == Node.TEXT_NODE) [FD]
Line_78 $$ StringBuffer sb = new StringBuffer() --> Line_80 $$ if (n.getNodeType() == Node.CDATA_SECTION_NODE || n.getNodeType() == Node.TEXT_NODE) [FD]
Line_79 $$ while (n != null) --> Line_81 $$ n = n.getNextSibling() [CD]
Line_76 $$ Node n = script.getFirstChild() --> Line_81 $$ n = n.getNextSibling() [FD]
Line_77 $$ if (n != null) --> Line_83 $$ reader = new StringReader(sb.toString()) [CD]
Line_63 $$ Reader reader --> Line_83 $$ reader = new StringReader(sb.toString()) [FD]
Line_68 $$ reader = new InputStreamReader(purl.openStream()) --> Line_83 $$ reader = new StringReader(sb.toString()) [FD]
Line_78 $$ StringBuffer sb = new StringBuffer() --> Line_83 $$ reader = new StringReader(sb.toString()) [FD]
Line_58 $$ Interpreter interpreter = getInterpreter(type) --> Line_88 $$ interpreter.evaluate(reader, desc) [FD]
Line_63 $$ Reader reader --> Line_88 $$ interpreter.evaluate(reader, desc) [FD]
Line_68 $$ reader = new InputStreamReader(purl.openStream()) --> Line_88 $$ interpreter.evaluate(reader, desc) [FD]
Line_83 $$ reader = new StringReader(sb.toString()) --> Line_88 $$ interpreter.evaluate(reader, desc) [FD]
Line_62 $$ String desc = null --> Line_88 $$ interpreter.evaluate(reader, desc) [FD]
Line_65 $$ desc = href --> Line_88 $$ interpreter.evaluate(reader, desc) [FD]
Line_75 $$ desc = Messages.formatMessage(INLINE_SCRIPT_DESCRIPTION, new Object[] --> Line_88 $$ interpreter.evaluate(reader, desc) [FD]
Line_90 $$ if (userAgent != null) --> Line_91 $$ userAgent.displayError(e) [CD]
Line_72 $$ Element e = script --> Line_91 $$ userAgent.displayError(e) [FD]
Line_72 $$ Element e = script --> Line_96 $$ handleInterpreterException(e) [FD]
Line_99 $$ if (userAgent != null) --> Line_100 $$ userAgent.displayError(e) [CD]
Line_72 $$ Element e = script --> Line_100 $$ userAgent.displayError(e) [FD]
Line_13 $$ type = SVGConstants.SVG_SCRIPT_TYPE_DEFAULT_VALUE --> Line_12 $$ if (type.length() == 0) [FD]
Line_42 $$ sh = man.getMainAttributes().getValue("SVG-Handler-Class") --> Line_34 $$ if (sh != null) [FD]
Line_42 $$ sh = man.getMainAttributes().getValue("SVG-Handler-Class") --> Line_36 $$ h = (ScriptHandler) cll.loadClass(sh).newInstance() [FD]
Line_38 $$ window = createWindow() --> Line_37 $$ if (window == null) [FD]
Line_47 $$ window = createWindow() --> Line_37 $$ if (window == null) [FD]
Line_47 $$ window = createWindow() --> Line_40 $$ h.run(document, window) [FD]
Line_47 $$ window = createWindow() --> Line_46 $$ if (window == null) [FD]
Line_72 $$ Element e = script --> Line_53 $$ userAgent.displayError(e) [FD]
Line_81 $$ n = n.getNextSibling() --> Line_79 $$ while (n != null) [FD]
Line_81 $$ n = n.getNextSibling() --> Line_80 $$ if (n.getNodeType() == Node.CDATA_SECTION_NODE || n.getNodeType() == Node.TEXT_NODE) [FD]
