Line_2 $$ public void run() --> Line_3 $$ HttpGet httpGet = null [CD]
Line_7 $$ for (City city : citiesToBeUpdated) --> Line_9 $$ String codePrefix = city.getCountryName().startsWith("United States") ? GET_PARAM_ZIP_PREFIX : GET_PARAM_CITY_CODE_PREFIX [FD]
Line_7 $$ for (City city : citiesToBeUpdated) --> Line_10 $$ String requestUri = new String(GET_URL + "?" + GET_PARAM_ACODE_PREFIX + "=" + GET_PARAM_ACODE + "&" + codePrefix + "=" + city.getId() + "&" + GET_PARAM_UNIT_PREFIX + "=" + preferredUnitType) [FD]
Line_3 $$ HttpGet httpGet = null --> Line_11 $$ httpGet = new HttpGet(requestUri) [FD]
Line_5 $$ DefaultHttpClient httpClient = new DefaultHttpClient() --> Line_12 $$ HttpResponse response = httpClient.execute(httpGet) [FD]
Line_3 $$ HttpGet httpGet = null --> Line_12 $$ HttpResponse response = httpClient.execute(httpGet) [FD]
Line_11 $$ httpGet = new HttpGet(requestUri) --> Line_12 $$ HttpResponse response = httpClient.execute(httpGet) [FD]
Line_12 $$ HttpResponse response = httpClient.execute(httpGet) --> Line_13 $$ if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) [FD]
Line_13 $$ if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) --> Line_14 $$ processXML(response.getEntity().getContent()) [CD]
Line_12 $$ HttpResponse response = httpClient.execute(httpGet) --> Line_14 $$ processXML(response.getEntity().getContent()) [FD]
Line_15 $$ for (ForecastedDay day : forecast) --> Line_16 $$ int pos = day.getImageURL().lastIndexOf('/') [FD]
Line_15 $$ for (ForecastedDay day : forecast) --> Line_17 $$ if (pos < 0 || pos + 1 == day.getImageURL().length()) [FD]
Line_15 $$ for (ForecastedDay day : forecast) --> Line_18 $$ final String imageFilename = day.getImageURL().substring(pos + 1) [FD]
Line_19 $$ File downloadDir = context.getDir(ForecastedDay.DOWNLOAD_DIR, Context.MODE_PRIVATE) --> Line_20 $$ File[] imagesFilteredByName = downloadDir.listFiles(new FilenameFilter() [FD]
Line_20 $$ File[] imagesFilteredByName = downloadDir.listFiles(new FilenameFilter() --> Line_22 $$ if (filename.equals(imageFilename)) [CD]
Line_20 $$ File[] imagesFilteredByName = downloadDir.listFiles(new FilenameFilter() --> Line_22 $$ if (filename.equals(imageFilename)) [FD]
Line_18 $$ final String imageFilename = day.getImageURL().substring(pos + 1) --> Line_22 $$ if (filename.equals(imageFilename)) [FD]
Line_15 $$ for (ForecastedDay day : forecast) --> Line_26 $$ httpGet = new HttpGet(day.getImageURL()) [FD]
Line_25 $$ if (imagesFilteredByName.length == 0) --> Line_27 $$ response = httpClient.execute(httpGet) [CD]
Line_5 $$ DefaultHttpClient httpClient = new DefaultHttpClient() --> Line_27 $$ response = httpClient.execute(httpGet) [FD]
Line_3 $$ HttpGet httpGet = null --> Line_27 $$ response = httpClient.execute(httpGet) [FD]
Line_11 $$ httpGet = new HttpGet(requestUri) --> Line_27 $$ response = httpClient.execute(httpGet) [FD]
Line_25 $$ if (imagesFilteredByName.length == 0) --> Line_28 $$ if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) [CD]
Line_12 $$ HttpResponse response = httpClient.execute(httpGet) --> Line_28 $$ if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) [FD]
Line_19 $$ File downloadDir = context.getDir(ForecastedDay.DOWNLOAD_DIR, Context.MODE_PRIVATE) --> Line_31 $$ bus = new BufferedOutputStream(new FileOutputStream(downloadDir.getAbsolutePath() + "/" + imageFilename)) [FD]
Line_12 $$ HttpResponse response = httpClient.execute(httpGet) --> Line_32 $$ response.getEntity().writeTo(bus) [FD]
Line_13 $$ if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) --> Line_39 $$ city.setDays(forecast) [CD]
Line_7 $$ for (City city : citiesToBeUpdated) --> Line_39 $$ city.setDays(forecast) [FD]
Line_13 $$ if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) --> Line_40 $$ city.setLastUpdated(Calendar.getInstance().getTime()) [CD]
Line_7 $$ for (City city : citiesToBeUpdated) --> Line_40 $$ city.setLastUpdated(Calendar.getInstance().getTime()) [FD]
Line_13 $$ if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) --> Line_41 $$ model.saveCity(city) [CD]
Line_6 $$ DataModel model = DataModel.getInstance() --> Line_41 $$ model.saveCity(city) [FD]
Line_7 $$ for (City city : citiesToBeUpdated) --> Line_41 $$ model.saveCity(city) [FD]
Line_3 $$ HttpGet httpGet = null --> Line_45 $$ httpGet.abort() [FD]
Line_11 $$ httpGet = new HttpGet(requestUri) --> Line_45 $$ httpGet.abort() [FD]
