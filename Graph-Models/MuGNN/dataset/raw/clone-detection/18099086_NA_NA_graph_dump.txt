Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_3 $$ res.setHeader("X-Generator", "VisualMon") [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_3 $$ res.setHeader("X-Generator", "VisualMon") [FD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_4 $$ String path = req.getPathInfo() [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_4 $$ String path = req.getPathInfo() [FD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_5 $$ res.sendRedirect(req.getServletPath() + "/") [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_5 $$ res.sendRedirect(req.getServletPath() + "/") [FD]
Line_4 $$ String path = req.getPathInfo() --> Line_5 $$ res.sendRedirect(req.getServletPath() + "/") [FD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_7 $$ res.setHeader("Cache-Control", "private,no-cache,no-store,must-revalidate") [FD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_8 $$ res.addHeader("Cache-Control", "post-check=0,pre-check=0") [FD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_9 $$ res.setHeader("Expires", "Sat, 26 Jul 1997 05:00:00 GMT") [FD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_10 $$ res.setHeader("Pragma", "no-cache") [FD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_11 $$ res.setDateHeader("Expires", 0) [FD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_12 $$ renderChart(req, res) [FD]
Line_5 $$ res.sendRedirect(req.getServletPath() + "/") --> Line_17 $$ if (path.startsWith("/log_")) [CD]
Line_4 $$ String path = req.getPathInfo() --> Line_17 $$ if (path.startsWith("/log_")) [FD]
Line_17 $$ if (path.startsWith("/log_")) --> Line_18 $$ String name = path.substring(5) [CD]
Line_4 $$ String path = req.getPathInfo() --> Line_18 $$ String name = path.substring(5) [FD]
Line_17 $$ if (path.startsWith("/log_")) --> Line_19 $$ LogProvider provider = null [CD]
Line_18 $$ String name = path.substring(5) --> Line_21 $$ if (name.equals(prov.getName())) [FD]
Line_20 $$ for (LogProvider prov : cfg.getLogProviders()) --> Line_21 $$ if (name.equals(prov.getName())) [FD]
Line_21 $$ if (name.equals(prov.getName())) --> Line_22 $$ provider = prov [CD]
Line_19 $$ LogProvider provider = null --> Line_22 $$ provider = prov [FD]
Line_20 $$ for (LogProvider prov : cfg.getLogProviders()) --> Line_22 $$ provider = prov [FD]
Line_17 $$ if (path.startsWith("/log_")) --> Line_26 $$ if (null == provider) [CD]
Line_19 $$ LogProvider provider = null --> Line_26 $$ if (null == provider) [FD]
Line_22 $$ provider = prov --> Line_26 $$ if (null == provider) [FD]
Line_26 $$ if (null == provider) --> Line_27 $$ log.error("Log provider with name \" [CD]
Line_18 $$ String name = path.substring(5) --> Line_27 $$ log.error("Log provider with name \" [FD]
Line_26 $$ if (null == provider) --> Line_28 $$ res.sendError(HttpServletResponse.SC_NOT_FOUND) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_28 $$ res.sendError(HttpServletResponse.SC_NOT_FOUND) [FD]
Line_26 $$ if (null == provider) --> Line_30 $$ render(res, provider.getLog(filter.getLocale())) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_30 $$ render(res, provider.getLog(filter.getLocale())) [FD]
Line_19 $$ LogProvider provider = null --> Line_30 $$ render(res, provider.getLog(filter.getLocale())) [FD]
Line_22 $$ provider = prov --> Line_30 $$ render(res, provider.getLog(filter.getLocale())) [FD]
Line_17 $$ if (path.startsWith("/log_")) --> Line_32 $$ if ("/".equals(path)) [CD]
Line_4 $$ String path = req.getPathInfo() --> Line_32 $$ if ("/".equals(path)) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_33 $$ List<LogEntry> logs = new ArrayList<LogEntry>() [CD]
Line_19 $$ LogProvider provider = null --> Line_34 $$ logs.add(new LogEntry(provider.getName(), provider.getTitle(filter.getLocale()))) [FD]
Line_22 $$ provider = prov --> Line_34 $$ logs.add(new LogEntry(provider.getName(), provider.getTitle(filter.getLocale()))) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_35 $$ render(res, new ProbeDataList(filter.getSnapshot(), filter.getAlerts(), logs, ResourceBundle.getBundle("de.frostcode.visualmon.stats", filter.getLocale()).getString("category.empty"), cfg.getDashboardTitle().get(filter.getLocale()))) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_35 $$ render(res, new ProbeDataList(filter.getSnapshot(), filter.getAlerts(), logs, ResourceBundle.getBundle("de.frostcode.visualmon.stats", filter.getLocale()).getString("category.empty"), cfg.getDashboardTitle().get(filter.getLocale()))) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_37 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + req.getPathInfo()) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_37 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + req.getPathInfo()) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_38 $$ if (null == url) [CD]
Line_37 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + req.getPathInfo()) --> Line_38 $$ if (null == url) [FD]
Line_38 $$ if (null == url) --> Line_39 $$ res.sendError(HttpServletResponse.SC_NOT_FOUND) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_39 $$ res.sendError(HttpServletResponse.SC_NOT_FOUND) [FD]
Line_38 $$ if (null == url) --> Line_40 $$ return [CD]
Line_32 $$ if ("/".equals(path)) --> Line_42 $$ res.setDateHeader("Last-Modified", new File(url.getFile()).lastModified()) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_42 $$ res.setDateHeader("Last-Modified", new File(url.getFile()).lastModified()) [FD]
Line_37 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + req.getPathInfo()) --> Line_42 $$ res.setDateHeader("Last-Modified", new File(url.getFile()).lastModified()) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_43 $$ res.setDateHeader("Expires", new Date().getTime() + YEAR_IN_SECONDS * 1000L) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_43 $$ res.setDateHeader("Expires", new Date().getTime() + YEAR_IN_SECONDS * 1000L) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_44 $$ res.setHeader("Cache-Control", "max-age=" + YEAR_IN_SECONDS) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_44 $$ res.setHeader("Cache-Control", "max-age=" + YEAR_IN_SECONDS) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_45 $$ URLConnection conn = url.openConnection() [CD]
Line_37 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + req.getPathInfo()) --> Line_45 $$ URLConnection conn = url.openConnection() [FD]
Line_32 $$ if ("/".equals(path)) --> Line_46 $$ String resourcePath = url.getPath() [CD]
Line_37 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(getClass().getPackage().getName().replace('.', '/') + req.getPathInfo()) --> Line_46 $$ String resourcePath = url.getPath() [FD]
Line_32 $$ if ("/".equals(path)) --> Line_47 $$ String contentType = conn.getContentType() [CD]
Line_45 $$ URLConnection conn = url.openConnection() --> Line_47 $$ String contentType = conn.getContentType() [FD]
Line_32 $$ if ("/".equals(path)) --> Line_48 $$ if (resourcePath.endsWith(".xsl")) [CD]
Line_46 $$ String resourcePath = url.getPath() --> Line_48 $$ if (resourcePath.endsWith(".xsl")) [FD]
Line_48 $$ if (resourcePath.endsWith(".xsl")) --> Line_49 $$ contentType = "text/xml" [CD]
Line_47 $$ String contentType = conn.getContentType() --> Line_49 $$ contentType = "text/xml" [FD]
Line_48 $$ if (resourcePath.endsWith(".xsl")) --> Line_50 $$ res.setCharacterEncoding(ENCODING) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_50 $$ res.setCharacterEncoding(ENCODING) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_52 $$ if (contentType == null || "content/unknown".equals(contentType)) [CD]
Line_47 $$ String contentType = conn.getContentType() --> Line_52 $$ if (contentType == null || "content/unknown".equals(contentType)) [FD]
Line_49 $$ contentType = "text/xml" --> Line_52 $$ if (contentType == null || "content/unknown".equals(contentType)) [FD]
Line_52 $$ if (contentType == null || "content/unknown".equals(contentType)) --> Line_53 $$ contentType = getServletContext().getMimeType(resourcePath) [CD]
Line_46 $$ String resourcePath = url.getPath() --> Line_53 $$ contentType = getServletContext().getMimeType(resourcePath) [FD]
Line_47 $$ String contentType = conn.getContentType() --> Line_53 $$ contentType = getServletContext().getMimeType(resourcePath) [FD]
Line_49 $$ contentType = "text/xml" --> Line_53 $$ contentType = getServletContext().getMimeType(resourcePath) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_55 $$ res.setContentType(contentType) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_55 $$ res.setContentType(contentType) [FD]
Line_47 $$ String contentType = conn.getContentType() --> Line_55 $$ res.setContentType(contentType) [FD]
Line_49 $$ contentType = "text/xml" --> Line_55 $$ res.setContentType(contentType) [FD]
Line_53 $$ contentType = getServletContext().getMimeType(resourcePath) --> Line_55 $$ res.setContentType(contentType) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_56 $$ res.setContentLength(conn.getContentLength()) [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_56 $$ res.setContentLength(conn.getContentLength()) [FD]
Line_45 $$ URLConnection conn = url.openConnection() --> Line_56 $$ res.setContentLength(conn.getContentLength()) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_57 $$ OutputStream out = res.getOutputStream() [CD]
Line_2 $$ protected void service(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException --> Line_57 $$ OutputStream out = res.getOutputStream() [FD]
Line_32 $$ if ("/".equals(path)) --> Line_58 $$ IOUtils.copy(conn.getInputStream(), out) [CD]
Line_57 $$ OutputStream out = res.getOutputStream() --> Line_58 $$ IOUtils.copy(conn.getInputStream(), out) [FD]
Line_45 $$ URLConnection conn = url.openConnection() --> Line_58 $$ IOUtils.copy(conn.getInputStream(), out) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_59 $$ IOUtils.closeQuietly(conn.getInputStream()) [CD]
Line_45 $$ URLConnection conn = url.openConnection() --> Line_59 $$ IOUtils.closeQuietly(conn.getInputStream()) [FD]
Line_32 $$ if ("/".equals(path)) --> Line_60 $$ IOUtils.closeQuietly(out) [CD]
Line_57 $$ OutputStream out = res.getOutputStream() --> Line_60 $$ IOUtils.closeQuietly(out) [FD]
