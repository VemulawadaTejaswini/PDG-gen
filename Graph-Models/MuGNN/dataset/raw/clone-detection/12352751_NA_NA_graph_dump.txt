Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_5 $$ if (tag.equals("window")) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_6 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_6 $$ if (prop == null) [FD]
Line_6 $$ if (prop == null) --> Line_7 $$ System.err.println("window without properties") [CD]
Line_6 $$ if (prop == null) --> Line_8 $$ return [CD]
Line_5 $$ if (tag.equals("window")) --> Line_10 $$ int x = prop.getValue("x", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_10 $$ int x = prop.getValue("x", 0) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_11 $$ int y = prop.getValue("y", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_11 $$ int y = prop.getValue("y", 0) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_12 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_12 $$ int width = prop.getValue("width", 0) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_13 $$ int height = prop.getValue("height", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_13 $$ int height = prop.getValue("height", 0) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_14 $$ Color bgcolor = prop.getValue("bgcolor", Color.white) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_14 $$ Color bgcolor = prop.getValue("bgcolor", Color.white) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_15 $$ String caption = prop.getValue("caption", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_15 $$ String caption = prop.getValue("caption", "") [FD]
Line_5 $$ if (tag.equals("window")) --> Line_16 $$ layout = prop.getValue("layout", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_16 $$ layout = prop.getValue("layout", 0) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_17 $$ boolean statusbar = prop.getValue("statusbar", false) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_17 $$ boolean statusbar = prop.getValue("statusbar", false) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_18 $$ if (sheet.opentype == WABSheet.LAYERED) [CD]
Line_18 $$ if (sheet.opentype == WABSheet.LAYERED) --> Line_19 $$ Point pos = frame.getNextMDIPos() [CD]
Line_18 $$ if (sheet.opentype == WABSheet.LAYERED) --> Line_20 $$ sheet.setBounds(pos.x, pos.y, 400, 200) [CD]
Line_18 $$ if (sheet.opentype == WABSheet.LAYERED) --> Line_21 $$ sheet.setNormalBounds(new Rectangle(pos.x, pos.y, 400, 200)) [CD]
Line_18 $$ if (sheet.opentype == WABSheet.LAYERED) --> Line_23 $$ sheet.setBounds(x, y, width, height) [CD]
Line_10 $$ int x = prop.getValue("x", 0) --> Line_23 $$ sheet.setBounds(x, y, width, height) [FD]
Line_11 $$ int y = prop.getValue("y", 0) --> Line_23 $$ sheet.setBounds(x, y, width, height) [FD]
Line_12 $$ int width = prop.getValue("width", 0) --> Line_23 $$ sheet.setBounds(x, y, width, height) [FD]
Line_13 $$ int height = prop.getValue("height", 0) --> Line_23 $$ sheet.setBounds(x, y, width, height) [FD]
Line_18 $$ if (sheet.opentype == WABSheet.LAYERED) --> Line_24 $$ sheet.setNormalBounds(new Rectangle(x, y, width, height)) [CD]
Line_5 $$ if (tag.equals("window")) --> Line_26 $$ if (sheet.opentype == WABSheet.MAXIMIZED) [CD]
Line_5 $$ if (tag.equals("window")) --> Line_27 $$ sheet.setTitle(caption) [CD]
Line_15 $$ String caption = prop.getValue("caption", "") --> Line_27 $$ sheet.setTitle(caption) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_28 $$ frame.addSheetToMenu(caption) [CD]
Line_15 $$ String caption = prop.getValue("caption", "") --> Line_28 $$ frame.addSheetToMenu(caption) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_29 $$ sheet.setBackground(bgcolor) [CD]
Line_14 $$ Color bgcolor = prop.getValue("bgcolor", Color.white) --> Line_29 $$ sheet.setBackground(bgcolor) [FD]
Line_5 $$ if (tag.equals("window")) --> Line_30 $$ sheet.getContentPane().setLayout(new BorderLayout()) [CD]
Line_5 $$ if (tag.equals("window")) --> Line_31 $$ if (tag.equals("menu")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_31 $$ if (tag.equals("menu")) [FD]
Line_31 $$ if (tag.equals("menu")) --> Line_32 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_32 $$ if (prop == null) [FD]
Line_32 $$ if (prop == null) --> Line_33 $$ System.err.println("menu without properties") [CD]
Line_32 $$ if (prop == null) --> Line_34 $$ return [CD]
Line_31 $$ if (tag.equals("menu")) --> Line_36 $$ String id = prop.getValue("id", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_36 $$ String id = prop.getValue("id", "") [FD]
Line_31 $$ if (tag.equals("menu")) --> Line_37 $$ String label = prop.getValue("label", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_37 $$ String label = prop.getValue("label", "") [FD]
Line_31 $$ if (tag.equals("menu")) --> Line_38 $$ if ((id != null && id.equals("WINDOW_MENU") || label.equalsIgnoreCase("window"))) [CD]
Line_36 $$ String id = prop.getValue("id", "") --> Line_38 $$ if ((id != null && id.equals("WINDOW_MENU") || label.equalsIgnoreCase("window"))) [FD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_38 $$ if ((id != null && id.equals("WINDOW_MENU") || label.equalsIgnoreCase("window"))) [FD]
Line_38 $$ if ((id != null && id.equals("WINDOW_MENU") || label.equalsIgnoreCase("window"))) --> Line_41 $$ sheet.setWindowMenu(menu) [CD]
Line_31 $$ if (tag.equals("menu")) --> Line_45 $$ menu.setText(label) [CD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_45 $$ menu.setText(label) [FD]
Line_31 $$ if (tag.equals("menu")) --> Line_46 $$ sheet.menubar.add(menu) [CD]
Line_31 $$ if (tag.equals("menu")) --> Line_47 $$ if (tag.equals("menuitem")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_47 $$ if (tag.equals("menuitem")) [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_48 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_48 $$ if (prop == null) [FD]
Line_48 $$ if (prop == null) --> Line_49 $$ System.err.println("menuitem without properties") [CD]
Line_48 $$ if (prop == null) --> Line_50 $$ return [CD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_52 $$ JMenuItem item [CD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_53 $$ String action = prop.getValue("action", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_53 $$ String action = prop.getValue("action", "") [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_54 $$ String label = prop.getValue("label", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_54 $$ String label = prop.getValue("label", "") [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_55 $$ boolean visible = prop.getValue("visible", true) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_55 $$ boolean visible = prop.getValue("visible", true) [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_56 $$ String icon = prop.getValue("icon", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_56 $$ String icon = prop.getValue("icon", "") [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_57 $$ if (action.equals("WINDOW_OVERLAPPED")) [CD]
Line_53 $$ String action = prop.getValue("action", "") --> Line_57 $$ if (action.equals("WINDOW_OVERLAPPED")) [FD]
Line_57 $$ if (action.equals("WINDOW_OVERLAPPED")) --> Line_58 $$ item = windowMenuOverlapped = new JMenuItem() [CD]
Line_52 $$ JMenuItem item --> Line_58 $$ item = windowMenuOverlapped = new JMenuItem() [FD]
Line_57 $$ if (action.equals("WINDOW_OVERLAPPED")) --> Line_59 $$ item.setActionCommand("10001") [CD]
Line_52 $$ JMenuItem item --> Line_59 $$ item.setActionCommand("10001") [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_59 $$ item.setActionCommand("10001") [FD]
Line_57 $$ if (action.equals("WINDOW_OVERLAPPED")) --> Line_60 $$ item.addActionListener(frame) [CD]
Line_52 $$ JMenuItem item --> Line_60 $$ item.addActionListener(frame) [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_60 $$ item.addActionListener(frame) [FD]
Line_57 $$ if (action.equals("WINDOW_OVERLAPPED")) --> Line_61 $$ if (action.equals("WINDOW_TILE_HORIZONTALLY")) [CD]
Line_53 $$ String action = prop.getValue("action", "") --> Line_61 $$ if (action.equals("WINDOW_TILE_HORIZONTALLY")) [FD]
Line_61 $$ if (action.equals("WINDOW_TILE_HORIZONTALLY")) --> Line_62 $$ item = windowMenuTile = new JMenuItem() [CD]
Line_52 $$ JMenuItem item --> Line_62 $$ item = windowMenuTile = new JMenuItem() [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_62 $$ item = windowMenuTile = new JMenuItem() [FD]
Line_61 $$ if (action.equals("WINDOW_TILE_HORIZONTALLY")) --> Line_63 $$ item.setActionCommand("10002") [CD]
Line_52 $$ JMenuItem item --> Line_63 $$ item.setActionCommand("10002") [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_63 $$ item.setActionCommand("10002") [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_63 $$ item.setActionCommand("10002") [FD]
Line_61 $$ if (action.equals("WINDOW_TILE_HORIZONTALLY")) --> Line_64 $$ item.addActionListener(frame) [CD]
Line_52 $$ JMenuItem item --> Line_64 $$ item.addActionListener(frame) [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_64 $$ item.addActionListener(frame) [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_64 $$ item.addActionListener(frame) [FD]
Line_61 $$ if (action.equals("WINDOW_TILE_HORIZONTALLY")) --> Line_65 $$ if (action.equals("WINDOW_TILE_VERTICALLY")) [CD]
Line_53 $$ String action = prop.getValue("action", "") --> Line_65 $$ if (action.equals("WINDOW_TILE_VERTICALLY")) [FD]
Line_65 $$ if (action.equals("WINDOW_TILE_VERTICALLY")) --> Line_66 $$ item = windowMenuArrange = new JMenuItem() [CD]
Line_52 $$ JMenuItem item --> Line_66 $$ item = windowMenuArrange = new JMenuItem() [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_66 $$ item = windowMenuArrange = new JMenuItem() [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_66 $$ item = windowMenuArrange = new JMenuItem() [FD]
Line_65 $$ if (action.equals("WINDOW_TILE_VERTICALLY")) --> Line_67 $$ item.setActionCommand("10003") [CD]
Line_52 $$ JMenuItem item --> Line_67 $$ item.setActionCommand("10003") [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_67 $$ item.setActionCommand("10003") [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_67 $$ item.setActionCommand("10003") [FD]
Line_66 $$ item = windowMenuArrange = new JMenuItem() --> Line_67 $$ item.setActionCommand("10003") [FD]
Line_65 $$ if (action.equals("WINDOW_TILE_VERTICALLY")) --> Line_68 $$ item.addActionListener(frame) [CD]
Line_52 $$ JMenuItem item --> Line_68 $$ item.addActionListener(frame) [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_68 $$ item.addActionListener(frame) [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_68 $$ item.addActionListener(frame) [FD]
Line_66 $$ item = windowMenuArrange = new JMenuItem() --> Line_68 $$ item.addActionListener(frame) [FD]
Line_65 $$ if (action.equals("WINDOW_TILE_VERTICALLY")) --> Line_70 $$ item = new JMenuItem() [CD]
Line_52 $$ JMenuItem item --> Line_70 $$ item = new JMenuItem() [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_70 $$ item = new JMenuItem() [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_70 $$ item = new JMenuItem() [FD]
Line_66 $$ item = windowMenuArrange = new JMenuItem() --> Line_70 $$ item = new JMenuItem() [FD]
Line_65 $$ if (action.equals("WINDOW_TILE_VERTICALLY")) --> Line_71 $$ item.setActionCommand(action) [CD]
Line_52 $$ JMenuItem item --> Line_71 $$ item.setActionCommand(action) [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_71 $$ item.setActionCommand(action) [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_71 $$ item.setActionCommand(action) [FD]
Line_66 $$ item = windowMenuArrange = new JMenuItem() --> Line_71 $$ item.setActionCommand(action) [FD]
Line_70 $$ item = new JMenuItem() --> Line_71 $$ item.setActionCommand(action) [FD]
Line_53 $$ String action = prop.getValue("action", "") --> Line_71 $$ item.setActionCommand(action) [FD]
Line_65 $$ if (action.equals("WINDOW_TILE_VERTICALLY")) --> Line_72 $$ item.addActionListener((WABClient) global) [CD]
Line_52 $$ JMenuItem item --> Line_72 $$ item.addActionListener((WABClient) global) [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_72 $$ item.addActionListener((WABClient) global) [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_72 $$ item.addActionListener((WABClient) global) [FD]
Line_66 $$ item = windowMenuArrange = new JMenuItem() --> Line_72 $$ item.addActionListener((WABClient) global) [FD]
Line_70 $$ item = new JMenuItem() --> Line_72 $$ item.addActionListener((WABClient) global) [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_74 $$ item.setText(label) [CD]
Line_52 $$ JMenuItem item --> Line_74 $$ item.setText(label) [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_74 $$ item.setText(label) [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_74 $$ item.setText(label) [FD]
Line_66 $$ item = windowMenuArrange = new JMenuItem() --> Line_74 $$ item.setText(label) [FD]
Line_70 $$ item = new JMenuItem() --> Line_74 $$ item.setText(label) [FD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_74 $$ item.setText(label) [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_75 $$ menu.setVisible(false) [CD]
Line_55 $$ boolean visible = prop.getValue("visible", true) --> Line_75 $$ menu.setVisible(false) [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_76 $$ menu.add(item) [CD]
Line_52 $$ JMenuItem item --> Line_76 $$ menu.add(item) [FD]
Line_58 $$ item = windowMenuOverlapped = new JMenuItem() --> Line_76 $$ menu.add(item) [FD]
Line_62 $$ item = windowMenuTile = new JMenuItem() --> Line_76 $$ menu.add(item) [FD]
Line_66 $$ item = windowMenuArrange = new JMenuItem() --> Line_76 $$ menu.add(item) [FD]
Line_70 $$ item = new JMenuItem() --> Line_76 $$ menu.add(item) [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_77 $$ if (frame.getToolBar() != null) [CD]
Line_77 $$ if (frame.getToolBar() != null) --> Line_78 $$ if (icon.length() > 0) [CD]
Line_56 $$ String icon = prop.getValue("icon", "") --> Line_78 $$ if (icon.length() > 0) [FD]
Line_81 $$ BufferedImage image = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR) --> Line_82 $$ Graphics g = image.createGraphics() [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_83 $$ g.setColor(new Color(0, 0, 0, 0)) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_84 $$ g.fillRect(0, 0, 25, 25) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_85 $$ g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null) [FD]
Line_80 $$ ImageIcon img = new ImageIcon(new URL(icon)) --> Line_85 $$ g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_87 $$ g = pressed.createGraphics() [FD]
Line_86 $$ BufferedImage pressed = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR) --> Line_87 $$ g = pressed.createGraphics() [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_88 $$ g.setColor(new Color(0, 0, 0, 0)) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_88 $$ g.setColor(new Color(0, 0, 0, 0)) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_89 $$ g.fillRect(0, 0, 25, 25) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_89 $$ g.fillRect(0, 0, 25, 25) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_90 $$ g.drawImage(img.getImage(), 5, 5, 16, 16, (ImageObserver) null) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_90 $$ g.drawImage(img.getImage(), 5, 5, 16, 16, (ImageObserver) null) [FD]
Line_80 $$ ImageIcon img = new ImageIcon(new URL(icon)) --> Line_90 $$ g.drawImage(img.getImage(), 5, 5, 16, 16, (ImageObserver) null) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_91 $$ g.setColor(new Color(132, 132, 132)) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_91 $$ g.setColor(new Color(132, 132, 132)) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_92 $$ g.drawLine(0, 0, 24, 0) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_92 $$ g.drawLine(0, 0, 24, 0) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_93 $$ g.drawLine(0, 0, 0, 24) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_93 $$ g.drawLine(0, 0, 0, 24) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_94 $$ g.setColor(new Color(255, 255, 255)) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_94 $$ g.setColor(new Color(255, 255, 255)) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_95 $$ g.drawLine(24, 24, 24, 0) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_95 $$ g.drawLine(24, 24, 24, 0) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_96 $$ g.drawLine(24, 24, 0, 24) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_96 $$ g.drawLine(24, 24, 0, 24) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_98 $$ g = over.createGraphics() [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_98 $$ g = over.createGraphics() [FD]
Line_97 $$ BufferedImage over = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR) --> Line_98 $$ g = over.createGraphics() [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_99 $$ g.setColor(new Color(0, 0, 0, 0)) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_99 $$ g.setColor(new Color(0, 0, 0, 0)) [FD]
Line_98 $$ g = over.createGraphics() --> Line_99 $$ g.setColor(new Color(0, 0, 0, 0)) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_100 $$ g.fillRect(0, 0, 25, 25) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_100 $$ g.fillRect(0, 0, 25, 25) [FD]
Line_98 $$ g = over.createGraphics() --> Line_100 $$ g.fillRect(0, 0, 25, 25) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_101 $$ g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_101 $$ g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null) [FD]
Line_98 $$ g = over.createGraphics() --> Line_101 $$ g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null) [FD]
Line_80 $$ ImageIcon img = new ImageIcon(new URL(icon)) --> Line_101 $$ g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_102 $$ g.setColor(new Color(255, 255, 255)) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_102 $$ g.setColor(new Color(255, 255, 255)) [FD]
Line_98 $$ g = over.createGraphics() --> Line_102 $$ g.setColor(new Color(255, 255, 255)) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_103 $$ g.drawLine(0, 0, 24, 0) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_103 $$ g.drawLine(0, 0, 24, 0) [FD]
Line_98 $$ g = over.createGraphics() --> Line_103 $$ g.drawLine(0, 0, 24, 0) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_104 $$ g.drawLine(0, 0, 0, 24) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_104 $$ g.drawLine(0, 0, 0, 24) [FD]
Line_98 $$ g = over.createGraphics() --> Line_104 $$ g.drawLine(0, 0, 0, 24) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_105 $$ g.setColor(new Color(132, 132, 132)) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_105 $$ g.setColor(new Color(132, 132, 132)) [FD]
Line_98 $$ g = over.createGraphics() --> Line_105 $$ g.setColor(new Color(132, 132, 132)) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_106 $$ g.drawLine(24, 24, 24, 0) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_106 $$ g.drawLine(24, 24, 24, 0) [FD]
Line_98 $$ g = over.createGraphics() --> Line_106 $$ g.drawLine(24, 24, 24, 0) [FD]
Line_82 $$ Graphics g = image.createGraphics() --> Line_107 $$ g.drawLine(24, 24, 0, 24) [FD]
Line_87 $$ g = pressed.createGraphics() --> Line_107 $$ g.drawLine(24, 24, 0, 24) [FD]
Line_98 $$ g = over.createGraphics() --> Line_107 $$ g.drawLine(24, 24, 0, 24) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_109 $$ b.setRolloverEnabled(true) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_110 $$ b.setPressedIcon(new ImageIcon(pressed)) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_111 $$ b.setRolloverIcon(new ImageIcon(over)) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_112 $$ b.setToolTipText(label) [FD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_112 $$ b.setToolTipText(label) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_113 $$ b.setActionCommand(action) [FD]
Line_53 $$ String action = prop.getValue("action", "") --> Line_113 $$ b.setActionCommand(action) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_114 $$ b.setFocusPainted(false) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_115 $$ b.setBorderPainted(false) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_116 $$ b.setContentAreaFilled(false) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_117 $$ b.setMargin(new Insets(0, 0, 0, 0)) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_118 $$ b.addActionListener(sheet) [FD]
Line_108 $$ JButton b = new JButton(new ImageIcon(image)) --> Line_119 $$ sheet.toolbar.add(b) [FD]
Line_47 $$ if (tag.equals("menuitem")) --> Line_124 $$ if (tag.equals("separator")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_124 $$ if (tag.equals("separator")) [FD]
Line_124 $$ if (tag.equals("separator")) --> Line_125 $$ menu.addSeparator() [CD]
Line_124 $$ if (tag.equals("separator")) --> Line_126 $$ if (tag.equals("choice")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_126 $$ if (tag.equals("choice")) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_127 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_127 $$ if (prop == null) [FD]
Line_127 $$ if (prop == null) --> Line_128 $$ System.err.println("choice without properties") [CD]
Line_127 $$ if (prop == null) --> Line_129 $$ return [CD]
Line_126 $$ if (tag.equals("choice")) --> Line_133 $$ int x = prop.getValue("x", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_133 $$ int x = prop.getValue("x", 0) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_134 $$ int y = prop.getValue("y", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_134 $$ int y = prop.getValue("y", 0) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_135 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_135 $$ int width = prop.getValue("width", 0) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_136 $$ int height = prop.getValue("height", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_136 $$ int height = prop.getValue("height", 0) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_137 $$ String id = prop.getValue("id", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_137 $$ String id = prop.getValue("id", "") [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_138 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_138 $$ Object constraints = prop.getValue("constraints") [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_139 $$ boolean editable = prop.getValue("editable", false) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_139 $$ boolean editable = prop.getValue("editable", false) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_140 $$ boolean visible = prop.getValue("visible", true) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_140 $$ boolean visible = prop.getValue("visible", true) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_141 $$ boolean enabled = prop.getValue("enabled", true) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_141 $$ boolean enabled = prop.getValue("enabled", true) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_142 $$ combo_text = prop.getValue("text", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_142 $$ combo_text = prop.getValue("text", "") [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_143 $$ combo.setBounds(x, y, width, height) [CD]
Line_10 $$ int x = prop.getValue("x", 0) --> Line_143 $$ combo.setBounds(x, y, width, height) [FD]
Line_11 $$ int y = prop.getValue("y", 0) --> Line_143 $$ combo.setBounds(x, y, width, height) [FD]
Line_12 $$ int width = prop.getValue("width", 0) --> Line_143 $$ combo.setBounds(x, y, width, height) [FD]
Line_13 $$ int height = prop.getValue("height", 0) --> Line_143 $$ combo.setBounds(x, y, width, height) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_144 $$ combo.setName((String) id) [CD]
Line_126 $$ if (tag.equals("choice")) --> Line_145 $$ if (editable) [CD]
Line_145 $$ if (editable) --> Line_146 $$ combo.setEditable(editable) [CD]
Line_139 $$ boolean editable = prop.getValue("editable", false) --> Line_146 $$ combo.setEditable(editable) [FD]
Line_145 $$ if (editable) --> Line_147 $$ combo.setSelectedItem(combo_text) [CD]
Line_126 $$ if (tag.equals("choice")) --> Line_149 $$ combo.setVisible(false) [CD]
Line_55 $$ boolean visible = prop.getValue("visible", true) --> Line_149 $$ combo.setVisible(false) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_150 $$ combo.setEnabled(false) [CD]
Line_141 $$ boolean enabled = prop.getValue("enabled", true) --> Line_150 $$ combo.setEnabled(false) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_151 $$ sheet.getContentPane().add(combo, constraints) [CD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_151 $$ sheet.getContentPane().add(combo, constraints) [FD]
Line_126 $$ if (tag.equals("choice")) --> Line_152 $$ if (tag.equals("list")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_152 $$ if (tag.equals("list")) [FD]
Line_152 $$ if (tag.equals("list")) --> Line_153 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_153 $$ if (prop == null) [FD]
Line_153 $$ if (prop == null) --> Line_154 $$ System.err.println("list without properties") [CD]
Line_153 $$ if (prop == null) --> Line_155 $$ return [CD]
Line_152 $$ if (tag.equals("list")) --> Line_160 $$ int x = prop.getValue("x", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_160 $$ int x = prop.getValue("x", 0) [FD]
Line_152 $$ if (tag.equals("list")) --> Line_161 $$ int y = prop.getValue("y", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_161 $$ int y = prop.getValue("y", 0) [FD]
Line_152 $$ if (tag.equals("list")) --> Line_162 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_162 $$ int width = prop.getValue("width", 0) [FD]
Line_152 $$ if (tag.equals("list")) --> Line_163 $$ int height = prop.getValue("height", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_163 $$ int height = prop.getValue("height", 0) [FD]
Line_152 $$ if (tag.equals("list")) --> Line_164 $$ String id = prop.getValue("id", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_164 $$ String id = prop.getValue("id", "") [FD]
Line_152 $$ if (tag.equals("list")) --> Line_165 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_165 $$ Object constraints = prop.getValue("constraints") [FD]
Line_152 $$ if (tag.equals("list")) --> Line_166 $$ list.setName((String) id) [CD]
Line_152 $$ if (tag.equals("list")) --> Line_167 $$ list.setListData(listdata) [CD]
Line_152 $$ if (tag.equals("list")) --> Line_168 $$ JScrollPane sp = new JScrollPane(list) [CD]
Line_152 $$ if (tag.equals("list")) --> Line_169 $$ sp.setBounds(x, y, width, height) [CD]
Line_168 $$ JScrollPane sp = new JScrollPane(list) --> Line_169 $$ sp.setBounds(x, y, width, height) [FD]
Line_10 $$ int x = prop.getValue("x", 0) --> Line_169 $$ sp.setBounds(x, y, width, height) [FD]
Line_11 $$ int y = prop.getValue("y", 0) --> Line_169 $$ sp.setBounds(x, y, width, height) [FD]
Line_12 $$ int width = prop.getValue("width", 0) --> Line_169 $$ sp.setBounds(x, y, width, height) [FD]
Line_13 $$ int height = prop.getValue("height", 0) --> Line_169 $$ sp.setBounds(x, y, width, height) [FD]
Line_152 $$ if (tag.equals("list")) --> Line_170 $$ sheet.getContentPane().add(sp, constraints) [CD]
Line_168 $$ JScrollPane sp = new JScrollPane(list) --> Line_170 $$ sheet.getContentPane().add(sp, constraints) [FD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_170 $$ sheet.getContentPane().add(sp, constraints) [FD]
Line_152 $$ if (tag.equals("list")) --> Line_171 $$ if (tag.equals("option")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_171 $$ if (tag.equals("option")) [FD]
Line_171 $$ if (tag.equals("option")) --> Line_172 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_172 $$ if (prop == null) [FD]
Line_172 $$ if (prop == null) --> Line_173 $$ System.err.println("choice.option without properties") [CD]
Line_172 $$ if (prop == null) --> Line_174 $$ return [CD]
Line_171 $$ if (tag.equals("option")) --> Line_176 $$ String value = prop.getValue("value", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_176 $$ String value = prop.getValue("value", "") [FD]
Line_171 $$ if (tag.equals("option")) --> Line_177 $$ String text = prop.getValue("text", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_177 $$ String text = prop.getValue("text", "") [FD]
Line_171 $$ if (tag.equals("option")) --> Line_178 $$ listdata.addElement(new ComboOption(text, value)) [CD]
Line_171 $$ if (tag.equals("option")) --> Line_179 $$ if (combo != null) [CD]
Line_179 $$ if (combo != null) --> Line_180 $$ ComboOption co = new ComboOption(text, value) [CD]
Line_179 $$ if (combo != null) --> Line_181 $$ combo.addItem(co) [CD]
Line_180 $$ ComboOption co = new ComboOption(text, value) --> Line_181 $$ combo.addItem(co) [FD]
Line_179 $$ if (combo != null) --> Line_182 $$ if (combo_text.equals(text.trim())) [CD]
Line_177 $$ String text = prop.getValue("text", "") --> Line_182 $$ if (combo_text.equals(text.trim())) [FD]
Line_180 $$ ComboOption co = new ComboOption(text, value) --> Line_182 $$ if (combo_text.equals(text.trim())) [FD]
Line_171 $$ if (tag.equals("option")) --> Line_184 $$ if (tag.equals("label")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_184 $$ if (tag.equals("label")) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_185 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_185 $$ if (prop == null) [FD]
Line_185 $$ if (prop == null) --> Line_186 $$ System.err.println("label without properties") [CD]
Line_185 $$ if (prop == null) --> Line_187 $$ return [CD]
Line_184 $$ if (tag.equals("label")) --> Line_190 $$ int x = prop.getValue("x", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_190 $$ int x = prop.getValue("x", 0) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_191 $$ int y = prop.getValue("y", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_191 $$ int y = prop.getValue("y", 0) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_192 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_192 $$ int width = prop.getValue("width", 0) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_193 $$ int height = prop.getValue("height", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_193 $$ int height = prop.getValue("height", 0) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_194 $$ String text = prop.getValue("text", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_194 $$ String text = prop.getValue("text", "") [FD]
Line_184 $$ if (tag.equals("label")) --> Line_195 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_195 $$ Object constraints = prop.getValue("constraints") [FD]
Line_184 $$ if (tag.equals("label")) --> Line_196 $$ boolean visible = prop.getValue("visible", true) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_196 $$ boolean visible = prop.getValue("visible", true) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_197 $$ label.setBounds(x, y, width, height) [CD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_197 $$ label.setBounds(x, y, width, height) [FD]
Line_10 $$ int x = prop.getValue("x", 0) --> Line_197 $$ label.setBounds(x, y, width, height) [FD]
Line_11 $$ int y = prop.getValue("y", 0) --> Line_197 $$ label.setBounds(x, y, width, height) [FD]
Line_12 $$ int width = prop.getValue("width", 0) --> Line_197 $$ label.setBounds(x, y, width, height) [FD]
Line_13 $$ int height = prop.getValue("height", 0) --> Line_197 $$ label.setBounds(x, y, width, height) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_198 $$ label.setText(text) [CD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_198 $$ label.setText(text) [FD]
Line_177 $$ String text = prop.getValue("text", "") --> Line_198 $$ label.setText(text) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_199 $$ label.setVisible(false) [CD]
Line_55 $$ boolean visible = prop.getValue("visible", true) --> Line_199 $$ label.setVisible(false) [FD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_199 $$ label.setVisible(false) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_200 $$ sheet.getContentPane().add(label, constraints) [CD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_200 $$ sheet.getContentPane().add(label, constraints) [FD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_200 $$ sheet.getContentPane().add(label, constraints) [FD]
Line_184 $$ if (tag.equals("label")) --> Line_201 $$ if (tag.equals("button")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_201 $$ if (tag.equals("button")) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_202 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_202 $$ if (prop == null) [FD]
Line_202 $$ if (prop == null) --> Line_203 $$ System.err.println("button without properties") [CD]
Line_202 $$ if (prop == null) --> Line_204 $$ return [CD]
Line_201 $$ if (tag.equals("button")) --> Line_206 $$ JButton btn = new JButton() [CD]
Line_201 $$ if (tag.equals("button")) --> Line_207 $$ int x = prop.getValue("x", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_207 $$ int x = prop.getValue("x", 0) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_208 $$ int y = prop.getValue("y", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_208 $$ int y = prop.getValue("y", 0) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_209 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_209 $$ int width = prop.getValue("width", 0) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_210 $$ int height = prop.getValue("height", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_210 $$ int height = prop.getValue("height", 0) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_211 $$ String id = prop.getValue("id", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_211 $$ String id = prop.getValue("id", "") [FD]
Line_201 $$ if (tag.equals("button")) --> Line_212 $$ String text = prop.getValue("text", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_212 $$ String text = prop.getValue("text", "") [FD]
Line_201 $$ if (tag.equals("button")) --> Line_213 $$ String onmouseup = prop.getValue("onmouseup", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_213 $$ String onmouseup = prop.getValue("onmouseup", "") [FD]
Line_201 $$ if (tag.equals("button")) --> Line_214 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_214 $$ Object constraints = prop.getValue("constraints") [FD]
Line_201 $$ if (tag.equals("button")) --> Line_215 $$ btn.setBounds(x, y, width, height) [CD]
Line_206 $$ JButton btn = new JButton() --> Line_215 $$ btn.setBounds(x, y, width, height) [FD]
Line_10 $$ int x = prop.getValue("x", 0) --> Line_215 $$ btn.setBounds(x, y, width, height) [FD]
Line_11 $$ int y = prop.getValue("y", 0) --> Line_215 $$ btn.setBounds(x, y, width, height) [FD]
Line_12 $$ int width = prop.getValue("width", 0) --> Line_215 $$ btn.setBounds(x, y, width, height) [FD]
Line_13 $$ int height = prop.getValue("height", 0) --> Line_215 $$ btn.setBounds(x, y, width, height) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_216 $$ btn.setText(text) [CD]
Line_206 $$ JButton btn = new JButton() --> Line_216 $$ btn.setText(text) [FD]
Line_177 $$ String text = prop.getValue("text", "") --> Line_216 $$ btn.setText(text) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_217 $$ btn.addActionListener(sheet) [CD]
Line_206 $$ JButton btn = new JButton() --> Line_217 $$ btn.addActionListener(sheet) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_218 $$ btn.setActionCommand(onmouseup) [CD]
Line_206 $$ JButton btn = new JButton() --> Line_218 $$ btn.setActionCommand(onmouseup) [FD]
Line_213 $$ String onmouseup = prop.getValue("onmouseup", "") --> Line_218 $$ btn.setActionCommand(onmouseup) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_219 $$ sheet.getContentPane().add(btn, constraints) [CD]
Line_206 $$ JButton btn = new JButton() --> Line_219 $$ sheet.getContentPane().add(btn, constraints) [FD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_219 $$ sheet.getContentPane().add(btn, constraints) [FD]
Line_201 $$ if (tag.equals("button")) --> Line_220 $$ if (tag.equals("radiobutton")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_220 $$ if (tag.equals("radiobutton")) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_221 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_221 $$ if (prop == null) [FD]
Line_221 $$ if (prop == null) --> Line_222 $$ System.err.println("radiobutton without properties") [CD]
Line_221 $$ if (prop == null) --> Line_223 $$ return [CD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_225 $$ JRadioButton rb = new JRadioButton() [CD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_226 $$ int x = prop.getValue("x", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_226 $$ int x = prop.getValue("x", 0) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_227 $$ int y = prop.getValue("y", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_227 $$ int y = prop.getValue("y", 0) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_228 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_228 $$ int width = prop.getValue("width", 0) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_229 $$ int height = prop.getValue("height", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_229 $$ int height = prop.getValue("height", 0) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_230 $$ String id = prop.getValue("id", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_230 $$ String id = prop.getValue("id", "") [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_231 $$ String text = prop.getValue("text", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_231 $$ String text = prop.getValue("text", "") [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_232 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_232 $$ Object constraints = prop.getValue("constraints") [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_233 $$ String checked = prop.getValue("checked", "false") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_233 $$ String checked = prop.getValue("checked", "false") [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_234 $$ rb.setBounds(x, y, width, height) [CD]
Line_225 $$ JRadioButton rb = new JRadioButton() --> Line_234 $$ rb.setBounds(x, y, width, height) [FD]
Line_10 $$ int x = prop.getValue("x", 0) --> Line_234 $$ rb.setBounds(x, y, width, height) [FD]
Line_11 $$ int y = prop.getValue("y", 0) --> Line_234 $$ rb.setBounds(x, y, width, height) [FD]
Line_12 $$ int width = prop.getValue("width", 0) --> Line_234 $$ rb.setBounds(x, y, width, height) [FD]
Line_13 $$ int height = prop.getValue("height", 0) --> Line_234 $$ rb.setBounds(x, y, width, height) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_235 $$ rb.setText(text) [CD]
Line_225 $$ JRadioButton rb = new JRadioButton() --> Line_235 $$ rb.setText(text) [FD]
Line_177 $$ String text = prop.getValue("text", "") --> Line_235 $$ rb.setText(text) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_236 $$ rb.setName((String) id) [CD]
Line_225 $$ JRadioButton rb = new JRadioButton() --> Line_236 $$ rb.setName((String) id) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_237 $$ rb.addActionListener(sheet) [CD]
Line_225 $$ JRadioButton rb = new JRadioButton() --> Line_237 $$ rb.addActionListener(sheet) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_238 $$ rb.setSelected(checked.equalsIgnoreCase("true")) [CD]
Line_225 $$ JRadioButton rb = new JRadioButton() --> Line_238 $$ rb.setSelected(checked.equalsIgnoreCase("true")) [FD]
Line_233 $$ String checked = prop.getValue("checked", "false") --> Line_238 $$ rb.setSelected(checked.equalsIgnoreCase("true")) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_239 $$ sheet.getContentPane().add(rb, constraints) [CD]
Line_225 $$ JRadioButton rb = new JRadioButton() --> Line_239 $$ sheet.getContentPane().add(rb, constraints) [FD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_239 $$ sheet.getContentPane().add(rb, constraints) [FD]
Line_220 $$ if (tag.equals("radiobutton")) --> Line_240 $$ if (tag.equals("checkbox")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_240 $$ if (tag.equals("checkbox")) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_241 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_241 $$ if (prop == null) [FD]
Line_241 $$ if (prop == null) --> Line_242 $$ System.err.println("checkbox without properties") [CD]
Line_241 $$ if (prop == null) --> Line_243 $$ return [CD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_245 $$ JCheckBox cb = new JCheckBox() [CD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_246 $$ int x = prop.getValue("x", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_246 $$ int x = prop.getValue("x", 0) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_247 $$ int y = prop.getValue("y", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_247 $$ int y = prop.getValue("y", 0) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_248 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_248 $$ int width = prop.getValue("width", 0) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_249 $$ int height = prop.getValue("height", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_249 $$ int height = prop.getValue("height", 0) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_250 $$ String id = prop.getValue("id", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_250 $$ String id = prop.getValue("id", "") [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_251 $$ String text = prop.getValue("text", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_251 $$ String text = prop.getValue("text", "") [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_252 $$ String onmouseup = prop.getValue("onmouseup", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_252 $$ String onmouseup = prop.getValue("onmouseup", "") [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_253 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_253 $$ Object constraints = prop.getValue("constraints") [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_254 $$ String checked = prop.getValue("checked", "false") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_254 $$ String checked = prop.getValue("checked", "false") [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_255 $$ cb.setBounds(x, y, width, height) [CD]
Line_245 $$ JCheckBox cb = new JCheckBox() --> Line_255 $$ cb.setBounds(x, y, width, height) [FD]
Line_10 $$ int x = prop.getValue("x", 0) --> Line_255 $$ cb.setBounds(x, y, width, height) [FD]
Line_11 $$ int y = prop.getValue("y", 0) --> Line_255 $$ cb.setBounds(x, y, width, height) [FD]
Line_12 $$ int width = prop.getValue("width", 0) --> Line_255 $$ cb.setBounds(x, y, width, height) [FD]
Line_13 $$ int height = prop.getValue("height", 0) --> Line_255 $$ cb.setBounds(x, y, width, height) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_256 $$ cb.setText(text) [CD]
Line_245 $$ JCheckBox cb = new JCheckBox() --> Line_256 $$ cb.setText(text) [FD]
Line_177 $$ String text = prop.getValue("text", "") --> Line_256 $$ cb.setText(text) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_257 $$ cb.setName((String) id) [CD]
Line_245 $$ JCheckBox cb = new JCheckBox() --> Line_257 $$ cb.setName((String) id) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_258 $$ cb.setSelected(checked.equalsIgnoreCase("true")) [CD]
Line_245 $$ JCheckBox cb = new JCheckBox() --> Line_258 $$ cb.setSelected(checked.equalsIgnoreCase("true")) [FD]
Line_233 $$ String checked = prop.getValue("checked", "false") --> Line_258 $$ cb.setSelected(checked.equalsIgnoreCase("true")) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_259 $$ sheet.getContentPane().add(cb, constraints) [CD]
Line_245 $$ JCheckBox cb = new JCheckBox() --> Line_259 $$ sheet.getContentPane().add(cb, constraints) [FD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_259 $$ sheet.getContentPane().add(cb, constraints) [FD]
Line_240 $$ if (tag.equals("checkbox")) --> Line_260 $$ if (tag.equals("image")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_260 $$ if (tag.equals("image")) [FD]
Line_260 $$ if (tag.equals("image")) --> Line_261 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_261 $$ if (prop == null) [FD]
Line_261 $$ if (prop == null) --> Line_262 $$ System.err.println("image without properties") [CD]
Line_261 $$ if (prop == null) --> Line_263 $$ return [CD]
Line_260 $$ if (tag.equals("image")) --> Line_266 $$ int x = prop.getValue("x", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_266 $$ int x = prop.getValue("x", 0) [FD]
Line_260 $$ if (tag.equals("image")) --> Line_267 $$ int y = prop.getValue("y", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_267 $$ int y = prop.getValue("y", 0) [FD]
Line_260 $$ if (tag.equals("image")) --> Line_268 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_268 $$ int width = prop.getValue("width", 0) [FD]
Line_260 $$ if (tag.equals("image")) --> Line_269 $$ int height = prop.getValue("height", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_269 $$ int height = prop.getValue("height", 0) [FD]
Line_260 $$ if (tag.equals("image")) --> Line_270 $$ String src = prop.getValue("src", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_270 $$ String src = prop.getValue("src", "") [FD]
Line_260 $$ if (tag.equals("image")) --> Line_271 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_271 $$ Object constraints = prop.getValue("constraints") [FD]
Line_260 $$ if (tag.equals("image")) --> Line_272 $$ label.setIcon(new ImageIcon(new URL(src))) [CD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_272 $$ label.setIcon(new ImageIcon(new URL(src))) [FD]
Line_260 $$ if (tag.equals("image")) --> Line_273 $$ label.setBounds(x, y, width, height) [CD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_273 $$ label.setBounds(x, y, width, height) [FD]
Line_10 $$ int x = prop.getValue("x", 0) --> Line_273 $$ label.setBounds(x, y, width, height) [FD]
Line_11 $$ int y = prop.getValue("y", 0) --> Line_273 $$ label.setBounds(x, y, width, height) [FD]
Line_12 $$ int width = prop.getValue("width", 0) --> Line_273 $$ label.setBounds(x, y, width, height) [FD]
Line_13 $$ int height = prop.getValue("height", 0) --> Line_273 $$ label.setBounds(x, y, width, height) [FD]
Line_260 $$ if (tag.equals("image")) --> Line_274 $$ sheet.getContentPane().add(label, constraints) [CD]
Line_37 $$ String label = prop.getValue("label", "") --> Line_274 $$ sheet.getContentPane().add(label, constraints) [FD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_274 $$ sheet.getContentPane().add(label, constraints) [FD]
Line_260 $$ if (tag.equals("image")) --> Line_275 $$ if (tag.equals("singlelineedit")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_275 $$ if (tag.equals("singlelineedit")) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_276 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_276 $$ if (prop == null) [FD]
Line_276 $$ if (prop == null) --> Line_277 $$ System.err.println("singlelineedit without properties") [CD]
Line_276 $$ if (prop == null) --> Line_278 $$ return [CD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_280 $$ String pwd = prop.getValue("password", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_280 $$ String pwd = prop.getValue("password", "") [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_281 $$ JTextField sle [CD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_282 $$ if (pwd.equalsIgnoreCase("true")) [CD]
Line_280 $$ String pwd = prop.getValue("password", "") --> Line_282 $$ if (pwd.equalsIgnoreCase("true")) [FD]
Line_281 $$ JTextField sle --> Line_282 $$ if (pwd.equalsIgnoreCase("true")) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_283 $$ int x = prop.getValue("x", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_283 $$ int x = prop.getValue("x", 0) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_284 $$ int y = prop.getValue("y", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_284 $$ int y = prop.getValue("y", 0) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_285 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_285 $$ int width = prop.getValue("width", 0) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_286 $$ int height = prop.getValue("height", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_286 $$ int height = prop.getValue("height", 0) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_287 $$ Object id = prop.getValue("id") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_287 $$ Object id = prop.getValue("id") [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_288 $$ String text = prop.getValue("text", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_288 $$ String text = prop.getValue("text", "") [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_289 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_289 $$ Object constraints = prop.getValue("constraints") [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_290 $$ sle.setBounds(x, y, width, height) [CD]
Line_281 $$ JTextField sle --> Line_290 $$ sle.setBounds(x, y, width, height) [FD]
Line_282 $$ if (pwd.equalsIgnoreCase("true")) --> Line_290 $$ sle.setBounds(x, y, width, height) [FD]
Line_10 $$ int x = prop.getValue("x", 0) --> Line_290 $$ sle.setBounds(x, y, width, height) [FD]
Line_11 $$ int y = prop.getValue("y", 0) --> Line_290 $$ sle.setBounds(x, y, width, height) [FD]
Line_12 $$ int width = prop.getValue("width", 0) --> Line_290 $$ sle.setBounds(x, y, width, height) [FD]
Line_13 $$ int height = prop.getValue("height", 0) --> Line_290 $$ sle.setBounds(x, y, width, height) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_291 $$ sle.setText(text) [CD]
Line_281 $$ JTextField sle --> Line_291 $$ sle.setText(text) [FD]
Line_282 $$ if (pwd.equalsIgnoreCase("true")) --> Line_291 $$ sle.setText(text) [FD]
Line_177 $$ String text = prop.getValue("text", "") --> Line_291 $$ sle.setText(text) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_292 $$ sle.setName((String) id) [CD]
Line_281 $$ JTextField sle --> Line_292 $$ sle.setName((String) id) [FD]
Line_282 $$ if (pwd.equalsIgnoreCase("true")) --> Line_292 $$ sle.setName((String) id) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_293 $$ sheet.getContentPane().add(sle, constraints) [CD]
Line_281 $$ JTextField sle --> Line_293 $$ sheet.getContentPane().add(sle, constraints) [FD]
Line_282 $$ if (pwd.equalsIgnoreCase("true")) --> Line_293 $$ sheet.getContentPane().add(sle, constraints) [FD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_293 $$ sheet.getContentPane().add(sle, constraints) [FD]
Line_275 $$ if (tag.equals("singlelineedit")) --> Line_294 $$ if (tag.equals("treeview")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_294 $$ if (tag.equals("treeview")) [FD]
Line_294 $$ if (tag.equals("treeview")) --> Line_295 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_295 $$ if (prop == null) [FD]
Line_295 $$ if (prop == null) --> Line_296 $$ System.err.println("treeview without properties") [CD]
Line_295 $$ if (prop == null) --> Line_297 $$ return [CD]
Line_294 $$ if (tag.equals("treeview")) --> Line_301 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_301 $$ Object constraints = prop.getValue("constraints") [FD]
Line_294 $$ if (tag.equals("treeview")) --> Line_302 $$ sheet.getContentPane().add(new JScrollPane(treeview), constraints) [CD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_302 $$ sheet.getContentPane().add(new JScrollPane(treeview), constraints) [FD]
Line_294 $$ if (tag.equals("treeview")) --> Line_303 $$ if (tag.equals("treeitem")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_303 $$ if (tag.equals("treeitem")) [FD]
Line_303 $$ if (tag.equals("treeitem")) --> Line_304 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_304 $$ if (prop == null) [FD]
Line_304 $$ if (prop == null) --> Line_305 $$ System.err.println("treeview.treeitem without properties") [CD]
Line_304 $$ if (prop == null) --> Line_306 $$ return [CD]
Line_303 $$ if (tag.equals("treeitem")) --> Line_308 $$ String text = prop.getValue("text", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_308 $$ String text = prop.getValue("text", "") [FD]
Line_303 $$ if (tag.equals("treeitem")) --> Line_309 $$ String value = prop.getValue("value", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_309 $$ String value = prop.getValue("value", "") [FD]
Line_303 $$ if (tag.equals("treeitem")) --> Line_310 $$ DefaultMutableTreeNode node = new DefaultMutableTreeNode(text) [CD]
Line_303 $$ if (tag.equals("treeitem")) --> Line_311 $$ treeview_root.add(node) [CD]
Line_310 $$ DefaultMutableTreeNode node = new DefaultMutableTreeNode(text) --> Line_311 $$ treeview_root.add(node) [FD]
Line_303 $$ if (tag.equals("treeitem")) --> Line_312 $$ if (tag.equals("table")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_312 $$ if (tag.equals("table")) [FD]
Line_312 $$ if (tag.equals("table")) --> Line_313 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_313 $$ if (prop == null) [FD]
Line_313 $$ if (prop == null) --> Line_314 $$ System.err.println("table without properties") [CD]
Line_313 $$ if (prop == null) --> Line_315 $$ return [CD]
Line_312 $$ if (tag.equals("table")) --> Line_317 $$ String id = prop.getValue("id", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_317 $$ String id = prop.getValue("id", "") [FD]
Line_319 $$ model = new DefaultTableModel() --> Line_321 $$ return false [CD]
Line_312 $$ if (tag.equals("table")) --> Line_324 $$ table.setModel(model) [CD]
Line_312 $$ if (tag.equals("table")) --> Line_325 $$ table.setName((String) id) [CD]
Line_312 $$ if (tag.equals("table")) --> Line_326 $$ Object constraints = prop.getValue("constraints") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_326 $$ Object constraints = prop.getValue("constraints") [FD]
Line_312 $$ if (tag.equals("table")) --> Line_327 $$ sheet.getContentPane().add(new JScrollPane(table), constraints) [CD]
Line_138 $$ Object constraints = prop.getValue("constraints") --> Line_327 $$ sheet.getContentPane().add(new JScrollPane(table), constraints) [FD]
Line_312 $$ if (tag.equals("table")) --> Line_331 $$ if (tag.equals("header")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_331 $$ if (tag.equals("header")) [FD]
Line_331 $$ if (tag.equals("header")) --> Line_332 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_332 $$ if (prop == null) [FD]
Line_332 $$ if (prop == null) --> Line_333 $$ System.err.println("table.header without properties") [CD]
Line_332 $$ if (prop == null) --> Line_334 $$ return [CD]
Line_331 $$ if (tag.equals("header")) --> Line_336 $$ String text = prop.getValue("text", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_336 $$ String text = prop.getValue("text", "") [FD]
Line_331 $$ if (tag.equals("header")) --> Line_337 $$ int width = prop.getValue("width", 0) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_337 $$ int width = prop.getValue("width", 0) [FD]
Line_331 $$ if (tag.equals("header")) --> Line_338 $$ headerWidths.addElement(new Integer(width)) [CD]
Line_331 $$ if (tag.equals("header")) --> Line_339 $$ model.addColumn(text) [CD]
Line_177 $$ String text = prop.getValue("text", "") --> Line_339 $$ model.addColumn(text) [FD]
Line_331 $$ if (tag.equals("header")) --> Line_340 $$ if (tag.equals("row")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_340 $$ if (tag.equals("row")) [FD]
Line_340 $$ if (tag.equals("row")) --> Line_343 $$ model.setRowCount(rowNumber) [CD]
Line_340 $$ if (tag.equals("row")) --> Line_344 $$ if (tag.equals("column")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_344 $$ if (tag.equals("column")) [FD]
Line_344 $$ if (tag.equals("column")) --> Line_346 $$ if (prop == null) [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_346 $$ if (prop == null) [FD]
Line_346 $$ if (prop == null) --> Line_347 $$ System.err.println("table.column without properties") [CD]
Line_346 $$ if (prop == null) --> Line_348 $$ return [CD]
Line_344 $$ if (tag.equals("column")) --> Line_350 $$ String value = prop.getValue("value", "") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_350 $$ String value = prop.getValue("value", "") [FD]
Line_344 $$ if (tag.equals("column")) --> Line_351 $$ model.setValueAt(value, rowNumber - 1, columnNumber - 1) [CD]
Line_176 $$ String value = prop.getValue("value", "") --> Line_351 $$ model.setValueAt(value, rowNumber - 1, columnNumber - 1) [FD]
Line_344 $$ if (tag.equals("column")) --> Line_352 $$ if (tag.equals("script")) [CD]
Line_2 $$ public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException --> Line_352 $$ if (tag.equals("script")) [FD]
Line_352 $$ if (tag.equals("script")) --> Line_353 $$ sheet.beginScript() [CD]
Line_352 $$ if (tag.equals("script")) --> Line_354 $$ String url = prop.getValue("src") [CD]
Line_3 $$ wabclient.Attributes prop = new wabclient.Attributes(attributes) --> Line_354 $$ String url = prop.getValue("src") [FD]
Line_352 $$ if (tag.equals("script")) --> Line_355 $$ if (url.length() > 0) [CD]
Line_359 $$ while (true) --> Line_360 $$ buffer = r.readLine() [CD]
Line_359 $$ while (true) --> Line_361 $$ if (buffer == null) [CD]
Line_359 $$ while (true) --> Line_362 $$ sheet.script += buffer + "\n" [CD]
Line_352 $$ if (tag.equals("script")) --> Line_371 $$ System.err.println("[sheet] unparsed tag: " + tag) [CD]
