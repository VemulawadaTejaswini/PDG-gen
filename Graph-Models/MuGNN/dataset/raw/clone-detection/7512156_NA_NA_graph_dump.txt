Line_2 $$ public void execute(String[] args) throws Exception --> Line_3 $$ Options cmdLineOptions = getCommandOptions() [CD]
Line_5 $$ GnuParser parser = new GnuParser() --> Line_6 $$ CommandLine commandLine = parser.parse(cmdLineOptions, TolvenPlugin.getInitArgs()) [FD]
Line_3 $$ Options cmdLineOptions = getCommandOptions() --> Line_6 $$ CommandLine commandLine = parser.parse(cmdLineOptions, TolvenPlugin.getInitArgs()) [FD]
Line_6 $$ CommandLine commandLine = parser.parse(cmdLineOptions, TolvenPlugin.getInitArgs()) --> Line_7 $$ String srcRepositoryURLString = commandLine.getOptionValue(CMD_LINE_SRC_REPOSITORYURL_OPTION) [FD]
Line_6 $$ CommandLine commandLine = parser.parse(cmdLineOptions, TolvenPlugin.getInitArgs()) --> Line_9 $$ String srcPluginId = commandLine.getOptionValue(CMD_LINE_SRC_PLUGIN_ID_OPTION) [FD]
Line_9 $$ String srcPluginId = commandLine.getOptionValue(CMD_LINE_SRC_PLUGIN_ID_OPTION) --> Line_10 $$ PluginDetail plugin = RepositoryMetadata.getPluginDetail(srcPluginId, libraryPlugins) [FD]
Line_8 $$ Plugins libraryPlugins = RepositoryMetadata.getRepositoryPlugins(new URL(srcRepositoryURLString)) --> Line_10 $$ PluginDetail plugin = RepositoryMetadata.getPluginDetail(srcPluginId, libraryPlugins) [FD]
Line_10 $$ PluginDetail plugin = RepositoryMetadata.getPluginDetail(srcPluginId, libraryPlugins) --> Line_11 $$ if (plugin == null) [FD]
Line_6 $$ CommandLine commandLine = parser.parse(cmdLineOptions, TolvenPlugin.getInitArgs()) --> Line_14 $$ String srcPluginVersionString = commandLine.getOptionValue(CMD_LINE_SRC_PLUGIN_VERSION_OPTION) [FD]
Line_15 $$ PluginVersionDetail srcPluginVersion = null --> Line_16 $$ if (srcPluginVersion == null) [FD]
Line_16 $$ if (srcPluginVersion == null) --> Line_17 $$ srcPluginVersion = RepositoryMetadata.getLatestVersion(plugin) [CD]
Line_15 $$ PluginVersionDetail srcPluginVersion = null --> Line_17 $$ srcPluginVersion = RepositoryMetadata.getLatestVersion(plugin) [FD]
Line_10 $$ PluginDetail plugin = RepositoryMetadata.getPluginDetail(srcPluginId, libraryPlugins) --> Line_17 $$ srcPluginVersion = RepositoryMetadata.getLatestVersion(plugin) [FD]
Line_16 $$ if (srcPluginVersion == null) --> Line_19 $$ srcPluginVersion = RepositoryMetadata.getPluginVersionDetail(srcPluginVersionString, plugin) [CD]
Line_15 $$ PluginVersionDetail srcPluginVersion = null --> Line_19 $$ srcPluginVersion = RepositoryMetadata.getPluginVersionDetail(srcPluginVersionString, plugin) [FD]
Line_17 $$ srcPluginVersion = RepositoryMetadata.getLatestVersion(plugin) --> Line_19 $$ srcPluginVersion = RepositoryMetadata.getPluginVersionDetail(srcPluginVersionString, plugin) [FD]
Line_14 $$ String srcPluginVersionString = commandLine.getOptionValue(CMD_LINE_SRC_PLUGIN_VERSION_OPTION) --> Line_19 $$ srcPluginVersion = RepositoryMetadata.getPluginVersionDetail(srcPluginVersionString, plugin) [FD]
Line_10 $$ PluginDetail plugin = RepositoryMetadata.getPluginDetail(srcPluginId, libraryPlugins) --> Line_19 $$ srcPluginVersion = RepositoryMetadata.getPluginVersionDetail(srcPluginVersionString, plugin) [FD]
Line_10 $$ PluginDetail plugin = RepositoryMetadata.getPluginDetail(srcPluginId, libraryPlugins) --> Line_21 $$ if (plugin == null) [FD]
Line_6 $$ CommandLine commandLine = parser.parse(cmdLineOptions, TolvenPlugin.getInitArgs()) --> Line_24 $$ String destPluginId = commandLine.getOptionValue(CMD_LINE_DEST_PLUGIN_ID_OPTION) [FD]
Line_15 $$ PluginVersionDetail srcPluginVersion = null --> Line_26 $$ URL srcURL = new URL(srcPluginVersion.getUri()) [FD]
Line_17 $$ srcPluginVersion = RepositoryMetadata.getLatestVersion(plugin) --> Line_26 $$ URL srcURL = new URL(srcPluginVersion.getUri()) [FD]
Line_19 $$ srcPluginVersion = RepositoryMetadata.getPluginVersionDetail(srcPluginVersionString, plugin) --> Line_26 $$ URL srcURL = new URL(srcPluginVersion.getUri()) [FD]
Line_26 $$ URL srcURL = new URL(srcPluginVersion.getUri()) --> Line_31 $$ File tmpZip = new File(getPluginTmpDir(), new File(srcURL.getFile()).getName()) [FD]
Line_29 $$ InputStream in = null --> Line_33 $$ in = srcURL.openStream() [FD]
Line_26 $$ URL srcURL = new URL(srcPluginVersion.getUri()) --> Line_33 $$ in = srcURL.openStream() [FD]
Line_30 $$ FileOutputStream out = null --> Line_34 $$ out = new FileOutputStream(tmpZip) [FD]
Line_29 $$ InputStream in = null --> Line_35 $$ IOUtils.copy(in, out) [FD]
Line_33 $$ in = srcURL.openStream() --> Line_35 $$ IOUtils.copy(in, out) [FD]
Line_30 $$ FileOutputStream out = null --> Line_35 $$ IOUtils.copy(in, out) [FD]
Line_34 $$ out = new FileOutputStream(tmpZip) --> Line_35 $$ IOUtils.copy(in, out) [FD]
Line_31 $$ File tmpZip = new File(getPluginTmpDir(), new File(srcURL.getFile()).getName()) --> Line_36 $$ TolvenZip.unzip(tmpZip, newPluginDir) [FD]
Line_27 $$ File newPluginDir = new File(getPluginTmpDir(), destPluginId) --> Line_36 $$ TolvenZip.unzip(tmpZip, newPluginDir) [FD]
Line_29 $$ InputStream in = null --> Line_38 $$ if (in != null) [FD]
Line_33 $$ in = srcURL.openStream() --> Line_38 $$ if (in != null) [FD]
Line_38 $$ if (in != null) --> Line_39 $$ in.close() [CD]
Line_29 $$ InputStream in = null --> Line_39 $$ in.close() [FD]
Line_33 $$ in = srcURL.openStream() --> Line_39 $$ in.close() [FD]
Line_30 $$ FileOutputStream out = null --> Line_41 $$ if (out != null) [FD]
Line_34 $$ out = new FileOutputStream(tmpZip) --> Line_41 $$ if (out != null) [FD]
Line_41 $$ if (out != null) --> Line_42 $$ out.close() [CD]
Line_30 $$ FileOutputStream out = null --> Line_42 $$ out.close() [FD]
Line_34 $$ out = new FileOutputStream(tmpZip) --> Line_42 $$ out.close() [FD]
Line_31 $$ File tmpZip = new File(getPluginTmpDir(), new File(srcURL.getFile()).getName()) --> Line_44 $$ if (tmpZip != null) [FD]
Line_44 $$ if (tmpZip != null) --> Line_45 $$ tmpZip.delete() [CD]
Line_31 $$ File tmpZip = new File(getPluginTmpDir(), new File(srcURL.getFile()).getName()) --> Line_45 $$ tmpZip.delete() [FD]
Line_48 $$ File pluginManifestFile = new File(newPluginDir, "tolven-plugin.xml") --> Line_49 $$ if (!pluginManifestFile.exists()) [FD]
Line_26 $$ URL srcURL = new URL(srcPluginVersion.getUri()) --> Line_50 $$ throw new RuntimeException(srcURL.toExternalForm() + "has no plugin manifest") [FD]
Line_48 $$ File pluginManifestFile = new File(newPluginDir, "tolven-plugin.xml") --> Line_52 $$ Plugin pluginManifest = RepositoryMetadata.getPlugin(pluginManifestFile.toURI().toURL()) [FD]
Line_52 $$ Plugin pluginManifest = RepositoryMetadata.getPlugin(pluginManifestFile.toURI().toURL()) --> Line_53 $$ pluginManifest.setId(destPluginId) [FD]
Line_24 $$ String destPluginId = commandLine.getOptionValue(CMD_LINE_DEST_PLUGIN_ID_OPTION) --> Line_53 $$ pluginManifest.setId(destPluginId) [FD]
Line_6 $$ CommandLine commandLine = parser.parse(cmdLineOptions, TolvenPlugin.getInitArgs()) --> Line_54 $$ String destPluginVersion = commandLine.getOptionValue(CMD_LINE_DEST_PLUGIN_VERSION_OPTION) [FD]
Line_54 $$ String destPluginVersion = commandLine.getOptionValue(CMD_LINE_DEST_PLUGIN_VERSION_OPTION) --> Line_55 $$ if (destPluginVersion == null) [FD]
Line_55 $$ if (destPluginVersion == null) --> Line_56 $$ destPluginVersion = DEFAULT_DEST_VERSION [CD]
Line_54 $$ String destPluginVersion = commandLine.getOptionValue(CMD_LINE_DEST_PLUGIN_VERSION_OPTION) --> Line_56 $$ destPluginVersion = DEFAULT_DEST_VERSION [FD]
Line_52 $$ Plugin pluginManifest = RepositoryMetadata.getPlugin(pluginManifestFile.toURI().toURL()) --> Line_58 $$ pluginManifest.setVersion(destPluginVersion) [FD]
Line_54 $$ String destPluginVersion = commandLine.getOptionValue(CMD_LINE_DEST_PLUGIN_VERSION_OPTION) --> Line_58 $$ pluginManifest.setVersion(destPluginVersion) [FD]
Line_56 $$ destPluginVersion = DEFAULT_DEST_VERSION --> Line_58 $$ pluginManifest.setVersion(destPluginVersion) [FD]
Line_52 $$ Plugin pluginManifest = RepositoryMetadata.getPlugin(pluginManifestFile.toURI().toURL()) --> Line_59 $$ String pluginManifestXML = RepositoryMetadata.getPluginManifest(pluginManifest) [FD]
Line_48 $$ File pluginManifestFile = new File(newPluginDir, "tolven-plugin.xml") --> Line_60 $$ FileUtils.writeStringToFile(pluginManifestFile, pluginManifestXML) [FD]
Line_59 $$ String pluginManifestXML = RepositoryMetadata.getPluginManifest(pluginManifest) --> Line_60 $$ FileUtils.writeStringToFile(pluginManifestFile, pluginManifestXML) [FD]
Line_61 $$ File pluginFragmentManifestFile = new File(newPluginDir, "tolven-plugin-fragment.xml") --> Line_62 $$ if (pluginFragmentManifestFile.exists()) [FD]
Line_62 $$ if (pluginFragmentManifestFile.exists()) --> Line_63 $$ PluginFragment pluginManifestFragment = RepositoryMetadata.getPluginFragment(pluginFragmentManifestFile.toURI().toURL()) [CD]
Line_61 $$ File pluginFragmentManifestFile = new File(newPluginDir, "tolven-plugin-fragment.xml") --> Line_63 $$ PluginFragment pluginManifestFragment = RepositoryMetadata.getPluginFragment(pluginFragmentManifestFile.toURI().toURL()) [FD]
Line_62 $$ if (pluginFragmentManifestFile.exists()) --> Line_64 $$ Requires requires = pluginManifestFragment.getRequires() [CD]
Line_63 $$ PluginFragment pluginManifestFragment = RepositoryMetadata.getPluginFragment(pluginFragmentManifestFile.toURI().toURL()) --> Line_64 $$ Requires requires = pluginManifestFragment.getRequires() [FD]
Line_62 $$ if (pluginFragmentManifestFile.exists()) --> Line_65 $$ if (requires == null) [CD]
Line_64 $$ Requires requires = pluginManifestFragment.getRequires() --> Line_65 $$ if (requires == null) [FD]
Line_26 $$ URL srcURL = new URL(srcPluginVersion.getUri()) --> Line_66 $$ throw new RuntimeException("No <requires> detected for plugin fragment in: " + srcURL.toExternalForm()) [FD]
Line_62 $$ if (pluginFragmentManifestFile.exists()) --> Line_68 $$ if (requires.getImport().size() != 1) [CD]
Line_64 $$ Requires requires = pluginManifestFragment.getRequires() --> Line_68 $$ if (requires.getImport().size() != 1) [FD]
Line_26 $$ URL srcURL = new URL(srcPluginVersion.getUri()) --> Line_69 $$ throw new RuntimeException("There should be only one import for plugin fragment in: " + srcURL.toExternalForm()) [FD]
Line_62 $$ if (pluginFragmentManifestFile.exists()) --> Line_71 $$ requires.getImport().get(0).setPluginId(destPluginId) [CD]
Line_24 $$ String destPluginId = commandLine.getOptionValue(CMD_LINE_DEST_PLUGIN_ID_OPTION) --> Line_71 $$ requires.getImport().get(0).setPluginId(destPluginId) [FD]
Line_64 $$ Requires requires = pluginManifestFragment.getRequires() --> Line_71 $$ requires.getImport().get(0).setPluginId(destPluginId) [FD]
Line_62 $$ if (pluginFragmentManifestFile.exists()) --> Line_72 $$ requires.getImport().get(0).setPluginVersion(destPluginVersion) [CD]
Line_54 $$ String destPluginVersion = commandLine.getOptionValue(CMD_LINE_DEST_PLUGIN_VERSION_OPTION) --> Line_72 $$ requires.getImport().get(0).setPluginVersion(destPluginVersion) [FD]
Line_56 $$ destPluginVersion = DEFAULT_DEST_VERSION --> Line_72 $$ requires.getImport().get(0).setPluginVersion(destPluginVersion) [FD]
Line_64 $$ Requires requires = pluginManifestFragment.getRequires() --> Line_72 $$ requires.getImport().get(0).setPluginVersion(destPluginVersion) [FD]
Line_62 $$ if (pluginFragmentManifestFile.exists()) --> Line_73 $$ String pluginFragmentManifestXML = RepositoryMetadata.getPluginFragmentManifest(pluginManifestFragment) [CD]
Line_63 $$ PluginFragment pluginManifestFragment = RepositoryMetadata.getPluginFragment(pluginFragmentManifestFile.toURI().toURL()) --> Line_73 $$ String pluginFragmentManifestXML = RepositoryMetadata.getPluginFragmentManifest(pluginManifestFragment) [FD]
Line_62 $$ if (pluginFragmentManifestFile.exists()) --> Line_74 $$ FileUtils.writeStringToFile(pluginFragmentManifestFile, pluginFragmentManifestXML) [CD]
Line_61 $$ File pluginFragmentManifestFile = new File(newPluginDir, "tolven-plugin-fragment.xml") --> Line_74 $$ FileUtils.writeStringToFile(pluginFragmentManifestFile, pluginFragmentManifestXML) [FD]
Line_73 $$ String pluginFragmentManifestXML = RepositoryMetadata.getPluginFragmentManifest(pluginManifestFragment) --> Line_74 $$ FileUtils.writeStringToFile(pluginFragmentManifestFile, pluginFragmentManifestXML) [FD]
Line_6 $$ CommandLine commandLine = parser.parse(cmdLineOptions, TolvenPlugin.getInitArgs()) --> Line_76 $$ String destDirname = commandLine.getOptionValue(CMD_LINE_DEST_DIR_OPTION) [FD]
Line_77 $$ File destDir = new File(destDirname) --> Line_79 $$ destDir.mkdirs() [FD]
Line_27 $$ File newPluginDir = new File(getPluginTmpDir(), destPluginId) --> Line_80 $$ TolvenZip.zip(newPluginDir, destZip) [FD]
Line_78 $$ File destZip = new File(destDir, destPluginId + "-" + destPluginVersion + ".zip") --> Line_80 $$ TolvenZip.zip(newPluginDir, destZip) [FD]
Line_27 $$ File newPluginDir = new File(getPluginTmpDir(), destPluginId) --> Line_82 $$ if (newPluginDir != null) [FD]
Line_82 $$ if (newPluginDir != null) --> Line_83 $$ FileUtils.deleteDirectory(newPluginDir) [CD]
Line_27 $$ File newPluginDir = new File(getPluginTmpDir(), destPluginId) --> Line_83 $$ FileUtils.deleteDirectory(newPluginDir) [FD]
Line_87 $$ HelpFormatter formatter = new HelpFormatter() --> Line_88 $$ formatter.printHelp(getClass().getName(), cmdLineOptions) [FD]
Line_3 $$ Options cmdLineOptions = getCommandOptions() --> Line_88 $$ formatter.printHelp(getClass().getName(), cmdLineOptions) [FD]
