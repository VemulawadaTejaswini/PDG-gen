Line_2 $$ public void setUp() throws Exception --> Line_3 $$ logger.finer("******************** set up ********************") [CD]
Line_2 $$ public void setUp() throws Exception --> Line_4 $$ Properties props [CD]
Line_2 $$ public void setUp() throws Exception --> Line_5 $$ if (XMLDBTestSuite.propertiesFileName == null) [CD]
Line_5 $$ if (XMLDBTestSuite.propertiesFileName == null) --> Line_6 $$ String defaultPropsFileLocation = "test/xmldb/XMLDBTestSuite.properties" [CD]
Line_5 $$ if (XMLDBTestSuite.propertiesFileName == null) --> Line_7 $$ URL url = this.getClass().getClassLoader().getResource(defaultPropsFileLocation) [CD]
Line_6 $$ String defaultPropsFileLocation = "test/xmldb/XMLDBTestSuite.properties" --> Line_7 $$ URL url = this.getClass().getClassLoader().getResource(defaultPropsFileLocation) [FD]
Line_5 $$ if (XMLDBTestSuite.propertiesFileName == null) --> Line_8 $$ if (url == null) [CD]
Line_7 $$ URL url = this.getClass().getClassLoader().getResource(defaultPropsFileLocation) --> Line_8 $$ if (url == null) [FD]
Line_5 $$ if (XMLDBTestSuite.propertiesFileName == null) --> Line_11 $$ props = loadProps(url.openConnection().getInputStream()) [CD]
Line_4 $$ Properties props --> Line_11 $$ props = loadProps(url.openConnection().getInputStream()) [FD]
Line_7 $$ URL url = this.getClass().getClassLoader().getResource(defaultPropsFileLocation) --> Line_11 $$ props = loadProps(url.openConnection().getInputStream()) [FD]
Line_5 $$ if (XMLDBTestSuite.propertiesFileName == null) --> Line_13 $$ props = loadProps(XMLDBTestSuite.propertiesFileName) [CD]
Line_4 $$ Properties props --> Line_13 $$ props = loadProps(XMLDBTestSuite.propertiesFileName) [FD]
Line_11 $$ props = loadProps(url.openConnection().getInputStream()) --> Line_13 $$ props = loadProps(XMLDBTestSuite.propertiesFileName) [FD]
Line_2 $$ public void setUp() throws Exception --> Line_15 $$ String driver = props.getProperty("driverName") [CD]
Line_4 $$ Properties props --> Line_15 $$ String driver = props.getProperty("driverName") [FD]
Line_11 $$ props = loadProps(url.openConnection().getInputStream()) --> Line_15 $$ String driver = props.getProperty("driverName") [FD]
Line_13 $$ props = loadProps(XMLDBTestSuite.propertiesFileName) --> Line_15 $$ String driver = props.getProperty("driverName") [FD]
Line_2 $$ public void setUp() throws Exception --> Line_16 $$ String collectionURI = props.getProperty("URI") [CD]
Line_4 $$ Properties props --> Line_16 $$ String collectionURI = props.getProperty("URI") [FD]
Line_11 $$ props = loadProps(url.openConnection().getInputStream()) --> Line_16 $$ String collectionURI = props.getProperty("URI") [FD]
Line_13 $$ props = loadProps(XMLDBTestSuite.propertiesFileName) --> Line_16 $$ String collectionURI = props.getProperty("URI") [FD]
Line_2 $$ public void setUp() throws Exception --> Line_17 $$ Database database = (Database) Class.forName(driver).newInstance() [CD]
Line_15 $$ String driver = props.getProperty("driverName") --> Line_17 $$ Database database = (Database) Class.forName(driver).newInstance() [FD]
Line_2 $$ public void setUp() throws Exception --> Line_19 $$ rootCollectionName = collectionStorageHelper.getCollectionName() [CD]
Line_2 $$ public void setUp() throws Exception --> Line_20 $$ Collection root = database.getCollection(collectionURI, null, null) [CD]
Line_17 $$ Database database = (Database) Class.forName(driver).newInstance() --> Line_20 $$ Collection root = database.getCollection(collectionURI, null, null) [FD]
Line_16 $$ String collectionURI = props.getProperty("URI") --> Line_20 $$ Collection root = database.getCollection(collectionURI, null, null) [FD]
Line_2 $$ public void setUp() throws Exception --> Line_21 $$ CollectionManagementService service = (CollectionManagementService) root.getService(CollectionManagementService.SERVICE_NAME, "1.0") [CD]
Line_20 $$ Collection root = database.getCollection(collectionURI, null, null) --> Line_21 $$ CollectionManagementService service = (CollectionManagementService) root.getService(CollectionManagementService.SERVICE_NAME, "1.0") [FD]
Line_2 $$ public void setUp() throws Exception --> Line_22 $$ String childCollection = "child" [CD]
Line_2 $$ public void setUp() throws Exception --> Line_23 $$ removeChildCollection(root, childCollection, service) [CD]
Line_20 $$ Collection root = database.getCollection(collectionURI, null, null) --> Line_23 $$ removeChildCollection(root, childCollection, service) [FD]
Line_22 $$ String childCollection = "child" --> Line_23 $$ removeChildCollection(root, childCollection, service) [FD]
Line_21 $$ CollectionManagementService service = (CollectionManagementService) root.getService(CollectionManagementService.SERVICE_NAME, "1.0") --> Line_23 $$ removeChildCollection(root, childCollection, service) [FD]
Line_2 $$ public void setUp() throws Exception --> Line_24 $$ col = service.createCollection(childCollection) [CD]
Line_21 $$ CollectionManagementService service = (CollectionManagementService) root.getService(CollectionManagementService.SERVICE_NAME, "1.0") --> Line_24 $$ col = service.createCollection(childCollection) [FD]
Line_22 $$ String childCollection = "child" --> Line_24 $$ col = service.createCollection(childCollection) [FD]
Line_2 $$ public void setUp() throws Exception --> Line_25 $$ assertNotNull("XMLDBTestCase.setUp() - Collection could not be created", col) [CD]
Line_2 $$ public void setUp() throws Exception --> Line_26 $$ logger.info("created child collection '" + col.getName() + "' parent is '" + col.getParentCollection().getName() + "'") [CD]
Line_2 $$ public void setUp() throws Exception --> Line_27 $$ assertEquals("Root collection name should match childs parent name", rootCollectionName, col.getParentCollection().getName()) [CD]
Line_2 $$ public void setUp() throws Exception --> Line_28 $$ document = createXMLFile(xmlFileName) [CD]
Line_2 $$ public void setUp() throws Exception --> Line_29 $$ assertNotNull("XMLDBTestCase.setUp() - failed to create XML file", document) [CD]
