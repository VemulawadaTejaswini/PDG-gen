Line_2 $$ public static void main(String[] args) throws Throwable --> Line_3 $$ Options options = new Options() [CD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_4 $$ options.addOption(new CommandLineOptionBuilder("cas", "cas file").isRequired(true).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_4 $$ options.addOption(new CommandLineOptionBuilder("cas", "cas file").isRequired(true).build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_5 $$ options.addOption(new CommandLineOptionBuilder("o", "output directory").longName("outputDir").isRequired(true).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_5 $$ options.addOption(new CommandLineOptionBuilder("o", "output directory").longName("outputDir").isRequired(true).build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_6 $$ options.addOption(new CommandLineOptionBuilder("tempDir", "temp directory").build()) [CD]
Line_3 $$ Options options = new Options() --> Line_6 $$ options.addOption(new CommandLineOptionBuilder("tempDir", "temp directory").build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_7 $$ options.addOption(new CommandLineOptionBuilder("prefix", "file prefix for all generated files ( default " + DEFAULT_PREFIX + " )").build()) [CD]
Line_3 $$ Options options = new Options() --> Line_7 $$ options.addOption(new CommandLineOptionBuilder("prefix", "file prefix for all generated files ( default " + DEFAULT_PREFIX + " )").build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_8 $$ options.addOption(new CommandLineOptionBuilder("trim", "trim file in sfffile's tab delimmed trim format").build()) [CD]
Line_3 $$ Options options = new Options() --> Line_8 $$ options.addOption(new CommandLineOptionBuilder("trim", "trim file in sfffile's tab delimmed trim format").build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_9 $$ options.addOption(new CommandLineOptionBuilder("trimMap", "trim map file containing tab delimited trimmed fastX file to untrimmed counterpart").build()) [CD]
Line_3 $$ Options options = new Options() --> Line_9 $$ options.addOption(new CommandLineOptionBuilder("trimMap", "trim map file containing tab delimited trimmed fastX file to untrimmed counterpart").build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_10 $$ options.addOption(new CommandLineOptionBuilder("chromat_dir", "directory of chromatograms to be converted into phd " + "(it is assumed the read data for these chromatograms are in a fasta file which the .cas file knows about").build()) [CD]
Line_3 $$ Options options = new Options() --> Line_10 $$ options.addOption(new CommandLineOptionBuilder("chromat_dir", "directory of chromatograms to be converted into phd " + "(it is assumed the read data for these chromatograms are in a fasta file which the .cas file knows about").build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_11 $$ options.addOption(new CommandLineOptionBuilder("s", "cache size ( default " + DEFAULT_CACHE_SIZE + " )").longName("cache_size").build()) [CD]
Line_3 $$ Options options = new Options() --> Line_11 $$ options.addOption(new CommandLineOptionBuilder("s", "cache size ( default " + DEFAULT_CACHE_SIZE + " )").longName("cache_size").build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_12 $$ options.addOption(new CommandLineOptionBuilder("useIllumina", "any FASTQ files in this assembly are encoded in Illumina 1.3+ format (default is Sanger)").isFlag(true).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_12 $$ options.addOption(new CommandLineOptionBuilder("useIllumina", "any FASTQ files in this assembly are encoded in Illumina 1.3+ format (default is Sanger)").isFlag(true).build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_13 $$ options.addOption(new CommandLineOptionBuilder("useClosureTrimming", "apply additional contig trimming based on JCVI Closure rules").isFlag(true).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_13 $$ options.addOption(new CommandLineOptionBuilder("useClosureTrimming", "apply additional contig trimming based on JCVI Closure rules").isFlag(true).build()) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_14 $$ CommandLine commandLine [CD]
Line_14 $$ CommandLine commandLine --> Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) [FD]
Line_3 $$ Options options = new Options() --> Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) [FD]
Line_2 $$ public static void main(String[] args) throws Throwable --> Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) [FD]
Line_14 $$ CommandLine commandLine --> Line_17 $$ int cacheSize = commandLine.hasOption("s") ? Integer.parseInt(commandLine.getOptionValue("s")) : DEFAULT_CACHE_SIZE [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_17 $$ int cacheSize = commandLine.hasOption("s") ? Integer.parseInt(commandLine.getOptionValue("s")) : DEFAULT_CACHE_SIZE [FD]
Line_14 $$ CommandLine commandLine --> Line_18 $$ File casFile = new File(commandLine.getOptionValue("cas")) [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_18 $$ File casFile = new File(commandLine.getOptionValue("cas")) [FD]
Line_18 $$ File casFile = new File(commandLine.getOptionValue("cas")) --> Line_19 $$ File casWorkingDirectory = casFile.getParentFile() [FD]
Line_14 $$ CommandLine commandLine --> Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) [FD]
Line_14 $$ CommandLine commandLine --> Line_21 $$ String prefix = commandLine.hasOption("prefix") ? commandLine.getOptionValue("prefix") : DEFAULT_PREFIX [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_21 $$ String prefix = commandLine.hasOption("prefix") ? commandLine.getOptionValue("prefix") : DEFAULT_PREFIX [FD]
Line_14 $$ CommandLine commandLine --> Line_23 $$ if (commandLine.hasOption("trim")) [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_23 $$ if (commandLine.hasOption("trim")) [FD]
Line_23 $$ if (commandLine.hasOption("trim")) --> Line_24 $$ List<TrimDataStore> dataStores = new ArrayList<TrimDataStore>() [CD]
Line_23 $$ if (commandLine.hasOption("trim")) --> Line_25 $$ final String trimFiles = commandLine.getOptionValue("trim") [CD]
Line_14 $$ CommandLine commandLine --> Line_25 $$ final String trimFiles = commandLine.getOptionValue("trim") [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_25 $$ final String trimFiles = commandLine.getOptionValue("trim") [FD]
Line_25 $$ final String trimFiles = commandLine.getOptionValue("trim") --> Line_26 $$ for (String trimFile : trimFiles.split(",")) [FD]
Line_24 $$ List<TrimDataStore> dataStores = new ArrayList<TrimDataStore>() --> Line_28 $$ dataStores.add(new DefaultTrimFileDataStore(new File(trimFile))) [FD]
Line_23 $$ if (commandLine.hasOption("trim")) --> Line_30 $$ trimDatastore = MultipleDataStoreWrapper.createMultipleDataStoreWrapper(TrimDataStore.class, dataStores) [CD]
Line_22 $$ TrimDataStore trimDatastore --> Line_30 $$ trimDatastore = MultipleDataStoreWrapper.createMultipleDataStoreWrapper(TrimDataStore.class, dataStores) [FD]
Line_24 $$ List<TrimDataStore> dataStores = new ArrayList<TrimDataStore>() --> Line_30 $$ trimDatastore = MultipleDataStoreWrapper.createMultipleDataStoreWrapper(TrimDataStore.class, dataStores) [FD]
Line_23 $$ if (commandLine.hasOption("trim")) --> Line_32 $$ trimDatastore = TrimDataStoreUtil.EMPTY_DATASTORE [CD]
Line_22 $$ TrimDataStore trimDatastore --> Line_32 $$ trimDatastore = TrimDataStoreUtil.EMPTY_DATASTORE [FD]
Line_14 $$ CommandLine commandLine --> Line_35 $$ if (commandLine.hasOption("trimMap")) [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_35 $$ if (commandLine.hasOption("trimMap")) [FD]
Line_35 $$ if (commandLine.hasOption("trimMap")) --> Line_36 $$ trimToUntrimmedMap = new DefaultTrimFileCasTrimMap(new File(commandLine.getOptionValue("trimMap"))) [CD]
Line_34 $$ CasTrimMap trimToUntrimmedMap --> Line_36 $$ trimToUntrimmedMap = new DefaultTrimFileCasTrimMap(new File(commandLine.getOptionValue("trimMap"))) [FD]
Line_14 $$ CommandLine commandLine --> Line_36 $$ trimToUntrimmedMap = new DefaultTrimFileCasTrimMap(new File(commandLine.getOptionValue("trimMap"))) [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_36 $$ trimToUntrimmedMap = new DefaultTrimFileCasTrimMap(new File(commandLine.getOptionValue("trimMap"))) [FD]
Line_35 $$ if (commandLine.hasOption("trimMap")) --> Line_38 $$ trimToUntrimmedMap = new UnTrimmedExtensionTrimMap() [CD]
Line_34 $$ CasTrimMap trimToUntrimmedMap --> Line_38 $$ trimToUntrimmedMap = new UnTrimmedExtensionTrimMap() [FD]
Line_36 $$ trimToUntrimmedMap = new DefaultTrimFileCasTrimMap(new File(commandLine.getOptionValue("trimMap"))) --> Line_38 $$ trimToUntrimmedMap = new UnTrimmedExtensionTrimMap() [FD]
Line_14 $$ CommandLine commandLine --> Line_40 $$ boolean useClosureTrimming = commandLine.hasOption("useClosureTrimming") [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_40 $$ boolean useClosureTrimming = commandLine.hasOption("useClosureTrimming") [FD]
Line_14 $$ CommandLine commandLine --> Line_44 $$ if (commandLine.hasOption("chromat_dir")) [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_44 $$ if (commandLine.hasOption("chromat_dir")) [FD]
Line_44 $$ if (commandLine.hasOption("chromat_dir")) --> Line_45 $$ sourceChromatogramFileServer = DirectoryFileServer.createReadOnlyDirectoryFileServer(new File(commandLine.getOptionValue("chromat_dir"))) [CD]
Line_43 $$ ReadOnlyDirectoryFileServer sourceChromatogramFileServer = null --> Line_45 $$ sourceChromatogramFileServer = DirectoryFileServer.createReadOnlyDirectoryFileServer(new File(commandLine.getOptionValue("chromat_dir"))) [FD]
Line_14 $$ CommandLine commandLine --> Line_45 $$ sourceChromatogramFileServer = DirectoryFileServer.createReadOnlyDirectoryFileServer(new File(commandLine.getOptionValue("chromat_dir"))) [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_45 $$ sourceChromatogramFileServer = DirectoryFileServer.createReadOnlyDirectoryFileServer(new File(commandLine.getOptionValue("chromat_dir"))) [FD]
Line_44 $$ if (commandLine.hasOption("chromat_dir")) --> Line_46 $$ sangerTraceDataStore = new SingleSangerTraceDirectoryFileDataStore(sourceChromatogramFileServer, ".scf") [CD]
Line_41 $$ TraceDataStore<FileSangerTrace> sangerTraceDataStore = null --> Line_46 $$ sangerTraceDataStore = new SingleSangerTraceDirectoryFileDataStore(sourceChromatogramFileServer, ".scf") [FD]
Line_44 $$ if (commandLine.hasOption("chromat_dir")) --> Line_47 $$ sangerFileMap = new HashMap<String, File>() [CD]
Line_42 $$ Map<String, File> sangerFileMap = null --> Line_47 $$ sangerFileMap = new HashMap<String, File>() [FD]
Line_44 $$ if (commandLine.hasOption("chromat_dir")) --> Line_48 $$ Iterator<String> iter = sangerTraceDataStore.getIds() [CD]
Line_41 $$ TraceDataStore<FileSangerTrace> sangerTraceDataStore = null --> Line_48 $$ Iterator<String> iter = sangerTraceDataStore.getIds() [FD]
Line_46 $$ sangerTraceDataStore = new SingleSangerTraceDirectoryFileDataStore(sourceChromatogramFileServer, ".scf") --> Line_48 $$ Iterator<String> iter = sangerTraceDataStore.getIds() [FD]
Line_44 $$ if (commandLine.hasOption("chromat_dir")) --> Line_49 $$ while (iter.hasNext()) [CD]
Line_48 $$ Iterator<String> iter = sangerTraceDataStore.getIds() --> Line_49 $$ while (iter.hasNext()) [FD]
Line_49 $$ while (iter.hasNext()) --> Line_50 $$ String id = iter.next() [CD]
Line_48 $$ Iterator<String> iter = sangerTraceDataStore.getIds() --> Line_50 $$ String id = iter.next() [FD]
Line_49 $$ while (iter.hasNext()) --> Line_51 $$ sangerFileMap.put(id, sangerTraceDataStore.get(id).getFile()) [CD]
Line_42 $$ Map<String, File> sangerFileMap = null --> Line_51 $$ sangerFileMap.put(id, sangerTraceDataStore.get(id).getFile()) [FD]
Line_47 $$ sangerFileMap = new HashMap<String, File>() --> Line_51 $$ sangerFileMap.put(id, sangerTraceDataStore.get(id).getFile()) [FD]
Line_50 $$ String id = iter.next() --> Line_51 $$ sangerFileMap.put(id, sangerTraceDataStore.get(id).getFile()) [FD]
Line_41 $$ TraceDataStore<FileSangerTrace> sangerTraceDataStore = null --> Line_51 $$ sangerFileMap.put(id, sangerTraceDataStore.get(id).getFile()) [FD]
Line_46 $$ sangerTraceDataStore = new SingleSangerTraceDirectoryFileDataStore(sourceChromatogramFileServer, ".scf") --> Line_51 $$ sangerFileMap.put(id, sangerTraceDataStore.get(id).getFile()) [FD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_54 $$ PrintWriter logOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".log")), true) [FD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_55 $$ PrintWriter consensusOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".consensus.fasta")), true) [FD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_56 $$ PrintWriter traceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".traceFiles.txt")), true) [FD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_57 $$ PrintWriter referenceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".referenceFiles.txt")), true) [FD]
Line_54 $$ PrintWriter logOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".log")), true) --> Line_59 $$ logOut.println(System.getProperty("user.dir")) [FD]
Line_14 $$ CommandLine commandLine --> Line_61 $$ if (!commandLine.hasOption("tempDir")) [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_61 $$ if (!commandLine.hasOption("tempDir")) [FD]
Line_61 $$ if (!commandLine.hasOption("tempDir")) --> Line_62 $$ tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(DEFAULT_TEMP_DIR) [CD]
Line_60 $$ final ReadWriteDirectoryFileServer tempDir --> Line_62 $$ tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(DEFAULT_TEMP_DIR) [FD]
Line_61 $$ if (!commandLine.hasOption("tempDir")) --> Line_64 $$ File t = new File(commandLine.getOptionValue("tempDir")) [CD]
Line_14 $$ CommandLine commandLine --> Line_64 $$ File t = new File(commandLine.getOptionValue("tempDir")) [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_64 $$ File t = new File(commandLine.getOptionValue("tempDir")) [FD]
Line_61 $$ if (!commandLine.hasOption("tempDir")) --> Line_65 $$ IOUtil.mkdirs(t) [CD]
Line_64 $$ File t = new File(commandLine.getOptionValue("tempDir")) --> Line_65 $$ IOUtil.mkdirs(t) [FD]
Line_61 $$ if (!commandLine.hasOption("tempDir")) --> Line_66 $$ tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(t) [CD]
Line_60 $$ final ReadWriteDirectoryFileServer tempDir --> Line_66 $$ tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(t) [FD]
Line_62 $$ tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(DEFAULT_TEMP_DIR) --> Line_66 $$ tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(t) [FD]
Line_64 $$ File t = new File(commandLine.getOptionValue("tempDir")) --> Line_66 $$ tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(t) [FD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_69 $$ if (!outputDir.contains("chromat_dir")) [FD]
Line_69 $$ if (!outputDir.contains("chromat_dir")) --> Line_70 $$ outputDir.createNewDir("chromat_dir") [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_70 $$ outputDir.createNewDir("chromat_dir") [FD]
Line_43 $$ ReadOnlyDirectoryFileServer sourceChromatogramFileServer = null --> Line_72 $$ if (sourceChromatogramFileServer != null) [FD]
Line_45 $$ sourceChromatogramFileServer = DirectoryFileServer.createReadOnlyDirectoryFileServer(new File(commandLine.getOptionValue("chromat_dir"))) --> Line_72 $$ if (sourceChromatogramFileServer != null) [FD]
Line_73 $$ for (File f : sourceChromatogramFileServer) --> Line_74 $$ String name = f.getName() [FD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_75 $$ OutputStream out = new FileOutputStream(outputDir.createNewFile("chromat_dir/" + name)) [FD]
Line_76 $$ final FileInputStream fileInputStream = new FileInputStream(f) --> Line_78 $$ IOUtils.copy(fileInputStream, out) [FD]
Line_75 $$ OutputStream out = new FileOutputStream(outputDir.createNewFile("chromat_dir/" + name)) --> Line_78 $$ IOUtils.copy(fileInputStream, out) [FD]
Line_75 $$ OutputStream out = new FileOutputStream(outputDir.createNewFile("chromat_dir/" + name)) --> Line_80 $$ IOUtils.closeQuietly(out) [FD]
Line_76 $$ final FileInputStream fileInputStream = new FileInputStream(f) --> Line_81 $$ IOUtils.closeQuietly(fileInputStream) [FD]
Line_14 $$ CommandLine commandLine --> Line_85 $$ FastQQualityCodec qualityCodec = commandLine.hasOption("useIllumina") ? FastQQualityCodec.ILLUMINA : FastQQualityCodec.SANGER [FD]
Line_16 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_85 $$ FastQQualityCodec qualityCodec = commandLine.hasOption("useIllumina") ? FastQQualityCodec.ILLUMINA : FastQQualityCodec.SANGER [FD]
Line_60 $$ final ReadWriteDirectoryFileServer tempDir --> Line_86 $$ CasDataStoreFactory casDataStoreFactory = new MultiCasDataStoreFactory(new H2SffCasDataStoreFactory(casWorkingDirectory, tempDir, EmptyDataStoreFilter.INSTANCE), new H2FastQCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, qualityCodec, tempDir.getRootDir()), new FastaCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, cacheSize)) [FD]
Line_62 $$ tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(DEFAULT_TEMP_DIR) --> Line_86 $$ CasDataStoreFactory casDataStoreFactory = new MultiCasDataStoreFactory(new H2SffCasDataStoreFactory(casWorkingDirectory, tempDir, EmptyDataStoreFilter.INSTANCE), new H2FastQCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, qualityCodec, tempDir.getRootDir()), new FastaCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, cacheSize)) [FD]
Line_66 $$ tempDir = DirectoryFileServer.createTemporaryDirectoryFileServer(t) --> Line_86 $$ CasDataStoreFactory casDataStoreFactory = new MultiCasDataStoreFactory(new H2SffCasDataStoreFactory(casWorkingDirectory, tempDir, EmptyDataStoreFilter.INSTANCE), new H2FastQCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, qualityCodec, tempDir.getRootDir()), new FastaCasDataStoreFactory(casWorkingDirectory, trimToUntrimmedMap, cacheSize)) [FD]
Line_88 $$ CasAssembly casAssembly = new DefaultCasAssembly.Builder(casFile, casDataStoreFactory, trimDatastore, trimToUntrimmedMap, casWorkingDirectory).build() --> Line_90 $$ for (File traceFile : casAssembly.getNuceotideFiles()) [FD]
Line_56 $$ PrintWriter traceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".traceFiles.txt")), true) --> Line_91 $$ traceFilesOut.println(traceFile.getAbsolutePath()) [FD]
Line_90 $$ for (File traceFile : casAssembly.getNuceotideFiles()) --> Line_91 $$ traceFilesOut.println(traceFile.getAbsolutePath()) [FD]
Line_90 $$ for (File traceFile : casAssembly.getNuceotideFiles()) --> Line_92 $$ final String name = traceFile.getName() [FD]
Line_74 $$ String name = f.getName() --> Line_93 $$ String extension = FilenameUtils.getExtension(name) [FD]
Line_74 $$ String name = f.getName() --> Line_94 $$ if (name.contains("fastq")) [FD]
Line_94 $$ if (name.contains("fastq")) --> Line_95 $$ if (!outputDir.contains("solexa_dir")) [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_95 $$ if (!outputDir.contains("solexa_dir")) [FD]
Line_95 $$ if (!outputDir.contains("solexa_dir")) --> Line_96 $$ outputDir.createNewDir("solexa_dir") [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_96 $$ outputDir.createNewDir("solexa_dir") [FD]
Line_94 $$ if (name.contains("fastq")) --> Line_98 $$ if (outputDir.contains("solexa_dir/" + name)) [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_98 $$ if (outputDir.contains("solexa_dir/" + name)) [FD]
Line_98 $$ if (outputDir.contains("solexa_dir/" + name)) --> Line_99 $$ IOUtil.delete(outputDir.getFile("solexa_dir/" + name)) [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_99 $$ IOUtil.delete(outputDir.getFile("solexa_dir/" + name)) [FD]
Line_94 $$ if (name.contains("fastq")) --> Line_101 $$ outputDir.createNewSymLink(traceFile.getAbsolutePath(), "solexa_dir/" + name) [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_101 $$ outputDir.createNewSymLink(traceFile.getAbsolutePath(), "solexa_dir/" + name) [FD]
Line_90 $$ for (File traceFile : casAssembly.getNuceotideFiles()) --> Line_101 $$ outputDir.createNewSymLink(traceFile.getAbsolutePath(), "solexa_dir/" + name) [FD]
Line_94 $$ if (name.contains("fastq")) --> Line_102 $$ if ("sff".equals(extension)) [CD]
Line_93 $$ String extension = FilenameUtils.getExtension(name) --> Line_102 $$ if ("sff".equals(extension)) [FD]
Line_102 $$ if ("sff".equals(extension)) --> Line_103 $$ if (!outputDir.contains("sff_dir")) [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_103 $$ if (!outputDir.contains("sff_dir")) [FD]
Line_103 $$ if (!outputDir.contains("sff_dir")) --> Line_104 $$ outputDir.createNewDir("sff_dir") [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_104 $$ outputDir.createNewDir("sff_dir") [FD]
Line_102 $$ if ("sff".equals(extension)) --> Line_106 $$ if (outputDir.contains("sff_dir/" + name)) [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_106 $$ if (outputDir.contains("sff_dir/" + name)) [FD]
Line_106 $$ if (outputDir.contains("sff_dir/" + name)) --> Line_107 $$ IOUtil.delete(outputDir.getFile("sff_dir/" + name)) [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_107 $$ IOUtil.delete(outputDir.getFile("sff_dir/" + name)) [FD]
Line_102 $$ if ("sff".equals(extension)) --> Line_109 $$ outputDir.createNewSymLink(traceFile.getAbsolutePath(), "sff_dir/" + name) [CD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_109 $$ outputDir.createNewSymLink(traceFile.getAbsolutePath(), "sff_dir/" + name) [FD]
Line_90 $$ for (File traceFile : casAssembly.getNuceotideFiles()) --> Line_109 $$ outputDir.createNewSymLink(traceFile.getAbsolutePath(), "sff_dir/" + name) [FD]
Line_88 $$ CasAssembly casAssembly = new DefaultCasAssembly.Builder(casFile, casDataStoreFactory, trimDatastore, trimToUntrimmedMap, casWorkingDirectory).build() --> Line_112 $$ for (File traceFile : casAssembly.getReferenceFiles()) [FD]
Line_57 $$ PrintWriter referenceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".referenceFiles.txt")), true) --> Line_113 $$ referenceFilesOut.println(traceFile.getAbsolutePath()) [FD]
Line_90 $$ for (File traceFile : casAssembly.getNuceotideFiles()) --> Line_113 $$ referenceFilesOut.println(traceFile.getAbsolutePath()) [FD]
Line_88 $$ CasAssembly casAssembly = new DefaultCasAssembly.Builder(casFile, casDataStoreFactory, trimDatastore, trimToUntrimmedMap, casWorkingDirectory).build() --> Line_115 $$ DataStore<CasContig> contigDatastore = casAssembly.getContigDataStore() [FD]
Line_88 $$ CasAssembly casAssembly = new DefaultCasAssembly.Builder(casFile, casDataStoreFactory, trimDatastore, trimToUntrimmedMap, casWorkingDirectory).build() --> Line_117 $$ CasIdLookup readIdLookup = sangerFileMap == null ? casAssembly.getReadIdLookup() : new DifferentFileCasIdLookupAdapter(casAssembly.getReadIdLookup(), sangerFileMap) [FD]
Line_120 $$ if (useClosureTrimming) --> Line_121 $$ closureContigTrimmer = new NextGenClosureAceContigTrimmer(2, 5, 10) [CD]
Line_119 $$ NextGenClosureAceContigTrimmer closureContigTrimmer = null --> Line_121 $$ closureContigTrimmer = new NextGenClosureAceContigTrimmer(2, 5, 10) [FD]
Line_124 $$ final AceContigAdapter adpatedCasContig = new AceContigAdapter(casContig, phdDate, readIdLookup) --> Line_125 $$ CoverageMap<CoverageRegion<AcePlacedRead>> coverageMap = DefaultCoverageMap.buildCoverageMap(adpatedCasContig) [FD]
Line_124 $$ final AceContigAdapter adpatedCasContig = new AceContigAdapter(casContig, phdDate, readIdLookup) --> Line_126 $$ for (AceContig aceContig : ConsedUtil.split0xContig(adpatedCasContig, coverageMap)) [FD]
Line_125 $$ CoverageMap<CoverageRegion<AcePlacedRead>> coverageMap = DefaultCoverageMap.buildCoverageMap(adpatedCasContig) --> Line_126 $$ for (AceContig aceContig : ConsedUtil.split0xContig(adpatedCasContig, coverageMap)) [FD]
Line_127 $$ if (useClosureTrimming) --> Line_128 $$ AceContig trimmedAceContig = closureContigTrimmer.trimContig(aceContig) [CD]
Line_119 $$ NextGenClosureAceContigTrimmer closureContigTrimmer = null --> Line_128 $$ AceContig trimmedAceContig = closureContigTrimmer.trimContig(aceContig) [FD]
Line_121 $$ closureContigTrimmer = new NextGenClosureAceContigTrimmer(2, 5, 10) --> Line_128 $$ AceContig trimmedAceContig = closureContigTrimmer.trimContig(aceContig) [FD]
Line_126 $$ for (AceContig aceContig : ConsedUtil.split0xContig(adpatedCasContig, coverageMap)) --> Line_128 $$ AceContig trimmedAceContig = closureContigTrimmer.trimContig(aceContig) [FD]
Line_127 $$ if (useClosureTrimming) --> Line_129 $$ if (trimmedAceContig == null) [CD]
Line_128 $$ AceContig trimmedAceContig = closureContigTrimmer.trimContig(aceContig) --> Line_129 $$ if (trimmedAceContig == null) [FD]
Line_129 $$ if (trimmedAceContig == null) --> Line_130 $$ System.out.printf("%s was completely trimmed... skipping%n", aceContig.getId()) [CD]
Line_126 $$ for (AceContig aceContig : ConsedUtil.split0xContig(adpatedCasContig, coverageMap)) --> Line_130 $$ System.out.printf("%s was completely trimmed... skipping%n", aceContig.getId()) [FD]
Line_127 $$ if (useClosureTrimming) --> Line_133 $$ aceContig = trimmedAceContig [CD]
Line_126 $$ for (AceContig aceContig : ConsedUtil.split0xContig(adpatedCasContig, coverageMap)) --> Line_133 $$ aceContig = trimmedAceContig [FD]
Line_128 $$ AceContig trimmedAceContig = closureContigTrimmer.trimContig(aceContig) --> Line_133 $$ aceContig = trimmedAceContig [FD]
Line_116 $$ Map<String, AceContig> aceContigs = new HashMap<String, AceContig>() --> Line_135 $$ aceContigs.put(aceContig.getId(), aceContig) [FD]
Line_126 $$ for (AceContig aceContig : ConsedUtil.split0xContig(adpatedCasContig, coverageMap)) --> Line_135 $$ aceContigs.put(aceContig.getId(), aceContig) [FD]
Line_133 $$ aceContig = trimmedAceContig --> Line_135 $$ aceContigs.put(aceContig.getId(), aceContig) [FD]
Line_55 $$ PrintWriter consensusOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".consensus.fasta")), true) --> Line_136 $$ consensusOut.print(new DefaultNucleotideEncodedSequenceFastaRecord(aceContig.getId(), NucleotideGlyph.convertToString(NucleotideGlyph.convertToUngapped(aceContig.getConsensus().decode())))) [FD]
Line_126 $$ for (AceContig aceContig : ConsedUtil.split0xContig(adpatedCasContig, coverageMap)) --> Line_136 $$ consensusOut.print(new DefaultNucleotideEncodedSequenceFastaRecord(aceContig.getId(), NucleotideGlyph.convertToString(NucleotideGlyph.convertToUngapped(aceContig.getConsensus().decode())))) [FD]
Line_133 $$ aceContig = trimmedAceContig --> Line_136 $$ consensusOut.print(new DefaultNucleotideEncodedSequenceFastaRecord(aceContig.getId(), NucleotideGlyph.convertToString(NucleotideGlyph.convertToUngapped(aceContig.getConsensus().decode())))) [FD]
Line_115 $$ DataStore<CasContig> contigDatastore = casAssembly.getContigDataStore() --> Line_139 $$ System.out.printf("finished adapting %d casAssemblies into %d ace contigs%n", contigDatastore.size(), aceContigs.size()) [FD]
Line_116 $$ Map<String, AceContig> aceContigs = new HashMap<String, AceContig>() --> Line_139 $$ System.out.printf("finished adapting %d casAssemblies into %d ace contigs%n", contigDatastore.size(), aceContigs.size()) [FD]
Line_88 $$ CasAssembly casAssembly = new DefaultCasAssembly.Builder(casFile, casDataStoreFactory, trimDatastore, trimToUntrimmedMap, casWorkingDirectory).build() --> Line_140 $$ QualityDataStore qualityDataStore = sangerTraceDataStore == null ? casAssembly.getQualityDataStore() : MultipleDataStoreWrapper.createMultipleDataStoreWrapper(QualityDataStore.class, TraceQualityDataStoreAdapter.adapt(sangerTraceDataStore), casAssembly.getQualityDataStore()) [FD]
Line_41 $$ TraceDataStore<FileSangerTrace> sangerTraceDataStore = null --> Line_140 $$ QualityDataStore qualityDataStore = sangerTraceDataStore == null ? casAssembly.getQualityDataStore() : MultipleDataStoreWrapper.createMultipleDataStoreWrapper(QualityDataStore.class, TraceQualityDataStoreAdapter.adapt(sangerTraceDataStore), casAssembly.getQualityDataStore()) [FD]
Line_46 $$ sangerTraceDataStore = new SingleSangerTraceDirectoryFileDataStore(sourceChromatogramFileServer, ".scf") --> Line_140 $$ QualityDataStore qualityDataStore = sangerTraceDataStore == null ? casAssembly.getQualityDataStore() : MultipleDataStoreWrapper.createMultipleDataStoreWrapper(QualityDataStore.class, TraceQualityDataStoreAdapter.adapt(sangerTraceDataStore), casAssembly.getQualityDataStore()) [FD]
Line_17 $$ int cacheSize = commandLine.hasOption("s") ? Integer.parseInt(commandLine.getOptionValue("s")) : DEFAULT_CACHE_SIZE --> Line_142 $$ final PhdDataStore casPhdDataStore = CachedDataStore.createCachedDataStore(PhdDataStore.class, new ArtificalPhdDataStore(casAssembly.getNucleotideDataStore(), qualityDataStore, phdDateTime), cacheSize) [FD]
Line_88 $$ CasAssembly casAssembly = new DefaultCasAssembly.Builder(casFile, casDataStoreFactory, trimDatastore, trimToUntrimmedMap, casWorkingDirectory).build() --> Line_142 $$ final PhdDataStore casPhdDataStore = CachedDataStore.createCachedDataStore(PhdDataStore.class, new ArtificalPhdDataStore(casAssembly.getNucleotideDataStore(), qualityDataStore, phdDateTime), cacheSize) [FD]
Line_144 $$ WholeAssemblyAceTag pathToPhd = new DefaultWholeAssemblyAceTag("phdball", "cas2consed", new Date(DateTimeUtils.currentTimeMillis()), "../phd_dir/" + prefix + ".phd.ball") --> Line_145 $$ AceAssembly aceAssembly = new DefaultAceAssembly<AceContig>(new SimpleDataStore<AceContig>(aceContigs), phdDataStore, Collections.<File>emptyList(), new DefaultAceTagMap(Collections.<ConsensusAceTag>emptyList(), Collections.<ReadAceTag>emptyList(), Arrays.asList(pathToPhd))) [FD]
Line_145 $$ AceAssembly aceAssembly = new DefaultAceAssembly<AceContig>(new SimpleDataStore<AceContig>(aceContigs), phdDataStore, Collections.<File>emptyList(), new DefaultAceTagMap(Collections.<ConsensusAceTag>emptyList(), Collections.<ReadAceTag>emptyList(), Arrays.asList(pathToPhd))) --> Line_147 $$ ConsedWriter.writeConsedPackage(aceAssembly, sliceMapFactory, outputDir.getRootDir(), prefix, false) [FD]
Line_87 $$ final SliceMapFactory sliceMapFactory = new LargeNoQualitySliceMapFactory() --> Line_147 $$ ConsedWriter.writeConsedPackage(aceAssembly, sliceMapFactory, outputDir.getRootDir(), prefix, false) [FD]
Line_21 $$ String prefix = commandLine.hasOption("prefix") ? commandLine.getOptionValue("prefix") : DEFAULT_PREFIX --> Line_147 $$ ConsedWriter.writeConsedPackage(aceAssembly, sliceMapFactory, outputDir.getRootDir(), prefix, false) [FD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_147 $$ ConsedWriter.writeConsedPackage(aceAssembly, sliceMapFactory, outputDir.getRootDir(), prefix, false) [FD]
Line_64 $$ File t = new File(commandLine.getOptionValue("tempDir")) --> Line_149 $$ t.printStackTrace(logOut) [FD]
Line_54 $$ PrintWriter logOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".log")), true) --> Line_149 $$ t.printStackTrace(logOut) [FD]
Line_54 $$ PrintWriter logOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".log")), true) --> Line_153 $$ logOut.printf("took %s%n", new Period(endTime - startTime)) [FD]
Line_54 $$ PrintWriter logOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".log")), true) --> Line_154 $$ logOut.flush() [FD]
Line_54 $$ PrintWriter logOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".log")), true) --> Line_155 $$ logOut.close() [FD]
Line_20 $$ ReadWriteDirectoryFileServer outputDir = DirectoryFileServer.createReadWriteDirectoryFileServer(commandLine.getOptionValue("o")) --> Line_156 $$ outputDir.close() [FD]
Line_55 $$ PrintWriter consensusOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".consensus.fasta")), true) --> Line_157 $$ consensusOut.close() [FD]
Line_56 $$ PrintWriter traceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".traceFiles.txt")), true) --> Line_158 $$ traceFilesOut.close() [FD]
Line_57 $$ PrintWriter referenceFilesOut = new PrintWriter(new FileOutputStream(outputDir.createNewFile(prefix + ".referenceFiles.txt")), true) --> Line_159 $$ referenceFilesOut.close() [FD]
Line_22 $$ TrimDataStore trimDatastore --> Line_160 $$ trimDatastore.close() [FD]
Line_32 $$ trimDatastore = TrimDataStoreUtil.EMPTY_DATASTORE --> Line_160 $$ trimDatastore.close() [FD]
Line_3 $$ Options options = new Options() --> Line_163 $$ printHelp(options) [FD]
