Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_4 $$ writer.emptyClass(ClassWriter.ACC_PUBLIC, "TestClass", "java/lang/Object") [FD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_5 $$ MethodInfo newMethod = writer.addMethod(ClassWriter.ACC_PUBLIC | ClassWriter.ACC_STATIC, "main", "([Ljava/lang/String;)V") [FD]
Line_5 $$ MethodInfo newMethod = writer.addMethod(ClassWriter.ACC_PUBLIC | ClassWriter.ACC_STATIC, "main", "([Ljava/lang/String;)V") --> Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute() [FD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_7 $$ int constantIndex = writer.getStringConstantIndex("It's alive! It's alive!!") [FD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_8 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;") [FD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_9 $$ int methodRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V") [FD]
Line_11 $$ byte[] operands --> Line_12 $$ operands = new byte[2] [FD]
Line_8 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;") --> Line_13 $$ NetByte.intToPair(fieldRefIndex, operands, 0) [FD]
Line_11 $$ byte[] operands --> Line_13 $$ NetByte.intToPair(fieldRefIndex, operands, 0) [FD]
Line_12 $$ operands = new byte[2] --> Line_13 $$ NetByte.intToPair(fieldRefIndex, operands, 0) [FD]
Line_10 $$ ArrayList instructions = new ArrayList() --> Line_14 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("getstatic"), 0, operands, false)) [FD]
Line_11 $$ byte[] operands --> Line_15 $$ operands = new byte[1] [FD]
Line_12 $$ operands = new byte[2] --> Line_15 $$ operands = new byte[1] [FD]
Line_10 $$ ArrayList instructions = new ArrayList() --> Line_17 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("ldc"), 0, operands, false)) [FD]
Line_11 $$ byte[] operands --> Line_18 $$ operands = new byte[2] [FD]
Line_12 $$ operands = new byte[2] --> Line_18 $$ operands = new byte[2] [FD]
Line_15 $$ operands = new byte[1] --> Line_18 $$ operands = new byte[2] [FD]
Line_9 $$ int methodRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V") --> Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0) [FD]
Line_11 $$ byte[] operands --> Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0) [FD]
Line_12 $$ operands = new byte[2] --> Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0) [FD]
Line_15 $$ operands = new byte[1] --> Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0) [FD]
Line_18 $$ operands = new byte[2] --> Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0) [FD]
Line_10 $$ ArrayList instructions = new ArrayList() --> Line_20 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false)) [FD]
Line_10 $$ ArrayList instructions = new ArrayList() --> Line_21 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("return"), 0, null, false)) [FD]
Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute() --> Line_22 $$ attribute.insertInstructions(0, 0, instructions) [FD]
Line_10 $$ ArrayList instructions = new ArrayList() --> Line_22 $$ attribute.insertInstructions(0, 0, instructions) [FD]
Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute() --> Line_23 $$ attribute.setMaxLocals(1) [FD]
Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute() --> Line_24 $$ attribute.codeCheck() [FD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_26 $$ writer.writeClass(new FileOutputStream("c:/cygnus/home/javaodb/classes/TestClass.class")) [FD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_27 $$ writer.readClass(new FileInputStream("c:/cygnus/home/javaodb/classes/TestClass.class")) [FD]
