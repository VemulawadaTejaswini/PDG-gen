Line_2 $$ private static void readData() --> Line_3 $$ StringTokenizer sTok [CD]
Line_2 $$ private static void readData() --> Line_5 $$ sTok = new StringTokenizer(tops, ",") [CD]
Line_3 $$ StringTokenizer sTok --> Line_5 $$ sTok = new StringTokenizer(tops, ",") [FD]
Line_2 $$ private static void readData() --> Line_6 $$ while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken()) [CD]
Line_3 $$ StringTokenizer sTok --> Line_6 $$ while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_6 $$ while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken()) [FD]
Line_2 $$ private static void readData() --> Line_8 $$ sTok = new StringTokenizer(lefts, ",") [CD]
Line_3 $$ StringTokenizer sTok --> Line_8 $$ sTok = new StringTokenizer(lefts, ",") [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_8 $$ sTok = new StringTokenizer(lefts, ",") [FD]
Line_2 $$ private static void readData() --> Line_9 $$ while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken()) [CD]
Line_3 $$ StringTokenizer sTok --> Line_9 $$ while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_9 $$ while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_9 $$ while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken()) [FD]
Line_2 $$ private static void readData() --> Line_11 $$ sTok = new StringTokenizer(rights, ",") [CD]
Line_3 $$ StringTokenizer sTok --> Line_11 $$ sTok = new StringTokenizer(rights, ",") [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_11 $$ sTok = new StringTokenizer(rights, ",") [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_11 $$ sTok = new StringTokenizer(rights, ",") [FD]
Line_2 $$ private static void readData() --> Line_12 $$ while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken()) [CD]
Line_3 $$ StringTokenizer sTok --> Line_12 $$ while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_12 $$ while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_12 $$ while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_12 $$ while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken()) [FD]
Line_2 $$ private static void readData() --> Line_14 $$ sTok = new StringTokenizer(farrights, ",") [CD]
Line_3 $$ StringTokenizer sTok --> Line_14 $$ sTok = new StringTokenizer(farrights, ",") [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_14 $$ sTok = new StringTokenizer(farrights, ",") [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_14 $$ sTok = new StringTokenizer(farrights, ",") [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_14 $$ sTok = new StringTokenizer(farrights, ",") [FD]
Line_2 $$ private static void readData() --> Line_15 $$ while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken()) [CD]
Line_3 $$ StringTokenizer sTok --> Line_15 $$ while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_15 $$ while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_15 $$ while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_15 $$ while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_15 $$ while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken()) [FD]
Line_2 $$ private static void readData() --> Line_17 $$ sTok = new StringTokenizer(vowels, ",") [CD]
Line_3 $$ StringTokenizer sTok --> Line_17 $$ sTok = new StringTokenizer(vowels, ",") [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_17 $$ sTok = new StringTokenizer(vowels, ",") [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_17 $$ sTok = new StringTokenizer(vowels, ",") [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_17 $$ sTok = new StringTokenizer(vowels, ",") [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_17 $$ sTok = new StringTokenizer(vowels, ",") [FD]
Line_2 $$ private static void readData() --> Line_18 $$ while (sTok.hasMoreTokens()) [CD]
Line_3 $$ StringTokenizer sTok --> Line_18 $$ while (sTok.hasMoreTokens()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_18 $$ while (sTok.hasMoreTokens()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_18 $$ while (sTok.hasMoreTokens()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_18 $$ while (sTok.hasMoreTokens()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_18 $$ while (sTok.hasMoreTokens()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_18 $$ while (sTok.hasMoreTokens()) [FD]
Line_18 $$ while (sTok.hasMoreTokens()) --> Line_19 $$ String ntk [CD]
Line_18 $$ while (sTok.hasMoreTokens()) --> Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) [CD]
Line_19 $$ String ntk --> Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) [FD]
Line_3 $$ StringTokenizer sTok --> Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) [FD]
Line_18 $$ while (sTok.hasMoreTokens()) --> Line_21 $$ if (maxEwtsVowelLength < ntk.length()) [CD]
Line_19 $$ String ntk --> Line_21 $$ if (maxEwtsVowelLength < ntk.length()) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_21 $$ if (maxEwtsVowelLength < ntk.length()) [FD]
Line_18 $$ while (sTok.hasMoreTokens()) --> Line_22 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [CD]
Line_19 $$ String ntk --> Line_22 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_22 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_2 $$ private static void readData() --> Line_25 $$ sTok = new StringTokenizer(others, ",") [CD]
Line_3 $$ StringTokenizer sTok --> Line_25 $$ sTok = new StringTokenizer(others, ",") [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_25 $$ sTok = new StringTokenizer(others, ",") [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_25 $$ sTok = new StringTokenizer(others, ",") [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_25 $$ sTok = new StringTokenizer(others, ",") [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_25 $$ sTok = new StringTokenizer(others, ",") [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_25 $$ sTok = new StringTokenizer(others, ",") [FD]
Line_2 $$ private static void readData() --> Line_26 $$ while (sTok.hasMoreTokens()) [CD]
Line_3 $$ StringTokenizer sTok --> Line_26 $$ while (sTok.hasMoreTokens()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_26 $$ while (sTok.hasMoreTokens()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_26 $$ while (sTok.hasMoreTokens()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_26 $$ while (sTok.hasMoreTokens()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_26 $$ while (sTok.hasMoreTokens()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_26 $$ while (sTok.hasMoreTokens()) [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_26 $$ while (sTok.hasMoreTokens()) [FD]
Line_26 $$ while (sTok.hasMoreTokens()) --> Line_27 $$ String ntk [CD]
Line_26 $$ while (sTok.hasMoreTokens()) --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [CD]
Line_27 $$ String ntk --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_19 $$ String ntk --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_3 $$ StringTokenizer sTok --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_28 $$ puncSet.add(ntk = sTok.nextToken()) [FD]
Line_26 $$ while (sTok.hasMoreTokens()) --> Line_29 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [CD]
Line_27 $$ String ntk --> Line_29 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_29 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_19 $$ String ntk --> Line_29 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_29 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_2 $$ private static void readData() --> Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") [CD]
Line_3 $$ StringTokenizer sTok --> Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") [FD]
Line_2 $$ private static void readData() --> Line_34 $$ while (sTok.hasMoreTokens()) [CD]
Line_3 $$ StringTokenizer sTok --> Line_34 $$ while (sTok.hasMoreTokens()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_34 $$ while (sTok.hasMoreTokens()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_34 $$ while (sTok.hasMoreTokens()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_34 $$ while (sTok.hasMoreTokens()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_34 $$ while (sTok.hasMoreTokens()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_34 $$ while (sTok.hasMoreTokens()) [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_34 $$ while (sTok.hasMoreTokens()) [FD]
Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") --> Line_34 $$ while (sTok.hasMoreTokens()) [FD]
Line_34 $$ while (sTok.hasMoreTokens()) --> Line_35 $$ String ntk [CD]
Line_34 $$ while (sTok.hasMoreTokens()) --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [CD]
Line_35 $$ String ntk --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_27 $$ String ntk --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_19 $$ String ntk --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_3 $$ StringTokenizer sTok --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") --> Line_36 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_34 $$ while (sTok.hasMoreTokens()) --> Line_37 $$ tibSet.add(ntk) [CD]
Line_35 $$ String ntk --> Line_37 $$ tibSet.add(ntk) [FD]
Line_36 $$ charSet.add(ntk = sTok.nextToken()) --> Line_37 $$ tibSet.add(ntk) [FD]
Line_27 $$ String ntk --> Line_37 $$ tibSet.add(ntk) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_37 $$ tibSet.add(ntk) [FD]
Line_19 $$ String ntk --> Line_37 $$ tibSet.add(ntk) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_37 $$ tibSet.add(ntk) [FD]
Line_34 $$ while (sTok.hasMoreTokens()) --> Line_38 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [CD]
Line_35 $$ String ntk --> Line_38 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_36 $$ charSet.add(ntk = sTok.nextToken()) --> Line_38 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_27 $$ String ntk --> Line_38 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_38 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_19 $$ String ntk --> Line_38 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_38 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_2 $$ private static void readData() --> Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") [CD]
Line_3 $$ StringTokenizer sTok --> Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") [FD]
Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") --> Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") [FD]
Line_2 $$ private static void readData() --> Line_42 $$ while (sTok.hasMoreTokens()) [CD]
Line_3 $$ StringTokenizer sTok --> Line_42 $$ while (sTok.hasMoreTokens()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_42 $$ while (sTok.hasMoreTokens()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_42 $$ while (sTok.hasMoreTokens()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_42 $$ while (sTok.hasMoreTokens()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_42 $$ while (sTok.hasMoreTokens()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_42 $$ while (sTok.hasMoreTokens()) [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_42 $$ while (sTok.hasMoreTokens()) [FD]
Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") --> Line_42 $$ while (sTok.hasMoreTokens()) [FD]
Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") --> Line_42 $$ while (sTok.hasMoreTokens()) [FD]
Line_42 $$ while (sTok.hasMoreTokens()) --> Line_43 $$ String ntk [CD]
Line_42 $$ while (sTok.hasMoreTokens()) --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [CD]
Line_43 $$ String ntk --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_35 $$ String ntk --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_36 $$ charSet.add(ntk = sTok.nextToken()) --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_27 $$ String ntk --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_19 $$ String ntk --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_3 $$ StringTokenizer sTok --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") --> Line_44 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_42 $$ while (sTok.hasMoreTokens()) --> Line_45 $$ sanskritStackSet.add(ntk) [CD]
Line_43 $$ String ntk --> Line_45 $$ sanskritStackSet.add(ntk) [FD]
Line_44 $$ charSet.add(ntk = sTok.nextToken()) --> Line_45 $$ sanskritStackSet.add(ntk) [FD]
Line_35 $$ String ntk --> Line_45 $$ sanskritStackSet.add(ntk) [FD]
Line_36 $$ charSet.add(ntk = sTok.nextToken()) --> Line_45 $$ sanskritStackSet.add(ntk) [FD]
Line_27 $$ String ntk --> Line_45 $$ sanskritStackSet.add(ntk) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_45 $$ sanskritStackSet.add(ntk) [FD]
Line_19 $$ String ntk --> Line_45 $$ sanskritStackSet.add(ntk) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_45 $$ sanskritStackSet.add(ntk) [FD]
Line_42 $$ while (sTok.hasMoreTokens()) --> Line_46 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [CD]
Line_43 $$ String ntk --> Line_46 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_44 $$ charSet.add(ntk = sTok.nextToken()) --> Line_46 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_35 $$ String ntk --> Line_46 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_36 $$ charSet.add(ntk = sTok.nextToken()) --> Line_46 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_27 $$ String ntk --> Line_46 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_46 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_19 $$ String ntk --> Line_46 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_46 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_2 $$ private static void readData() --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [CD]
Line_3 $$ StringTokenizer sTok --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [FD]
Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [FD]
Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") --> Line_49 $$ sTok = new StringTokenizer(numbers, ",") [FD]
Line_2 $$ private static void readData() --> Line_50 $$ while (sTok.hasMoreTokens()) [CD]
Line_3 $$ StringTokenizer sTok --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_49 $$ sTok = new StringTokenizer(numbers, ",") --> Line_50 $$ while (sTok.hasMoreTokens()) [FD]
Line_50 $$ while (sTok.hasMoreTokens()) --> Line_51 $$ String ntk [CD]
Line_50 $$ while (sTok.hasMoreTokens()) --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [CD]
Line_51 $$ String ntk --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_43 $$ String ntk --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_44 $$ charSet.add(ntk = sTok.nextToken()) --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_35 $$ String ntk --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_36 $$ charSet.add(ntk = sTok.nextToken()) --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_27 $$ String ntk --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_19 $$ String ntk --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_3 $$ StringTokenizer sTok --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_49 $$ sTok = new StringTokenizer(numbers, ",") --> Line_52 $$ charSet.add(ntk = sTok.nextToken()) [FD]
Line_50 $$ while (sTok.hasMoreTokens()) --> Line_53 $$ numberSet.add(ntk) [CD]
Line_51 $$ String ntk --> Line_53 $$ numberSet.add(ntk) [FD]
Line_52 $$ charSet.add(ntk = sTok.nextToken()) --> Line_53 $$ numberSet.add(ntk) [FD]
Line_43 $$ String ntk --> Line_53 $$ numberSet.add(ntk) [FD]
Line_44 $$ charSet.add(ntk = sTok.nextToken()) --> Line_53 $$ numberSet.add(ntk) [FD]
Line_35 $$ String ntk --> Line_53 $$ numberSet.add(ntk) [FD]
Line_36 $$ charSet.add(ntk = sTok.nextToken()) --> Line_53 $$ numberSet.add(ntk) [FD]
Line_27 $$ String ntk --> Line_53 $$ numberSet.add(ntk) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_53 $$ numberSet.add(ntk) [FD]
Line_19 $$ String ntk --> Line_53 $$ numberSet.add(ntk) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_53 $$ numberSet.add(ntk) [FD]
Line_50 $$ while (sTok.hasMoreTokens()) --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [CD]
Line_51 $$ String ntk --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_52 $$ charSet.add(ntk = sTok.nextToken()) --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_43 $$ String ntk --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_44 $$ charSet.add(ntk = sTok.nextToken()) --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_35 $$ String ntk --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_36 $$ charSet.add(ntk = sTok.nextToken()) --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_27 $$ String ntk --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_28 $$ puncSet.add(ntk = sTok.nextToken()) --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_19 $$ String ntk --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_20 $$ vowelSet.add(ntk = sTok.nextToken()) --> Line_54 $$ validInputSequences.put(ntk, anyOldObjectWillDo) [FD]
Line_2 $$ private static void readData() --> Line_56 $$ charSet.add("Y") [CD]
Line_2 $$ private static void readData() --> Line_57 $$ charSet.add("R") [CD]
Line_2 $$ private static void readData() --> Line_58 $$ charSet.add("W") [CD]
Line_2 $$ private static void readData() --> Line_59 $$ validInputSequences.put("Y", anyOldObjectWillDo) [CD]
Line_2 $$ private static void readData() --> Line_60 $$ validInputSequences.put("R", anyOldObjectWillDo) [CD]
Line_2 $$ private static void readData() --> Line_61 $$ validInputSequences.put("W", anyOldObjectWillDo) [CD]
Line_2 $$ private static void readData() --> Line_62 $$ sTok = null [CD]
Line_3 $$ StringTokenizer sTok --> Line_62 $$ sTok = null [FD]
Line_5 $$ sTok = new StringTokenizer(tops, ",") --> Line_62 $$ sTok = null [FD]
Line_8 $$ sTok = new StringTokenizer(lefts, ",") --> Line_62 $$ sTok = null [FD]
Line_11 $$ sTok = new StringTokenizer(rights, ",") --> Line_62 $$ sTok = null [FD]
Line_14 $$ sTok = new StringTokenizer(farrights, ",") --> Line_62 $$ sTok = null [FD]
Line_17 $$ sTok = new StringTokenizer(vowels, ",") --> Line_62 $$ sTok = null [FD]
Line_25 $$ sTok = new StringTokenizer(others, ",") --> Line_62 $$ sTok = null [FD]
Line_33 $$ sTok = new StringTokenizer(tibetanConsonants, ",") --> Line_62 $$ sTok = null [FD]
Line_41 $$ sTok = new StringTokenizer(otherConsonants, ",") --> Line_62 $$ sTok = null [FD]
Line_49 $$ sTok = new StringTokenizer(numbers, ",") --> Line_62 $$ sTok = null [FD]
Line_2 $$ private static void readData() --> Line_64 $$ top_vowels.add(i_VOWEL) [CD]
Line_2 $$ private static void readData() --> Line_65 $$ top_vowels.add(e_VOWEL) [CD]
Line_2 $$ private static void readData() --> Line_66 $$ top_vowels.add(o_VOWEL) [CD]
Line_2 $$ private static void readData() --> Line_67 $$ top_vowels.add(ai_VOWEL) [CD]
Line_2 $$ private static void readData() --> Line_68 $$ top_vowels.add(au_VOWEL) [CD]
Line_2 $$ private static void readData() --> Line_69 $$ top_vowels.add(reverse_i_VOWEL) [CD]
Line_72 $$ if (url == null) --> Line_73 $$ System.err.println("Cannot find " + fileName + "; aborting.") [CD]
Line_72 $$ if (url == null) --> Line_74 $$ System.exit(1) [CD]
Line_79 $$ String line --> Line_84 $$ while ((line = in.readLine()) != null) [FD]
Line_77 $$ BufferedReader in = new BufferedReader(isr) --> Line_84 $$ while ((line = in.readLine()) != null) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_85 $$ if (line.startsWith("<?")) [CD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_85 $$ if (line.startsWith("<?")) [FD]
Line_79 $$ String line --> Line_85 $$ if (line.startsWith("<?")) [FD]
Line_85 $$ if (line.startsWith("<?")) --> Line_86 $$ if (line.equalsIgnoreCase("<?Consonants?>")) [CD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_86 $$ if (line.equalsIgnoreCase("<?Consonants?>")) [FD]
Line_79 $$ String line --> Line_86 $$ if (line.equalsIgnoreCase("<?Consonants?>")) [FD]
Line_86 $$ if (line.equalsIgnoreCase("<?Consonants?>")) --> Line_87 $$ isSanskrit = false [CD]
Line_82 $$ boolean isSanskrit = false --> Line_87 $$ isSanskrit = false [FD]
Line_86 $$ if (line.equalsIgnoreCase("<?Consonants?>")) --> Line_88 $$ isTibetan = true [CD]
Line_81 $$ boolean isTibetan = false --> Line_88 $$ isTibetan = true [FD]
Line_86 $$ if (line.equalsIgnoreCase("<?Consonants?>")) --> Line_89 $$ hashOn = false [CD]
Line_80 $$ boolean hashOn = false --> Line_89 $$ hashOn = false [FD]
Line_86 $$ if (line.equalsIgnoreCase("<?Consonants?>")) --> Line_90 $$ ignore = false [CD]
Line_83 $$ boolean ignore = false --> Line_90 $$ ignore = false [FD]
Line_86 $$ if (line.equalsIgnoreCase("<?Consonants?>")) --> Line_91 $$ do [CD]
Line_91 $$ do --> Line_92 $$ line = in.readLine() [CD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_92 $$ line = in.readLine() [FD]
Line_79 $$ String line --> Line_92 $$ line = in.readLine() [FD]
Line_77 $$ BufferedReader in = new BufferedReader(isr) --> Line_92 $$ line = in.readLine() [FD]
Line_92 $$ line = in.readLine() --> Line_91 $$ do [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_91 $$ do [FD]
Line_79 $$ String line --> Line_91 $$ do [FD]
Line_86 $$ if (line.equalsIgnoreCase("<?Consonants?>")) --> Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) [CD]
Line_92 $$ line = in.readLine() --> Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) [FD]
Line_79 $$ String line --> Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) [FD]
Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) --> Line_95 $$ isSanskrit = false [CD]
Line_87 $$ isSanskrit = false --> Line_95 $$ isSanskrit = false [FD]
Line_82 $$ boolean isSanskrit = false --> Line_95 $$ isSanskrit = false [FD]
Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) --> Line_96 $$ isTibetan = false [CD]
Line_88 $$ isTibetan = true --> Line_96 $$ isTibetan = false [FD]
Line_81 $$ boolean isTibetan = false --> Line_96 $$ isTibetan = false [FD]
Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) --> Line_97 $$ hashOn = false [CD]
Line_89 $$ hashOn = false --> Line_97 $$ hashOn = false [FD]
Line_80 $$ boolean hashOn = false --> Line_97 $$ hashOn = false [FD]
Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) --> Line_98 $$ ignore = false [CD]
Line_90 $$ ignore = false --> Line_98 $$ ignore = false [FD]
Line_83 $$ boolean ignore = false --> Line_98 $$ ignore = false [FD]
Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) --> Line_99 $$ do [CD]
Line_99 $$ do --> Line_100 $$ line = in.readLine() [CD]
Line_92 $$ line = in.readLine() --> Line_100 $$ line = in.readLine() [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_100 $$ line = in.readLine() [FD]
Line_79 $$ String line --> Line_100 $$ line = in.readLine() [FD]
Line_77 $$ BufferedReader in = new BufferedReader(isr) --> Line_100 $$ line = in.readLine() [FD]
Line_100 $$ line = in.readLine() --> Line_99 $$ do [FD]
Line_92 $$ line = in.readLine() --> Line_99 $$ do [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_99 $$ do [FD]
Line_79 $$ String line --> Line_99 $$ do [FD]
Line_94 $$ if (line.equalsIgnoreCase("<?Numbers?>")) --> Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) [CD]
Line_100 $$ line = in.readLine() --> Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) [FD]
Line_92 $$ line = in.readLine() --> Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) [FD]
Line_79 $$ String line --> Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) [FD]
Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) --> Line_103 $$ isSanskrit = false [CD]
Line_87 $$ isSanskrit = false --> Line_103 $$ isSanskrit = false [FD]
Line_95 $$ isSanskrit = false --> Line_103 $$ isSanskrit = false [FD]
Line_82 $$ boolean isSanskrit = false --> Line_103 $$ isSanskrit = false [FD]
Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) --> Line_104 $$ isTibetan = false [CD]
Line_88 $$ isTibetan = true --> Line_104 $$ isTibetan = false [FD]
Line_96 $$ isTibetan = false --> Line_104 $$ isTibetan = false [FD]
Line_81 $$ boolean isTibetan = false --> Line_104 $$ isTibetan = false [FD]
Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) --> Line_105 $$ hashOn = false [CD]
Line_89 $$ hashOn = false --> Line_105 $$ hashOn = false [FD]
Line_97 $$ hashOn = false --> Line_105 $$ hashOn = false [FD]
Line_80 $$ boolean hashOn = false --> Line_105 $$ hashOn = false [FD]
Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) --> Line_106 $$ ignore = false [CD]
Line_90 $$ ignore = false --> Line_106 $$ ignore = false [FD]
Line_98 $$ ignore = false --> Line_106 $$ ignore = false [FD]
Line_83 $$ boolean ignore = false --> Line_106 $$ ignore = false [FD]
Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) --> Line_107 $$ do [CD]
Line_107 $$ do --> Line_108 $$ line = in.readLine() [CD]
Line_100 $$ line = in.readLine() --> Line_108 $$ line = in.readLine() [FD]
Line_92 $$ line = in.readLine() --> Line_108 $$ line = in.readLine() [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_108 $$ line = in.readLine() [FD]
Line_79 $$ String line --> Line_108 $$ line = in.readLine() [FD]
Line_77 $$ BufferedReader in = new BufferedReader(isr) --> Line_108 $$ line = in.readLine() [FD]
Line_108 $$ line = in.readLine() --> Line_107 $$ do [FD]
Line_100 $$ line = in.readLine() --> Line_107 $$ do [FD]
Line_92 $$ line = in.readLine() --> Line_107 $$ do [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_107 $$ do [FD]
Line_79 $$ String line --> Line_107 $$ do [FD]
Line_102 $$ if (line.equalsIgnoreCase("<?Vowels?>")) --> Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) [CD]
Line_108 $$ line = in.readLine() --> Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) [FD]
Line_100 $$ line = in.readLine() --> Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) [FD]
Line_92 $$ line = in.readLine() --> Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) [FD]
Line_79 $$ String line --> Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) [FD]
Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) --> Line_111 $$ isSanskrit = false [CD]
Line_87 $$ isSanskrit = false --> Line_111 $$ isSanskrit = false [FD]
Line_95 $$ isSanskrit = false --> Line_111 $$ isSanskrit = false [FD]
Line_103 $$ isSanskrit = false --> Line_111 $$ isSanskrit = false [FD]
Line_82 $$ boolean isSanskrit = false --> Line_111 $$ isSanskrit = false [FD]
Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) --> Line_112 $$ isTibetan = false [CD]
Line_88 $$ isTibetan = true --> Line_112 $$ isTibetan = false [FD]
Line_96 $$ isTibetan = false --> Line_112 $$ isTibetan = false [FD]
Line_104 $$ isTibetan = false --> Line_112 $$ isTibetan = false [FD]
Line_81 $$ boolean isTibetan = false --> Line_112 $$ isTibetan = false [FD]
Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) --> Line_113 $$ hashOn = false [CD]
Line_89 $$ hashOn = false --> Line_113 $$ hashOn = false [FD]
Line_97 $$ hashOn = false --> Line_113 $$ hashOn = false [FD]
Line_105 $$ hashOn = false --> Line_113 $$ hashOn = false [FD]
Line_80 $$ boolean hashOn = false --> Line_113 $$ hashOn = false [FD]
Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) --> Line_114 $$ ignore = false [CD]
Line_90 $$ ignore = false --> Line_114 $$ ignore = false [FD]
Line_98 $$ ignore = false --> Line_114 $$ ignore = false [FD]
Line_106 $$ ignore = false --> Line_114 $$ ignore = false [FD]
Line_83 $$ boolean ignore = false --> Line_114 $$ ignore = false [FD]
Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) --> Line_115 $$ do [CD]
Line_115 $$ do --> Line_116 $$ line = in.readLine() [CD]
Line_108 $$ line = in.readLine() --> Line_116 $$ line = in.readLine() [FD]
Line_100 $$ line = in.readLine() --> Line_116 $$ line = in.readLine() [FD]
Line_92 $$ line = in.readLine() --> Line_116 $$ line = in.readLine() [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_116 $$ line = in.readLine() [FD]
Line_79 $$ String line --> Line_116 $$ line = in.readLine() [FD]
Line_77 $$ BufferedReader in = new BufferedReader(isr) --> Line_116 $$ line = in.readLine() [FD]
Line_116 $$ line = in.readLine() --> Line_115 $$ do [FD]
Line_108 $$ line = in.readLine() --> Line_115 $$ do [FD]
Line_100 $$ line = in.readLine() --> Line_115 $$ do [FD]
Line_92 $$ line = in.readLine() --> Line_115 $$ do [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_115 $$ do [FD]
Line_79 $$ String line --> Line_115 $$ do [FD]
Line_110 $$ if (line.equalsIgnoreCase("<?Other?>")) --> Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) [CD]
Line_116 $$ line = in.readLine() --> Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) [FD]
Line_108 $$ line = in.readLine() --> Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) [FD]
Line_100 $$ line = in.readLine() --> Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) [FD]
Line_92 $$ line = in.readLine() --> Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) [FD]
Line_79 $$ String line --> Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) [FD]
Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) --> Line_119 $$ isSanskrit = false [CD]
Line_87 $$ isSanskrit = false --> Line_119 $$ isSanskrit = false [FD]
Line_95 $$ isSanskrit = false --> Line_119 $$ isSanskrit = false [FD]
Line_103 $$ isSanskrit = false --> Line_119 $$ isSanskrit = false [FD]
Line_111 $$ isSanskrit = false --> Line_119 $$ isSanskrit = false [FD]
Line_82 $$ boolean isSanskrit = false --> Line_119 $$ isSanskrit = false [FD]
Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) --> Line_120 $$ isTibetan = false [CD]
Line_88 $$ isTibetan = true --> Line_120 $$ isTibetan = false [FD]
Line_96 $$ isTibetan = false --> Line_120 $$ isTibetan = false [FD]
Line_104 $$ isTibetan = false --> Line_120 $$ isTibetan = false [FD]
Line_112 $$ isTibetan = false --> Line_120 $$ isTibetan = false [FD]
Line_81 $$ boolean isTibetan = false --> Line_120 $$ isTibetan = false [FD]
Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) --> Line_121 $$ hashOn = true [CD]
Line_89 $$ hashOn = false --> Line_121 $$ hashOn = true [FD]
Line_97 $$ hashOn = false --> Line_121 $$ hashOn = true [FD]
Line_105 $$ hashOn = false --> Line_121 $$ hashOn = true [FD]
Line_113 $$ hashOn = false --> Line_121 $$ hashOn = true [FD]
Line_80 $$ boolean hashOn = false --> Line_121 $$ hashOn = true [FD]
Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) --> Line_122 $$ ignore = false [CD]
Line_90 $$ ignore = false --> Line_122 $$ ignore = false [FD]
Line_98 $$ ignore = false --> Line_122 $$ ignore = false [FD]
Line_106 $$ ignore = false --> Line_122 $$ ignore = false [FD]
Line_114 $$ ignore = false --> Line_122 $$ ignore = false [FD]
Line_83 $$ boolean ignore = false --> Line_122 $$ ignore = false [FD]
Line_118 $$ if (line.equalsIgnoreCase("<?Input:Punctuation?>") || line.equalsIgnoreCase("<?Input:Vowels?>")) --> Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) [CD]
Line_116 $$ line = in.readLine() --> Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) [FD]
Line_108 $$ line = in.readLine() --> Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) [FD]
Line_100 $$ line = in.readLine() --> Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) [FD]
Line_92 $$ line = in.readLine() --> Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) [FD]
Line_79 $$ String line --> Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) [FD]
Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) --> Line_124 $$ isSanskrit = false [CD]
Line_87 $$ isSanskrit = false --> Line_124 $$ isSanskrit = false [FD]
Line_95 $$ isSanskrit = false --> Line_124 $$ isSanskrit = false [FD]
Line_103 $$ isSanskrit = false --> Line_124 $$ isSanskrit = false [FD]
Line_111 $$ isSanskrit = false --> Line_124 $$ isSanskrit = false [FD]
Line_119 $$ isSanskrit = false --> Line_124 $$ isSanskrit = false [FD]
Line_82 $$ boolean isSanskrit = false --> Line_124 $$ isSanskrit = false [FD]
Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) --> Line_125 $$ isTibetan = true [CD]
Line_88 $$ isTibetan = true --> Line_125 $$ isTibetan = true [FD]
Line_96 $$ isTibetan = false --> Line_125 $$ isTibetan = true [FD]
Line_104 $$ isTibetan = false --> Line_125 $$ isTibetan = true [FD]
Line_112 $$ isTibetan = false --> Line_125 $$ isTibetan = true [FD]
Line_120 $$ isTibetan = false --> Line_125 $$ isTibetan = true [FD]
Line_81 $$ boolean isTibetan = false --> Line_125 $$ isTibetan = true [FD]
Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) --> Line_126 $$ hashOn = true [CD]
Line_89 $$ hashOn = false --> Line_126 $$ hashOn = true [FD]
Line_97 $$ hashOn = false --> Line_126 $$ hashOn = true [FD]
Line_105 $$ hashOn = false --> Line_126 $$ hashOn = true [FD]
Line_113 $$ hashOn = false --> Line_126 $$ hashOn = true [FD]
Line_121 $$ hashOn = true --> Line_126 $$ hashOn = true [FD]
Line_80 $$ boolean hashOn = false --> Line_126 $$ hashOn = true [FD]
Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) --> Line_127 $$ ignore = false [CD]
Line_90 $$ ignore = false --> Line_127 $$ ignore = false [FD]
Line_98 $$ ignore = false --> Line_127 $$ ignore = false [FD]
Line_106 $$ ignore = false --> Line_127 $$ ignore = false [FD]
Line_114 $$ ignore = false --> Line_127 $$ ignore = false [FD]
Line_122 $$ ignore = false --> Line_127 $$ ignore = false [FD]
Line_83 $$ boolean ignore = false --> Line_127 $$ ignore = false [FD]
Line_123 $$ if (line.equalsIgnoreCase("<?Input:Tibetan?>")) --> Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) [CD]
Line_116 $$ line = in.readLine() --> Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) [FD]
Line_108 $$ line = in.readLine() --> Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) [FD]
Line_100 $$ line = in.readLine() --> Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) [FD]
Line_92 $$ line = in.readLine() --> Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) [FD]
Line_79 $$ String line --> Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) [FD]
Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) --> Line_129 $$ isSanskrit = false [CD]
Line_87 $$ isSanskrit = false --> Line_129 $$ isSanskrit = false [FD]
Line_95 $$ isSanskrit = false --> Line_129 $$ isSanskrit = false [FD]
Line_103 $$ isSanskrit = false --> Line_129 $$ isSanskrit = false [FD]
Line_111 $$ isSanskrit = false --> Line_129 $$ isSanskrit = false [FD]
Line_119 $$ isSanskrit = false --> Line_129 $$ isSanskrit = false [FD]
Line_124 $$ isSanskrit = false --> Line_129 $$ isSanskrit = false [FD]
Line_82 $$ boolean isSanskrit = false --> Line_129 $$ isSanskrit = false [FD]
Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) --> Line_130 $$ isTibetan = false [CD]
Line_88 $$ isTibetan = true --> Line_130 $$ isTibetan = false [FD]
Line_96 $$ isTibetan = false --> Line_130 $$ isTibetan = false [FD]
Line_104 $$ isTibetan = false --> Line_130 $$ isTibetan = false [FD]
Line_112 $$ isTibetan = false --> Line_130 $$ isTibetan = false [FD]
Line_120 $$ isTibetan = false --> Line_130 $$ isTibetan = false [FD]
Line_125 $$ isTibetan = true --> Line_130 $$ isTibetan = false [FD]
Line_81 $$ boolean isTibetan = false --> Line_130 $$ isTibetan = false [FD]
Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) --> Line_131 $$ hashOn = true [CD]
Line_89 $$ hashOn = false --> Line_131 $$ hashOn = true [FD]
Line_97 $$ hashOn = false --> Line_131 $$ hashOn = true [FD]
Line_105 $$ hashOn = false --> Line_131 $$ hashOn = true [FD]
Line_113 $$ hashOn = false --> Line_131 $$ hashOn = true [FD]
Line_121 $$ hashOn = true --> Line_131 $$ hashOn = true [FD]
Line_126 $$ hashOn = true --> Line_131 $$ hashOn = true [FD]
Line_80 $$ boolean hashOn = false --> Line_131 $$ hashOn = true [FD]
Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) --> Line_132 $$ ignore = false [CD]
Line_90 $$ ignore = false --> Line_132 $$ ignore = false [FD]
Line_98 $$ ignore = false --> Line_132 $$ ignore = false [FD]
Line_106 $$ ignore = false --> Line_132 $$ ignore = false [FD]
Line_114 $$ ignore = false --> Line_132 $$ ignore = false [FD]
Line_122 $$ ignore = false --> Line_132 $$ ignore = false [FD]
Line_127 $$ ignore = false --> Line_132 $$ ignore = false [FD]
Line_83 $$ boolean ignore = false --> Line_132 $$ ignore = false [FD]
Line_128 $$ if (line.equalsIgnoreCase("<?Input:Numbers?>")) --> Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) [CD]
Line_116 $$ line = in.readLine() --> Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) [FD]
Line_108 $$ line = in.readLine() --> Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) [FD]
Line_100 $$ line = in.readLine() --> Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) [FD]
Line_92 $$ line = in.readLine() --> Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) [FD]
Line_79 $$ String line --> Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) [FD]
Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) --> Line_134 $$ isSanskrit = true [CD]
Line_87 $$ isSanskrit = false --> Line_134 $$ isSanskrit = true [FD]
Line_95 $$ isSanskrit = false --> Line_134 $$ isSanskrit = true [FD]
Line_103 $$ isSanskrit = false --> Line_134 $$ isSanskrit = true [FD]
Line_111 $$ isSanskrit = false --> Line_134 $$ isSanskrit = true [FD]
Line_119 $$ isSanskrit = false --> Line_134 $$ isSanskrit = true [FD]
Line_124 $$ isSanskrit = false --> Line_134 $$ isSanskrit = true [FD]
Line_129 $$ isSanskrit = false --> Line_134 $$ isSanskrit = true [FD]
Line_82 $$ boolean isSanskrit = false --> Line_134 $$ isSanskrit = true [FD]
Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) --> Line_135 $$ isTibetan = false [CD]
Line_88 $$ isTibetan = true --> Line_135 $$ isTibetan = false [FD]
Line_96 $$ isTibetan = false --> Line_135 $$ isTibetan = false [FD]
Line_104 $$ isTibetan = false --> Line_135 $$ isTibetan = false [FD]
Line_112 $$ isTibetan = false --> Line_135 $$ isTibetan = false [FD]
Line_120 $$ isTibetan = false --> Line_135 $$ isTibetan = false [FD]
Line_125 $$ isTibetan = true --> Line_135 $$ isTibetan = false [FD]
Line_130 $$ isTibetan = false --> Line_135 $$ isTibetan = false [FD]
Line_81 $$ boolean isTibetan = false --> Line_135 $$ isTibetan = false [FD]
Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) --> Line_136 $$ hashOn = true [CD]
Line_89 $$ hashOn = false --> Line_136 $$ hashOn = true [FD]
Line_97 $$ hashOn = false --> Line_136 $$ hashOn = true [FD]
Line_105 $$ hashOn = false --> Line_136 $$ hashOn = true [FD]
Line_113 $$ hashOn = false --> Line_136 $$ hashOn = true [FD]
Line_121 $$ hashOn = true --> Line_136 $$ hashOn = true [FD]
Line_126 $$ hashOn = true --> Line_136 $$ hashOn = true [FD]
Line_131 $$ hashOn = true --> Line_136 $$ hashOn = true [FD]
Line_80 $$ boolean hashOn = false --> Line_136 $$ hashOn = true [FD]
Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) --> Line_137 $$ ignore = false [CD]
Line_90 $$ ignore = false --> Line_137 $$ ignore = false [FD]
Line_98 $$ ignore = false --> Line_137 $$ ignore = false [FD]
Line_106 $$ ignore = false --> Line_137 $$ ignore = false [FD]
Line_114 $$ ignore = false --> Line_137 $$ ignore = false [FD]
Line_122 $$ ignore = false --> Line_137 $$ ignore = false [FD]
Line_127 $$ ignore = false --> Line_137 $$ ignore = false [FD]
Line_132 $$ ignore = false --> Line_137 $$ ignore = false [FD]
Line_83 $$ boolean ignore = false --> Line_137 $$ ignore = false [FD]
Line_133 $$ if (line.equalsIgnoreCase("<?Input:Sanskrit?>")) --> Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) [CD]
Line_116 $$ line = in.readLine() --> Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) [FD]
Line_108 $$ line = in.readLine() --> Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) [FD]
Line_100 $$ line = in.readLine() --> Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) [FD]
Line_92 $$ line = in.readLine() --> Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) [FD]
Line_79 $$ String line --> Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) [FD]
Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) --> Line_139 $$ isSanskrit = false [CD]
Line_87 $$ isSanskrit = false --> Line_139 $$ isSanskrit = false [FD]
Line_95 $$ isSanskrit = false --> Line_139 $$ isSanskrit = false [FD]
Line_103 $$ isSanskrit = false --> Line_139 $$ isSanskrit = false [FD]
Line_111 $$ isSanskrit = false --> Line_139 $$ isSanskrit = false [FD]
Line_119 $$ isSanskrit = false --> Line_139 $$ isSanskrit = false [FD]
Line_124 $$ isSanskrit = false --> Line_139 $$ isSanskrit = false [FD]
Line_129 $$ isSanskrit = false --> Line_139 $$ isSanskrit = false [FD]
Line_134 $$ isSanskrit = true --> Line_139 $$ isSanskrit = false [FD]
Line_82 $$ boolean isSanskrit = false --> Line_139 $$ isSanskrit = false [FD]
Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) --> Line_140 $$ isTibetan = false [CD]
Line_88 $$ isTibetan = true --> Line_140 $$ isTibetan = false [FD]
Line_96 $$ isTibetan = false --> Line_140 $$ isTibetan = false [FD]
Line_104 $$ isTibetan = false --> Line_140 $$ isTibetan = false [FD]
Line_112 $$ isTibetan = false --> Line_140 $$ isTibetan = false [FD]
Line_120 $$ isTibetan = false --> Line_140 $$ isTibetan = false [FD]
Line_125 $$ isTibetan = true --> Line_140 $$ isTibetan = false [FD]
Line_130 $$ isTibetan = false --> Line_140 $$ isTibetan = false [FD]
Line_135 $$ isTibetan = false --> Line_140 $$ isTibetan = false [FD]
Line_81 $$ boolean isTibetan = false --> Line_140 $$ isTibetan = false [FD]
Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) --> Line_141 $$ hashOn = false [CD]
Line_89 $$ hashOn = false --> Line_141 $$ hashOn = false [FD]
Line_97 $$ hashOn = false --> Line_141 $$ hashOn = false [FD]
Line_105 $$ hashOn = false --> Line_141 $$ hashOn = false [FD]
Line_113 $$ hashOn = false --> Line_141 $$ hashOn = false [FD]
Line_121 $$ hashOn = true --> Line_141 $$ hashOn = false [FD]
Line_126 $$ hashOn = true --> Line_141 $$ hashOn = false [FD]
Line_131 $$ hashOn = true --> Line_141 $$ hashOn = false [FD]
Line_136 $$ hashOn = true --> Line_141 $$ hashOn = false [FD]
Line_80 $$ boolean hashOn = false --> Line_141 $$ hashOn = false [FD]
Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) --> Line_142 $$ ignore = false [CD]
Line_90 $$ ignore = false --> Line_142 $$ ignore = false [FD]
Line_98 $$ ignore = false --> Line_142 $$ ignore = false [FD]
Line_106 $$ ignore = false --> Line_142 $$ ignore = false [FD]
Line_114 $$ ignore = false --> Line_142 $$ ignore = false [FD]
Line_122 $$ ignore = false --> Line_142 $$ ignore = false [FD]
Line_127 $$ ignore = false --> Line_142 $$ ignore = false [FD]
Line_132 $$ ignore = false --> Line_142 $$ ignore = false [FD]
Line_137 $$ ignore = false --> Line_142 $$ ignore = false [FD]
Line_83 $$ boolean ignore = false --> Line_142 $$ ignore = false [FD]
Line_138 $$ if (line.equalsIgnoreCase("<?ToWylie?>")) --> Line_143 $$ if (line.equalsIgnoreCase("<?Ignore?>")) [CD]
Line_116 $$ line = in.readLine() --> Line_143 $$ if (line.equalsIgnoreCase("<?Ignore?>")) [FD]
Line_108 $$ line = in.readLine() --> Line_143 $$ if (line.equalsIgnoreCase("<?Ignore?>")) [FD]
Line_100 $$ line = in.readLine() --> Line_143 $$ if (line.equalsIgnoreCase("<?Ignore?>")) [FD]
Line_92 $$ line = in.readLine() --> Line_143 $$ if (line.equalsIgnoreCase("<?Ignore?>")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_143 $$ if (line.equalsIgnoreCase("<?Ignore?>")) [FD]
Line_79 $$ String line --> Line_143 $$ if (line.equalsIgnoreCase("<?Ignore?>")) [FD]
Line_143 $$ if (line.equalsIgnoreCase("<?Ignore?>")) --> Line_144 $$ isSanskrit = false [CD]
Line_87 $$ isSanskrit = false --> Line_144 $$ isSanskrit = false [FD]
Line_95 $$ isSanskrit = false --> Line_144 $$ isSanskrit = false [FD]
Line_103 $$ isSanskrit = false --> Line_144 $$ isSanskrit = false [FD]
Line_111 $$ isSanskrit = false --> Line_144 $$ isSanskrit = false [FD]
Line_119 $$ isSanskrit = false --> Line_144 $$ isSanskrit = false [FD]
Line_124 $$ isSanskrit = false --> Line_144 $$ isSanskrit = false [FD]
Line_129 $$ isSanskrit = false --> Line_144 $$ isSanskrit = false [FD]
Line_134 $$ isSanskrit = true --> Line_144 $$ isSanskrit = false [FD]
Line_139 $$ isSanskrit = false --> Line_144 $$ isSanskrit = false [FD]
Line_82 $$ boolean isSanskrit = false --> Line_144 $$ isSanskrit = false [FD]
Line_143 $$ if (line.equalsIgnoreCase("<?Ignore?>")) --> Line_145 $$ ignore = true [CD]
Line_90 $$ ignore = false --> Line_145 $$ ignore = true [FD]
Line_98 $$ ignore = false --> Line_145 $$ ignore = true [FD]
Line_106 $$ ignore = false --> Line_145 $$ ignore = true [FD]
Line_114 $$ ignore = false --> Line_145 $$ ignore = true [FD]
Line_122 $$ ignore = false --> Line_145 $$ ignore = true [FD]
Line_127 $$ ignore = false --> Line_145 $$ ignore = true [FD]
Line_132 $$ ignore = false --> Line_145 $$ ignore = true [FD]
Line_137 $$ ignore = false --> Line_145 $$ ignore = true [FD]
Line_142 $$ ignore = false --> Line_145 $$ ignore = true [FD]
Line_83 $$ boolean ignore = false --> Line_145 $$ ignore = true [FD]
Line_85 $$ if (line.startsWith("<?")) --> Line_147 $$ if (line.startsWith("//")) [CD]
Line_116 $$ line = in.readLine() --> Line_147 $$ if (line.startsWith("//")) [FD]
Line_108 $$ line = in.readLine() --> Line_147 $$ if (line.startsWith("//")) [FD]
Line_100 $$ line = in.readLine() --> Line_147 $$ if (line.startsWith("//")) [FD]
Line_92 $$ line = in.readLine() --> Line_147 $$ if (line.startsWith("//")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_147 $$ if (line.startsWith("//")) [FD]
Line_79 $$ String line --> Line_147 $$ if (line.startsWith("//")) [FD]
Line_147 $$ if (line.startsWith("//")) --> Line_149 $$ if (line.equals("")) [CD]
Line_116 $$ line = in.readLine() --> Line_149 $$ if (line.equals("")) [FD]
Line_108 $$ line = in.readLine() --> Line_149 $$ if (line.equals("")) [FD]
Line_100 $$ line = in.readLine() --> Line_149 $$ if (line.equals("")) [FD]
Line_92 $$ line = in.readLine() --> Line_149 $$ if (line.equals("")) [FD]
Line_84 $$ while ((line = in.readLine()) != null) --> Line_149 $$ if (line.equals("")) [FD]
Line_79 $$ String line --> Line_149 $$ if (line.equals("")) [FD]
Line_149 $$ if (line.equals("")) --> Line_158 $$ ThdlDebug.verify(escapedToken.length() == 0) [CD]
Line_149 $$ if (line.equals("")) --> Line_159 $$ while (st.hasMoreTokens()) [CD]
Line_159 $$ while (st.hasMoreTokens()) --> Line_160 $$ String val = getEscapedToken(st, escapedToken) [CD]
Line_159 $$ while (st.hasMoreTokens()) --> Line_161 $$ if (val.equals(DELIMITER) && escapedToken.length() == 0) [CD]
Line_160 $$ String val = getEscapedToken(st, escapedToken) --> Line_161 $$ if (val.equals(DELIMITER) && escapedToken.length() == 0) [FD]
Line_161 $$ if (val.equals(DELIMITER) && escapedToken.length() == 0) --> Line_163 $$ if (!val.equals("")) [CD]
Line_160 $$ String val = getEscapedToken(st, escapedToken) --> Line_163 $$ if (!val.equals("")) [FD]
Line_163 $$ if (!val.equals("")) --> Line_164 $$ if (escapedToken.length() != 0) [CD]
Line_164 $$ if (escapedToken.length() != 0) --> Line_166 $$ ThdlDebug.verify(escapedToken.length() == 0) [CD]
Line_90 $$ ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_98 $$ ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_106 $$ ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_114 $$ ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_122 $$ ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_127 $$ ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_132 $$ ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_137 $$ ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_142 $$ ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_145 $$ ignore = true --> Line_176 $$ if (!ignore) [FD]
Line_83 $$ boolean ignore = false --> Line_176 $$ if (!ignore) [FD]
Line_176 $$ if (!ignore) --> Line_177 $$ duffCodes[REDUCED_C] = new DuffCode(val, true) [CD]
Line_182 $$ if (null != duffCodes[TM]) --> Line_183 $$ TMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW] [CD]
Line_187 $$ if (wylie.toLowerCase().startsWith("\\uf0")) --> Line_188 $$ int x = Integer.parseInt(wylie.substring("\\u".length()), 16) [CD]
Line_187 $$ if (wylie.toLowerCase().startsWith("\\uf0")) --> Line_189 $$ ThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF)) [CD]
Line_187 $$ if (wylie.toLowerCase().startsWith("\\uf0")) --> Line_190 $$ NonUnicodeToTMW[x - ''] = new DuffCode[] [CD]
Line_90 $$ ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_98 $$ ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_106 $$ ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_114 $$ ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_122 $$ ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_127 $$ ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_132 $$ ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_137 $$ ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_142 $$ ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_145 $$ ignore = true --> Line_199 $$ if (!ignore) [FD]
Line_83 $$ boolean ignore = false --> Line_199 $$ if (!ignore) [FD]
Line_160 $$ String val = getEscapedToken(st, escapedToken) --> Line_208 $$ if (!val.equals("none")) [FD]
Line_208 $$ if (!val.equals("none")) --> Line_209 $$ StringBuffer unicodeBuffer = new StringBuffer() [CD]
Line_208 $$ if (!val.equals("none")) --> Line_210 $$ StringTokenizer uTok = new StringTokenizer(val, ",") [CD]
Line_208 $$ if (!val.equals("none")) --> Line_211 $$ while (uTok.hasMoreTokens()) [CD]
Line_210 $$ StringTokenizer uTok = new StringTokenizer(val, ",") --> Line_211 $$ while (uTok.hasMoreTokens()) [FD]
Line_211 $$ while (uTok.hasMoreTokens()) --> Line_212 $$ String subval = uTok.nextToken() [CD]
Line_210 $$ StringTokenizer uTok = new StringTokenizer(val, ",") --> Line_212 $$ String subval = uTok.nextToken() [FD]
Line_211 $$ while (uTok.hasMoreTokens()) --> Line_213 $$ ThdlDebug.verify(subval.length() == 4 || subval.length() == 3) [CD]
Line_212 $$ String subval = uTok.nextToken() --> Line_213 $$ ThdlDebug.verify(subval.length() == 4 || subval.length() == 3) [FD]
Line_212 $$ String subval = uTok.nextToken() --> Line_215 $$ int x = Integer.parseInt(subval, 16) [FD]
Line_209 $$ StringBuffer unicodeBuffer = new StringBuffer() --> Line_217 $$ unicodeBuffer.append((char) x) [FD]
Line_208 $$ if (!val.equals("none")) --> Line_222 $$ TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString() [CD]
Line_209 $$ StringBuffer unicodeBuffer = new StringBuffer() --> Line_222 $$ TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString() [FD]
Line_208 $$ if (!val.equals("none")) --> Line_224 $$ if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) [CD]
Line_209 $$ StringBuffer unicodeBuffer = new StringBuffer() --> Line_224 $$ if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) [FD]
Line_224 $$ if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) --> Line_225 $$ if (null != UnicodeToTMW[ch - 'ༀ'][0] && 'ༀ' != ch && '༂' != ch && '༃' != ch && '་' != ch && '༎' != ch && 'ཀ' != ch && 'ག' != ch && 'ཉ' != ch && 'ཏ' != ch && 'ད' != ch && 'ན' != ch && 'ཞ' != ch && 'ར' != ch && 'ཤ' != ch && 'ཧ' != ch && 'ཪ' != ch && 'ཱ' != ch && 'ི' != ch && 'ཱི' != ch && 'ུ' != ch && 'ཱུ' != ch && 'ྲྀ' != ch && 'ཷ' != ch && 'ླྀ' != ch && 'ཹ' != ch && 'ེ' != ch && 'ོ' != ch && 'ཾ' != ch && 'ཱྀ' != ch) [CD]
Line_224 $$ if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) --> Line_228 $$ UnicodeToTMW[ch - 'ༀ'][0] = duffCodes[TMW] [CD]
Line_90 $$ ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_98 $$ ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_106 $$ ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_114 $$ ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_122 $$ ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_127 $$ ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_132 $$ ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_137 $$ ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_142 $$ ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_145 $$ ignore = true --> Line_233 $$ if (!ignore) [FD]
Line_83 $$ boolean ignore = false --> Line_233 $$ if (!ignore) [FD]
Line_233 $$ if (!ignore) --> Line_234 $$ duffCodes[HALF_C] = new DuffCode(val, true) [CD]
Line_90 $$ ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_98 $$ ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_106 $$ ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_114 $$ ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_122 $$ ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_127 $$ ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_132 $$ ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_137 $$ ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_142 $$ ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_145 $$ ignore = true --> Line_238 $$ if (!ignore) [FD]
Line_83 $$ boolean ignore = false --> Line_238 $$ if (!ignore) [FD]
Line_238 $$ if (!ignore) --> Line_240 $$ binduMap.put(duffCodes[TMW], binduCode) [CD]
Line_163 $$ if (!val.equals("")) --> Line_247 $$ if (k == 10) [CD]
Line_149 $$ if (line.equals("")) --> Line_252 $$ if (k < 10) [CD]
Line_149 $$ if (line.equals("")) --> Line_255 $$ if (!ignore) [CD]
Line_90 $$ ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_98 $$ ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_106 $$ ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_114 $$ ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_122 $$ ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_127 $$ ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_132 $$ ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_137 $$ ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_142 $$ ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_145 $$ ignore = true --> Line_255 $$ if (!ignore) [FD]
Line_83 $$ boolean ignore = false --> Line_255 $$ if (!ignore) [FD]
Line_255 $$ if (!ignore) --> Line_256 $$ if (null == wylie) [CD]
Line_255 $$ if (!ignore) --> Line_257 $$ if (hashOn) [CD]
Line_257 $$ if (hashOn) --> Line_258 $$ tibHash.put(Manipulate.unescape(wylie), duffCodes) [CD]
Line_255 $$ if (!ignore) --> Line_260 $$ if (isTibetan) [CD]
Line_260 $$ if (isTibetan) --> Line_262 $$ for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) [CD]
Line_262 $$ for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) --> Line_263 $$ if (wylieWithoutDashes.charAt(wl) == '-') [CD]
Line_262 $$ for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) --> Line_263 $$ if (wylieWithoutDashes.charAt(wl) == '-') [FD]
Line_263 $$ if (wylieWithoutDashes.charAt(wl) == '-') --> Line_264 $$ wylieWithoutDashes.deleteCharAt(wl) [CD]
Line_262 $$ for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) --> Line_264 $$ wylieWithoutDashes.deleteCharAt(wl) [FD]
Line_263 $$ if (wylieWithoutDashes.charAt(wl) == '-') --> Line_265 $$ --wl [CD]
Line_262 $$ for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) --> Line_265 $$ --wl [FD]
Line_260 $$ if (isTibetan) --> Line_268 $$ tibSet.add(wylieWithoutDashes.toString()) [CD]
Line_255 $$ if (!ignore) --> Line_270 $$ if (isSanskrit) [CD]
Line_270 $$ if (isSanskrit) --> Line_271 $$ sanskritStackSet.add(wylie) [CD]
Line_255 $$ if (!ignore) --> Line_273 $$ if (null == duffCodes[TMW]) [CD]
Line_255 $$ if (!ignore) --> Line_274 $$ int font = duffCodes[TMW].getFontNum() [CD]
Line_255 $$ if (!ignore) --> Line_276 $$ toHashKey[font][code] = Manipulate.unescape(wylie) [CD]
