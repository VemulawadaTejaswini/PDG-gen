Line_2 $$ public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException --> Line_3 $$ URL url = urls[0] [CD]
Line_2 $$ public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException --> Line_4 $$ if (!url.getProtocol().equalsIgnoreCase("http")) [CD]
Line_3 $$ URL url = urls[0] --> Line_4 $$ if (!url.getProtocol().equalsIgnoreCase("http")) [FD]
Line_2 $$ public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException --> Line_7 $$ if (!destinationFile.exists()) [CD]
Line_2 $$ public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException --> Line_7 $$ if (!destinationFile.exists()) [FD]
Line_2 $$ public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException --> Line_9 $$ destinationFile.createNewFile() [FD]
Line_3 $$ URL url = urls[0] --> Line_12 $$ throw new DownloadException("Unable to download from URL : " + url.toString()) [FD]
Line_2 $$ public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException --> Line_15 $$ HeadMethod head = new HeadMethod(url.toString()) [CD]
Line_3 $$ URL url = urls[0] --> Line_15 $$ HeadMethod head = new HeadMethod(url.toString()) [FD]
Line_2 $$ public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException --> Line_16 $$ HttpClient httpClient = new HttpClient() [CD]
Line_16 $$ HttpClient httpClient = new HttpClient() --> Line_18 $$ httpClient.executeMethod(head) [FD]
Line_15 $$ HeadMethod head = new HeadMethod(url.toString()) --> Line_18 $$ httpClient.executeMethod(head) [FD]
Line_15 $$ HeadMethod head = new HeadMethod(url.toString()) --> Line_19 $$ Header[] headers = head.getResponseHeaders() [FD]
Line_20 $$ for (Header header : headers) --> Line_21 $$ System.out.println(header) [FD]
Line_15 $$ HeadMethod head = new HeadMethod(url.toString()) --> Line_23 $$ Header header = head.getResponseHeader("Content-Length") [FD]
Line_20 $$ for (Header header : headers) --> Line_24 $$ Object contentLength = header.getValue() [FD]
Line_24 $$ Object contentLength = header.getValue() --> Line_25 $$ Long fileLength = Long.parseLong(contentLength.toString()) [FD]
Line_3 $$ URL url = urls[0] --> Line_27 $$ GetMethod get = new GetMethod(url.toString()) [FD]
Line_16 $$ HttpClient httpClient = new HttpClient() --> Line_28 $$ httpClient.executeMethod(get) [FD]
Line_27 $$ GetMethod get = new GetMethod(url.toString()) --> Line_28 $$ httpClient.executeMethod(get) [FD]
Line_27 $$ GetMethod get = new GetMethod(url.toString()) --> Line_29 $$ InputStream ins = get.getResponseBodyAsStream() [FD]
Line_29 $$ InputStream ins = get.getResponseBodyAsStream() --> Line_31 $$ IOUtils.copy(ins, fos) [FD]
Line_30 $$ FileOutputStream fos = new FileOutputStream(destinationFile) --> Line_31 $$ IOUtils.copy(ins, fos) [FD]
Line_2 $$ public Object downloadFile(File destinationFile, URL[] urls, DownloadListener listener, Object checksum, long length, PRIORITY priority) throws DownloadException --> Line_38 $$ return null [CD]
