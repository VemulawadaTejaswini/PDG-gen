Line_4 $$ URL url = new URL("http://localhost:8192/OMFHTTPJMSRoundtripService/") --> Line_5 $$ URLConnection conn = url.openConnection() [FD]
Line_5 $$ URLConnection conn = url.openConnection() --> Line_6 $$ conn.setDoOutput(true) [FD]
Line_5 $$ URLConnection conn = url.openConnection() --> Line_7 $$ OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()) [FD]
Line_7 $$ OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()) --> Line_8 $$ wr.write(testMessageHeader + testMessage) [FD]
Line_7 $$ OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()) --> Line_9 $$ wr.flush() [FD]
Line_5 $$ URLConnection conn = url.openConnection() --> Line_10 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream())) [FD]
Line_11 $$ String line --> Line_12 $$ while ((line = rd.readLine()) != null) [FD]
Line_10 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream())) --> Line_12 $$ while ((line = rd.readLine()) != null) [FD]
Line_12 $$ while ((line = rd.readLine()) != null) --> Line_13 $$ logger.debug("Line: " + line) [CD]
Line_7 $$ OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()) --> Line_15 $$ wr.close() [FD]
Line_10 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream())) --> Line_16 $$ rd.close() [FD]
Line_2 $$ public void testRoundTrip() --> Line_27 $$ boolean messageReceived = false [CD]
Line_2 $$ public void testRoundTrip() --> Line_28 $$ ArrayList<String> messages = testJMSListener.getReceivedMessages() [CD]
Line_2 $$ public void testRoundTrip() --> Line_29 $$ for (Iterator<String> iterator = messages.iterator(); iterator.hasNext(); ) [CD]
Line_28 $$ ArrayList<String> messages = testJMSListener.getReceivedMessages() --> Line_29 $$ for (Iterator<String> iterator = messages.iterator(); iterator.hasNext(); ) [FD]
Line_29 $$ for (Iterator<String> iterator = messages.iterator(); iterator.hasNext(); ) --> Line_30 $$ String string = (String) iterator.next() [CD]
Line_29 $$ for (Iterator<String> iterator = messages.iterator(); iterator.hasNext(); ) --> Line_30 $$ String string = (String) iterator.next() [FD]
Line_29 $$ for (Iterator<String> iterator = messages.iterator(); iterator.hasNext(); ) --> Line_31 $$ logger.debug("String received: " + string) [CD]
Line_29 $$ for (Iterator<String> iterator = messages.iterator(); iterator.hasNext(); ) --> Line_32 $$ if (testMessage.equals(string)) [CD]
Line_30 $$ String string = (String) iterator.next() --> Line_32 $$ if (testMessage.equals(string)) [FD]
Line_27 $$ boolean messageReceived = false --> Line_32 $$ if (testMessage.equals(string)) [FD]
Line_2 $$ public void testRoundTrip() --> Line_34 $$ assertTrue("Message should have been received", messageReceived) [CD]
Line_32 $$ if (testMessage.equals(string)) --> Line_34 $$ assertTrue("Message should have been received", messageReceived) [FD]
Line_27 $$ boolean messageReceived = false --> Line_34 $$ assertTrue("Message should have been received", messageReceived) [FD]
