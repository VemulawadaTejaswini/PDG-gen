Line_2 $$ public static void main(String[] args) throws IOException --> Line_3 $$ String paramFileName = args[0] [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_5 $$ String cands_fileName = (inFile_params.readLine().split("\\s+"))[0] [CD]
Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) --> Line_5 $$ String cands_fileName = (inFile_params.readLine().split("\\s+"))[0] [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_6 $$ String alignSrcCand_phrasal_fileName = (inFile_params.readLine().split("\\s+"))[0] [CD]
Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) --> Line_6 $$ String alignSrcCand_phrasal_fileName = (inFile_params.readLine().split("\\s+"))[0] [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_7 $$ String alignSrcCand_word_fileName = (inFile_params.readLine().split("\\s+"))[0] [CD]
Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) --> Line_7 $$ String alignSrcCand_word_fileName = (inFile_params.readLine().split("\\s+"))[0] [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_8 $$ String source_fileName = (inFile_params.readLine().split("\\s+"))[0] [CD]
Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) --> Line_8 $$ String source_fileName = (inFile_params.readLine().split("\\s+"))[0] [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_9 $$ String trainSrc_fileName = (inFile_params.readLine().split("\\s+"))[0] [CD]
Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) --> Line_9 $$ String trainSrc_fileName = (inFile_params.readLine().split("\\s+"))[0] [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_10 $$ String trainTgt_fileName = (inFile_params.readLine().split("\\s+"))[0] [CD]
Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) --> Line_10 $$ String trainTgt_fileName = (inFile_params.readLine().split("\\s+"))[0] [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_11 $$ String trainAlign_fileName = (inFile_params.readLine().split("\\s+"))[0] [CD]
Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) --> Line_11 $$ String trainAlign_fileName = (inFile_params.readLine().split("\\s+"))[0] [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_12 $$ String alignCache_fileName = (inFile_params.readLine().split("\\s+"))[0] [CD]
Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) --> Line_12 $$ String alignCache_fileName = (inFile_params.readLine().split("\\s+"))[0] [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_13 $$ String alignmentsType = "AlignmentGrids" [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_14 $$ int maxCacheSize = 1000 [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_15 $$ inFile_params.close() [CD]
Line_4 $$ BufferedReader inFile_params = new BufferedReader(new FileReader(paramFileName)) --> Line_15 $$ inFile_params.close() [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_16 $$ int numSentences = countLines(source_fileName) [CD]
Line_8 $$ String source_fileName = (inFile_params.readLine().split("\\s+"))[0] --> Line_16 $$ int numSentences = countLines(source_fileName) [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_17 $$ InputStream inStream_src = new FileInputStream(new File(source_fileName)) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_18 $$ BufferedReader srcFile = new BufferedReader(new InputStreamReader(inStream_src, "utf8")) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_19 $$ String[] srcSentences = new String[numSentences] [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_20 $$ for (int i = 0; i < numSentences; ++i) [CD]
Line_16 $$ int numSentences = countLines(source_fileName) --> Line_20 $$ for (int i = 0; i < numSentences; ++i) [FD]
Line_20 $$ for (int i = 0; i < numSentences; ++i) --> Line_21 $$ srcSentences[i] = srcFile.readLine() [CD]
Line_18 $$ BufferedReader srcFile = new BufferedReader(new InputStreamReader(inStream_src, "utf8")) --> Line_21 $$ srcSentences[i] = srcFile.readLine() [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_23 $$ srcFile.close() [CD]
Line_18 $$ BufferedReader srcFile = new BufferedReader(new InputStreamReader(inStream_src, "utf8")) --> Line_23 $$ srcFile.close() [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_24 $$ println("Creating src vocabulary @ " + (new Date())) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_26 $$ int[] sourceWordsSentences = Vocabulary.initializeVocabulary(trainSrc_fileName, srcVocab, true) [CD]
Line_9 $$ String trainSrc_fileName = (inFile_params.readLine().split("\\s+"))[0] --> Line_26 $$ int[] sourceWordsSentences = Vocabulary.initializeVocabulary(trainSrc_fileName, srcVocab, true) [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_27 $$ int numSourceWords = sourceWordsSentences[0] [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_28 $$ int numSourceSentences = sourceWordsSentences[1] [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_29 $$ println("Reading src corpus @ " + (new Date())) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_30 $$ srcCorpusArray = SuffixArrayFactory.createCorpusArray(trainSrc_fileName, srcVocab, numSourceWords, numSourceSentences) [CD]
Line_9 $$ String trainSrc_fileName = (inFile_params.readLine().split("\\s+"))[0] --> Line_30 $$ srcCorpusArray = SuffixArrayFactory.createCorpusArray(trainSrc_fileName, srcVocab, numSourceWords, numSourceSentences) [FD]
Line_27 $$ int numSourceWords = sourceWordsSentences[0] --> Line_30 $$ srcCorpusArray = SuffixArrayFactory.createCorpusArray(trainSrc_fileName, srcVocab, numSourceWords, numSourceSentences) [FD]
Line_28 $$ int numSourceSentences = sourceWordsSentences[1] --> Line_30 $$ srcCorpusArray = SuffixArrayFactory.createCorpusArray(trainSrc_fileName, srcVocab, numSourceWords, numSourceSentences) [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_31 $$ println("Creating src SA @ " + (new Date())) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_32 $$ srcSA = SuffixArrayFactory.createSuffixArray(srcCorpusArray, maxCacheSize) [CD]
Line_14 $$ int maxCacheSize = 1000 --> Line_32 $$ srcSA = SuffixArrayFactory.createSuffixArray(srcCorpusArray, maxCacheSize) [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_33 $$ println("Creating tgt vocabulary @ " + (new Date())) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_35 $$ int[] targetWordsSentences = Vocabulary.initializeVocabulary(trainTgt_fileName, tgtVocab, true) [CD]
Line_10 $$ String trainTgt_fileName = (inFile_params.readLine().split("\\s+"))[0] --> Line_35 $$ int[] targetWordsSentences = Vocabulary.initializeVocabulary(trainTgt_fileName, tgtVocab, true) [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_36 $$ int numTargetWords = targetWordsSentences[0] [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_37 $$ int numTargetSentences = targetWordsSentences[1] [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_38 $$ println("Reading tgt corpus @ " + (new Date())) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_39 $$ tgtCorpusArray = SuffixArrayFactory.createCorpusArray(trainTgt_fileName, tgtVocab, numTargetWords, numTargetSentences) [CD]
Line_10 $$ String trainTgt_fileName = (inFile_params.readLine().split("\\s+"))[0] --> Line_39 $$ tgtCorpusArray = SuffixArrayFactory.createCorpusArray(trainTgt_fileName, tgtVocab, numTargetWords, numTargetSentences) [FD]
Line_36 $$ int numTargetWords = targetWordsSentences[0] --> Line_39 $$ tgtCorpusArray = SuffixArrayFactory.createCorpusArray(trainTgt_fileName, tgtVocab, numTargetWords, numTargetSentences) [FD]
Line_37 $$ int numTargetSentences = targetWordsSentences[1] --> Line_39 $$ tgtCorpusArray = SuffixArrayFactory.createCorpusArray(trainTgt_fileName, tgtVocab, numTargetWords, numTargetSentences) [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_40 $$ println("Creating tgt SA @ " + (new Date())) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_41 $$ tgtSA = SuffixArrayFactory.createSuffixArray(tgtCorpusArray, maxCacheSize) [CD]
Line_14 $$ int maxCacheSize = 1000 --> Line_41 $$ tgtSA = SuffixArrayFactory.createSuffixArray(tgtCorpusArray, maxCacheSize) [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_42 $$ int trainingSize = srcCorpusArray.getNumSentences() [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_43 $$ if (trainingSize != tgtCorpusArray.getNumSentences()) [CD]
Line_42 $$ int trainingSize = srcCorpusArray.getNumSentences() --> Line_43 $$ if (trainingSize != tgtCorpusArray.getNumSentences()) [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_46 $$ println("Reading alignment data @ " + (new Date())) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_48 $$ if ("AlignmentArray".equals(alignmentsType)) [CD]
Line_13 $$ String alignmentsType = "AlignmentGrids" --> Line_48 $$ if ("AlignmentArray".equals(alignmentsType)) [FD]
Line_48 $$ if ("AlignmentArray".equals(alignmentsType)) --> Line_49 $$ alignments = SuffixArrayFactory.createAlignments(trainAlign_fileName, srcSA, tgtSA) [CD]
Line_11 $$ String trainAlign_fileName = (inFile_params.readLine().split("\\s+"))[0] --> Line_49 $$ alignments = SuffixArrayFactory.createAlignments(trainAlign_fileName, srcSA, tgtSA) [FD]
Line_48 $$ if ("AlignmentArray".equals(alignmentsType)) --> Line_50 $$ if ("AlignmentGrids".equals(alignmentsType) || "AlignmentsGrid".equals(alignmentsType)) [CD]
Line_13 $$ String alignmentsType = "AlignmentGrids" --> Line_50 $$ if ("AlignmentGrids".equals(alignmentsType) || "AlignmentsGrid".equals(alignmentsType)) [FD]
Line_50 $$ if ("AlignmentGrids".equals(alignmentsType) || "AlignmentsGrid".equals(alignmentsType)) --> Line_52 $$ if ("MemoryMappedAlignmentGrids".equals(alignmentsType)) [CD]
Line_13 $$ String alignmentsType = "AlignmentGrids" --> Line_52 $$ if ("MemoryMappedAlignmentGrids".equals(alignmentsType)) [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_55 $$ if (!fileExists(alignCache_fileName)) [CD]
Line_12 $$ String alignCache_fileName = (inFile_params.readLine().split("\\s+"))[0] --> Line_55 $$ if (!fileExists(alignCache_fileName)) [FD]
Line_60 $$ ObjectInputStream in = new ObjectInputStream(new FileInputStream(alignCache_fileName)) --> Line_61 $$ alreadyResolved_srcSet = (HashMap<String, TreeSet<Integer>>) in.readObject() [FD]
Line_60 $$ ObjectInputStream in = new ObjectInputStream(new FileInputStream(alignCache_fileName)) --> Line_62 $$ alreadyResolved_tgtSet = (HashMap<String, TreeSet<Integer>>) in.readObject() [FD]
Line_60 $$ ObjectInputStream in = new ObjectInputStream(new FileInputStream(alignCache_fileName)) --> Line_63 $$ in.close() [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_75 $$ println("Processing candidates @ " + (new Date())) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_76 $$ PrintWriter outFile_alignSrcCand_phrasal = new PrintWriter(alignSrcCand_phrasal_fileName) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_77 $$ PrintWriter outFile_alignSrcCand_word = new PrintWriter(alignSrcCand_word_fileName) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_78 $$ InputStream inStream_cands = new FileInputStream(new File(cands_fileName)) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_79 $$ BufferedReader candsFile = new BufferedReader(new InputStreamReader(inStream_cands, "utf8")) [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_80 $$ String line = "" [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_81 $$ String cand = "" [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_82 $$ line = candsFile.readLine() [CD]
Line_80 $$ String line = "" --> Line_82 $$ line = candsFile.readLine() [FD]
Line_79 $$ BufferedReader candsFile = new BufferedReader(new InputStreamReader(inStream_cands, "utf8")) --> Line_82 $$ line = candsFile.readLine() [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_83 $$ int countSatisfied = 0 [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_84 $$ int countAll = 0 [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_85 $$ int countSatisfied_sizeOne = 0 [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_86 $$ int countAll_sizeOne = 0 [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_87 $$ int prev_i = -1 [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_88 $$ String srcSent = "" [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_89 $$ String[] srcWords = null [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_90 $$ int candsRead = 0 [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_91 $$ int C50count = 0 [CD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_92 $$ while (line != null) [CD]
Line_80 $$ String line = "" --> Line_92 $$ while (line != null) [FD]
Line_82 $$ line = candsFile.readLine() --> Line_92 $$ while (line != null) [FD]
Line_92 $$ while (line != null) --> Line_93 $$ ++candsRead [CD]
Line_90 $$ int candsRead = 0 --> Line_93 $$ ++candsRead [FD]
Line_92 $$ while (line != null) --> Line_94 $$ println("Read candidate on line #" + candsRead) [CD]
Line_92 $$ while (line != null) --> Line_95 $$ int i = toInt((line.substring(0, line.indexOf("|||"))).trim()) [CD]
Line_80 $$ String line = "" --> Line_95 $$ int i = toInt((line.substring(0, line.indexOf("|||"))).trim()) [FD]
Line_82 $$ line = candsFile.readLine() --> Line_95 $$ int i = toInt((line.substring(0, line.indexOf("|||"))).trim()) [FD]
Line_92 $$ while (line != null) --> Line_96 $$ if (i != prev_i) [CD]
Line_95 $$ int i = toInt((line.substring(0, line.indexOf("|||"))).trim()) --> Line_96 $$ if (i != prev_i) [FD]
Line_20 $$ for (int i = 0; i < numSentences; ++i) --> Line_96 $$ if (i != prev_i) [FD]
Line_87 $$ int prev_i = -1 --> Line_96 $$ if (i != prev_i) [FD]
Line_96 $$ if (i != prev_i) --> Line_97 $$ srcSent = srcSentences[i] [CD]
Line_88 $$ String srcSent = "" --> Line_97 $$ srcSent = srcSentences[i] [FD]
Line_96 $$ if (i != prev_i) --> Line_98 $$ srcWords = srcSent.split("\\s+") [CD]
Line_89 $$ String[] srcWords = null --> Line_98 $$ srcWords = srcSent.split("\\s+") [FD]
Line_97 $$ srcSent = srcSentences[i] --> Line_98 $$ srcWords = srcSent.split("\\s+") [FD]
Line_88 $$ String srcSent = "" --> Line_98 $$ srcWords = srcSent.split("\\s+") [FD]
Line_96 $$ if (i != prev_i) --> Line_99 $$ prev_i = i [CD]
Line_87 $$ int prev_i = -1 --> Line_99 $$ prev_i = i [FD]
Line_95 $$ int i = toInt((line.substring(0, line.indexOf("|||"))).trim()) --> Line_99 $$ prev_i = i [FD]
Line_20 $$ for (int i = 0; i < numSentences; ++i) --> Line_99 $$ prev_i = i [FD]
Line_96 $$ if (i != prev_i) --> Line_100 $$ println("New value for i: " + i + " seen @ " + (new Date())) [CD]
Line_96 $$ if (i != prev_i) --> Line_101 $$ C50count = 0 [CD]
Line_91 $$ int C50count = 0 --> Line_101 $$ C50count = 0 [FD]
Line_96 $$ if (i != prev_i) --> Line_103 $$ ++C50count [CD]
Line_101 $$ C50count = 0 --> Line_103 $$ ++C50count [FD]
Line_91 $$ int C50count = 0 --> Line_103 $$ ++C50count [FD]
Line_92 $$ while (line != null) --> Line_105 $$ line = (line.substring(line.indexOf("|||") + 3)).trim() [CD]
Line_80 $$ String line = "" --> Line_105 $$ line = (line.substring(line.indexOf("|||") + 3)).trim() [FD]
Line_82 $$ line = candsFile.readLine() --> Line_105 $$ line = (line.substring(line.indexOf("|||") + 3)).trim() [FD]
Line_92 $$ while (line != null) --> Line_106 $$ cand = (line.substring(0, line.indexOf("|||"))).trim() [CD]
Line_81 $$ String cand = "" --> Line_106 $$ cand = (line.substring(0, line.indexOf("|||"))).trim() [FD]
Line_105 $$ line = (line.substring(line.indexOf("|||") + 3)).trim() --> Line_106 $$ cand = (line.substring(0, line.indexOf("|||"))).trim() [FD]
Line_80 $$ String line = "" --> Line_106 $$ cand = (line.substring(0, line.indexOf("|||"))).trim() [FD]
Line_82 $$ line = candsFile.readLine() --> Line_106 $$ cand = (line.substring(0, line.indexOf("|||"))).trim() [FD]
Line_92 $$ while (line != null) --> Line_107 $$ cand = cand.substring(cand.indexOf(" ") + 1, cand.length() - 1) [CD]
Line_106 $$ cand = (line.substring(0, line.indexOf("|||"))).trim() --> Line_107 $$ cand = cand.substring(cand.indexOf(" ") + 1, cand.length() - 1) [FD]
Line_81 $$ String cand = "" --> Line_107 $$ cand = cand.substring(cand.indexOf(" ") + 1, cand.length() - 1) [FD]
Line_92 $$ while (line != null) --> Line_108 $$ JoshuaDerivationTree DT = new JoshuaDerivationTree(cand, 0) [CD]
Line_92 $$ while (line != null) --> Line_109 $$ String candSent = DT.toSentence() [CD]
Line_108 $$ JoshuaDerivationTree DT = new JoshuaDerivationTree(cand, 0) --> Line_109 $$ String candSent = DT.toSentence() [FD]
Line_92 $$ while (line != null) --> Line_110 $$ String[] candWords = candSent.split("\\s+") [CD]
Line_109 $$ String candSent = DT.toSentence() --> Line_110 $$ String[] candWords = candSent.split("\\s+") [FD]
Line_92 $$ while (line != null) --> Line_111 $$ String alignSrcCand = DT.alignments() [CD]
Line_108 $$ JoshuaDerivationTree DT = new JoshuaDerivationTree(cand, 0) --> Line_111 $$ String alignSrcCand = DT.alignments() [FD]
Line_92 $$ while (line != null) --> Line_112 $$ outFile_alignSrcCand_phrasal.println(alignSrcCand) [CD]
Line_76 $$ PrintWriter outFile_alignSrcCand_phrasal = new PrintWriter(alignSrcCand_phrasal_fileName) --> Line_112 $$ outFile_alignSrcCand_phrasal.println(alignSrcCand) [FD]
Line_111 $$ String alignSrcCand = DT.alignments() --> Line_112 $$ outFile_alignSrcCand_phrasal.println(alignSrcCand) [FD]
Line_92 $$ while (line != null) --> Line_113 $$ println("  i = " + i + ", alignSrcCand: " + alignSrcCand) [CD]
Line_92 $$ while (line != null) --> Line_114 $$ String alignSrcCand_res = "" [CD]
Line_92 $$ while (line != null) --> Line_115 $$ String[] linksSrcCand = alignSrcCand.split("\\s+") [CD]
Line_111 $$ String alignSrcCand = DT.alignments() --> Line_115 $$ String[] linksSrcCand = alignSrcCand.split("\\s+") [FD]
Line_92 $$ while (line != null) --> Line_116 $$ for (int k = 0; k < linksSrcCand.length; ++k) [CD]
Line_116 $$ for (int k = 0; k < linksSrcCand.length; ++k) --> Line_117 $$ String link = linksSrcCand[k] [CD]
Line_116 $$ for (int k = 0; k < linksSrcCand.length; ++k) --> Line_118 $$ if (link.indexOf(',') == -1) [CD]
Line_117 $$ String link = linksSrcCand[k] --> Line_118 $$ if (link.indexOf(',') == -1) [FD]
Line_118 $$ if (link.indexOf(',') == -1) --> Line_119 $$ alignSrcCand_res += " " + link.replaceFirst("--", "-") [CD]
Line_114 $$ String alignSrcCand_res = "" --> Line_119 $$ alignSrcCand_res += " " + link.replaceFirst("--", "-") [FD]
Line_117 $$ String link = linksSrcCand[k] --> Line_119 $$ alignSrcCand_res += " " + link.replaceFirst("--", "-") [FD]
Line_118 $$ if (link.indexOf(',') == -1) --> Line_121 $$ alignSrcCand_res += " " + resolve(link, srcWords, candWords) [CD]
Line_119 $$ alignSrcCand_res += " " + link.replaceFirst("--", "-") --> Line_121 $$ alignSrcCand_res += " " + resolve(link, srcWords, candWords) [FD]
Line_114 $$ String alignSrcCand_res = "" --> Line_121 $$ alignSrcCand_res += " " + resolve(link, srcWords, candWords) [FD]
Line_117 $$ String link = linksSrcCand[k] --> Line_121 $$ alignSrcCand_res += " " + resolve(link, srcWords, candWords) [FD]
Line_98 $$ srcWords = srcSent.split("\\s+") --> Line_121 $$ alignSrcCand_res += " " + resolve(link, srcWords, candWords) [FD]
Line_89 $$ String[] srcWords = null --> Line_121 $$ alignSrcCand_res += " " + resolve(link, srcWords, candWords) [FD]
Line_110 $$ String[] candWords = candSent.split("\\s+") --> Line_121 $$ alignSrcCand_res += " " + resolve(link, srcWords, candWords) [FD]
Line_92 $$ while (line != null) --> Line_124 $$ alignSrcCand_res = alignSrcCand_res.trim() [CD]
Line_119 $$ alignSrcCand_res += " " + link.replaceFirst("--", "-") --> Line_124 $$ alignSrcCand_res = alignSrcCand_res.trim() [FD]
Line_121 $$ alignSrcCand_res += " " + resolve(link, srcWords, candWords) --> Line_124 $$ alignSrcCand_res = alignSrcCand_res.trim() [FD]
Line_114 $$ String alignSrcCand_res = "" --> Line_124 $$ alignSrcCand_res = alignSrcCand_res.trim() [FD]
Line_92 $$ while (line != null) --> Line_125 $$ println("  i = " + i + ", alignSrcCand_res: " + alignSrcCand_res) [CD]
Line_92 $$ while (line != null) --> Line_126 $$ outFile_alignSrcCand_word.println(alignSrcCand_res) [CD]
Line_77 $$ PrintWriter outFile_alignSrcCand_word = new PrintWriter(alignSrcCand_word_fileName) --> Line_126 $$ outFile_alignSrcCand_word.println(alignSrcCand_res) [FD]
Line_119 $$ alignSrcCand_res += " " + link.replaceFirst("--", "-") --> Line_126 $$ outFile_alignSrcCand_word.println(alignSrcCand_res) [FD]
Line_121 $$ alignSrcCand_res += " " + resolve(link, srcWords, candWords) --> Line_126 $$ outFile_alignSrcCand_word.println(alignSrcCand_res) [FD]
Line_114 $$ String alignSrcCand_res = "" --> Line_126 $$ outFile_alignSrcCand_word.println(alignSrcCand_res) [FD]
Line_124 $$ alignSrcCand_res = alignSrcCand_res.trim() --> Line_126 $$ outFile_alignSrcCand_word.println(alignSrcCand_res) [FD]
Line_92 $$ while (line != null) --> Line_127 $$ if (C50count == 50) [CD]
Line_101 $$ C50count = 0 --> Line_127 $$ if (C50count == 50) [FD]
Line_91 $$ int C50count = 0 --> Line_127 $$ if (C50count == 50) [FD]
Line_127 $$ if (C50count == 50) --> Line_128 $$ println("50C @ " + (new Date())) [CD]
Line_127 $$ if (C50count == 50) --> Line_129 $$ C50count = 0 [CD]
Line_101 $$ C50count = 0 --> Line_129 $$ C50count = 0 [FD]
Line_91 $$ int C50count = 0 --> Line_129 $$ C50count = 0 [FD]
Line_92 $$ while (line != null) --> Line_131 $$ line = candsFile.readLine() [CD]
Line_105 $$ line = (line.substring(line.indexOf("|||") + 3)).trim() --> Line_131 $$ line = candsFile.readLine() [FD]
Line_80 $$ String line = "" --> Line_131 $$ line = candsFile.readLine() [FD]
Line_82 $$ line = candsFile.readLine() --> Line_131 $$ line = candsFile.readLine() [FD]
Line_79 $$ BufferedReader candsFile = new BufferedReader(new InputStreamReader(inStream_cands, "utf8")) --> Line_131 $$ line = candsFile.readLine() [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_133 $$ outFile_alignSrcCand_phrasal.close() [CD]
Line_76 $$ PrintWriter outFile_alignSrcCand_phrasal = new PrintWriter(alignSrcCand_phrasal_fileName) --> Line_133 $$ outFile_alignSrcCand_phrasal.close() [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_134 $$ outFile_alignSrcCand_word.close() [CD]
Line_77 $$ PrintWriter outFile_alignSrcCand_word = new PrintWriter(alignSrcCand_word_fileName) --> Line_134 $$ outFile_alignSrcCand_word.close() [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_135 $$ candsFile.close() [CD]
Line_79 $$ BufferedReader candsFile = new BufferedReader(new InputStreamReader(inStream_cands, "utf8")) --> Line_135 $$ candsFile.close() [FD]
Line_2 $$ public static void main(String[] args) throws IOException --> Line_136 $$ println("Finished processing candidates @ " + (new Date())) [CD]
Line_138 $$ ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(alignCache_fileName)) --> Line_139 $$ out.writeObject(alreadyResolved_srcSet) [FD]
Line_138 $$ ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(alignCache_fileName)) --> Line_140 $$ out.writeObject(alreadyResolved_tgtSet) [FD]
Line_138 $$ ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(alignCache_fileName)) --> Line_141 $$ out.flush() [FD]
Line_138 $$ ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(alignCache_fileName)) --> Line_142 $$ out.close() [FD]
Line_105 $$ line = (line.substring(line.indexOf("|||") + 3)).trim() --> Line_92 $$ while (line != null) [FD]
Line_131 $$ line = candsFile.readLine() --> Line_92 $$ while (line != null) [FD]
Line_105 $$ line = (line.substring(line.indexOf("|||") + 3)).trim() --> Line_95 $$ int i = toInt((line.substring(0, line.indexOf("|||"))).trim()) [FD]
Line_131 $$ line = candsFile.readLine() --> Line_95 $$ int i = toInt((line.substring(0, line.indexOf("|||"))).trim()) [FD]
Line_99 $$ prev_i = i --> Line_96 $$ if (i != prev_i) [FD]
Line_129 $$ C50count = 0 --> Line_103 $$ ++C50count [FD]
Line_131 $$ line = candsFile.readLine() --> Line_105 $$ line = (line.substring(line.indexOf("|||") + 3)).trim() [FD]
Line_131 $$ line = candsFile.readLine() --> Line_106 $$ cand = (line.substring(0, line.indexOf("|||"))).trim() [FD]
Line_129 $$ C50count = 0 --> Line_127 $$ if (C50count == 50) [FD]
