Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_3 $$ FileOutputStream out = null [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_4 $$ mLog.debug("overwriteWarFile = " + overwriteWarFile) [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_5 $$ String fileData = null [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_6 $$ String filepath = location [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_7 $$ String[] splitString = filepath.split("/") [CD]
Line_6 $$ String filepath = location --> Line_7 $$ String[] splitString = filepath.split("/") [FD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_8 $$ String filename = splitString[splitString.length - 1] [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_9 $$ int fileNameLength = filename.length() [CD]
Line_8 $$ String filename = splitString[splitString.length - 1] --> Line_9 $$ int fileNameLength = filename.length() [FD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_10 $$ warname = filename.substring(0, fileNameLength - 4) [CD]
Line_8 $$ String filename = splitString[splitString.length - 1] --> Line_10 $$ warname = filename.substring(0, fileNameLength - 4) [FD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_11 $$ mLog.debug("WAR file name = " + warname) [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_12 $$ String filepath2 = warDesination + File.separator + filename [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_14 $$ mLog.debug("filepath2 = " + filepath2) [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_15 $$ mLog.debug("ret = " + ret) [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_16 $$ mLog.debug("filepath = " + filepath) [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_17 $$ boolean warExists = new File(filepath2).exists() [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_18 $$ boolean webAppExists = true [CD]
Line_12 $$ String filepath2 = warDesination + File.separator + filename --> Line_20 $$ String webAppName = filepath2.substring(0, (filepath2.length() - 4)) [FD]
Line_18 $$ boolean webAppExists = true --> Line_22 $$ webAppExists = new File(webAppName).isDirectory() [FD]
Line_18 $$ boolean webAppExists = true --> Line_23 $$ if (!webAppExists) [FD]
Line_22 $$ webAppExists = new File(webAppName).isDirectory() --> Line_23 $$ if (!webAppExists) [FD]
Line_23 $$ if (!webAppExists) --> Line_24 $$ URL url = new URL(filepath) [CD]
Line_23 $$ if (!webAppExists) --> Line_25 $$ File targetFile = new File(filepath2) [CD]
Line_23 $$ if (!webAppExists) --> Line_26 $$ if (!targetFile.exists()) [CD]
Line_25 $$ File targetFile = new File(filepath2) --> Line_26 $$ if (!targetFile.exists()) [FD]
Line_26 $$ if (!targetFile.exists()) --> Line_27 $$ targetFile.createNewFile() [CD]
Line_25 $$ File targetFile = new File(filepath2) --> Line_27 $$ targetFile.createNewFile() [FD]
Line_23 $$ if (!webAppExists) --> Line_29 $$ InputStream in = null [CD]
Line_29 $$ InputStream in = null --> Line_31 $$ in = url.openStream() [FD]
Line_24 $$ URL url = new URL(filepath) --> Line_31 $$ in = url.openStream() [FD]
Line_3 $$ FileOutputStream out = null --> Line_32 $$ out = new FileOutputStream(targetFile) [FD]
Line_23 $$ if (!webAppExists) --> Line_37 $$ URLConnection con = url.openConnection() [CD]
Line_24 $$ URL url = new URL(filepath) --> Line_37 $$ URLConnection con = url.openConnection() [FD]
Line_23 $$ if (!webAppExists) --> Line_38 $$ int fileLength = con.getContentLength() [CD]
Line_37 $$ URLConnection con = url.openConnection() --> Line_38 $$ int fileLength = con.getContentLength() [FD]
Line_23 $$ if (!webAppExists) --> Line_39 $$ ReadableByteChannel channelIn = Channels.newChannel(in) [CD]
Line_29 $$ InputStream in = null --> Line_39 $$ ReadableByteChannel channelIn = Channels.newChannel(in) [FD]
Line_31 $$ in = url.openStream() --> Line_39 $$ ReadableByteChannel channelIn = Channels.newChannel(in) [FD]
Line_23 $$ if (!webAppExists) --> Line_40 $$ FileChannel channelOut = out.getChannel() [CD]
Line_3 $$ FileOutputStream out = null --> Line_40 $$ FileChannel channelOut = out.getChannel() [FD]
Line_32 $$ out = new FileOutputStream(targetFile) --> Line_40 $$ FileChannel channelOut = out.getChannel() [FD]
Line_23 $$ if (!webAppExists) --> Line_41 $$ channelOut.transferFrom(channelIn, 0, fileLength) [CD]
Line_40 $$ FileChannel channelOut = out.getChannel() --> Line_41 $$ channelOut.transferFrom(channelIn, 0, fileLength) [FD]
Line_39 $$ ReadableByteChannel channelIn = Channels.newChannel(in) --> Line_41 $$ channelOut.transferFrom(channelIn, 0, fileLength) [FD]
Line_38 $$ int fileLength = con.getContentLength() --> Line_41 $$ channelOut.transferFrom(channelIn, 0, fileLength) [FD]
Line_23 $$ if (!webAppExists) --> Line_42 $$ channelIn.close() [CD]
Line_39 $$ ReadableByteChannel channelIn = Channels.newChannel(in) --> Line_42 $$ channelIn.close() [FD]
Line_23 $$ if (!webAppExists) --> Line_43 $$ channelOut.close() [CD]
Line_40 $$ FileChannel channelOut = out.getChannel() --> Line_43 $$ channelOut.close() [FD]
Line_23 $$ if (!webAppExists) --> Line_44 $$ out.flush() [CD]
Line_3 $$ FileOutputStream out = null --> Line_44 $$ out.flush() [FD]
Line_32 $$ out = new FileOutputStream(targetFile) --> Line_44 $$ out.flush() [FD]
Line_23 $$ if (!webAppExists) --> Line_45 $$ out.close() [CD]
Line_3 $$ FileOutputStream out = null --> Line_45 $$ out.close() [FD]
Line_32 $$ out = new FileOutputStream(targetFile) --> Line_45 $$ out.close() [FD]
Line_23 $$ if (!webAppExists) --> Line_46 $$ in.close() [CD]
Line_29 $$ InputStream in = null --> Line_46 $$ in.close() [FD]
Line_31 $$ in = url.openStream() --> Line_46 $$ in.close() [FD]
Line_23 $$ if (!webAppExists) --> Line_47 $$ long time = System.currentTimeMillis() [CD]
Line_23 $$ if (!webAppExists) --> Line_48 $$ check(ret, time, STARTCONTROL) [CD]
Line_47 $$ long time = System.currentTimeMillis() --> Line_48 $$ check(ret, time, STARTCONTROL) [FD]
Line_18 $$ boolean webAppExists = true --> Line_51 $$ webAppExists = false [FD]
Line_22 $$ webAppExists = new File(webAppName).isDirectory() --> Line_51 $$ webAppExists = false [FD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_53 $$ mLog.debug("webAppExists = " + webAppExists) [CD]
Line_2 $$ public String installCode(String serviceName, String location) throws DeploymentException --> Line_54 $$ return (ret) [CD]
