Line_2 $$ public void badFetchServesCached() throws Exception --> Line_3 $$ HttpRequest firstRequest = createCacheableRequest() [CD]
Line_2 $$ public void badFetchServesCached() throws Exception --> Line_4 $$ expect(pipeline.execute(firstRequest)).andReturn(new HttpResponse(LOCAL_SPEC_XML)).once() [CD]
Line_3 $$ HttpRequest firstRequest = createCacheableRequest() --> Line_4 $$ expect(pipeline.execute(firstRequest)).andReturn(new HttpResponse(LOCAL_SPEC_XML)).once() [FD]
Line_2 $$ public void badFetchServesCached() throws Exception --> Line_5 $$ HttpRequest secondRequest = createIgnoreCacheRequest() [CD]
Line_2 $$ public void badFetchServesCached() throws Exception --> Line_6 $$ expect(pipeline.execute(secondRequest)).andReturn(HttpResponse.error()).once() [CD]
Line_5 $$ HttpRequest secondRequest = createIgnoreCacheRequest() --> Line_6 $$ expect(pipeline.execute(secondRequest)).andReturn(HttpResponse.error()).once() [FD]
Line_2 $$ public void badFetchServesCached() throws Exception --> Line_7 $$ replay(pipeline) [CD]
Line_2 $$ public void badFetchServesCached() throws Exception --> Line_8 $$ GadgetSpec original = specFactory.getGadgetSpec(createContext(SPEC_URL, false)) [CD]
Line_2 $$ public void badFetchServesCached() throws Exception --> Line_9 $$ GadgetSpec cached = specFactory.getGadgetSpec(createContext(SPEC_URL, true)) [CD]
Line_2 $$ public void badFetchServesCached() throws Exception --> Line_10 $$ assertEquals(original.getUrl(), cached.getUrl()) [CD]
Line_8 $$ GadgetSpec original = specFactory.getGadgetSpec(createContext(SPEC_URL, false)) --> Line_10 $$ assertEquals(original.getUrl(), cached.getUrl()) [FD]
Line_9 $$ GadgetSpec cached = specFactory.getGadgetSpec(createContext(SPEC_URL, true)) --> Line_10 $$ assertEquals(original.getUrl(), cached.getUrl()) [FD]
Line_2 $$ public void badFetchServesCached() throws Exception --> Line_11 $$ assertEquals(original.getChecksum(), cached.getChecksum()) [CD]
Line_8 $$ GadgetSpec original = specFactory.getGadgetSpec(createContext(SPEC_URL, false)) --> Line_11 $$ assertEquals(original.getChecksum(), cached.getChecksum()) [FD]
Line_9 $$ GadgetSpec cached = specFactory.getGadgetSpec(createContext(SPEC_URL, true)) --> Line_11 $$ assertEquals(original.getChecksum(), cached.getChecksum()) [FD]
