Line_2 $$ private static Map<String, File> loadServiceCache() --> Line_3 $$ ArrayList<String> preferredOrder = new ArrayList<String>() [CD]
Line_2 $$ private static Map<String, File> loadServiceCache() --> Line_4 $$ HashMap<String, File> serviceFileMapping = new HashMap<String, File>() [CD]
Line_2 $$ private static Map<String, File> loadServiceCache() --> Line_5 $$ File file = new File(IsqlToolkit.getBaseDirectory(), CACHE_FILE) [CD]
Line_2 $$ private static Map<String, File> loadServiceCache() --> Line_6 $$ if (!file.exists()) [CD]
Line_5 $$ File file = new File(IsqlToolkit.getBaseDirectory(), CACHE_FILE) --> Line_6 $$ if (!file.exists()) [FD]
Line_6 $$ if (!file.exists()) --> Line_7 $$ return serviceFileMapping [CD]
Line_2 $$ private static Map<String, File> loadServiceCache() --> Line_9 $$ if (file.canRead()) [CD]
Line_5 $$ File file = new File(IsqlToolkit.getBaseDirectory(), CACHE_FILE) --> Line_9 $$ if (file.canRead()) [FD]
Line_9 $$ if (file.canRead()) --> Line_10 $$ FileReader fileReader = null [CD]
Line_10 $$ FileReader fileReader = null --> Line_12 $$ fileReader = new FileReader(file) [FD]
Line_13 $$ BufferedReader lineReader = new BufferedReader(fileReader) --> Line_14 $$ while (lineReader.ready()) [FD]
Line_14 $$ while (lineReader.ready()) --> Line_15 $$ String data = lineReader.readLine() [CD]
Line_13 $$ BufferedReader lineReader = new BufferedReader(fileReader) --> Line_15 $$ String data = lineReader.readLine() [FD]
Line_14 $$ while (lineReader.ready()) --> Line_16 $$ if (data.charAt(0) == '#') [CD]
Line_15 $$ String data = lineReader.readLine() --> Line_16 $$ if (data.charAt(0) == '#') [FD]
Line_14 $$ while (lineReader.ready()) --> Line_19 $$ int idx0 = 0 [CD]
Line_14 $$ while (lineReader.ready()) --> Line_20 $$ int idx1 = data.indexOf(SERVICE_FIELD_SEPERATOR) [CD]
Line_15 $$ String data = lineReader.readLine() --> Line_20 $$ int idx1 = data.indexOf(SERVICE_FIELD_SEPERATOR) [FD]
Line_14 $$ while (lineReader.ready()) --> Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) [CD]
Line_15 $$ String data = lineReader.readLine() --> Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) [FD]
Line_19 $$ int idx0 = 0 --> Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) [FD]
Line_20 $$ int idx1 = data.indexOf(SERVICE_FIELD_SEPERATOR) --> Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) [FD]
Line_14 $$ while (lineReader.ready()) --> Line_22 $$ String uri = StringUtilities.decodeASCII(data.substring(idx1 + 1)) [CD]
Line_15 $$ String data = lineReader.readLine() --> Line_22 $$ String uri = StringUtilities.decodeASCII(data.substring(idx1 + 1)) [FD]
Line_14 $$ while (lineReader.ready()) --> Line_23 $$ if (name.equalsIgnoreCase(KEY_SERVICE_LIST)) [CD]
Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) --> Line_23 $$ if (name.equalsIgnoreCase(KEY_SERVICE_LIST)) [FD]
Line_23 $$ if (name.equalsIgnoreCase(KEY_SERVICE_LIST)) --> Line_24 $$ StringTokenizer st = new StringTokenizer(uri, SERVICE_SEPERATOR) [CD]
Line_23 $$ if (name.equalsIgnoreCase(KEY_SERVICE_LIST)) --> Line_25 $$ while (st.hasMoreTokens()) [CD]
Line_24 $$ StringTokenizer st = new StringTokenizer(uri, SERVICE_SEPERATOR) --> Line_25 $$ while (st.hasMoreTokens()) [FD]
Line_25 $$ while (st.hasMoreTokens()) --> Line_26 $$ String serviceName = st.nextToken() [CD]
Line_24 $$ StringTokenizer st = new StringTokenizer(uri, SERVICE_SEPERATOR) --> Line_26 $$ String serviceName = st.nextToken() [FD]
Line_25 $$ while (st.hasMoreTokens()) --> Line_27 $$ preferredOrder.add(serviceName.toLowerCase().trim()) [CD]
Line_3 $$ ArrayList<String> preferredOrder = new ArrayList<String>() --> Line_27 $$ preferredOrder.add(serviceName.toLowerCase().trim()) [FD]
Line_26 $$ String serviceName = st.nextToken() --> Line_27 $$ preferredOrder.add(serviceName.toLowerCase().trim()) [FD]
Line_34 $$ if (serviceFile.isDirectory()) --> Line_35 $$ logger.warn(messages.format("compatability_kit.service_mapped_to_directory", name, uri)) [CD]
Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) --> Line_35 $$ logger.warn(messages.format("compatability_kit.service_mapped_to_directory", name, uri)) [FD]
Line_22 $$ String uri = StringUtilities.decodeASCII(data.substring(idx1 + 1)) --> Line_35 $$ logger.warn(messages.format("compatability_kit.service_mapped_to_directory", name, uri)) [FD]
Line_34 $$ if (serviceFile.isDirectory()) --> Line_37 $$ if (!serviceFile.canRead()) [CD]
Line_37 $$ if (!serviceFile.canRead()) --> Line_38 $$ logger.warn(messages.format("compatability_kit.service_not_readable", name, uri)) [CD]
Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) --> Line_38 $$ logger.warn(messages.format("compatability_kit.service_not_readable", name, uri)) [FD]
Line_22 $$ String uri = StringUtilities.decodeASCII(data.substring(idx1 + 1)) --> Line_38 $$ logger.warn(messages.format("compatability_kit.service_not_readable", name, uri)) [FD]
Line_37 $$ if (!serviceFile.canRead()) --> Line_40 $$ if (!serviceFile.exists()) [CD]
Line_40 $$ if (!serviceFile.exists()) --> Line_41 $$ logger.warn(messages.format("compatability_kit.service_does_not_exist", name, uri)) [CD]
Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) --> Line_41 $$ logger.warn(messages.format("compatability_kit.service_does_not_exist", name, uri)) [FD]
Line_22 $$ String uri = StringUtilities.decodeASCII(data.substring(idx1 + 1)) --> Line_41 $$ logger.warn(messages.format("compatability_kit.service_does_not_exist", name, uri)) [FD]
Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) --> Line_44 $$ String bindName = name.toLowerCase().trim() [FD]
Line_4 $$ HashMap<String, File> serviceFileMapping = new HashMap<String, File>() --> Line_53 $$ if (serviceFileMapping.put(bindName, serviceFile) != null) [FD]
Line_53 $$ if (serviceFileMapping.put(bindName, serviceFile) != null) --> Line_54 $$ logger.warn(messages.format("compatability_kit.service_duplicate_name_error", name, uri)) [CD]
Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) --> Line_54 $$ logger.warn(messages.format("compatability_kit.service_duplicate_name_error", name, uri)) [FD]
Line_22 $$ String uri = StringUtilities.decodeASCII(data.substring(idx1 + 1)) --> Line_54 $$ logger.warn(messages.format("compatability_kit.service_duplicate_name_error", name, uri)) [FD]
Line_21 $$ String name = StringUtilities.decodeASCII(data.substring(idx0, idx1)) --> Line_57 $$ logger.error(messages.format("compatability_kit.service_uri_error", name, uri), e) [FD]
Line_22 $$ String uri = StringUtilities.decodeASCII(data.substring(idx1 + 1)) --> Line_57 $$ logger.error(messages.format("compatability_kit.service_uri_error", name, uri), e) [FD]
Line_10 $$ FileReader fileReader = null --> Line_63 $$ if (fileReader != null) [FD]
Line_12 $$ fileReader = new FileReader(file) --> Line_63 $$ if (fileReader != null) [FD]
Line_10 $$ FileReader fileReader = null --> Line_65 $$ fileReader.close() [FD]
Line_12 $$ fileReader = new FileReader(file) --> Line_65 $$ fileReader.close() [FD]
Line_2 $$ private static Map<String, File> loadServiceCache() --> Line_71 $$ return serviceFileMapping [CD]
