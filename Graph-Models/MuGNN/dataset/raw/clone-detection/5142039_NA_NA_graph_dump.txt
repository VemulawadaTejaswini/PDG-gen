Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_3 $$ ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath)) [CD]
Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_4 $$ BufferedInputStream bis = new BufferedInputStream(arcInputStream) [CD]
Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_5 $$ File baseDir = new File(readPath).getParentFile() [CD]
Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_6 $$ String basePath = baseDir.getPath() + "/" [CD]
Line_5 $$ File baseDir = new File(readPath).getParentFile() --> Line_6 $$ String basePath = baseDir.getPath() + "/" [FD]
Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_7 $$ if (mkdir) [CD]
Line_7 $$ if (mkdir) --> Line_8 $$ String[] schema = readPath.split("/") [CD]
Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_8 $$ String[] schema = readPath.split("/") [FD]
Line_7 $$ if (mkdir) --> Line_9 $$ String baseName = schema[schema.length - 1].replaceAll(".zip", "") [CD]
Line_7 $$ if (mkdir) --> Line_10 $$ FileUtils.forceMkdir(new File(basePath + baseName)) [CD]
Line_7 $$ if (mkdir) --> Line_11 $$ basePath = basePath + baseName + "/" [CD]
Line_6 $$ String basePath = baseDir.getPath() + "/" --> Line_11 $$ basePath = basePath + baseName + "/" [FD]
Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_13 $$ ArchiveEntry entry [CD]
Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_14 $$ while ((entry = arcInputStream.getNextEntry()) != null) [CD]
Line_3 $$ ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath)) --> Line_14 $$ while ((entry = arcInputStream.getNextEntry()) != null) [FD]
Line_15 $$ if (entry.isDirectory()) --> Line_16 $$ FileUtils.forceMkdir(new File(basePath + entry.getName())) [CD]
Line_15 $$ if (entry.isDirectory()) --> Line_18 $$ String writePath = basePath + entry.getName() [CD]
Line_15 $$ if (entry.isDirectory()) --> Line_19 $$ String dirName = FilenameUtils.getPath(writePath) [CD]
Line_18 $$ String writePath = basePath + entry.getName() --> Line_19 $$ String dirName = FilenameUtils.getPath(writePath) [FD]
Line_15 $$ if (entry.isDirectory()) --> Line_20 $$ FileUtils.forceMkdir(new File(dirName)) [CD]
Line_15 $$ if (entry.isDirectory()) --> Line_21 $$ BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath))) [CD]
Line_15 $$ if (entry.isDirectory()) --> Line_22 $$ int i = 0 [CD]
Line_15 $$ if (entry.isDirectory()) --> Line_23 $$ while ((i = bis.read()) != -1) [CD]
Line_22 $$ int i = 0 --> Line_23 $$ while ((i = bis.read()) != -1) [FD]
Line_4 $$ BufferedInputStream bis = new BufferedInputStream(arcInputStream) --> Line_23 $$ while ((i = bis.read()) != -1) [FD]
Line_23 $$ while ((i = bis.read()) != -1) --> Line_24 $$ bos.write(i) [CD]
Line_23 $$ while ((i = bis.read()) != -1) --> Line_24 $$ bos.write(i) [FD]
Line_21 $$ BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath))) --> Line_24 $$ bos.write(i) [FD]
Line_22 $$ int i = 0 --> Line_24 $$ bos.write(i) [FD]
Line_15 $$ if (entry.isDirectory()) --> Line_26 $$ IOUtils.closeQuietly(bos) [CD]
Line_21 $$ BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath))) --> Line_26 $$ IOUtils.closeQuietly(bos) [FD]
Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_29 $$ IOUtils.closeQuietly(bis) [CD]
Line_4 $$ BufferedInputStream bis = new BufferedInputStream(arcInputStream) --> Line_29 $$ IOUtils.closeQuietly(bis) [FD]
Line_2 $$ public static String uncompress(String readPath, boolean mkdir) throws Exception --> Line_30 $$ return basePath [CD]
