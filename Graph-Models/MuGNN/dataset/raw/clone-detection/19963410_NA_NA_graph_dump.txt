Line_2 $$ public Result sendSMS(String number, String text, Proxy proxy) --> Line_5 $$ if (proxy != null) [FD]
Line_5 $$ if (proxy != null) --> Line_6 $$ HttpHost prox = new HttpHost(proxy.host, proxy.port) [CD]
Line_5 $$ if (proxy != null) --> Line_7 $$ client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, prox) [CD]
Line_6 $$ HttpHost prox = new HttpHost(proxy.host, proxy.port) --> Line_7 $$ client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, prox) [FD]
Line_4 $$ DefaultHttpClient client = new DefaultHttpClient() --> Line_7 $$ client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, prox) [FD]
Line_4 $$ DefaultHttpClient client = new DefaultHttpClient() --> Line_11 $$ HttpResponse response = client.execute(get) [FD]
Line_10 $$ HttpGet get = new HttpGet(target) --> Line_11 $$ HttpResponse response = client.execute(get) [FD]
Line_11 $$ HttpResponse response = client.execute(get) --> Line_12 $$ HttpEntity e = response.getEntity() [FD]
Line_12 $$ HttpEntity e = response.getEntity() --> Line_13 $$ Document doc = ref.getDocumentFromInputStream(e.getContent()) [FD]
Line_13 $$ Document doc = ref.getDocumentFromInputStream(e.getContent()) --> Line_14 $$ List<Element> forms = ref.selectByXPathOnDocument(doc, "//<ns>FORM", doc.getRootElement().getNamespaceURI()) [FD]
Line_14 $$ List<Element> forms = ref.selectByXPathOnDocument(doc, "//<ns>FORM", doc.getRootElement().getNamespaceURI()) --> Line_15 $$ return new Result(Result.SMS_LIMIT_REACHED) [FD]
Line_14 $$ List<Element> forms = ref.selectByXPathOnDocument(doc, "//<ns>FORM", doc.getRootElement().getNamespaceURI()) --> Line_16 $$ Element form = forms.get(0) [FD]
Line_16 $$ Element form = forms.get(0) --> Line_18 $$ List<Element> inputs = ref.selectByXPathOnElement(form, "//<ns>INPUT|//<ns>TEXTAREA|//<ns>SELECT", form.getNamespaceURI()) [FD]
Line_18 $$ List<Element> inputs = ref.selectByXPathOnElement(form, "//<ns>INPUT|//<ns>TEXTAREA|//<ns>SELECT", form.getNamespaceURI()) --> Line_19 $$ Iterator<Element> it = inputs.iterator() [FD]
Line_19 $$ Iterator<Element> it = inputs.iterator() --> Line_20 $$ while (it.hasNext()) [FD]
Line_20 $$ while (it.hasNext()) --> Line_21 $$ Element input = it.next() [CD]
Line_19 $$ Iterator<Element> it = inputs.iterator() --> Line_21 $$ Element input = it.next() [FD]
Line_20 $$ while (it.hasNext()) --> Line_22 $$ String type = input.getAttributeValue("type") [CD]
Line_21 $$ Element input = it.next() --> Line_22 $$ String type = input.getAttributeValue("type") [FD]
Line_20 $$ while (it.hasNext()) --> Line_23 $$ String name = input.getAttributeValue("name") [CD]
Line_21 $$ Element input = it.next() --> Line_23 $$ String name = input.getAttributeValue("name") [FD]
Line_20 $$ while (it.hasNext()) --> Line_24 $$ String value = input.getAttributeValue("value") [CD]
Line_21 $$ Element input = it.next() --> Line_24 $$ String value = input.getAttributeValue("value") [FD]
Line_20 $$ while (it.hasNext()) --> Line_25 $$ if (type != null && type.equals("hidden")) [CD]
Line_22 $$ String type = input.getAttributeValue("type") --> Line_25 $$ if (type != null && type.equals("hidden")) [FD]
Line_25 $$ if (type != null && type.equals("hidden")) --> Line_26 $$ formparas.add(new BasicNameValuePair(name, value)) [CD]
Line_17 $$ List<NameValuePair> formparas = new ArrayList<NameValuePair>() --> Line_26 $$ formparas.add(new BasicNameValuePair(name, value)) [FD]
Line_25 $$ if (type != null && type.equals("hidden")) --> Line_27 $$ if (name != null && name.equals(FORM_NUMBER)) [CD]
Line_23 $$ String name = input.getAttributeValue("name") --> Line_27 $$ if (name != null && name.equals(FORM_NUMBER)) [FD]
Line_27 $$ if (name != null && name.equals(FORM_NUMBER)) --> Line_28 $$ formparas.add(new BasicNameValuePair(name, this.getNumberPart(number))) [CD]
Line_17 $$ List<NameValuePair> formparas = new ArrayList<NameValuePair>() --> Line_28 $$ formparas.add(new BasicNameValuePair(name, this.getNumberPart(number))) [FD]
Line_2 $$ public Result sendSMS(String number, String text, Proxy proxy) --> Line_28 $$ formparas.add(new BasicNameValuePair(name, this.getNumberPart(number))) [FD]
Line_27 $$ if (name != null && name.equals(FORM_NUMBER)) --> Line_29 $$ if (name != null && name.equals(FORM_TEXT)) [CD]
Line_23 $$ String name = input.getAttributeValue("name") --> Line_29 $$ if (name != null && name.equals(FORM_TEXT)) [FD]
Line_29 $$ if (name != null && name.equals(FORM_TEXT)) --> Line_30 $$ formparas.add(new BasicNameValuePair(name, text)) [CD]
Line_17 $$ List<NameValuePair> formparas = new ArrayList<NameValuePair>() --> Line_30 $$ formparas.add(new BasicNameValuePair(name, text)) [FD]
Line_29 $$ if (name != null && name.equals(FORM_TEXT)) --> Line_31 $$ if (name != null && name.equals(FORM_AGB)) [CD]
Line_23 $$ String name = input.getAttributeValue("name") --> Line_31 $$ if (name != null && name.equals(FORM_AGB)) [FD]
Line_31 $$ if (name != null && name.equals(FORM_AGB)) --> Line_32 $$ formparas.add(new BasicNameValuePair(name, "true")) [CD]
Line_17 $$ List<NameValuePair> formparas = new ArrayList<NameValuePair>() --> Line_32 $$ formparas.add(new BasicNameValuePair(name, "true")) [FD]
Line_17 $$ List<NameValuePair> formparas = new ArrayList<NameValuePair>() --> Line_35 $$ formparas.add(new BasicNameValuePair("dialing_code", this.getPrefixPart(number))) [FD]
Line_2 $$ public Result sendSMS(String number, String text, Proxy proxy) --> Line_35 $$ formparas.add(new BasicNameValuePair("dialing_code", this.getPrefixPart(number))) [FD]
Line_17 $$ List<NameValuePair> formparas = new ArrayList<NameValuePair>() --> Line_36 $$ formparas.add(new BasicNameValuePair("no_schedule", "yes")) [FD]
Line_13 $$ Document doc = ref.getDocumentFromInputStream(e.getContent()) --> Line_37 $$ List<Element> captchas = ref.selectByXPathOnDocument(doc, "//<ns>IMG[@id='code_img']", doc.getRootElement().getNamespaceURI()) [FD]
Line_37 $$ List<Element> captchas = ref.selectByXPathOnDocument(doc, "//<ns>IMG[@id='code_img']", doc.getRootElement().getNamespaceURI()) --> Line_38 $$ Element captcha = captchas.get(0) [FD]
Line_38 $$ Element captcha = captchas.get(0) --> Line_39 $$ String url = "http://www.smsbilliger.de/" + captcha.getAttributeValue("src") [FD]
Line_4 $$ DefaultHttpClient client = new DefaultHttpClient() --> Line_41 $$ HttpResponse imgres = client.execute(imgcall) [FD]
Line_40 $$ HttpGet imgcall = new HttpGet(url) --> Line_41 $$ HttpResponse imgres = client.execute(imgcall) [FD]
Line_41 $$ HttpResponse imgres = client.execute(imgcall) --> Line_42 $$ HttpEntity imge = imgres.getEntity() [FD]
Line_42 $$ HttpEntity imge = imgres.getEntity() --> Line_43 $$ BufferedImage img = ImageIO.read(imge.getContent()) [FD]
Line_42 $$ HttpEntity imge = imgres.getEntity() --> Line_44 $$ imge.getContent().close() [FD]
Line_45 $$ Icon icon = new ImageIcon(img) --> Line_46 $$ String result = (String) JOptionPane.showInputDialog(null, "Bitte Captcha eingeben:", "Captcha", JOptionPane.INFORMATION_MESSAGE, icon, null, "") [FD]
Line_17 $$ List<NameValuePair> formparas = new ArrayList<NameValuePair>() --> Line_47 $$ formparas.add(new BasicNameValuePair(FORM_CAPTCHA, result)) [FD]
Line_49 $$ HttpPost post = new HttpPost(target) --> Line_50 $$ post.setEntity(entity) [FD]
Line_48 $$ UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparas, "UTF-8") --> Line_50 $$ post.setEntity(entity) [FD]
Line_11 $$ HttpResponse response = client.execute(get) --> Line_51 $$ response = client.execute(post) [FD]
Line_4 $$ DefaultHttpClient client = new DefaultHttpClient() --> Line_51 $$ response = client.execute(post) [FD]
Line_49 $$ HttpPost post = new HttpPost(target) --> Line_51 $$ response = client.execute(post) [FD]
Line_12 $$ HttpEntity e = response.getEntity() --> Line_52 $$ e = response.getEntity() [FD]
Line_11 $$ HttpResponse response = client.execute(get) --> Line_52 $$ e = response.getEntity() [FD]
Line_51 $$ response = client.execute(post) --> Line_52 $$ e = response.getEntity() [FD]
Line_13 $$ Document doc = ref.getDocumentFromInputStream(e.getContent()) --> Line_53 $$ doc = ref.getDocumentFromInputStream(e.getContent()) [FD]
Line_12 $$ HttpEntity e = response.getEntity() --> Line_53 $$ doc = ref.getDocumentFromInputStream(e.getContent()) [FD]
Line_52 $$ e = response.getEntity() --> Line_53 $$ doc = ref.getDocumentFromInputStream(e.getContent()) [FD]
Line_13 $$ Document doc = ref.getDocumentFromInputStream(e.getContent()) --> Line_54 $$ List<Element> fonts = ref.selectByXPathOnDocument(doc, "//<ns>H3", doc.getRootElement().getNamespaceURI()) [FD]
Line_53 $$ doc = ref.getDocumentFromInputStream(e.getContent()) --> Line_54 $$ List<Element> fonts = ref.selectByXPathOnDocument(doc, "//<ns>H3", doc.getRootElement().getNamespaceURI()) [FD]
Line_54 $$ List<Element> fonts = ref.selectByXPathOnDocument(doc, "//<ns>H3", doc.getRootElement().getNamespaceURI()) --> Line_55 $$ Iterator<Element> it2 = fonts.iterator() [FD]
Line_55 $$ Iterator<Element> it2 = fonts.iterator() --> Line_56 $$ while (it2.hasNext()) [FD]
Line_56 $$ while (it2.hasNext()) --> Line_57 $$ Element font = it2.next() [CD]
Line_55 $$ Iterator<Element> it2 = fonts.iterator() --> Line_57 $$ Element font = it2.next() [FD]
Line_56 $$ while (it2.hasNext()) --> Line_58 $$ String txt = font.getText() [CD]
Line_57 $$ Element font = it2.next() --> Line_58 $$ String txt = font.getText() [FD]
Line_56 $$ while (it2.hasNext()) --> Line_59 $$ if (txt.contains("Die SMS wurde erfolgreich versendet.")) [CD]
Line_58 $$ String txt = font.getText() --> Line_59 $$ if (txt.contains("Die SMS wurde erfolgreich versendet.")) [FD]
Line_59 $$ if (txt.contains("Die SMS wurde erfolgreich versendet.")) --> Line_60 $$ return new Result(Result.SMS_SEND) [CD]
Line_12 $$ HttpEntity e = response.getEntity() --> Line_64 $$ e.printStackTrace() [FD]
Line_52 $$ e = response.getEntity() --> Line_64 $$ e.printStackTrace() [FD]
Line_12 $$ HttpEntity e = response.getEntity() --> Line_66 $$ e.printStackTrace() [FD]
Line_52 $$ e = response.getEntity() --> Line_66 $$ e.printStackTrace() [FD]
Line_12 $$ HttpEntity e = response.getEntity() --> Line_68 $$ e.printStackTrace() [FD]
Line_52 $$ e = response.getEntity() --> Line_68 $$ e.printStackTrace() [FD]
Line_12 $$ HttpEntity e = response.getEntity() --> Line_70 $$ e.printStackTrace() [FD]
Line_52 $$ e = response.getEntity() --> Line_70 $$ e.printStackTrace() [FD]
Line_12 $$ HttpEntity e = response.getEntity() --> Line_72 $$ e.printStackTrace() [FD]
Line_52 $$ e = response.getEntity() --> Line_72 $$ e.printStackTrace() [FD]
Line_2 $$ public Result sendSMS(String number, String text, Proxy proxy) --> Line_74 $$ return new Result(Result.UNKNOWN_ERROR) [CD]
