Line_2 $$ private static File[] getWsdls(File dirfile) throws Exception --> Line_3 $$ File[] allfiles = dirfile.listFiles() [CD]
Line_2 $$ private static File[] getWsdls(File dirfile) throws Exception --> Line_3 $$ File[] allfiles = dirfile.listFiles() [FD]
Line_2 $$ private static File[] getWsdls(File dirfile) throws Exception --> Line_4 $$ List<File> files = new ArrayList<File>() [CD]
Line_2 $$ private static File[] getWsdls(File dirfile) throws Exception --> Line_5 $$ if (allfiles != null) [CD]
Line_3 $$ File[] allfiles = dirfile.listFiles() --> Line_5 $$ if (allfiles != null) [FD]
Line_5 $$ if (allfiles != null) --> Line_6 $$ MessageDigest md = MessageDigest.getInstance("MD5") [CD]
Line_5 $$ if (allfiles != null) --> Line_7 $$ String outputDir = argMap.get(OUTPUT_DIR) [CD]
Line_8 $$ for (File file : allfiles) --> Line_9 $$ if (file.getName().endsWith(WSDL_SUFFIX)) [FD]
Line_9 $$ if (file.getName().endsWith(WSDL_SUFFIX)) --> Line_10 $$ files.add(file) [CD]
Line_4 $$ List<File> files = new ArrayList<File>() --> Line_10 $$ files.add(file) [FD]
Line_8 $$ for (File file : allfiles) --> Line_10 $$ files.add(file) [FD]
Line_8 $$ for (File file : allfiles) --> Line_12 $$ if (file.getName().endsWith(WSDL_SUFFIX) || file.getName().endsWith(XSD_SUFFIX)) [FD]
Line_12 $$ if (file.getName().endsWith(WSDL_SUFFIX) || file.getName().endsWith(XSD_SUFFIX)) --> Line_13 $$ md.update(FileUtil.getBytes(file)) [CD]
Line_6 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_13 $$ md.update(FileUtil.getBytes(file)) [FD]
Line_8 $$ for (File file : allfiles) --> Line_13 $$ md.update(FileUtil.getBytes(file)) [FD]
Line_5 $$ if (allfiles != null) --> Line_16 $$ computedHash = md.digest() [CD]
Line_6 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_16 $$ computedHash = md.digest() [FD]
Line_5 $$ if (allfiles != null) --> Line_18 $$ if (hashFile.exists()) [CD]
Line_18 $$ if (hashFile.exists()) --> Line_19 $$ byte[] readHash = FileUtil.getBytes(hashFile) [CD]
Line_18 $$ if (hashFile.exists()) --> Line_20 $$ if (Arrays.equals(readHash, computedHash)) [CD]
Line_19 $$ byte[] readHash = FileUtil.getBytes(hashFile) --> Line_20 $$ if (Arrays.equals(readHash, computedHash)) [FD]
Line_20 $$ if (Arrays.equals(readHash, computedHash)) --> Line_21 $$ System.out.println("Skipping generation, files not changed.") [CD]
Line_20 $$ if (Arrays.equals(readHash, computedHash)) --> Line_22 $$ files.clear() [CD]
Line_4 $$ List<File> files = new ArrayList<File>() --> Line_22 $$ files.clear() [FD]
Line_2 $$ private static File[] getWsdls(File dirfile) throws Exception --> Line_26 $$ File[] filesarr = new File[files.size()] [CD]
Line_4 $$ List<File> files = new ArrayList<File>() --> Line_26 $$ File[] filesarr = new File[files.size()] [FD]
Line_2 $$ private static File[] getWsdls(File dirfile) throws Exception --> Line_27 $$ files.toArray(filesarr) [CD]
Line_4 $$ List<File> files = new ArrayList<File>() --> Line_27 $$ files.toArray(filesarr) [FD]
Line_26 $$ File[] filesarr = new File[files.size()] --> Line_27 $$ files.toArray(filesarr) [FD]
Line_2 $$ private static File[] getWsdls(File dirfile) throws Exception --> Line_28 $$ return filesarr [CD]
