Line_6 $$ for (int i = 1; i <= noofparts; i++) --> Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel() [CD]
Line_6 $$ for (int i = 1; i <= noofparts; i++) --> Line_8 $$ status.setText("Rozdělovač: Rozděluji část " + i + "..") [CD]
Line_6 $$ for (int i = 1; i <= noofparts; i++) --> Line_9 $$ if (remainingsize >= splitsize) [CD]
Line_9 $$ if (remainingsize >= splitsize) --> Line_10 $$ in.transferTo(pos, splitsize, out) [CD]
Line_4 $$ FileChannel in = new FileInputStream(inputfile).getChannel() --> Line_10 $$ in.transferTo(pos, splitsize, out) [FD]
Line_5 $$ long pos = 0 --> Line_10 $$ in.transferTo(pos, splitsize, out) [FD]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel() --> Line_10 $$ in.transferTo(pos, splitsize, out) [FD]
Line_9 $$ if (remainingsize >= splitsize) --> Line_11 $$ pos += splitsize [CD]
Line_5 $$ long pos = 0 --> Line_11 $$ pos += splitsize [FD]
Line_9 $$ if (remainingsize >= splitsize) --> Line_14 $$ in.transferTo(pos, remainingsize, out) [CD]
Line_4 $$ FileChannel in = new FileInputStream(inputfile).getChannel() --> Line_14 $$ in.transferTo(pos, remainingsize, out) [FD]
Line_11 $$ pos += splitsize --> Line_14 $$ in.transferTo(pos, remainingsize, out) [FD]
Line_5 $$ long pos = 0 --> Line_14 $$ in.transferTo(pos, remainingsize, out) [FD]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel() --> Line_14 $$ in.transferTo(pos, remainingsize, out) [FD]
Line_6 $$ for (int i = 1; i <= noofparts; i++) --> Line_16 $$ pb.setValue(100 * i / noofparts) [CD]
Line_6 $$ for (int i = 1; i <= noofparts; i++) --> Line_17 $$ out.close() [CD]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel() --> Line_17 $$ out.close() [FD]
Line_4 $$ FileChannel in = new FileInputStream(inputfile).getChannel() --> Line_19 $$ in.close() [FD]
Line_11 $$ pos += splitsize --> Line_10 $$ in.transferTo(pos, splitsize, out) [FD]
