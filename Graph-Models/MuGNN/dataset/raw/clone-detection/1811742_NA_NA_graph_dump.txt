Line_2 $$ public void testSimpleBasicHttpRequests() throws Exception --> Line_3 $$ int reqNo = 20 [CD]
Line_2 $$ public void testSimpleBasicHttpRequests() throws Exception --> Line_4 $$ Random rnd = new Random() [CD]
Line_2 $$ public void testSimpleBasicHttpRequests() throws Exception --> Line_5 $$ final List testData = new ArrayList(reqNo) [CD]
Line_2 $$ public void testSimpleBasicHttpRequests() throws Exception --> Line_6 $$ for (int i = 0; i < reqNo; i++) [CD]
Line_3 $$ int reqNo = 20 --> Line_6 $$ for (int i = 0; i < reqNo; i++) [FD]
Line_6 $$ for (int i = 0; i < reqNo; i++) --> Line_7 $$ int size = rnd.nextInt(5000) [CD]
Line_4 $$ Random rnd = new Random() --> Line_7 $$ int size = rnd.nextInt(5000) [FD]
Line_6 $$ for (int i = 0; i < reqNo; i++) --> Line_8 $$ byte[] data = new byte[size] [CD]
Line_6 $$ for (int i = 0; i < reqNo; i++) --> Line_9 $$ rnd.nextBytes(data) [CD]
Line_4 $$ Random rnd = new Random() --> Line_9 $$ rnd.nextBytes(data) [FD]
Line_8 $$ byte[] data = new byte[size] --> Line_9 $$ rnd.nextBytes(data) [FD]
Line_6 $$ for (int i = 0; i < reqNo; i++) --> Line_10 $$ testData.add(data) [CD]
Line_5 $$ final List testData = new ArrayList(reqNo) --> Line_10 $$ testData.add(data) [FD]
Line_8 $$ byte[] data = new byte[size] --> Line_10 $$ testData.add(data) [FD]
Line_2 $$ public void testSimpleBasicHttpRequests() throws Exception --> Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() [CD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_14 $$ String s = request.getRequestLine().getUri() [CD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_14 $$ String s = request.getRequestLine().getUri() [FD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_15 $$ if (s.startsWith("/?")) [CD]
Line_14 $$ String s = request.getRequestLine().getUri() --> Line_15 $$ if (s.startsWith("/?")) [FD]
Line_15 $$ if (s.startsWith("/?")) --> Line_16 $$ s = s.substring(2) [CD]
Line_14 $$ String s = request.getRequestLine().getUri() --> Line_16 $$ s = s.substring(2) [FD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_18 $$ int index = Integer.parseInt(s) [CD]
Line_14 $$ String s = request.getRequestLine().getUri() --> Line_18 $$ int index = Integer.parseInt(s) [FD]
Line_16 $$ s = s.substring(2) --> Line_18 $$ int index = Integer.parseInt(s) [FD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_19 $$ byte[] data = (byte[]) testData.get(index) [CD]
Line_5 $$ final List testData = new ArrayList(reqNo) --> Line_19 $$ byte[] data = (byte[]) testData.get(index) [FD]
Line_18 $$ int index = Integer.parseInt(s) --> Line_19 $$ byte[] data = (byte[]) testData.get(index) [FD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_20 $$ ByteArrayEntity entity = new ByteArrayEntity(data) [CD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_21 $$ response.setEntity(entity) [CD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_21 $$ response.setEntity(entity) [FD]
Line_20 $$ ByteArrayEntity entity = new ByteArrayEntity(data) --> Line_21 $$ response.setEntity(entity) [FD]
Line_2 $$ public void testSimpleBasicHttpRequests() throws Exception --> Line_24 $$ this.server.start() [CD]
Line_3 $$ int reqNo = 20 --> Line_28 $$ for (int r = 0; r < reqNo; r++) [FD]
Line_28 $$ for (int r = 0; r < reqNo; r++) --> Line_29 $$ if (!conn.isOpen()) [CD]
Line_29 $$ if (!conn.isOpen()) --> Line_30 $$ Socket socket = new Socket(host.getHostName(), host.getPort()) [CD]
Line_29 $$ if (!conn.isOpen()) --> Line_31 $$ conn.bind(socket, this.client.getParams()) [CD]
Line_30 $$ Socket socket = new Socket(host.getHostName(), host.getPort()) --> Line_31 $$ conn.bind(socket, this.client.getParams()) [FD]
Line_28 $$ for (int r = 0; r < reqNo; r++) --> Line_33 $$ BasicHttpRequest get = new BasicHttpRequest("GET", "/?" + r) [CD]
Line_28 $$ for (int r = 0; r < reqNo; r++) --> Line_34 $$ HttpResponse response = this.client.execute(get, host, conn) [CD]
Line_33 $$ BasicHttpRequest get = new BasicHttpRequest("GET", "/?" + r) --> Line_34 $$ HttpResponse response = this.client.execute(get, host, conn) [FD]
Line_28 $$ for (int r = 0; r < reqNo; r++) --> Line_35 $$ byte[] received = EntityUtils.toByteArray(response.getEntity()) [CD]
Line_34 $$ HttpResponse response = this.client.execute(get, host, conn) --> Line_35 $$ byte[] received = EntityUtils.toByteArray(response.getEntity()) [FD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_35 $$ byte[] received = EntityUtils.toByteArray(response.getEntity()) [FD]
Line_28 $$ for (int r = 0; r < reqNo; r++) --> Line_36 $$ byte[] expected = (byte[]) testData.get(r) [CD]
Line_28 $$ for (int r = 0; r < reqNo; r++) --> Line_36 $$ byte[] expected = (byte[]) testData.get(r) [FD]
Line_5 $$ final List testData = new ArrayList(reqNo) --> Line_36 $$ byte[] expected = (byte[]) testData.get(r) [FD]
Line_28 $$ for (int r = 0; r < reqNo; r++) --> Line_37 $$ assertEquals(expected.length, received.length) [CD]
Line_28 $$ for (int r = 0; r < reqNo; r++) --> Line_38 $$ for (int i = 0; i < expected.length; i++) [CD]
Line_6 $$ for (int i = 0; i < reqNo; i++) --> Line_38 $$ for (int i = 0; i < expected.length; i++) [FD]
Line_38 $$ for (int i = 0; i < expected.length; i++) --> Line_39 $$ assertEquals(expected[i], received[i]) [CD]
Line_28 $$ for (int r = 0; r < reqNo; r++) --> Line_41 $$ if (!this.client.keepAlive(response)) [CD]
Line_34 $$ HttpResponse response = this.client.execute(get, host, conn) --> Line_41 $$ if (!this.client.keepAlive(response)) [FD]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() --> Line_41 $$ if (!this.client.keepAlive(response)) [FD]
Line_41 $$ if (!this.client.keepAlive(response)) --> Line_42 $$ conn.close() [CD]
Line_3 $$ int reqNo = 20 --> Line_46 $$ assertEquals(reqNo, cm.getRequestCount()) [FD]
Line_3 $$ int reqNo = 20 --> Line_47 $$ assertEquals(reqNo, cm.getResponseCount()) [FD]
