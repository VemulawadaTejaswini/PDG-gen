Line_2 $$ private boolean createPKCReqest(String keystoreLocation, String pw) --> Line_3 $$ boolean created = false [CD]
Line_2 $$ private boolean createPKCReqest(String keystoreLocation, String pw) --> Line_4 $$ Security.addProvider(new BouncyCastleProvider()) [CD]
Line_2 $$ private boolean createPKCReqest(String keystoreLocation, String pw) --> Line_5 $$ KeyStore ks = null [CD]
Line_5 $$ KeyStore ks = null --> Line_7 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType()) [FD]
Line_5 $$ KeyStore ks = null --> Line_8 $$ ks.load(new BufferedInputStream(new FileInputStream(keystoreLocation)), pw.toCharArray()) [FD]
Line_7 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType()) --> Line_8 $$ ks.load(new BufferedInputStream(new FileInputStream(keystoreLocation)), pw.toCharArray()) [FD]
Line_2 $$ private boolean createPKCReqest(String keystoreLocation, String pw) --> Line_8 $$ ks.load(new BufferedInputStream(new FileInputStream(keystoreLocation)), pw.toCharArray()) [FD]
Line_10 $$ if (this.debugLevel >= SAWSConstant.ErrorInfo) --> Line_11 $$ this.sawsDebugLog.write("Error reading keystore file when creating PKC request: " + e.getMessage()) [CD]
Line_2 $$ private boolean createPKCReqest(String keystoreLocation, String pw) --> Line_15 $$ Certificate cert = null [CD]
Line_15 $$ Certificate cert = null --> Line_17 $$ cert = ks.getCertificate("saws") [FD]
Line_5 $$ KeyStore ks = null --> Line_17 $$ cert = ks.getCertificate("saws") [FD]
Line_7 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType()) --> Line_17 $$ cert = ks.getCertificate("saws") [FD]
Line_19 $$ if (this.debugLevel >= SAWSConstant.ErrorInfo) --> Line_20 $$ this.sawsDebugLog.write("Error reading certificate from keystore file when creating PKC request: " + e.getMessage()) [CD]
Line_2 $$ private boolean createPKCReqest(String keystoreLocation, String pw) --> Line_24 $$ PKCS10CertificationRequest request = null [CD]
Line_2 $$ private boolean createPKCReqest(String keystoreLocation, String pw) --> Line_25 $$ PublicKey pk = cert.getPublicKey() [CD]
Line_15 $$ Certificate cert = null --> Line_25 $$ PublicKey pk = cert.getPublicKey() [FD]
Line_17 $$ cert = ks.getCertificate("saws") --> Line_25 $$ PublicKey pk = cert.getPublicKey() [FD]
Line_24 $$ PKCS10CertificationRequest request = null --> Line_27 $$ request = new PKCS10CertificationRequest("SHA1with" + pk.getAlgorithm(), new X500Principal(((X509Certificate) cert).getSubjectDN().toString()), pk, new DERSet(), (PrivateKey) ks.getKey("saws", pw.toCharArray())) [FD]
Line_25 $$ PublicKey pk = cert.getPublicKey() --> Line_27 $$ request = new PKCS10CertificationRequest("SHA1with" + pk.getAlgorithm(), new X500Principal(((X509Certificate) cert).getSubjectDN().toString()), pk, new DERSet(), (PrivateKey) ks.getKey("saws", pw.toCharArray())) [FD]
Line_5 $$ KeyStore ks = null --> Line_27 $$ request = new PKCS10CertificationRequest("SHA1with" + pk.getAlgorithm(), new X500Principal(((X509Certificate) cert).getSubjectDN().toString()), pk, new DERSet(), (PrivateKey) ks.getKey("saws", pw.toCharArray())) [FD]
Line_7 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType()) --> Line_27 $$ request = new PKCS10CertificationRequest("SHA1with" + pk.getAlgorithm(), new X500Principal(((X509Certificate) cert).getSubjectDN().toString()), pk, new DERSet(), (PrivateKey) ks.getKey("saws", pw.toCharArray())) [FD]
Line_2 $$ private boolean createPKCReqest(String keystoreLocation, String pw) --> Line_27 $$ request = new PKCS10CertificationRequest("SHA1with" + pk.getAlgorithm(), new X500Principal(((X509Certificate) cert).getSubjectDN().toString()), pk, new DERSet(), (PrivateKey) ks.getKey("saws", pw.toCharArray())) [FD]
Line_28 $$ PEMWriter pemWrt = new PEMWriter(new OutputStreamWriter(new FileOutputStream("sawsRequest.csr"))) --> Line_29 $$ pemWrt.writeObject(request) [FD]
Line_24 $$ PKCS10CertificationRequest request = null --> Line_29 $$ pemWrt.writeObject(request) [FD]
Line_27 $$ request = new PKCS10CertificationRequest("SHA1with" + pk.getAlgorithm(), new X500Principal(((X509Certificate) cert).getSubjectDN().toString()), pk, new DERSet(), (PrivateKey) ks.getKey("saws", pw.toCharArray())) --> Line_29 $$ pemWrt.writeObject(request) [FD]
Line_28 $$ PEMWriter pemWrt = new PEMWriter(new OutputStreamWriter(new FileOutputStream("sawsRequest.csr"))) --> Line_30 $$ pemWrt.close() [FD]
Line_3 $$ boolean created = false --> Line_31 $$ created = true [FD]
Line_33 $$ if (this.debugLevel >= SAWSConstant.ErrorInfo) --> Line_34 $$ this.sawsDebugLog.write("Error creating PKC request file: " + e.getMessage()) [CD]
Line_2 $$ private boolean createPKCReqest(String keystoreLocation, String pw) --> Line_38 $$ return created [CD]
