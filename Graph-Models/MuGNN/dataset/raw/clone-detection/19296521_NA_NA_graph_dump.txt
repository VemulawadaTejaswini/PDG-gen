Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_3 $$ url = normalizeUrl(url) [CD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_3 $$ url = normalizeUrl(url) [FD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_4 $$ Log.i(LOG_TAG, "Get " + url) [CD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_6 $$ int expectedStatusCode = HttpStatus.SC_OK [CD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_7 $$ if (startOffset > 0) [CD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_7 $$ if (startOffset > 0) [FD]
Line_7 $$ if (startOffset > 0) --> Line_8 $$ String range = "bytes=" + startOffset + "-" [CD]
Line_7 $$ if (startOffset > 0) --> Line_9 $$ if (expectedLength >= 0) [CD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_9 $$ if (expectedLength >= 0) [FD]
Line_9 $$ if (expectedLength >= 0) --> Line_10 $$ range += expectedLength - 1 [CD]
Line_8 $$ String range = "bytes=" + startOffset + "-" --> Line_10 $$ range += expectedLength - 1 [FD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_10 $$ range += expectedLength - 1 [FD]
Line_7 $$ if (startOffset > 0) --> Line_12 $$ Log.i(LOG_TAG, "requesting byte range " + range) [CD]
Line_7 $$ if (startOffset > 0) --> Line_13 $$ mHttpGet.addHeader("Range", range) [CD]
Line_8 $$ String range = "bytes=" + startOffset + "-" --> Line_13 $$ mHttpGet.addHeader("Range", range) [FD]
Line_10 $$ range += expectedLength - 1 --> Line_13 $$ mHttpGet.addHeader("Range", range) [FD]
Line_7 $$ if (startOffset > 0) --> Line_14 $$ expectedStatusCode = HttpStatus.SC_PARTIAL_CONTENT [CD]
Line_6 $$ int expectedStatusCode = HttpStatus.SC_OK --> Line_14 $$ expectedStatusCode = HttpStatus.SC_PARTIAL_CONTENT [FD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_16 $$ HttpResponse response = mHttpClient.execute(mHttpGet) [CD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_17 $$ long bytesToSkip = 0 [CD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_18 $$ int statusCode = response.getStatusLine().getStatusCode() [CD]
Line_16 $$ HttpResponse response = mHttpClient.execute(mHttpGet) --> Line_18 $$ int statusCode = response.getStatusLine().getStatusCode() [FD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_19 $$ if (statusCode != expectedStatusCode) [CD]
Line_18 $$ int statusCode = response.getStatusLine().getStatusCode() --> Line_19 $$ if (statusCode != expectedStatusCode) [FD]
Line_6 $$ int expectedStatusCode = HttpStatus.SC_OK --> Line_19 $$ if (statusCode != expectedStatusCode) [FD]
Line_14 $$ expectedStatusCode = HttpStatus.SC_PARTIAL_CONTENT --> Line_19 $$ if (statusCode != expectedStatusCode) [FD]
Line_19 $$ if (statusCode != expectedStatusCode) --> Line_20 $$ if ((statusCode == HttpStatus.SC_OK) && (expectedStatusCode == HttpStatus.SC_PARTIAL_CONTENT)) [CD]
Line_20 $$ if ((statusCode == HttpStatus.SC_OK) && (expectedStatusCode == HttpStatus.SC_PARTIAL_CONTENT)) --> Line_21 $$ Log.i(LOG_TAG, "Byte range request ignored") [CD]
Line_20 $$ if ((statusCode == HttpStatus.SC_OK) && (expectedStatusCode == HttpStatus.SC_PARTIAL_CONTENT)) --> Line_22 $$ bytesToSkip = startOffset [CD]
Line_17 $$ long bytesToSkip = 0 --> Line_22 $$ bytesToSkip = startOffset [FD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_22 $$ bytesToSkip = startOffset [FD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_27 $$ HttpEntity entity = response.getEntity() [CD]
Line_16 $$ HttpResponse response = mHttpClient.execute(mHttpGet) --> Line_27 $$ HttpEntity entity = response.getEntity() [FD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_28 $$ InputStream is = entity.getContent() [CD]
Line_27 $$ HttpEntity entity = response.getEntity() --> Line_28 $$ InputStream is = entity.getContent() [FD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_29 $$ if (bytesToSkip > 0) [CD]
Line_17 $$ long bytesToSkip = 0 --> Line_29 $$ if (bytesToSkip > 0) [FD]
Line_22 $$ bytesToSkip = startOffset --> Line_29 $$ if (bytesToSkip > 0) [FD]
Line_29 $$ if (bytesToSkip > 0) --> Line_30 $$ is.skip(bytesToSkip) [CD]
Line_28 $$ InputStream is = entity.getContent() --> Line_30 $$ is.skip(bytesToSkip) [FD]
Line_17 $$ long bytesToSkip = 0 --> Line_30 $$ is.skip(bytesToSkip) [FD]
Line_22 $$ bytesToSkip = startOffset --> Line_30 $$ is.skip(bytesToSkip) [FD]
Line_2 $$ private InputStream get(String url, long startOffset, long expectedLength) throws ClientProtocolException, IOException --> Line_32 $$ return is [CD]
