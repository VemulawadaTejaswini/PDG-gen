Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_3 $$ ThreadSafeClientConnManager mgr = createTSCCM(null, null) [CD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_4 $$ final HttpHost target = getServerHttp() [CD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_5 $$ final HttpRoute route = new HttpRoute(target, null, false) [CD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_6 $$ final int rsplen = 8 [CD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_7 $$ final String uri = "/random/" + rsplen [CD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_8 $$ HttpRequest request = new BasicHttpRequest("GET", uri, HttpVersion.HTTP_1_1) [CD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_9 $$ ManagedClientConnection conn = getConnection(mgr, route) [CD]
Line_3 $$ ThreadSafeClientConnManager mgr = createTSCCM(null, null) --> Line_9 $$ ManagedClientConnection conn = getConnection(mgr, route) [FD]
Line_5 $$ final HttpRoute route = new HttpRoute(target, null, false) --> Line_9 $$ ManagedClientConnection conn = getConnection(mgr, route) [FD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_10 $$ conn.open(route, httpContext, defaultParams) [CD]
Line_9 $$ ManagedClientConnection conn = getConnection(mgr, route) --> Line_10 $$ conn.open(route, httpContext, defaultParams) [FD]
Line_5 $$ final HttpRoute route = new HttpRoute(target, null, false) --> Line_10 $$ conn.open(route, httpContext, defaultParams) [FD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_11 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext) [CD]
Line_8 $$ HttpRequest request = new BasicHttpRequest("GET", uri, HttpVersion.HTTP_1_1) --> Line_11 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext) [FD]
Line_9 $$ ManagedClientConnection conn = getConnection(mgr, route) --> Line_11 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext) [FD]
Line_4 $$ final HttpHost target = getServerHttp() --> Line_11 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext) [FD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_12 $$ EntityUtils.toByteArray(response.getEntity()) [CD]
Line_11 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext) --> Line_12 $$ EntityUtils.toByteArray(response.getEntity()) [FD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_13 $$ conn.markReusable() [CD]
Line_9 $$ ManagedClientConnection conn = getConnection(mgr, route) --> Line_13 $$ conn.markReusable() [FD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_14 $$ mgr.releaseConnection(conn, -1, null) [CD]
Line_3 $$ ThreadSafeClientConnManager mgr = createTSCCM(null, null) --> Line_14 $$ mgr.releaseConnection(conn, -1, null) [FD]
Line_9 $$ ManagedClientConnection conn = getConnection(mgr, route) --> Line_14 $$ mgr.releaseConnection(conn, -1, null) [FD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_15 $$ WeakReference<ThreadSafeClientConnManager> wref = new WeakReference<ThreadSafeClientConnManager>(mgr) [CD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_16 $$ mgr = null [CD]
Line_3 $$ ThreadSafeClientConnManager mgr = createTSCCM(null, null) --> Line_16 $$ mgr = null [FD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_17 $$ System.gc() [CD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_18 $$ Thread.sleep(1000) [CD]
Line_2 $$ public void testConnectionManagerGC() throws Exception --> Line_19 $$ assertNull("TSCCM not garbage collected", wref.get()) [CD]
Line_15 $$ WeakReference<ThreadSafeClientConnManager> wref = new WeakReference<ThreadSafeClientConnManager>(mgr) --> Line_19 $$ assertNull("TSCCM not garbage collected", wref.get()) [FD]
