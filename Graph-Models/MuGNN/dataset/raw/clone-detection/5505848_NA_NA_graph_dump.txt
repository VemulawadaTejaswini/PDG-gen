Line_2 $$ public void testResponseTimeout() throws Exception --> Line_3 $$ server.enqueue(new MockResponse().setBody("ABC").clearHeaders().addHeader("Content-Length: 4")) [CD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_4 $$ server.enqueue(new MockResponse().setBody("DEF")) [CD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_5 $$ server.play() [CD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_6 $$ URLConnection urlConnection = server.getUrl("/").openConnection() [CD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_7 $$ urlConnection.setReadTimeout(1000) [CD]
Line_6 $$ URLConnection urlConnection = server.getUrl("/").openConnection() --> Line_7 $$ urlConnection.setReadTimeout(1000) [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_8 $$ InputStream in = urlConnection.getInputStream() [CD]
Line_6 $$ URLConnection urlConnection = server.getUrl("/").openConnection() --> Line_8 $$ InputStream in = urlConnection.getInputStream() [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_9 $$ assertEquals('A', in.read()) [CD]
Line_8 $$ InputStream in = urlConnection.getInputStream() --> Line_9 $$ assertEquals('A', in.read()) [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_10 $$ assertEquals('B', in.read()) [CD]
Line_8 $$ InputStream in = urlConnection.getInputStream() --> Line_10 $$ assertEquals('B', in.read()) [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_11 $$ assertEquals('C', in.read()) [CD]
Line_8 $$ InputStream in = urlConnection.getInputStream() --> Line_11 $$ assertEquals('C', in.read()) [FD]
Line_8 $$ InputStream in = urlConnection.getInputStream() --> Line_13 $$ in.read() [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_17 $$ URLConnection urlConnection2 = server.getUrl("/").openConnection() [CD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_18 $$ InputStream in2 = urlConnection2.getInputStream() [CD]
Line_17 $$ URLConnection urlConnection2 = server.getUrl("/").openConnection() --> Line_18 $$ InputStream in2 = urlConnection2.getInputStream() [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_19 $$ assertEquals('D', in2.read()) [CD]
Line_18 $$ InputStream in2 = urlConnection2.getInputStream() --> Line_19 $$ assertEquals('D', in2.read()) [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_20 $$ assertEquals('E', in2.read()) [CD]
Line_18 $$ InputStream in2 = urlConnection2.getInputStream() --> Line_20 $$ assertEquals('E', in2.read()) [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_21 $$ assertEquals('F', in2.read()) [CD]
Line_18 $$ InputStream in2 = urlConnection2.getInputStream() --> Line_21 $$ assertEquals('F', in2.read()) [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_22 $$ assertEquals(-1, in2.read()) [CD]
Line_18 $$ InputStream in2 = urlConnection2.getInputStream() --> Line_22 $$ assertEquals(-1, in2.read()) [FD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_23 $$ assertEquals(0, server.takeRequest().getSequenceNumber()) [CD]
Line_2 $$ public void testResponseTimeout() throws Exception --> Line_24 $$ assertEquals(0, server.takeRequest().getSequenceNumber()) [CD]
