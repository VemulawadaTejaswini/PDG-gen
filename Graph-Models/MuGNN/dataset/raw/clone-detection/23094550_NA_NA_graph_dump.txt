Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_3 $$ String logTime = null [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_4 $$ if (c.getWorkerContext() != null) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_4 $$ if (c.getWorkerContext() != null) [FD]
Line_4 $$ if (c.getWorkerContext() != null) --> Line_5 $$ logTime = c.getWorkerContext().getWorkerStart() [CD]
Line_3 $$ String logTime = null --> Line_5 $$ logTime = c.getWorkerContext().getWorkerStart() [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_5 $$ logTime = c.getWorkerContext().getWorkerStart() [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_7 $$ if (c.isBreakState() || !c.canRender("u")) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_7 $$ if (c.isBreakState() || !c.canRender("u")) [FD]
Line_7 $$ if (c.isBreakState() || !c.canRender("u")) --> Line_8 $$ return new StringBuffer() [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_10 $$ StringBuffer buffer = new StringBuffer() [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_11 $$ varname = TagInspector.processElement(varname, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_11 $$ varname = TagInspector.processElement(varname, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_12 $$ action = TagInspector.processElement(action, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_12 $$ action = TagInspector.processElement(action, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_13 $$ filemode = TagInspector.processElement(filemode, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_13 $$ filemode = TagInspector.processElement(filemode, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_14 $$ xmlparse = TagInspector.processElement(xmlparse, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_14 $$ xmlparse = TagInspector.processElement(xmlparse, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_15 $$ encoding = TagInspector.processElement(encoding, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_15 $$ encoding = TagInspector.processElement(encoding, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_16 $$ decoding = TagInspector.processElement(decoding, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_16 $$ decoding = TagInspector.processElement(decoding, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_17 $$ filter = TagInspector.processElement(filter, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_17 $$ filter = TagInspector.processElement(filter, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_18 $$ sort = TagInspector.processElement(sort, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_18 $$ sort = TagInspector.processElement(sort, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_19 $$ useDocroot = TagInspector.processElement(useDocroot, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_19 $$ useDocroot = TagInspector.processElement(useDocroot, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_20 $$ useFilename = TagInspector.processElement(useFilename, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_20 $$ useFilename = TagInspector.processElement(useFilename, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_21 $$ useDest = TagInspector.processElement(useDest, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_21 $$ useDest = TagInspector.processElement(useDest, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_22 $$ xmlOutput = TagInspector.processElement(xmlOutput, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_22 $$ xmlOutput = TagInspector.processElement(xmlOutput, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_23 $$ renderOutput = TagInspector.processElement(renderOutput, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_23 $$ renderOutput = TagInspector.processElement(renderOutput, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_24 $$ callProc = TagInspector.processElement(callProc, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_24 $$ callProc = TagInspector.processElement(callProc, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_25 $$ vartype = TagInspector.processElement(vartype, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_25 $$ vartype = TagInspector.processElement(vartype, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_26 $$ if (sort == null || sort.equals("")) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_29 $$ if (useFilename.equals("") && !action.equalsIgnoreCase("listing")) [CD]
Line_29 $$ if (useFilename.equals("") && !action.equalsIgnoreCase("listing")) --> Line_30 $$ return new StringBuffer() [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_32 $$ boolean isRooted = true [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_33 $$ if (useDocroot.equalsIgnoreCase("true")) [CD]
Line_33 $$ if (useDocroot.equalsIgnoreCase("true")) --> Line_34 $$ if (c.getVendContext().getVend().getIgnorableDocroot(c.getClientContext().getMatchedHost())) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_34 $$ if (c.getVendContext().getVend().getIgnorableDocroot(c.getClientContext().getMatchedHost())) [FD]
Line_34 $$ if (c.getVendContext().getVend().getIgnorableDocroot(c.getClientContext().getMatchedHost())) --> Line_35 $$ isRooted = false [CD]
Line_32 $$ boolean isRooted = true --> Line_35 $$ isRooted = false [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_38 $$ if (isRooted && (useFilename.indexOf("/") == -1 || useFilename.startsWith("./"))) [CD]
Line_32 $$ boolean isRooted = true --> Line_38 $$ if (isRooted && (useFilename.indexOf("/") == -1 || useFilename.startsWith("./"))) [FD]
Line_35 $$ isRooted = false --> Line_38 $$ if (isRooted && (useFilename.indexOf("/") == -1 || useFilename.startsWith("./"))) [FD]
Line_38 $$ if (isRooted && (useFilename.indexOf("/") == -1 || useFilename.startsWith("./"))) --> Line_39 $$ if (c.getWorkerContext() != null && useFilename.startsWith("./")) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_39 $$ if (c.getWorkerContext() != null && useFilename.startsWith("./")) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_40 $$ useFilename = c.getWorkerContext().getClientContext().getPostVariable("current_path") + useFilename.substring(2) [FD]
Line_39 $$ if (c.getWorkerContext() != null && useFilename.startsWith("./")) --> Line_41 $$ Debug.inform("CWD path specified in filename, rewritten to '" + useFilename + "'") [CD]
Line_39 $$ if (c.getWorkerContext() != null && useFilename.startsWith("./")) --> Line_42 $$ if (c.getWorkerContext() != null && useFilename.indexOf("/") == -1) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_42 $$ if (c.getWorkerContext() != null && useFilename.indexOf("/") == -1) [FD]
Line_42 $$ if (c.getWorkerContext() != null && useFilename.indexOf("/") == -1) --> Line_43 $$ useFilename = c.getWorkerContext().getClientContext().getPostVariable("current_path") + useFilename [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_43 $$ useFilename = c.getWorkerContext().getClientContext().getPostVariable("current_path") + useFilename [FD]
Line_42 $$ if (c.getWorkerContext() != null && useFilename.indexOf("/") == -1) --> Line_44 $$ Debug.inform("No path specified in filename, rewritten to '" + useFilename + "'") [CD]
Line_42 $$ if (c.getWorkerContext() != null && useFilename.indexOf("/") == -1) --> Line_46 $$ Debug.inform("No path specified in filename, no worker context, not rewriting filename.") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_49 $$ StringBuffer filenameData = null [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_50 $$ StringBuffer contentsData = null [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_51 $$ StringBuffer fileDestData = null [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_52 $$ contentsData = TagInspector.processBody(this, c) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_52 $$ contentsData = TagInspector.processBody(this, c) [FD]
Line_50 $$ StringBuffer contentsData = null --> Line_52 $$ contentsData = TagInspector.processBody(this, c) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_53 $$ filenameData = new StringBuffer(useFilename) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_53 $$ filenameData = new StringBuffer(useFilename) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_54 $$ fileDestData = new StringBuffer(useDest) [CD]
Line_51 $$ StringBuffer fileDestData = null --> Line_54 $$ fileDestData = new StringBuffer(useDest) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_55 $$ String currentDocroot = null [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_56 $$ if (c.getWorkerContext() == null) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_56 $$ if (c.getWorkerContext() == null) [FD]
Line_56 $$ if (c.getWorkerContext() == null) --> Line_57 $$ if (c.getRenderContext().getCurrentDocroot() == null) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_57 $$ if (c.getRenderContext().getCurrentDocroot() == null) [FD]
Line_57 $$ if (c.getRenderContext().getCurrentDocroot() == null) --> Line_58 $$ currentDocroot = "." [CD]
Line_55 $$ String currentDocroot = null --> Line_58 $$ currentDocroot = "." [FD]
Line_57 $$ if (c.getRenderContext().getCurrentDocroot() == null) --> Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() [CD]
Line_55 $$ String currentDocroot = null --> Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() [FD]
Line_58 $$ currentDocroot = "." --> Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() [FD]
Line_56 $$ if (c.getWorkerContext() == null) --> Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() [CD]
Line_55 $$ String currentDocroot = null --> Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() [FD]
Line_58 $$ currentDocroot = "." --> Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() [FD]
Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() --> Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_65 $$ if (!isRooted) [CD]
Line_32 $$ boolean isRooted = true --> Line_65 $$ if (!isRooted) [FD]
Line_35 $$ isRooted = false --> Line_65 $$ if (!isRooted) [FD]
Line_65 $$ if (!isRooted) --> Line_66 $$ currentDocroot = "" [CD]
Line_55 $$ String currentDocroot = null --> Line_66 $$ currentDocroot = "" [FD]
Line_58 $$ currentDocroot = "." --> Line_66 $$ currentDocroot = "" [FD]
Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() --> Line_66 $$ currentDocroot = "" [FD]
Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() --> Line_66 $$ currentDocroot = "" [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_68 $$ if (useDocroot.equalsIgnoreCase("true")) [CD]
Line_68 $$ if (useDocroot.equalsIgnoreCase("true")) --> Line_69 $$ if (c.getVendContext().getVend().getIgnorableDocroot(c.getClientContext().getMatchedHost())) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_69 $$ if (c.getVendContext().getVend().getIgnorableDocroot(c.getClientContext().getMatchedHost())) [FD]
Line_69 $$ if (c.getVendContext().getVend().getIgnorableDocroot(c.getClientContext().getMatchedHost())) --> Line_70 $$ isRooted = false [CD]
Line_32 $$ boolean isRooted = true --> Line_70 $$ isRooted = false [FD]
Line_35 $$ isRooted = false --> Line_70 $$ isRooted = false [FD]
Line_69 $$ if (c.getVendContext().getVend().getIgnorableDocroot(c.getClientContext().getMatchedHost())) --> Line_71 $$ currentDocroot = "" [CD]
Line_55 $$ String currentDocroot = null --> Line_71 $$ currentDocroot = "" [FD]
Line_58 $$ currentDocroot = "." --> Line_71 $$ currentDocroot = "" [FD]
Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() --> Line_71 $$ currentDocroot = "" [FD]
Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() --> Line_71 $$ currentDocroot = "" [FD]
Line_66 $$ currentDocroot = "" --> Line_71 $$ currentDocroot = "" [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_74 $$ if (!currentDocroot.endsWith("/")) [CD]
Line_55 $$ String currentDocroot = null --> Line_74 $$ if (!currentDocroot.endsWith("/")) [FD]
Line_58 $$ currentDocroot = "." --> Line_74 $$ if (!currentDocroot.endsWith("/")) [FD]
Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() --> Line_74 $$ if (!currentDocroot.endsWith("/")) [FD]
Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() --> Line_74 $$ if (!currentDocroot.endsWith("/")) [FD]
Line_66 $$ currentDocroot = "" --> Line_74 $$ if (!currentDocroot.endsWith("/")) [FD]
Line_71 $$ currentDocroot = "" --> Line_74 $$ if (!currentDocroot.endsWith("/")) [FD]
Line_74 $$ if (!currentDocroot.endsWith("/")) --> Line_75 $$ if (!currentDocroot.equals("") && currentDocroot.length() > 0) [CD]
Line_55 $$ String currentDocroot = null --> Line_75 $$ if (!currentDocroot.equals("") && currentDocroot.length() > 0) [FD]
Line_58 $$ currentDocroot = "." --> Line_75 $$ if (!currentDocroot.equals("") && currentDocroot.length() > 0) [FD]
Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() --> Line_75 $$ if (!currentDocroot.equals("") && currentDocroot.length() > 0) [FD]
Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() --> Line_75 $$ if (!currentDocroot.equals("") && currentDocroot.length() > 0) [FD]
Line_66 $$ currentDocroot = "" --> Line_75 $$ if (!currentDocroot.equals("") && currentDocroot.length() > 0) [FD]
Line_71 $$ currentDocroot = "" --> Line_75 $$ if (!currentDocroot.equals("") && currentDocroot.length() > 0) [FD]
Line_75 $$ if (!currentDocroot.equals("") && currentDocroot.length() > 0) --> Line_76 $$ currentDocroot += "/" [CD]
Line_55 $$ String currentDocroot = null --> Line_76 $$ currentDocroot += "/" [FD]
Line_58 $$ currentDocroot = "." --> Line_76 $$ currentDocroot += "/" [FD]
Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() --> Line_76 $$ currentDocroot += "/" [FD]
Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() --> Line_76 $$ currentDocroot += "/" [FD]
Line_66 $$ currentDocroot = "" --> Line_76 $$ currentDocroot += "/" [FD]
Line_71 $$ currentDocroot = "" --> Line_76 $$ currentDocroot += "/" [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_79 $$ if (filenameData != null) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_79 $$ if (filenameData != null) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_79 $$ if (filenameData != null) [FD]
Line_79 $$ if (filenameData != null) --> Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_82 $$ if (fileDestData != null) [CD]
Line_51 $$ StringBuffer fileDestData = null --> Line_82 $$ if (fileDestData != null) [FD]
Line_54 $$ fileDestData = new StringBuffer(useDest) --> Line_82 $$ if (fileDestData != null) [FD]
Line_82 $$ if (fileDestData != null) --> Line_83 $$ fileDestData = new StringBuffer(fileDestData.toString().replaceAll("\\.\\.", "")) [CD]
Line_51 $$ StringBuffer fileDestData = null --> Line_83 $$ fileDestData = new StringBuffer(fileDestData.toString().replaceAll("\\.\\.", "")) [FD]
Line_54 $$ fileDestData = new StringBuffer(useDest) --> Line_83 $$ fileDestData = new StringBuffer(fileDestData.toString().replaceAll("\\.\\.", "")) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_85 $$ if (action.equalsIgnoreCase("read")) [CD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_87 $$ FileInputStream is = null [CD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_88 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() [CD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_89 $$ byte data[] = null [CD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_90 $$ boolean vfsLoaded = false [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_92 $$ data = c.getVendContext().getFileAccess().getFile(c.getWorkerContext(), filenameData.toString().replaceAll("\\.\\.", ""), c.getClientContext().getMatchedHost(), c.getVendContext().getVend().getRenderExtension(c.getClientContext().getMatchedHost()), null) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_92 $$ data = c.getVendContext().getFileAccess().getFile(c.getWorkerContext(), filenameData.toString().replaceAll("\\.\\.", ""), c.getClientContext().getMatchedHost(), c.getVendContext().getVend().getRenderExtension(c.getClientContext().getMatchedHost()), null) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_92 $$ data = c.getVendContext().getFileAccess().getFile(c.getWorkerContext(), filenameData.toString().replaceAll("\\.\\.", ""), c.getClientContext().getMatchedHost(), c.getVendContext().getVend().getRenderExtension(c.getClientContext().getMatchedHost()), null) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_92 $$ data = c.getVendContext().getFileAccess().getFile(c.getWorkerContext(), filenameData.toString().replaceAll("\\.\\.", ""), c.getClientContext().getMatchedHost(), c.getVendContext().getVend().getRenderExtension(c.getClientContext().getMatchedHost()), null) [FD]
Line_88 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() --> Line_93 $$ bos.write(data, 0, data.length) [FD]
Line_90 $$ boolean vfsLoaded = false --> Line_94 $$ vfsLoaded = true [FD]
Line_3 $$ String logTime = null --> Line_96 $$ Debug.user(logTime, "Included file attempt with VFS of file '" + filenameData + "' failed: " + e) [FD]
Line_5 $$ logTime = c.getWorkerContext().getWorkerStart() --> Line_96 $$ Debug.user(logTime, "Included file attempt with VFS of file '" + filenameData + "' failed: " + e) [FD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_98 $$ if (data == null) [CD]
Line_87 $$ FileInputStream is = null --> Line_100 $$ is = new FileInputStream(file) [FD]
Line_3 $$ String logTime = null --> Line_102 $$ Debug.user(logTime, "Unable to render: Filename '" + currentDocroot + filenameData + "' does not exist.") [FD]
Line_5 $$ logTime = c.getWorkerContext().getWorkerStart() --> Line_102 $$ Debug.user(logTime, "Unable to render: Filename '" + currentDocroot + filenameData + "' does not exist.") [FD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_106 $$ if (xmlparse == null || xmlparse.equals("")) [CD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_107 $$ if (data == null) [CD]
Line_107 $$ if (data == null) --> Line_108 $$ Debug.user(logTime, "Opening filename '" + currentDocroot + filenameData + "' for reading into buffer '" + varname + "'") [CD]
Line_3 $$ String logTime = null --> Line_108 $$ Debug.user(logTime, "Opening filename '" + currentDocroot + filenameData + "' for reading into buffer '" + varname + "'") [FD]
Line_5 $$ logTime = c.getWorkerContext().getWorkerStart() --> Line_108 $$ Debug.user(logTime, "Opening filename '" + currentDocroot + filenameData + "' for reading into buffer '" + varname + "'") [FD]
Line_107 $$ if (data == null) --> Line_110 $$ int totalBytesRead = 0 [CD]
Line_107 $$ if (data == null) --> Line_111 $$ while (true) [CD]
Line_111 $$ while (true) --> Line_112 $$ int bytesRead [CD]
Line_112 $$ int bytesRead --> Line_114 $$ bytesRead = is.read(data) [FD]
Line_87 $$ FileInputStream is = null --> Line_114 $$ bytesRead = is.read(data) [FD]
Line_100 $$ is = new FileInputStream(file) --> Line_114 $$ bytesRead = is.read(data) [FD]
Line_88 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() --> Line_115 $$ bos.write(data, 0, bytesRead) [FD]
Line_112 $$ int bytesRead --> Line_115 $$ bos.write(data, 0, bytesRead) [FD]
Line_114 $$ bytesRead = is.read(data) --> Line_115 $$ bos.write(data, 0, bytesRead) [FD]
Line_111 $$ while (true) --> Line_119 $$ if (bytesRead <= 0) [CD]
Line_112 $$ int bytesRead --> Line_119 $$ if (bytesRead <= 0) [FD]
Line_114 $$ bytesRead = is.read(data) --> Line_119 $$ if (bytesRead <= 0) [FD]
Line_111 $$ while (true) --> Line_122 $$ totalBytesRead += bytesRead [CD]
Line_110 $$ int totalBytesRead = 0 --> Line_122 $$ totalBytesRead += bytesRead [FD]
Line_112 $$ int bytesRead --> Line_122 $$ totalBytesRead += bytesRead [FD]
Line_114 $$ bytesRead = is.read(data) --> Line_122 $$ totalBytesRead += bytesRead [FD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_125 $$ byte docOutput[] = bos.toByteArray() [CD]
Line_88 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() --> Line_125 $$ byte docOutput[] = bos.toByteArray() [FD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_126 $$ if (renderOutput != null && renderOutput.equalsIgnoreCase("ssp")) [CD]
Line_126 $$ if (renderOutput != null && renderOutput.equalsIgnoreCase("ssp")) --> Line_127 $$ String outputData = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n" + new String(FileAccess.getDefault().processServerPageData(c.getWorkerContext(), docOutput)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_127 $$ String outputData = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n" + new String(FileAccess.getDefault().processServerPageData(c.getWorkerContext(), docOutput)) [FD]
Line_126 $$ if (renderOutput != null && renderOutput.equalsIgnoreCase("ssp")) --> Line_128 $$ docOutput = outputData.getBytes() [CD]
Line_127 $$ String outputData = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n" + new String(FileAccess.getDefault().processServerPageData(c.getWorkerContext(), docOutput)) --> Line_128 $$ docOutput = outputData.getBytes() [FD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_130 $$ Debug.user(logTime, "File read complete: " + docOutput.length + " byte(s)") [CD]
Line_3 $$ String logTime = null --> Line_130 $$ Debug.user(logTime, "File read complete: " + docOutput.length + " byte(s)") [FD]
Line_5 $$ logTime = c.getWorkerContext().getWorkerStart() --> Line_130 $$ Debug.user(logTime, "File read complete: " + docOutput.length + " byte(s)") [FD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_131 $$ if (is != null) [CD]
Line_87 $$ FileInputStream is = null --> Line_131 $$ if (is != null) [FD]
Line_100 $$ is = new FileInputStream(file) --> Line_131 $$ if (is != null) [FD]
Line_87 $$ FileInputStream is = null --> Line_133 $$ is.close() [FD]
Line_100 $$ is = new FileInputStream(file) --> Line_133 $$ is.close() [FD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_137 $$ is = null [CD]
Line_87 $$ FileInputStream is = null --> Line_137 $$ is = null [FD]
Line_100 $$ is = new FileInputStream(file) --> Line_137 $$ is = null [FD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_138 $$ if (encoding != null && encoding.equalsIgnoreCase("url")) [CD]
Line_138 $$ if (encoding != null && encoding.equalsIgnoreCase("url")) --> Line_139 $$ if (!varname.equals("")) [CD]
Line_139 $$ if (!varname.equals("")) --> Line_140 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_140 $$ if (c.isProtectedVariable(varname)) [FD]
Line_140 $$ if (c.isProtectedVariable(varname)) --> Line_141 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_141 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_140 $$ if (c.isProtectedVariable(varname)) --> Line_142 $$ return new StringBuffer() [CD]
Line_139 $$ if (!varname.equals("")) --> Line_144 $$ c.getVariableContainer().setVariable(varname, Encoder.URLEncode(new String(docOutput))) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_144 $$ c.getVariableContainer().setVariable(varname, Encoder.URLEncode(new String(docOutput))) [FD]
Line_139 $$ if (!varname.equals("")) --> Line_146 $$ if (callProc != null && !callProc.equals("")) [CD]
Line_146 $$ if (callProc != null && !callProc.equals("")) --> Line_147 $$ Call call = new Call() [CD]
Line_146 $$ if (callProc != null && !callProc.equals("")) --> Line_148 $$ call.callProcedure(c, null, null, callProc, null) [CD]
Line_147 $$ Call call = new Call() --> Line_148 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_148 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_139 $$ if (!varname.equals("")) --> Line_150 $$ return new StringBuffer(Encoder.URLEncode(new String(docOutput))) [CD]
Line_138 $$ if (encoding != null && encoding.equalsIgnoreCase("url")) --> Line_152 $$ if (encoding != null && encoding.equalsIgnoreCase("xml")) [CD]
Line_152 $$ if (encoding != null && encoding.equalsIgnoreCase("xml")) --> Line_153 $$ if (!varname.equals("")) [CD]
Line_153 $$ if (!varname.equals("")) --> Line_154 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_154 $$ if (c.isProtectedVariable(varname)) [FD]
Line_154 $$ if (c.isProtectedVariable(varname)) --> Line_155 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_155 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_154 $$ if (c.isProtectedVariable(varname)) --> Line_156 $$ return new StringBuffer() [CD]
Line_153 $$ if (!varname.equals("")) --> Line_158 $$ c.getVariableContainer().setVariable(varname, Encoder.XMLEncode(new String(docOutput))) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_158 $$ c.getVariableContainer().setVariable(varname, Encoder.XMLEncode(new String(docOutput))) [FD]
Line_153 $$ if (!varname.equals("")) --> Line_160 $$ if (callProc != null && !callProc.equals("")) [CD]
Line_160 $$ if (callProc != null && !callProc.equals("")) --> Line_162 $$ call.callProcedure(c, null, null, callProc, null) [CD]
Line_147 $$ Call call = new Call() --> Line_162 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_162 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_153 $$ if (!varname.equals("")) --> Line_164 $$ return new StringBuffer(Encoder.XMLEncode(new String(docOutput))) [CD]
Line_152 $$ if (encoding != null && encoding.equalsIgnoreCase("xml")) --> Line_166 $$ if (encoding != null && encoding.equalsIgnoreCase("base64")) [CD]
Line_166 $$ if (encoding != null && encoding.equalsIgnoreCase("base64")) --> Line_167 $$ if (!varname.equals("")) [CD]
Line_167 $$ if (!varname.equals("")) --> Line_168 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_168 $$ if (c.isProtectedVariable(varname)) [FD]
Line_168 $$ if (c.isProtectedVariable(varname)) --> Line_169 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_169 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_168 $$ if (c.isProtectedVariable(varname)) --> Line_170 $$ return new StringBuffer() [CD]
Line_167 $$ if (!varname.equals("")) --> Line_172 $$ c.getVariableContainer().setVariable(varname, Base64.encode(docOutput)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_172 $$ c.getVariableContainer().setVariable(varname, Base64.encode(docOutput)) [FD]
Line_167 $$ if (!varname.equals("")) --> Line_174 $$ if (callProc != null && !callProc.equals("")) [CD]
Line_174 $$ if (callProc != null && !callProc.equals("")) --> Line_176 $$ call.callProcedure(c, null, null, callProc, null) [CD]
Line_147 $$ Call call = new Call() --> Line_176 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_176 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_167 $$ if (!varname.equals("")) --> Line_178 $$ return new StringBuffer(Base64.encode(docOutput)) [CD]
Line_166 $$ if (encoding != null && encoding.equalsIgnoreCase("base64")) --> Line_180 $$ if (encoding != null && (encoding.equalsIgnoreCase("javascript") || encoding.equalsIgnoreCase("js"))) [CD]
Line_180 $$ if (encoding != null && (encoding.equalsIgnoreCase("javascript") || encoding.equalsIgnoreCase("js"))) --> Line_181 $$ if (!varname.equals("")) [CD]
Line_181 $$ if (!varname.equals("")) --> Line_182 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_182 $$ if (c.isProtectedVariable(varname)) [FD]
Line_182 $$ if (c.isProtectedVariable(varname)) --> Line_183 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_183 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_182 $$ if (c.isProtectedVariable(varname)) --> Line_184 $$ return new StringBuffer() [CD]
Line_181 $$ if (!varname.equals("")) --> Line_186 $$ c.getVariableContainer().setVariable(varname, Encoder.JavascriptEncode(new String(docOutput))) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_186 $$ c.getVariableContainer().setVariable(varname, Encoder.JavascriptEncode(new String(docOutput))) [FD]
Line_181 $$ if (!varname.equals("")) --> Line_188 $$ if (callProc != null && !callProc.equals("")) [CD]
Line_188 $$ if (callProc != null && !callProc.equals("")) --> Line_190 $$ call.callProcedure(c, null, null, callProc, null) [CD]
Line_147 $$ Call call = new Call() --> Line_190 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_190 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_181 $$ if (!varname.equals("")) --> Line_192 $$ return new StringBuffer(Encoder.JavascriptEncode(new String(docOutput))) [CD]
Line_180 $$ if (encoding != null && (encoding.equalsIgnoreCase("javascript") || encoding.equalsIgnoreCase("js"))) --> Line_195 $$ if (!varname.equals("")) [CD]
Line_195 $$ if (!varname.equals("")) --> Line_196 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_196 $$ if (c.isProtectedVariable(varname)) [FD]
Line_196 $$ if (c.isProtectedVariable(varname)) --> Line_197 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_197 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_196 $$ if (c.isProtectedVariable(varname)) --> Line_198 $$ return new StringBuffer() [CD]
Line_195 $$ if (!varname.equals("")) --> Line_200 $$ c.getVariableContainer().setVariable(varname, new String(docOutput)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_200 $$ c.getVariableContainer().setVariable(varname, new String(docOutput)) [FD]
Line_195 $$ if (!varname.equals("")) --> Line_202 $$ if (callProc != null && !callProc.equals("")) [CD]
Line_202 $$ if (callProc != null && !callProc.equals("")) --> Line_204 $$ call.callProcedure(c, null, null, callProc, null) [CD]
Line_147 $$ Call call = new Call() --> Line_204 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_204 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_195 $$ if (!varname.equals("")) --> Line_206 $$ return new StringBuffer(new String(docOutput)) [CD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_210 $$ RenderEngine engine = new RenderEngine(null) [CD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_211 $$ DocumentEngine docEngine = null [CD]
Line_213 $$ if (vfsLoaded) --> Line_214 $$ ByteArrayInputStream bais = new ByteArrayInputStream(data) [CD]
Line_213 $$ if (vfsLoaded) --> Line_215 $$ docEngine = new DocumentEngine(bais) [CD]
Line_211 $$ DocumentEngine docEngine = null --> Line_215 $$ docEngine = new DocumentEngine(bais) [FD]
Line_213 $$ if (vfsLoaded) --> Line_217 $$ docEngine = new DocumentEngine(is) [CD]
Line_211 $$ DocumentEngine docEngine = null --> Line_217 $$ docEngine = new DocumentEngine(is) [FD]
Line_215 $$ docEngine = new DocumentEngine(bais) --> Line_217 $$ docEngine = new DocumentEngine(is) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_220 $$ c.setExceptionState(true, "XML parse of data read from file failed: " + e.getMessage()) [FD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_222 $$ engine.setDocumentEngine(docEngine) [CD]
Line_210 $$ RenderEngine engine = new RenderEngine(null) --> Line_222 $$ engine.setDocumentEngine(docEngine) [FD]
Line_211 $$ DocumentEngine docEngine = null --> Line_222 $$ engine.setDocumentEngine(docEngine) [FD]
Line_215 $$ docEngine = new DocumentEngine(bais) --> Line_222 $$ engine.setDocumentEngine(docEngine) [FD]
Line_217 $$ docEngine = new DocumentEngine(is) --> Line_222 $$ engine.setDocumentEngine(docEngine) [FD]
Line_106 $$ if (xmlparse == null || xmlparse.equals("")) --> Line_223 $$ c.addNodeSet(varname, docEngine.rootTag.thisNode) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_223 $$ c.addNodeSet(varname, docEngine.rootTag.thisNode) [FD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_225 $$ if (is != null) [CD]
Line_87 $$ FileInputStream is = null --> Line_225 $$ if (is != null) [FD]
Line_100 $$ is = new FileInputStream(file) --> Line_225 $$ if (is != null) [FD]
Line_137 $$ is = null --> Line_225 $$ if (is != null) [FD]
Line_87 $$ FileInputStream is = null --> Line_227 $$ is.close() [FD]
Line_100 $$ is = new FileInputStream(file) --> Line_227 $$ is.close() [FD]
Line_137 $$ is = null --> Line_227 $$ is.close() [FD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_231 $$ is = null [CD]
Line_87 $$ FileInputStream is = null --> Line_231 $$ is = null [FD]
Line_100 $$ is = new FileInputStream(file) --> Line_231 $$ is = null [FD]
Line_137 $$ is = null --> Line_231 $$ is = null [FD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_232 $$ if (callProc != null && !callProc.equals("")) [CD]
Line_232 $$ if (callProc != null && !callProc.equals("")) --> Line_234 $$ call.callProcedure(c, null, null, callProc, null) [CD]
Line_147 $$ Call call = new Call() --> Line_234 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_234 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_236 $$ return new StringBuffer() [CD]
Line_85 $$ if (action.equalsIgnoreCase("read")) --> Line_237 $$ if (action.equalsIgnoreCase("write")) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_239 $$ String rootDir = filenameData.toString() [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_239 $$ String rootDir = filenameData.toString() [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_239 $$ String rootDir = filenameData.toString() [FD]
Line_239 $$ String rootDir = filenameData.toString() --> Line_240 $$ if (rootDir.lastIndexOf("/") != -1 && rootDir.lastIndexOf("/") != 0) [FD]
Line_240 $$ if (rootDir.lastIndexOf("/") != -1 && rootDir.lastIndexOf("/") != 0) --> Line_241 $$ rootDir = rootDir.substring(0, rootDir.lastIndexOf("/")) [CD]
Line_239 $$ String rootDir = filenameData.toString() --> Line_241 $$ rootDir = rootDir.substring(0, rootDir.lastIndexOf("/")) [FD]
Line_240 $$ if (rootDir.lastIndexOf("/") != -1 && rootDir.lastIndexOf("/") != 0) --> Line_242 $$ java.io.File mkdirFile = new java.io.File(currentDocroot + rootDir) [CD]
Line_240 $$ if (rootDir.lastIndexOf("/") != -1 && rootDir.lastIndexOf("/") != 0) --> Line_243 $$ if (!mkdirFile.mkdirs()) [CD]
Line_242 $$ java.io.File mkdirFile = new java.io.File(currentDocroot + rootDir) --> Line_243 $$ if (!mkdirFile.mkdirs()) [FD]
Line_243 $$ if (!mkdirFile.mkdirs()) --> Line_244 $$ Debug.inform("Unable to create directory '" + currentDocroot + rootDir + "'") [CD]
Line_243 $$ if (!mkdirFile.mkdirs()) --> Line_246 $$ Debug.inform("Created directory '" + currentDocroot + rootDir + "'") [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_249 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_249 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_249 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_251 $$ if (file == null) [FD]
Line_251 $$ if (file == null) --> Line_252 $$ c.setExceptionState(true, "Unable to write to file '" + filenameData + "': Cannot write to location specified") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_252 $$ c.setExceptionState(true, "Unable to write to file '" + filenameData + "': Cannot write to location specified") [FD]
Line_251 $$ if (file == null) --> Line_253 $$ return new StringBuffer() [CD]
Line_251 $$ if (file == null) --> Line_254 $$ if (file.isDirectory()) [CD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_254 $$ if (file.isDirectory()) [FD]
Line_254 $$ if (file.isDirectory()) --> Line_255 $$ c.setExceptionState(true, "Unable to write to file '" + filenameData + "': Is a directory.") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_255 $$ c.setExceptionState(true, "Unable to write to file '" + filenameData + "': Is a directory.") [FD]
Line_254 $$ if (file.isDirectory()) --> Line_256 $$ return new StringBuffer() [CD]
Line_258 $$ if (filemode.equalsIgnoreCase("append")) --> Line_259 $$ fos = new FileOutputStream(file, true) [CD]
Line_250 $$ FileOutputStream fos = null --> Line_259 $$ fos = new FileOutputStream(file, true) [FD]
Line_258 $$ if (filemode.equalsIgnoreCase("append")) --> Line_261 $$ fos = new FileOutputStream(file, false) [CD]
Line_250 $$ FileOutputStream fos = null --> Line_261 $$ fos = new FileOutputStream(file, false) [FD]
Line_259 $$ fos = new FileOutputStream(file, true) --> Line_261 $$ fos = new FileOutputStream(file, false) [FD]
Line_263 $$ if (decoding != null && !decoding.equals("")) --> Line_264 $$ if (decoding.equalsIgnoreCase("base64")) [CD]
Line_50 $$ StringBuffer contentsData = null --> Line_266 $$ byte contentsDecoded[] = Base64.decode(contentsData.toString().getBytes()) [FD]
Line_52 $$ contentsData = TagInspector.processBody(this, c) --> Line_266 $$ byte contentsDecoded[] = Base64.decode(contentsData.toString().getBytes()) [FD]
Line_250 $$ FileOutputStream fos = null --> Line_267 $$ fos.write(contentsDecoded) [FD]
Line_259 $$ fos = new FileOutputStream(file, true) --> Line_267 $$ fos.write(contentsDecoded) [FD]
Line_261 $$ fos = new FileOutputStream(file, false) --> Line_267 $$ fos.write(contentsDecoded) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_269 $$ c.setExceptionState(true, "Encoded data in &lt;content&gt; element does not contain valid Base64-" + "encoded data.") [FD]
Line_264 $$ if (decoding.equalsIgnoreCase("base64")) --> Line_272 $$ fos.write(contentsData.toString().getBytes()) [CD]
Line_250 $$ FileOutputStream fos = null --> Line_272 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_259 $$ fos = new FileOutputStream(file, true) --> Line_272 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_261 $$ fos = new FileOutputStream(file, false) --> Line_272 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_50 $$ StringBuffer contentsData = null --> Line_272 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_52 $$ contentsData = TagInspector.processBody(this, c) --> Line_272 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_263 $$ if (decoding != null && !decoding.equals("")) --> Line_275 $$ fos.write(contentsData.toString().getBytes()) [CD]
Line_250 $$ FileOutputStream fos = null --> Line_275 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_259 $$ fos = new FileOutputStream(file, true) --> Line_275 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_261 $$ fos = new FileOutputStream(file, false) --> Line_275 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_50 $$ StringBuffer contentsData = null --> Line_275 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_52 $$ contentsData = TagInspector.processBody(this, c) --> Line_275 $$ fos.write(contentsData.toString().getBytes()) [FD]
Line_250 $$ FileOutputStream fos = null --> Line_278 $$ fos.flush() [FD]
Line_259 $$ fos = new FileOutputStream(file, true) --> Line_278 $$ fos.flush() [FD]
Line_261 $$ fos = new FileOutputStream(file, false) --> Line_278 $$ fos.flush() [FD]
Line_250 $$ FileOutputStream fos = null --> Line_282 $$ fos.close() [FD]
Line_259 $$ fos = new FileOutputStream(file, true) --> Line_282 $$ fos.close() [FD]
Line_261 $$ fos = new FileOutputStream(file, false) --> Line_282 $$ fos.close() [FD]
Line_3 $$ String logTime = null --> Line_283 $$ Debug.user(logTime, "Wrote contents to filename '" + currentDocroot + filenameData + "' (length=" + contentsData.length() + ")") [FD]
Line_5 $$ logTime = c.getWorkerContext().getWorkerStart() --> Line_283 $$ Debug.user(logTime, "Wrote contents to filename '" + currentDocroot + filenameData + "' (length=" + contentsData.length() + ")") [FD]
Line_50 $$ StringBuffer contentsData = null --> Line_283 $$ Debug.user(logTime, "Wrote contents to filename '" + currentDocroot + filenameData + "' (length=" + contentsData.length() + ")") [FD]
Line_52 $$ contentsData = TagInspector.processBody(this, c) --> Line_283 $$ Debug.user(logTime, "Wrote contents to filename '" + currentDocroot + filenameData + "' (length=" + contentsData.length() + ")") [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_285 $$ c.setExceptionState(true, "Unable to write to filename '" + filenameData + "': " + e.getMessage()) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_287 $$ c.setExceptionState(true, "Unable to write to filename '" + filenameData + "': " + e.getMessage()) [FD]
Line_237 $$ if (action.equalsIgnoreCase("write")) --> Line_289 $$ if (action.equalsIgnoreCase("listing")) [CD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_290 $$ String filenameDataString = filenameData.toString() [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_290 $$ String filenameDataString = filenameData.toString() [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_290 $$ String filenameDataString = filenameData.toString() [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_290 $$ String filenameDataString = filenameData.toString() [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_291 $$ if (filenameDataString.equals("")) [CD]
Line_290 $$ String filenameDataString = filenameData.toString() --> Line_291 $$ if (filenameDataString.equals("")) [FD]
Line_291 $$ if (filenameDataString.equals("")) --> Line_292 $$ filenameDataString = c.getClientContext().getPostVariable("current_path") [CD]
Line_290 $$ String filenameDataString = filenameData.toString() --> Line_292 $$ filenameDataString = c.getClientContext().getPostVariable("current_path") [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_292 $$ filenameDataString = c.getClientContext().getPostVariable("current_path") [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_294 $$ if (filenameDataString == null) [CD]
Line_290 $$ String filenameDataString = filenameData.toString() --> Line_294 $$ if (filenameDataString == null) [FD]
Line_292 $$ filenameDataString = c.getClientContext().getPostVariable("current_path") --> Line_294 $$ if (filenameDataString == null) [FD]
Line_294 $$ if (filenameDataString == null) --> Line_295 $$ c.setExceptionState(true, "Filename cannot be blank when listing.") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_295 $$ c.setExceptionState(true, "Filename cannot be blank when listing.") [FD]
Line_294 $$ if (filenameDataString == null) --> Line_296 $$ return new StringBuffer() [CD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_298 $$ while (filenameDataString.endsWith("/")) [CD]
Line_290 $$ String filenameDataString = filenameData.toString() --> Line_298 $$ while (filenameDataString.endsWith("/")) [FD]
Line_292 $$ filenameDataString = c.getClientContext().getPostVariable("current_path") --> Line_298 $$ while (filenameDataString.endsWith("/")) [FD]
Line_298 $$ while (filenameDataString.endsWith("/")) --> Line_299 $$ filenameDataString = filenameDataString.substring(0, filenameDataString.length() - 1) [CD]
Line_290 $$ String filenameDataString = filenameData.toString() --> Line_299 $$ filenameDataString = filenameDataString.substring(0, filenameDataString.length() - 1) [FD]
Line_292 $$ filenameDataString = c.getClientContext().getPostVariable("current_path") --> Line_299 $$ filenameDataString = filenameDataString.substring(0, filenameDataString.length() - 1) [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_301 $$ Vector fileList = new Vector() [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_302 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_302 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_302 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_303 $$ String curDirname = filenameData.toString() [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_303 $$ String curDirname = filenameData.toString() [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_303 $$ String curDirname = filenameData.toString() [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_303 $$ String curDirname = filenameData.toString() [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_304 $$ String parentDirectory = null [CD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_305 $$ String[] dirEntries = curDirname.split("/") [CD]
Line_303 $$ String curDirname = filenameData.toString() --> Line_305 $$ String[] dirEntries = curDirname.split("/") [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_306 $$ int numSlashes = 0 [CD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_307 $$ for (int i = 0; i < curDirname.length(); i++) [CD]
Line_303 $$ String curDirname = filenameData.toString() --> Line_307 $$ for (int i = 0; i < curDirname.length(); i++) [FD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_308 $$ if (curDirname.toString().charAt(i) == '/') [CD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_308 $$ if (curDirname.toString().charAt(i) == '/') [FD]
Line_303 $$ String curDirname = filenameData.toString() --> Line_308 $$ if (curDirname.toString().charAt(i) == '/') [FD]
Line_308 $$ if (curDirname.toString().charAt(i) == '/') --> Line_309 $$ numSlashes++ [CD]
Line_306 $$ int numSlashes = 0 --> Line_309 $$ numSlashes++ [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_312 $$ parentDirectory = "/" [CD]
Line_304 $$ String parentDirectory = null --> Line_312 $$ parentDirectory = "/" [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_313 $$ if (numSlashes > 1) [CD]
Line_306 $$ int numSlashes = 0 --> Line_313 $$ if (numSlashes > 1) [FD]
Line_313 $$ if (numSlashes > 1) --> Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) [CD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) [FD]
Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) --> Line_315 $$ if (dirEntries[i] != null && !dirEntries[i].equals("")) [CD]
Line_315 $$ if (dirEntries[i] != null && !dirEntries[i].equals("")) --> Line_316 $$ parentDirectory += dirEntries[i] + "/" [CD]
Line_304 $$ String parentDirectory = null --> Line_316 $$ parentDirectory += dirEntries[i] + "/" [FD]
Line_312 $$ parentDirectory = "/" --> Line_316 $$ parentDirectory += dirEntries[i] + "/" [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_320 $$ if (parentDirectory.length() > 1 && parentDirectory.endsWith("/")) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_320 $$ if (parentDirectory.length() > 1 && parentDirectory.endsWith("/")) [FD]
Line_304 $$ String parentDirectory = null --> Line_320 $$ if (parentDirectory.length() > 1 && parentDirectory.endsWith("/")) [FD]
Line_312 $$ parentDirectory = "/" --> Line_320 $$ if (parentDirectory.length() > 1 && parentDirectory.endsWith("/")) [FD]
Line_320 $$ if (parentDirectory.length() > 1 && parentDirectory.endsWith("/")) --> Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) [FD]
Line_304 $$ String parentDirectory = null --> Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) [FD]
Line_312 $$ parentDirectory = "/" --> Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_324 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_324 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_324 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_324 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_324 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_325 $$ Object[] list = listFiles.toArray() [CD]
Line_324 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) --> Line_325 $$ Object[] list = listFiles.toArray() [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_326 $$ int depth = 0 [CD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) [CD]
Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) --> Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) [FD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) [FD]
Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) --> Line_328 $$ if (filenameData.toString().charAt(i) == '/') [CD]
Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) --> Line_328 $$ if (filenameData.toString().charAt(i) == '/') [FD]
Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) --> Line_328 $$ if (filenameData.toString().charAt(i) == '/') [FD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_328 $$ if (filenameData.toString().charAt(i) == '/') [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_328 $$ if (filenameData.toString().charAt(i) == '/') [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_328 $$ if (filenameData.toString().charAt(i) == '/') [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_328 $$ if (filenameData.toString().charAt(i) == '/') [FD]
Line_328 $$ if (filenameData.toString().charAt(i) == '/') --> Line_329 $$ depth++ [CD]
Line_326 $$ int depth = 0 --> Line_329 $$ depth++ [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_332 $$ buffer = new StringBuffer() [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_332 $$ buffer = new StringBuffer() [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_333 $$ buffer.append("<listing filter=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_333 $$ buffer.append("<listing filter=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_333 $$ buffer.append("<listing filter=\"") [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_334 $$ buffer.append(filter) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_334 $$ buffer.append(filter) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_334 $$ buffer.append(filter) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_335 $$ buffer.append("\" path=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_335 $$ buffer.append("\" path=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_335 $$ buffer.append("\" path=\"") [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_336 $$ buffer.append(filenameData) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_336 $$ buffer.append(filenameData) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_336 $$ buffer.append(filenameData) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_336 $$ buffer.append(filenameData) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_336 $$ buffer.append(filenameData) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_336 $$ buffer.append(filenameData) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_337 $$ if (parentDirectory != null) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_337 $$ if (parentDirectory != null) [FD]
Line_304 $$ String parentDirectory = null --> Line_337 $$ if (parentDirectory != null) [FD]
Line_312 $$ parentDirectory = "/" --> Line_337 $$ if (parentDirectory != null) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_337 $$ if (parentDirectory != null) [FD]
Line_337 $$ if (parentDirectory != null) --> Line_338 $$ buffer.append("\" parent=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_338 $$ buffer.append("\" parent=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_338 $$ buffer.append("\" parent=\"") [FD]
Line_337 $$ if (parentDirectory != null) --> Line_339 $$ buffer.append(parentDirectory) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_339 $$ buffer.append(parentDirectory) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_339 $$ buffer.append(parentDirectory) [FD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_339 $$ buffer.append(parentDirectory) [FD]
Line_304 $$ String parentDirectory = null --> Line_339 $$ buffer.append(parentDirectory) [FD]
Line_312 $$ parentDirectory = "/" --> Line_339 $$ buffer.append(parentDirectory) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_339 $$ buffer.append(parentDirectory) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_341 $$ buffer.append("\">\n") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_341 $$ buffer.append("\">\n") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_341 $$ buffer.append("\">\n") [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_342 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(filter)", false, filter) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_342 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(filter)", false, filter) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_343 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_343 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_343 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_343 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_343 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_344 $$ if (parentDirectory != null) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_344 $$ if (parentDirectory != null) [FD]
Line_304 $$ String parentDirectory = null --> Line_344 $$ if (parentDirectory != null) [FD]
Line_312 $$ parentDirectory = "/" --> Line_344 $$ if (parentDirectory != null) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_344 $$ if (parentDirectory != null) [FD]
Line_344 $$ if (parentDirectory != null) --> Line_345 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_345 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_345 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_304 $$ String parentDirectory = null --> Line_345 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_312 $$ parentDirectory = "/" --> Line_345 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_345 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_344 $$ if (parentDirectory != null) --> Line_347 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, "/") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_347 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, "/") [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_349 $$ if (sort.equalsIgnoreCase("asc")) [CD]
Line_349 $$ if (sort.equalsIgnoreCase("asc")) --> Line_350 $$ Arrays.sort(list, new ZipSorterAscending()) [CD]
Line_325 $$ Object[] list = listFiles.toArray() --> Line_350 $$ Arrays.sort(list, new ZipSorterAscending()) [FD]
Line_349 $$ if (sort.equalsIgnoreCase("asc")) --> Line_352 $$ Arrays.sort(list, new ZipSorterDescending()) [CD]
Line_325 $$ Object[] list = listFiles.toArray() --> Line_352 $$ Arrays.sort(list, new ZipSorterDescending()) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_354 $$ for (int i = 0; i < list.length; i++) [CD]
Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) --> Line_354 $$ for (int i = 0; i < list.length; i++) [FD]
Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) --> Line_354 $$ for (int i = 0; i < list.length; i++) [FD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_354 $$ for (int i = 0; i < list.length; i++) [FD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_355 $$ ZipEntry zEntry = (ZipEntry) list[i] [CD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_356 $$ String zipFile = filenameData.toString() + "/" + zEntry.getName() [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_356 $$ String zipFile = filenameData.toString() + "/" + zEntry.getName() [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_356 $$ String zipFile = filenameData.toString() + "/" + zEntry.getName() [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_356 $$ String zipFile = filenameData.toString() + "/" + zEntry.getName() [FD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_357 $$ String displayFilename = zipFile.replaceFirst(filenameData.toString(), "") [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_357 $$ String displayFilename = zipFile.replaceFirst(filenameData.toString(), "") [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_357 $$ String displayFilename = zipFile.replaceFirst(filenameData.toString(), "") [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_357 $$ String displayFilename = zipFile.replaceFirst(filenameData.toString(), "") [FD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_358 $$ int curDepth = 0 [CD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_359 $$ if (zipFile.equalsIgnoreCase(".acl") || zipFile.equalsIgnoreCase("access.list") || zipFile.equalsIgnoreCase("application.inc") || zipFile.equalsIgnoreCase("global.inc") || zipFile.indexOf("/.proc") != -1 || zipFile.indexOf("/procedures") != -1) [CD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_362 $$ for (int x = 0; x < displayFilename.length(); x++) [CD]
Line_357 $$ String displayFilename = zipFile.replaceFirst(filenameData.toString(), "") --> Line_362 $$ for (int x = 0; x < displayFilename.length(); x++) [FD]
Line_362 $$ for (int x = 0; x < displayFilename.length(); x++) --> Line_363 $$ if (displayFilename.charAt(x) == '/') [CD]
Line_362 $$ for (int x = 0; x < displayFilename.length(); x++) --> Line_363 $$ if (displayFilename.charAt(x) == '/') [FD]
Line_357 $$ String displayFilename = zipFile.replaceFirst(filenameData.toString(), "") --> Line_363 $$ if (displayFilename.charAt(x) == '/') [FD]
Line_363 $$ if (displayFilename.charAt(x) == '/') --> Line_364 $$ curDepth++ [CD]
Line_358 $$ int curDepth = 0 --> Line_364 $$ curDepth++ [FD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_367 $$ if (zipFile.startsWith(filenameData.toString())) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_367 $$ if (zipFile.startsWith(filenameData.toString())) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_367 $$ if (zipFile.startsWith(filenameData.toString())) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_367 $$ if (zipFile.startsWith(filenameData.toString())) [FD]
Line_367 $$ if (zipFile.startsWith(filenameData.toString())) --> Line_370 $$ if (curDepth == depth) [CD]
Line_358 $$ int curDepth = 0 --> Line_370 $$ if (curDepth == depth) [FD]
Line_326 $$ int depth = 0 --> Line_370 $$ if (curDepth == depth) [FD]
Line_370 $$ if (curDepth == depth) --> Line_371 $$ if (zEntry.isDirectory()) [CD]
Line_370 $$ if (curDepth == depth) --> Line_377 $$ String fileTime = Long.toString(zEntry.getTime()) [CD]
Line_370 $$ if (curDepth == depth) --> Line_378 $$ buffer.append("    <file name=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_378 $$ buffer.append("    <file name=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_378 $$ buffer.append("    <file name=\"") [FD]
Line_370 $$ if (curDepth == depth) --> Line_379 $$ buffer.append(displayFilename) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_379 $$ buffer.append(displayFilename) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_379 $$ buffer.append(displayFilename) [FD]
Line_357 $$ String displayFilename = zipFile.replaceFirst(filenameData.toString(), "") --> Line_379 $$ buffer.append(displayFilename) [FD]
Line_370 $$ if (curDepth == depth) --> Line_380 $$ buffer.append("\" length=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_380 $$ buffer.append("\" length=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_380 $$ buffer.append("\" length=\"") [FD]
Line_370 $$ if (curDepth == depth) --> Line_381 $$ buffer.append(fileLength) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_381 $$ buffer.append(fileLength) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_381 $$ buffer.append(fileLength) [FD]
Line_370 $$ if (curDepth == depth) --> Line_382 $$ buffer.append("\" type=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_382 $$ buffer.append("\" type=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_382 $$ buffer.append("\" type=\"") [FD]
Line_370 $$ if (curDepth == depth) --> Line_383 $$ buffer.append(fileType) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_383 $$ buffer.append(fileType) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_383 $$ buffer.append(fileType) [FD]
Line_370 $$ if (curDepth == depth) --> Line_384 $$ buffer.append("\" mode=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_384 $$ buffer.append("\" mode=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_384 $$ buffer.append("\" mode=\"") [FD]
Line_370 $$ if (curDepth == depth) --> Line_385 $$ buffer.append(fileMode) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_385 $$ buffer.append(fileMode) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_385 $$ buffer.append(fileMode) [FD]
Line_370 $$ if (curDepth == depth) --> Line_386 $$ buffer.append("\" modtime=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_386 $$ buffer.append("\" modtime=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_386 $$ buffer.append("\" modtime=\"") [FD]
Line_370 $$ if (curDepth == depth) --> Line_387 $$ buffer.append(fileTime) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_387 $$ buffer.append(fileTime) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_387 $$ buffer.append(fileTime) [FD]
Line_370 $$ if (curDepth == depth) --> Line_388 $$ buffer.append("\"/>\n") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_388 $$ buffer.append("\"/>\n") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_388 $$ buffer.append("\"/>\n") [FD]
Line_370 $$ if (curDepth == depth) --> Line_389 $$ c.getVariableContainer().setVariable(c, varname + "(" + displayFilename + ")(length)", false, "" + fileLength) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_389 $$ c.getVariableContainer().setVariable(c, varname + "(" + displayFilename + ")(length)", false, "" + fileLength) [FD]
Line_370 $$ if (curDepth == depth) --> Line_390 $$ c.getVariableContainer().setVariable(c, varname + "(" + displayFilename + ")(type)", false, fileType) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_390 $$ c.getVariableContainer().setVariable(c, varname + "(" + displayFilename + ")(type)", false, fileType) [FD]
Line_370 $$ if (curDepth == depth) --> Line_391 $$ c.getVariableContainer().setVariable(c, varname + "(" + displayFilename + ")(mode)", false, fileMode) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_391 $$ c.getVariableContainer().setVariable(c, varname + "(" + displayFilename + ")(mode)", false, fileMode) [FD]
Line_370 $$ if (curDepth == depth) --> Line_392 $$ c.getVariableContainer().setVariable(c, varname + "(" + displayFilename + ")(time)", false, fileTime) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_392 $$ c.getVariableContainer().setVariable(c, varname + "(" + displayFilename + ")(time)", false, fileTime) [FD]
Line_367 $$ if (zipFile.startsWith(filenameData.toString())) --> Line_395 $$ if (curDepth == depth) [CD]
Line_358 $$ int curDepth = 0 --> Line_395 $$ if (curDepth == depth) [FD]
Line_326 $$ int depth = 0 --> Line_395 $$ if (curDepth == depth) [FD]
Line_395 $$ if (curDepth == depth) --> Line_396 $$ fileList.add(zipFile) [CD]
Line_301 $$ Vector fileList = new Vector() --> Line_396 $$ fileList.add(zipFile) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_400 $$ buffer.append("</listing>") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_400 $$ buffer.append("</listing>") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_400 $$ buffer.append("</listing>") [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_401 $$ if (xmlOutput.equalsIgnoreCase("true")) [CD]
Line_401 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_402 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_402 $$ if (c.isProtectedVariable(varname)) [FD]
Line_402 $$ if (c.isProtectedVariable(varname)) --> Line_403 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_403 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_402 $$ if (c.isProtectedVariable(varname)) --> Line_404 $$ return new StringBuffer() [CD]
Line_401 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_406 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_406 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_406 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_406 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_401 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_407 $$ return new StringBuffer() [CD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_409 $$ c.getVariableContainer().setVector(varname, fileList) [CD]
Line_301 $$ Vector fileList = new Vector() --> Line_409 $$ c.getVariableContainer().setVector(varname, fileList) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_409 $$ c.getVariableContainer().setVector(varname, fileList) [FD]
Line_323 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_JAR) --> Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_411 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_411 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_411 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_411 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_411 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_412 $$ Object[] list = listFiles.toArray() [CD]
Line_324 $$ Vector listFiles = c.getVendContext().getFileAccess().listFiles(filenameData.toString(), c.getClientContext().getMatchedHost()) --> Line_412 $$ Object[] list = listFiles.toArray() [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_413 $$ java.io.File[] filesorted = new java.io.File[list.length] [CD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_414 $$ for (int i = 0; i < list.length; i++) [CD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_414 $$ for (int i = 0; i < list.length; i++) [FD]
Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) --> Line_414 $$ for (int i = 0; i < list.length; i++) [FD]
Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) --> Line_414 $$ for (int i = 0; i < list.length; i++) [FD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_414 $$ for (int i = 0; i < list.length; i++) [FD]
Line_414 $$ for (int i = 0; i < list.length; i++) --> Line_415 $$ filesorted[i] = (java.io.File) list[i] [CD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_417 $$ if (sort.equalsIgnoreCase("asc")) [CD]
Line_417 $$ if (sort.equalsIgnoreCase("asc")) --> Line_418 $$ Arrays.sort(filesorted, new FileSorterAscending()) [CD]
Line_413 $$ java.io.File[] filesorted = new java.io.File[list.length] --> Line_418 $$ Arrays.sort(filesorted, new FileSorterAscending()) [FD]
Line_417 $$ if (sort.equalsIgnoreCase("asc")) --> Line_420 $$ Arrays.sort(filesorted, new FileSorterDescending()) [CD]
Line_413 $$ java.io.File[] filesorted = new java.io.File[list.length] --> Line_420 $$ Arrays.sort(filesorted, new FileSorterDescending()) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_422 $$ buffer = new StringBuffer() [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_422 $$ buffer = new StringBuffer() [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_422 $$ buffer = new StringBuffer() [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_423 $$ buffer.append("<listing filter=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_423 $$ buffer.append("<listing filter=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_423 $$ buffer.append("<listing filter=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_423 $$ buffer.append("<listing filter=\"") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_424 $$ buffer.append(filter) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_424 $$ buffer.append(filter) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_424 $$ buffer.append(filter) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_424 $$ buffer.append(filter) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_425 $$ buffer.append("\" path=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_425 $$ buffer.append("\" path=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_425 $$ buffer.append("\" path=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_425 $$ buffer.append("\" path=\"") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_426 $$ buffer.append(filenameData) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_426 $$ buffer.append(filenameData) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_426 $$ buffer.append(filenameData) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_426 $$ buffer.append(filenameData) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_426 $$ buffer.append(filenameData) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_426 $$ buffer.append(filenameData) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_426 $$ buffer.append(filenameData) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_427 $$ if (parentDirectory != null) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_427 $$ if (parentDirectory != null) [FD]
Line_304 $$ String parentDirectory = null --> Line_427 $$ if (parentDirectory != null) [FD]
Line_312 $$ parentDirectory = "/" --> Line_427 $$ if (parentDirectory != null) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_427 $$ if (parentDirectory != null) [FD]
Line_427 $$ if (parentDirectory != null) --> Line_428 $$ buffer.append("\" parent=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_428 $$ buffer.append("\" parent=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_428 $$ buffer.append("\" parent=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_428 $$ buffer.append("\" parent=\"") [FD]
Line_427 $$ if (parentDirectory != null) --> Line_429 $$ buffer.append(parentDirectory) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_429 $$ buffer.append(parentDirectory) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_429 $$ buffer.append(parentDirectory) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_429 $$ buffer.append(parentDirectory) [FD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_429 $$ buffer.append(parentDirectory) [FD]
Line_304 $$ String parentDirectory = null --> Line_429 $$ buffer.append(parentDirectory) [FD]
Line_312 $$ parentDirectory = "/" --> Line_429 $$ buffer.append(parentDirectory) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_429 $$ buffer.append(parentDirectory) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_431 $$ buffer.append("\">\n") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_431 $$ buffer.append("\">\n") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_431 $$ buffer.append("\">\n") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_431 $$ buffer.append("\">\n") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_432 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(filter)", false, filter) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_432 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(filter)", false, filter) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_433 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_433 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_433 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_433 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_433 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_434 $$ if (parentDirectory != null) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_434 $$ if (parentDirectory != null) [FD]
Line_304 $$ String parentDirectory = null --> Line_434 $$ if (parentDirectory != null) [FD]
Line_312 $$ parentDirectory = "/" --> Line_434 $$ if (parentDirectory != null) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_434 $$ if (parentDirectory != null) [FD]
Line_434 $$ if (parentDirectory != null) --> Line_435 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_435 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_435 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_304 $$ String parentDirectory = null --> Line_435 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_312 $$ parentDirectory = "/" --> Line_435 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_435 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_434 $$ if (parentDirectory != null) --> Line_437 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, "/") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_437 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, "/") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_439 $$ for (int i = 0; i < filesorted.length; i++) [CD]
Line_414 $$ for (int i = 0; i < list.length; i++) --> Line_439 $$ for (int i = 0; i < filesorted.length; i++) [FD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_439 $$ for (int i = 0; i < filesorted.length; i++) [FD]
Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) --> Line_439 $$ for (int i = 0; i < filesorted.length; i++) [FD]
Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) --> Line_439 $$ for (int i = 0; i < filesorted.length; i++) [FD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_439 $$ for (int i = 0; i < filesorted.length; i++) [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_440 $$ java.io.File zEntry = filesorted[i] [CD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_441 $$ String filename = filenameData.toString() + "/" + zEntry.getName() [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_441 $$ String filename = filenameData.toString() + "/" + zEntry.getName() [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_441 $$ String filename = filenameData.toString() + "/" + zEntry.getName() [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_441 $$ String filename = filenameData.toString() + "/" + zEntry.getName() [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_442 $$ if (filename.equalsIgnoreCase(".acl") || filename.equalsIgnoreCase("access.list") || filename.equalsIgnoreCase("application.inc") || filename.equalsIgnoreCase("global.inc") || filename.indexOf("/.proc") != -1 || filename.indexOf("/procedures") != -1) [CD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_445 $$ String displayFilename = filename.replaceFirst(filenameData.toString(), "") [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_445 $$ String displayFilename = filename.replaceFirst(filenameData.toString(), "") [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_445 $$ String displayFilename = filename.replaceFirst(filenameData.toString(), "") [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_445 $$ String displayFilename = filename.replaceFirst(filenameData.toString(), "") [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_446 $$ String fileLength = "" + zEntry.length() [CD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_447 $$ String fileType = "file" [CD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_448 $$ if (zEntry.isDirectory()) [CD]
Line_447 $$ String fileType = "file" --> Line_449 $$ fileType = "directory" [FD]
Line_447 $$ String fileType = "file" --> Line_451 $$ fileType = "file" [FD]
Line_449 $$ fileType = "directory" --> Line_451 $$ fileType = "file" [FD]
Line_447 $$ String fileType = "file" --> Line_453 $$ fileType = "hidden" [FD]
Line_449 $$ fileType = "directory" --> Line_453 $$ fileType = "hidden" [FD]
Line_451 $$ fileType = "file" --> Line_453 $$ fileType = "hidden" [FD]
Line_447 $$ String fileType = "file" --> Line_455 $$ fileType = "absolute" [FD]
Line_449 $$ fileType = "directory" --> Line_455 $$ fileType = "absolute" [FD]
Line_451 $$ fileType = "file" --> Line_455 $$ fileType = "absolute" [FD]
Line_453 $$ fileType = "hidden" --> Line_455 $$ fileType = "absolute" [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_457 $$ String fileMode = "read-only" [CD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_458 $$ if (zEntry.canRead() && !zEntry.canWrite()) [CD]
Line_457 $$ String fileMode = "read-only" --> Line_459 $$ fileMode = "read-only" [FD]
Line_457 $$ String fileMode = "read-only" --> Line_461 $$ fileMode = "write-only" [FD]
Line_459 $$ fileMode = "read-only" --> Line_461 $$ fileMode = "write-only" [FD]
Line_457 $$ String fileMode = "read-only" --> Line_463 $$ fileMode = "read/write" [FD]
Line_459 $$ fileMode = "read-only" --> Line_463 $$ fileMode = "read/write" [FD]
Line_461 $$ fileMode = "write-only" --> Line_463 $$ fileMode = "read/write" [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_465 $$ String fileTime = Long.toString(zEntry.lastModified()) [CD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) [CD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_467 $$ buffer.append("    <file name=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_467 $$ buffer.append("    <file name=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_467 $$ buffer.append("    <file name=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_467 $$ buffer.append("    <file name=\"") [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_468 $$ buffer.append(filename) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_468 $$ buffer.append(filename) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_468 $$ buffer.append(filename) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_468 $$ buffer.append(filename) [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_469 $$ buffer.append("\" length=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_469 $$ buffer.append("\" length=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_469 $$ buffer.append("\" length=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_469 $$ buffer.append("\" length=\"") [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_470 $$ buffer.append(fileLength) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_470 $$ buffer.append(fileLength) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_470 $$ buffer.append(fileLength) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_470 $$ buffer.append(fileLength) [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_471 $$ buffer.append("\" type=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_471 $$ buffer.append("\" type=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_471 $$ buffer.append("\" type=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_471 $$ buffer.append("\" type=\"") [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_472 $$ buffer.append(fileType) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_472 $$ buffer.append(fileType) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_472 $$ buffer.append(fileType) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_472 $$ buffer.append(fileType) [FD]
Line_447 $$ String fileType = "file" --> Line_472 $$ buffer.append(fileType) [FD]
Line_449 $$ fileType = "directory" --> Line_472 $$ buffer.append(fileType) [FD]
Line_451 $$ fileType = "file" --> Line_472 $$ buffer.append(fileType) [FD]
Line_453 $$ fileType = "hidden" --> Line_472 $$ buffer.append(fileType) [FD]
Line_455 $$ fileType = "absolute" --> Line_472 $$ buffer.append(fileType) [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_473 $$ buffer.append("\" mode=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_473 $$ buffer.append("\" mode=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_473 $$ buffer.append("\" mode=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_473 $$ buffer.append("\" mode=\"") [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_474 $$ buffer.append(fileMode) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_474 $$ buffer.append(fileMode) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_474 $$ buffer.append(fileMode) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_474 $$ buffer.append(fileMode) [FD]
Line_457 $$ String fileMode = "read-only" --> Line_474 $$ buffer.append(fileMode) [FD]
Line_459 $$ fileMode = "read-only" --> Line_474 $$ buffer.append(fileMode) [FD]
Line_461 $$ fileMode = "write-only" --> Line_474 $$ buffer.append(fileMode) [FD]
Line_463 $$ fileMode = "read/write" --> Line_474 $$ buffer.append(fileMode) [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_475 $$ buffer.append("\" modtime=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_475 $$ buffer.append("\" modtime=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_475 $$ buffer.append("\" modtime=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_475 $$ buffer.append("\" modtime=\"") [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_476 $$ buffer.append(fileTime) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_476 $$ buffer.append(fileTime) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_476 $$ buffer.append(fileTime) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_476 $$ buffer.append(fileTime) [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_477 $$ buffer.append("\"/>\n") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_477 $$ buffer.append("\"/>\n") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_477 $$ buffer.append("\"/>\n") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_477 $$ buffer.append("\"/>\n") [FD]
Line_466 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_479 $$ fileList.add(zEntry) [CD]
Line_301 $$ Vector fileList = new Vector() --> Line_479 $$ fileList.add(zEntry) [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_481 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(length)", false, "" + fileLength) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_481 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(length)", false, "" + fileLength) [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_482 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(type)", false, fileType) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_482 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(type)", false, fileType) [FD]
Line_447 $$ String fileType = "file" --> Line_482 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(type)", false, fileType) [FD]
Line_449 $$ fileType = "directory" --> Line_482 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(type)", false, fileType) [FD]
Line_451 $$ fileType = "file" --> Line_482 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(type)", false, fileType) [FD]
Line_453 $$ fileType = "hidden" --> Line_482 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(type)", false, fileType) [FD]
Line_455 $$ fileType = "absolute" --> Line_482 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(type)", false, fileType) [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_483 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(mode)", false, fileMode) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_483 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(mode)", false, fileMode) [FD]
Line_457 $$ String fileMode = "read-only" --> Line_483 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(mode)", false, fileMode) [FD]
Line_459 $$ fileMode = "read-only" --> Line_483 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(mode)", false, fileMode) [FD]
Line_461 $$ fileMode = "write-only" --> Line_483 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(mode)", false, fileMode) [FD]
Line_463 $$ fileMode = "read/write" --> Line_483 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(mode)", false, fileMode) [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_484 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(time)", false, fileTime) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_484 $$ c.getVariableContainer().setVariable(c, varname + "(" + filename + ")(time)", false, fileTime) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_486 $$ buffer.append("</listing>") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_486 $$ buffer.append("</listing>") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_486 $$ buffer.append("</listing>") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_486 $$ buffer.append("</listing>") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_487 $$ if (xmlOutput.equalsIgnoreCase("true")) [CD]
Line_487 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_488 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_488 $$ if (c.isProtectedVariable(varname)) [FD]
Line_488 $$ if (c.isProtectedVariable(varname)) --> Line_489 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_489 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_488 $$ if (c.isProtectedVariable(varname)) --> Line_490 $$ return new StringBuffer() [CD]
Line_487 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_492 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_492 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_492 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_492 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_492 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_487 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_493 $$ return new StringBuffer() [CD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_495 $$ c.getVariableContainer().setVector(varname, fileList) [CD]
Line_301 $$ Vector fileList = new Vector() --> Line_495 $$ c.getVariableContainer().setVector(varname, fileList) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_495 $$ c.getVariableContainer().setVector(varname, fileList) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_497 $$ String[] fileStringList = null [CD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_498 $$ if (!filter.equals("")) [CD]
Line_498 $$ if (!filter.equals("")) --> Line_499 $$ fileStringList = file.list(new ListFilter(filter)) [CD]
Line_497 $$ String[] fileStringList = null --> Line_499 $$ fileStringList = file.list(new ListFilter(filter)) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_499 $$ fileStringList = file.list(new ListFilter(filter)) [FD]
Line_498 $$ if (!filter.equals("")) --> Line_501 $$ fileStringList = file.list() [CD]
Line_497 $$ String[] fileStringList = null --> Line_501 $$ fileStringList = file.list() [FD]
Line_499 $$ fileStringList = file.list(new ListFilter(filter)) --> Line_501 $$ fileStringList = file.list() [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_501 $$ fileStringList = file.list() [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_503 $$ if (sort.equalsIgnoreCase("asc")) [CD]
Line_503 $$ if (sort.equalsIgnoreCase("asc")) --> Line_504 $$ Arrays.sort(fileStringList, new StringSorterAscending()) [CD]
Line_497 $$ String[] fileStringList = null --> Line_504 $$ Arrays.sort(fileStringList, new StringSorterAscending()) [FD]
Line_499 $$ fileStringList = file.list(new ListFilter(filter)) --> Line_504 $$ Arrays.sort(fileStringList, new StringSorterAscending()) [FD]
Line_501 $$ fileStringList = file.list() --> Line_504 $$ Arrays.sort(fileStringList, new StringSorterAscending()) [FD]
Line_503 $$ if (sort.equalsIgnoreCase("asc")) --> Line_506 $$ Arrays.sort(fileStringList, new StringSorterDescending()) [CD]
Line_497 $$ String[] fileStringList = null --> Line_506 $$ Arrays.sort(fileStringList, new StringSorterDescending()) [FD]
Line_499 $$ fileStringList = file.list(new ListFilter(filter)) --> Line_506 $$ Arrays.sort(fileStringList, new StringSorterDescending()) [FD]
Line_501 $$ fileStringList = file.list() --> Line_506 $$ Arrays.sort(fileStringList, new StringSorterDescending()) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_508 $$ if (fileStringList == null) [CD]
Line_497 $$ String[] fileStringList = null --> Line_508 $$ if (fileStringList == null) [FD]
Line_499 $$ fileStringList = file.list(new ListFilter(filter)) --> Line_508 $$ if (fileStringList == null) [FD]
Line_501 $$ fileStringList = file.list() --> Line_508 $$ if (fileStringList == null) [FD]
Line_508 $$ if (fileStringList == null) --> Line_509 $$ buffer.append("<listing filter=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_509 $$ buffer.append("<listing filter=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_509 $$ buffer.append("<listing filter=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_509 $$ buffer.append("<listing filter=\"") [FD]
Line_508 $$ if (fileStringList == null) --> Line_510 $$ buffer.append(filter) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_510 $$ buffer.append(filter) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_510 $$ buffer.append(filter) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_510 $$ buffer.append(filter) [FD]
Line_508 $$ if (fileStringList == null) --> Line_511 $$ buffer.append("\" path=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_511 $$ buffer.append("\" path=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_511 $$ buffer.append("\" path=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_511 $$ buffer.append("\" path=\"") [FD]
Line_508 $$ if (fileStringList == null) --> Line_512 $$ buffer.append(filenameData) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_512 $$ buffer.append(filenameData) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_512 $$ buffer.append(filenameData) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_512 $$ buffer.append(filenameData) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_512 $$ buffer.append(filenameData) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_512 $$ buffer.append(filenameData) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_512 $$ buffer.append(filenameData) [FD]
Line_508 $$ if (fileStringList == null) --> Line_513 $$ if (parentDirectory != null) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_513 $$ if (parentDirectory != null) [FD]
Line_304 $$ String parentDirectory = null --> Line_513 $$ if (parentDirectory != null) [FD]
Line_312 $$ parentDirectory = "/" --> Line_513 $$ if (parentDirectory != null) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_513 $$ if (parentDirectory != null) [FD]
Line_513 $$ if (parentDirectory != null) --> Line_514 $$ buffer.append("\" parent=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_514 $$ buffer.append("\" parent=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_514 $$ buffer.append("\" parent=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_514 $$ buffer.append("\" parent=\"") [FD]
Line_513 $$ if (parentDirectory != null) --> Line_515 $$ buffer.append(parentDirectory) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_515 $$ buffer.append(parentDirectory) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_515 $$ buffer.append(parentDirectory) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_515 $$ buffer.append(parentDirectory) [FD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_515 $$ buffer.append(parentDirectory) [FD]
Line_304 $$ String parentDirectory = null --> Line_515 $$ buffer.append(parentDirectory) [FD]
Line_312 $$ parentDirectory = "/" --> Line_515 $$ buffer.append(parentDirectory) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_515 $$ buffer.append(parentDirectory) [FD]
Line_508 $$ if (fileStringList == null) --> Line_517 $$ buffer.append("\"/>\n") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_517 $$ buffer.append("\"/>\n") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_517 $$ buffer.append("\"/>\n") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_517 $$ buffer.append("\"/>\n") [FD]
Line_508 $$ if (fileStringList == null) --> Line_518 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(filter)", false, filter) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_518 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(filter)", false, filter) [FD]
Line_508 $$ if (fileStringList == null) --> Line_519 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_519 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_519 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_519 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_519 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_508 $$ if (fileStringList == null) --> Line_520 $$ if (parentDirectory != null) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_520 $$ if (parentDirectory != null) [FD]
Line_304 $$ String parentDirectory = null --> Line_520 $$ if (parentDirectory != null) [FD]
Line_312 $$ parentDirectory = "/" --> Line_520 $$ if (parentDirectory != null) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_520 $$ if (parentDirectory != null) [FD]
Line_520 $$ if (parentDirectory != null) --> Line_521 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_521 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_521 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_304 $$ String parentDirectory = null --> Line_521 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_312 $$ parentDirectory = "/" --> Line_521 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_521 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_520 $$ if (parentDirectory != null) --> Line_523 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, "/") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_523 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, "/") [FD]
Line_508 $$ if (fileStringList == null) --> Line_525 $$ if (xmlOutput.equalsIgnoreCase("true")) [CD]
Line_525 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_526 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_526 $$ if (c.isProtectedVariable(varname)) [FD]
Line_526 $$ if (c.isProtectedVariable(varname)) --> Line_527 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_527 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_526 $$ if (c.isProtectedVariable(varname)) --> Line_528 $$ return new StringBuffer() [CD]
Line_525 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_530 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_530 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_530 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_530 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_530 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_525 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_532 $$ c.getVariableContainer().setVector(varname, fileList) [CD]
Line_301 $$ Vector fileList = new Vector() --> Line_532 $$ c.getVariableContainer().setVector(varname, fileList) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_532 $$ c.getVariableContainer().setVector(varname, fileList) [FD]
Line_508 $$ if (fileStringList == null) --> Line_534 $$ return new StringBuffer() [CD]
Line_508 $$ if (fileStringList == null) --> Line_536 $$ Debug.user(logTime, "Directory '" + currentDocroot + filenameData + "' returns " + fileStringList.length + " entry(ies)") [CD]
Line_3 $$ String logTime = null --> Line_536 $$ Debug.user(logTime, "Directory '" + currentDocroot + filenameData + "' returns " + fileStringList.length + " entry(ies)") [FD]
Line_5 $$ logTime = c.getWorkerContext().getWorkerStart() --> Line_536 $$ Debug.user(logTime, "Directory '" + currentDocroot + filenameData + "' returns " + fileStringList.length + " entry(ies)") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_538 $$ buffer = new StringBuffer() [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_538 $$ buffer = new StringBuffer() [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_538 $$ buffer = new StringBuffer() [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_538 $$ buffer = new StringBuffer() [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_539 $$ buffer.append("<listing filter=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_539 $$ buffer.append("<listing filter=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_539 $$ buffer.append("<listing filter=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_539 $$ buffer.append("<listing filter=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_539 $$ buffer.append("<listing filter=\"") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_540 $$ buffer.append(filter) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_540 $$ buffer.append(filter) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_540 $$ buffer.append(filter) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_540 $$ buffer.append(filter) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_540 $$ buffer.append(filter) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_541 $$ buffer.append("\" path=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_541 $$ buffer.append("\" path=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_541 $$ buffer.append("\" path=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_541 $$ buffer.append("\" path=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_541 $$ buffer.append("\" path=\"") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_542 $$ buffer.append(filenameData) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_542 $$ buffer.append(filenameData) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_542 $$ buffer.append(filenameData) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_542 $$ buffer.append(filenameData) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_542 $$ buffer.append(filenameData) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_542 $$ buffer.append(filenameData) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_542 $$ buffer.append(filenameData) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_542 $$ buffer.append(filenameData) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_543 $$ if (parentDirectory != null) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_543 $$ if (parentDirectory != null) [FD]
Line_304 $$ String parentDirectory = null --> Line_543 $$ if (parentDirectory != null) [FD]
Line_312 $$ parentDirectory = "/" --> Line_543 $$ if (parentDirectory != null) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_543 $$ if (parentDirectory != null) [FD]
Line_543 $$ if (parentDirectory != null) --> Line_544 $$ buffer.append("\" parent=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_544 $$ buffer.append("\" parent=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_544 $$ buffer.append("\" parent=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_544 $$ buffer.append("\" parent=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_544 $$ buffer.append("\" parent=\"") [FD]
Line_543 $$ if (parentDirectory != null) --> Line_545 $$ buffer.append(parentDirectory) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_545 $$ buffer.append(parentDirectory) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_545 $$ buffer.append(parentDirectory) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_545 $$ buffer.append(parentDirectory) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_545 $$ buffer.append(parentDirectory) [FD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_545 $$ buffer.append(parentDirectory) [FD]
Line_304 $$ String parentDirectory = null --> Line_545 $$ buffer.append(parentDirectory) [FD]
Line_312 $$ parentDirectory = "/" --> Line_545 $$ buffer.append(parentDirectory) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_545 $$ buffer.append(parentDirectory) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_547 $$ buffer.append("\">\n") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_547 $$ buffer.append("\">\n") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_547 $$ buffer.append("\">\n") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_547 $$ buffer.append("\">\n") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_547 $$ buffer.append("\">\n") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_548 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(filter)", false, filter) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_548 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(filter)", false, filter) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_549 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_549 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_549 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_549 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_549 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(path)", false, filenameData) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_550 $$ if (parentDirectory != null) [CD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_550 $$ if (parentDirectory != null) [FD]
Line_304 $$ String parentDirectory = null --> Line_550 $$ if (parentDirectory != null) [FD]
Line_312 $$ parentDirectory = "/" --> Line_550 $$ if (parentDirectory != null) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_550 $$ if (parentDirectory != null) [FD]
Line_550 $$ if (parentDirectory != null) --> Line_551 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_551 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_316 $$ parentDirectory += dirEntries[i] + "/" --> Line_551 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_304 $$ String parentDirectory = null --> Line_551 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_312 $$ parentDirectory = "/" --> Line_551 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_321 $$ parentDirectory = parentDirectory.substring(0, parentDirectory.length() - 1) --> Line_551 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, parentDirectory) [FD]
Line_550 $$ if (parentDirectory != null) --> Line_553 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, "/") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_553 $$ c.getVariableContainer().setVariable(c, varname + "(fileinfo)(parent)", false, "/") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_555 $$ for (int i = 0; i < fileStringList.length; i++) [CD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_555 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_414 $$ for (int i = 0; i < list.length; i++) --> Line_555 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_555 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) --> Line_555 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) --> Line_555 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_555 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) [CD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_557 $$ String fileLength = Long.toString(file.length()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_557 $$ String fileLength = Long.toString(file.length()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_557 $$ String fileLength = Long.toString(file.length()) [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_558 $$ String fileType = "file" [CD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_559 $$ if (file.isDirectory()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_559 $$ if (file.isDirectory()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_559 $$ if (file.isDirectory()) [FD]
Line_559 $$ if (file.isDirectory()) --> Line_560 $$ fileType = "directory" [CD]
Line_558 $$ String fileType = "file" --> Line_560 $$ fileType = "directory" [FD]
Line_447 $$ String fileType = "file" --> Line_560 $$ fileType = "directory" [FD]
Line_449 $$ fileType = "directory" --> Line_560 $$ fileType = "directory" [FD]
Line_451 $$ fileType = "file" --> Line_560 $$ fileType = "directory" [FD]
Line_453 $$ fileType = "hidden" --> Line_560 $$ fileType = "directory" [FD]
Line_455 $$ fileType = "absolute" --> Line_560 $$ fileType = "directory" [FD]
Line_559 $$ if (file.isDirectory()) --> Line_561 $$ if (file.isFile()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_561 $$ if (file.isFile()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_561 $$ if (file.isFile()) [FD]
Line_561 $$ if (file.isFile()) --> Line_562 $$ fileType = "file" [CD]
Line_558 $$ String fileType = "file" --> Line_562 $$ fileType = "file" [FD]
Line_560 $$ fileType = "directory" --> Line_562 $$ fileType = "file" [FD]
Line_447 $$ String fileType = "file" --> Line_562 $$ fileType = "file" [FD]
Line_449 $$ fileType = "directory" --> Line_562 $$ fileType = "file" [FD]
Line_451 $$ fileType = "file" --> Line_562 $$ fileType = "file" [FD]
Line_453 $$ fileType = "hidden" --> Line_562 $$ fileType = "file" [FD]
Line_455 $$ fileType = "absolute" --> Line_562 $$ fileType = "file" [FD]
Line_561 $$ if (file.isFile()) --> Line_563 $$ if (file.isHidden()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_563 $$ if (file.isHidden()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_563 $$ if (file.isHidden()) [FD]
Line_563 $$ if (file.isHidden()) --> Line_564 $$ fileType = "hidden" [CD]
Line_558 $$ String fileType = "file" --> Line_564 $$ fileType = "hidden" [FD]
Line_560 $$ fileType = "directory" --> Line_564 $$ fileType = "hidden" [FD]
Line_562 $$ fileType = "file" --> Line_564 $$ fileType = "hidden" [FD]
Line_447 $$ String fileType = "file" --> Line_564 $$ fileType = "hidden" [FD]
Line_449 $$ fileType = "directory" --> Line_564 $$ fileType = "hidden" [FD]
Line_451 $$ fileType = "file" --> Line_564 $$ fileType = "hidden" [FD]
Line_453 $$ fileType = "hidden" --> Line_564 $$ fileType = "hidden" [FD]
Line_455 $$ fileType = "absolute" --> Line_564 $$ fileType = "hidden" [FD]
Line_563 $$ if (file.isHidden()) --> Line_565 $$ if (file.isAbsolute()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_565 $$ if (file.isAbsolute()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_565 $$ if (file.isAbsolute()) [FD]
Line_565 $$ if (file.isAbsolute()) --> Line_566 $$ fileType = "absolute" [CD]
Line_558 $$ String fileType = "file" --> Line_566 $$ fileType = "absolute" [FD]
Line_560 $$ fileType = "directory" --> Line_566 $$ fileType = "absolute" [FD]
Line_562 $$ fileType = "file" --> Line_566 $$ fileType = "absolute" [FD]
Line_564 $$ fileType = "hidden" --> Line_566 $$ fileType = "absolute" [FD]
Line_447 $$ String fileType = "file" --> Line_566 $$ fileType = "absolute" [FD]
Line_449 $$ fileType = "directory" --> Line_566 $$ fileType = "absolute" [FD]
Line_451 $$ fileType = "file" --> Line_566 $$ fileType = "absolute" [FD]
Line_453 $$ fileType = "hidden" --> Line_566 $$ fileType = "absolute" [FD]
Line_455 $$ fileType = "absolute" --> Line_566 $$ fileType = "absolute" [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_568 $$ String fileMode = "read-only" [CD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_569 $$ if (file.canRead() && !file.canWrite()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_569 $$ if (file.canRead() && !file.canWrite()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_569 $$ if (file.canRead() && !file.canWrite()) [FD]
Line_569 $$ if (file.canRead() && !file.canWrite()) --> Line_570 $$ fileMode = "read-only" [CD]
Line_568 $$ String fileMode = "read-only" --> Line_570 $$ fileMode = "read-only" [FD]
Line_457 $$ String fileMode = "read-only" --> Line_570 $$ fileMode = "read-only" [FD]
Line_459 $$ fileMode = "read-only" --> Line_570 $$ fileMode = "read-only" [FD]
Line_461 $$ fileMode = "write-only" --> Line_570 $$ fileMode = "read-only" [FD]
Line_463 $$ fileMode = "read/write" --> Line_570 $$ fileMode = "read-only" [FD]
Line_569 $$ if (file.canRead() && !file.canWrite()) --> Line_571 $$ if (!file.canRead() && file.canWrite()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_571 $$ if (!file.canRead() && file.canWrite()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_571 $$ if (!file.canRead() && file.canWrite()) [FD]
Line_571 $$ if (!file.canRead() && file.canWrite()) --> Line_572 $$ fileMode = "write-only" [CD]
Line_568 $$ String fileMode = "read-only" --> Line_572 $$ fileMode = "write-only" [FD]
Line_570 $$ fileMode = "read-only" --> Line_572 $$ fileMode = "write-only" [FD]
Line_457 $$ String fileMode = "read-only" --> Line_572 $$ fileMode = "write-only" [FD]
Line_459 $$ fileMode = "read-only" --> Line_572 $$ fileMode = "write-only" [FD]
Line_461 $$ fileMode = "write-only" --> Line_572 $$ fileMode = "write-only" [FD]
Line_463 $$ fileMode = "read/write" --> Line_572 $$ fileMode = "write-only" [FD]
Line_571 $$ if (!file.canRead() && file.canWrite()) --> Line_573 $$ if (file.canRead() && file.canWrite()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_573 $$ if (file.canRead() && file.canWrite()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_573 $$ if (file.canRead() && file.canWrite()) [FD]
Line_573 $$ if (file.canRead() && file.canWrite()) --> Line_574 $$ fileMode = "read/write" [CD]
Line_568 $$ String fileMode = "read-only" --> Line_574 $$ fileMode = "read/write" [FD]
Line_570 $$ fileMode = "read-only" --> Line_574 $$ fileMode = "read/write" [FD]
Line_572 $$ fileMode = "write-only" --> Line_574 $$ fileMode = "read/write" [FD]
Line_457 $$ String fileMode = "read-only" --> Line_574 $$ fileMode = "read/write" [FD]
Line_459 $$ fileMode = "read-only" --> Line_574 $$ fileMode = "read/write" [FD]
Line_461 $$ fileMode = "write-only" --> Line_574 $$ fileMode = "read/write" [FD]
Line_463 $$ fileMode = "read/write" --> Line_574 $$ fileMode = "read/write" [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_576 $$ String fileTime = Long.toString(file.lastModified()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_576 $$ String fileTime = Long.toString(file.lastModified()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_576 $$ String fileTime = Long.toString(file.lastModified()) [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) [CD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_578 $$ buffer.append("    <file name=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_578 $$ buffer.append("    <file name=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_578 $$ buffer.append("    <file name=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_578 $$ buffer.append("    <file name=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_578 $$ buffer.append("    <file name=\"") [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_579 $$ buffer.append(fileStringList[i]) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_579 $$ buffer.append(fileStringList[i]) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_579 $$ buffer.append(fileStringList[i]) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_579 $$ buffer.append(fileStringList[i]) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_579 $$ buffer.append(fileStringList[i]) [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_580 $$ buffer.append("\" length=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_580 $$ buffer.append("\" length=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_580 $$ buffer.append("\" length=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_580 $$ buffer.append("\" length=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_580 $$ buffer.append("\" length=\"") [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_581 $$ buffer.append(fileLength) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_581 $$ buffer.append(fileLength) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_581 $$ buffer.append(fileLength) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_581 $$ buffer.append(fileLength) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_581 $$ buffer.append(fileLength) [FD]
Line_557 $$ String fileLength = Long.toString(file.length()) --> Line_581 $$ buffer.append(fileLength) [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_582 $$ buffer.append("\" type=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_582 $$ buffer.append("\" type=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_582 $$ buffer.append("\" type=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_582 $$ buffer.append("\" type=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_582 $$ buffer.append("\" type=\"") [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_583 $$ buffer.append(fileType) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_583 $$ buffer.append(fileType) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_583 $$ buffer.append(fileType) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_583 $$ buffer.append(fileType) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_583 $$ buffer.append(fileType) [FD]
Line_558 $$ String fileType = "file" --> Line_583 $$ buffer.append(fileType) [FD]
Line_560 $$ fileType = "directory" --> Line_583 $$ buffer.append(fileType) [FD]
Line_562 $$ fileType = "file" --> Line_583 $$ buffer.append(fileType) [FD]
Line_564 $$ fileType = "hidden" --> Line_583 $$ buffer.append(fileType) [FD]
Line_566 $$ fileType = "absolute" --> Line_583 $$ buffer.append(fileType) [FD]
Line_447 $$ String fileType = "file" --> Line_583 $$ buffer.append(fileType) [FD]
Line_449 $$ fileType = "directory" --> Line_583 $$ buffer.append(fileType) [FD]
Line_451 $$ fileType = "file" --> Line_583 $$ buffer.append(fileType) [FD]
Line_453 $$ fileType = "hidden" --> Line_583 $$ buffer.append(fileType) [FD]
Line_455 $$ fileType = "absolute" --> Line_583 $$ buffer.append(fileType) [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_584 $$ buffer.append("\" mode=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_584 $$ buffer.append("\" mode=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_584 $$ buffer.append("\" mode=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_584 $$ buffer.append("\" mode=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_584 $$ buffer.append("\" mode=\"") [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_585 $$ buffer.append(fileMode) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_585 $$ buffer.append(fileMode) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_585 $$ buffer.append(fileMode) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_585 $$ buffer.append(fileMode) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_585 $$ buffer.append(fileMode) [FD]
Line_568 $$ String fileMode = "read-only" --> Line_585 $$ buffer.append(fileMode) [FD]
Line_570 $$ fileMode = "read-only" --> Line_585 $$ buffer.append(fileMode) [FD]
Line_572 $$ fileMode = "write-only" --> Line_585 $$ buffer.append(fileMode) [FD]
Line_574 $$ fileMode = "read/write" --> Line_585 $$ buffer.append(fileMode) [FD]
Line_457 $$ String fileMode = "read-only" --> Line_585 $$ buffer.append(fileMode) [FD]
Line_459 $$ fileMode = "read-only" --> Line_585 $$ buffer.append(fileMode) [FD]
Line_461 $$ fileMode = "write-only" --> Line_585 $$ buffer.append(fileMode) [FD]
Line_463 $$ fileMode = "read/write" --> Line_585 $$ buffer.append(fileMode) [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_586 $$ buffer.append("\" modtime=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_586 $$ buffer.append("\" modtime=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_586 $$ buffer.append("\" modtime=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_586 $$ buffer.append("\" modtime=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_586 $$ buffer.append("\" modtime=\"") [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_587 $$ buffer.append(fileTime) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_587 $$ buffer.append(fileTime) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_587 $$ buffer.append(fileTime) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_587 $$ buffer.append(fileTime) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_587 $$ buffer.append(fileTime) [FD]
Line_576 $$ String fileTime = Long.toString(file.lastModified()) --> Line_587 $$ buffer.append(fileTime) [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_588 $$ buffer.append("\"/>\n") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_588 $$ buffer.append("\"/>\n") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_588 $$ buffer.append("\"/>\n") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_588 $$ buffer.append("\"/>\n") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_588 $$ buffer.append("\"/>\n") [FD]
Line_577 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_590 $$ fileList.add(fileStringList[i]) [CD]
Line_301 $$ Vector fileList = new Vector() --> Line_590 $$ fileList.add(fileStringList[i]) [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_592 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(length)", false, "" + fileLength) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_592 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(length)", false, "" + fileLength) [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_558 $$ String fileType = "file" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_560 $$ fileType = "directory" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_562 $$ fileType = "file" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_564 $$ fileType = "hidden" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_566 $$ fileType = "absolute" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_447 $$ String fileType = "file" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_449 $$ fileType = "directory" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_451 $$ fileType = "file" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_453 $$ fileType = "hidden" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_455 $$ fileType = "absolute" --> Line_593 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(type)", false, fileType) [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [FD]
Line_568 $$ String fileMode = "read-only" --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [FD]
Line_570 $$ fileMode = "read-only" --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [FD]
Line_572 $$ fileMode = "write-only" --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [FD]
Line_574 $$ fileMode = "read/write" --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [FD]
Line_457 $$ String fileMode = "read-only" --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [FD]
Line_459 $$ fileMode = "read-only" --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [FD]
Line_461 $$ fileMode = "write-only" --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [FD]
Line_463 $$ fileMode = "read/write" --> Line_594 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(mode)", false, fileMode) [FD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_595 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(time)", false, fileTime) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_595 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(time)", false, fileTime) [FD]
Line_576 $$ String fileTime = Long.toString(file.lastModified()) --> Line_595 $$ c.getVariableContainer().setVariable(c, varname + "(" + fileStringList[i] + ")(time)", false, fileTime) [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_597 $$ buffer.append("</listing>") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_597 $$ buffer.append("</listing>") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_597 $$ buffer.append("</listing>") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_597 $$ buffer.append("</listing>") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_597 $$ buffer.append("</listing>") [FD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_598 $$ if (xmlOutput.equalsIgnoreCase("true")) [CD]
Line_598 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_599 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_599 $$ if (c.isProtectedVariable(varname)) [FD]
Line_599 $$ if (c.isProtectedVariable(varname)) --> Line_600 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_600 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_599 $$ if (c.isProtectedVariable(varname)) --> Line_601 $$ return new StringBuffer() [CD]
Line_598 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_603 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_603 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_603 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_603 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_603 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_603 $$ c.getVariableContainer().setVariable(varname, buffer.toString()) [FD]
Line_598 $$ if (xmlOutput.equalsIgnoreCase("true")) --> Line_604 $$ return new StringBuffer() [CD]
Line_410 $$ if (c.getVendContext() != null && c.getVendContext().getFileAccess() != null && c.getVendContext().getFileAccess().getVFSType(filenameData.toString(), c.getClientContext().getMatchedHost()) == FileAccess.TYPE_FS) --> Line_606 $$ c.getVariableContainer().setVector(varname, fileList) [CD]
Line_301 $$ Vector fileList = new Vector() --> Line_606 $$ c.getVariableContainer().setVector(varname, fileList) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_606 $$ c.getVariableContainer().setVector(varname, fileList) [FD]
Line_289 $$ if (action.equalsIgnoreCase("listing")) --> Line_608 $$ if (action.equalsIgnoreCase("delete")) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_609 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_609 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_609 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_608 $$ if (action.equalsIgnoreCase("delete")) --> Line_610 $$ if (file.isDirectory()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_610 $$ if (file.isDirectory()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_610 $$ if (file.isDirectory()) [FD]
Line_610 $$ if (file.isDirectory()) --> Line_611 $$ boolean success = deleteDir(new java.io.File(currentDocroot + filenameData.toString())) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_611 $$ boolean success = deleteDir(new java.io.File(currentDocroot + filenameData.toString())) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_611 $$ boolean success = deleteDir(new java.io.File(currentDocroot + filenameData.toString())) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_611 $$ boolean success = deleteDir(new java.io.File(currentDocroot + filenameData.toString())) [FD]
Line_610 $$ if (file.isDirectory()) --> Line_612 $$ if (!success) [CD]
Line_611 $$ boolean success = deleteDir(new java.io.File(currentDocroot + filenameData.toString())) --> Line_612 $$ if (!success) [FD]
Line_612 $$ if (!success) --> Line_613 $$ c.setExceptionState(true, "Unable to delete '" + currentDocroot + filenameData + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_613 $$ c.setExceptionState(true, "Unable to delete '" + currentDocroot + filenameData + "'") [FD]
Line_610 $$ if (file.isDirectory()) --> Line_616 $$ String filenamePattern = null [CD]
Line_610 $$ if (file.isDirectory()) --> Line_617 $$ if (filenameData.toString().indexOf("/") != -1) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_617 $$ if (filenameData.toString().indexOf("/") != -1) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_617 $$ if (filenameData.toString().indexOf("/") != -1) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_617 $$ if (filenameData.toString().indexOf("/") != -1) [FD]
Line_617 $$ if (filenameData.toString().indexOf("/") != -1) --> Line_618 $$ filenamePattern = filenameData.toString().substring(filenameData.toString().lastIndexOf("/") + 1) [CD]
Line_616 $$ String filenamePattern = null --> Line_618 $$ filenamePattern = filenameData.toString().substring(filenameData.toString().lastIndexOf("/") + 1) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_618 $$ filenamePattern = filenameData.toString().substring(filenameData.toString().lastIndexOf("/") + 1) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_618 $$ filenamePattern = filenameData.toString().substring(filenameData.toString().lastIndexOf("/") + 1) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_618 $$ filenamePattern = filenameData.toString().substring(filenameData.toString().lastIndexOf("/") + 1) [FD]
Line_610 $$ if (file.isDirectory()) --> Line_620 $$ String filenameDirectory = currentDocroot [CD]
Line_610 $$ if (file.isDirectory()) --> Line_621 $$ if (filenameData.toString().indexOf("/") != -1) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_621 $$ if (filenameData.toString().indexOf("/") != -1) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_621 $$ if (filenameData.toString().indexOf("/") != -1) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_621 $$ if (filenameData.toString().indexOf("/") != -1) [FD]
Line_621 $$ if (filenameData.toString().indexOf("/") != -1) --> Line_622 $$ filenameDirectory += filenameData.substring(0, filenameData.toString().lastIndexOf("/")) [CD]
Line_620 $$ String filenameDirectory = currentDocroot --> Line_622 $$ filenameDirectory += filenameData.substring(0, filenameData.toString().lastIndexOf("/")) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_622 $$ filenameDirectory += filenameData.substring(0, filenameData.toString().lastIndexOf("/")) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_622 $$ filenameDirectory += filenameData.substring(0, filenameData.toString().lastIndexOf("/")) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_622 $$ filenameDirectory += filenameData.substring(0, filenameData.toString().lastIndexOf("/")) [FD]
Line_610 $$ if (file.isDirectory()) --> Line_625 $$ file = new java.io.File(filenameDirectory) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_625 $$ file = new java.io.File(filenameDirectory) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_625 $$ file = new java.io.File(filenameDirectory) [FD]
Line_610 $$ if (file.isDirectory()) --> Line_626 $$ fileStringList = file.list(new ListFilter(filenamePattern)) [CD]
Line_497 $$ String[] fileStringList = null --> Line_626 $$ fileStringList = file.list(new ListFilter(filenamePattern)) [FD]
Line_499 $$ fileStringList = file.list(new ListFilter(filter)) --> Line_626 $$ fileStringList = file.list(new ListFilter(filenamePattern)) [FD]
Line_501 $$ fileStringList = file.list() --> Line_626 $$ fileStringList = file.list(new ListFilter(filenamePattern)) [FD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_626 $$ fileStringList = file.list(new ListFilter(filenamePattern)) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_626 $$ fileStringList = file.list(new ListFilter(filenamePattern)) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_626 $$ fileStringList = file.list(new ListFilter(filenamePattern)) [FD]
Line_610 $$ if (file.isDirectory()) --> Line_627 $$ for (int i = 0; i < fileStringList.length; i++) [CD]
Line_555 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_627 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_439 $$ for (int i = 0; i < filesorted.length; i++) --> Line_627 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_414 $$ for (int i = 0; i < list.length; i++) --> Line_627 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_354 $$ for (int i = 0; i < list.length; i++) --> Line_627 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_327 $$ for (int i = 0; i < filenameData.toString().length(); i++) --> Line_627 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_314 $$ for (int i = 0; i < (dirEntries.length - 1); i++) --> Line_627 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_307 $$ for (int i = 0; i < curDirname.length(); i++) --> Line_627 $$ for (int i = 0; i < fileStringList.length; i++) [FD]
Line_627 $$ for (int i = 0; i < fileStringList.length; i++) --> Line_628 $$ (new java.io.File(filenameDirectory + "/" + fileStringList[i])).delete() [CD]
Line_608 $$ if (action.equalsIgnoreCase("delete")) --> Line_631 $$ if (action.equalsIgnoreCase("rename") || action.equalsIgnoreCase("move")) [CD]
Line_631 $$ if (action.equalsIgnoreCase("rename") || action.equalsIgnoreCase("move")) --> Line_632 $$ if (fileDestData.equals("")) [CD]
Line_51 $$ StringBuffer fileDestData = null --> Line_632 $$ if (fileDestData.equals("")) [FD]
Line_54 $$ fileDestData = new StringBuffer(useDest) --> Line_632 $$ if (fileDestData.equals("")) [FD]
Line_83 $$ fileDestData = new StringBuffer(fileDestData.toString().replaceAll("\\.\\.", "")) --> Line_632 $$ if (fileDestData.equals("")) [FD]
Line_632 $$ if (fileDestData.equals("")) --> Line_633 $$ c.getVariableContainer().setVariable(varname + "-result", filenameData + ": File operation failed: No destination filename given.") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_633 $$ c.getVariableContainer().setVariable(varname + "-result", filenameData + ": File operation failed: No destination filename given.") [FD]
Line_632 $$ if (fileDestData.equals("")) --> Line_634 $$ return new StringBuffer() [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_636 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_636 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_636 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_631 $$ if (action.equalsIgnoreCase("rename") || action.equalsIgnoreCase("move")) --> Line_637 $$ boolean success = file.renameTo(new java.io.File(currentDocroot + fileDestData.toString(), file.getName())) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_637 $$ boolean success = file.renameTo(new java.io.File(currentDocroot + fileDestData.toString(), file.getName())) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_637 $$ boolean success = file.renameTo(new java.io.File(currentDocroot + fileDestData.toString(), file.getName())) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_637 $$ boolean success = file.renameTo(new java.io.File(currentDocroot + fileDestData.toString(), file.getName())) [FD]
Line_51 $$ StringBuffer fileDestData = null --> Line_637 $$ boolean success = file.renameTo(new java.io.File(currentDocroot + fileDestData.toString(), file.getName())) [FD]
Line_54 $$ fileDestData = new StringBuffer(useDest) --> Line_637 $$ boolean success = file.renameTo(new java.io.File(currentDocroot + fileDestData.toString(), file.getName())) [FD]
Line_83 $$ fileDestData = new StringBuffer(fileDestData.toString().replaceAll("\\.\\.", "")) --> Line_637 $$ boolean success = file.renameTo(new java.io.File(currentDocroot + fileDestData.toString(), file.getName())) [FD]
Line_631 $$ if (action.equalsIgnoreCase("rename") || action.equalsIgnoreCase("move")) --> Line_638 $$ if (!success) [CD]
Line_611 $$ boolean success = deleteDir(new java.io.File(currentDocroot + filenameData.toString())) --> Line_638 $$ if (!success) [FD]
Line_638 $$ if (!success) --> Line_639 $$ c.setExceptionState(true, "Unable to rename '" + currentDocroot + filenameData + "' to '" + currentDocroot + fileDestData + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_639 $$ c.setExceptionState(true, "Unable to rename '" + currentDocroot + filenameData + "' to '" + currentDocroot + fileDestData + "'") [FD]
Line_631 $$ if (action.equalsIgnoreCase("rename") || action.equalsIgnoreCase("move")) --> Line_641 $$ if (action.equalsIgnoreCase("copy")) [CD]
Line_641 $$ if (action.equalsIgnoreCase("copy")) --> Line_642 $$ if (fileDestData.equals("")) [CD]
Line_51 $$ StringBuffer fileDestData = null --> Line_642 $$ if (fileDestData.equals("")) [FD]
Line_54 $$ fileDestData = new StringBuffer(useDest) --> Line_642 $$ if (fileDestData.equals("")) [FD]
Line_83 $$ fileDestData = new StringBuffer(fileDestData.toString().replaceAll("\\.\\.", "")) --> Line_642 $$ if (fileDestData.equals("")) [FD]
Line_642 $$ if (fileDestData.equals("")) --> Line_643 $$ c.setExceptionState(true, "File copy operation failed for file '" + filenameData + "': No destination file specified.") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_643 $$ c.setExceptionState(true, "File copy operation failed for file '" + filenameData + "': No destination file specified.") [FD]
Line_642 $$ if (fileDestData.equals("")) --> Line_644 $$ return new StringBuffer() [CD]
Line_641 $$ if (action.equalsIgnoreCase("copy")) --> Line_646 $$ FileChannel srcChannel [CD]
Line_641 $$ if (action.equalsIgnoreCase("copy")) --> Line_647 $$ FileChannel destChannel [CD]
Line_641 $$ if (action.equalsIgnoreCase("copy")) --> Line_648 $$ String filename = null [CD]
Line_641 $$ if (action.equalsIgnoreCase("copy")) --> Line_649 $$ filename = currentDocroot + filenameData.toString() [CD]
Line_648 $$ String filename = null --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_55 $$ String currentDocroot = null --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_58 $$ currentDocroot = "." --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_60 $$ currentDocroot = c.getRenderContext().getCurrentDocroot() --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_63 $$ currentDocroot = c.getWorkerContext().getDocRoot() --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_66 $$ currentDocroot = "" --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_71 $$ currentDocroot = "" --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_76 $$ currentDocroot += "/" --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_649 $$ filename = currentDocroot + filenameData.toString() [FD]
Line_641 $$ if (action.equalsIgnoreCase("copy")) --> Line_650 $$ if (vartype != null && vartype.equalsIgnoreCase("file")) [CD]
Line_650 $$ if (vartype != null && vartype.equalsIgnoreCase("file")) --> Line_651 $$ if (useFilename.indexOf("/") != -1) [CD]
Line_651 $$ if (useFilename.indexOf("/") != -1) --> Line_652 $$ useFilename = useFilename.substring(useFilename.lastIndexOf("/") + 1) [CD]
Line_650 $$ if (vartype != null && vartype.equalsIgnoreCase("file")) --> Line_654 $$ filename = c.getVariableContainer().getFileVariable(useFilename) [CD]
Line_648 $$ String filename = null --> Line_654 $$ filename = c.getVariableContainer().getFileVariable(useFilename) [FD]
Line_649 $$ filename = currentDocroot + filenameData.toString() --> Line_654 $$ filename = c.getVariableContainer().getFileVariable(useFilename) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_654 $$ filename = c.getVariableContainer().getFileVariable(useFilename) [FD]
Line_51 $$ StringBuffer fileDestData = null --> Line_657 $$ Debug.debug("Copying from file '" + filename + "' to '" + fileDestData.toString() + "'") [FD]
Line_54 $$ fileDestData = new StringBuffer(useDest) --> Line_657 $$ Debug.debug("Copying from file '" + filename + "' to '" + fileDestData.toString() + "'") [FD]
Line_83 $$ fileDestData = new StringBuffer(fileDestData.toString().replaceAll("\\.\\.", "")) --> Line_657 $$ Debug.debug("Copying from file '" + filename + "' to '" + fileDestData.toString() + "'") [FD]
Line_646 $$ FileChannel srcChannel --> Line_658 $$ srcChannel = new FileInputStream(filename).getChannel() [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_660 $$ c.setExceptionState(true, "Filecopy from '" + filenameData + "' failed to read: " + e.getMessage()) [FD]
Line_647 $$ FileChannel destChannel --> Line_664 $$ destChannel = new FileOutputStream(currentDocroot + fileDestData.toString()).getChannel() [FD]
Line_51 $$ StringBuffer fileDestData = null --> Line_664 $$ destChannel = new FileOutputStream(currentDocroot + fileDestData.toString()).getChannel() [FD]
Line_54 $$ fileDestData = new StringBuffer(useDest) --> Line_664 $$ destChannel = new FileOutputStream(currentDocroot + fileDestData.toString()).getChannel() [FD]
Line_83 $$ fileDestData = new StringBuffer(fileDestData.toString().replaceAll("\\.\\.", "")) --> Line_664 $$ destChannel = new FileOutputStream(currentDocroot + fileDestData.toString()).getChannel() [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_666 $$ c.setExceptionState(true, "Filecopy to '" + fileDestData + "' failed to write: " + e.getMessage()) [FD]
Line_647 $$ FileChannel destChannel --> Line_670 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_664 $$ destChannel = new FileOutputStream(currentDocroot + fileDestData.toString()).getChannel() --> Line_670 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_646 $$ FileChannel srcChannel --> Line_670 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_658 $$ srcChannel = new FileInputStream(filename).getChannel() --> Line_670 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_646 $$ FileChannel srcChannel --> Line_671 $$ srcChannel.close() [FD]
Line_658 $$ srcChannel = new FileInputStream(filename).getChannel() --> Line_671 $$ srcChannel.close() [FD]
Line_647 $$ FileChannel destChannel --> Line_672 $$ destChannel.close() [FD]
Line_664 $$ destChannel = new FileOutputStream(currentDocroot + fileDestData.toString()).getChannel() --> Line_672 $$ destChannel.close() [FD]
Line_673 $$ if (varname != null) --> Line_674 $$ c.getVariableContainer().setVariable(varname + "-result", filenameData + " copy to " + fileDestData + ": File copy succeeded.") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_674 $$ c.getVariableContainer().setVariable(varname + "-result", filenameData + " copy to " + fileDestData + ": File copy succeeded.") [FD]
Line_673 $$ if (varname != null) --> Line_676 $$ return new StringBuffer("true") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_679 $$ c.setExceptionState(true, "Filecopy from '" + filenameData + "' to '" + fileDestData + "' failed: " + e.getMessage()) [FD]
Line_641 $$ if (action.equalsIgnoreCase("copy")) --> Line_681 $$ if (action.equalsIgnoreCase("exists")) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_682 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_682 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_682 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_681 $$ if (action.equalsIgnoreCase("exists")) --> Line_683 $$ if (file.exists()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_683 $$ if (file.exists()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_683 $$ if (file.exists()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_683 $$ if (file.exists()) [FD]
Line_683 $$ if (file.exists()) --> Line_684 $$ if (varname != null) [CD]
Line_684 $$ if (varname != null) --> Line_685 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_685 $$ if (c.isProtectedVariable(varname)) [FD]
Line_685 $$ if (c.isProtectedVariable(varname)) --> Line_686 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_686 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_685 $$ if (c.isProtectedVariable(varname)) --> Line_687 $$ return new StringBuffer() [CD]
Line_684 $$ if (varname != null) --> Line_689 $$ c.getVariableContainer().setVariable(varname, "true") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_689 $$ c.getVariableContainer().setVariable(varname, "true") [FD]
Line_684 $$ if (varname != null) --> Line_691 $$ return new StringBuffer("true") [CD]
Line_683 $$ if (file.exists()) --> Line_694 $$ if (varname != null) [CD]
Line_694 $$ if (varname != null) --> Line_695 $$ if (c.isProtectedVariable(varname)) [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_695 $$ if (c.isProtectedVariable(varname)) [FD]
Line_695 $$ if (c.isProtectedVariable(varname)) --> Line_696 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_696 $$ c.setExceptionState(true, "Attempted to modify a read-only variable '" + varname + "'") [FD]
Line_695 $$ if (c.isProtectedVariable(varname)) --> Line_697 $$ return new StringBuffer() [CD]
Line_694 $$ if (varname != null) --> Line_699 $$ c.getVariableContainer().setVariable(varname, "false") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_699 $$ c.getVariableContainer().setVariable(varname, "false") [FD]
Line_694 $$ if (varname != null) --> Line_701 $$ return new StringBuffer("false") [CD]
Line_681 $$ if (action.equalsIgnoreCase("exists")) --> Line_704 $$ if (action.equalsIgnoreCase("mkdir")) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_705 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_705 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_705 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_704 $$ if (action.equalsIgnoreCase("mkdir")) --> Line_706 $$ if (file.mkdirs()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_706 $$ if (file.mkdirs()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_706 $$ if (file.mkdirs()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_706 $$ if (file.mkdirs()) [FD]
Line_706 $$ if (file.mkdirs()) --> Line_707 $$ if (varname != null) [CD]
Line_707 $$ if (varname != null) --> Line_708 $$ c.getVariableContainer().setVariable(varname + "-result", "created") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_708 $$ c.getVariableContainer().setVariable(varname + "-result", "created") [FD]
Line_707 $$ if (varname != null) --> Line_710 $$ return new StringBuffer("true") [CD]
Line_706 $$ if (file.mkdirs()) --> Line_713 $$ c.setExceptionState(true, "Unable to create directory '" + filenameData + "'") [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_713 $$ c.setExceptionState(true, "Unable to create directory '" + filenameData + "'") [FD]
Line_704 $$ if (action.equalsIgnoreCase("mkdir")) --> Line_715 $$ if (action.equalsIgnoreCase("info")) [CD]
Line_49 $$ StringBuffer filenameData = null --> Line_716 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_716 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_716 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) [FD]
Line_715 $$ if (action.equalsIgnoreCase("info")) --> Line_717 $$ String fileLength = Long.toString(file.length()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_717 $$ String fileLength = Long.toString(file.length()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_717 $$ String fileLength = Long.toString(file.length()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_717 $$ String fileLength = Long.toString(file.length()) [FD]
Line_715 $$ if (action.equalsIgnoreCase("info")) --> Line_718 $$ String fileType = "file" [CD]
Line_715 $$ if (action.equalsIgnoreCase("info")) --> Line_719 $$ if (file.isAbsolute()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_719 $$ if (file.isAbsolute()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_719 $$ if (file.isAbsolute()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_719 $$ if (file.isAbsolute()) [FD]
Line_719 $$ if (file.isAbsolute()) --> Line_720 $$ fileType = "absolute" [CD]
Line_558 $$ String fileType = "file" --> Line_720 $$ fileType = "absolute" [FD]
Line_560 $$ fileType = "directory" --> Line_720 $$ fileType = "absolute" [FD]
Line_562 $$ fileType = "file" --> Line_720 $$ fileType = "absolute" [FD]
Line_564 $$ fileType = "hidden" --> Line_720 $$ fileType = "absolute" [FD]
Line_566 $$ fileType = "absolute" --> Line_720 $$ fileType = "absolute" [FD]
Line_447 $$ String fileType = "file" --> Line_720 $$ fileType = "absolute" [FD]
Line_449 $$ fileType = "directory" --> Line_720 $$ fileType = "absolute" [FD]
Line_451 $$ fileType = "file" --> Line_720 $$ fileType = "absolute" [FD]
Line_453 $$ fileType = "hidden" --> Line_720 $$ fileType = "absolute" [FD]
Line_455 $$ fileType = "absolute" --> Line_720 $$ fileType = "absolute" [FD]
Line_718 $$ String fileType = "file" --> Line_720 $$ fileType = "absolute" [FD]
Line_719 $$ if (file.isAbsolute()) --> Line_721 $$ if (file.isDirectory()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_721 $$ if (file.isDirectory()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_721 $$ if (file.isDirectory()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_721 $$ if (file.isDirectory()) [FD]
Line_721 $$ if (file.isDirectory()) --> Line_722 $$ fileType = "directory" [CD]
Line_558 $$ String fileType = "file" --> Line_722 $$ fileType = "directory" [FD]
Line_560 $$ fileType = "directory" --> Line_722 $$ fileType = "directory" [FD]
Line_562 $$ fileType = "file" --> Line_722 $$ fileType = "directory" [FD]
Line_564 $$ fileType = "hidden" --> Line_722 $$ fileType = "directory" [FD]
Line_566 $$ fileType = "absolute" --> Line_722 $$ fileType = "directory" [FD]
Line_447 $$ String fileType = "file" --> Line_722 $$ fileType = "directory" [FD]
Line_449 $$ fileType = "directory" --> Line_722 $$ fileType = "directory" [FD]
Line_451 $$ fileType = "file" --> Line_722 $$ fileType = "directory" [FD]
Line_453 $$ fileType = "hidden" --> Line_722 $$ fileType = "directory" [FD]
Line_455 $$ fileType = "absolute" --> Line_722 $$ fileType = "directory" [FD]
Line_718 $$ String fileType = "file" --> Line_722 $$ fileType = "directory" [FD]
Line_720 $$ fileType = "absolute" --> Line_722 $$ fileType = "directory" [FD]
Line_721 $$ if (file.isDirectory()) --> Line_723 $$ if (file.isFile()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_723 $$ if (file.isFile()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_723 $$ if (file.isFile()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_723 $$ if (file.isFile()) [FD]
Line_723 $$ if (file.isFile()) --> Line_724 $$ fileType = "file" [CD]
Line_558 $$ String fileType = "file" --> Line_724 $$ fileType = "file" [FD]
Line_560 $$ fileType = "directory" --> Line_724 $$ fileType = "file" [FD]
Line_562 $$ fileType = "file" --> Line_724 $$ fileType = "file" [FD]
Line_564 $$ fileType = "hidden" --> Line_724 $$ fileType = "file" [FD]
Line_566 $$ fileType = "absolute" --> Line_724 $$ fileType = "file" [FD]
Line_447 $$ String fileType = "file" --> Line_724 $$ fileType = "file" [FD]
Line_449 $$ fileType = "directory" --> Line_724 $$ fileType = "file" [FD]
Line_451 $$ fileType = "file" --> Line_724 $$ fileType = "file" [FD]
Line_453 $$ fileType = "hidden" --> Line_724 $$ fileType = "file" [FD]
Line_455 $$ fileType = "absolute" --> Line_724 $$ fileType = "file" [FD]
Line_718 $$ String fileType = "file" --> Line_724 $$ fileType = "file" [FD]
Line_720 $$ fileType = "absolute" --> Line_724 $$ fileType = "file" [FD]
Line_722 $$ fileType = "directory" --> Line_724 $$ fileType = "file" [FD]
Line_723 $$ if (file.isFile()) --> Line_725 $$ if (file.isHidden()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_725 $$ if (file.isHidden()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_725 $$ if (file.isHidden()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_725 $$ if (file.isHidden()) [FD]
Line_725 $$ if (file.isHidden()) --> Line_726 $$ fileType = "hidden" [CD]
Line_558 $$ String fileType = "file" --> Line_726 $$ fileType = "hidden" [FD]
Line_560 $$ fileType = "directory" --> Line_726 $$ fileType = "hidden" [FD]
Line_562 $$ fileType = "file" --> Line_726 $$ fileType = "hidden" [FD]
Line_564 $$ fileType = "hidden" --> Line_726 $$ fileType = "hidden" [FD]
Line_566 $$ fileType = "absolute" --> Line_726 $$ fileType = "hidden" [FD]
Line_447 $$ String fileType = "file" --> Line_726 $$ fileType = "hidden" [FD]
Line_449 $$ fileType = "directory" --> Line_726 $$ fileType = "hidden" [FD]
Line_451 $$ fileType = "file" --> Line_726 $$ fileType = "hidden" [FD]
Line_453 $$ fileType = "hidden" --> Line_726 $$ fileType = "hidden" [FD]
Line_455 $$ fileType = "absolute" --> Line_726 $$ fileType = "hidden" [FD]
Line_718 $$ String fileType = "file" --> Line_726 $$ fileType = "hidden" [FD]
Line_720 $$ fileType = "absolute" --> Line_726 $$ fileType = "hidden" [FD]
Line_722 $$ fileType = "directory" --> Line_726 $$ fileType = "hidden" [FD]
Line_724 $$ fileType = "file" --> Line_726 $$ fileType = "hidden" [FD]
Line_715 $$ if (action.equalsIgnoreCase("info")) --> Line_728 $$ String fileMode = "read-only" [CD]
Line_715 $$ if (action.equalsIgnoreCase("info")) --> Line_729 $$ if (file.canRead() && !file.canWrite()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_729 $$ if (file.canRead() && !file.canWrite()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_729 $$ if (file.canRead() && !file.canWrite()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_729 $$ if (file.canRead() && !file.canWrite()) [FD]
Line_729 $$ if (file.canRead() && !file.canWrite()) --> Line_730 $$ fileMode = "read-only" [CD]
Line_568 $$ String fileMode = "read-only" --> Line_730 $$ fileMode = "read-only" [FD]
Line_570 $$ fileMode = "read-only" --> Line_730 $$ fileMode = "read-only" [FD]
Line_572 $$ fileMode = "write-only" --> Line_730 $$ fileMode = "read-only" [FD]
Line_574 $$ fileMode = "read/write" --> Line_730 $$ fileMode = "read-only" [FD]
Line_457 $$ String fileMode = "read-only" --> Line_730 $$ fileMode = "read-only" [FD]
Line_459 $$ fileMode = "read-only" --> Line_730 $$ fileMode = "read-only" [FD]
Line_461 $$ fileMode = "write-only" --> Line_730 $$ fileMode = "read-only" [FD]
Line_463 $$ fileMode = "read/write" --> Line_730 $$ fileMode = "read-only" [FD]
Line_728 $$ String fileMode = "read-only" --> Line_730 $$ fileMode = "read-only" [FD]
Line_729 $$ if (file.canRead() && !file.canWrite()) --> Line_731 $$ if (!file.canRead() && file.canWrite()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_731 $$ if (!file.canRead() && file.canWrite()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_731 $$ if (!file.canRead() && file.canWrite()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_731 $$ if (!file.canRead() && file.canWrite()) [FD]
Line_731 $$ if (!file.canRead() && file.canWrite()) --> Line_732 $$ fileMode = "write-only" [CD]
Line_568 $$ String fileMode = "read-only" --> Line_732 $$ fileMode = "write-only" [FD]
Line_570 $$ fileMode = "read-only" --> Line_732 $$ fileMode = "write-only" [FD]
Line_572 $$ fileMode = "write-only" --> Line_732 $$ fileMode = "write-only" [FD]
Line_574 $$ fileMode = "read/write" --> Line_732 $$ fileMode = "write-only" [FD]
Line_457 $$ String fileMode = "read-only" --> Line_732 $$ fileMode = "write-only" [FD]
Line_459 $$ fileMode = "read-only" --> Line_732 $$ fileMode = "write-only" [FD]
Line_461 $$ fileMode = "write-only" --> Line_732 $$ fileMode = "write-only" [FD]
Line_463 $$ fileMode = "read/write" --> Line_732 $$ fileMode = "write-only" [FD]
Line_728 $$ String fileMode = "read-only" --> Line_732 $$ fileMode = "write-only" [FD]
Line_730 $$ fileMode = "read-only" --> Line_732 $$ fileMode = "write-only" [FD]
Line_731 $$ if (!file.canRead() && file.canWrite()) --> Line_733 $$ if (file.canRead() && file.canWrite()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_733 $$ if (file.canRead() && file.canWrite()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_733 $$ if (file.canRead() && file.canWrite()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_733 $$ if (file.canRead() && file.canWrite()) [FD]
Line_733 $$ if (file.canRead() && file.canWrite()) --> Line_734 $$ fileMode = "read/write" [CD]
Line_568 $$ String fileMode = "read-only" --> Line_734 $$ fileMode = "read/write" [FD]
Line_570 $$ fileMode = "read-only" --> Line_734 $$ fileMode = "read/write" [FD]
Line_572 $$ fileMode = "write-only" --> Line_734 $$ fileMode = "read/write" [FD]
Line_574 $$ fileMode = "read/write" --> Line_734 $$ fileMode = "read/write" [FD]
Line_457 $$ String fileMode = "read-only" --> Line_734 $$ fileMode = "read/write" [FD]
Line_459 $$ fileMode = "read-only" --> Line_734 $$ fileMode = "read/write" [FD]
Line_461 $$ fileMode = "write-only" --> Line_734 $$ fileMode = "read/write" [FD]
Line_463 $$ fileMode = "read/write" --> Line_734 $$ fileMode = "read/write" [FD]
Line_728 $$ String fileMode = "read-only" --> Line_734 $$ fileMode = "read/write" [FD]
Line_730 $$ fileMode = "read-only" --> Line_734 $$ fileMode = "read/write" [FD]
Line_732 $$ fileMode = "write-only" --> Line_734 $$ fileMode = "read/write" [FD]
Line_715 $$ if (action.equalsIgnoreCase("info")) --> Line_736 $$ String fileTime = Long.toString(file.lastModified()) [CD]
Line_556 $$ file = new java.io.File(currentDocroot + filenameData.toString() + "/" + fileStringList[i]) --> Line_736 $$ String fileTime = Long.toString(file.lastModified()) [FD]
Line_86 $$ java.io.File file = new java.io.File(currentDocroot + filenameData.toString()) --> Line_736 $$ String fileTime = Long.toString(file.lastModified()) [FD]
Line_625 $$ file = new java.io.File(filenameDirectory) --> Line_736 $$ String fileTime = Long.toString(file.lastModified()) [FD]
Line_715 $$ if (action.equalsIgnoreCase("info")) --> Line_737 $$ if (varname != null && !varname.equals("")) [CD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_738 $$ c.getVariableContainer().setVariable(varname + ".length", fileLength) [CD]
Line_557 $$ String fileLength = Long.toString(file.length()) --> Line_738 $$ c.getVariableContainer().setVariable(varname + ".length", fileLength) [FD]
Line_717 $$ String fileLength = Long.toString(file.length()) --> Line_738 $$ c.getVariableContainer().setVariable(varname + ".length", fileLength) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_738 $$ c.getVariableContainer().setVariable(varname + ".length", fileLength) [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [CD]
Line_558 $$ String fileType = "file" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_560 $$ fileType = "directory" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_562 $$ fileType = "file" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_564 $$ fileType = "hidden" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_566 $$ fileType = "absolute" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_447 $$ String fileType = "file" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_449 $$ fileType = "directory" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_451 $$ fileType = "file" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_453 $$ fileType = "hidden" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_455 $$ fileType = "absolute" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_718 $$ String fileType = "file" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_720 $$ fileType = "absolute" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_722 $$ fileType = "directory" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_724 $$ fileType = "file" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_726 $$ fileType = "hidden" --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_739 $$ c.getVariableContainer().setVariable(varname + ".type", fileType) [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [CD]
Line_568 $$ String fileMode = "read-only" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_570 $$ fileMode = "read-only" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_572 $$ fileMode = "write-only" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_574 $$ fileMode = "read/write" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_457 $$ String fileMode = "read-only" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_459 $$ fileMode = "read-only" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_461 $$ fileMode = "write-only" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_463 $$ fileMode = "read/write" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_728 $$ String fileMode = "read-only" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_730 $$ fileMode = "read-only" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_732 $$ fileMode = "write-only" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_734 $$ fileMode = "read/write" --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_740 $$ c.getVariableContainer().setVariable(varname + ".mode", fileMode) [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_741 $$ c.getVariableContainer().setVariable(varname + ".modtime", fileTime) [CD]
Line_576 $$ String fileTime = Long.toString(file.lastModified()) --> Line_741 $$ c.getVariableContainer().setVariable(varname + ".modtime", fileTime) [FD]
Line_736 $$ String fileTime = Long.toString(file.lastModified()) --> Line_741 $$ c.getVariableContainer().setVariable(varname + ".modtime", fileTime) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_741 $$ c.getVariableContainer().setVariable(varname + ".modtime", fileTime) [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_743 $$ buffer = new StringBuffer() [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_743 $$ buffer = new StringBuffer() [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_743 $$ buffer = new StringBuffer() [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_743 $$ buffer = new StringBuffer() [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_743 $$ buffer = new StringBuffer() [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_744 $$ buffer.append("<file name=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_744 $$ buffer.append("<file name=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_744 $$ buffer.append("<file name=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_744 $$ buffer.append("<file name=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_744 $$ buffer.append("<file name=\"") [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_744 $$ buffer.append("<file name=\"") [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_745 $$ buffer.append(filenameData) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_745 $$ buffer.append(filenameData) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_745 $$ buffer.append(filenameData) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_745 $$ buffer.append(filenameData) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_745 $$ buffer.append(filenameData) [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_745 $$ buffer.append(filenameData) [FD]
Line_49 $$ StringBuffer filenameData = null --> Line_745 $$ buffer.append(filenameData) [FD]
Line_53 $$ filenameData = new StringBuffer(useFilename) --> Line_745 $$ buffer.append(filenameData) [FD]
Line_80 $$ filenameData = new StringBuffer(filenameData.toString().replaceAll("\\.\\.", "")) --> Line_745 $$ buffer.append(filenameData) [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_746 $$ buffer.append("\" length=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_746 $$ buffer.append("\" length=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_746 $$ buffer.append("\" length=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_746 $$ buffer.append("\" length=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_746 $$ buffer.append("\" length=\"") [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_746 $$ buffer.append("\" length=\"") [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_747 $$ buffer.append(fileLength) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_747 $$ buffer.append(fileLength) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_747 $$ buffer.append(fileLength) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_747 $$ buffer.append(fileLength) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_747 $$ buffer.append(fileLength) [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_747 $$ buffer.append(fileLength) [FD]
Line_557 $$ String fileLength = Long.toString(file.length()) --> Line_747 $$ buffer.append(fileLength) [FD]
Line_717 $$ String fileLength = Long.toString(file.length()) --> Line_747 $$ buffer.append(fileLength) [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_748 $$ buffer.append("\" type=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_748 $$ buffer.append("\" type=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_748 $$ buffer.append("\" type=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_748 $$ buffer.append("\" type=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_748 $$ buffer.append("\" type=\"") [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_748 $$ buffer.append("\" type=\"") [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_749 $$ buffer.append(fileType) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_749 $$ buffer.append(fileType) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_749 $$ buffer.append(fileType) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_749 $$ buffer.append(fileType) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_749 $$ buffer.append(fileType) [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_749 $$ buffer.append(fileType) [FD]
Line_558 $$ String fileType = "file" --> Line_749 $$ buffer.append(fileType) [FD]
Line_560 $$ fileType = "directory" --> Line_749 $$ buffer.append(fileType) [FD]
Line_562 $$ fileType = "file" --> Line_749 $$ buffer.append(fileType) [FD]
Line_564 $$ fileType = "hidden" --> Line_749 $$ buffer.append(fileType) [FD]
Line_566 $$ fileType = "absolute" --> Line_749 $$ buffer.append(fileType) [FD]
Line_447 $$ String fileType = "file" --> Line_749 $$ buffer.append(fileType) [FD]
Line_449 $$ fileType = "directory" --> Line_749 $$ buffer.append(fileType) [FD]
Line_451 $$ fileType = "file" --> Line_749 $$ buffer.append(fileType) [FD]
Line_453 $$ fileType = "hidden" --> Line_749 $$ buffer.append(fileType) [FD]
Line_455 $$ fileType = "absolute" --> Line_749 $$ buffer.append(fileType) [FD]
Line_718 $$ String fileType = "file" --> Line_749 $$ buffer.append(fileType) [FD]
Line_720 $$ fileType = "absolute" --> Line_749 $$ buffer.append(fileType) [FD]
Line_722 $$ fileType = "directory" --> Line_749 $$ buffer.append(fileType) [FD]
Line_724 $$ fileType = "file" --> Line_749 $$ buffer.append(fileType) [FD]
Line_726 $$ fileType = "hidden" --> Line_749 $$ buffer.append(fileType) [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_750 $$ buffer.append("\" mode=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_750 $$ buffer.append("\" mode=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_750 $$ buffer.append("\" mode=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_750 $$ buffer.append("\" mode=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_750 $$ buffer.append("\" mode=\"") [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_750 $$ buffer.append("\" mode=\"") [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_751 $$ buffer.append(fileMode) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_751 $$ buffer.append(fileMode) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_751 $$ buffer.append(fileMode) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_751 $$ buffer.append(fileMode) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_751 $$ buffer.append(fileMode) [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_751 $$ buffer.append(fileMode) [FD]
Line_568 $$ String fileMode = "read-only" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_570 $$ fileMode = "read-only" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_572 $$ fileMode = "write-only" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_574 $$ fileMode = "read/write" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_457 $$ String fileMode = "read-only" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_459 $$ fileMode = "read-only" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_461 $$ fileMode = "write-only" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_463 $$ fileMode = "read/write" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_728 $$ String fileMode = "read-only" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_730 $$ fileMode = "read-only" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_732 $$ fileMode = "write-only" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_734 $$ fileMode = "read/write" --> Line_751 $$ buffer.append(fileMode) [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_752 $$ buffer.append("\" modtime=\"") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_752 $$ buffer.append("\" modtime=\"") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_752 $$ buffer.append("\" modtime=\"") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_752 $$ buffer.append("\" modtime=\"") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_752 $$ buffer.append("\" modtime=\"") [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_752 $$ buffer.append("\" modtime=\"") [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_753 $$ buffer.append(fileTime) [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_753 $$ buffer.append(fileTime) [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_753 $$ buffer.append(fileTime) [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_753 $$ buffer.append(fileTime) [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_753 $$ buffer.append(fileTime) [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_753 $$ buffer.append(fileTime) [FD]
Line_576 $$ String fileTime = Long.toString(file.lastModified()) --> Line_753 $$ buffer.append(fileTime) [FD]
Line_736 $$ String fileTime = Long.toString(file.lastModified()) --> Line_753 $$ buffer.append(fileTime) [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_754 $$ buffer.append("\"/>\n") [CD]
Line_10 $$ StringBuffer buffer = new StringBuffer() --> Line_754 $$ buffer.append("\"/>\n") [FD]
Line_332 $$ buffer = new StringBuffer() --> Line_754 $$ buffer.append("\"/>\n") [FD]
Line_422 $$ buffer = new StringBuffer() --> Line_754 $$ buffer.append("\"/>\n") [FD]
Line_538 $$ buffer = new StringBuffer() --> Line_754 $$ buffer.append("\"/>\n") [FD]
Line_743 $$ buffer = new StringBuffer() --> Line_754 $$ buffer.append("\"/>\n") [FD]
Line_737 $$ if (varname != null && !varname.equals("")) --> Line_755 $$ return buffer [CD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_758 $$ if (callProc != null && !callProc.equals("")) [CD]
Line_758 $$ if (callProc != null && !callProc.equals("")) --> Line_760 $$ call.callProcedure(c, null, null, callProc, null) [CD]
Line_147 $$ Call call = new Call() --> Line_760 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_760 $$ call.callProcedure(c, null, null, callProc, null) [FD]
Line_2 $$ public StringBuffer render(RenderEngine c) --> Line_762 $$ return new StringBuffer() [CD]
Line_299 $$ filenameDataString = filenameDataString.substring(0, filenameDataString.length() - 1) --> Line_298 $$ while (filenameDataString.endsWith("/")) [FD]
