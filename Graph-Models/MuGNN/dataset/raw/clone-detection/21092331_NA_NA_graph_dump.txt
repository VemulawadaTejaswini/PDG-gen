Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_3 $$ String protocol = location.getProtocol().intern() [CD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_3 $$ String protocol = location.getProtocol().intern() [FD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_4 $$ if (protocol != "jar") [CD]
Line_3 $$ String protocol = location.getProtocol().intern() --> Line_4 $$ if (protocol != "jar") [FD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_5 $$ JarURLConnection juc = (JarURLConnection) location.openConnection() [CD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_5 $$ JarURLConnection juc = (JarURLConnection) location.openConnection() [FD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_6 $$ String path = juc.getEntryName() [CD]
Line_5 $$ JarURLConnection juc = (JarURLConnection) location.openConnection() --> Line_6 $$ String path = juc.getEntryName() [FD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_7 $$ String parentPath = parentPathOf(path) [CD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_8 $$ File tempDir = createTempDir("jartemp") [CD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_9 $$ JarFile jarFile = juc.getJarFile() [CD]
Line_5 $$ JarURLConnection juc = (JarURLConnection) location.openConnection() --> Line_9 $$ JarFile jarFile = juc.getJarFile() [FD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_10 $$ for (Enumeration<JarEntry> en = jarFile.entries(); en.hasMoreElements(); ) [CD]
Line_9 $$ JarFile jarFile = juc.getJarFile() --> Line_10 $$ for (Enumeration<JarEntry> en = jarFile.entries(); en.hasMoreElements(); ) [FD]
Line_13 $$ String entryPath = entry.getName() --> Line_14 $$ if (entryPath.startsWith(parentPath)) [FD]
Line_7 $$ String parentPath = parentPathOf(path) --> Line_14 $$ if (entryPath.startsWith(parentPath)) [FD]
Line_14 $$ if (entryPath.startsWith(parentPath)) --> Line_15 $$ File dest = new File(tempDir, entryPath) [CD]
Line_14 $$ if (entryPath.startsWith(parentPath)) --> Line_16 $$ dest.getParentFile().mkdirs() [CD]
Line_15 $$ File dest = new File(tempDir, entryPath) --> Line_16 $$ dest.getParentFile().mkdirs() [FD]
Line_14 $$ if (entryPath.startsWith(parentPath)) --> Line_17 $$ InputStream in = jarFile.getInputStream(entry) [CD]
Line_9 $$ JarFile jarFile = juc.getJarFile() --> Line_17 $$ InputStream in = jarFile.getInputStream(entry) [FD]
Line_14 $$ if (entryPath.startsWith(parentPath)) --> Line_18 $$ OutputStream out = new FileOutputStream(dest) [CD]
Line_14 $$ if (entryPath.startsWith(parentPath)) --> Line_19 $$ IOUtils.copy(in, out) [CD]
Line_17 $$ InputStream in = jarFile.getInputStream(entry) --> Line_19 $$ IOUtils.copy(in, out) [FD]
Line_18 $$ OutputStream out = new FileOutputStream(dest) --> Line_19 $$ IOUtils.copy(in, out) [FD]
Line_14 $$ if (entryPath.startsWith(parentPath)) --> Line_20 $$ dest.deleteOnExit() [CD]
Line_15 $$ File dest = new File(tempDir, entryPath) --> Line_20 $$ dest.deleteOnExit() [FD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_23 $$ File realFile = new File(tempDir, path) [CD]
Line_2 $$ public static URL toFileUrl(URL location) throws IOException --> Line_24 $$ return realFile.toURL() [CD]
Line_23 $$ File realFile = new File(tempDir, path) --> Line_24 $$ return realFile.toURL() [FD]
