Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_3 $$ URL url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk+Blueprint") [CD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() [CD]
Line_3 $$ URL url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk+Blueprint") --> Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_5 $$ connection.setRequestMethod("GET") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_5 $$ connection.setRequestMethod("GET") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_6 $$ connection.setRequestProperty("Accept", "application/json") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_6 $$ connection.setRequestProperty("Accept", "application/json") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_7 $$ assertThat(connection.getResponseCode(), equalTo(200)) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_7 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_8 $$ assertThat(getResponse(connection), equalTo(" [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_8 $$ assertThat(getResponse(connection), equalTo(" [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_9 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/json; charset=utf-8")) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_9 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/json; charset=utf-8")) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_10 $$ connection = (HttpURLConnection) url.openConnection() [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_10 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_3 $$ URL url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk+Blueprint") --> Line_10 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_11 $$ connection.setRequestMethod("GET") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_11 $$ connection.setRequestMethod("GET") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_11 $$ connection.setRequestMethod("GET") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_12 $$ connection.setRequestProperty("Accept", "application/xml") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_12 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_12 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_13 $$ assertThat(connection.getResponseCode(), equalTo(200)) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_13 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_13 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_14 $$ assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>")) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_14 $$ assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>")) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_14 $$ assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>")) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_15 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml; charset=utf-8")) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_15 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml; charset=utf-8")) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_15 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml; charset=utf-8")) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_16 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk%20Blueprint") [CD]
Line_3 $$ URL url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk+Blueprint") --> Line_16 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk%20Blueprint") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_17 $$ connection = (HttpURLConnection) url.openConnection() [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_17 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_17 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_3 $$ URL url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk+Blueprint") --> Line_17 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_16 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk%20Blueprint") --> Line_17 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_18 $$ connection.setRequestMethod("GET") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_18 $$ connection.setRequestMethod("GET") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_18 $$ connection.setRequestMethod("GET") [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_18 $$ connection.setRequestMethod("GET") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_19 $$ connection.setRequestProperty("Accept", "application/json") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_19 $$ connection.setRequestProperty("Accept", "application/json") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_19 $$ connection.setRequestProperty("Accept", "application/json") [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_19 $$ connection.setRequestProperty("Accept", "application/json") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_20 $$ assertThat(connection.getResponseCode(), equalTo(200)) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_20 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_20 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_20 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_21 $$ assertThat(getResponse(connection), equalTo(" [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_21 $$ assertThat(getResponse(connection), equalTo(" [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_21 $$ assertThat(getResponse(connection), equalTo(" [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_21 $$ assertThat(getResponse(connection), equalTo(" [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_22 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/json; charset=utf-8")) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_22 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/json; charset=utf-8")) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_22 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/json; charset=utf-8")) [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_22 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/json; charset=utf-8")) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_23 $$ connection = (HttpURLConnection) url.openConnection() [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_23 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_23 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_23 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_3 $$ URL url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk+Blueprint") --> Line_23 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_16 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk%20Blueprint") --> Line_23 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_24 $$ connection.setRequestMethod("GET") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_24 $$ connection.setRequestMethod("GET") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_24 $$ connection.setRequestMethod("GET") [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_24 $$ connection.setRequestMethod("GET") [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_24 $$ connection.setRequestMethod("GET") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_25 $$ connection.setRequestProperty("Accept", "application/xml") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_25 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_25 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_25 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_25 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_26 $$ assertThat(connection.getResponseCode(), equalTo(200)) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_26 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_26 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_26 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_26 $$ assertThat(connection.getResponseCode(), equalTo(200)) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_27 $$ assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>")) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_27 $$ assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>")) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_27 $$ assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>")) [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_27 $$ assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>")) [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_27 $$ assertThat(getResponse(connection), equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><invBlueprintTypeDto><blueprintTypeID>20188</blueprintTypeID><blueprintTypeName>Obelisk Blueprint</blueprintTypeName><dumpVersion>cru16</dumpVersion><maxProductionLimit>1</maxProductionLimit><productCategoryID>6</productCategoryID><productPortionSize>1</productPortionSize><productTypeID>20187</productTypeID><productTypeName>Obelisk</productTypeName><productVolume>17550000</productVolume><productionTime>1280000</productionTime><productivityModifier>256000</productivityModifier><researchCopyTime>2560000</researchCopyTime><researchMaterialTime>5120000</researchMaterialTime><researchProductivityTime>7680000</researchProductivityTime><researchTechTime>500000</researchTechTime><techLevel>1</techLevel><wasteFactor>10</wasteFactor></invBlueprintTypeDto>")) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_28 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml; charset=utf-8")) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_28 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml; charset=utf-8")) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_28 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml; charset=utf-8")) [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_28 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml; charset=utf-8")) [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_28 $$ assertThat(connection.getHeaderField("Content-Type"), equalTo("application/xml; charset=utf-8")) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_29 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk Blueprint") [CD]
Line_3 $$ URL url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk+Blueprint") --> Line_29 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk Blueprint") [FD]
Line_16 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk%20Blueprint") --> Line_29 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk Blueprint") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_30 $$ connection = (HttpURLConnection) url.openConnection() [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_30 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_30 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_30 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_30 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_3 $$ URL url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk+Blueprint") --> Line_30 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_16 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk%20Blueprint") --> Line_30 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_29 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk Blueprint") --> Line_30 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_31 $$ connection.setRequestMethod("GET") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_31 $$ connection.setRequestMethod("GET") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_31 $$ connection.setRequestMethod("GET") [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_31 $$ connection.setRequestMethod("GET") [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_31 $$ connection.setRequestMethod("GET") [FD]
Line_30 $$ connection = (HttpURLConnection) url.openConnection() --> Line_31 $$ connection.setRequestMethod("GET") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_32 $$ connection.setRequestProperty("Accept", "application/json") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_32 $$ connection.setRequestProperty("Accept", "application/json") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_32 $$ connection.setRequestProperty("Accept", "application/json") [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_32 $$ connection.setRequestProperty("Accept", "application/json") [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_32 $$ connection.setRequestProperty("Accept", "application/json") [FD]
Line_30 $$ connection = (HttpURLConnection) url.openConnection() --> Line_32 $$ connection.setRequestProperty("Accept", "application/json") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_33 $$ assertThat(connection.getResponseCode(), equalTo(400)) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_33 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_33 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_33 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_33 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_30 $$ connection = (HttpURLConnection) url.openConnection() --> Line_33 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_34 $$ connection = (HttpURLConnection) url.openConnection() [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_34 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_34 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_34 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_34 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_30 $$ connection = (HttpURLConnection) url.openConnection() --> Line_34 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_3 $$ URL url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk+Blueprint") --> Line_34 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_16 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk%20Blueprint") --> Line_34 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_29 $$ url = new URL(baseUrl + "/blueprintTypeByTypeName/Obelisk Blueprint") --> Line_34 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_35 $$ connection.setRequestMethod("GET") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_35 $$ connection.setRequestMethod("GET") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_35 $$ connection.setRequestMethod("GET") [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_35 $$ connection.setRequestMethod("GET") [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_35 $$ connection.setRequestMethod("GET") [FD]
Line_30 $$ connection = (HttpURLConnection) url.openConnection() --> Line_35 $$ connection.setRequestMethod("GET") [FD]
Line_34 $$ connection = (HttpURLConnection) url.openConnection() --> Line_35 $$ connection.setRequestMethod("GET") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_36 $$ connection.setRequestProperty("Accept", "application/xml") [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_36 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_36 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_36 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_36 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_30 $$ connection = (HttpURLConnection) url.openConnection() --> Line_36 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_34 $$ connection = (HttpURLConnection) url.openConnection() --> Line_36 $$ connection.setRequestProperty("Accept", "application/xml") [FD]
Line_2 $$ public void test_blueprintTypeByTypeName() throws Exception --> Line_37 $$ assertThat(connection.getResponseCode(), equalTo(400)) [CD]
Line_4 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_37 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_37 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_17 $$ connection = (HttpURLConnection) url.openConnection() --> Line_37 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_23 $$ connection = (HttpURLConnection) url.openConnection() --> Line_37 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_30 $$ connection = (HttpURLConnection) url.openConnection() --> Line_37 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
Line_34 $$ connection = (HttpURLConnection) url.openConnection() --> Line_37 $$ assertThat(connection.getResponseCode(), equalTo(400)) [FD]
