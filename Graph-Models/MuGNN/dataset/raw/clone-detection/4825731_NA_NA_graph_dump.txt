Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_3 $$ String packagePath = "/" + baseClass.getPackage().getName().replace('.', '/') [CD]
Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_3 $$ String packagePath = "/" + baseClass.getPackage().getName().replace('.', '/') [FD]
Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_4 $$ URL url = baseClass.getResource(packagePath) [CD]
Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_4 $$ URL url = baseClass.getResource(packagePath) [FD]
Line_3 $$ String packagePath = "/" + baseClass.getPackage().getName().replace('.', '/') --> Line_4 $$ URL url = baseClass.getResource(packagePath) [FD]
Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_5 $$ if (url == null) [CD]
Line_4 $$ URL url = baseClass.getResource(packagePath) --> Line_5 $$ if (url == null) [FD]
Line_5 $$ if (url == null) --> Line_6 $$ return new Class[0] [CD]
Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_8 $$ List<Class> derivedClasses = new ArrayList<Class>() [CD]
Line_4 $$ URL url = baseClass.getResource(packagePath) --> Line_10 $$ URLConnection connection = url.openConnection() [FD]
Line_10 $$ URLConnection connection = url.openConnection() --> Line_11 $$ if (connection instanceof JarURLConnection) [FD]
Line_11 $$ if (connection instanceof JarURLConnection) --> Line_12 $$ JarFile jarFile = ((JarURLConnection) connection).getJarFile() [CD]
Line_11 $$ if (connection instanceof JarURLConnection) --> Line_13 $$ Enumeration e = jarFile.entries() [CD]
Line_12 $$ JarFile jarFile = ((JarURLConnection) connection).getJarFile() --> Line_13 $$ Enumeration e = jarFile.entries() [FD]
Line_11 $$ if (connection instanceof JarURLConnection) --> Line_14 $$ while (e.hasMoreElements()) [CD]
Line_13 $$ Enumeration e = jarFile.entries() --> Line_14 $$ while (e.hasMoreElements()) [FD]
Line_14 $$ while (e.hasMoreElements()) --> Line_15 $$ ZipEntry entry = (ZipEntry) e.nextElement() [CD]
Line_13 $$ Enumeration e = jarFile.entries() --> Line_15 $$ ZipEntry entry = (ZipEntry) e.nextElement() [FD]
Line_14 $$ while (e.hasMoreElements()) --> Line_16 $$ String entryName = entry.getName() [CD]
Line_14 $$ while (e.hasMoreElements()) --> Line_17 $$ if (entryName.endsWith(".class")) [CD]
Line_16 $$ String entryName = entry.getName() --> Line_17 $$ if (entryName.endsWith(".class")) [FD]
Line_16 $$ String entryName = entry.getName() --> Line_18 $$ String clazzName = entryName.substring(0, entryName.length() - 6) [FD]
Line_18 $$ String clazzName = entryName.substring(0, entryName.length() - 6) --> Line_19 $$ clazzName = clazzName.replace('/', '.') [FD]
Line_18 $$ String clazzName = entryName.substring(0, entryName.length() - 6) --> Line_21 $$ Class clazz = Class.forName(clazzName) [FD]
Line_19 $$ clazzName = clazzName.replace('/', '.') --> Line_21 $$ Class clazz = Class.forName(clazzName) [FD]
Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_22 $$ if (isConcreteSubclass(baseClass, clazz)) [FD]
Line_21 $$ Class clazz = Class.forName(clazzName) --> Line_22 $$ if (isConcreteSubclass(baseClass, clazz)) [FD]
Line_8 $$ List<Class> derivedClasses = new ArrayList<Class>() --> Line_23 $$ derivedClasses.add(clazz) [FD]
Line_21 $$ Class clazz = Class.forName(clazzName) --> Line_23 $$ derivedClasses.add(clazz) [FD]
Line_11 $$ if (connection instanceof JarURLConnection) --> Line_29 $$ if (connection instanceof FileURLConnection) [CD]
Line_10 $$ URLConnection connection = url.openConnection() --> Line_29 $$ if (connection instanceof FileURLConnection) [FD]
Line_29 $$ if (connection instanceof FileURLConnection) --> Line_30 $$ File file = new File(url.getFile()) [CD]
Line_4 $$ URL url = baseClass.getResource(packagePath) --> Line_30 $$ File file = new File(url.getFile()) [FD]
Line_29 $$ if (connection instanceof FileURLConnection) --> Line_31 $$ File[] files = file.listFiles() [CD]
Line_30 $$ File file = new File(url.getFile()) --> Line_31 $$ File[] files = file.listFiles() [FD]
Line_29 $$ if (connection instanceof FileURLConnection) --> Line_32 $$ for (int i = 0; i < files.length; i++) [CD]
Line_32 $$ for (int i = 0; i < files.length; i++) --> Line_33 $$ String filename = files[i].getName() [CD]
Line_32 $$ for (int i = 0; i < files.length; i++) --> Line_34 $$ if (filename.endsWith(".class")) [CD]
Line_33 $$ String filename = files[i].getName() --> Line_34 $$ if (filename.endsWith(".class")) [FD]
Line_33 $$ String filename = files[i].getName() --> Line_35 $$ filename = filename.substring(0, filename.length() - 6) [FD]
Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_36 $$ String clazzname = baseClass.getPackage().getName() + "." + filename [FD]
Line_36 $$ String clazzname = baseClass.getPackage().getName() + "." + filename --> Line_38 $$ Class clazz = Class.forName(clazzname) [FD]
Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_39 $$ if (isConcreteSubclass(baseClass, clazz)) [FD]
Line_38 $$ Class clazz = Class.forName(clazzname) --> Line_39 $$ if (isConcreteSubclass(baseClass, clazz)) [FD]
Line_21 $$ Class clazz = Class.forName(clazzName) --> Line_39 $$ if (isConcreteSubclass(baseClass, clazz)) [FD]
Line_8 $$ List<Class> derivedClasses = new ArrayList<Class>() --> Line_40 $$ derivedClasses.add(clazz) [FD]
Line_38 $$ Class clazz = Class.forName(clazzname) --> Line_40 $$ derivedClasses.add(clazz) [FD]
Line_21 $$ Class clazz = Class.forName(clazzName) --> Line_40 $$ derivedClasses.add(clazz) [FD]
Line_2 $$ public static Class[] findSubClasses(Class baseClass) --> Line_49 $$ return derivedClasses.toArray(new Class[derivedClasses.size()]) [CD]
Line_8 $$ List<Class> derivedClasses = new ArrayList<Class>() --> Line_49 $$ return derivedClasses.toArray(new Class[derivedClasses.size()]) [FD]
Line_35 $$ filename = filename.substring(0, filename.length() - 6) --> Line_34 $$ if (filename.endsWith(".class")) [FD]
