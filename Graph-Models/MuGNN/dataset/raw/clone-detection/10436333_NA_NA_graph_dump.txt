Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_3 $$ String bundleClassPath = (String) bundle.getHeaders().get(Constants.BUNDLE_CLASSPATH) [CD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_3 $$ String bundleClassPath = (String) bundle.getHeaders().get(Constants.BUNDLE_CLASSPATH) [FD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_4 $$ if (bundleClassPath == null) [CD]
Line_3 $$ String bundleClassPath = (String) bundle.getHeaders().get(Constants.BUNDLE_CLASSPATH) --> Line_4 $$ if (bundleClassPath == null) [FD]
Line_4 $$ if (bundleClassPath == null) --> Line_5 $$ bundleClassPath = "." [CD]
Line_3 $$ String bundleClassPath = (String) bundle.getHeaders().get(Constants.BUNDLE_CLASSPATH) --> Line_5 $$ bundleClassPath = "." [FD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_7 $$ ManifestEntry[] entries = ManifestEntry.parse(bundleClassPath) [CD]
Line_3 $$ String bundleClassPath = (String) bundle.getHeaders().get(Constants.BUNDLE_CLASSPATH) --> Line_7 $$ ManifestEntry[] entries = ManifestEntry.parse(bundleClassPath) [FD]
Line_5 $$ bundleClassPath = "." --> Line_7 $$ ManifestEntry[] entries = ManifestEntry.parse(bundleClassPath) [FD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_8 $$ String[] classPaths = new String[0] [CD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_9 $$ for (int i = 0; i < entries.length; i++) [CD]
Line_9 $$ for (int i = 0; i < entries.length; i++) --> Line_10 $$ String classPath = entries[i].getName() [CD]
Line_9 $$ for (int i = 0; i < entries.length; i++) --> Line_11 $$ if (classPath.startsWith("/")) [CD]
Line_9 $$ for (int i = 0; i < entries.length; i++) --> Line_14 $$ if (classPath.endsWith(".jar")) [CD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_17 $$ if (!alreadyCached) [FD]
Line_17 $$ if (!alreadyCached) --> Line_18 $$ file.getParentFile().mkdirs() [CD]
Line_17 $$ if (!alreadyCached) --> Line_19 $$ String url = new StringBuilder("jar:").append(bundleFile.toURI().toURL().toString()).append("!/").append(classPath).toString() [CD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_19 $$ String url = new StringBuilder("jar:").append(bundleFile.toURI().toURL().toString()).append("!/").append(classPath).toString() [FD]
Line_17 $$ if (!alreadyCached) --> Line_20 $$ OutputStream os = new FileOutputStream(file) [CD]
Line_17 $$ if (!alreadyCached) --> Line_21 $$ InputStream is = new URL(url).openStream() [CD]
Line_17 $$ if (!alreadyCached) --> Line_22 $$ IOUtil.copy(is, os) [CD]
Line_21 $$ InputStream is = new URL(url).openStream() --> Line_22 $$ IOUtil.copy(is, os) [FD]
Line_20 $$ OutputStream os = new FileOutputStream(file) --> Line_22 $$ IOUtil.copy(is, os) [FD]
Line_17 $$ if (!alreadyCached) --> Line_23 $$ is.close() [CD]
Line_21 $$ InputStream is = new URL(url).openStream() --> Line_23 $$ is.close() [FD]
Line_17 $$ if (!alreadyCached) --> Line_24 $$ os.close() [CD]
Line_20 $$ OutputStream os = new FileOutputStream(file) --> Line_24 $$ os.close() [FD]
Line_17 $$ if (!alreadyCached) --> Line_26 $$ if (!file.exists()) [CD]
Line_31 $$ FrameworkEvent frameworkEvent = new FrameworkEvent(FrameworkEvent.INFO, bundle, e) --> Line_32 $$ framework.postFrameworkEvent(frameworkEvent) [FD]
Line_9 $$ for (int i = 0; i < entries.length; i++) --> Line_36 $$ classPaths = (String[]) ArrayUtil.add(classPaths, classPath) [CD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_38 $$ if (!alreadyCached) [CD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_38 $$ if (!alreadyCached) [FD]
Line_38 $$ if (!alreadyCached) --> Line_39 $$ String bundleNativeCode = (String) bundle.getHeaders().get(Constants.BUNDLE_NATIVECODE) [CD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_39 $$ String bundleNativeCode = (String) bundle.getHeaders().get(Constants.BUNDLE_NATIVECODE) [FD]
Line_38 $$ if (!alreadyCached) --> Line_40 $$ if (bundleNativeCode != null) [CD]
Line_39 $$ String bundleNativeCode = (String) bundle.getHeaders().get(Constants.BUNDLE_NATIVECODE) --> Line_40 $$ if (bundleNativeCode != null) [FD]
Line_40 $$ if (bundleNativeCode != null) --> Line_41 $$ entries = ManifestEntry.parse(bundleNativeCode) [CD]
Line_39 $$ String bundleNativeCode = (String) bundle.getHeaders().get(Constants.BUNDLE_NATIVECODE) --> Line_41 $$ entries = ManifestEntry.parse(bundleNativeCode) [FD]
Line_40 $$ if (bundleNativeCode != null) --> Line_42 $$ for (int i = 0; i < entries.length; i++) [CD]
Line_9 $$ for (int i = 0; i < entries.length; i++) --> Line_42 $$ for (int i = 0; i < entries.length; i++) [FD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_43 $$ ManifestEntry entry = entries[i] [CD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_44 $$ String libPath = entry.getName() [CD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_45 $$ String url = new StringBuilder("jar:").append(bundleFile.toURI().toURL().toString()).append("!/").append(libPath).toString() [CD]
Line_44 $$ String libPath = entry.getName() --> Line_45 $$ String url = new StringBuilder("jar:").append(bundleFile.toURI().toURL().toString()).append("!/").append(libPath).toString() [FD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_45 $$ String url = new StringBuilder("jar:").append(bundleFile.toURI().toURL().toString()).append("!/").append(libPath).toString() [FD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_46 $$ File file = new File(cache, libPath) [CD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_47 $$ file.getParentFile().mkdirs() [CD]
Line_46 $$ File file = new File(cache, libPath) --> Line_47 $$ file.getParentFile().mkdirs() [FD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_48 $$ OutputStream os = new FileOutputStream(file) [CD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_49 $$ InputStream is = new URL(url).openStream() [CD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_50 $$ IOUtil.copy(is, os) [CD]
Line_49 $$ InputStream is = new URL(url).openStream() --> Line_50 $$ IOUtil.copy(is, os) [FD]
Line_21 $$ InputStream is = new URL(url).openStream() --> Line_50 $$ IOUtil.copy(is, os) [FD]
Line_48 $$ OutputStream os = new FileOutputStream(file) --> Line_50 $$ IOUtil.copy(is, os) [FD]
Line_20 $$ OutputStream os = new FileOutputStream(file) --> Line_50 $$ IOUtil.copy(is, os) [FD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_51 $$ is.close() [CD]
Line_49 $$ InputStream is = new URL(url).openStream() --> Line_51 $$ is.close() [FD]
Line_21 $$ InputStream is = new URL(url).openStream() --> Line_51 $$ is.close() [FD]
Line_42 $$ for (int i = 0; i < entries.length; i++) --> Line_52 $$ os.close() [CD]
Line_48 $$ OutputStream os = new FileOutputStream(file) --> Line_52 $$ os.close() [FD]
Line_20 $$ OutputStream os = new FileOutputStream(file) --> Line_52 $$ os.close() [FD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_56 $$ BundleURLClassPath urlClassPath = new BundleURLClassPathImpl(bundle, version, classPaths, cache) [CD]
Line_2 $$ private BundleURLClassPath createBundleURLClassPath(Bundle bundle, Version version, File bundleFile, File cache, boolean alreadyCached) throws Exception --> Line_57 $$ return urlClassPath [CD]
