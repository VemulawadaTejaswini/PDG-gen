Line_5 $$ MorphologicalAnalyzer mecab = MorphologicalAnalyzer.getInstance() --> Line_6 $$ if (mecab.isActive()) [FD]
Line_6 $$ if (mecab.isActive()) --> Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(src), "UTF8")) [CD]
Line_6 $$ if (mecab.isActive()) --> Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) [CD]
Line_6 $$ if (mecab.isActive()) --> Line_9 $$ String line [CD]
Line_6 $$ if (mecab.isActive()) --> Line_10 $$ bw.write("// // // \r\n$title=\r\n$singer=\r\n$id=\r\n\r\n + _______ // 0 0 0 0 0 0 0\r\n\r\n") [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_10 $$ bw.write("// // // \r\n$title=\r\n$singer=\r\n$id=\r\n\r\n + _______ // 0 0 0 0 0 0 0\r\n\r\n") [FD]
Line_6 $$ if (mecab.isActive()) --> Line_11 $$ while ((line = br.readLine()) != null) [CD]
Line_9 $$ String line --> Line_11 $$ while ((line = br.readLine()) != null) [FD]
Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(src), "UTF8")) --> Line_11 $$ while ((line = br.readLine()) != null) [FD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_12 $$ System.out.println(line) [CD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_12 $$ System.out.println(line) [FD]
Line_9 $$ String line --> Line_12 $$ System.out.println(line) [FD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_13 $$ String segment[] = line.split("//") [CD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_13 $$ String segment[] = line.split("//") [FD]
Line_9 $$ String line --> Line_13 $$ String segment[] = line.split("//") [FD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_14 $$ String japanese = null [CD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_15 $$ String english = null [CD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_16 $$ english = segment[1].trim() [CD]
Line_15 $$ String english = null --> Line_16 $$ english = segment[1].trim() [FD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_17 $$ japanese = segment[0].trim().replaceAll(" ", "_") [CD]
Line_14 $$ String japanese = null --> Line_17 $$ japanese = segment[0].trim().replaceAll(" ", "_") [FD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_18 $$ boolean first = true [CD]
Line_11 $$ while ((line = br.readLine()) != null) --> Line_19 $$ if (japanese != null) [CD]
Line_14 $$ String japanese = null --> Line_19 $$ if (japanese != null) [FD]
Line_17 $$ japanese = segment[0].trim().replaceAll(" ", "_") --> Line_19 $$ if (japanese != null) [FD]
Line_19 $$ if (japanese != null) --> Line_20 $$ ArrayList<ExtractedWord> wordList = mecab.extractWord(japanese) [CD]
Line_5 $$ MorphologicalAnalyzer mecab = MorphologicalAnalyzer.getInstance() --> Line_20 $$ ArrayList<ExtractedWord> wordList = mecab.extractWord(japanese) [FD]
Line_14 $$ String japanese = null --> Line_20 $$ ArrayList<ExtractedWord> wordList = mecab.extractWord(japanese) [FD]
Line_17 $$ japanese = segment[0].trim().replaceAll(" ", "_") --> Line_20 $$ ArrayList<ExtractedWord> wordList = mecab.extractWord(japanese) [FD]
Line_19 $$ if (japanese != null) --> Line_21 $$ Iterator<ExtractedWord> iter = wordList.iterator() [CD]
Line_20 $$ ArrayList<ExtractedWord> wordList = mecab.extractWord(japanese) --> Line_21 $$ Iterator<ExtractedWord> iter = wordList.iterator() [FD]
Line_19 $$ if (japanese != null) --> Line_22 $$ while (iter.hasNext()) [CD]
Line_21 $$ Iterator<ExtractedWord> iter = wordList.iterator() --> Line_22 $$ while (iter.hasNext()) [FD]
Line_22 $$ while (iter.hasNext()) --> Line_23 $$ ExtractedWord word = iter.next() [CD]
Line_21 $$ Iterator<ExtractedWord> iter = wordList.iterator() --> Line_23 $$ ExtractedWord word = iter.next() [FD]
Line_22 $$ while (iter.hasNext()) --> Line_24 $$ if (first) [CD]
Line_24 $$ if (first) --> Line_25 $$ first = false [CD]
Line_18 $$ boolean first = true --> Line_25 $$ first = false [FD]
Line_24 $$ if (first) --> Line_26 $$ bw.write("*") [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_26 $$ bw.write("*") [FD]
Line_24 $$ if (first) --> Line_27 $$ bw.write(" ") [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_27 $$ bw.write(" ") [FD]
Line_22 $$ while (iter.hasNext()) --> Line_28 $$ if (word.isParticle) [CD]
Line_23 $$ ExtractedWord word = iter.next() --> Line_28 $$ if (word.isParticle) [FD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_28 $$ if (word.isParticle) [FD]
Line_22 $$ while (iter.hasNext()) --> Line_29 $$ if (!word.original.equals(word.reading)) [CD]
Line_29 $$ if (!word.original.equals(word.reading)) --> Line_31 $$ KReading[] kr = ReadingAnalyzer.analyzeReadingStub(word.original, word.reading, kanjiDAO) [CD]
Line_4 $$ KanjiDAO kanjiDAO = KanjiDAOFactory.getDAO() --> Line_31 $$ KReading[] kr = ReadingAnalyzer.analyzeReadingStub(word.original, word.reading, kanjiDAO) [FD]
Line_29 $$ if (!word.original.equals(word.reading)) --> Line_32 $$ if (kr != null) [CD]
Line_31 $$ KReading[] kr = ReadingAnalyzer.analyzeReadingStub(word.original, word.reading, kanjiDAO) --> Line_32 $$ if (kr != null) [FD]
Line_32 $$ if (kr != null) --> Line_33 $$ for (int i = 0; i < kr.length; i++) [CD]
Line_33 $$ for (int i = 0; i < kr.length; i++) --> Line_34 $$ bw.write(" ") [CD]
Line_33 $$ for (int i = 0; i < kr.length; i++) --> Line_34 $$ bw.write(" ") [FD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_34 $$ bw.write(" ") [FD]
Line_33 $$ for (int i = 0; i < kr.length; i++) --> Line_35 $$ bw.write(kr[i].kanji) [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_35 $$ bw.write(kr[i].kanji) [FD]
Line_33 $$ for (int i = 0; i < kr.length; i++) --> Line_36 $$ if (kr[i].type != KReading.KANA) [CD]
Line_36 $$ if (kr[i].type != KReading.KANA) --> Line_37 $$ bw.write("|") [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_37 $$ bw.write("|") [FD]
Line_36 $$ if (kr[i].type != KReading.KANA) --> Line_38 $$ bw.write(kr[i].reading) [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_38 $$ bw.write(kr[i].reading) [FD]
Line_32 $$ if (kr != null) --> Line_42 $$ bw.write(word.original) [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_42 $$ bw.write(word.original) [FD]
Line_32 $$ if (kr != null) --> Line_43 $$ bw.write("|") [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_43 $$ bw.write("|") [FD]
Line_32 $$ if (kr != null) --> Line_44 $$ bw.write(word.reading) [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_44 $$ bw.write(word.reading) [FD]
Line_29 $$ if (!word.original.equals(word.reading)) --> Line_47 $$ bw.write(word.original) [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_47 $$ bw.write(word.original) [FD]
Line_22 $$ while (iter.hasNext()) --> Line_49 $$ bw.write(" // \r\n") [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_49 $$ bw.write(" // \r\n") [FD]
Line_19 $$ if (japanese != null) --> Line_51 $$ if (english != null) [CD]
Line_15 $$ String english = null --> Line_51 $$ if (english != null) [FD]
Line_16 $$ english = segment[1].trim() --> Line_51 $$ if (english != null) [FD]
Line_51 $$ if (english != null) --> Line_52 $$ bw.write(english) [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_52 $$ bw.write(english) [FD]
Line_15 $$ String english = null --> Line_52 $$ bw.write(english) [FD]
Line_16 $$ english = segment[1].trim() --> Line_52 $$ bw.write(english) [FD]
Line_51 $$ if (english != null) --> Line_53 $$ bw.write("\r\n") [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_53 $$ bw.write("\r\n") [FD]
Line_19 $$ if (japanese != null) --> Line_55 $$ bw.write("\r\n") [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_55 $$ bw.write("\r\n") [FD]
Line_6 $$ if (mecab.isActive()) --> Line_58 $$ br.close() [CD]
Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(src), "UTF8")) --> Line_58 $$ br.close() [FD]
Line_6 $$ if (mecab.isActive()) --> Line_59 $$ bw.close() [CD]
Line_8 $$ BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dest), "UTF8")) --> Line_59 $$ bw.close() [FD]
Line_6 $$ if (mecab.isActive()) --> Line_61 $$ System.out.println("Mecab couldn't be initialized") [CD]
