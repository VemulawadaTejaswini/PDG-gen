Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_3 $$ InputStream in = getConfStream() [CD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_4 $$ LogDistiller ld = dOMConfigurator.read(in) [CD]
Line_3 $$ InputStream in = getConfStream() --> Line_4 $$ LogDistiller ld = dOMConfigurator.read(in) [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_5 $$ in.close() [CD]
Line_3 $$ InputStream in = getConfStream() --> Line_5 $$ in.close() [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_6 $$ checkLogDistiller(ld) [CD]
Line_4 $$ LogDistiller ld = dOMConfigurator.read(in) --> Line_6 $$ checkLogDistiller(ld) [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_7 $$ File tmp = File.createTempFile("logdistiller", "test") [CD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_8 $$ tmp.delete() [CD]
Line_7 $$ File tmp = File.createTempFile("logdistiller", "test") --> Line_8 $$ tmp.delete() [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_9 $$ tmp.mkdir() [CD]
Line_7 $$ File tmp = File.createTempFile("logdistiller", "test") --> Line_9 $$ tmp.mkdir() [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_10 $$ URL url = WeblogicLogEvent.class.getResource("wldomain7.log") [CD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_11 $$ in = url.openStream() [CD]
Line_3 $$ InputStream in = getConfStream() --> Line_11 $$ in = url.openStream() [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_12 $$ assertNotNull("load resource wldomain7.log", in) [CD]
Line_3 $$ InputStream in = getConfStream() --> Line_12 $$ assertNotNull("load resource wldomain7.log", in) [FD]
Line_11 $$ in = url.openStream() --> Line_12 $$ assertNotNull("load resource wldomain7.log", in) [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_13 $$ Reader reader = new InputStreamReader(in) [CD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_14 $$ ld.getOutput().setDirectory(tmp.getAbsolutePath()) [CD]
Line_4 $$ LogDistiller ld = dOMConfigurator.read(in) --> Line_14 $$ ld.getOutput().setDirectory(tmp.getAbsolutePath()) [FD]
Line_7 $$ File tmp = File.createTempFile("logdistiller", "test") --> Line_14 $$ ld.getOutput().setDirectory(tmp.getAbsolutePath()) [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_15 $$ LogDistillation exec = new LogDistillation(ld) [CD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_16 $$ LogEvent.Factory factory = exec.getLogTypeDescription().newFactory(reader, url.toString()) [CD]
Line_13 $$ Reader reader = new InputStreamReader(in) --> Line_16 $$ LogEvent.Factory factory = exec.getLogTypeDescription().newFactory(reader, url.toString()) [FD]
Line_15 $$ LogDistillation exec = new LogDistillation(ld) --> Line_16 $$ LogEvent.Factory factory = exec.getLogTypeDescription().newFactory(reader, url.toString()) [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_17 $$ exec.begin() [CD]
Line_15 $$ LogDistillation exec = new LogDistillation(ld) --> Line_17 $$ exec.begin() [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_18 $$ LogEvent le [CD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_19 $$ while ((le = factory.nextEvent()) != null) [CD]
Line_18 $$ LogEvent le --> Line_19 $$ while ((le = factory.nextEvent()) != null) [FD]
Line_16 $$ LogEvent.Factory factory = exec.getLogTypeDescription().newFactory(reader, url.toString()) --> Line_19 $$ while ((le = factory.nextEvent()) != null) [FD]
Line_19 $$ while ((le = factory.nextEvent()) != null) --> Line_20 $$ exec.processLogEvent(le) [CD]
Line_19 $$ while ((le = factory.nextEvent()) != null) --> Line_20 $$ exec.processLogEvent(le) [FD]
Line_15 $$ LogDistillation exec = new LogDistillation(ld) --> Line_20 $$ exec.processLogEvent(le) [FD]
Line_18 $$ LogEvent le --> Line_20 $$ exec.processLogEvent(le) [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_22 $$ exec.end() [CD]
Line_15 $$ LogDistillation exec = new LogDistillation(ld) --> Line_22 $$ exec.end() [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_23 $$ in.close() [CD]
Line_3 $$ InputStream in = getConfStream() --> Line_23 $$ in.close() [FD]
Line_11 $$ in = url.openStream() --> Line_23 $$ in.close() [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_24 $$ assertEquals("number of logevents processed", 21, exec.getEventCount()) [CD]
Line_15 $$ LogDistillation exec = new LogDistillation(ld) --> Line_24 $$ assertEquals("number of logevents processed", 21, exec.getEventCount()) [FD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_25 $$ final int[] groupEventCount = [CD]
Line_2 $$ public void testRead() throws ParserConfigurationException, SAXException, ParseException, IOException --> Line_26 $$ for (int i = 0; i < 6; i++) [CD]
Line_26 $$ for (int i = 0; i < 6; i++) --> Line_27 $$ LogDistillation.Group g = exec.getGroups()[i] [CD]
Line_15 $$ LogDistillation exec = new LogDistillation(ld) --> Line_27 $$ LogDistillation.Group g = exec.getGroups()[i] [FD]
Line_26 $$ for (int i = 0; i < 6; i++) --> Line_28 $$ LogDistiller.Group def = g.getDefinition() [CD]
Line_27 $$ LogDistillation.Group g = exec.getGroups()[i] --> Line_28 $$ LogDistiller.Group def = g.getDefinition() [FD]
Line_26 $$ for (int i = 0; i < 6; i++) --> Line_29 $$ assertEquals("number of logevents in group[id='" + def.getId() + "']", groupEventCount[i], g.getEventCount()) [CD]
Line_28 $$ LogDistiller.Group def = g.getDefinition() --> Line_29 $$ assertEquals("number of logevents in group[id='" + def.getId() + "']", groupEventCount[i], g.getEventCount()) [FD]
Line_27 $$ LogDistillation.Group g = exec.getGroups()[i] --> Line_29 $$ assertEquals("number of logevents in group[id='" + def.getId() + "']", groupEventCount[i], g.getEventCount()) [FD]
