Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_3 $$ if (_url == null || _url.length() <= 0) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_3 $$ if (_url == null || _url.length() <= 0) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_4 $$ String temp = _url.toLowerCase() [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_4 $$ String temp = _url.toLowerCase() [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_5 $$ if (!temp.startsWith("http://") && !temp.startsWith("https://")) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_5 $$ if (!temp.startsWith("http://") && !temp.startsWith("https://")) [FD]
Line_4 $$ String temp = _url.toLowerCase() --> Line_5 $$ if (!temp.startsWith("http://") && !temp.startsWith("https://")) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_6 $$ _url = encodeURL(_url) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_6 $$ _url = encodeURL(_url) [FD]
Line_5 $$ if (!temp.startsWith("http://") && !temp.startsWith("https://")) --> Line_6 $$ _url = encodeURL(_url) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_7 $$ HttpMethod method = null [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_8 $$ if (_stringOrStream == null && (_params == null || _params.size() <= 0)) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_8 $$ if (_stringOrStream == null && (_params == null || _params.size() <= 0)) [FD]
Line_7 $$ HttpMethod method = null --> Line_8 $$ if (_stringOrStream == null && (_params == null || _params.size() <= 0)) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_9 $$ HttpMethodParams methodParams = ((HttpMethodBase) method).getParams() [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_10 $$ if (methodParams == null) [CD]
Line_9 $$ HttpMethodParams methodParams = ((HttpMethodBase) method).getParams() --> Line_10 $$ if (methodParams == null) [FD]
Line_10 $$ if (methodParams == null) --> Line_11 $$ methodParams = new HttpMethodParams() [CD]
Line_9 $$ HttpMethodParams methodParams = ((HttpMethodBase) method).getParams() --> Line_11 $$ methodParams = new HttpMethodParams() [FD]
Line_10 $$ if (methodParams == null) --> Line_12 $$ ((HttpMethodBase) method).setParams(methodParams) [CD]
Line_9 $$ HttpMethodParams methodParams = ((HttpMethodBase) method).getParams() --> Line_12 $$ ((HttpMethodBase) method).setParams(methodParams) [FD]
Line_11 $$ methodParams = new HttpMethodParams() --> Line_12 $$ ((HttpMethodBase) method).setParams(methodParams) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_14 $$ methodParams.setSoTimeout(_timeout) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_14 $$ methodParams.setSoTimeout(_timeout) [FD]
Line_9 $$ HttpMethodParams methodParams = ((HttpMethodBase) method).getParams() --> Line_14 $$ methodParams.setSoTimeout(_timeout) [FD]
Line_11 $$ methodParams = new HttpMethodParams() --> Line_14 $$ methodParams.setSoTimeout(_timeout) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_15 $$ if (_contentType != null && _contentType.length() > 0) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_15 $$ if (_contentType != null && _contentType.length() > 0) [FD]
Line_15 $$ if (_contentType != null && _contentType.length() > 0) --> Line_16 $$ _headers = new HashMap<String, String>() [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_16 $$ _headers = new HashMap<String, String>() [FD]
Line_15 $$ if (_contentType != null && _contentType.length() > 0) --> Line_17 $$ _headers.put("Content-Type", _contentType) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_17 $$ _headers.put("Content-Type", _contentType) [FD]
Line_16 $$ _headers = new HashMap<String, String>() --> Line_17 $$ _headers.put("Content-Type", _contentType) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_19 $$ if (_headers == null || !_headers.containsKey("User-Agent")) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_19 $$ if (_headers == null || !_headers.containsKey("User-Agent")) [FD]
Line_16 $$ _headers = new HashMap<String, String>() --> Line_19 $$ if (_headers == null || !_headers.containsKey("User-Agent")) [FD]
Line_19 $$ if (_headers == null || !_headers.containsKey("User-Agent")) --> Line_20 $$ _headers = new HashMap<String, String>() [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_20 $$ _headers = new HashMap<String, String>() [FD]
Line_16 $$ _headers = new HashMap<String, String>() --> Line_20 $$ _headers = new HashMap<String, String>() [FD]
Line_19 $$ if (_headers == null || !_headers.containsKey("User-Agent")) --> Line_21 $$ _headers.put("User-Agent", DEFAULT_USERAGENT) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_21 $$ _headers.put("User-Agent", DEFAULT_USERAGENT) [FD]
Line_16 $$ _headers = new HashMap<String, String>() --> Line_21 $$ _headers.put("User-Agent", DEFAULT_USERAGENT) [FD]
Line_20 $$ _headers = new HashMap<String, String>() --> Line_21 $$ _headers.put("User-Agent", DEFAULT_USERAGENT) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_23 $$ if (_headers != null) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_23 $$ if (_headers != null) [FD]
Line_16 $$ _headers = new HashMap<String, String>() --> Line_23 $$ if (_headers != null) [FD]
Line_20 $$ _headers = new HashMap<String, String>() --> Line_23 $$ if (_headers != null) [FD]
Line_23 $$ if (_headers != null) --> Line_24 $$ Iterator<Map.Entry<String, String>> iter = _headers.entrySet().iterator() [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_24 $$ Iterator<Map.Entry<String, String>> iter = _headers.entrySet().iterator() [FD]
Line_16 $$ _headers = new HashMap<String, String>() --> Line_24 $$ Iterator<Map.Entry<String, String>> iter = _headers.entrySet().iterator() [FD]
Line_20 $$ _headers = new HashMap<String, String>() --> Line_24 $$ Iterator<Map.Entry<String, String>> iter = _headers.entrySet().iterator() [FD]
Line_23 $$ if (_headers != null) --> Line_25 $$ while (iter.hasNext()) [CD]
Line_25 $$ while (iter.hasNext()) --> Line_26 $$ Map.Entry<String, String> entry = iter.next() [CD]
Line_25 $$ while (iter.hasNext()) --> Line_27 $$ method.setRequestHeader((String) entry.getKey(), (String) entry.getValue()) [CD]
Line_7 $$ HttpMethod method = null --> Line_27 $$ method.setRequestHeader((String) entry.getKey(), (String) entry.getValue()) [FD]
Line_8 $$ if (_stringOrStream == null && (_params == null || _params.size() <= 0)) --> Line_27 $$ method.setRequestHeader((String) entry.getKey(), (String) entry.getValue()) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_30 $$ if (method instanceof PostMethod && (_params != null && _params.size() > 0)) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_30 $$ if (method instanceof PostMethod && (_params != null && _params.size() > 0)) [FD]
Line_30 $$ if (method instanceof PostMethod && (_params != null && _params.size() > 0)) --> Line_31 $$ Iterator<Map.Entry<String, String>> iter = _params.entrySet().iterator() [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_31 $$ Iterator<Map.Entry<String, String>> iter = _params.entrySet().iterator() [FD]
Line_30 $$ if (method instanceof PostMethod && (_params != null && _params.size() > 0)) --> Line_32 $$ while (iter.hasNext()) [CD]
Line_32 $$ while (iter.hasNext()) --> Line_33 $$ Map.Entry<String, String> entry = iter.next() [CD]
Line_32 $$ while (iter.hasNext()) --> Line_34 $$ ((PostMethod) method).addParameter((String) entry.getKey(), (String) entry.getValue()) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_37 $$ if (method instanceof EntityEnclosingMethod && _stringOrStream != null) [CD]
Line_37 $$ if (method instanceof EntityEnclosingMethod && _stringOrStream != null) --> Line_38 $$ if (_stringOrStream instanceof InputStream) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_38 $$ if (_stringOrStream instanceof InputStream) [FD]
Line_38 $$ if (_stringOrStream instanceof InputStream) --> Line_39 $$ RequestEntity entity = new InputStreamRequestEntity((InputStream) _stringOrStream) [CD]
Line_38 $$ if (_stringOrStream instanceof InputStream) --> Line_40 $$ ((EntityEnclosingMethod) method).setRequestEntity(entity) [CD]
Line_39 $$ RequestEntity entity = new InputStreamRequestEntity((InputStream) _stringOrStream) --> Line_40 $$ ((EntityEnclosingMethod) method).setRequestEntity(entity) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_42 $$ RequestEntity entity = new StringRequestEntity(_stringOrStream.toString(), _contentType, null) [FD]
Line_38 $$ if (_stringOrStream instanceof InputStream) --> Line_43 $$ ((EntityEnclosingMethod) method).setRequestEntity(entity) [CD]
Line_39 $$ RequestEntity entity = new InputStreamRequestEntity((InputStream) _stringOrStream) --> Line_43 $$ ((EntityEnclosingMethod) method).setRequestEntity(entity) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_46 $$ HttpClient httpClient = new HttpClient(new org.apache.commons.httpclient.SimpleHttpConnectionManager()) [CD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_47 $$ httpClient.getParams().setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true) [CD]
Line_46 $$ HttpClient httpClient = new HttpClient(new org.apache.commons.httpclient.SimpleHttpConnectionManager()) --> Line_47 $$ httpClient.getParams().setBooleanParameter(HttpClientParams.ALLOW_CIRCULAR_REDIRECTS, true) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_48 $$ InputStream instream = null [CD]
Line_46 $$ HttpClient httpClient = new HttpClient(new org.apache.commons.httpclient.SimpleHttpConnectionManager()) --> Line_50 $$ int status = httpClient.executeMethod(method) [FD]
Line_7 $$ HttpMethod method = null --> Line_50 $$ int status = httpClient.executeMethod(method) [FD]
Line_8 $$ if (_stringOrStream == null && (_params == null || _params.size() <= 0)) --> Line_50 $$ int status = httpClient.executeMethod(method) [FD]
Line_50 $$ int status = httpClient.executeMethod(method) --> Line_51 $$ if (status != HttpStatus.SC_OK) [FD]
Line_51 $$ if (status != HttpStatus.SC_OK) --> Line_52 $$ LOG.warn("Http Satus:" + status + ",Url:" + _url) [CD]
Line_51 $$ if (status != HttpStatus.SC_OK) --> Line_53 $$ if (status >= 500 && status < 600) [CD]
Line_48 $$ InputStream instream = null --> Line_55 $$ instream = method.getResponseBodyAsStream() [FD]
Line_7 $$ HttpMethod method = null --> Line_55 $$ instream = method.getResponseBodyAsStream() [FD]
Line_8 $$ if (_stringOrStream == null && (_params == null || _params.size() <= 0)) --> Line_55 $$ instream = method.getResponseBodyAsStream() [FD]
Line_48 $$ InputStream instream = null --> Line_56 $$ IOUtils.copy(instream, _stream) [FD]
Line_55 $$ instream = method.getResponseBodyAsStream() --> Line_56 $$ IOUtils.copy(instream, _stream) [FD]
Line_2 $$ public static void getResponseAsStream(String _url, Object _stringOrStream, OutputStream _stream, Map<String, String> _headers, Map<String, String> _params, String _contentType, int _timeout) throws IOException --> Line_56 $$ IOUtils.copy(instream, _stream) [FD]
Line_48 $$ InputStream instream = null --> Line_61 $$ IOUtils.closeQuietly(instream) [FD]
Line_55 $$ instream = method.getResponseBodyAsStream() --> Line_61 $$ IOUtils.closeQuietly(instream) [FD]
Line_7 $$ HttpMethod method = null --> Line_62 $$ method.releaseConnection() [FD]
Line_8 $$ if (_stringOrStream == null && (_params == null || _params.size() <= 0)) --> Line_62 $$ method.releaseConnection() [FD]
