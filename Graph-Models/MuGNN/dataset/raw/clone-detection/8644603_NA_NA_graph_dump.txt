Line_2 $$ public static void main(String args[]) --> Line_3 $$ org.apache.xml.security.Init.init() [CD]
Line_2 $$ public static void main(String args[]) --> Line_4 $$ String signatureFileName = args[0] [CD]
Line_2 $$ public static void main(String args[]) --> Line_5 $$ javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance() [CD]
Line_2 $$ public static void main(String args[]) --> Line_6 $$ dbf.setNamespaceAware(true) [CD]
Line_5 $$ javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance() --> Line_6 $$ dbf.setNamespaceAware(true) [FD]
Line_2 $$ public static void main(String args[]) --> Line_7 $$ dbf.setAttribute("http://xml.org/sax/features/namespaces", Boolean.TRUE) [CD]
Line_5 $$ javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance() --> Line_7 $$ dbf.setAttribute("http://xml.org/sax/features/namespaces", Boolean.TRUE) [FD]
Line_5 $$ javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance() --> Line_13 $$ javax.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder() [FD]
Line_13 $$ javax.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder() --> Line_14 $$ org.w3c.dom.Document doc = db.parse(new java.io.FileInputStream(f)) [FD]
Line_15 $$ VerifyExampleTest vf = new VerifyExampleTest() --> Line_16 $$ vf.verify(doc) [FD]
Line_14 $$ org.w3c.dom.Document doc = db.parse(new java.io.FileInputStream(f)) --> Line_16 $$ vf.verify(doc) [FD]
Line_14 $$ org.w3c.dom.Document doc = db.parse(new java.io.FileInputStream(f)) --> Line_19 $$ NodeList nodes = doc.getElementsByTagNameNS(org.apache.xml.security.utils.Constants.SignatureSpecNS, "Signature") [FD]
Line_19 $$ NodeList nodes = doc.getElementsByTagNameNS(org.apache.xml.security.utils.Constants.SignatureSpecNS, "Signature") --> Line_20 $$ if (nodes.getLength() != 0) [FD]
Line_20 $$ if (nodes.getLength() != 0) --> Line_21 $$ System.out.println("Found " + nodes.getLength() + " Signature  elements.") [CD]
Line_19 $$ NodeList nodes = doc.getElementsByTagNameNS(org.apache.xml.security.utils.Constants.SignatureSpecNS, "Signature") --> Line_21 $$ System.out.println("Found " + nodes.getLength() + " Signature  elements.") [FD]
Line_20 $$ if (nodes.getLength() != 0) --> Line_22 $$ for (int i = 0; i < nodes.getLength(); i++) [CD]
Line_19 $$ NodeList nodes = doc.getElementsByTagNameNS(org.apache.xml.security.utils.Constants.SignatureSpecNS, "Signature") --> Line_22 $$ for (int i = 0; i < nodes.getLength(); i++) [FD]
Line_22 $$ for (int i = 0; i < nodes.getLength(); i++) --> Line_23 $$ sigElement = (Element) nodes.item(i) [CD]
Line_22 $$ for (int i = 0; i < nodes.getLength(); i++) --> Line_23 $$ sigElement = (Element) nodes.item(i) [FD]
Line_18 $$ Element sigElement = null --> Line_23 $$ sigElement = (Element) nodes.item(i) [FD]
Line_19 $$ NodeList nodes = doc.getElementsByTagNameNS(org.apache.xml.security.utils.Constants.SignatureSpecNS, "Signature") --> Line_23 $$ sigElement = (Element) nodes.item(i) [FD]
Line_22 $$ for (int i = 0; i < nodes.getLength(); i++) --> Line_24 $$ XMLSignature signature = new XMLSignature(sigElement, "") [CD]
Line_22 $$ for (int i = 0; i < nodes.getLength(); i++) --> Line_25 $$ KeyInfo ki = signature.getKeyInfo() [CD]
Line_24 $$ XMLSignature signature = new XMLSignature(sigElement, "") --> Line_25 $$ KeyInfo ki = signature.getKeyInfo() [FD]
Line_22 $$ for (int i = 0; i < nodes.getLength(); i++) --> Line_26 $$ signature.addResourceResolver(new OfflineResolver()) [CD]
Line_24 $$ XMLSignature signature = new XMLSignature(sigElement, "") --> Line_26 $$ signature.addResourceResolver(new OfflineResolver()) [FD]
Line_22 $$ for (int i = 0; i < nodes.getLength(); i++) --> Line_27 $$ if (ki != null) [CD]
Line_25 $$ KeyInfo ki = signature.getKeyInfo() --> Line_27 $$ if (ki != null) [FD]
Line_27 $$ if (ki != null) --> Line_28 $$ if (ki.containsX509Data()) [CD]
Line_25 $$ KeyInfo ki = signature.getKeyInfo() --> Line_28 $$ if (ki.containsX509Data()) [FD]
Line_28 $$ if (ki.containsX509Data()) --> Line_29 $$ System.out.println("Could find a X509Data element in the  KeyInfo") [CD]
Line_27 $$ if (ki != null) --> Line_31 $$ KeyInfo kinfo = signature.getKeyInfo() [CD]
Line_24 $$ XMLSignature signature = new XMLSignature(sigElement, "") --> Line_31 $$ KeyInfo kinfo = signature.getKeyInfo() [FD]
Line_27 $$ if (ki != null) --> Line_32 $$ X509Certificate cert = null [CD]
Line_27 $$ if (ki != null) --> Line_33 $$ if (kinfo.containsRetrievalMethod()) [CD]
Line_31 $$ KeyInfo kinfo = signature.getKeyInfo() --> Line_33 $$ if (kinfo.containsRetrievalMethod()) [FD]
Line_33 $$ if (kinfo.containsRetrievalMethod()) --> Line_34 $$ RetrievalMethod m = kinfo.itemRetrievalMethod(0) [CD]
Line_31 $$ KeyInfo kinfo = signature.getKeyInfo() --> Line_34 $$ RetrievalMethod m = kinfo.itemRetrievalMethod(0) [FD]
Line_33 $$ if (kinfo.containsRetrievalMethod()) --> Line_35 $$ URL url = new URL(m.getURI()) [CD]
Line_34 $$ RetrievalMethod m = kinfo.itemRetrievalMethod(0) --> Line_35 $$ URL url = new URL(m.getURI()) [FD]
Line_33 $$ if (kinfo.containsRetrievalMethod()) --> Line_36 $$ CertificateFactory cf = CertificateFactory.getInstance("X.509") [CD]
Line_33 $$ if (kinfo.containsRetrievalMethod()) --> Line_37 $$ cert = (X509Certificate) cf.generateCertificate(url.openStream()) [CD]
Line_32 $$ X509Certificate cert = null --> Line_37 $$ cert = (X509Certificate) cf.generateCertificate(url.openStream()) [FD]
Line_36 $$ CertificateFactory cf = CertificateFactory.getInstance("X.509") --> Line_37 $$ cert = (X509Certificate) cf.generateCertificate(url.openStream()) [FD]
Line_35 $$ URL url = new URL(m.getURI()) --> Line_37 $$ cert = (X509Certificate) cf.generateCertificate(url.openStream()) [FD]
Line_33 $$ if (kinfo.containsRetrievalMethod()) --> Line_39 $$ cert = signature.getKeyInfo().getX509Certificate() [CD]
Line_32 $$ X509Certificate cert = null --> Line_39 $$ cert = signature.getKeyInfo().getX509Certificate() [FD]
Line_37 $$ cert = (X509Certificate) cf.generateCertificate(url.openStream()) --> Line_39 $$ cert = signature.getKeyInfo().getX509Certificate() [FD]
Line_24 $$ XMLSignature signature = new XMLSignature(sigElement, "") --> Line_39 $$ cert = signature.getKeyInfo().getX509Certificate() [FD]
Line_27 $$ if (ki != null) --> Line_41 $$ if (cert != null) [CD]
Line_32 $$ X509Certificate cert = null --> Line_41 $$ if (cert != null) [FD]
Line_37 $$ cert = (X509Certificate) cf.generateCertificate(url.openStream()) --> Line_41 $$ if (cert != null) [FD]
Line_39 $$ cert = signature.getKeyInfo().getX509Certificate() --> Line_41 $$ if (cert != null) [FD]
Line_41 $$ if (cert != null) --> Line_42 $$ System.out.println("The XML signature is " + (signature.checkSignatureValue(cert) ? "valid (good)" : "invalid !!!!! (bad)")) [CD]
Line_24 $$ XMLSignature signature = new XMLSignature(sigElement, "") --> Line_42 $$ System.out.println("The XML signature is " + (signature.checkSignatureValue(cert) ? "valid (good)" : "invalid !!!!! (bad)")) [FD]
Line_32 $$ X509Certificate cert = null --> Line_42 $$ System.out.println("The XML signature is " + (signature.checkSignatureValue(cert) ? "valid (good)" : "invalid !!!!! (bad)")) [FD]
Line_37 $$ cert = (X509Certificate) cf.generateCertificate(url.openStream()) --> Line_42 $$ System.out.println("The XML signature is " + (signature.checkSignatureValue(cert) ? "valid (good)" : "invalid !!!!! (bad)")) [FD]
Line_39 $$ cert = signature.getKeyInfo().getX509Certificate() --> Line_42 $$ System.out.println("The XML signature is " + (signature.checkSignatureValue(cert) ? "valid (good)" : "invalid !!!!! (bad)")) [FD]
Line_41 $$ if (cert != null) --> Line_44 $$ System.out.println("Did not find a Certificate") [CD]
Line_41 $$ if (cert != null) --> Line_45 $$ PublicKey pk = signature.getKeyInfo().getPublicKey() [CD]
Line_24 $$ XMLSignature signature = new XMLSignature(sigElement, "") --> Line_45 $$ PublicKey pk = signature.getKeyInfo().getPublicKey() [FD]
Line_41 $$ if (cert != null) --> Line_46 $$ if (pk != null) [CD]
Line_45 $$ PublicKey pk = signature.getKeyInfo().getPublicKey() --> Line_46 $$ if (pk != null) [FD]
Line_46 $$ if (pk != null) --> Line_47 $$ System.out.println("The XML signatur is " + (signature.checkSignatureValue(pk) ? "valid (good)" : "invalid !!!!! (bad)")) [CD]
Line_24 $$ XMLSignature signature = new XMLSignature(sigElement, "") --> Line_47 $$ System.out.println("The XML signatur is " + (signature.checkSignatureValue(pk) ? "valid (good)" : "invalid !!!!! (bad)")) [FD]
Line_45 $$ PublicKey pk = signature.getKeyInfo().getPublicKey() --> Line_47 $$ System.out.println("The XML signatur is " + (signature.checkSignatureValue(pk) ? "valid (good)" : "invalid !!!!! (bad)")) [FD]
Line_46 $$ if (pk != null) --> Line_49 $$ System.out.println("Did not find a public key, so I can't check the signature") [CD]
Line_27 $$ if (ki != null) --> Line_53 $$ System.out.println("Did not find a KeyInfo") [CD]
