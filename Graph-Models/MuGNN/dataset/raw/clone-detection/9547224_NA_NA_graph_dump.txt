Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_3 $$ copyFile(new File(CONF_DIR + "solrconfig-slave1.xml"), new File(slave.getConfDir(), "solrconfig.xml")) [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_4 $$ slaveJetty.stop() [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_5 $$ slaveJetty = createJetty(slave) [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_6 $$ slaveClient = createNewSolrServer(slaveJetty.getLocalPort()) [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i) [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_8 $$ masterClient.commit() [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_9 $$ NamedList masterQueryRsp = query("*:*", masterClient) [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_10 $$ SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response") [CD]
Line_9 $$ NamedList masterQueryRsp = query("*:*", masterClient) --> Line_10 $$ SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response") [FD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_11 $$ assertEquals(500, masterQueryResult.getNumFound()) [CD]
Line_10 $$ SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response") --> Line_11 $$ assertEquals(500, masterQueryResult.getNumFound()) [FD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_12 $$ String masterUrl = "http://localhost:" + slaveJetty.getLocalPort() + "/solr/replication?command=fetchindex&masterUrl=" [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_13 $$ masterUrl += "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication" [CD]
Line_12 $$ String masterUrl = "http://localhost:" + slaveJetty.getLocalPort() + "/solr/replication?command=fetchindex&masterUrl=" --> Line_13 $$ masterUrl += "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication" [FD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_14 $$ URL url = new URL(masterUrl) [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_15 $$ InputStream stream = url.openStream() [CD]
Line_14 $$ URL url = new URL(masterUrl) --> Line_15 $$ InputStream stream = url.openStream() [FD]
Line_15 $$ InputStream stream = url.openStream() --> Line_17 $$ stream.close() [FD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_20 $$ Thread.sleep(3000) [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_21 $$ NamedList slaveQueryRsp = query("*:*", slaveClient) [CD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_22 $$ SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response") [CD]
Line_21 $$ NamedList slaveQueryRsp = query("*:*", slaveClient) --> Line_22 $$ SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response") [FD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_23 $$ assertEquals(500, slaveQueryResult.getNumFound()) [CD]
Line_22 $$ SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response") --> Line_23 $$ assertEquals(500, slaveQueryResult.getNumFound()) [FD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_24 $$ String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null) [CD]
Line_10 $$ SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get("response") --> Line_24 $$ String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null) [FD]
Line_22 $$ SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get("response") --> Line_24 $$ String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null) [FD]
Line_2 $$ public void testSnapPullWithMasterUrl() throws Exception --> Line_25 $$ assertEquals(null, cmp) [CD]
Line_24 $$ String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null) --> Line_25 $$ assertEquals(null, cmp) [FD]
