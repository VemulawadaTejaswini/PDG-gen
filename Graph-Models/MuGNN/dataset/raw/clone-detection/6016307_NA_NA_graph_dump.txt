Line_2 $$ public static int[] rank(double[] data) --> Line_3 $$ int[] rank = new int[data.length] [CD]
Line_2 $$ public static int[] rank(double[] data) --> Line_4 $$ for (int i = 0; i < data.length; i++) rank[i] = i [CD]
Line_2 $$ public static int[] rank(double[] data) --> Line_5 $$ boolean swapped [CD]
Line_2 $$ public static int[] rank(double[] data) --> Line_6 $$ double dtmp [CD]
Line_2 $$ public static int[] rank(double[] data) --> Line_7 $$ int i, j, itmp [CD]
Line_2 $$ public static int[] rank(double[] data) --> Line_8 $$ for (i = 0; i < data.length - 1; i++) [CD]
Line_4 $$ for (int i = 0; i < data.length; i++) rank[i] = i --> Line_8 $$ for (i = 0; i < data.length - 1; i++) [FD]
Line_7 $$ int i, j, itmp --> Line_8 $$ for (i = 0; i < data.length - 1; i++) [FD]
Line_8 $$ for (i = 0; i < data.length - 1; i++) --> Line_9 $$ swapped = false [CD]
Line_5 $$ boolean swapped --> Line_9 $$ swapped = false [FD]
Line_8 $$ for (i = 0; i < data.length - 1; i++) --> Line_10 $$ for (j = 0; j < data.length - 1 - i; j++) [CD]
Line_7 $$ int i, j, itmp --> Line_10 $$ for (j = 0; j < data.length - 1 - i; j++) [FD]
Line_10 $$ for (j = 0; j < data.length - 1 - i; j++) --> Line_11 $$ if (data[j] < data[j + 1]) [CD]
Line_11 $$ if (data[j] < data[j + 1]) --> Line_12 $$ dtmp = data[j] [CD]
Line_6 $$ double dtmp --> Line_12 $$ dtmp = data[j] [FD]
Line_11 $$ if (data[j] < data[j + 1]) --> Line_13 $$ data[j] = data[j + 1] [CD]
Line_11 $$ if (data[j] < data[j + 1]) --> Line_14 $$ data[j + 1] = dtmp [CD]
Line_12 $$ dtmp = data[j] --> Line_14 $$ data[j + 1] = dtmp [FD]
Line_6 $$ double dtmp --> Line_14 $$ data[j + 1] = dtmp [FD]
Line_11 $$ if (data[j] < data[j + 1]) --> Line_15 $$ itmp = rank[j] [CD]
Line_7 $$ int i, j, itmp --> Line_15 $$ itmp = rank[j] [FD]
Line_11 $$ if (data[j] < data[j + 1]) --> Line_16 $$ rank[j] = rank[j + 1] [CD]
Line_11 $$ if (data[j] < data[j + 1]) --> Line_17 $$ rank[j + 1] = itmp [CD]
Line_15 $$ itmp = rank[j] --> Line_17 $$ rank[j + 1] = itmp [FD]
Line_7 $$ int i, j, itmp --> Line_17 $$ rank[j + 1] = itmp [FD]
Line_11 $$ if (data[j] < data[j + 1]) --> Line_18 $$ swapped = true [CD]
Line_9 $$ swapped = false --> Line_18 $$ swapped = true [FD]
Line_5 $$ boolean swapped --> Line_18 $$ swapped = true [FD]
Line_2 $$ public static int[] rank(double[] data) --> Line_22 $$ return rank [CD]
