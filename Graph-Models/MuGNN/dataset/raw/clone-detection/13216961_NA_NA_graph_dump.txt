Line_2 $$ public void actionPerformed(ActionEvent ev) --> Line_3 $$ if (fileChooser == null) [CD]
Line_3 $$ if (fileChooser == null) --> Line_5 $$ ExtensionFileFilter fileFilter = new ExtensionFileFilter("Device profile (*.jar, *.zip)") [CD]
Line_3 $$ if (fileChooser == null) --> Line_6 $$ fileFilter.addExtension("jar") [CD]
Line_5 $$ ExtensionFileFilter fileFilter = new ExtensionFileFilter("Device profile (*.jar, *.zip)") --> Line_6 $$ fileFilter.addExtension("jar") [FD]
Line_3 $$ if (fileChooser == null) --> Line_7 $$ fileFilter.addExtension("zip") [CD]
Line_5 $$ ExtensionFileFilter fileFilter = new ExtensionFileFilter("Device profile (*.jar, *.zip)") --> Line_7 $$ fileFilter.addExtension("zip") [FD]
Line_3 $$ if (fileChooser == null) --> Line_8 $$ fileChooser.setFileFilter(fileFilter) [CD]
Line_5 $$ ExtensionFileFilter fileFilter = new ExtensionFileFilter("Device profile (*.jar, *.zip)") --> Line_8 $$ fileChooser.setFileFilter(fileFilter) [FD]
Line_2 $$ public void actionPerformed(ActionEvent ev) --> Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) [CD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_11 $$ String manifestDeviceName = null [CD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_12 $$ URL[] urls = new URL[1] [CD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_13 $$ ArrayList descriptorEntries = new ArrayList() [CD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_14 $$ JarFile jar = null [CD]
Line_14 $$ JarFile jar = null --> Line_16 $$ jar = new JarFile(fileChooser.getSelectedFile()) [FD]
Line_14 $$ JarFile jar = null --> Line_17 $$ Manifest manifest = jar.getManifest() [FD]
Line_16 $$ jar = new JarFile(fileChooser.getSelectedFile()) --> Line_17 $$ Manifest manifest = jar.getManifest() [FD]
Line_17 $$ Manifest manifest = jar.getManifest() --> Line_18 $$ if (manifest != null) [FD]
Line_18 $$ if (manifest != null) --> Line_19 $$ Attributes attrs = manifest.getMainAttributes() [CD]
Line_17 $$ Manifest manifest = jar.getManifest() --> Line_19 $$ Attributes attrs = manifest.getMainAttributes() [FD]
Line_18 $$ if (manifest != null) --> Line_20 $$ manifestDeviceName = attrs.getValue("Device-Name") [CD]
Line_11 $$ String manifestDeviceName = null --> Line_20 $$ manifestDeviceName = attrs.getValue("Device-Name") [FD]
Line_19 $$ Attributes attrs = manifest.getMainAttributes() --> Line_20 $$ manifestDeviceName = attrs.getValue("Device-Name") [FD]
Line_14 $$ JarFile jar = null --> Line_22 $$ for (Enumeration en = jar.entries(); en.hasMoreElements(); ) [FD]
Line_16 $$ jar = new JarFile(fileChooser.getSelectedFile()) --> Line_22 $$ for (Enumeration en = jar.entries(); en.hasMoreElements(); ) [FD]
Line_22 $$ for (Enumeration en = jar.entries(); en.hasMoreElements(); ) --> Line_23 $$ String entry = ((JarEntry) en.nextElement()).getName() [CD]
Line_22 $$ for (Enumeration en = jar.entries(); en.hasMoreElements(); ) --> Line_23 $$ String entry = ((JarEntry) en.nextElement()).getName() [FD]
Line_22 $$ for (Enumeration en = jar.entries(); en.hasMoreElements(); ) --> Line_24 $$ if ((entry.toLowerCase().endsWith(".xml") || entry.toLowerCase().endsWith("device.txt")) && !entry.toLowerCase().startsWith("meta-inf")) [CD]
Line_24 $$ if ((entry.toLowerCase().endsWith(".xml") || entry.toLowerCase().endsWith("device.txt")) && !entry.toLowerCase().startsWith("meta-inf")) --> Line_25 $$ descriptorEntries.add(entry) [CD]
Line_13 $$ ArrayList descriptorEntries = new ArrayList() --> Line_25 $$ descriptorEntries.add(entry) [FD]
Line_14 $$ JarFile jar = null --> Line_33 $$ if (jar != null) [FD]
Line_16 $$ jar = new JarFile(fileChooser.getSelectedFile()) --> Line_33 $$ if (jar != null) [FD]
Line_14 $$ JarFile jar = null --> Line_35 $$ jar.close() [FD]
Line_16 $$ jar = new JarFile(fileChooser.getSelectedFile()) --> Line_35 $$ jar.close() [FD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_40 $$ if (descriptorEntries.size() == 0) [CD]
Line_13 $$ ArrayList descriptorEntries = new ArrayList() --> Line_40 $$ if (descriptorEntries.size() == 0) [FD]
Line_40 $$ if (descriptorEntries.size() == 0) --> Line_41 $$ Message.error("Cannot find any device profile in file: " + fileChooser.getSelectedFile().getName()) [CD]
Line_40 $$ if (descriptorEntries.size() == 0) --> Line_42 $$ return [CD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_44 $$ if (descriptorEntries.size() > 1) [CD]
Line_13 $$ ArrayList descriptorEntries = new ArrayList() --> Line_44 $$ if (descriptorEntries.size() > 1) [FD]
Line_44 $$ if (descriptorEntries.size() > 1) --> Line_45 $$ manifestDeviceName = null [CD]
Line_11 $$ String manifestDeviceName = null --> Line_45 $$ manifestDeviceName = null [FD]
Line_20 $$ manifestDeviceName = attrs.getValue("Device-Name") --> Line_45 $$ manifestDeviceName = null [FD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_47 $$ ClassLoader classLoader = Common.createExtensionsClassLoader(urls) [CD]
Line_12 $$ URL[] urls = new URL[1] --> Line_47 $$ ClassLoader classLoader = Common.createExtensionsClassLoader(urls) [FD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_48 $$ HashMap devices = new HashMap() [CD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_49 $$ for (Iterator it = descriptorEntries.iterator(); it.hasNext(); ) [CD]
Line_13 $$ ArrayList descriptorEntries = new ArrayList() --> Line_49 $$ for (Iterator it = descriptorEntries.iterator(); it.hasNext(); ) [FD]
Line_49 $$ for (Iterator it = descriptorEntries.iterator(); it.hasNext(); ) --> Line_50 $$ String entryName = (String) it.next() [CD]
Line_49 $$ for (Iterator it = descriptorEntries.iterator(); it.hasNext(); ) --> Line_50 $$ String entryName = (String) it.next() [FD]
Line_48 $$ HashMap devices = new HashMap() --> Line_52 $$ devices.put(entryName, DeviceImpl.create(emulatorContext, classLoader, entryName, J2SEDevice.class)) [FD]
Line_50 $$ String entryName = (String) it.next() --> Line_52 $$ devices.put(entryName, DeviceImpl.create(emulatorContext, classLoader, entryName, J2SEDevice.class)) [FD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_58 $$ for (Enumeration en = lsDevicesModel.elements(); en.hasMoreElements(); ) [CD]
Line_22 $$ for (Enumeration en = jar.entries(); en.hasMoreElements(); ) --> Line_58 $$ for (Enumeration en = lsDevicesModel.elements(); en.hasMoreElements(); ) [FD]
Line_58 $$ for (Enumeration en = lsDevicesModel.elements(); en.hasMoreElements(); ) --> Line_59 $$ DeviceEntry entry = (DeviceEntry) en.nextElement() [CD]
Line_58 $$ for (Enumeration en = lsDevicesModel.elements(); en.hasMoreElements(); ) --> Line_59 $$ DeviceEntry entry = (DeviceEntry) en.nextElement() [FD]
Line_22 $$ for (Enumeration en = jar.entries(); en.hasMoreElements(); ) --> Line_59 $$ DeviceEntry entry = (DeviceEntry) en.nextElement() [FD]
Line_58 $$ for (Enumeration en = lsDevicesModel.elements(); en.hasMoreElements(); ) --> Line_60 $$ if (devices.containsKey(entry.getDescriptorLocation())) [CD]
Line_48 $$ HashMap devices = new HashMap() --> Line_60 $$ if (devices.containsKey(entry.getDescriptorLocation())) [FD]
Line_60 $$ if (devices.containsKey(entry.getDescriptorLocation())) --> Line_61 $$ devices.remove(entry.getDescriptorLocation()) [CD]
Line_48 $$ HashMap devices = new HashMap() --> Line_61 $$ devices.remove(entry.getDescriptorLocation()) [FD]
Line_10 $$ if (fileChooser.showOpenDialog(SwingSelectDevicePanel.this) == JFileChooser.APPROVE_OPTION) --> Line_64 $$ if (devices.size() == 0) [CD]
Line_48 $$ HashMap devices = new HashMap() --> Line_64 $$ if (devices.size() == 0) [FD]
Line_64 $$ if (devices.size() == 0) --> Line_65 $$ Message.info("Device profile already added") [CD]
Line_64 $$ if (devices.size() == 0) --> Line_66 $$ return [CD]
Line_69 $$ File deviceFile = new File(Config.getConfigPath(), fileChooser.getSelectedFile().getName()) --> Line_70 $$ if (deviceFile.exists()) [FD]
Line_70 $$ if (deviceFile.exists()) --> Line_71 $$ deviceFile = File.createTempFile("device", ".jar", Config.getConfigPath()) [CD]
Line_69 $$ File deviceFile = new File(Config.getConfigPath(), fileChooser.getSelectedFile().getName()) --> Line_71 $$ deviceFile = File.createTempFile("device", ".jar", Config.getConfigPath()) [FD]
Line_69 $$ File deviceFile = new File(Config.getConfigPath(), fileChooser.getSelectedFile().getName()) --> Line_73 $$ IOUtils.copyFile(fileChooser.getSelectedFile(), deviceFile) [FD]
Line_71 $$ deviceFile = File.createTempFile("device", ".jar", Config.getConfigPath()) --> Line_73 $$ IOUtils.copyFile(fileChooser.getSelectedFile(), deviceFile) [FD]
Line_49 $$ for (Iterator it = descriptorEntries.iterator(); it.hasNext(); ) --> Line_75 $$ for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) [FD]
Line_48 $$ HashMap devices = new HashMap() --> Line_75 $$ for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) [FD]
Line_75 $$ for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) --> Line_76 $$ String descriptorLocation = (String) it.next() [CD]
Line_75 $$ for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) --> Line_76 $$ String descriptorLocation = (String) it.next() [FD]
Line_49 $$ for (Iterator it = descriptorEntries.iterator(); it.hasNext(); ) --> Line_76 $$ String descriptorLocation = (String) it.next() [FD]
Line_75 $$ for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) --> Line_77 $$ Device device = (Device) devices.get(descriptorLocation) [CD]
Line_48 $$ HashMap devices = new HashMap() --> Line_77 $$ Device device = (Device) devices.get(descriptorLocation) [FD]
Line_76 $$ String descriptorLocation = (String) it.next() --> Line_77 $$ Device device = (Device) devices.get(descriptorLocation) [FD]
Line_75 $$ for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) --> Line_78 $$ if (manifestDeviceName != null) [CD]
Line_11 $$ String manifestDeviceName = null --> Line_78 $$ if (manifestDeviceName != null) [FD]
Line_20 $$ manifestDeviceName = attrs.getValue("Device-Name") --> Line_78 $$ if (manifestDeviceName != null) [FD]
Line_45 $$ manifestDeviceName = null --> Line_78 $$ if (manifestDeviceName != null) [FD]
Line_78 $$ if (manifestDeviceName != null) --> Line_79 $$ entry = new DeviceEntry(manifestDeviceName, deviceFile.getName(), descriptorLocation, false) [CD]
Line_69 $$ File deviceFile = new File(Config.getConfigPath(), fileChooser.getSelectedFile().getName()) --> Line_79 $$ entry = new DeviceEntry(manifestDeviceName, deviceFile.getName(), descriptorLocation, false) [FD]
Line_71 $$ deviceFile = File.createTempFile("device", ".jar", Config.getConfigPath()) --> Line_79 $$ entry = new DeviceEntry(manifestDeviceName, deviceFile.getName(), descriptorLocation, false) [FD]
Line_78 $$ if (manifestDeviceName != null) --> Line_81 $$ entry = new DeviceEntry(device.getName(), deviceFile.getName(), descriptorLocation, false) [CD]
Line_77 $$ Device device = (Device) devices.get(descriptorLocation) --> Line_81 $$ entry = new DeviceEntry(device.getName(), deviceFile.getName(), descriptorLocation, false) [FD]
Line_69 $$ File deviceFile = new File(Config.getConfigPath(), fileChooser.getSelectedFile().getName()) --> Line_81 $$ entry = new DeviceEntry(device.getName(), deviceFile.getName(), descriptorLocation, false) [FD]
Line_71 $$ deviceFile = File.createTempFile("device", ".jar", Config.getConfigPath()) --> Line_81 $$ entry = new DeviceEntry(device.getName(), deviceFile.getName(), descriptorLocation, false) [FD]
Line_75 $$ for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) --> Line_83 $$ lsDevicesModel.addElement(entry) [CD]
Line_75 $$ for (Iterator it = devices.keySet().iterator(); it.hasNext(); ) --> Line_84 $$ Config.addDeviceEntry(entry) [CD]
