Line_2 $$ public void send(String payload, TransportReceiver receiver) --> Line_3 $$ HttpURLConnection connection = null [CD]
Line_3 $$ HttpURLConnection connection = null --> Line_5 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_3 $$ HttpURLConnection connection = null --> Line_6 $$ configureConnection(connection) [FD]
Line_5 $$ connection = (HttpURLConnection) url.openConnection() --> Line_6 $$ configureConnection(connection) [FD]
Line_3 $$ HttpURLConnection connection = null --> Line_7 $$ OutputStream out = connection.getOutputStream() [FD]
Line_5 $$ connection = (HttpURLConnection) url.openConnection() --> Line_7 $$ OutputStream out = connection.getOutputStream() [FD]
Line_7 $$ OutputStream out = connection.getOutputStream() --> Line_8 $$ out.write(payload.getBytes("UTF-8")) [FD]
Line_2 $$ public void send(String payload, TransportReceiver receiver) --> Line_8 $$ out.write(payload.getBytes("UTF-8")) [FD]
Line_7 $$ OutputStream out = connection.getOutputStream() --> Line_9 $$ out.close() [FD]
Line_3 $$ HttpURLConnection connection = null --> Line_10 $$ int status = connection.getResponseCode() [FD]
Line_5 $$ connection = (HttpURLConnection) url.openConnection() --> Line_10 $$ int status = connection.getResponseCode() [FD]
Line_10 $$ int status = connection.getResponseCode() --> Line_11 $$ if (status != HttpURLConnection.HTTP_OK) [FD]
Line_11 $$ if (status != HttpURLConnection.HTTP_OK) --> Line_12 $$ ServerFailure failure = new ServerFailure(status + " " + connection.getResponseMessage()) [CD]
Line_3 $$ HttpURLConnection connection = null --> Line_12 $$ ServerFailure failure = new ServerFailure(status + " " + connection.getResponseMessage()) [FD]
Line_5 $$ connection = (HttpURLConnection) url.openConnection() --> Line_12 $$ ServerFailure failure = new ServerFailure(status + " " + connection.getResponseMessage()) [FD]
Line_11 $$ if (status != HttpURLConnection.HTTP_OK) --> Line_13 $$ receiver.onTransportFailure(failure) [CD]
Line_2 $$ public void send(String payload, TransportReceiver receiver) --> Line_13 $$ receiver.onTransportFailure(failure) [FD]
Line_12 $$ ServerFailure failure = new ServerFailure(status + " " + connection.getResponseMessage()) --> Line_13 $$ receiver.onTransportFailure(failure) [FD]
Line_11 $$ if (status != HttpURLConnection.HTTP_OK) --> Line_14 $$ return [CD]
Line_3 $$ HttpURLConnection connection = null --> Line_16 $$ List<String> cookieHeaders = connection.getHeaderFields().get("Set-Cookie") [FD]
Line_5 $$ connection = (HttpURLConnection) url.openConnection() --> Line_16 $$ List<String> cookieHeaders = connection.getHeaderFields().get("Set-Cookie") [FD]
Line_16 $$ List<String> cookieHeaders = connection.getHeaderFields().get("Set-Cookie") --> Line_17 $$ if (cookieHeaders != null) [FD]
Line_18 $$ for (String header : cookieHeaders) --> Line_20 $$ JSONObject cookie = Cookie.toJSONObject(header) [FD]
Line_20 $$ JSONObject cookie = Cookie.toJSONObject(header) --> Line_21 $$ String name = cookie.getString("name") [FD]
Line_20 $$ JSONObject cookie = Cookie.toJSONObject(header) --> Line_22 $$ String value = cookie.getString("value") [FD]
Line_20 $$ JSONObject cookie = Cookie.toJSONObject(header) --> Line_23 $$ String domain = cookie.optString("Domain") [FD]
Line_23 $$ String domain = cookie.optString("Domain") --> Line_24 $$ if (domain == null || url.getHost().endsWith(domain)) [FD]
Line_24 $$ if (domain == null || url.getHost().endsWith(domain)) --> Line_25 $$ String path = cookie.optString("Path") [CD]
Line_20 $$ JSONObject cookie = Cookie.toJSONObject(header) --> Line_25 $$ String path = cookie.optString("Path") [FD]
Line_24 $$ if (domain == null || url.getHost().endsWith(domain)) --> Line_26 $$ if (path == null || url.getPath().startsWith(path)) [CD]
Line_25 $$ String path = cookie.optString("Path") --> Line_26 $$ if (path == null || url.getPath().startsWith(path)) [FD]
Line_26 $$ if (path == null || url.getPath().startsWith(path)) --> Line_27 $$ cookies.put(name, value) [CD]
Line_21 $$ String name = cookie.getString("name") --> Line_27 $$ cookies.put(name, value) [FD]
Line_22 $$ String value = cookie.getString("value") --> Line_27 $$ cookies.put(name, value) [FD]
Line_3 $$ HttpURLConnection connection = null --> Line_34 $$ String encoding = connection.getContentEncoding() [FD]
Line_5 $$ connection = (HttpURLConnection) url.openConnection() --> Line_34 $$ String encoding = connection.getContentEncoding() [FD]
Line_3 $$ HttpURLConnection connection = null --> Line_35 $$ InputStream in = connection.getInputStream() [FD]
Line_5 $$ connection = (HttpURLConnection) url.openConnection() --> Line_35 $$ InputStream in = connection.getInputStream() [FD]
Line_34 $$ String encoding = connection.getContentEncoding() --> Line_36 $$ if ("gzip".equalsIgnoreCase(encoding)) [FD]
Line_36 $$ if ("gzip".equalsIgnoreCase(encoding)) --> Line_37 $$ in = new GZIPInputStream(in) [CD]
Line_35 $$ InputStream in = connection.getInputStream() --> Line_37 $$ in = new GZIPInputStream(in) [FD]
Line_36 $$ if ("gzip".equalsIgnoreCase(encoding)) --> Line_38 $$ if ("deflate".equalsIgnoreCase(encoding)) [CD]
Line_34 $$ String encoding = connection.getContentEncoding() --> Line_38 $$ if ("deflate".equalsIgnoreCase(encoding)) [FD]
Line_38 $$ if ("deflate".equalsIgnoreCase(encoding)) --> Line_39 $$ in = new InflaterInputStream(in) [CD]
Line_35 $$ InputStream in = connection.getInputStream() --> Line_39 $$ in = new InflaterInputStream(in) [FD]
Line_37 $$ in = new GZIPInputStream(in) --> Line_39 $$ in = new InflaterInputStream(in) [FD]
Line_38 $$ if ("deflate".equalsIgnoreCase(encoding)) --> Line_40 $$ if (encoding != null) [CD]
Line_34 $$ String encoding = connection.getContentEncoding() --> Line_40 $$ if (encoding != null) [FD]
Line_40 $$ if (encoding != null) --> Line_41 $$ receiver.onTransportFailure(new ServerFailure("Unknown server encoding " + encoding)) [CD]
Line_2 $$ public void send(String payload, TransportReceiver receiver) --> Line_41 $$ receiver.onTransportFailure(new ServerFailure("Unknown server encoding " + encoding)) [FD]
Line_40 $$ if (encoding != null) --> Line_42 $$ return [CD]
Line_35 $$ InputStream in = connection.getInputStream() --> Line_46 $$ int read = in.read(buffer) [FD]
Line_37 $$ in = new GZIPInputStream(in) --> Line_46 $$ int read = in.read(buffer) [FD]
Line_39 $$ in = new InflaterInputStream(in) --> Line_46 $$ int read = in.read(buffer) [FD]
Line_45 $$ byte[] buffer = new byte[4096] --> Line_46 $$ int read = in.read(buffer) [FD]
Line_46 $$ int read = in.read(buffer) --> Line_47 $$ while (read != -1) [FD]
Line_47 $$ while (read != -1) --> Line_48 $$ bytes.write(buffer, 0, read) [CD]
Line_44 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream() --> Line_48 $$ bytes.write(buffer, 0, read) [FD]
Line_45 $$ byte[] buffer = new byte[4096] --> Line_48 $$ bytes.write(buffer, 0, read) [FD]
Line_46 $$ int read = in.read(buffer) --> Line_48 $$ bytes.write(buffer, 0, read) [FD]
Line_47 $$ while (read != -1) --> Line_49 $$ read = in.read(buffer) [CD]
Line_46 $$ int read = in.read(buffer) --> Line_49 $$ read = in.read(buffer) [FD]
Line_35 $$ InputStream in = connection.getInputStream() --> Line_49 $$ read = in.read(buffer) [FD]
Line_37 $$ in = new GZIPInputStream(in) --> Line_49 $$ read = in.read(buffer) [FD]
Line_39 $$ in = new InflaterInputStream(in) --> Line_49 $$ read = in.read(buffer) [FD]
Line_45 $$ byte[] buffer = new byte[4096] --> Line_49 $$ read = in.read(buffer) [FD]
Line_35 $$ InputStream in = connection.getInputStream() --> Line_51 $$ in.close() [FD]
Line_37 $$ in = new GZIPInputStream(in) --> Line_51 $$ in.close() [FD]
Line_39 $$ in = new InflaterInputStream(in) --> Line_51 $$ in.close() [FD]
Line_44 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream() --> Line_52 $$ String received = new String(bytes.toByteArray(), "UTF-8") [FD]
Line_2 $$ public void send(String payload, TransportReceiver receiver) --> Line_53 $$ receiver.onTransportSuccess(received) [FD]
Line_52 $$ String received = new String(bytes.toByteArray(), "UTF-8") --> Line_53 $$ receiver.onTransportSuccess(received) [FD]
Line_2 $$ public void send(String payload, TransportReceiver receiver) --> Line_56 $$ receiver.onTransportFailure(failure) [FD]
Line_12 $$ ServerFailure failure = new ServerFailure(status + " " + connection.getResponseMessage()) --> Line_56 $$ receiver.onTransportFailure(failure) [FD]
Line_3 $$ HttpURLConnection connection = null --> Line_58 $$ if (connection != null) [FD]
Line_5 $$ connection = (HttpURLConnection) url.openConnection() --> Line_58 $$ if (connection != null) [FD]
Line_58 $$ if (connection != null) --> Line_59 $$ connection.disconnect() [CD]
Line_3 $$ HttpURLConnection connection = null --> Line_59 $$ connection.disconnect() [FD]
Line_5 $$ connection = (HttpURLConnection) url.openConnection() --> Line_59 $$ connection.disconnect() [FD]
Line_49 $$ read = in.read(buffer) --> Line_47 $$ while (read != -1) [FD]
Line_49 $$ read = in.read(buffer) --> Line_48 $$ bytes.write(buffer, 0, read) [FD]
