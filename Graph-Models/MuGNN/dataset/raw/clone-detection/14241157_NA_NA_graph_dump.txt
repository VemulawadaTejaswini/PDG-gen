Line_2 $$ public Representation getRepresentation(Variant variant) --> Line_3 $$ Representation representation = null [CD]
Line_2 $$ public Representation getRepresentation(Variant variant) --> Line_4 $$ MediaType requestMediaType = variant.getMediaType() [CD]
Line_2 $$ public Representation getRepresentation(Variant variant) --> Line_4 $$ MediaType requestMediaType = variant.getMediaType() [FD]
Line_2 $$ public Representation getRepresentation(Variant variant) --> Line_5 $$ if (MediaType.TEXT_XML.equals(requestMediaType)) [CD]
Line_4 $$ MediaType requestMediaType = variant.getMediaType() --> Line_5 $$ if (MediaType.TEXT_XML.equals(requestMediaType)) [FD]
Line_3 $$ Representation representation = null --> Line_7 $$ representation = new DomRepresentation(MediaType.TEXT_XML) [FD]
Line_2 $$ public Representation getRepresentation(Variant variant) --> Line_13 $$ String strJobsUrl = ((ResourceApplication) getApplication()).getJobsUrl() [CD]
Line_2 $$ public Representation getRepresentation(Variant variant) --> Line_14 $$ org.dom4j.Document reportDoc = null [CD]
Line_14 $$ org.dom4j.Document reportDoc = null --> Line_17 $$ reportDoc = reader.read(strJobsUrl + "/" + strJobId + "/report.xml") [FD]
Line_16 $$ SAXReader reader = new SAXReader() --> Line_17 $$ reportDoc = reader.read(strJobsUrl + "/" + strJobId + "/report.xml") [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_20 $$ log.debug(strErrMsg) [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_21 $$ Representation rep = SetRepositoryMessage(Status.CLIENT_ERROR_NOT_FOUND, null, "JobNotFound", strErrMsg, null) [FD]
Line_2 $$ public Representation getRepresentation(Variant variant) --> Line_24 $$ if (MediaType.TEXT_XML.equals(requestMediaType)) [CD]
Line_4 $$ MediaType requestMediaType = variant.getMediaType() --> Line_24 $$ if (MediaType.TEXT_XML.equals(requestMediaType)) [FD]
Line_24 $$ if (MediaType.TEXT_XML.equals(requestMediaType)) --> Line_25 $$ log.debug("XML Media Type requested") [CD]
Line_14 $$ org.dom4j.Document reportDoc = null --> Line_27 $$ reportDoc.removeProcessingInstruction("xml-stylesheet") [FD]
Line_17 $$ reportDoc = reader.read(strJobsUrl + "/" + strJobId + "/report.xml") --> Line_27 $$ reportDoc.removeProcessingInstruction("xml-stylesheet") [FD]
Line_28 $$ DOMWriter writer = new DOMWriter() --> Line_29 $$ Document doc = writer.write(reportDoc) [FD]
Line_14 $$ org.dom4j.Document reportDoc = null --> Line_29 $$ Document doc = writer.write(reportDoc) [FD]
Line_17 $$ reportDoc = reader.read(strJobsUrl + "/" + strJobId + "/report.xml") --> Line_29 $$ Document doc = writer.write(reportDoc) [FD]
Line_29 $$ Document doc = writer.write(reportDoc) --> Line_30 $$ doc.normalizeDocument() [FD]
Line_29 $$ Document doc = writer.write(reportDoc) --> Line_31 $$ ((DomRepresentation) representation).setDocument(doc) [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_35 $$ log.debug(strErrMsg) [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_36 $$ Representation rep = SetRepositoryMessage(Status.CLIENT_ERROR_CONFLICT, null, "ClientConflict", strErrMsg, null) [FD]
Line_24 $$ if (MediaType.TEXT_XML.equals(requestMediaType)) --> Line_39 $$ if (MediaType.TEXT_HTML.equals(requestMediaType)) [CD]
Line_4 $$ MediaType requestMediaType = variant.getMediaType() --> Line_39 $$ if (MediaType.TEXT_HTML.equals(requestMediaType)) [FD]
Line_39 $$ if (MediaType.TEXT_HTML.equals(requestMediaType)) --> Line_40 $$ log.debug("HTML Media Type requested") [CD]
Line_14 $$ org.dom4j.Document reportDoc = null --> Line_42 $$ ProcessingInstruction pi = reportDoc.processingInstruction("xml-stylesheet") [FD]
Line_17 $$ reportDoc = reader.read(strJobsUrl + "/" + strJobId + "/report.xml") --> Line_42 $$ ProcessingInstruction pi = reportDoc.processingInstruction("xml-stylesheet") [FD]
Line_42 $$ ProcessingInstruction pi = reportDoc.processingInstruction("xml-stylesheet") --> Line_43 $$ if (pi != null) [FD]
Line_43 $$ if (pi != null) --> Line_44 $$ String strXslHref = pi.getValue("href") [CD]
Line_42 $$ ProcessingInstruction pi = reportDoc.processingInstruction("xml-stylesheet") --> Line_44 $$ String strXslHref = pi.getValue("href") [FD]
Line_43 $$ if (pi != null) --> Line_45 $$ URL url = new URL(strXslHref) [CD]
Line_43 $$ if (pi != null) --> Line_46 $$ XSLTransformer reportDocTransformer = new XSLTransformer() [CD]
Line_43 $$ if (pi != null) --> Line_47 $$ log.debug("constructed the reportDocTransformer") [CD]
Line_43 $$ if (pi != null) --> Line_48 $$ reportDoc = reportDocTransformer.transform(reportDoc, url.openStream()) [CD]
Line_14 $$ org.dom4j.Document reportDoc = null --> Line_48 $$ reportDoc = reportDocTransformer.transform(reportDoc, url.openStream()) [FD]
Line_17 $$ reportDoc = reader.read(strJobsUrl + "/" + strJobId + "/report.xml") --> Line_48 $$ reportDoc = reportDocTransformer.transform(reportDoc, url.openStream()) [FD]
Line_46 $$ XSLTransformer reportDocTransformer = new XSLTransformer() --> Line_48 $$ reportDoc = reportDocTransformer.transform(reportDoc, url.openStream()) [FD]
Line_45 $$ URL url = new URL(strXslHref) --> Line_48 $$ reportDoc = reportDocTransformer.transform(reportDoc, url.openStream()) [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_52 $$ log.debug(strErrMsg) [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_53 $$ Representation rep = SetRepositoryMessage(Status.SERVER_ERROR_INTERNAL, null, "InternalError", strErrMsg, null) [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_57 $$ log.debug(strErrMsg) [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_58 $$ Representation rep = SetRepositoryMessage(Status.SERVER_ERROR_INTERNAL, null, "InternalError", strErrMsg, null) [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_62 $$ log.debug(strErrMsg) [FD]
Line_19 $$ String strErrMsg = "Unable to find job, " + strJobId + ": " + e.getMessage() --> Line_63 $$ Representation rep = SetRepositoryMessage(Status.SERVER_ERROR_INTERNAL, null, "InternalError", strErrMsg, null) [FD]
Line_39 $$ if (MediaType.TEXT_HTML.equals(requestMediaType)) --> Line_66 $$ representation = new StringRepresentation(reportDoc.asXML(), MediaType.TEXT_HTML) [CD]
Line_3 $$ Representation representation = null --> Line_66 $$ representation = new StringRepresentation(reportDoc.asXML(), MediaType.TEXT_HTML) [FD]
Line_7 $$ representation = new DomRepresentation(MediaType.TEXT_XML) --> Line_66 $$ representation = new StringRepresentation(reportDoc.asXML(), MediaType.TEXT_HTML) [FD]
Line_14 $$ org.dom4j.Document reportDoc = null --> Line_66 $$ representation = new StringRepresentation(reportDoc.asXML(), MediaType.TEXT_HTML) [FD]
Line_17 $$ reportDoc = reader.read(strJobsUrl + "/" + strJobId + "/report.xml") --> Line_66 $$ representation = new StringRepresentation(reportDoc.asXML(), MediaType.TEXT_HTML) [FD]
Line_48 $$ reportDoc = reportDocTransformer.transform(reportDoc, url.openStream()) --> Line_66 $$ representation = new StringRepresentation(reportDoc.asXML(), MediaType.TEXT_HTML) [FD]
Line_39 $$ if (MediaType.TEXT_HTML.equals(requestMediaType)) --> Line_67 $$ return representation [CD]
Line_2 $$ public Representation getRepresentation(Variant variant) --> Line_69 $$ return null [CD]
