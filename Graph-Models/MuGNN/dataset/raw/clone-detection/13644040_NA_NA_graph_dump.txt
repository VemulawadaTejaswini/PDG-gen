Line_2 $$ public static void main(String[] args) throws Exception --> Line_3 $$ String layerName = args[0] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_4 $$ String layerDescription = args[1] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_5 $$ String units = args[2] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_6 $$ String rawDataDirPath = args[3] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_7 $$ String processDirPath = args[4] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_8 $$ String divaDirPath = args[5] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_9 $$ String legendDirPath = args[6] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_10 $$ String geotiffDirPath = args[7] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_11 $$ String dbJdbcUrl = args[8] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_12 $$ String dbUsername = args[9] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_13 $$ String dbPassword = args[10] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_14 $$ String geoserverUsername = args[11] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_15 $$ String geoserverPassword = args[12] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_16 $$ File rawDataDir = new File(rawDataDirPath) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_17 $$ if (!rawDataDir.exists() || !rawDataDir.isDirectory()) [CD]
Line_16 $$ File rawDataDir = new File(rawDataDirPath) --> Line_17 $$ if (!rawDataDir.exists() || !rawDataDir.isDirectory()) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_20 $$ File processDir = new File(processDirPath) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_21 $$ if (!processDir.exists() || !processDir.isDirectory()) [CD]
Line_20 $$ File processDir = new File(processDirPath) --> Line_21 $$ if (!processDir.exists() || !processDir.isDirectory()) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_24 $$ File divaDir = new File(divaDirPath) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_25 $$ if (!divaDir.exists() || !divaDir.isDirectory()) [CD]
Line_24 $$ File divaDir = new File(divaDirPath) --> Line_25 $$ if (!divaDir.exists() || !divaDir.isDirectory()) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_28 $$ File legendDir = new File(legendDirPath) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_29 $$ if (!legendDir.exists() || !legendDir.isDirectory()) [CD]
Line_28 $$ File legendDir = new File(legendDirPath) --> Line_29 $$ if (!legendDir.exists() || !legendDir.isDirectory()) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_32 $$ File geotiffDir = new File(geotiffDirPath) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_33 $$ if (!geotiffDir.exists() || !geotiffDir.isDirectory()) [CD]
Line_32 $$ File geotiffDir = new File(geotiffDirPath) --> Line_33 $$ if (!geotiffDir.exists() || !geotiffDir.isDirectory()) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_36 $$ System.out.println("Beginning environmetal load") [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_37 $$ System.out.println("Connecting to database") [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_38 $$ Class.forName("org.postgresql.Driver") [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_39 $$ Properties props = new Properties() [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_40 $$ props.setProperty("user", dbUsername) [CD]
Line_39 $$ Properties props = new Properties() --> Line_40 $$ props.setProperty("user", dbUsername) [FD]
Line_12 $$ String dbUsername = args[9] --> Line_40 $$ props.setProperty("user", dbUsername) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_41 $$ props.setProperty("password", dbPassword) [CD]
Line_39 $$ Properties props = new Properties() --> Line_41 $$ props.setProperty("password", dbPassword) [FD]
Line_13 $$ String dbPassword = args[10] --> Line_41 $$ props.setProperty("password", dbPassword) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_42 $$ Connection conn = DriverManager.getConnection(dbJdbcUrl, props) [CD]
Line_11 $$ String dbJdbcUrl = args[8] --> Line_42 $$ Connection conn = DriverManager.getConnection(dbJdbcUrl, props) [FD]
Line_39 $$ Properties props = new Properties() --> Line_42 $$ Connection conn = DriverManager.getConnection(dbJdbcUrl, props) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_43 $$ conn.setAutoCommit(false) [CD]
Line_42 $$ Connection conn = DriverManager.getConnection(dbJdbcUrl, props) --> Line_43 $$ conn.setAutoCommit(false) [FD]
Line_45 $$ File layerProcessDir = new File(processDir, layerName) --> Line_46 $$ layerProcessDir.mkdir() [FD]
Line_48 $$ File hdrFile = new File(rawDataDir, "hdr.adf") --> Line_49 $$ if (!hdrFile.exists()) [FD]
Line_48 $$ File hdrFile = new File(rawDataDir, "hdr.adf") --> Line_53 $$ Process procGdalWarp = Runtime.getRuntime().exec(new String[] [FD]
Line_52 $$ File bilFile = new File(layerProcessDir, layerName + ".bil") --> Line_53 $$ Process procGdalWarp = Runtime.getRuntime().exec(new String[] [FD]
Line_53 $$ Process procGdalWarp = Runtime.getRuntime().exec(new String[] --> Line_54 $$ int gdalWarpReturnVal = procGdalWarp.waitFor() [FD]
Line_54 $$ int gdalWarpReturnVal = procGdalWarp.waitFor() --> Line_55 $$ if (gdalWarpReturnVal != 0) [FD]
Line_55 $$ if (gdalWarpReturnVal != 0) --> Line_56 $$ String gdalWarpErrorOutput = IOUtils.toString(procGdalWarp.getErrorStream()) [CD]
Line_53 $$ Process procGdalWarp = Runtime.getRuntime().exec(new String[] --> Line_56 $$ String gdalWarpErrorOutput = IOUtils.toString(procGdalWarp.getErrorStream()) [FD]
Line_5 $$ String units = args[2] --> Line_60 $$ boolean bil2DivaSuccess = Bil2diva.bil2diva(layerProcessDir.getAbsolutePath() + File.separator + layerName, divaDir.getAbsolutePath() + File.separator + layerName, units) [FD]
Line_45 $$ File layerProcessDir = new File(processDir, layerName) --> Line_60 $$ boolean bil2DivaSuccess = Bil2diva.bil2diva(layerProcessDir.getAbsolutePath() + File.separator + layerName, divaDir.getAbsolutePath() + File.separator + layerName, units) [FD]
Line_24 $$ File divaDir = new File(divaDirPath) --> Line_60 $$ boolean bil2DivaSuccess = Bil2diva.bil2diva(layerProcessDir.getAbsolutePath() + File.separator + layerName, divaDir.getAbsolutePath() + File.separator + layerName, units) [FD]
Line_60 $$ boolean bil2DivaSuccess = Bil2diva.bil2diva(layerProcessDir.getAbsolutePath() + File.separator + layerName, divaDir.getAbsolutePath() + File.separator + layerName, units) --> Line_61 $$ if (!bil2DivaSuccess) [FD]
Line_24 $$ File divaDir = new File(divaDirPath) --> Line_65 $$ boolean gridLegendSuccess = GridLegend.generateGridLegend(divaDir.getAbsolutePath() + File.separator + layerName, legendDir.getAbsolutePath() + File.separator + layerName, 1, false) [FD]
Line_28 $$ File legendDir = new File(legendDirPath) --> Line_65 $$ boolean gridLegendSuccess = GridLegend.generateGridLegend(divaDir.getAbsolutePath() + File.separator + layerName, legendDir.getAbsolutePath() + File.separator + layerName, 1, false) [FD]
Line_65 $$ boolean gridLegendSuccess = GridLegend.generateGridLegend(divaDir.getAbsolutePath() + File.separator + layerName, legendDir.getAbsolutePath() + File.separator + layerName, 1, false) --> Line_66 $$ if (!gridLegendSuccess) [FD]
Line_52 $$ File bilFile = new File(layerProcessDir, layerName + ".bil") --> Line_71 $$ Process procGdalTranslate = Runtime.getRuntime().exec(new String[] [FD]
Line_70 $$ File geotiffFile = new File(geotiffDir, layerName + ".tif") --> Line_71 $$ Process procGdalTranslate = Runtime.getRuntime().exec(new String[] [FD]
Line_71 $$ Process procGdalTranslate = Runtime.getRuntime().exec(new String[] --> Line_72 $$ int gdalTranslateReturnVal = procGdalTranslate.waitFor() [FD]
Line_72 $$ int gdalTranslateReturnVal = procGdalTranslate.waitFor() --> Line_73 $$ if (gdalTranslateReturnVal != 0) [FD]
Line_73 $$ if (gdalTranslateReturnVal != 0) --> Line_74 $$ String gdalTranslateErrorOutput = IOUtils.toString(procGdalTranslate.getErrorStream()) [CD]
Line_71 $$ Process procGdalTranslate = Runtime.getRuntime().exec(new String[] --> Line_74 $$ String gdalTranslateErrorOutput = IOUtils.toString(procGdalTranslate.getErrorStream()) [FD]
Line_78 $$ File divaGrd = new File(divaDir, layerName + ".grd") --> Line_79 $$ if (!divaGrd.exists()) [FD]
Line_78 $$ File divaGrd = new File(divaDir, layerName + ".grd") --> Line_80 $$ throw new RuntimeException("Could not locate diva .grd file: " + divaGrd.toString()) [FD]
Line_78 $$ File divaGrd = new File(divaDir, layerName + ".grd") --> Line_82 $$ String strDivaGrd = FileUtils.readFileToString(divaGrd) [FD]
Line_82 $$ String strDivaGrd = FileUtils.readFileToString(divaGrd) --> Line_83 $$ float minValue = Float.parseFloat(matchPattern(strDivaGrd, "^MinValue=(.+)$")) [FD]
Line_82 $$ String strDivaGrd = FileUtils.readFileToString(divaGrd) --> Line_84 $$ float maxValue = Float.parseFloat(matchPattern(strDivaGrd, "^MaxValue=(.+)$")) [FD]
Line_82 $$ String strDivaGrd = FileUtils.readFileToString(divaGrd) --> Line_85 $$ float minLatitude = Float.parseFloat(matchPattern(strDivaGrd, "^MinY=(.+)$")) [FD]
Line_82 $$ String strDivaGrd = FileUtils.readFileToString(divaGrd) --> Line_86 $$ float maxLatitude = Float.parseFloat(matchPattern(strDivaGrd, "^MaxY=(.+)$")) [FD]
Line_82 $$ String strDivaGrd = FileUtils.readFileToString(divaGrd) --> Line_87 $$ float minLongitude = Float.parseFloat(matchPattern(strDivaGrd, "^MinX=(.+)$")) [FD]
Line_82 $$ String strDivaGrd = FileUtils.readFileToString(divaGrd) --> Line_88 $$ float maxLongitude = Float.parseFloat(matchPattern(strDivaGrd, "^MaxX=(.+)$")) [FD]
Line_42 $$ Connection conn = DriverManager.getConnection(dbJdbcUrl, props) --> Line_90 $$ Statement st = conn.createStatement() [FD]
Line_90 $$ Statement st = conn.createStatement() --> Line_91 $$ ResultSet rs = st.executeQuery("SELECT MAX(id) from layers") [FD]
Line_91 $$ ResultSet rs = st.executeQuery("SELECT MAX(id) from layers") --> Line_92 $$ rs.next() [FD]
Line_91 $$ ResultSet rs = st.executeQuery("SELECT MAX(id) from layers") --> Line_94 $$ String idAsString = rs.getString(1) [FD]
Line_94 $$ String idAsString = rs.getString(1) --> Line_95 $$ if (idAsString != null) [FD]
Line_95 $$ if (idAsString != null) --> Line_96 $$ id = Integer.parseInt(idAsString) [CD]
Line_93 $$ int id = 1 --> Line_96 $$ id = Integer.parseInt(idAsString) [FD]
Line_94 $$ String idAsString = rs.getString(1) --> Line_96 $$ id = Integer.parseInt(idAsString) [FD]
Line_95 $$ if (idAsString != null) --> Line_97 $$ id++ [CD]
Line_93 $$ int id = 1 --> Line_97 $$ id++ [FD]
Line_96 $$ id = Integer.parseInt(idAsString) --> Line_97 $$ id++ [FD]
Line_3 $$ String layerName = args[0] --> Line_99 $$ String displayPath = MessageFormat.format(GEOSERVER_QUERY_TEMPLATE, layerName) [FD]
Line_42 $$ Connection conn = DriverManager.getConnection(dbJdbcUrl, props) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_93 $$ int id = 1 --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_96 $$ id = Integer.parseInt(idAsString) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_4 $$ String layerDescription = args[1] --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_3 $$ String layerName = args[0] --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_99 $$ String displayPath = MessageFormat.format(GEOSERVER_QUERY_TEMPLATE, layerName) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_85 $$ float minLatitude = Float.parseFloat(matchPattern(strDivaGrd, "^MinY=(.+)$")) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_87 $$ float minLongitude = Float.parseFloat(matchPattern(strDivaGrd, "^MinX=(.+)$")) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_86 $$ float maxLatitude = Float.parseFloat(matchPattern(strDivaGrd, "^MaxY=(.+)$")) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_88 $$ float maxLongitude = Float.parseFloat(matchPattern(strDivaGrd, "^MaxX=(.+)$")) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_83 $$ float minValue = Float.parseFloat(matchPattern(strDivaGrd, "^MinValue=(.+)$")) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_84 $$ float maxValue = Float.parseFloat(matchPattern(strDivaGrd, "^MaxValue=(.+)$")) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_5 $$ String units = args[2] --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_24 $$ File divaDir = new File(divaDirPath) --> Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) [FD]
Line_101 $$ PreparedStatement createLayersStatement = createLayersInsert(conn, id, layerDescription, divaDir.getAbsolutePath(), layerName, displayPath, minLatitude, minLongitude, maxLatitude, maxLongitude, minValue, maxValue, units) --> Line_102 $$ createLayersStatement.execute() [FD]
Line_42 $$ Connection conn = DriverManager.getConnection(dbJdbcUrl, props) --> Line_104 $$ PreparedStatement createFieldsStatement = createFieldsInsert(conn, id, layerName, layerDescription) [FD]
Line_93 $$ int id = 1 --> Line_104 $$ PreparedStatement createFieldsStatement = createFieldsInsert(conn, id, layerName, layerDescription) [FD]
Line_96 $$ id = Integer.parseInt(idAsString) --> Line_104 $$ PreparedStatement createFieldsStatement = createFieldsInsert(conn, id, layerName, layerDescription) [FD]
Line_3 $$ String layerName = args[0] --> Line_104 $$ PreparedStatement createFieldsStatement = createFieldsInsert(conn, id, layerName, layerDescription) [FD]
Line_4 $$ String layerDescription = args[1] --> Line_104 $$ PreparedStatement createFieldsStatement = createFieldsInsert(conn, id, layerName, layerDescription) [FD]
Line_104 $$ PreparedStatement createFieldsStatement = createFieldsInsert(conn, id, layerName, layerDescription) --> Line_105 $$ createFieldsStatement.execute() [FD]
Line_106 $$ DefaultHttpClient httpClient = new DefaultHttpClient() --> Line_107 $$ httpClient.getCredentialsProvider().setCredentials(new AuthScope("localhost", 8082), new UsernamePasswordCredentials(geoserverUsername, geoserverPassword)) [FD]
Line_3 $$ String layerName = args[0] --> Line_109 $$ HttpPut createLayerPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/workspaces/ALA/coveragestores/%s/external.geotiff", layerName)) [FD]
Line_109 $$ HttpPut createLayerPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/workspaces/ALA/coveragestores/%s/external.geotiff", layerName)) --> Line_110 $$ createLayerPut.setHeader("Content-type", "text/plain") [FD]
Line_109 $$ HttpPut createLayerPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/workspaces/ALA/coveragestores/%s/external.geotiff", layerName)) --> Line_111 $$ createLayerPut.setEntity(new StringEntity(geotiffFile.toURI().toURL().toString())) [FD]
Line_70 $$ File geotiffFile = new File(geotiffDir, layerName + ".tif") --> Line_111 $$ createLayerPut.setEntity(new StringEntity(geotiffFile.toURI().toURL().toString())) [FD]
Line_106 $$ DefaultHttpClient httpClient = new DefaultHttpClient() --> Line_112 $$ HttpResponse createLayerResponse = httpClient.execute(createLayerPut) [FD]
Line_109 $$ HttpPut createLayerPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/workspaces/ALA/coveragestores/%s/external.geotiff", layerName)) --> Line_112 $$ HttpResponse createLayerResponse = httpClient.execute(createLayerPut) [FD]
Line_112 $$ HttpResponse createLayerResponse = httpClient.execute(createLayerPut) --> Line_113 $$ if (createLayerResponse.getStatusLine().getStatusCode() != 200) [FD]
Line_112 $$ HttpResponse createLayerResponse = httpClient.execute(createLayerPut) --> Line_114 $$ throw new RuntimeException("Error creating layer in geoserver: " + createLayerResponse.toString()) [FD]
Line_112 $$ HttpResponse createLayerResponse = httpClient.execute(createLayerPut) --> Line_116 $$ EntityUtils.consume(createLayerResponse.getEntity()) [FD]
Line_118 $$ HttpPost createStylePost = new HttpPost("http://localhost:8082/geoserver/rest/styles") --> Line_119 $$ createStylePost.setHeader("Content-type", "text/xml") [FD]
Line_118 $$ HttpPost createStylePost = new HttpPost("http://localhost:8082/geoserver/rest/styles") --> Line_120 $$ createStylePost.setEntity(new StringEntity(String.format("<style><name>%s_style</name><filename>%s.sld</filename></style>", layerName, layerName))) [FD]
Line_3 $$ String layerName = args[0] --> Line_120 $$ createStylePost.setEntity(new StringEntity(String.format("<style><name>%s_style</name><filename>%s.sld</filename></style>", layerName, layerName))) [FD]
Line_106 $$ DefaultHttpClient httpClient = new DefaultHttpClient() --> Line_121 $$ HttpResponse createStyleResponse = httpClient.execute(createLayerPut) [FD]
Line_109 $$ HttpPut createLayerPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/workspaces/ALA/coveragestores/%s/external.geotiff", layerName)) --> Line_121 $$ HttpResponse createStyleResponse = httpClient.execute(createLayerPut) [FD]
Line_121 $$ HttpResponse createStyleResponse = httpClient.execute(createLayerPut) --> Line_122 $$ if (createStyleResponse.getStatusLine().getStatusCode() != 201) [FD]
Line_121 $$ HttpResponse createStyleResponse = httpClient.execute(createLayerPut) --> Line_123 $$ throw new RuntimeException("Error creating style in geoserver: " + createStyleResponse.toString()) [FD]
Line_121 $$ HttpResponse createStyleResponse = httpClient.execute(createLayerPut) --> Line_125 $$ EntityUtils.consume(createStyleResponse.getEntity()) [FD]
Line_127 $$ File sldFile = new File(legendDir, layerName + ".sld") --> Line_128 $$ String sldData = FileUtils.readFileToString(sldFile) [FD]
Line_3 $$ String layerName = args[0] --> Line_129 $$ HttpPut uploadSldPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/styles/%s_style", layerName)) [FD]
Line_129 $$ HttpPut uploadSldPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/styles/%s_style", layerName)) --> Line_130 $$ uploadSldPut.setHeader("Content-type", "application/vnd.ogc.sld+xml") [FD]
Line_129 $$ HttpPut uploadSldPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/styles/%s_style", layerName)) --> Line_131 $$ uploadSldPut.setEntity(new StringEntity(sldData)) [FD]
Line_106 $$ DefaultHttpClient httpClient = new DefaultHttpClient() --> Line_132 $$ HttpResponse uploadSldResponse = httpClient.execute(uploadSldPut) [FD]
Line_129 $$ HttpPut uploadSldPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/styles/%s_style", layerName)) --> Line_132 $$ HttpResponse uploadSldResponse = httpClient.execute(uploadSldPut) [FD]
Line_132 $$ HttpResponse uploadSldResponse = httpClient.execute(uploadSldPut) --> Line_133 $$ if (uploadSldResponse.getStatusLine().getStatusCode() != 200) [FD]
Line_132 $$ HttpResponse uploadSldResponse = httpClient.execute(uploadSldPut) --> Line_134 $$ throw new RuntimeException("Error uploading sld file geoserver: " + uploadSldResponse.toString()) [FD]
Line_132 $$ HttpResponse uploadSldResponse = httpClient.execute(uploadSldPut) --> Line_136 $$ EntityUtils.consume(uploadSldResponse.getEntity()) [FD]
Line_3 $$ String layerName = args[0] --> Line_138 $$ HttpPut setDefaultStylePut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/layers/ALA:%s", layerName)) [FD]
Line_138 $$ HttpPut setDefaultStylePut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/layers/ALA:%s", layerName)) --> Line_139 $$ setDefaultStylePut.setHeader("Content-type", "text/xml") [FD]
Line_138 $$ HttpPut setDefaultStylePut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/layers/ALA:%s", layerName)) --> Line_140 $$ setDefaultStylePut.setEntity(new StringEntity(String.format("<layer><enabled>true</enabled><defaultStyle><name>%s_style</name></defaultStyle></layer>", layerName))) [FD]
Line_3 $$ String layerName = args[0] --> Line_140 $$ setDefaultStylePut.setEntity(new StringEntity(String.format("<layer><enabled>true</enabled><defaultStyle><name>%s_style</name></defaultStyle></layer>", layerName))) [FD]
Line_106 $$ DefaultHttpClient httpClient = new DefaultHttpClient() --> Line_141 $$ HttpResponse setDefaultStyleResponse = httpClient.execute(createLayerPut) [FD]
Line_109 $$ HttpPut createLayerPut = new HttpPut(String.format("http://localhost:8082/geoserver/rest/workspaces/ALA/coveragestores/%s/external.geotiff", layerName)) --> Line_141 $$ HttpResponse setDefaultStyleResponse = httpClient.execute(createLayerPut) [FD]
Line_141 $$ HttpResponse setDefaultStyleResponse = httpClient.execute(createLayerPut) --> Line_142 $$ if (setDefaultStyleResponse.getStatusLine().getStatusCode() != 200) [FD]
Line_141 $$ HttpResponse setDefaultStyleResponse = httpClient.execute(createLayerPut) --> Line_143 $$ throw new RuntimeException("Setting default style in geoserver: " + setDefaultStyleResponse.toString()) [FD]
Line_141 $$ HttpResponse setDefaultStyleResponse = httpClient.execute(createLayerPut) --> Line_145 $$ EntityUtils.consume(setDefaultStyleResponse.getEntity()) [FD]
Line_42 $$ Connection conn = DriverManager.getConnection(dbJdbcUrl, props) --> Line_146 $$ conn.commit() [FD]
Line_42 $$ Connection conn = DriverManager.getConnection(dbJdbcUrl, props) --> Line_149 $$ conn.rollback() [FD]
