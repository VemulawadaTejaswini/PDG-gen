Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_3 $$ ActionMessages errors = new ActionMessages() [CD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_5 $$ boolean isMultipart = FileUpload.isMultipartContent(request) [FD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_6 $$ Store storeInstance = getStoreInstance(request) [FD]
Line_7 $$ if (isMultipart) --> Line_8 $$ Map fields = new HashMap() [CD]
Line_7 $$ if (isMultipart) --> Line_9 $$ Vector files = new Vector() [CD]
Line_7 $$ if (isMultipart) --> Line_10 $$ List items = diskFileUpload.parseRequest(request) [CD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_10 $$ List items = diskFileUpload.parseRequest(request) [FD]
Line_7 $$ if (isMultipart) --> Line_11 $$ Iterator iter = items.iterator() [CD]
Line_10 $$ List items = diskFileUpload.parseRequest(request) --> Line_11 $$ Iterator iter = items.iterator() [FD]
Line_7 $$ if (isMultipart) --> Line_12 $$ while (iter.hasNext()) [CD]
Line_11 $$ Iterator iter = items.iterator() --> Line_12 $$ while (iter.hasNext()) [FD]
Line_12 $$ while (iter.hasNext()) --> Line_13 $$ FileItem item = (FileItem) iter.next() [CD]
Line_11 $$ Iterator iter = items.iterator() --> Line_13 $$ FileItem item = (FileItem) iter.next() [FD]
Line_12 $$ while (iter.hasNext()) --> Line_14 $$ if (item.isFormField()) [CD]
Line_13 $$ FileItem item = (FileItem) iter.next() --> Line_14 $$ if (item.isFormField()) [FD]
Line_14 $$ if (item.isFormField()) --> Line_15 $$ fields.put(item.getFieldName(), item.getString()) [CD]
Line_8 $$ Map fields = new HashMap() --> Line_15 $$ fields.put(item.getFieldName(), item.getString()) [FD]
Line_13 $$ FileItem item = (FileItem) iter.next() --> Line_15 $$ fields.put(item.getFieldName(), item.getString()) [FD]
Line_14 $$ if (item.isFormField()) --> Line_17 $$ if (!StringUtils.isBlank(item.getName())) [CD]
Line_13 $$ FileItem item = (FileItem) iter.next() --> Line_17 $$ if (!StringUtils.isBlank(item.getName())) [FD]
Line_17 $$ if (!StringUtils.isBlank(item.getName())) --> Line_18 $$ ByteArrayOutputStream baos = null [CD]
Line_18 $$ ByteArrayOutputStream baos = null --> Line_20 $$ baos = new ByteArrayOutputStream() [FD]
Line_18 $$ ByteArrayOutputStream baos = null --> Line_21 $$ IOUtils.copy(item.getInputStream(), baos) [FD]
Line_20 $$ baos = new ByteArrayOutputStream() --> Line_21 $$ IOUtils.copy(item.getInputStream(), baos) [FD]
Line_13 $$ FileItem item = (FileItem) iter.next() --> Line_21 $$ IOUtils.copy(item.getInputStream(), baos) [FD]
Line_22 $$ MailPartObj part = new MailPartObj() --> Line_23 $$ part.setAttachent(baos.toByteArray()) [FD]
Line_18 $$ ByteArrayOutputStream baos = null --> Line_23 $$ part.setAttachent(baos.toByteArray()) [FD]
Line_20 $$ baos = new ByteArrayOutputStream() --> Line_23 $$ part.setAttachent(baos.toByteArray()) [FD]
Line_22 $$ MailPartObj part = new MailPartObj() --> Line_24 $$ part.setContentType(item.getContentType()) [FD]
Line_13 $$ FileItem item = (FileItem) iter.next() --> Line_24 $$ part.setContentType(item.getContentType()) [FD]
Line_22 $$ MailPartObj part = new MailPartObj() --> Line_25 $$ part.setName(item.getName()) [FD]
Line_13 $$ FileItem item = (FileItem) iter.next() --> Line_25 $$ part.setName(item.getName()) [FD]
Line_22 $$ MailPartObj part = new MailPartObj() --> Line_26 $$ part.setSize(item.getSize()) [FD]
Line_13 $$ FileItem item = (FileItem) iter.next() --> Line_26 $$ part.setSize(item.getSize()) [FD]
Line_9 $$ Vector files = new Vector() --> Line_27 $$ files.addElement(part) [FD]
Line_22 $$ MailPartObj part = new MailPartObj() --> Line_27 $$ files.addElement(part) [FD]
Line_18 $$ ByteArrayOutputStream baos = null --> Line_30 $$ IOUtils.closeQuietly(baos) [FD]
Line_20 $$ baos = new ByteArrayOutputStream() --> Line_30 $$ IOUtils.closeQuietly(baos) [FD]
Line_7 $$ if (isMultipart) --> Line_35 $$ if (files.size() > 0) [CD]
Line_9 $$ Vector files = new Vector() --> Line_35 $$ if (files.size() > 0) [FD]
Line_35 $$ if (files.size() > 0) --> Line_36 $$ storeInstance.send(files, 0, Charset.defaultCharset().displayName()) [CD]
Line_6 $$ Store storeInstance = getStoreInstance(request) --> Line_36 $$ storeInstance.send(files, 0, Charset.defaultCharset().displayName()) [FD]
Line_9 $$ Vector files = new Vector() --> Line_36 $$ storeInstance.send(files, 0, Charset.defaultCharset().displayName()) [FD]
Line_7 $$ if (isMultipart) --> Line_39 $$ errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null")) [CD]
Line_3 $$ ActionMessages errors = new ActionMessages() --> Line_39 $$ errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null")) [FD]
Line_7 $$ if (isMultipart) --> Line_40 $$ request.setAttribute("exception", "The form is null") [CD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_40 $$ request.setAttribute("exception", "The form is null") [FD]
Line_7 $$ if (isMultipart) --> Line_41 $$ request.setAttribute("newLocation", null) [CD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_41 $$ request.setAttribute("newLocation", null) [FD]
Line_7 $$ if (isMultipart) --> Line_42 $$ doTrace(request, DLog.ERROR, getClass(), "The form is null") [CD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_42 $$ doTrace(request, DLog.ERROR, getClass(), "The form is null") [FD]
Line_45 $$ String errorMessage = ExceptionUtilities.parseMessage(ex) --> Line_46 $$ if (errorMessage == null) [FD]
Line_46 $$ if (errorMessage == null) --> Line_47 $$ errorMessage = "NullPointerException" [CD]
Line_45 $$ String errorMessage = ExceptionUtilities.parseMessage(ex) --> Line_47 $$ errorMessage = "NullPointerException" [FD]
Line_3 $$ ActionMessages errors = new ActionMessages() --> Line_49 $$ errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage)) [FD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_50 $$ request.setAttribute("exception", errorMessage) [FD]
Line_45 $$ String errorMessage = ExceptionUtilities.parseMessage(ex) --> Line_50 $$ request.setAttribute("exception", errorMessage) [FD]
Line_47 $$ errorMessage = "NullPointerException" --> Line_50 $$ request.setAttribute("exception", errorMessage) [FD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_51 $$ doTrace(request, DLog.ERROR, getClass(), errorMessage) [FD]
Line_45 $$ String errorMessage = ExceptionUtilities.parseMessage(ex) --> Line_51 $$ doTrace(request, DLog.ERROR, getClass(), errorMessage) [FD]
Line_47 $$ errorMessage = "NullPointerException" --> Line_51 $$ doTrace(request, DLog.ERROR, getClass(), errorMessage) [FD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_54 $$ if (errors.isEmpty()) [CD]
Line_3 $$ ActionMessages errors = new ActionMessages() --> Line_54 $$ if (errors.isEmpty()) [FD]
Line_54 $$ if (errors.isEmpty()) --> Line_55 $$ doTrace(request, DLog.INFO, getClass(), "OK") [CD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_55 $$ doTrace(request, DLog.INFO, getClass(), "OK") [FD]
Line_54 $$ if (errors.isEmpty()) --> Line_56 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD) [CD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_56 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD) [FD]
Line_54 $$ if (errors.isEmpty()) --> Line_58 $$ saveErrors(request, errors) [CD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_58 $$ saveErrors(request, errors) [FD]
Line_3 $$ ActionMessages errors = new ActionMessages() --> Line_58 $$ saveErrors(request, errors) [FD]
Line_54 $$ if (errors.isEmpty()) --> Line_59 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD) [CD]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_59 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD) [FD]
