Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_3 $$ String[] command = new String[args.length + 3] [CD]
Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_4 $$ command[0] = this.getCommand() [CD]
Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_5 $$ System.arraycopy(args, 0, command, 1, args.length) [CD]
Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_5 $$ System.arraycopy(args, 0, command, 1, args.length) [FD]
Line_3 $$ String[] command = new String[args.length + 3] --> Line_5 $$ System.arraycopy(args, 0, command, 1, args.length) [FD]
Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_6 $$ command[command.length - 2] = new File(dir, "training-data.libsvm").getPath() [CD]
Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_7 $$ command[command.length - 1] = new File(dir, this.getModelName()).getPath() [CD]
Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_8 $$ Process process = Runtime.getRuntime().exec(command) [CD]
Line_3 $$ String[] command = new String[args.length + 3] --> Line_8 $$ Process process = Runtime.getRuntime().exec(command) [FD]
Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_9 $$ IOUtils.copy(process.getInputStream(), System.out) [CD]
Line_8 $$ Process process = Runtime.getRuntime().exec(command) --> Line_9 $$ IOUtils.copy(process.getInputStream(), System.out) [FD]
Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_10 $$ IOUtils.copy(process.getErrorStream(), System.err) [CD]
Line_8 $$ Process process = Runtime.getRuntime().exec(command) --> Line_10 $$ IOUtils.copy(process.getErrorStream(), System.err) [FD]
Line_2 $$ public void trainClassifier(File dir, String... args) throws Exception --> Line_11 $$ process.waitFor() [CD]
Line_8 $$ Process process = Runtime.getRuntime().exec(command) --> Line_11 $$ process.waitFor() [FD]
