Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_3 $$ EaasyStreet.logTrace(METHOD_IN + className + OUTPUT_METHOD) [CD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_4 $$ super.prepareOutput(req) [CD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_4 $$ super.prepareOutput(req) [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_5 $$ String content = Constants.EMPTY_STRING [CD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_6 $$ String rawContent = null [CD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_7 $$ List parts = null [CD]
Line_9 $$ URL url = new URL(sourceUrl) --> Line_10 $$ BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_11 $$ String line = "" --> Line_13 $$ while ((line = input.readLine()) != null) [FD]
Line_10 $$ BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_13 $$ while ((line = input.readLine()) != null) [FD]
Line_13 $$ while ((line = input.readLine()) != null) --> Line_14 $$ buffer.append(line) [CD]
Line_13 $$ while ((line = input.readLine()) != null) --> Line_14 $$ buffer.append(line) [FD]
Line_12 $$ StringBuffer buffer = new StringBuffer() --> Line_14 $$ buffer.append(line) [FD]
Line_11 $$ String line = "" --> Line_14 $$ buffer.append(line) [FD]
Line_13 $$ while ((line = input.readLine()) != null) --> Line_15 $$ buffer.append(Constants.LF) [CD]
Line_12 $$ StringBuffer buffer = new StringBuffer() --> Line_15 $$ buffer.append(Constants.LF) [FD]
Line_6 $$ String rawContent = null --> Line_17 $$ rawContent = buffer.toString() [FD]
Line_12 $$ StringBuffer buffer = new StringBuffer() --> Line_17 $$ rawContent = buffer.toString() [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_19 $$ req.setAttribute(Constants.RAK_SYSTEM_ACTION, Constants.SYSTEM_ACTION_BACK) [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_20 $$ EaasyStreet.handleSafeEvent(req, new Event(Constants.EAA0012I, new String[] [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_22 $$ req.setAttribute(Constants.RAK_SYSTEM_ACTION, Constants.SYSTEM_ACTION_BACK) [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_23 $$ EaasyStreet.handleSafeEvent(req, new Event(Constants.EAA0012I, new String[] [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_25 $$ if (rawContent != null) [CD]
Line_6 $$ String rawContent = null --> Line_25 $$ if (rawContent != null) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_25 $$ if (rawContent != null) [FD]
Line_25 $$ if (rawContent != null) --> Line_26 $$ if (startDelimiter != null) [CD]
Line_26 $$ if (startDelimiter != null) --> Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) [CD]
Line_7 $$ List parts = null --> Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) [FD]
Line_6 $$ String rawContent = null --> Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) [FD]
Line_26 $$ if (startDelimiter != null) --> Line_28 $$ if (parts != null && parts.size() > 1) [CD]
Line_7 $$ List parts = null --> Line_28 $$ if (parts != null && parts.size() > 1) [FD]
Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) --> Line_28 $$ if (parts != null && parts.size() > 1) [FD]
Line_28 $$ if (parts != null && parts.size() > 1) --> Line_29 $$ rawContent = (String) parts.get(1) [CD]
Line_6 $$ String rawContent = null --> Line_29 $$ rawContent = (String) parts.get(1) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_29 $$ rawContent = (String) parts.get(1) [FD]
Line_7 $$ List parts = null --> Line_29 $$ rawContent = (String) parts.get(1) [FD]
Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) --> Line_29 $$ rawContent = (String) parts.get(1) [FD]
Line_28 $$ if (parts != null && parts.size() > 1) --> Line_30 $$ if (parts.size() > 2) [CD]
Line_7 $$ List parts = null --> Line_30 $$ if (parts.size() > 2) [FD]
Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) --> Line_30 $$ if (parts.size() > 2) [FD]
Line_30 $$ if (parts.size() > 2) --> Line_31 $$ for (int x = 2; x < parts.size(); x++) [CD]
Line_7 $$ List parts = null --> Line_31 $$ for (int x = 2; x < parts.size(); x++) [FD]
Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) --> Line_31 $$ for (int x = 2; x < parts.size(); x++) [FD]
Line_31 $$ for (int x = 2; x < parts.size(); x++) --> Line_32 $$ rawContent += startDelimiter [CD]
Line_6 $$ String rawContent = null --> Line_32 $$ rawContent += startDelimiter [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_32 $$ rawContent += startDelimiter [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_32 $$ rawContent += startDelimiter [FD]
Line_31 $$ for (int x = 2; x < parts.size(); x++) --> Line_33 $$ rawContent += parts.get(x) [CD]
Line_31 $$ for (int x = 2; x < parts.size(); x++) --> Line_33 $$ rawContent += parts.get(x) [FD]
Line_32 $$ rawContent += startDelimiter --> Line_33 $$ rawContent += parts.get(x) [FD]
Line_6 $$ String rawContent = null --> Line_33 $$ rawContent += parts.get(x) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_33 $$ rawContent += parts.get(x) [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_33 $$ rawContent += parts.get(x) [FD]
Line_7 $$ List parts = null --> Line_33 $$ rawContent += parts.get(x) [FD]
Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) --> Line_33 $$ rawContent += parts.get(x) [FD]
Line_28 $$ if (parts != null && parts.size() > 1) --> Line_37 $$ rawContent = null [CD]
Line_32 $$ rawContent += startDelimiter --> Line_37 $$ rawContent = null [FD]
Line_33 $$ rawContent += parts.get(x) --> Line_37 $$ rawContent = null [FD]
Line_6 $$ String rawContent = null --> Line_37 $$ rawContent = null [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_37 $$ rawContent = null [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_37 $$ rawContent = null [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_41 $$ if (rawContent != null) [CD]
Line_32 $$ rawContent += startDelimiter --> Line_41 $$ if (rawContent != null) [FD]
Line_33 $$ rawContent += parts.get(x) --> Line_41 $$ if (rawContent != null) [FD]
Line_6 $$ String rawContent = null --> Line_41 $$ if (rawContent != null) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_41 $$ if (rawContent != null) [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_41 $$ if (rawContent != null) [FD]
Line_37 $$ rawContent = null --> Line_41 $$ if (rawContent != null) [FD]
Line_41 $$ if (rawContent != null) --> Line_42 $$ if (endDelimiter != null) [CD]
Line_42 $$ if (endDelimiter != null) --> Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) [CD]
Line_7 $$ List parts = null --> Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) [FD]
Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) --> Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) [FD]
Line_32 $$ rawContent += startDelimiter --> Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) [FD]
Line_33 $$ rawContent += parts.get(x) --> Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) [FD]
Line_6 $$ String rawContent = null --> Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) [FD]
Line_37 $$ rawContent = null --> Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) [FD]
Line_42 $$ if (endDelimiter != null) --> Line_44 $$ if (parts != null && parts.size() > 0) [CD]
Line_7 $$ List parts = null --> Line_44 $$ if (parts != null && parts.size() > 0) [FD]
Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) --> Line_44 $$ if (parts != null && parts.size() > 0) [FD]
Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) --> Line_44 $$ if (parts != null && parts.size() > 0) [FD]
Line_44 $$ if (parts != null && parts.size() > 0) --> Line_45 $$ rawContent = (String) parts.get(0) [CD]
Line_32 $$ rawContent += startDelimiter --> Line_45 $$ rawContent = (String) parts.get(0) [FD]
Line_33 $$ rawContent += parts.get(x) --> Line_45 $$ rawContent = (String) parts.get(0) [FD]
Line_6 $$ String rawContent = null --> Line_45 $$ rawContent = (String) parts.get(0) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_45 $$ rawContent = (String) parts.get(0) [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_45 $$ rawContent = (String) parts.get(0) [FD]
Line_37 $$ rawContent = null --> Line_45 $$ rawContent = (String) parts.get(0) [FD]
Line_7 $$ List parts = null --> Line_45 $$ rawContent = (String) parts.get(0) [FD]
Line_27 $$ parts = StringUtils.split(rawContent, startDelimiter) --> Line_45 $$ rawContent = (String) parts.get(0) [FD]
Line_43 $$ parts = StringUtils.split(rawContent, endDelimiter) --> Line_45 $$ rawContent = (String) parts.get(0) [FD]
Line_44 $$ if (parts != null && parts.size() > 0) --> Line_47 $$ rawContent = null [CD]
Line_32 $$ rawContent += startDelimiter --> Line_47 $$ rawContent = null [FD]
Line_33 $$ rawContent += parts.get(x) --> Line_47 $$ rawContent = null [FD]
Line_6 $$ String rawContent = null --> Line_47 $$ rawContent = null [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_47 $$ rawContent = null [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_47 $$ rawContent = null [FD]
Line_37 $$ rawContent = null --> Line_47 $$ rawContent = null [FD]
Line_45 $$ rawContent = (String) parts.get(0) --> Line_47 $$ rawContent = null [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_51 $$ if (rawContent != null) [CD]
Line_32 $$ rawContent += startDelimiter --> Line_51 $$ if (rawContent != null) [FD]
Line_33 $$ rawContent += parts.get(x) --> Line_51 $$ if (rawContent != null) [FD]
Line_6 $$ String rawContent = null --> Line_51 $$ if (rawContent != null) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_51 $$ if (rawContent != null) [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_51 $$ if (rawContent != null) [FD]
Line_37 $$ rawContent = null --> Line_51 $$ if (rawContent != null) [FD]
Line_45 $$ rawContent = (String) parts.get(0) --> Line_51 $$ if (rawContent != null) [FD]
Line_47 $$ rawContent = null --> Line_51 $$ if (rawContent != null) [FD]
Line_51 $$ if (rawContent != null) --> Line_52 $$ if (replacementValues != null && !replacementValues.isEmpty()) [CD]
Line_52 $$ if (replacementValues != null && !replacementValues.isEmpty()) --> Line_53 $$ for (int x = 0; x < replacementValues.size(); x++) [CD]
Line_31 $$ for (int x = 2; x < parts.size(); x++) --> Line_53 $$ for (int x = 0; x < replacementValues.size(); x++) [FD]
Line_53 $$ for (int x = 0; x < replacementValues.size(); x++) --> Line_54 $$ LabelValueBean bean = (LabelValueBean) replacementValues.get(x) [CD]
Line_53 $$ for (int x = 0; x < replacementValues.size(); x++) --> Line_54 $$ LabelValueBean bean = (LabelValueBean) replacementValues.get(x) [FD]
Line_31 $$ for (int x = 2; x < parts.size(); x++) --> Line_54 $$ LabelValueBean bean = (LabelValueBean) replacementValues.get(x) [FD]
Line_53 $$ for (int x = 0; x < replacementValues.size(); x++) --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [CD]
Line_32 $$ rawContent += startDelimiter --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [FD]
Line_33 $$ rawContent += parts.get(x) --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [FD]
Line_6 $$ String rawContent = null --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [FD]
Line_37 $$ rawContent = null --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [FD]
Line_45 $$ rawContent = (String) parts.get(0) --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [FD]
Line_47 $$ rawContent = null --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [FD]
Line_54 $$ LabelValueBean bean = (LabelValueBean) replacementValues.get(x) --> Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_59 $$ if (rawContent != null) [CD]
Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) --> Line_59 $$ if (rawContent != null) [FD]
Line_32 $$ rawContent += startDelimiter --> Line_59 $$ if (rawContent != null) [FD]
Line_33 $$ rawContent += parts.get(x) --> Line_59 $$ if (rawContent != null) [FD]
Line_6 $$ String rawContent = null --> Line_59 $$ if (rawContent != null) [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_59 $$ if (rawContent != null) [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_59 $$ if (rawContent != null) [FD]
Line_37 $$ rawContent = null --> Line_59 $$ if (rawContent != null) [FD]
Line_45 $$ rawContent = (String) parts.get(0) --> Line_59 $$ if (rawContent != null) [FD]
Line_47 $$ rawContent = null --> Line_59 $$ if (rawContent != null) [FD]
Line_59 $$ if (rawContent != null) --> Line_60 $$ content = rawContent [CD]
Line_5 $$ String content = Constants.EMPTY_STRING --> Line_60 $$ content = rawContent [FD]
Line_55 $$ rawContent = StringUtils.replace(rawContent, bean.getLabel(), bean.getValue()) --> Line_60 $$ content = rawContent [FD]
Line_32 $$ rawContent += startDelimiter --> Line_60 $$ content = rawContent [FD]
Line_33 $$ rawContent += parts.get(x) --> Line_60 $$ content = rawContent [FD]
Line_6 $$ String rawContent = null --> Line_60 $$ content = rawContent [FD]
Line_17 $$ rawContent = buffer.toString() --> Line_60 $$ content = rawContent [FD]
Line_29 $$ rawContent = (String) parts.get(1) --> Line_60 $$ content = rawContent [FD]
Line_37 $$ rawContent = null --> Line_60 $$ content = rawContent [FD]
Line_45 $$ rawContent = (String) parts.get(0) --> Line_60 $$ content = rawContent [FD]
Line_47 $$ rawContent = null --> Line_60 $$ content = rawContent [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_62 $$ req.setAttribute(getFormName(), content) [CD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_62 $$ req.setAttribute(getFormName(), content) [FD]
Line_5 $$ String content = Constants.EMPTY_STRING --> Line_62 $$ req.setAttribute(getFormName(), content) [FD]
Line_60 $$ content = rawContent --> Line_62 $$ req.setAttribute(getFormName(), content) [FD]
Line_2 $$ public void prepareOutput(HttpServletRequest req) --> Line_63 $$ EaasyStreet.logTrace(METHOD_OUT + className + OUTPUT_METHOD) [CD]
