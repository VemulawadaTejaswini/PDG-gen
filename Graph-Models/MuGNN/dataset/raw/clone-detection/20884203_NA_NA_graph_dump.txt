Line_2 $$ public static void main(String[] argv) throws Exception --> Line_3 $$ Map args = parseOpts(argv) [CD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_3 $$ Map args = parseOpts(argv) [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_4 $$ if (args.get("help") != null) [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_4 $$ if (args.get("help") != null) [FD]
Line_4 $$ if (args.get("help") != null) --> Line_5 $$ printUsage() [CD]
Line_4 $$ if (args.get("help") != null) --> Line_6 $$ System.exit(0) [CD]
Line_4 $$ if (args.get("help") != null) --> Line_7 $$ if (args.get("version") != null) [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_7 $$ if (args.get("version") != null) [FD]
Line_7 $$ if (args.get("version") != null) --> Line_8 $$ System.out.println("SISC - The Second Interpreter of Scheme Code - " + Util.VERSION) [CD]
Line_7 $$ if (args.get("version") != null) --> Line_9 $$ System.exit(0) [CD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_11 $$ Properties props = new Properties() [CD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_12 $$ String configFile = (String) args.get("properties") [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_12 $$ String configFile = (String) args.get("properties") [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_13 $$ if (configFile != null) [CD]
Line_12 $$ String configFile = (String) args.get("properties") --> Line_13 $$ if (configFile != null) [FD]
Line_12 $$ String configFile = (String) args.get("properties") --> Line_15 $$ URL url = Util.url(configFile) [FD]
Line_15 $$ URL url = Util.url(configFile) --> Line_16 $$ URLConnection conn = url.openConnection() [FD]
Line_16 $$ URLConnection conn = url.openConnection() --> Line_17 $$ conn.setDoInput(true) [FD]
Line_16 $$ URLConnection conn = url.openConnection() --> Line_18 $$ conn.setDoOutput(false) [FD]
Line_11 $$ Properties props = new Properties() --> Line_19 $$ props.load(conn.getInputStream()) [FD]
Line_16 $$ URLConnection conn = url.openConnection() --> Line_19 $$ props.load(conn.getInputStream()) [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_26 $$ AppContext ctx = new AppContext(props) [CD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_27 $$ Context.setDefaultAppContext(ctx) [CD]
Line_26 $$ AppContext ctx = new AppContext(props) --> Line_27 $$ Context.setDefaultAppContext(ctx) [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_28 $$ URL heap = AppContext.findHeap(Util.makeURL((String) args.get("heap"))) [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_28 $$ URL heap = AppContext.findHeap(Util.makeURL((String) args.get("heap"))) [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_29 $$ if (heap == null) [CD]
Line_28 $$ URL heap = AppContext.findHeap(Util.makeURL((String) args.get("heap"))) --> Line_29 $$ if (heap == null) [FD]
Line_29 $$ if (heap == null) --> Line_30 $$ System.err.println(Util.liMessage(Util.SISCB, "heapnotfound")) [CD]
Line_29 $$ if (heap == null) --> Line_31 $$ return [CD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_33 $$ if (!ctx.addHeap(AppContext.openHeap(heap))) [CD]
Line_26 $$ AppContext ctx = new AppContext(props) --> Line_33 $$ if (!ctx.addHeap(AppContext.openHeap(heap))) [FD]
Line_28 $$ URL heap = AppContext.findHeap(Util.makeURL((String) args.get("heap"))) --> Line_33 $$ if (!ctx.addHeap(AppContext.openHeap(heap))) [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_34 $$ Interpreter r = Context.enter(ctx) [CD]
Line_26 $$ AppContext ctx = new AppContext(props) --> Line_34 $$ Interpreter r = Context.enter(ctx) [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_35 $$ boolean filesLoadedSuccessfully = r.loadSourceFiles((String[]) ((Vector) args.get("files")).toArray(new String[0])) [CD]
Line_34 $$ Interpreter r = Context.enter(ctx) --> Line_35 $$ boolean filesLoadedSuccessfully = r.loadSourceFiles((String[]) ((Vector) args.get("files")).toArray(new String[0])) [FD]
Line_3 $$ Map args = parseOpts(argv) --> Line_35 $$ boolean filesLoadedSuccessfully = r.loadSourceFiles((String[]) ((Vector) args.get("files")).toArray(new String[0])) [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_36 $$ boolean noRepl = args.get("no-repl") != null [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_36 $$ boolean noRepl = args.get("no-repl") != null [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_37 $$ boolean call = args.get("call-with-args") != null [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_37 $$ boolean call = args.get("call-with-args") != null [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_38 $$ int returnCode = 0 [CD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_39 $$ String expr = (String) args.get("eval") [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_39 $$ String expr = (String) args.get("eval") [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_40 $$ if (expr != null) [CD]
Line_39 $$ String expr = (String) args.get("eval") --> Line_40 $$ if (expr != null) [FD]
Line_40 $$ if (expr != null) --> Line_41 $$ Value v = Util.VOID [CD]
Line_41 $$ Value v = Util.VOID --> Line_43 $$ v = r.eval(expr) [FD]
Line_34 $$ Interpreter r = Context.enter(ctx) --> Line_43 $$ v = r.eval(expr) [FD]
Line_39 $$ String expr = (String) args.get("eval") --> Line_43 $$ v = r.eval(expr) [FD]
Line_37 $$ boolean call = args.get("call-with-args") != null --> Line_44 $$ System.out.println(v) [FD]
Line_41 $$ Value v = Util.VOID --> Line_44 $$ System.out.println(v) [FD]
Line_43 $$ v = r.eval(expr) --> Line_44 $$ System.out.println(v) [FD]
Line_38 $$ int returnCode = 0 --> Line_47 $$ returnCode = 1 [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_50 $$ String func = (String) args.get("call-with-args") [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_50 $$ String func = (String) args.get("call-with-args") [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_51 $$ if (func != null) [CD]
Line_50 $$ String func = (String) args.get("call-with-args") --> Line_51 $$ if (func != null) [FD]
Line_51 $$ if (func != null) --> Line_52 $$ Procedure fun = null [CD]
Line_52 $$ Procedure fun = null --> Line_54 $$ fun = Util.proc(r.eval(func)) [FD]
Line_34 $$ Interpreter r = Context.enter(ctx) --> Line_54 $$ fun = Util.proc(r.eval(func)) [FD]
Line_50 $$ String func = (String) args.get("call-with-args") --> Line_54 $$ fun = Util.proc(r.eval(func)) [FD]
Line_38 $$ int returnCode = 0 --> Line_57 $$ returnCode = 1 [FD]
Line_47 $$ returnCode = 1 --> Line_57 $$ returnCode = 1 [FD]
Line_51 $$ if (func != null) --> Line_59 $$ if (fun != null) [CD]
Line_52 $$ Procedure fun = null --> Line_59 $$ if (fun != null) [FD]
Line_54 $$ fun = Util.proc(r.eval(func)) --> Line_59 $$ if (fun != null) [FD]
Line_59 $$ if (fun != null) --> Line_60 $$ Vector av = (Vector) args.get("argv") [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_60 $$ Vector av = (Vector) args.get("argv") [FD]
Line_59 $$ if (fun != null) --> Line_61 $$ Value[] sargs = new Value[(av == null ? 0 : av.size())] [CD]
Line_60 $$ Vector av = (Vector) args.get("argv") --> Line_61 $$ Value[] sargs = new Value[(av == null ? 0 : av.size())] [FD]
Line_59 $$ if (fun != null) --> Line_62 $$ for (int i = 0; i < sargs.length; i++) sargs[i] = new SchemeString((String) av.elementAt(i)) [CD]
Line_60 $$ Vector av = (Vector) args.get("argv") --> Line_62 $$ for (int i = 0; i < sargs.length; i++) sargs[i] = new SchemeString((String) av.elementAt(i)) [FD]
Line_41 $$ Value v = Util.VOID --> Line_65 $$ v = r.eval(fun, sargs) [FD]
Line_43 $$ v = r.eval(expr) --> Line_65 $$ v = r.eval(fun, sargs) [FD]
Line_34 $$ Interpreter r = Context.enter(ctx) --> Line_65 $$ v = r.eval(fun, sargs) [FD]
Line_52 $$ Procedure fun = null --> Line_65 $$ v = r.eval(fun, sargs) [FD]
Line_54 $$ fun = Util.proc(r.eval(func)) --> Line_65 $$ v = r.eval(fun, sargs) [FD]
Line_61 $$ Value[] sargs = new Value[(av == null ? 0 : av.size())] --> Line_65 $$ v = r.eval(fun, sargs) [FD]
Line_66 $$ if (noRepl) --> Line_67 $$ returnCode = ((Quantity) v).indexValue() [CD]
Line_41 $$ Value v = Util.VOID --> Line_67 $$ returnCode = ((Quantity) v).indexValue() [FD]
Line_43 $$ v = r.eval(expr) --> Line_67 $$ returnCode = ((Quantity) v).indexValue() [FD]
Line_65 $$ v = r.eval(fun, sargs) --> Line_67 $$ returnCode = ((Quantity) v).indexValue() [FD]
Line_38 $$ int returnCode = 0 --> Line_67 $$ returnCode = ((Quantity) v).indexValue() [FD]
Line_47 $$ returnCode = 1 --> Line_67 $$ returnCode = ((Quantity) v).indexValue() [FD]
Line_57 $$ returnCode = 1 --> Line_67 $$ returnCode = ((Quantity) v).indexValue() [FD]
Line_67 $$ returnCode = ((Quantity) v).indexValue() --> Line_68 $$ System.out.println(v) [CD]
Line_41 $$ Value v = Util.VOID --> Line_68 $$ System.out.println(v) [FD]
Line_43 $$ v = r.eval(expr) --> Line_68 $$ System.out.println(v) [FD]
Line_65 $$ v = r.eval(fun, sargs) --> Line_68 $$ System.out.println(v) [FD]
Line_38 $$ int returnCode = 0 --> Line_73 $$ returnCode = 1 [FD]
Line_47 $$ returnCode = 1 --> Line_73 $$ returnCode = 1 [FD]
Line_57 $$ returnCode = 1 --> Line_73 $$ returnCode = 1 [FD]
Line_67 $$ returnCode = ((Quantity) v).indexValue() --> Line_73 $$ returnCode = 1 [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_77 $$ DynamicEnvironment dynenv = r.dynenv [CD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_78 $$ Context.exit() [CD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_79 $$ if (!noRepl) [CD]
Line_36 $$ boolean noRepl = args.get("no-repl") != null --> Line_79 $$ if (!noRepl) [FD]
Line_79 $$ if (!noRepl) --> Line_80 $$ String listen = (String) args.get("listen") [CD]
Line_3 $$ Map args = parseOpts(argv) --> Line_80 $$ String listen = (String) args.get("listen") [FD]
Line_79 $$ if (!noRepl) --> Line_81 $$ if (listen != null) [CD]
Line_80 $$ String listen = (String) args.get("listen") --> Line_81 $$ if (listen != null) [FD]
Line_81 $$ if (listen != null) --> Line_82 $$ int cidx = listen.indexOf(':') [CD]
Line_80 $$ String listen = (String) args.get("listen") --> Line_82 $$ int cidx = listen.indexOf(':') [FD]
Line_81 $$ if (listen != null) --> Line_83 $$ ServerSocket ssocket = cidx == -1 ? new ServerSocket(Integer.parseInt(listen), 50) : new ServerSocket(Integer.parseInt(listen.substring(cidx + 1)), 50, InetAddress.getByName(listen.substring(0, cidx))) [CD]
Line_80 $$ String listen = (String) args.get("listen") --> Line_83 $$ ServerSocket ssocket = cidx == -1 ? new ServerSocket(Integer.parseInt(listen), 50) : new ServerSocket(Integer.parseInt(listen.substring(cidx + 1)), 50, InetAddress.getByName(listen.substring(0, cidx))) [FD]
Line_82 $$ int cidx = listen.indexOf(':') --> Line_83 $$ ServerSocket ssocket = cidx == -1 ? new ServerSocket(Integer.parseInt(listen), 50) : new ServerSocket(Integer.parseInt(listen.substring(cidx + 1)), 50, InetAddress.getByName(listen.substring(0, cidx))) [FD]
Line_81 $$ if (listen != null) --> Line_84 $$ System.out.println("Listening on " + ssocket.getInetAddress().toString() + ":" + ssocket.getLocalPort()) [CD]
Line_83 $$ ServerSocket ssocket = cidx == -1 ? new ServerSocket(Integer.parseInt(listen), 50) : new ServerSocket(Integer.parseInt(listen.substring(cidx + 1)), 50, InetAddress.getByName(listen.substring(0, cidx))) --> Line_84 $$ System.out.println("Listening on " + ssocket.getInetAddress().toString() + ":" + ssocket.getLocalPort()) [FD]
Line_81 $$ if (listen != null) --> Line_85 $$ System.out.flush() [CD]
Line_81 $$ if (listen != null) --> Line_86 $$ listen(ctx, ssocket) [CD]
Line_26 $$ AppContext ctx = new AppContext(props) --> Line_86 $$ listen(ctx, ssocket) [FD]
Line_83 $$ ServerSocket ssocket = cidx == -1 ? new ServerSocket(Integer.parseInt(listen), 50) : new ServerSocket(Integer.parseInt(listen.substring(cidx + 1)), 50, InetAddress.getByName(listen.substring(0, cidx))) --> Line_86 $$ listen(ctx, ssocket) [FD]
Line_81 $$ if (listen != null) --> Line_88 $$ REPL repl = new REPL(dynenv, getCliProc(ctx)) [CD]
Line_26 $$ AppContext ctx = new AppContext(props) --> Line_88 $$ REPL repl = new REPL(dynenv, getCliProc(ctx)) [FD]
Line_81 $$ if (listen != null) --> Line_89 $$ repl.go() [CD]
Line_88 $$ REPL repl = new REPL(dynenv, getCliProc(ctx)) --> Line_89 $$ repl.go() [FD]
Line_81 $$ if (listen != null) --> Line_90 $$ repl.primordialThread.thread.join() [CD]
Line_93 $$ if (repl.primordialThread.rv instanceof Quantity) --> Line_94 $$ returnCode = ((Quantity) repl.primordialThread.rv).intValue() [CD]
Line_38 $$ int returnCode = 0 --> Line_94 $$ returnCode = ((Quantity) repl.primordialThread.rv).intValue() [FD]
Line_47 $$ returnCode = 1 --> Line_94 $$ returnCode = ((Quantity) repl.primordialThread.rv).intValue() [FD]
Line_57 $$ returnCode = 1 --> Line_94 $$ returnCode = ((Quantity) repl.primordialThread.rv).intValue() [FD]
Line_67 $$ returnCode = ((Quantity) v).indexValue() --> Line_94 $$ returnCode = ((Quantity) repl.primordialThread.rv).intValue() [FD]
Line_73 $$ returnCode = 1 --> Line_94 $$ returnCode = ((Quantity) repl.primordialThread.rv).intValue() [FD]
Line_38 $$ int returnCode = 0 --> Line_98 $$ returnCode = 1 [FD]
Line_47 $$ returnCode = 1 --> Line_98 $$ returnCode = 1 [FD]
Line_57 $$ returnCode = 1 --> Line_98 $$ returnCode = 1 [FD]
Line_67 $$ returnCode = ((Quantity) v).indexValue() --> Line_98 $$ returnCode = 1 [FD]
Line_73 $$ returnCode = 1 --> Line_98 $$ returnCode = 1 [FD]
Line_94 $$ returnCode = ((Quantity) repl.primordialThread.rv).intValue() --> Line_98 $$ returnCode = 1 [FD]
Line_79 $$ if (!noRepl) --> Line_102 $$ if (returnCode == 0 && !filesLoadedSuccessfully) [CD]
Line_35 $$ boolean filesLoadedSuccessfully = r.loadSourceFiles((String[]) ((Vector) args.get("files")).toArray(new String[0])) --> Line_102 $$ if (returnCode == 0 && !filesLoadedSuccessfully) [FD]
Line_102 $$ if (returnCode == 0 && !filesLoadedSuccessfully) --> Line_103 $$ returnCode = 1 [CD]
Line_38 $$ int returnCode = 0 --> Line_103 $$ returnCode = 1 [FD]
Line_47 $$ returnCode = 1 --> Line_103 $$ returnCode = 1 [FD]
Line_57 $$ returnCode = 1 --> Line_103 $$ returnCode = 1 [FD]
Line_67 $$ returnCode = ((Quantity) v).indexValue() --> Line_103 $$ returnCode = 1 [FD]
Line_73 $$ returnCode = 1 --> Line_103 $$ returnCode = 1 [FD]
Line_94 $$ returnCode = ((Quantity) repl.primordialThread.rv).intValue() --> Line_103 $$ returnCode = 1 [FD]
Line_98 $$ returnCode = 1 --> Line_103 $$ returnCode = 1 [FD]
Line_2 $$ public static void main(String[] argv) throws Exception --> Line_105 $$ System.exit(returnCode) [CD]
Line_38 $$ int returnCode = 0 --> Line_105 $$ System.exit(returnCode) [FD]
Line_47 $$ returnCode = 1 --> Line_105 $$ System.exit(returnCode) [FD]
Line_57 $$ returnCode = 1 --> Line_105 $$ System.exit(returnCode) [FD]
Line_67 $$ returnCode = ((Quantity) v).indexValue() --> Line_105 $$ System.exit(returnCode) [FD]
Line_73 $$ returnCode = 1 --> Line_105 $$ System.exit(returnCode) [FD]
Line_94 $$ returnCode = ((Quantity) repl.primordialThread.rv).intValue() --> Line_105 $$ System.exit(returnCode) [FD]
Line_98 $$ returnCode = 1 --> Line_105 $$ System.exit(returnCode) [FD]
Line_103 $$ returnCode = 1 --> Line_105 $$ System.exit(returnCode) [FD]
