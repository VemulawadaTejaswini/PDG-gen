Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_3 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_4 $$ OutputStream b64os = new BASE64EncoderStream(bos, Integer.MAX_VALUE) [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_5 $$ SecureRandom random [CD]
Line_5 $$ SecureRandom random --> Line_7 $$ random = new SecureRandom() [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_13 $$ StringBuffer result = new StringBuffer() [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_15 $$ String nc = "00000001" [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_16 $$ String qop = "auth" [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_17 $$ byte[] bytes = new byte[32] [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_18 $$ int resp [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_19 $$ debugout.println("DEBUG DIGEST-MD5: Begin authentication ...") [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_20 $$ Hashtable map = tokenize(serverChallenge) [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_20 $$ Hashtable map = tokenize(serverChallenge) [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_21 $$ if (realm == null) [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_21 $$ if (realm == null) [FD]
Line_21 $$ if (realm == null) --> Line_22 $$ String text = (String) map.get("realm") [CD]
Line_20 $$ Hashtable map = tokenize(serverChallenge) --> Line_22 $$ String text = (String) map.get("realm") [FD]
Line_21 $$ if (realm == null) --> Line_23 $$ realm = text != null ? new StringTokenizer(text, ",").nextToken() : host [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_23 $$ realm = text != null ? new StringTokenizer(text, ",").nextToken() : host [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_25 $$ String nonce = (String) map.get("nonce") [CD]
Line_20 $$ Hashtable map = tokenize(serverChallenge) --> Line_25 $$ String nonce = (String) map.get("nonce") [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_26 $$ random.nextBytes(bytes) [CD]
Line_5 $$ SecureRandom random --> Line_26 $$ random.nextBytes(bytes) [FD]
Line_7 $$ random = new SecureRandom() --> Line_26 $$ random.nextBytes(bytes) [FD]
Line_17 $$ byte[] bytes = new byte[32] --> Line_26 $$ random.nextBytes(bytes) [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_27 $$ b64os.write(bytes) [CD]
Line_4 $$ OutputStream b64os = new BASE64EncoderStream(bos, Integer.MAX_VALUE) --> Line_27 $$ b64os.write(bytes) [FD]
Line_17 $$ byte[] bytes = new byte[32] --> Line_27 $$ b64os.write(bytes) [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_28 $$ b64os.flush() [CD]
Line_4 $$ OutputStream b64os = new BASE64EncoderStream(bos, Integer.MAX_VALUE) --> Line_28 $$ b64os.flush() [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_29 $$ String cnonce = bos.toString() [CD]
Line_3 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() --> Line_29 $$ String cnonce = bos.toString() [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_30 $$ bos.reset() [CD]
Line_3 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() --> Line_30 $$ bos.reset() [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_31 $$ md5.update(md5.digest(ASCIIUtility.getBytes(user + ":" + realm + ":" + passwd))) [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_32 $$ md5.update(ASCIIUtility.getBytes(":" + nonce + ":" + cnonce)) [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_34 $$ md5.update(ASCIIUtility.getBytes("AUTHENTICATE:" + uri)) [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_35 $$ md5.update(ASCIIUtility.getBytes(clientResponse + toHex(md5.digest()))) [CD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_36 $$ result.append("username=\"" + user + "\"") [CD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_36 $$ result.append("username=\"" + user + "\"") [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_37 $$ result.append(",realm=\"" + realm + "\"") [CD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_37 $$ result.append(",realm=\"" + realm + "\"") [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_38 $$ result.append(",qop=" + qop) [CD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_38 $$ result.append(",qop=" + qop) [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_39 $$ result.append(",nc=" + nc) [CD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_39 $$ result.append(",nc=" + nc) [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_40 $$ result.append(",nonce=\"" + nonce + "\"") [CD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_40 $$ result.append(",nonce=\"" + nonce + "\"") [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_41 $$ result.append(",cnonce=\"" + cnonce + "\"") [CD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_41 $$ result.append(",cnonce=\"" + cnonce + "\"") [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_42 $$ result.append(",digest-uri=\"" + uri + "\"") [CD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_42 $$ result.append(",digest-uri=\"" + uri + "\"") [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_43 $$ result.append(",response=" + toHex(md5.digest())) [CD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_43 $$ result.append(",response=" + toHex(md5.digest())) [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_44 $$ debugout.println("DEBUG DIGEST-MD5: Response => " + result.toString()) [CD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_44 $$ debugout.println("DEBUG DIGEST-MD5: Response => " + result.toString()) [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_45 $$ b64os.write(ASCIIUtility.getBytes(result.toString())) [CD]
Line_4 $$ OutputStream b64os = new BASE64EncoderStream(bos, Integer.MAX_VALUE) --> Line_45 $$ b64os.write(ASCIIUtility.getBytes(result.toString())) [FD]
Line_13 $$ StringBuffer result = new StringBuffer() --> Line_45 $$ b64os.write(ASCIIUtility.getBytes(result.toString())) [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_46 $$ b64os.flush() [CD]
Line_4 $$ OutputStream b64os = new BASE64EncoderStream(bos, Integer.MAX_VALUE) --> Line_46 $$ b64os.flush() [FD]
Line_2 $$ public byte[] authClient(String host, String user, String passwd, String realm, String serverChallenge) throws IOException --> Line_47 $$ return bos.toByteArray() [CD]
Line_3 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() --> Line_47 $$ return bos.toByteArray() [FD]
