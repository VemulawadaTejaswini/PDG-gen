Line_2 $$ public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException --> Line_5 $$ for (int i = 0; i < 256; i++) [CD]
Line_5 $$ for (int i = 0; i < 256; i++) --> Line_6 $$ String key = Integer.toHexString(i) [CD]
Line_5 $$ for (int i = 0; i < 256; i++) --> Line_6 $$ String key = Integer.toHexString(i) [FD]
Line_5 $$ for (int i = 0; i < 256; i++) --> Line_7 $$ if (key.length() < 2) [CD]
Line_6 $$ String key = Integer.toHexString(i) --> Line_7 $$ if (key.length() < 2) [FD]
Line_5 $$ for (int i = 0; i < 256; i++) --> Line_8 $$ availcmd.push(key) [CD]
Line_6 $$ String key = Integer.toHexString(i) --> Line_8 $$ availcmd.push(key) [FD]
Line_7 $$ if (key.length() < 2) --> Line_8 $$ availcmd.push(key) [FD]
Line_5 $$ for (int i = 0; i < 256; i++) --> Line_9 $$ commands.put(key, null) [CD]
Line_6 $$ String key = Integer.toHexString(i) --> Line_9 $$ commands.put(key, null) [FD]
Line_7 $$ if (key.length() < 2) --> Line_9 $$ commands.put(key, null) [FD]
Line_5 $$ for (int i = 0; i < 256; i++) --> Line_16 $$ for (int i = 0; i < 16; i++) [FD]
Line_16 $$ for (int i = 0; i < 16; i++) --> Line_17 $$ String hex = Integer.toHexString(rand.nextInt(256)) [CD]
Line_15 $$ Random rand = new Random() --> Line_17 $$ String hex = Integer.toHexString(rand.nextInt(256)) [FD]
Line_16 $$ for (int i = 0; i < 16; i++) --> Line_18 $$ if (hex.length() < 2) [CD]
Line_17 $$ String hex = Integer.toHexString(rand.nextInt(256)) --> Line_18 $$ if (hex.length() < 2) [FD]
Line_16 $$ for (int i = 0; i < 16; i++) --> Line_19 $$ seed += hex.substring(hex.length() - 2) [CD]
Line_14 $$ String seed = "" --> Line_19 $$ seed += hex.substring(hex.length() - 2) [FD]
Line_17 $$ String hex = Integer.toHexString(rand.nextInt(256)) --> Line_19 $$ seed += hex.substring(hex.length() - 2) [FD]
Line_18 $$ if (hex.length() < 2) --> Line_19 $$ seed += hex.substring(hex.length() - 2) [FD]
Line_22 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_23 $$ md5.reset() [FD]
Line_22 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_24 $$ md5.update(pass.getBytes()) [FD]
Line_21 $$ String pass = _mpsw + seed + _spsw --> Line_24 $$ md5.update(pass.getBytes()) [FD]
Line_22 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_25 $$ String hash = hash2hex(md5.digest()).toLowerCase() [FD]
Line_26 $$ String banner = "INIT " + "servername" + " " + hash + " " + seed --> Line_27 $$ sendLine(banner) [FD]
Line_28 $$ String txt = readLine(5) --> Line_29 $$ if (txt == null) [FD]
Line_28 $$ String txt = readLine(5) --> Line_36 $$ String[] items = txt.split(" ") [FD]
Line_32 $$ String sname = "" --> Line_37 $$ sname = items[1].trim() [FD]
Line_33 $$ String spass = "" --> Line_38 $$ spass = items[2].trim() [FD]
Line_34 $$ String sseed = "" --> Line_39 $$ sseed = items[3].trim() [FD]
Line_21 $$ String pass = _mpsw + seed + _spsw --> Line_43 $$ pass = _spsw + sseed + _mpsw [FD]
Line_22 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_44 $$ md5 = MessageDigest.getInstance("MD5") [FD]
Line_22 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_45 $$ md5.reset() [FD]
Line_44 $$ md5 = MessageDigest.getInstance("MD5") --> Line_45 $$ md5.reset() [FD]
Line_22 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_46 $$ md5.update(pass.getBytes()) [FD]
Line_44 $$ md5 = MessageDigest.getInstance("MD5") --> Line_46 $$ md5.update(pass.getBytes()) [FD]
Line_21 $$ String pass = _mpsw + seed + _spsw --> Line_46 $$ md5.update(pass.getBytes()) [FD]
Line_43 $$ pass = _spsw + sseed + _mpsw --> Line_46 $$ md5.update(pass.getBytes()) [FD]
Line_25 $$ String hash = hash2hex(md5.digest()).toLowerCase() --> Line_47 $$ hash = hash2hex(md5.digest()).toLowerCase() [FD]
Line_22 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_47 $$ hash = hash2hex(md5.digest()).toLowerCase() [FD]
Line_44 $$ md5 = MessageDigest.getInstance("MD5") --> Line_47 $$ hash = hash2hex(md5.digest()).toLowerCase() [FD]
Line_32 $$ String sname = "" --> Line_48 $$ if (!sname.equals(_name)) [FD]
Line_37 $$ sname = items[1].trim() --> Line_48 $$ if (!sname.equals(_name)) [FD]
Line_48 $$ if (!sname.equals(_name)) --> Line_49 $$ AsyncSlaveListener.invalidSlave("INITFAIL Unknown", _sock) [CD]
Line_33 $$ String spass = "" --> Line_51 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [FD]
Line_38 $$ spass = items[2].trim() --> Line_51 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [FD]
Line_25 $$ String hash = hash2hex(md5.digest()).toLowerCase() --> Line_51 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [FD]
Line_47 $$ hash = hash2hex(md5.digest()).toLowerCase() --> Line_51 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [FD]
Line_51 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) --> Line_52 $$ AsyncSlaveListener.invalidSlave("INITFAIL BadKey", _sock) [CD]
Line_57 $$ if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) --> Line_58 $$ logger.info("Check slaves.xml on the master that you are allowed to connect.") [CD]
Line_2 $$ public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException --> Line_62 $$ sock.close() [FD]
Line_2 $$ public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException --> Line_68 $$ sock.close() [FD]
Line_2 $$ public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException --> Line_72 $$ System.gc() [CD]
