Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_3 $$ AbstractDepParser parser = null [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_4 $$ OneVsAllDecoder decoder = null [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_5 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_5 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) [FD]
Line_5 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) --> Line_6 $$ System.out.println("\n* Save lexica") [CD]
Line_5 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) --> Line_7 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) [CD]
Line_3 $$ AbstractDepParser parser = null --> Line_7 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) [FD]
Line_5 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) --> Line_8 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_8 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) [FD]
Line_8 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) --> Line_9 $$ System.out.println("\n* Print training instances") [CD]
Line_8 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) --> Line_10 $$ System.out.println("- loading lexica") [CD]
Line_8 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) --> Line_11 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) [CD]
Line_3 $$ AbstractDepParser parser = null --> Line_11 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) [FD]
Line_7 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_11 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) [FD]
Line_8 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) --> Line_12 $$ if (flag == ShiftPopParser.FLAG_TRAIN_BOOST) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_12 $$ if (flag == ShiftPopParser.FLAG_TRAIN_BOOST) [FD]
Line_12 $$ if (flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_13 $$ System.out.println("\n* Train conditional") [CD]
Line_12 $$ if (flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_14 $$ decoder = new OneVsAllDecoder(m_model) [CD]
Line_4 $$ OneVsAllDecoder decoder = null --> Line_14 $$ decoder = new OneVsAllDecoder(m_model) [FD]
Line_12 $$ if (flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_15 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) [CD]
Line_3 $$ AbstractDepParser parser = null --> Line_15 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) [FD]
Line_7 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_15 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) [FD]
Line_11 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_15 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) [FD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_17 $$ AbstractReader<DepNode, DepTree> reader = null [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_18 $$ DepTree tree [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_19 $$ int n [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_20 $$ if (s_format.equals(AbstractReader.FORMAT_CONLLX)) [CD]
Line_17 $$ AbstractReader<DepNode, DepTree> reader = null --> Line_20 $$ if (s_format.equals(AbstractReader.FORMAT_CONLLX)) [FD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_21 $$ parser.setLanguage(s_language) [CD]
Line_3 $$ AbstractDepParser parser = null --> Line_21 $$ parser.setLanguage(s_language) [FD]
Line_7 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_21 $$ parser.setLanguage(s_language) [FD]
Line_11 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_21 $$ parser.setLanguage(s_language) [FD]
Line_15 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_21 $$ parser.setLanguage(s_language) [FD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_22 $$ reader.setLanguage(s_language) [CD]
Line_17 $$ AbstractReader<DepNode, DepTree> reader = null --> Line_22 $$ reader.setLanguage(s_language) [FD]
Line_20 $$ if (s_format.equals(AbstractReader.FORMAT_CONLLX)) --> Line_22 $$ reader.setLanguage(s_language) [FD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) [CD]
Line_18 $$ DepTree tree --> Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) [FD]
Line_17 $$ AbstractReader<DepNode, DepTree> reader = null --> Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) [FD]
Line_20 $$ if (s_format.equals(AbstractReader.FORMAT_CONLLX)) --> Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) [FD]
Line_19 $$ int n --> Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) [FD]
Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) --> Line_24 $$ parser.parse(tree) [CD]
Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) --> Line_24 $$ parser.parse(tree) [FD]
Line_3 $$ AbstractDepParser parser = null --> Line_24 $$ parser.parse(tree) [FD]
Line_7 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_24 $$ parser.parse(tree) [FD]
Line_11 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_24 $$ parser.parse(tree) [FD]
Line_15 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_24 $$ parser.parse(tree) [FD]
Line_18 $$ DepTree tree --> Line_24 $$ parser.parse(tree) [FD]
Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) --> Line_25 $$ System.out.printf("\r- parsing: %dK", n / 1000) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_27 $$ System.out.println("\r- parsing: " + n) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_28 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_28 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) [FD]
Line_28 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) --> Line_29 $$ System.out.println("- saving") [CD]
Line_28 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) --> Line_30 $$ parser.saveTags(ENTRY_LEXICA) [CD]
Line_3 $$ AbstractDepParser parser = null --> Line_30 $$ parser.saveTags(ENTRY_LEXICA) [FD]
Line_7 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_30 $$ parser.saveTags(ENTRY_LEXICA) [FD]
Line_11 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_30 $$ parser.saveTags(ENTRY_LEXICA) [FD]
Line_15 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_30 $$ parser.saveTags(ENTRY_LEXICA) [FD]
Line_28 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) --> Line_31 $$ t_xml = parser.getDepFtrXml() [CD]
Line_3 $$ AbstractDepParser parser = null --> Line_31 $$ t_xml = parser.getDepFtrXml() [FD]
Line_7 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_31 $$ t_xml = parser.getDepFtrXml() [FD]
Line_11 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_31 $$ t_xml = parser.getDepFtrXml() [FD]
Line_15 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_31 $$ t_xml = parser.getDepFtrXml() [FD]
Line_28 $$ if (flag == ShiftPopParser.FLAG_TRAIN_LEXICON) --> Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) [CD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_34 $$ zout.putArchiveEntry(new JarArchiveEntry(ENTRY_PARSER)) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_34 $$ zout.putArchiveEntry(new JarArchiveEntry(ENTRY_PARSER)) [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_35 $$ PrintStream fout = new PrintStream(zout) [CD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_36 $$ fout.print(s_depParser) [CD]
Line_35 $$ PrintStream fout = new PrintStream(zout) --> Line_36 $$ fout.print(s_depParser) [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_37 $$ fout.flush() [CD]
Line_35 $$ PrintStream fout = new PrintStream(zout) --> Line_37 $$ fout.flush() [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_38 $$ zout.closeArchiveEntry() [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_38 $$ zout.closeArchiveEntry() [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_39 $$ zout.putArchiveEntry(new JarArchiveEntry(ENTRY_FEATURE)) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_39 $$ zout.putArchiveEntry(new JarArchiveEntry(ENTRY_FEATURE)) [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_40 $$ IOUtils.copy(new FileInputStream(s_featureXml), zout) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_40 $$ IOUtils.copy(new FileInputStream(s_featureXml), zout) [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_41 $$ zout.closeArchiveEntry() [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_41 $$ zout.closeArchiveEntry() [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_42 $$ zout.putArchiveEntry(new JarArchiveEntry(ENTRY_LEXICA)) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_42 $$ zout.putArchiveEntry(new JarArchiveEntry(ENTRY_LEXICA)) [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_43 $$ IOUtils.copy(new FileInputStream(ENTRY_LEXICA), zout) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_43 $$ IOUtils.copy(new FileInputStream(ENTRY_LEXICA), zout) [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_44 $$ zout.closeArchiveEntry() [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_44 $$ zout.closeArchiveEntry() [FD]
Line_32 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE || flag == ShiftPopParser.FLAG_TRAIN_BOOST) --> Line_45 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) [CD]
Line_2 $$ private void trainDepParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_45 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) [FD]
Line_3 $$ AbstractDepParser parser = null --> Line_45 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) [FD]
Line_7 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_45 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) [FD]
Line_11 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_45 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) [FD]
Line_15 $$ if (s_depParser.equals(AbstractDepParser.ALG_SHIFT_EAGER)) --> Line_45 $$ if (flag == ShiftPopParser.FLAG_TRAIN_INSTANCE) [FD]
