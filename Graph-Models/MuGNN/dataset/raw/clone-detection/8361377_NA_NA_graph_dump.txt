Line_2 $$ protected String decrypt(final String data, final String key) throws CryptographicFailureException --> Line_3 $$ Validate.notNull(data, "Provided data cannot be null.") [CD]
Line_2 $$ protected String decrypt(final String data, final String key) throws CryptographicFailureException --> Line_3 $$ Validate.notNull(data, "Provided data cannot be null.") [FD]
Line_2 $$ protected String decrypt(final String data, final String key) throws CryptographicFailureException --> Line_4 $$ Validate.notNull(key, "Provided key name cannot be null.") [CD]
Line_2 $$ protected String decrypt(final String data, final String key) throws CryptographicFailureException --> Line_4 $$ Validate.notNull(key, "Provided key name cannot be null.") [FD]
Line_2 $$ protected String decrypt(final String data, final String key) throws CryptographicFailureException --> Line_5 $$ final PrivateKey pk = getPrivateKey(key) [CD]
Line_2 $$ protected String decrypt(final String data, final String key) throws CryptographicFailureException --> Line_5 $$ final PrivateKey pk = getPrivateKey(key) [FD]
Line_2 $$ protected String decrypt(final String data, final String key) throws CryptographicFailureException --> Line_6 $$ if (pk == null) [CD]
Line_5 $$ final PrivateKey pk = getPrivateKey(key) --> Line_6 $$ if (pk == null) [FD]
Line_2 $$ protected String decrypt(final String data, final String key) throws CryptographicFailureException --> Line_7 $$ throw new CryptographicFailureException("PrivateKeyNotFound", String.format("Cannot find private key '%s'", key)) [FD]
Line_5 $$ final PrivateKey pk = getPrivateKey(key) --> Line_10 $$ final Cipher cipher = Cipher.getInstance(pk.getAlgorithm()) [FD]
Line_10 $$ final Cipher cipher = Cipher.getInstance(pk.getAlgorithm()) --> Line_11 $$ cipher.init(Cipher.DECRYPT_MODE, pk) [FD]
Line_5 $$ final PrivateKey pk = getPrivateKey(key) --> Line_11 $$ cipher.init(Cipher.DECRYPT_MODE, pk) [FD]
Line_2 $$ protected String decrypt(final String data, final String key) throws CryptographicFailureException --> Line_12 $$ final ByteArrayInputStream bin = new ByteArrayInputStream(Base64.decodeBase64(data.getBytes())) [FD]
Line_13 $$ final CipherInputStream cin = new CipherInputStream(bin, cipher) --> Line_15 $$ IOUtils.copy(cin, bout) [FD]
Line_14 $$ final ByteArrayOutputStream bout = new ByteArrayOutputStream() --> Line_15 $$ IOUtils.copy(cin, bout) [FD]
Line_14 $$ final ByteArrayOutputStream bout = new ByteArrayOutputStream() --> Line_16 $$ return new String(bout.toByteArray()) [FD]
Line_5 $$ final PrivateKey pk = getPrivateKey(key) --> Line_18 $$ throw new IllegalStateException(String.format("Cannot find instance of algorithm '%s'", pk.getAlgorithm()), e) [FD]
Line_5 $$ final PrivateKey pk = getPrivateKey(key) --> Line_20 $$ throw new IllegalStateException(String.format("Cannot build instance of algorithm '%s'", pk.getAlgorithm()), e) [FD]
Line_5 $$ final PrivateKey pk = getPrivateKey(key) --> Line_22 $$ throw new IllegalStateException(String.format("Cannot build instance of algorithm '%s'", pk.getAlgorithm()), e) [FD]
