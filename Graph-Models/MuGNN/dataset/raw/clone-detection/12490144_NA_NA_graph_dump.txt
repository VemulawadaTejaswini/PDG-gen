Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_3 $$ monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName)) [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_3 $$ monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName)) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_4 $$ final Map<String, byte[]> files = readArchiveFile(sourceFileName) [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_4 $$ final Map<String, byte[]> files = readArchiveFile(sourceFileName) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_5 $$ monitor.worked(10) [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_5 $$ monitor.worked(10) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_7 $$ if (project.exists()) [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_7 $$ if (project.exists()) [FD]
Line_7 $$ if (project.exists()) --> Line_8 $$ project.delete(true, true, new SubProgressMonitor(monitor, 5)) [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_8 $$ project.delete(true, true, new SubProgressMonitor(monitor, 5)) [FD]
Line_7 $$ if (project.exists()) --> Line_10 $$ monitor.worked(5) [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_10 $$ monitor.worked(5) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_12 $$ project.create(new SubProgressMonitor(monitor, 5)) [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_12 $$ project.create(new SubProgressMonitor(monitor, 5)) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_13 $$ project.open(new SubProgressMonitor(monitor, 5)) [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_13 $$ project.open(new SubProgressMonitor(monitor, 5)) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_14 $$ IProjectDescription description = project.getDescription() [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_14 $$ IProjectDescription description = project.getDescription() [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_15 $$ description.setNatureIds(new String[] [CD]
Line_14 $$ IProjectDescription description = project.getDescription() --> Line_15 $$ description.setNatureIds(new String[] [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_16 $$ project.setDescription(description, new SubProgressMonitor(monitor, 5)) [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_16 $$ project.setDescription(description, new SubProgressMonitor(monitor, 5)) [FD]
Line_14 $$ IProjectDescription description = project.getDescription() --> Line_16 $$ project.setDescription(description, new SubProgressMonitor(monitor, 5)) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_17 $$ IJavaProject javaProject = JavaCore.create(project) [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_17 $$ IJavaProject javaProject = JavaCore.create(project) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_18 $$ IFolder binDir = project.getFolder("bin") [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_18 $$ IFolder binDir = project.getFolder("bin") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_19 $$ IPath binPath = binDir.getFullPath() [CD]
Line_18 $$ IFolder binDir = project.getFolder("bin") --> Line_19 $$ IPath binPath = binDir.getFullPath() [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_20 $$ javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5)) [CD]
Line_17 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_20 $$ javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5)) [FD]
Line_19 $$ IPath binPath = binDir.getFullPath() --> Line_20 $$ javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5)) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_21 $$ project.getFolder("jni").create(true, true, new SubProgressMonitor(monitor, 5)) [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_21 $$ project.getFolder("jni").create(true, true, new SubProgressMonitor(monitor, 5)) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_22 $$ project.getFile("sapjco3.jar").create(new ByteArrayInputStream(files.get("sapjco3.jar")), true, new SubProgressMonitor(monitor, 10)) [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_22 $$ project.getFile("sapjco3.jar").create(new ByteArrayInputStream(files.get("sapjco3.jar")), true, new SubProgressMonitor(monitor, 10)) [FD]
Line_4 $$ final Map<String, byte[]> files = readArchiveFile(sourceFileName) --> Line_22 $$ project.getFile("sapjco3.jar").create(new ByteArrayInputStream(files.get("sapjco3.jar")), true, new SubProgressMonitor(monitor, 10)) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_23 $$ IFolder metaInfFolder = project.getFolder("META-INF") [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_23 $$ IFolder metaInfFolder = project.getFolder("META-INF") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_24 $$ metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5)) [CD]
Line_23 $$ IFolder metaInfFolder = project.getFolder("META-INF") --> Line_24 $$ metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5)) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_25 $$ StringBuilder manifest = new StringBuilder() [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_26 $$ manifest.append("Manifest-Version: 1.0\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_26 $$ manifest.append("Manifest-Version: 1.0\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_27 $$ manifest.append("Bundle-ManifestVersion: 2\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_27 $$ manifest.append("Bundle-ManifestVersion: 2\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_28 $$ manifest.append("Bundle-Name: SAP Java Connector v3\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_28 $$ manifest.append("Bundle-Name: SAP Java Connector v3\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_29 $$ manifest.append(MessageFormat.format("Bundle-SymbolicName: [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_29 $$ manifest.append(MessageFormat.format("Bundle-SymbolicName: [FD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_29 $$ manifest.append(MessageFormat.format("Bundle-SymbolicName: [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_30 $$ manifest.append("Bundle-Version: 7.11.0\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_30 $$ manifest.append("Bundle-Version: 7.11.0\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_31 $$ manifest.append("Bundle-ClassPath: bin/,\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_31 $$ manifest.append("Bundle-ClassPath: bin/,\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_32 $$ manifest.append(" sapjco3.jar,\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_32 $$ manifest.append(" sapjco3.jar,\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_33 $$ manifest.append(" jni/\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_33 $$ manifest.append(" jni/\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_34 $$ manifest.append("Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_34 $$ manifest.append("Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_35 $$ manifest.append("Bundle-RequiredExecutionEnvironment: J2SE-1.5\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_35 $$ manifest.append("Bundle-RequiredExecutionEnvironment: J2SE-1.5\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_36 $$ manifest.append("Export-Package: com.sap.conn.jco,\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_36 $$ manifest.append("Export-Package: com.sap.conn.jco,\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_37 $$ manifest.append(" com.sap.conn.jco.ext,\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_37 $$ manifest.append(" com.sap.conn.jco.ext,\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_38 $$ manifest.append(" com.sap.conn.jco.monitor,\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_38 $$ manifest.append(" com.sap.conn.jco.monitor,\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_39 $$ manifest.append(" com.sap.conn.jco.rt,\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_39 $$ manifest.append(" com.sap.conn.jco.rt,\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_40 $$ manifest.append(" com.sap.conn.jco.server\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_40 $$ manifest.append(" com.sap.conn.jco.server\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_41 $$ manifest.append("Bundle-ActivationPolicy: lazy\n") [CD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_41 $$ manifest.append("Bundle-ActivationPolicy: lazy\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_42 $$ writeTextFile(monitor, manifest, metaInfFolder.getFile("MANIFEST.MF")) [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_42 $$ writeTextFile(monitor, manifest, metaInfFolder.getFile("MANIFEST.MF")) [FD]
Line_25 $$ StringBuilder manifest = new StringBuilder() --> Line_42 $$ writeTextFile(monitor, manifest, metaInfFolder.getFile("MANIFEST.MF")) [FD]
Line_23 $$ IFolder metaInfFolder = project.getFolder("META-INF") --> Line_42 $$ writeTextFile(monitor, manifest, metaInfFolder.getFile("MANIFEST.MF")) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_43 $$ final IPath jcoPath = new Path(MessageFormat.format("/ [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_43 $$ final IPath jcoPath = new Path(MessageFormat.format("/ [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_44 $$ IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true) [CD]
Line_43 $$ final IPath jcoPath = new Path(MessageFormat.format("/ --> Line_44 $$ IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_45 $$ final IPath jniPath = new Path(MessageFormat.format("/ [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_45 $$ final IPath jniPath = new Path(MessageFormat.format("/ [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_46 $$ IClasspathEntry jniEntry = JavaCore.newLibraryEntry(jniPath, Path.EMPTY, Path.EMPTY, true) [CD]
Line_45 $$ final IPath jniPath = new Path(MessageFormat.format("/ --> Line_46 $$ IClasspathEntry jniEntry = JavaCore.newLibraryEntry(jniPath, Path.EMPTY, Path.EMPTY, true) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_47 $$ javaProject.setRawClasspath(new IClasspathEntry[] [CD]
Line_17 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_47 $$ javaProject.setRawClasspath(new IClasspathEntry[] [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_48 $$ StringBuilder buildProperties = new StringBuilder() [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_49 $$ buildProperties.append("bin.includes = META-INF/,\\\n") [CD]
Line_48 $$ StringBuilder buildProperties = new StringBuilder() --> Line_49 $$ buildProperties.append("bin.includes = META-INF/,\\\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_50 $$ buildProperties.append("               sapjco3.jar,\\\n") [CD]
Line_48 $$ StringBuilder buildProperties = new StringBuilder() --> Line_50 $$ buildProperties.append("               sapjco3.jar,\\\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_51 $$ buildProperties.append("               jni/,\\\n") [CD]
Line_48 $$ StringBuilder buildProperties = new StringBuilder() --> Line_51 $$ buildProperties.append("               jni/,\\\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_52 $$ buildProperties.append("               .\n") [CD]
Line_48 $$ StringBuilder buildProperties = new StringBuilder() --> Line_52 $$ buildProperties.append("               .\n") [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_53 $$ writeTextFile(monitor, buildProperties, project.getFile("build.properties")) [CD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_53 $$ writeTextFile(monitor, buildProperties, project.getFile("build.properties")) [FD]
Line_48 $$ StringBuilder buildProperties = new StringBuilder() --> Line_53 $$ writeTextFile(monitor, buildProperties, project.getFile("build.properties")) [FD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_53 $$ writeTextFile(monitor, buildProperties, project.getFile("build.properties")) [FD]
Line_2 $$ private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException --> Line_54 $$ exportableBundles.add(modelManager.findModel(project)) [CD]
Line_6 $$ IProject project = workspaceRoot.getProject(pluginName) --> Line_54 $$ exportableBundles.add(modelManager.findModel(project)) [FD]
