Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_3 $$ String packageOnly = packageName [CD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_4 $$ boolean recursive = false [CD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_5 $$ if (packageName.endsWith(".*")) [CD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_5 $$ if (packageName.endsWith(".*")) [FD]
Line_5 $$ if (packageName.endsWith(".*")) --> Line_6 $$ packageOnly = packageName.substring(0, packageName.lastIndexOf(".*")) [CD]
Line_3 $$ String packageOnly = packageName --> Line_6 $$ packageOnly = packageName.substring(0, packageName.lastIndexOf(".*")) [FD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_6 $$ packageOnly = packageName.substring(0, packageName.lastIndexOf(".*")) [FD]
Line_5 $$ if (packageName.endsWith(".*")) --> Line_7 $$ recursive = true [CD]
Line_4 $$ boolean recursive = false --> Line_7 $$ recursive = true [FD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_9 $$ List<String> vResult = new ArrayList<String>() [CD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_10 $$ String packageDirName = packageOnly.replace('.', '/') [CD]
Line_3 $$ String packageOnly = packageName --> Line_10 $$ String packageDirName = packageOnly.replace('.', '/') [FD]
Line_6 $$ packageOnly = packageName.substring(0, packageName.lastIndexOf(".*")) --> Line_10 $$ String packageDirName = packageOnly.replace('.', '/') [FD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_11 $$ Enumeration<URL> dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName) [CD]
Line_10 $$ String packageDirName = packageOnly.replace('.', '/') --> Line_11 $$ Enumeration<URL> dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName) [FD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_12 $$ while (dirs.hasMoreElements()) [CD]
Line_11 $$ Enumeration<URL> dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName) --> Line_12 $$ while (dirs.hasMoreElements()) [FD]
Line_12 $$ while (dirs.hasMoreElements()) --> Line_13 $$ URL url = dirs.nextElement() [CD]
Line_11 $$ Enumeration<URL> dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName) --> Line_13 $$ URL url = dirs.nextElement() [FD]
Line_12 $$ while (dirs.hasMoreElements()) --> Line_14 $$ String protocol = url.getProtocol() [CD]
Line_13 $$ URL url = dirs.nextElement() --> Line_14 $$ String protocol = url.getProtocol() [FD]
Line_12 $$ while (dirs.hasMoreElements()) --> Line_15 $$ if (!matchTestClasspath(url, packageDirName, recursive)) [CD]
Line_13 $$ URL url = dirs.nextElement() --> Line_15 $$ if (!matchTestClasspath(url, packageDirName, recursive)) [FD]
Line_10 $$ String packageDirName = packageOnly.replace('.', '/') --> Line_15 $$ if (!matchTestClasspath(url, packageDirName, recursive)) [FD]
Line_4 $$ boolean recursive = false --> Line_15 $$ if (!matchTestClasspath(url, packageDirName, recursive)) [FD]
Line_7 $$ recursive = true --> Line_15 $$ if (!matchTestClasspath(url, packageDirName, recursive)) [FD]
Line_12 $$ while (dirs.hasMoreElements()) --> Line_18 $$ if ("file".equals(protocol)) [CD]
Line_14 $$ String protocol = url.getProtocol() --> Line_18 $$ if ("file".equals(protocol)) [FD]
Line_18 $$ if ("file".equals(protocol)) --> Line_19 $$ findClassesInDirPackage(packageOnly, included, excluded, URLDecoder.decode(url.getFile(), "UTF-8"), recursive, vResult) [CD]
Line_3 $$ String packageOnly = packageName --> Line_19 $$ findClassesInDirPackage(packageOnly, included, excluded, URLDecoder.decode(url.getFile(), "UTF-8"), recursive, vResult) [FD]
Line_6 $$ packageOnly = packageName.substring(0, packageName.lastIndexOf(".*")) --> Line_19 $$ findClassesInDirPackage(packageOnly, included, excluded, URLDecoder.decode(url.getFile(), "UTF-8"), recursive, vResult) [FD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_19 $$ findClassesInDirPackage(packageOnly, included, excluded, URLDecoder.decode(url.getFile(), "UTF-8"), recursive, vResult) [FD]
Line_4 $$ boolean recursive = false --> Line_19 $$ findClassesInDirPackage(packageOnly, included, excluded, URLDecoder.decode(url.getFile(), "UTF-8"), recursive, vResult) [FD]
Line_7 $$ recursive = true --> Line_19 $$ findClassesInDirPackage(packageOnly, included, excluded, URLDecoder.decode(url.getFile(), "UTF-8"), recursive, vResult) [FD]
Line_9 $$ List<String> vResult = new ArrayList<String>() --> Line_19 $$ findClassesInDirPackage(packageOnly, included, excluded, URLDecoder.decode(url.getFile(), "UTF-8"), recursive, vResult) [FD]
Line_13 $$ URL url = dirs.nextElement() --> Line_19 $$ findClassesInDirPackage(packageOnly, included, excluded, URLDecoder.decode(url.getFile(), "UTF-8"), recursive, vResult) [FD]
Line_18 $$ if ("file".equals(protocol)) --> Line_20 $$ if ("jar".equals(protocol)) [CD]
Line_14 $$ String protocol = url.getProtocol() --> Line_20 $$ if ("jar".equals(protocol)) [FD]
Line_20 $$ if ("jar".equals(protocol)) --> Line_21 $$ JarFile jar = ((JarURLConnection) url.openConnection()).getJarFile() [CD]
Line_13 $$ URL url = dirs.nextElement() --> Line_21 $$ JarFile jar = ((JarURLConnection) url.openConnection()).getJarFile() [FD]
Line_20 $$ if ("jar".equals(protocol)) --> Line_22 $$ Enumeration<JarEntry> entries = jar.entries() [CD]
Line_21 $$ JarFile jar = ((JarURLConnection) url.openConnection()).getJarFile() --> Line_22 $$ Enumeration<JarEntry> entries = jar.entries() [FD]
Line_20 $$ if ("jar".equals(protocol)) --> Line_23 $$ while (entries.hasMoreElements()) [CD]
Line_23 $$ while (entries.hasMoreElements()) --> Line_24 $$ JarEntry entry = entries.nextElement() [CD]
Line_23 $$ while (entries.hasMoreElements()) --> Line_25 $$ String name = entry.getName() [CD]
Line_23 $$ while (entries.hasMoreElements()) --> Line_26 $$ if (name.charAt(0) == '/') [CD]
Line_25 $$ String name = entry.getName() --> Line_26 $$ if (name.charAt(0) == '/') [FD]
Line_26 $$ if (name.charAt(0) == '/') --> Line_27 $$ name = name.substring(1) [CD]
Line_25 $$ String name = entry.getName() --> Line_27 $$ name = name.substring(1) [FD]
Line_23 $$ while (entries.hasMoreElements()) --> Line_29 $$ if (name.startsWith(packageDirName)) [CD]
Line_25 $$ String name = entry.getName() --> Line_29 $$ if (name.startsWith(packageDirName)) [FD]
Line_27 $$ name = name.substring(1) --> Line_29 $$ if (name.startsWith(packageDirName)) [FD]
Line_10 $$ String packageDirName = packageOnly.replace('.', '/') --> Line_29 $$ if (name.startsWith(packageDirName)) [FD]
Line_29 $$ if (name.startsWith(packageDirName)) --> Line_30 $$ int idx = name.lastIndexOf('/') [CD]
Line_25 $$ String name = entry.getName() --> Line_30 $$ int idx = name.lastIndexOf('/') [FD]
Line_27 $$ name = name.substring(1) --> Line_30 $$ int idx = name.lastIndexOf('/') [FD]
Line_29 $$ if (name.startsWith(packageDirName)) --> Line_31 $$ if (idx != -1) [CD]
Line_30 $$ int idx = name.lastIndexOf('/') --> Line_31 $$ if (idx != -1) [FD]
Line_31 $$ if (idx != -1) --> Line_32 $$ packageName = name.substring(0, idx).replace('/', '.') [CD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_32 $$ packageName = name.substring(0, idx).replace('/', '.') [FD]
Line_25 $$ String name = entry.getName() --> Line_32 $$ packageName = name.substring(0, idx).replace('/', '.') [FD]
Line_27 $$ name = name.substring(1) --> Line_32 $$ packageName = name.substring(0, idx).replace('/', '.') [FD]
Line_30 $$ int idx = name.lastIndexOf('/') --> Line_32 $$ packageName = name.substring(0, idx).replace('/', '.') [FD]
Line_29 $$ if (name.startsWith(packageDirName)) --> Line_34 $$ Utils.log("PackageUtils", 4, "Package name is " + packageName) [CD]
Line_29 $$ if (name.startsWith(packageDirName)) --> Line_35 $$ if ((idx != -1) || recursive) [CD]
Line_4 $$ boolean recursive = false --> Line_35 $$ if ((idx != -1) || recursive) [FD]
Line_7 $$ recursive = true --> Line_35 $$ if ((idx != -1) || recursive) [FD]
Line_35 $$ if ((idx != -1) || recursive) --> Line_36 $$ if (name.endsWith(".class") && !entry.isDirectory()) [CD]
Line_25 $$ String name = entry.getName() --> Line_36 $$ if (name.endsWith(".class") && !entry.isDirectory()) [FD]
Line_27 $$ name = name.substring(1) --> Line_36 $$ if (name.endsWith(".class") && !entry.isDirectory()) [FD]
Line_25 $$ String name = entry.getName() --> Line_37 $$ String className = name.substring(packageName.length() + 1, name.length() - 6) [FD]
Line_27 $$ name = name.substring(1) --> Line_37 $$ String className = name.substring(packageName.length() + 1, name.length() - 6) [FD]
Line_32 $$ packageName = name.substring(0, idx).replace('/', '.') --> Line_37 $$ String className = name.substring(packageName.length() + 1, name.length() - 6) [FD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_37 $$ String className = name.substring(packageName.length() + 1, name.length() - 6) [FD]
Line_32 $$ packageName = name.substring(0, idx).replace('/', '.') --> Line_39 $$ includeOrExcludeClass(packageName, className, included, excluded, vResult) [FD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_39 $$ includeOrExcludeClass(packageName, className, included, excluded, vResult) [FD]
Line_9 $$ List<String> vResult = new ArrayList<String>() --> Line_39 $$ includeOrExcludeClass(packageName, className, included, excluded, vResult) [FD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_46 $$ String[] result = vResult.toArray(new String[vResult.size()]) [CD]
Line_9 $$ List<String> vResult = new ArrayList<String>() --> Line_46 $$ String[] result = vResult.toArray(new String[vResult.size()]) [FD]
Line_2 $$ public static String[] findClassesInPackage(String packageName, List<String> included, List<String> excluded) throws IOException --> Line_47 $$ return result [CD]
Line_27 $$ name = name.substring(1) --> Line_26 $$ if (name.charAt(0) == '/') [FD]
