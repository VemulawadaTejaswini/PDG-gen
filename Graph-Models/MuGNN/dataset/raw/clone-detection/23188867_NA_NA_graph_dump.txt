Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_3 $$ TestCase.assertNotNull(ui) [CD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_3 $$ TestCase.assertNotNull(ui) [FD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_4 $$ TestCase.assertNotNull(zipFileName) [CD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_4 $$ TestCase.assertNotNull(zipFileName) [FD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_5 $$ TestCase.assertFalse(zipFileName.trim().length() == 0) [CD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_5 $$ TestCase.assertFalse(zipFileName.trim().length() == 0) [FD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_6 $$ TestCase.assertNotNull(filesToZip) [CD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_6 $$ TestCase.assertNotNull(filesToZip) [FD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_7 $$ TestCase.assertNotNull(timestamp) [CD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_7 $$ TestCase.assertNotNull(timestamp) [FD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_8 $$ String nameCopy = zipFileName [CD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_9 $$ if (nameCopy.endsWith(".zip")) [CD]
Line_8 $$ String nameCopy = zipFileName --> Line_9 $$ if (nameCopy.endsWith(".zip")) [FD]
Line_9 $$ if (nameCopy.endsWith(".zip")) --> Line_10 $$ nameCopy = nameCopy.substring(0, zipFileName.length() - 4) [CD]
Line_8 $$ String nameCopy = zipFileName --> Line_10 $$ nameCopy = nameCopy.substring(0, zipFileName.length() - 4) [FD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_10 $$ nameCopy = nameCopy.substring(0, zipFileName.length() - 4) [FD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_12 $$ nameCopy = nameCopy + "_" + timestamp.toString() + ".zip" [CD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_12 $$ nameCopy = nameCopy + "_" + timestamp.toString() + ".zip" [FD]
Line_8 $$ String nameCopy = zipFileName --> Line_12 $$ nameCopy = nameCopy + "_" + timestamp.toString() + ".zip" [FD]
Line_10 $$ nameCopy = nameCopy.substring(0, zipFileName.length() - 4) --> Line_12 $$ nameCopy = nameCopy + "_" + timestamp.toString() + ".zip" [FD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_13 $$ final String finalZip = nameCopy [CD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_14 $$ IWorkspaceRunnable noResourceChangedEventsRunner = new IWorkspaceRunnable() [CD]
Line_17 $$ Map<String, File> projectFiles = new HashMap<String, File>() --> Line_20 $$ projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter)) [FD]
Line_19 $$ for (File nextLocation : filesToZip) --> Line_20 $$ projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter)) [FD]
Line_18 $$ IPath basePath = new Path("/") --> Line_20 $$ projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter)) [FD]
Line_2 $$ public void createZipCopy(IUIContext ui, final String zipFileName, final File[] filesToZip, final FilenameFilter fileFilter, Timestamp timestamp) --> Line_20 $$ projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter)) [FD]
Line_17 $$ Map<String, File> projectFiles = new HashMap<String, File>() --> Line_22 $$ if (projectFiles.isEmpty()) [FD]
Line_22 $$ if (projectFiles.isEmpty()) --> Line_23 $$ PlatformActivator.logDebug("Zip file (" + zipFileName + ") not created because there were no files to zip") [CD]
Line_22 $$ if (projectFiles.isEmpty()) --> Line_24 $$ return [CD]
Line_26 $$ IPath resultsPath = PlatformActivator.getDefault().getResultsPath() --> Line_27 $$ File copyRoot = resultsPath.toFile() [FD]
Line_27 $$ File copyRoot = resultsPath.toFile() --> Line_28 $$ copyRoot.mkdirs() [FD]
Line_26 $$ IPath resultsPath = PlatformActivator.getDefault().getResultsPath() --> Line_29 $$ IPath zipFilePath = resultsPath.append(new Path(finalZip)) [FD]
Line_29 $$ IPath zipFilePath = resultsPath.append(new Path(finalZip)) --> Line_30 $$ String zipFileName = zipFilePath.toPortableString() [FD]
Line_31 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_33 $$ out.setLevel(Deflater.DEFAULT_COMPRESSION) [FD]
Line_17 $$ Map<String, File> projectFiles = new HashMap<String, File>() --> Line_34 $$ for (String filePath : projectFiles.keySet()) [FD]
Line_17 $$ Map<String, File> projectFiles = new HashMap<String, File>() --> Line_35 $$ File nextFile = projectFiles.get(filePath) [FD]
Line_34 $$ for (String filePath : projectFiles.keySet()) --> Line_35 $$ File nextFile = projectFiles.get(filePath) [FD]
Line_31 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_38 $$ out.putNextEntry(new ZipEntry(filePath)) [FD]
Line_36 $$ FileInputStream fin = new FileInputStream(nextFile) --> Line_41 $$ int bread = fin.read(bin, 0, 4096) [FD]
Line_40 $$ byte[] bin = new byte[4096] --> Line_41 $$ int bread = fin.read(bin, 0, 4096) [FD]
Line_41 $$ int bread = fin.read(bin, 0, 4096) --> Line_42 $$ while (bread != -1) [FD]
Line_42 $$ while (bread != -1) --> Line_43 $$ out.write(bin, 0, bread) [CD]
Line_31 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_43 $$ out.write(bin, 0, bread) [FD]
Line_40 $$ byte[] bin = new byte[4096] --> Line_43 $$ out.write(bin, 0, bread) [FD]
Line_41 $$ int bread = fin.read(bin, 0, 4096) --> Line_43 $$ out.write(bin, 0, bread) [FD]
Line_42 $$ while (bread != -1) --> Line_44 $$ bread = fin.read(bin, 0, 4096) [CD]
Line_41 $$ int bread = fin.read(bin, 0, 4096) --> Line_44 $$ bread = fin.read(bin, 0, 4096) [FD]
Line_36 $$ FileInputStream fin = new FileInputStream(nextFile) --> Line_44 $$ bread = fin.read(bin, 0, 4096) [FD]
Line_40 $$ byte[] bin = new byte[4096] --> Line_44 $$ bread = fin.read(bin, 0, 4096) [FD]
Line_31 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_47 $$ out.closeEntry() [FD]
Line_36 $$ FileInputStream fin = new FileInputStream(nextFile) --> Line_50 $$ fin.close() [FD]
Line_31 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_54 $$ out.close() [FD]
Line_14 $$ IWorkspaceRunnable noResourceChangedEventsRunner = new IWorkspaceRunnable() --> Line_67 $$ workspace.run(noResourceChangedEventsRunner, workspace.getRoot(), IWorkspace.AVOID_UPDATE, new NullProgressMonitor()) [FD]
Line_44 $$ bread = fin.read(bin, 0, 4096) --> Line_42 $$ while (bread != -1) [FD]
Line_44 $$ bread = fin.read(bin, 0, 4096) --> Line_43 $$ out.write(bin, 0, bread) [FD]
