Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_3 $$ long plussQuotaSize = 0 [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_4 $$ if (baseDirStr.endsWith(sep)) [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_4 $$ if (baseDirStr.endsWith(sep)) [FD]
Line_4 $$ if (baseDirStr.endsWith(sep)) --> Line_5 $$ baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1) [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_5 $$ baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1) [FD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_7 $$ if (destDirStr.endsWith(sep)) [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_7 $$ if (destDirStr.endsWith(sep)) [FD]
Line_7 $$ if (destDirStr.endsWith(sep)) --> Line_8 $$ destDirStr = destDirStr.substring(0, destDirStr.length() - 1) [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_8 $$ destDirStr = destDirStr.substring(0, destDirStr.length() - 1) [FD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_10 $$ FileUtils.getInstance().createDirectory(destDirStr) [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_10 $$ FileUtils.getInstance().createDirectory(destDirStr) [FD]
Line_8 $$ destDirStr = destDirStr.substring(0, destDirStr.length() - 1) --> Line_10 $$ FileUtils.getInstance().createDirectory(destDirStr) [FD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_11 $$ BufferedInputStream in = null [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_12 $$ BufferedOutputStream out = null [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_13 $$ byte dataBuff[] = new byte[bufferSize] [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_14 $$ File baseDir = new File(baseDirStr) [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_15 $$ baseDir.mkdirs() [CD]
Line_14 $$ File baseDir = new File(baseDirStr) --> Line_15 $$ baseDir.mkdirs() [FD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_16 $$ if (!baseDir.exists()) [CD]
Line_14 $$ File baseDir = new File(baseDirStr) --> Line_16 $$ if (!baseDir.exists()) [FD]
Line_16 $$ if (!baseDir.exists()) --> Line_17 $$ createDirectory(baseDirStr) [CD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_17 $$ createDirectory(baseDirStr) [FD]
Line_5 $$ baseDirStr = baseDirStr.substring(0, baseDirStr.length() - 1) --> Line_17 $$ createDirectory(baseDirStr) [FD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_19 $$ if ((baseDir.exists()) && (baseDir.isDirectory())) [CD]
Line_14 $$ File baseDir = new File(baseDirStr) --> Line_19 $$ if ((baseDir.exists()) && (baseDir.isDirectory())) [FD]
Line_19 $$ if ((baseDir.exists()) && (baseDir.isDirectory())) --> Line_20 $$ String[] entryList = baseDir.list() [CD]
Line_14 $$ File baseDir = new File(baseDirStr) --> Line_20 $$ String[] entryList = baseDir.list() [FD]
Line_19 $$ if ((baseDir.exists()) && (baseDir.isDirectory())) --> Line_21 $$ if (entryList.length > 0) [CD]
Line_21 $$ if (entryList.length > 0) --> Line_22 $$ for (int pos = 0; pos < entryList.length; pos++) [CD]
Line_22 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_23 $$ String entryName = entryList[pos] [CD]
Line_22 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_24 $$ String oldPathFileName = baseDirStr + sep + entryName [CD]
Line_22 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_25 $$ File entryFile = new File(oldPathFileName) [CD]
Line_22 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_26 $$ if (entryFile.isFile()) [CD]
Line_25 $$ File entryFile = new File(oldPathFileName) --> Line_26 $$ if (entryFile.isFile()) [FD]
Line_26 $$ if (entryFile.isFile()) --> Line_27 $$ String newPathFileName = destDirStr + sep + entryName [CD]
Line_26 $$ if (entryFile.isFile()) --> Line_28 $$ File newFile = new File(newPathFileName) [CD]
Line_26 $$ if (entryFile.isFile()) --> Line_29 $$ if (newFile.exists()) [CD]
Line_28 $$ File newFile = new File(newPathFileName) --> Line_29 $$ if (newFile.exists()) [FD]
Line_29 $$ if (newFile.exists()) --> Line_30 $$ plussQuotaSize -= newFile.length() [CD]
Line_3 $$ long plussQuotaSize = 0 --> Line_30 $$ plussQuotaSize -= newFile.length() [FD]
Line_28 $$ File newFile = new File(newPathFileName) --> Line_30 $$ plussQuotaSize -= newFile.length() [FD]
Line_29 $$ if (newFile.exists()) --> Line_31 $$ newFile.delete() [CD]
Line_28 $$ File newFile = new File(newPathFileName) --> Line_31 $$ newFile.delete() [FD]
Line_26 $$ if (entryFile.isFile()) --> Line_33 $$ in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize) [CD]
Line_11 $$ BufferedInputStream in = null --> Line_33 $$ in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize) [FD]
Line_26 $$ if (entryFile.isFile()) --> Line_34 $$ out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize) [CD]
Line_12 $$ BufferedOutputStream out = null --> Line_34 $$ out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize) [FD]
Line_26 $$ if (entryFile.isFile()) --> Line_35 $$ int readLen [CD]
Line_26 $$ if (entryFile.isFile()) --> Line_36 $$ while ((readLen = in.read(dataBuff)) > 0) [CD]
Line_35 $$ int readLen --> Line_36 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_33 $$ in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize) --> Line_36 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_11 $$ BufferedInputStream in = null --> Line_36 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_36 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_37 $$ out.write(dataBuff, 0, readLen) [CD]
Line_36 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_37 $$ out.write(dataBuff, 0, readLen) [FD]
Line_34 $$ out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize) --> Line_37 $$ out.write(dataBuff, 0, readLen) [FD]
Line_12 $$ BufferedOutputStream out = null --> Line_37 $$ out.write(dataBuff, 0, readLen) [FD]
Line_35 $$ int readLen --> Line_37 $$ out.write(dataBuff, 0, readLen) [FD]
Line_36 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_38 $$ plussQuotaSize += readLen [CD]
Line_36 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_38 $$ plussQuotaSize += readLen [FD]
Line_30 $$ plussQuotaSize -= newFile.length() --> Line_38 $$ plussQuotaSize += readLen [FD]
Line_3 $$ long plussQuotaSize = 0 --> Line_38 $$ plussQuotaSize += readLen [FD]
Line_35 $$ int readLen --> Line_38 $$ plussQuotaSize += readLen [FD]
Line_26 $$ if (entryFile.isFile()) --> Line_40 $$ out.flush() [CD]
Line_34 $$ out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize) --> Line_40 $$ out.flush() [FD]
Line_12 $$ BufferedOutputStream out = null --> Line_40 $$ out.flush() [FD]
Line_26 $$ if (entryFile.isFile()) --> Line_41 $$ in.close() [CD]
Line_33 $$ in = new BufferedInputStream(new FileInputStream(oldPathFileName), bufferSize) --> Line_41 $$ in.close() [FD]
Line_11 $$ BufferedInputStream in = null --> Line_41 $$ in.close() [FD]
Line_26 $$ if (entryFile.isFile()) --> Line_42 $$ out.close() [CD]
Line_34 $$ out = new BufferedOutputStream(new FileOutputStream(newPathFileName), bufferSize) --> Line_42 $$ out.close() [FD]
Line_12 $$ BufferedOutputStream out = null --> Line_42 $$ out.close() [FD]
Line_2 $$ public long copyDirAllFilesToDirectory(String baseDirStr, String destDirStr) throws Exception --> Line_49 $$ return plussQuotaSize [CD]
