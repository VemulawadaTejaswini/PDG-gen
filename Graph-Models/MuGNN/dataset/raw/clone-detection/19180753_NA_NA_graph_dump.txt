Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_4 $$ final URL url = buildURL(ticker, from, to) [FD]
Line_4 $$ final URL url = buildURL(ticker, from, to) --> Line_5 $$ final InputStream is = url.openStream() [FD]
Line_7 $$ final PrintWriter tw = new PrintWriter(new FileWriter(output)) --> Line_8 $$ tw.println("date,time,open price,high price,low price," + "close price,volume,adjusted price") [FD]
Line_6 $$ final ReadCSV csv = new ReadCSV(is, true, CSVFormat.ENGLISH) --> Line_9 $$ while (csv.next() && !shouldStop()) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_10 $$ final Date date = csv.getDate("date") [CD]
Line_6 $$ final ReadCSV csv = new ReadCSV(is, true, CSVFormat.ENGLISH) --> Line_10 $$ final Date date = csv.getDate("date") [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_11 $$ final double adjClose = csv.getDouble("adj close") [CD]
Line_6 $$ final ReadCSV csv = new ReadCSV(is, true, CSVFormat.ENGLISH) --> Line_11 $$ final double adjClose = csv.getDouble("adj close") [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_12 $$ final double open = csv.getDouble("open") [CD]
Line_6 $$ final ReadCSV csv = new ReadCSV(is, true, CSVFormat.ENGLISH) --> Line_12 $$ final double open = csv.getDouble("open") [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_13 $$ final double close = csv.getDouble("close") [CD]
Line_6 $$ final ReadCSV csv = new ReadCSV(is, true, CSVFormat.ENGLISH) --> Line_13 $$ final double close = csv.getDouble("close") [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_14 $$ final double high = csv.getDouble("high") [CD]
Line_6 $$ final ReadCSV csv = new ReadCSV(is, true, CSVFormat.ENGLISH) --> Line_14 $$ final double high = csv.getDouble("high") [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_15 $$ final double low = csv.getDouble("low") [CD]
Line_6 $$ final ReadCSV csv = new ReadCSV(is, true, CSVFormat.ENGLISH) --> Line_15 $$ final double low = csv.getDouble("low") [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_16 $$ final double volume = csv.getDouble("volume") [CD]
Line_6 $$ final ReadCSV csv = new ReadCSV(is, true, CSVFormat.ENGLISH) --> Line_16 $$ final double volume = csv.getDouble("volume") [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_17 $$ final NumberFormat df = NumberFormat.getInstance() [CD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_18 $$ df.setGroupingUsed(false) [CD]
Line_17 $$ final NumberFormat df = NumberFormat.getInstance() --> Line_18 $$ df.setGroupingUsed(false) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_19 $$ final StringBuilder line = new StringBuilder() [CD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_20 $$ line.append(NumericDateUtil.date2Long(date)) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_20 $$ line.append(NumericDateUtil.date2Long(date)) [FD]
Line_10 $$ final Date date = csv.getDate("date") --> Line_20 $$ line.append(NumericDateUtil.date2Long(date)) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_21 $$ line.append(outputFormat.getSeparator()) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_21 $$ line.append(outputFormat.getSeparator()) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_21 $$ line.append(outputFormat.getSeparator()) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_22 $$ line.append(NumericDateUtil.time2Int(date)) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_22 $$ line.append(NumericDateUtil.time2Int(date)) [FD]
Line_10 $$ final Date date = csv.getDate("date") --> Line_22 $$ line.append(NumericDateUtil.time2Int(date)) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_23 $$ line.append(outputFormat.getSeparator()) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_23 $$ line.append(outputFormat.getSeparator()) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_23 $$ line.append(outputFormat.getSeparator()) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_24 $$ line.append(outputFormat.format(open, this.precision)) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_24 $$ line.append(outputFormat.format(open, this.precision)) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_24 $$ line.append(outputFormat.format(open, this.precision)) [FD]
Line_12 $$ final double open = csv.getDouble("open") --> Line_24 $$ line.append(outputFormat.format(open, this.precision)) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_25 $$ line.append(outputFormat.getSeparator()) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_25 $$ line.append(outputFormat.getSeparator()) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_25 $$ line.append(outputFormat.getSeparator()) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_26 $$ line.append(outputFormat.format(high, this.precision)) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_26 $$ line.append(outputFormat.format(high, this.precision)) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_26 $$ line.append(outputFormat.format(high, this.precision)) [FD]
Line_14 $$ final double high = csv.getDouble("high") --> Line_26 $$ line.append(outputFormat.format(high, this.precision)) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_27 $$ line.append(outputFormat.getSeparator()) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_27 $$ line.append(outputFormat.getSeparator()) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_27 $$ line.append(outputFormat.getSeparator()) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_28 $$ line.append(outputFormat.format(low, this.precision)) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_28 $$ line.append(outputFormat.format(low, this.precision)) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_28 $$ line.append(outputFormat.format(low, this.precision)) [FD]
Line_15 $$ final double low = csv.getDouble("low") --> Line_28 $$ line.append(outputFormat.format(low, this.precision)) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_29 $$ line.append(outputFormat.getSeparator()) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_29 $$ line.append(outputFormat.getSeparator()) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_29 $$ line.append(outputFormat.getSeparator()) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_30 $$ line.append(outputFormat.format(close, this.precision)) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_30 $$ line.append(outputFormat.format(close, this.precision)) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_30 $$ line.append(outputFormat.format(close, this.precision)) [FD]
Line_13 $$ final double close = csv.getDouble("close") --> Line_30 $$ line.append(outputFormat.format(close, this.precision)) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_31 $$ line.append(outputFormat.getSeparator()) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_31 $$ line.append(outputFormat.getSeparator()) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_31 $$ line.append(outputFormat.getSeparator()) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_32 $$ line.append(df.format(volume)) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_32 $$ line.append(df.format(volume)) [FD]
Line_17 $$ final NumberFormat df = NumberFormat.getInstance() --> Line_32 $$ line.append(df.format(volume)) [FD]
Line_16 $$ final double volume = csv.getDouble("volume") --> Line_32 $$ line.append(df.format(volume)) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_33 $$ line.append(outputFormat.getSeparator()) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_33 $$ line.append(outputFormat.getSeparator()) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_33 $$ line.append(outputFormat.getSeparator()) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_34 $$ line.append(outputFormat.format(adjClose, this.precision)) [CD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_34 $$ line.append(outputFormat.format(adjClose, this.precision)) [FD]
Line_2 $$ public final void loadAllData(final String ticker, final File output, final CSVFormat outputFormat, final Date from, final Date to) --> Line_34 $$ line.append(outputFormat.format(adjClose, this.precision)) [FD]
Line_11 $$ final double adjClose = csv.getDouble("adj close") --> Line_34 $$ line.append(outputFormat.format(adjClose, this.precision)) [FD]
Line_9 $$ while (csv.next() && !shouldStop()) --> Line_35 $$ tw.println(line.toString()) [CD]
Line_7 $$ final PrintWriter tw = new PrintWriter(new FileWriter(output)) --> Line_35 $$ tw.println(line.toString()) [FD]
Line_19 $$ final StringBuilder line = new StringBuilder() --> Line_35 $$ tw.println(line.toString()) [FD]
Line_7 $$ final PrintWriter tw = new PrintWriter(new FileWriter(output)) --> Line_37 $$ tw.close() [FD]
