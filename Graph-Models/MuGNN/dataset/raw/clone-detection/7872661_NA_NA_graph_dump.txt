Line_5 $$ FileChannel inC1 = new FileInputStream(inFile1).getChannel() --> Line_6 $$ int fileSize1 = (int) inC1.size() [FD]
Line_5 $$ FileChannel inC1 = new FileInputStream(inFile1).getChannel() --> Line_8 $$ ByteBuffer mappedBuffer = inC1.map(FileChannel.MapMode.READ_ONLY, 0, fileSize1) [FD]
Line_6 $$ int fileSize1 = (int) inC1.size() --> Line_8 $$ ByteBuffer mappedBuffer = inC1.map(FileChannel.MapMode.READ_ONLY, 0, fileSize1) [FD]
Line_11 $$ FileChannel inC2 = new FileInputStream(inFile2).getChannel() --> Line_12 $$ int fileSize2 = (int) inC2.size() [FD]
Line_12 $$ int fileSize2 = (int) inC2.size() --> Line_13 $$ System.out.println(fileSize2) [FD]
Line_16 $$ for (int i = 0; i < 1; i++) --> Line_17 $$ ByteBuffer locBuffer = inC2.map(FileChannel.MapMode.READ_ONLY, i * fileSize2, fileSize2) [CD]
Line_11 $$ FileChannel inC2 = new FileInputStream(inFile2).getChannel() --> Line_17 $$ ByteBuffer locBuffer = inC2.map(FileChannel.MapMode.READ_ONLY, i * fileSize2, fileSize2) [FD]
Line_12 $$ int fileSize2 = (int) inC2.size() --> Line_17 $$ ByteBuffer locBuffer = inC2.map(FileChannel.MapMode.READ_ONLY, i * fileSize2, fileSize2) [FD]
Line_16 $$ for (int i = 0; i < 1; i++) --> Line_18 $$ System.out.println("Loaded cust location file chunk: " + i) [CD]
Line_16 $$ for (int i = 0; i < 1; i++) --> Line_19 $$ while (locBuffer.hasRemaining()) [CD]
Line_17 $$ ByteBuffer locBuffer = inC2.map(FileChannel.MapMode.READ_ONLY, i * fileSize2, fileSize2) --> Line_19 $$ while (locBuffer.hasRemaining()) [FD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_20 $$ int locationToRead = locBuffer.getInt() [CD]
Line_17 $$ ByteBuffer locBuffer = inC2.map(FileChannel.MapMode.READ_ONLY, i * fileSize2, fileSize2) --> Line_20 $$ int locationToRead = locBuffer.getInt() [FD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_21 $$ mappedBuffer.position((locationToRead - 1) * 7) [CD]
Line_8 $$ ByteBuffer mappedBuffer = inC1.map(FileChannel.MapMode.READ_ONLY, 0, fileSize1) --> Line_21 $$ mappedBuffer.position((locationToRead - 1) * 7) [FD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_22 $$ short movieName = mappedBuffer.getShort() [CD]
Line_8 $$ ByteBuffer mappedBuffer = inC1.map(FileChannel.MapMode.READ_ONLY, 0, fileSize1) --> Line_22 $$ short movieName = mappedBuffer.getShort() [FD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_23 $$ int customer = mappedBuffer.getInt() [CD]
Line_8 $$ ByteBuffer mappedBuffer = inC1.map(FileChannel.MapMode.READ_ONLY, 0, fileSize1) --> Line_23 $$ int customer = mappedBuffer.getInt() [FD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_24 $$ byte rating = mappedBuffer.get() [CD]
Line_8 $$ ByteBuffer mappedBuffer = inC1.map(FileChannel.MapMode.READ_ONLY, 0, fileSize1) --> Line_24 $$ byte rating = mappedBuffer.get() [FD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_25 $$ ByteBuffer outBuf = ByteBuffer.allocate(3) [CD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_26 $$ outBuf.putShort(movieName) [CD]
Line_25 $$ ByteBuffer outBuf = ByteBuffer.allocate(3) --> Line_26 $$ outBuf.putShort(movieName) [FD]
Line_22 $$ short movieName = mappedBuffer.getShort() --> Line_26 $$ outBuf.putShort(movieName) [FD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_27 $$ outBuf.put(rating) [CD]
Line_25 $$ ByteBuffer outBuf = ByteBuffer.allocate(3) --> Line_27 $$ outBuf.put(rating) [FD]
Line_24 $$ byte rating = mappedBuffer.get() --> Line_27 $$ outBuf.put(rating) [FD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_28 $$ outBuf.flip() [CD]
Line_25 $$ ByteBuffer outBuf = ByteBuffer.allocate(3) --> Line_28 $$ outBuf.flip() [FD]
Line_19 $$ while (locBuffer.hasRemaining()) --> Line_29 $$ outC.write(outBuf) [CD]
Line_15 $$ FileChannel outC = new FileOutputStream(outFile, true).getChannel() --> Line_29 $$ outC.write(outBuf) [FD]
Line_25 $$ ByteBuffer outBuf = ByteBuffer.allocate(3) --> Line_29 $$ outC.write(outBuf) [FD]
Line_8 $$ ByteBuffer mappedBuffer = inC1.map(FileChannel.MapMode.READ_ONLY, 0, fileSize1) --> Line_32 $$ mappedBuffer.clear() [FD]
Line_5 $$ FileChannel inC1 = new FileInputStream(inFile1).getChannel() --> Line_33 $$ inC1.close() [FD]
Line_11 $$ FileChannel inC2 = new FileInputStream(inFile2).getChannel() --> Line_34 $$ inC2.close() [FD]
Line_15 $$ FileChannel outC = new FileOutputStream(outFile, true).getChannel() --> Line_35 $$ outC.close() [FD]
