Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_3 $$ if (!(overwrite || SelectorUtils.isOutOfDate(source, dest, FileUtils.getFileUtils().getFileTimestampGranularity()))) [CD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_3 $$ if (!(overwrite || SelectorUtils.isOutOfDate(source, dest, FileUtils.getFileUtils().getFileTimestampGranularity()))) [FD]
Line_3 $$ if (!(overwrite || SelectorUtils.isOutOfDate(source, dest, FileUtils.getFileUtils().getFileTimestampGranularity()))) --> Line_4 $$ return [CD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_6 $$ final boolean filterSetsAvailable = (filters != null && filters.hasFilters()) [CD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_6 $$ final boolean filterSetsAvailable = (filters != null && filters.hasFilters()) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_7 $$ final boolean filterChainsAvailable = (filterChains != null && filterChains.size() > 0) [CD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_7 $$ final boolean filterChainsAvailable = (filterChains != null && filterChains.size() > 0) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_8 $$ if (filterSetsAvailable) [CD]
Line_8 $$ if (filterSetsAvailable) --> Line_9 $$ BufferedReader in = null [CD]
Line_8 $$ if (filterSetsAvailable) --> Line_10 $$ BufferedWriter out = null [CD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_13 $$ if (inputEncoding == null) [FD]
Line_13 $$ if (inputEncoding == null) --> Line_14 $$ isr = new InputStreamReader(source.getInputStream()) [CD]
Line_12 $$ InputStreamReader isr = null --> Line_14 $$ isr = new InputStreamReader(source.getInputStream()) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_14 $$ isr = new InputStreamReader(source.getInputStream()) [FD]
Line_13 $$ if (inputEncoding == null) --> Line_16 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [CD]
Line_12 $$ InputStreamReader isr = null --> Line_16 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [FD]
Line_14 $$ isr = new InputStreamReader(source.getInputStream()) --> Line_16 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_16 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [FD]
Line_9 $$ BufferedReader in = null --> Line_18 $$ in = new BufferedReader(isr) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_19 $$ OutputStream os = getOutputStream(dest, append, project) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_21 $$ if (outputEncoding == null) [FD]
Line_21 $$ if (outputEncoding == null) --> Line_22 $$ osw = new OutputStreamWriter(os) [CD]
Line_20 $$ OutputStreamWriter osw --> Line_22 $$ osw = new OutputStreamWriter(os) [FD]
Line_21 $$ if (outputEncoding == null) --> Line_24 $$ osw = new OutputStreamWriter(os, outputEncoding) [CD]
Line_20 $$ OutputStreamWriter osw --> Line_24 $$ osw = new OutputStreamWriter(os, outputEncoding) [FD]
Line_22 $$ osw = new OutputStreamWriter(os) --> Line_24 $$ osw = new OutputStreamWriter(os, outputEncoding) [FD]
Line_10 $$ BufferedWriter out = null --> Line_26 $$ out = new BufferedWriter(osw) [FD]
Line_27 $$ if (filterChainsAvailable) --> Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() [CD]
Line_27 $$ if (filterChainsAvailable) --> Line_29 $$ crh.setBufferSize(FileUtils.BUF_SIZE) [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_29 $$ crh.setBufferSize(FileUtils.BUF_SIZE) [FD]
Line_27 $$ if (filterChainsAvailable) --> Line_30 $$ crh.setPrimaryReader(in) [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_30 $$ crh.setPrimaryReader(in) [FD]
Line_9 $$ BufferedReader in = null --> Line_30 $$ crh.setPrimaryReader(in) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_30 $$ crh.setPrimaryReader(in) [FD]
Line_27 $$ if (filterChainsAvailable) --> Line_31 $$ crh.setFilterChains(filterChains) [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_31 $$ crh.setFilterChains(filterChains) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_31 $$ crh.setFilterChains(filterChains) [FD]
Line_27 $$ if (filterChainsAvailable) --> Line_32 $$ crh.setProject(project) [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_32 $$ crh.setProject(project) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_32 $$ crh.setProject(project) [FD]
Line_27 $$ if (filterChainsAvailable) --> Line_33 $$ Reader rdr = crh.getAssembledReader() [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_33 $$ Reader rdr = crh.getAssembledReader() [FD]
Line_27 $$ if (filterChainsAvailable) --> Line_34 $$ in = new BufferedReader(rdr) [CD]
Line_9 $$ BufferedReader in = null --> Line_34 $$ in = new BufferedReader(rdr) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_34 $$ in = new BufferedReader(rdr) [FD]
Line_36 $$ LineTokenizer lineTokenizer = new LineTokenizer() --> Line_37 $$ lineTokenizer.setIncludeDelims(true) [FD]
Line_36 $$ LineTokenizer lineTokenizer = new LineTokenizer() --> Line_39 $$ String line = lineTokenizer.getToken(in) [FD]
Line_9 $$ BufferedReader in = null --> Line_39 $$ String line = lineTokenizer.getToken(in) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_39 $$ String line = lineTokenizer.getToken(in) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_39 $$ String line = lineTokenizer.getToken(in) [FD]
Line_39 $$ String line = lineTokenizer.getToken(in) --> Line_40 $$ while (line != null) [FD]
Line_40 $$ while (line != null) --> Line_41 $$ if (line.length() == 0) [CD]
Line_39 $$ String line = lineTokenizer.getToken(in) --> Line_41 $$ if (line.length() == 0) [FD]
Line_41 $$ if (line.length() == 0) --> Line_42 $$ out.newLine() [CD]
Line_10 $$ BufferedWriter out = null --> Line_42 $$ out.newLine() [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_42 $$ out.newLine() [FD]
Line_41 $$ if (line.length() == 0) --> Line_44 $$ newline = filters.replaceTokens(line) [CD]
Line_38 $$ String newline = null --> Line_44 $$ newline = filters.replaceTokens(line) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_44 $$ newline = filters.replaceTokens(line) [FD]
Line_39 $$ String line = lineTokenizer.getToken(in) --> Line_44 $$ newline = filters.replaceTokens(line) [FD]
Line_41 $$ if (line.length() == 0) --> Line_45 $$ out.write(newline) [CD]
Line_10 $$ BufferedWriter out = null --> Line_45 $$ out.write(newline) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_45 $$ out.write(newline) [FD]
Line_44 $$ newline = filters.replaceTokens(line) --> Line_45 $$ out.write(newline) [FD]
Line_38 $$ String newline = null --> Line_45 $$ out.write(newline) [FD]
Line_40 $$ while (line != null) --> Line_47 $$ line = lineTokenizer.getToken(in) [CD]
Line_39 $$ String line = lineTokenizer.getToken(in) --> Line_47 $$ line = lineTokenizer.getToken(in) [FD]
Line_36 $$ LineTokenizer lineTokenizer = new LineTokenizer() --> Line_47 $$ line = lineTokenizer.getToken(in) [FD]
Line_9 $$ BufferedReader in = null --> Line_47 $$ line = lineTokenizer.getToken(in) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_47 $$ line = lineTokenizer.getToken(in) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_47 $$ line = lineTokenizer.getToken(in) [FD]
Line_10 $$ BufferedWriter out = null --> Line_50 $$ FileUtils.close(out) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_50 $$ FileUtils.close(out) [FD]
Line_9 $$ BufferedReader in = null --> Line_51 $$ FileUtils.close(in) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_51 $$ FileUtils.close(in) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_51 $$ FileUtils.close(in) [FD]
Line_8 $$ if (filterSetsAvailable) --> Line_53 $$ if (filterChainsAvailable || (inputEncoding != null && !inputEncoding.equals(outputEncoding)) || (inputEncoding == null && outputEncoding != null)) [CD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_53 $$ if (filterChainsAvailable || (inputEncoding != null && !inputEncoding.equals(outputEncoding)) || (inputEncoding == null && outputEncoding != null)) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_58 $$ if (inputEncoding == null) [FD]
Line_58 $$ if (inputEncoding == null) --> Line_59 $$ isr = new InputStreamReader(source.getInputStream()) [CD]
Line_12 $$ InputStreamReader isr = null --> Line_59 $$ isr = new InputStreamReader(source.getInputStream()) [FD]
Line_14 $$ isr = new InputStreamReader(source.getInputStream()) --> Line_59 $$ isr = new InputStreamReader(source.getInputStream()) [FD]
Line_16 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) --> Line_59 $$ isr = new InputStreamReader(source.getInputStream()) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_59 $$ isr = new InputStreamReader(source.getInputStream()) [FD]
Line_58 $$ if (inputEncoding == null) --> Line_61 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [CD]
Line_12 $$ InputStreamReader isr = null --> Line_61 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [FD]
Line_14 $$ isr = new InputStreamReader(source.getInputStream()) --> Line_61 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [FD]
Line_16 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) --> Line_61 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [FD]
Line_59 $$ isr = new InputStreamReader(source.getInputStream()) --> Line_61 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_61 $$ isr = new InputStreamReader(source.getInputStream(), inputEncoding) [FD]
Line_9 $$ BufferedReader in = null --> Line_63 $$ in = new BufferedReader(isr) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_63 $$ in = new BufferedReader(isr) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_63 $$ in = new BufferedReader(isr) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_64 $$ OutputStream os = getOutputStream(dest, append, project) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_66 $$ if (outputEncoding == null) [FD]
Line_66 $$ if (outputEncoding == null) --> Line_67 $$ osw = new OutputStreamWriter(os) [CD]
Line_20 $$ OutputStreamWriter osw --> Line_67 $$ osw = new OutputStreamWriter(os) [FD]
Line_22 $$ osw = new OutputStreamWriter(os) --> Line_67 $$ osw = new OutputStreamWriter(os) [FD]
Line_24 $$ osw = new OutputStreamWriter(os, outputEncoding) --> Line_67 $$ osw = new OutputStreamWriter(os) [FD]
Line_66 $$ if (outputEncoding == null) --> Line_69 $$ osw = new OutputStreamWriter(os, outputEncoding) [CD]
Line_20 $$ OutputStreamWriter osw --> Line_69 $$ osw = new OutputStreamWriter(os, outputEncoding) [FD]
Line_22 $$ osw = new OutputStreamWriter(os) --> Line_69 $$ osw = new OutputStreamWriter(os, outputEncoding) [FD]
Line_24 $$ osw = new OutputStreamWriter(os, outputEncoding) --> Line_69 $$ osw = new OutputStreamWriter(os, outputEncoding) [FD]
Line_67 $$ osw = new OutputStreamWriter(os) --> Line_69 $$ osw = new OutputStreamWriter(os, outputEncoding) [FD]
Line_10 $$ BufferedWriter out = null --> Line_71 $$ out = new BufferedWriter(osw) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_71 $$ out = new BufferedWriter(osw) [FD]
Line_72 $$ if (filterChainsAvailable) --> Line_74 $$ crh.setBufferSize(FileUtils.BUF_SIZE) [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_74 $$ crh.setBufferSize(FileUtils.BUF_SIZE) [FD]
Line_72 $$ if (filterChainsAvailable) --> Line_75 $$ crh.setPrimaryReader(in) [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_75 $$ crh.setPrimaryReader(in) [FD]
Line_9 $$ BufferedReader in = null --> Line_75 $$ crh.setPrimaryReader(in) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_75 $$ crh.setPrimaryReader(in) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_75 $$ crh.setPrimaryReader(in) [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_75 $$ crh.setPrimaryReader(in) [FD]
Line_72 $$ if (filterChainsAvailable) --> Line_76 $$ crh.setFilterChains(filterChains) [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_76 $$ crh.setFilterChains(filterChains) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_76 $$ crh.setFilterChains(filterChains) [FD]
Line_72 $$ if (filterChainsAvailable) --> Line_77 $$ crh.setProject(project) [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_77 $$ crh.setProject(project) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_77 $$ crh.setProject(project) [FD]
Line_72 $$ if (filterChainsAvailable) --> Line_78 $$ Reader rdr = crh.getAssembledReader() [CD]
Line_28 $$ ChainReaderHelper crh = new ChainReaderHelper() --> Line_78 $$ Reader rdr = crh.getAssembledReader() [FD]
Line_72 $$ if (filterChainsAvailable) --> Line_79 $$ in = new BufferedReader(rdr) [CD]
Line_9 $$ BufferedReader in = null --> Line_79 $$ in = new BufferedReader(rdr) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_79 $$ in = new BufferedReader(rdr) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_79 $$ in = new BufferedReader(rdr) [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_79 $$ in = new BufferedReader(rdr) [FD]
Line_82 $$ while (true) --> Line_83 $$ int nRead = in.read(buffer, 0, buffer.length) [CD]
Line_9 $$ BufferedReader in = null --> Line_83 $$ int nRead = in.read(buffer, 0, buffer.length) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_83 $$ int nRead = in.read(buffer, 0, buffer.length) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_83 $$ int nRead = in.read(buffer, 0, buffer.length) [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_83 $$ int nRead = in.read(buffer, 0, buffer.length) [FD]
Line_79 $$ in = new BufferedReader(rdr) --> Line_83 $$ int nRead = in.read(buffer, 0, buffer.length) [FD]
Line_81 $$ char[] buffer = new char[FileUtils.BUF_SIZE] --> Line_83 $$ int nRead = in.read(buffer, 0, buffer.length) [FD]
Line_82 $$ while (true) --> Line_84 $$ if (nRead == -1) [CD]
Line_83 $$ int nRead = in.read(buffer, 0, buffer.length) --> Line_84 $$ if (nRead == -1) [FD]
Line_82 $$ while (true) --> Line_87 $$ out.write(buffer, 0, nRead) [CD]
Line_10 $$ BufferedWriter out = null --> Line_87 $$ out.write(buffer, 0, nRead) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_87 $$ out.write(buffer, 0, nRead) [FD]
Line_71 $$ out = new BufferedWriter(osw) --> Line_87 $$ out.write(buffer, 0, nRead) [FD]
Line_81 $$ char[] buffer = new char[FileUtils.BUF_SIZE] --> Line_87 $$ out.write(buffer, 0, nRead) [FD]
Line_83 $$ int nRead = in.read(buffer, 0, buffer.length) --> Line_87 $$ out.write(buffer, 0, nRead) [FD]
Line_10 $$ BufferedWriter out = null --> Line_90 $$ FileUtils.close(out) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_90 $$ FileUtils.close(out) [FD]
Line_71 $$ out = new BufferedWriter(osw) --> Line_90 $$ FileUtils.close(out) [FD]
Line_9 $$ BufferedReader in = null --> Line_91 $$ FileUtils.close(in) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_91 $$ FileUtils.close(in) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_91 $$ FileUtils.close(in) [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_91 $$ FileUtils.close(in) [FD]
Line_79 $$ in = new BufferedReader(rdr) --> Line_91 $$ FileUtils.close(in) [FD]
Line_53 $$ if (filterChainsAvailable || (inputEncoding != null && !inputEncoding.equals(outputEncoding)) || (inputEncoding == null && outputEncoding != null)) --> Line_93 $$ if (source.as(FileProvider.class) != null && dest.as(FileProvider.class) != null) [CD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_93 $$ if (source.as(FileProvider.class) != null && dest.as(FileProvider.class) != null) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_94 $$ File sourceFile = ((FileProvider) source.as(FileProvider.class)).getFile() [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_95 $$ File destFile = ((FileProvider) dest.as(FileProvider.class)).getFile() [FD]
Line_96 $$ File parent = destFile.getParentFile() --> Line_97 $$ if (parent != null && !parent.isDirectory() && !destFile.getParentFile().mkdirs()) [FD]
Line_9 $$ BufferedReader in = null --> Line_105 $$ in = new FileInputStream(sourceFile) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_105 $$ in = new FileInputStream(sourceFile) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_105 $$ in = new FileInputStream(sourceFile) [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_105 $$ in = new FileInputStream(sourceFile) [FD]
Line_79 $$ in = new BufferedReader(rdr) --> Line_105 $$ in = new FileInputStream(sourceFile) [FD]
Line_10 $$ BufferedWriter out = null --> Line_106 $$ out = new FileOutputStream(destFile) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_106 $$ out = new FileOutputStream(destFile) [FD]
Line_71 $$ out = new BufferedWriter(osw) --> Line_106 $$ out = new FileOutputStream(destFile) [FD]
Line_102 $$ FileChannel srcChannel = null --> Line_107 $$ srcChannel = in.getChannel() [FD]
Line_9 $$ BufferedReader in = null --> Line_107 $$ srcChannel = in.getChannel() [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_107 $$ srcChannel = in.getChannel() [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_107 $$ srcChannel = in.getChannel() [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_107 $$ srcChannel = in.getChannel() [FD]
Line_79 $$ in = new BufferedReader(rdr) --> Line_107 $$ srcChannel = in.getChannel() [FD]
Line_105 $$ in = new FileInputStream(sourceFile) --> Line_107 $$ srcChannel = in.getChannel() [FD]
Line_103 $$ FileChannel destChannel = null --> Line_108 $$ destChannel = out.getChannel() [FD]
Line_10 $$ BufferedWriter out = null --> Line_108 $$ destChannel = out.getChannel() [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_108 $$ destChannel = out.getChannel() [FD]
Line_71 $$ out = new BufferedWriter(osw) --> Line_108 $$ destChannel = out.getChannel() [FD]
Line_106 $$ out = new FileOutputStream(destFile) --> Line_108 $$ destChannel = out.getChannel() [FD]
Line_102 $$ FileChannel srcChannel = null --> Line_110 $$ long count = srcChannel.size() [FD]
Line_107 $$ srcChannel = in.getChannel() --> Line_110 $$ long count = srcChannel.size() [FD]
Line_109 $$ long position = 0 --> Line_111 $$ while (position < count) [FD]
Line_110 $$ long count = srcChannel.size() --> Line_111 $$ while (position < count) [FD]
Line_111 $$ while (position < count) --> Line_112 $$ position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel) [CD]
Line_109 $$ long position = 0 --> Line_112 $$ position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel) [FD]
Line_102 $$ FileChannel srcChannel = null --> Line_112 $$ position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel) [FD]
Line_107 $$ srcChannel = in.getChannel() --> Line_112 $$ position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel) [FD]
Line_103 $$ FileChannel destChannel = null --> Line_112 $$ position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel) [FD]
Line_108 $$ destChannel = out.getChannel() --> Line_112 $$ position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel) [FD]
Line_102 $$ FileChannel srcChannel = null --> Line_115 $$ FileUtils.close(srcChannel) [FD]
Line_107 $$ srcChannel = in.getChannel() --> Line_115 $$ FileUtils.close(srcChannel) [FD]
Line_103 $$ FileChannel destChannel = null --> Line_116 $$ FileUtils.close(destChannel) [FD]
Line_108 $$ destChannel = out.getChannel() --> Line_116 $$ FileUtils.close(destChannel) [FD]
Line_10 $$ BufferedWriter out = null --> Line_117 $$ FileUtils.close(out) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_117 $$ FileUtils.close(out) [FD]
Line_71 $$ out = new BufferedWriter(osw) --> Line_117 $$ FileUtils.close(out) [FD]
Line_106 $$ out = new FileOutputStream(destFile) --> Line_117 $$ FileUtils.close(out) [FD]
Line_9 $$ BufferedReader in = null --> Line_118 $$ FileUtils.close(in) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_118 $$ FileUtils.close(in) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_118 $$ FileUtils.close(in) [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_118 $$ FileUtils.close(in) [FD]
Line_79 $$ in = new BufferedReader(rdr) --> Line_118 $$ FileUtils.close(in) [FD]
Line_105 $$ in = new FileInputStream(sourceFile) --> Line_118 $$ FileUtils.close(in) [FD]
Line_9 $$ BufferedReader in = null --> Line_124 $$ in = source.getInputStream() [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_124 $$ in = source.getInputStream() [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_124 $$ in = source.getInputStream() [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_124 $$ in = source.getInputStream() [FD]
Line_79 $$ in = new BufferedReader(rdr) --> Line_124 $$ in = source.getInputStream() [FD]
Line_105 $$ in = new FileInputStream(sourceFile) --> Line_124 $$ in = source.getInputStream() [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_124 $$ in = source.getInputStream() [FD]
Line_10 $$ BufferedWriter out = null --> Line_125 $$ out = getOutputStream(dest, append, project) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_125 $$ out = getOutputStream(dest, append, project) [FD]
Line_71 $$ out = new BufferedWriter(osw) --> Line_125 $$ out = getOutputStream(dest, append, project) [FD]
Line_106 $$ out = new FileOutputStream(destFile) --> Line_125 $$ out = getOutputStream(dest, append, project) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_125 $$ out = getOutputStream(dest, append, project) [FD]
Line_110 $$ long count = srcChannel.size() --> Line_128 $$ do [FD]
Line_128 $$ do --> Line_129 $$ out.write(buffer, 0, count) [CD]
Line_10 $$ BufferedWriter out = null --> Line_129 $$ out.write(buffer, 0, count) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_129 $$ out.write(buffer, 0, count) [FD]
Line_71 $$ out = new BufferedWriter(osw) --> Line_129 $$ out.write(buffer, 0, count) [FD]
Line_106 $$ out = new FileOutputStream(destFile) --> Line_129 $$ out.write(buffer, 0, count) [FD]
Line_125 $$ out = getOutputStream(dest, append, project) --> Line_129 $$ out.write(buffer, 0, count) [FD]
Line_81 $$ char[] buffer = new char[FileUtils.BUF_SIZE] --> Line_129 $$ out.write(buffer, 0, count) [FD]
Line_110 $$ long count = srcChannel.size() --> Line_129 $$ out.write(buffer, 0, count) [FD]
Line_128 $$ do --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [CD]
Line_110 $$ long count = srcChannel.size() --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [FD]
Line_9 $$ BufferedReader in = null --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [FD]
Line_79 $$ in = new BufferedReader(rdr) --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [FD]
Line_105 $$ in = new FileInputStream(sourceFile) --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [FD]
Line_124 $$ in = source.getInputStream() --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [FD]
Line_81 $$ char[] buffer = new char[FileUtils.BUF_SIZE] --> Line_130 $$ count = in.read(buffer, 0, buffer.length) [FD]
Line_10 $$ BufferedWriter out = null --> Line_133 $$ FileUtils.close(out) [FD]
Line_26 $$ out = new BufferedWriter(osw) --> Line_133 $$ FileUtils.close(out) [FD]
Line_71 $$ out = new BufferedWriter(osw) --> Line_133 $$ FileUtils.close(out) [FD]
Line_106 $$ out = new FileOutputStream(destFile) --> Line_133 $$ FileUtils.close(out) [FD]
Line_125 $$ out = getOutputStream(dest, append, project) --> Line_133 $$ FileUtils.close(out) [FD]
Line_9 $$ BufferedReader in = null --> Line_134 $$ FileUtils.close(in) [FD]
Line_18 $$ in = new BufferedReader(isr) --> Line_134 $$ FileUtils.close(in) [FD]
Line_34 $$ in = new BufferedReader(rdr) --> Line_134 $$ FileUtils.close(in) [FD]
Line_63 $$ in = new BufferedReader(isr) --> Line_134 $$ FileUtils.close(in) [FD]
Line_79 $$ in = new BufferedReader(rdr) --> Line_134 $$ FileUtils.close(in) [FD]
Line_105 $$ in = new FileInputStream(sourceFile) --> Line_134 $$ FileUtils.close(in) [FD]
Line_124 $$ in = source.getInputStream() --> Line_134 $$ FileUtils.close(in) [FD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_137 $$ if (preserveLastModified) [CD]
Line_137 $$ if (preserveLastModified) --> Line_138 $$ Touchable t = (Touchable) dest.as(Touchable.class) [CD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_138 $$ Touchable t = (Touchable) dest.as(Touchable.class) [FD]
Line_137 $$ if (preserveLastModified) --> Line_139 $$ if (t != null) [CD]
Line_139 $$ if (t != null) --> Line_140 $$ setLastModified(t, source.getLastModified()) [CD]
Line_2 $$ public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException --> Line_140 $$ setLastModified(t, source.getLastModified()) [FD]
Line_47 $$ line = lineTokenizer.getToken(in) --> Line_40 $$ while (line != null) [FD]
Line_47 $$ line = lineTokenizer.getToken(in) --> Line_41 $$ if (line.length() == 0) [FD]
Line_47 $$ line = lineTokenizer.getToken(in) --> Line_44 $$ newline = filters.replaceTokens(line) [FD]
Line_112 $$ position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel) --> Line_111 $$ while (position < count) [FD]
Line_130 $$ count = in.read(buffer, 0, buffer.length) --> Line_128 $$ do [FD]
Line_130 $$ count = in.read(buffer, 0, buffer.length) --> Line_129 $$ out.write(buffer, 0, count) [FD]
