Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_3 $$ if (algorithm == null) [CD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_3 $$ if (algorithm == null) [FD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_6 $$ if (password == null) [CD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_6 $$ if (password == null) [FD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_9 $$ if (salt == null) [CD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_9 $$ if (salt == null) [FD]
Line_9 $$ if (salt == null) --> Line_10 $$ salt = "" [CD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_10 $$ salt = "" [FD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_12 $$ String result = null [CD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm) [FD]
Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm) --> Line_15 $$ md.update(password.getBytes()) [FD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_15 $$ md.update(password.getBytes()) [FD]
Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm) --> Line_16 $$ md.update(salt.getBytes()) [FD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_16 $$ md.update(salt.getBytes()) [FD]
Line_10 $$ salt = "" --> Line_16 $$ md.update(salt.getBytes()) [FD]
Line_12 $$ String result = null --> Line_17 $$ result = SecurityHelper.byteArrayToHexString(md.digest()) [FD]
Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm) --> Line_17 $$ result = SecurityHelper.byteArrayToHexString(md.digest()) [FD]
Line_2 $$ public static String hashClientPassword(String algorithm, String password, String salt) throws IllegalArgumentException, DruidSafeRuntimeException --> Line_21 $$ return result [CD]
