Line_2 $$ protected void downgradeHistory(Collection<String> versions) --> Line_3 $$ Assert.notEmpty(versions) [CD]
Line_2 $$ protected void downgradeHistory(Collection<String> versions) --> Line_3 $$ Assert.notEmpty(versions) [FD]
Line_5 $$ Connection connection = this.database.getDefaultConnection() --> Line_6 $$ PreparedStatement statement = connection.prepareStatement("UPDATE " + this.logTableName + " SET RESULT = 'DOWNGRADED' WHERE TYPE = 'B' AND TARGET = ? AND RESULT = 'COMPLETE'") [FD]
Line_6 $$ PreparedStatement statement = connection.prepareStatement("UPDATE " + this.logTableName + " SET RESULT = 'DOWNGRADED' WHERE TYPE = 'B' AND TARGET = ? AND RESULT = 'COMPLETE'") --> Line_10 $$ statement.setString(1, version) [FD]
Line_9 $$ for (String version : versions) --> Line_10 $$ statement.setString(1, version) [FD]
Line_6 $$ PreparedStatement statement = connection.prepareStatement("UPDATE " + this.logTableName + " SET RESULT = 'DOWNGRADED' WHERE TYPE = 'B' AND TARGET = ? AND RESULT = 'COMPLETE'") --> Line_11 $$ int modified = statement.executeUpdate() [FD]
Line_7 $$ boolean commit = false --> Line_14 $$ commit = true [FD]
Line_6 $$ PreparedStatement statement = connection.prepareStatement("UPDATE " + this.logTableName + " SET RESULT = 'DOWNGRADED' WHERE TYPE = 'B' AND TARGET = ? AND RESULT = 'COMPLETE'") --> Line_16 $$ statement.close() [FD]
Line_5 $$ Connection connection = this.database.getDefaultConnection() --> Line_17 $$ connection.rollback() [FD]
