Line_2 $$ public void init() --> Line_3 $$ File[] configsDirectories = [CD]
Line_2 $$ public void init() --> Line_4 $$ for (int i = 0; i < configsDirectories.length; i++) [CD]
Line_4 $$ for (int i = 0; i < configsDirectories.length; i++) --> Line_5 $$ if (!configsDirectories[i].exists()) [CD]
Line_5 $$ if (!configsDirectories[i].exists()) --> Line_6 $$ configsDirectories[i].mkdirs() [CD]
Line_2 $$ public void init() --> Line_9 $$ String[] locations = [CD]
Line_11 $$ for (String loc : locations) --> Line_12 $$ String outName = FilenameUtils.getName(loc) [FD]
Line_13 $$ File output = new File(XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, outName) --> Line_14 $$ if (!output.exists()) [FD]
Line_14 $$ if (!output.exists()) --> Line_15 $$ if (loc.equals(locations[0])) [CD]
Line_11 $$ for (String loc : locations) --> Line_15 $$ if (loc.equals(locations[0])) [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_16 $$ Properties hackProps = new Properties() [CD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_17 $$ InputStream is = getClass().getResourceAsStream(loc) [CD]
Line_11 $$ for (String loc : locations) --> Line_17 $$ InputStream is = getClass().getResourceAsStream(loc) [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_18 $$ hackProps.load(is) [CD]
Line_16 $$ Properties hackProps = new Properties() --> Line_18 $$ hackProps.load(is) [FD]
Line_17 $$ InputStream is = getClass().getResourceAsStream(loc) --> Line_18 $$ hackProps.load(is) [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_19 $$ Font hackFont = UIManager.getFont("EditorPane.font") [CD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_20 $$ StrBuilder strFont = new StrBuilder() [CD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_21 $$ strFont.append(hackFont.getFamily() + "," + hackFont.getStyle() + "," + hackFont.getSize()) [CD]
Line_20 $$ StrBuilder strFont = new StrBuilder() --> Line_21 $$ strFont.append(hackFont.getFamily() + "," + hackFont.getStyle() + "," + hackFont.getSize()) [FD]
Line_19 $$ Font hackFont = UIManager.getFont("EditorPane.font") --> Line_21 $$ strFont.append(hackFont.getFamily() + "," + hackFont.getStyle() + "," + hackFont.getSize()) [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_22 $$ hackProps.put("EditorPane.Font", strFont.toString()) [CD]
Line_16 $$ Properties hackProps = new Properties() --> Line_22 $$ hackProps.put("EditorPane.Font", strFont.toString()) [FD]
Line_20 $$ StrBuilder strFont = new StrBuilder() --> Line_22 $$ hackProps.put("EditorPane.Font", strFont.toString()) [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_23 $$ OutputStream out = new FileOutputStream(output) [CD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_24 $$ hackProps.store(out, null) [CD]
Line_16 $$ Properties hackProps = new Properties() --> Line_24 $$ hackProps.store(out, null) [FD]
Line_23 $$ OutputStream out = new FileOutputStream(output) --> Line_24 $$ hackProps.store(out, null) [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_25 $$ out.close() [CD]
Line_23 $$ OutputStream out = new FileOutputStream(output) --> Line_25 $$ out.close() [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_26 $$ is.close() [CD]
Line_17 $$ InputStream is = getClass().getResourceAsStream(loc) --> Line_26 $$ is.close() [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_28 $$ InputStream is = getClass().getResourceAsStream(loc) [CD]
Line_11 $$ for (String loc : locations) --> Line_28 $$ InputStream is = getClass().getResourceAsStream(loc) [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_30 $$ IOUtils.copy(is, out) [CD]
Line_17 $$ InputStream is = getClass().getResourceAsStream(loc) --> Line_30 $$ IOUtils.copy(is, out) [FD]
Line_23 $$ OutputStream out = new FileOutputStream(output) --> Line_30 $$ IOUtils.copy(is, out) [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_31 $$ out.close() [CD]
Line_23 $$ OutputStream out = new FileOutputStream(output) --> Line_31 $$ out.close() [FD]
Line_15 $$ if (loc.equals(locations[0])) --> Line_32 $$ is.close() [CD]
Line_17 $$ InputStream is = getClass().getResourceAsStream(loc) --> Line_32 $$ is.close() [FD]
Line_12 $$ String outName = FilenameUtils.getName(loc) --> Line_35 $$ if (!outName.equals("mimetypes.properties")) [FD]
Line_35 $$ if (!outName.equals("mimetypes.properties")) --> Line_36 $$ Properties m_properties = PropertiesConfigurationLoader.load(output) [CD]
Line_13 $$ File output = new File(XPontusConstantsIF.XPONTUS_PREFERENCES_DIR, outName) --> Line_36 $$ Properties m_properties = PropertiesConfigurationLoader.load(output) [FD]
Line_35 $$ if (!outName.equals("mimetypes.properties")) --> Line_37 $$ Iterator it = m_properties.keySet().iterator() [CD]
Line_36 $$ Properties m_properties = PropertiesConfigurationLoader.load(output) --> Line_37 $$ Iterator it = m_properties.keySet().iterator() [FD]
Line_35 $$ if (!outName.equals("mimetypes.properties")) --> Line_38 $$ while (it.hasNext()) [CD]
Line_37 $$ Iterator it = m_properties.keySet().iterator() --> Line_38 $$ while (it.hasNext()) [FD]
Line_38 $$ while (it.hasNext()) --> Line_39 $$ Object m_key = it.next() [CD]
Line_37 $$ Iterator it = m_properties.keySet().iterator() --> Line_39 $$ Object m_key = it.next() [FD]
Line_38 $$ while (it.hasNext()) --> Line_40 $$ Object m_value = m_properties.get(m_key) [CD]
Line_36 $$ Properties m_properties = PropertiesConfigurationLoader.load(output) --> Line_40 $$ Object m_value = m_properties.get(m_key) [FD]
Line_39 $$ Object m_key = it.next() --> Line_40 $$ Object m_value = m_properties.get(m_key) [FD]
Line_38 $$ while (it.hasNext()) --> Line_41 $$ XPontusConfig.put(m_key, m_value) [CD]
Line_39 $$ Object m_key = it.next() --> Line_41 $$ XPontusConfig.put(m_key, m_value) [FD]
Line_40 $$ Object m_value = m_properties.get(m_key) --> Line_41 $$ XPontusConfig.put(m_key, m_value) [FD]
Line_2 $$ public void init() --> Line_48 $$ Properties m_props = PropertiesConfigurationLoader.load(XPontusConfigurationConstantsIF.EDITOR_PREFERENCES_FILE) [CD]
Line_2 $$ public void init() --> Line_49 $$ String[] f = m_props.get("EditorPane.Font").toString().split(",") [CD]
Line_48 $$ Properties m_props = PropertiesConfigurationLoader.load(XPontusConfigurationConstantsIF.EDITOR_PREFERENCES_FILE) --> Line_49 $$ String[] f = m_props.get("EditorPane.Font").toString().split(",") [FD]
Line_2 $$ public void init() --> Line_50 $$ String family = f[0].trim() [CD]
Line_2 $$ public void init() --> Line_51 $$ String style1 = f[1].trim() [CD]
Line_2 $$ public void init() --> Line_52 $$ int style = Integer.parseInt(style1) [CD]
Line_51 $$ String style1 = f[1].trim() --> Line_52 $$ int style = Integer.parseInt(style1) [FD]
Line_2 $$ public void init() --> Line_53 $$ int size = Integer.parseInt(f[2].trim()) [CD]
Line_2 $$ public void init() --> Line_54 $$ Font m_font = new Font(family, style, size) [CD]
Line_2 $$ public void init() --> Line_55 $$ XPontusConfig.put("EditorPane.Font", m_font) [CD]
Line_54 $$ Font m_font = new Font(family, style, size) --> Line_55 $$ XPontusConfig.put("EditorPane.Font", m_font) [FD]
Line_2 $$ public void init() --> Line_56 $$ Map map = new HashMap() [CD]
Line_2 $$ public void init() --> Line_57 $$ map.put(ROLE, this) [CD]
Line_56 $$ Map map = new HashMap() --> Line_57 $$ map.put(ROLE, this) [FD]
Line_2 $$ public void init() --> Line_58 $$ PropertiesHolder.registerProperty(XPontusSettings.KEY, map) [CD]
Line_56 $$ Map map = new HashMap() --> Line_58 $$ PropertiesHolder.registerProperty(XPontusSettings.KEY, map) [FD]
Line_2 $$ public void init() --> Line_59 $$ DockableContainerFactory.setFactory(new XPontusDockableContainerFactory()) [CD]
Line_2 $$ public void init() --> Line_60 $$ FileHistoryList.init() [CD]
Line_2 $$ public void init() --> Line_61 $$ initDefaultSettings() [CD]
