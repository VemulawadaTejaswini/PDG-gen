Line_2 $$ protected int run(CmdLineParser parser) --> Line_3 $$ final List<String> args = parser.getRemainingArgs() [CD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_3 $$ final List<String> args = parser.getRemainingArgs() [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_4 $$ if (args.isEmpty()) [CD]
Line_3 $$ final List<String> args = parser.getRemainingArgs() --> Line_4 $$ if (args.isEmpty()) [FD]
Line_4 $$ if (args.isEmpty()) --> Line_5 $$ System.err.println("sort :: WORKDIR not given.") [CD]
Line_4 $$ if (args.isEmpty()) --> Line_6 $$ return 3 [CD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_8 $$ if (args.size() == 1) [CD]
Line_3 $$ final List<String> args = parser.getRemainingArgs() --> Line_8 $$ if (args.size() == 1) [FD]
Line_8 $$ if (args.size() == 1) --> Line_9 $$ System.err.println("sort :: INPATH not given.") [CD]
Line_8 $$ if (args.size() == 1) --> Line_10 $$ return 3 [CD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_12 $$ final String wrkDir = args.get(0), out = (String) parser.getOptionValue(outputFileOpt) [CD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_12 $$ final String wrkDir = args.get(0), out = (String) parser.getOptionValue(outputFileOpt) [FD]
Line_3 $$ final List<String> args = parser.getRemainingArgs() --> Line_12 $$ final String wrkDir = args.get(0), out = (String) parser.getOptionValue(outputFileOpt) [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_13 $$ final List<String> strInputs = args.subList(1, args.size()) [CD]
Line_3 $$ final List<String> args = parser.getRemainingArgs() --> Line_13 $$ final List<String> strInputs = args.subList(1, args.size()) [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_14 $$ final List<Path> inputs = new ArrayList<Path>(strInputs.size()) [CD]
Line_13 $$ final List<String> strInputs = args.subList(1, args.size()) --> Line_14 $$ final List<Path> inputs = new ArrayList<Path>(strInputs.size()) [FD]
Line_14 $$ final List<Path> inputs = new ArrayList<Path>(strInputs.size()) --> Line_15 $$ for (final String in : strInputs) inputs.add(new Path(in)) [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_16 $$ final boolean verbose = parser.getBoolean(verboseOpt) [CD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_16 $$ final boolean verbose = parser.getBoolean(verboseOpt) [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_17 $$ final String intermediateOutName = out == null ? inputs.get(0).getName() : out [CD]
Line_14 $$ final List<Path> inputs = new ArrayList<Path>(strInputs.size()) --> Line_17 $$ final String intermediateOutName = out == null ? inputs.get(0).getName() : out [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_18 $$ final Configuration conf = getConf() [CD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_19 $$ conf.setStrings(INPUT_PATHS_PROP, strInputs.toArray(new String[0])) [CD]
Line_18 $$ final Configuration conf = getConf() --> Line_19 $$ conf.setStrings(INPUT_PATHS_PROP, strInputs.toArray(new String[0])) [FD]
Line_13 $$ final List<String> strInputs = args.subList(1, args.size()) --> Line_19 $$ conf.setStrings(INPUT_PATHS_PROP, strInputs.toArray(new String[0])) [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_20 $$ conf.set(SortOutputFormat.OUTPUT_NAME_PROP, intermediateOutName) [CD]
Line_18 $$ final Configuration conf = getConf() --> Line_20 $$ conf.set(SortOutputFormat.OUTPUT_NAME_PROP, intermediateOutName) [FD]
Line_17 $$ final String intermediateOutName = out == null ? inputs.get(0).getName() : out --> Line_20 $$ conf.set(SortOutputFormat.OUTPUT_NAME_PROP, intermediateOutName) [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_21 $$ final Path wrkDirPath = new Path(wrkDir) [CD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_22 $$ final Timer t = new Timer() [CD]
Line_15 $$ for (final String in : strInputs) inputs.add(new Path(in)) --> Line_24 $$ Utils.configureSampling(in, conf) [FD]
Line_18 $$ final Configuration conf = getConf() --> Line_24 $$ Utils.configureSampling(in, conf) [FD]
Line_18 $$ final Configuration conf = getConf() --> Line_25 $$ conf.setInt("mapred.reduce.tasks", Math.max(1, maxReduceTasks * 9 / 10)) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_27 $$ job.setJarByClass(Sort.class) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_28 $$ job.setMapperClass(Mapper.class) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_29 $$ job.setReducerClass(SortReducer.class) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_30 $$ job.setMapOutputKeyClass(LongWritable.class) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_31 $$ job.setOutputKeyClass(NullWritable.class) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_32 $$ job.setOutputValueClass(SAMRecordWritable.class) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_33 $$ job.setInputFormatClass(BAMInputFormat.class) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_34 $$ job.setOutputFormatClass(SortOutputFormat.class) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_35 $$ FileInputFormat.addInputPath(job, in) [FD]
Line_15 $$ for (final String in : strInputs) inputs.add(new Path(in)) --> Line_35 $$ FileInputFormat.addInputPath(job, in) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_36 $$ FileOutputFormat.setOutputPath(job, wrkDirPath) [FD]
Line_21 $$ final Path wrkDirPath = new Path(wrkDir) --> Line_36 $$ FileOutputFormat.setOutputPath(job, wrkDirPath) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_37 $$ job.setPartitionerClass(TotalOrderPartitioner.class) [FD]
Line_22 $$ final Timer t = new Timer() --> Line_39 $$ t.start() [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_40 $$ InputSampler.<LongWritable, SAMRecordWritable>writePartitionFile(job, new InputSampler.IntervalSampler<LongWritable, SAMRecordWritable>(0.01, 100)) [FD]
Line_22 $$ final Timer t = new Timer() --> Line_41 $$ System.out.printf("sort :: Sampling complete in %d.%03d s.\n", t.stopS(), t.fms()) [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_42 $$ job.submit() [FD]
Line_22 $$ final Timer t = new Timer() --> Line_44 $$ t.start() [FD]
Line_26 $$ final Job job = new Job(conf) --> Line_45 $$ if (!job.waitForCompletion(verbose)) [FD]
Line_16 $$ final boolean verbose = parser.getBoolean(verboseOpt) --> Line_45 $$ if (!job.waitForCompletion(verbose)) [FD]
Line_45 $$ if (!job.waitForCompletion(verbose)) --> Line_46 $$ System.err.println("sort :: Job failed.") [CD]
Line_45 $$ if (!job.waitForCompletion(verbose)) --> Line_47 $$ return 4 [CD]
Line_22 $$ final Timer t = new Timer() --> Line_49 $$ System.out.printf("sort :: Job complete in %d.%03d s.\n", t.stopS(), t.fms()) [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_58 $$ if (out != null) [CD]
Line_12 $$ final String wrkDir = args.get(0), out = (String) parser.getOptionValue(outputFileOpt) --> Line_58 $$ if (out != null) [FD]
Line_22 $$ final Timer t = new Timer() --> Line_60 $$ t.start() [FD]
Line_21 $$ final Path wrkDirPath = new Path(wrkDir) --> Line_62 $$ final FileSystem srcFS = wrkDirPath.getFileSystem(conf) [FD]
Line_18 $$ final Configuration conf = getConf() --> Line_62 $$ final FileSystem srcFS = wrkDirPath.getFileSystem(conf) [FD]
Line_61 $$ final Path outPath = new Path(out) --> Line_63 $$ FileSystem dstFS = outPath.getFileSystem(conf) [FD]
Line_18 $$ final Configuration conf = getConf() --> Line_63 $$ FileSystem dstFS = outPath.getFileSystem(conf) [FD]
Line_63 $$ FileSystem dstFS = outPath.getFileSystem(conf) --> Line_64 $$ if (dstFS instanceof LocalFileSystem && dstFS instanceof ChecksumFileSystem) [FD]
Line_63 $$ FileSystem dstFS = outPath.getFileSystem(conf) --> Line_65 $$ final BAMFileWriter w = new BAMFileWriter(dstFS.create(outPath), new File("")) [FD]
Line_64 $$ if (dstFS instanceof LocalFileSystem && dstFS instanceof ChecksumFileSystem) --> Line_65 $$ final BAMFileWriter w = new BAMFileWriter(dstFS.create(outPath), new File("")) [FD]
Line_61 $$ final Path outPath = new Path(out) --> Line_65 $$ final BAMFileWriter w = new BAMFileWriter(dstFS.create(outPath), new File("")) [FD]
Line_65 $$ final BAMFileWriter w = new BAMFileWriter(dstFS.create(outPath), new File("")) --> Line_66 $$ w.setSortOrder(SAMFileHeader.SortOrder.coordinate, true) [FD]
Line_65 $$ final BAMFileWriter w = new BAMFileWriter(dstFS.create(outPath), new File("")) --> Line_67 $$ w.setHeader(getHeaderMerger(conf).getMergedHeader()) [FD]
Line_18 $$ final Configuration conf = getConf() --> Line_67 $$ w.setHeader(getHeaderMerger(conf).getMergedHeader()) [FD]
Line_65 $$ final BAMFileWriter w = new BAMFileWriter(dstFS.create(outPath), new File("")) --> Line_68 $$ w.close() [FD]
Line_63 $$ FileSystem dstFS = outPath.getFileSystem(conf) --> Line_69 $$ final OutputStream outs = dstFS.append(outPath) [FD]
Line_64 $$ if (dstFS instanceof LocalFileSystem && dstFS instanceof ChecksumFileSystem) --> Line_69 $$ final OutputStream outs = dstFS.append(outPath) [FD]
Line_61 $$ final Path outPath = new Path(out) --> Line_69 $$ final OutputStream outs = dstFS.append(outPath) [FD]
Line_62 $$ final FileSystem srcFS = wrkDirPath.getFileSystem(conf) --> Line_70 $$ final FileStatus[] parts = srcFS.globStatus(new Path(wrkDir, conf.get(SortOutputFormat.OUTPUT_NAME_PROP) + "-[0-9][0-9][0-9][0-9][0-9][0-9]*")) [FD]
Line_18 $$ final Configuration conf = getConf() --> Line_70 $$ final FileStatus[] parts = srcFS.globStatus(new Path(wrkDir, conf.get(SortOutputFormat.OUTPUT_NAME_PROP) + "-[0-9][0-9][0-9][0-9][0-9][0-9]*")) [FD]
Line_73 $$ final Timer t2 = new Timer() --> Line_75 $$ t2.start() [FD]
Line_62 $$ final FileSystem srcFS = wrkDirPath.getFileSystem(conf) --> Line_76 $$ final InputStream ins = srcFS.open(part.getPath()) [FD]
Line_74 $$ for (final FileStatus part : parts) --> Line_76 $$ final InputStream ins = srcFS.open(part.getPath()) [FD]
Line_76 $$ final InputStream ins = srcFS.open(part.getPath()) --> Line_77 $$ IOUtils.copyBytes(ins, outs, conf, false) [FD]
Line_69 $$ final OutputStream outs = dstFS.append(outPath) --> Line_77 $$ IOUtils.copyBytes(ins, outs, conf, false) [FD]
Line_18 $$ final Configuration conf = getConf() --> Line_77 $$ IOUtils.copyBytes(ins, outs, conf, false) [FD]
Line_76 $$ final InputStream ins = srcFS.open(part.getPath()) --> Line_78 $$ ins.close() [FD]
Line_72 $$ int i = 0 --> Line_79 $$ System.out.printf("sort :: Merged part %d in %d.%03d s.\n", ++i, t2.stopS(), t2.fms()) [FD]
Line_73 $$ final Timer t2 = new Timer() --> Line_79 $$ System.out.printf("sort :: Merged part %d in %d.%03d s.\n", ++i, t2.stopS(), t2.fms()) [FD]
Line_62 $$ final FileSystem srcFS = wrkDirPath.getFileSystem(conf) --> Line_82 $$ srcFS.delete(part.getPath(), false) [FD]
Line_74 $$ for (final FileStatus part : parts) --> Line_82 $$ srcFS.delete(part.getPath(), false) [FD]
Line_69 $$ final OutputStream outs = dstFS.append(outPath) --> Line_83 $$ outs.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK) [FD]
Line_69 $$ final OutputStream outs = dstFS.append(outPath) --> Line_84 $$ outs.close() [FD]
Line_22 $$ final Timer t = new Timer() --> Line_85 $$ System.out.printf("sort :: Merging complete in %d.%03d s.\n", t.stopS(), t.fms()) [FD]
Line_2 $$ protected int run(CmdLineParser parser) --> Line_90 $$ return 0 [CD]
