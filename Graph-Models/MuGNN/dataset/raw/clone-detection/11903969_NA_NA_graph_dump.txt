Line_2 $$ private ShaderProgram loadShaderProgram() --> Line_3 $$ ShaderProgram sp = null [CD]
Line_2 $$ private ShaderProgram loadShaderProgram() --> Line_4 $$ String vertexProgram = null [CD]
Line_2 $$ private ShaderProgram loadShaderProgram() --> Line_5 $$ String fragmentProgram = null [CD]
Line_2 $$ private ShaderProgram loadShaderProgram() --> Line_6 $$ Shader[] shaders = new Shader[2] [CD]
Line_8 $$ ClassLoader cl = this.getClass().getClassLoader() --> Line_9 $$ URL url = cl.getResource("Shaders/simple.vert") [FD]
Line_8 $$ ClassLoader cl = this.getClass().getClassLoader() --> Line_11 $$ InputStream inputSteam = cl.getResourceAsStream("Shaders/simple.vert") [FD]
Line_11 $$ InputStream inputSteam = cl.getResourceAsStream("Shaders/simple.vert") --> Line_13 $$ if (inputSteam != null) [FD]
Line_13 $$ if (inputSteam != null) --> Line_14 $$ reader = new InputStreamReader(inputSteam) [CD]
Line_12 $$ Reader reader = null --> Line_14 $$ reader = new InputStreamReader(inputSteam) [FD]
Line_13 $$ if (inputSteam != null) --> Line_16 $$ File file = new File("lib") [CD]
Line_13 $$ if (inputSteam != null) --> Line_17 $$ URL url2 = new URL("jar:file:" + file.getAbsolutePath() + "/j3d-vrml97-i3mainz.jar!/Shaders/simple.vert") [CD]
Line_16 $$ File file = new File("lib") --> Line_17 $$ URL url2 = new URL("jar:file:" + file.getAbsolutePath() + "/j3d-vrml97-i3mainz.jar!/Shaders/simple.vert") [FD]
Line_13 $$ if (inputSteam != null) --> Line_18 $$ InputStream inputSteam2 = url2.openStream() [CD]
Line_17 $$ URL url2 = new URL("jar:file:" + file.getAbsolutePath() + "/j3d-vrml97-i3mainz.jar!/Shaders/simple.vert") --> Line_18 $$ InputStream inputSteam2 = url2.openStream() [FD]
Line_13 $$ if (inputSteam != null) --> Line_19 $$ reader = new InputStreamReader(inputSteam2) [CD]
Line_12 $$ Reader reader = null --> Line_19 $$ reader = new InputStreamReader(inputSteam2) [FD]
Line_14 $$ reader = new InputStreamReader(inputSteam) --> Line_19 $$ reader = new InputStreamReader(inputSteam2) [FD]
Line_12 $$ Reader reader = null --> Line_22 $$ int len = reader.read(buffer) [FD]
Line_14 $$ reader = new InputStreamReader(inputSteam) --> Line_22 $$ int len = reader.read(buffer) [FD]
Line_19 $$ reader = new InputStreamReader(inputSteam2) --> Line_22 $$ int len = reader.read(buffer) [FD]
Line_21 $$ char[] buffer = new char[10000] --> Line_22 $$ int len = reader.read(buffer) [FD]
Line_4 $$ String vertexProgram = null --> Line_23 $$ vertexProgram = new String(buffer) [FD]
Line_4 $$ String vertexProgram = null --> Line_24 $$ vertexProgram = vertexProgram.substring(0, len) [FD]
Line_23 $$ vertexProgram = new String(buffer) --> Line_24 $$ vertexProgram = vertexProgram.substring(0, len) [FD]
Line_22 $$ int len = reader.read(buffer) --> Line_24 $$ vertexProgram = vertexProgram.substring(0, len) [FD]
Line_8 $$ ClassLoader cl = this.getClass().getClassLoader() --> Line_31 $$ URL url = cl.getResource("Shaders/simple.frag") [FD]
Line_8 $$ ClassLoader cl = this.getClass().getClassLoader() --> Line_33 $$ InputStream inputSteam = cl.getResourceAsStream("Shaders/simple.frag") [FD]
Line_11 $$ InputStream inputSteam = cl.getResourceAsStream("Shaders/simple.vert") --> Line_35 $$ if (inputSteam != null) [FD]
Line_35 $$ if (inputSteam != null) --> Line_36 $$ reader = new InputStreamReader(inputSteam) [CD]
Line_12 $$ Reader reader = null --> Line_36 $$ reader = new InputStreamReader(inputSteam) [FD]
Line_14 $$ reader = new InputStreamReader(inputSteam) --> Line_36 $$ reader = new InputStreamReader(inputSteam) [FD]
Line_19 $$ reader = new InputStreamReader(inputSteam2) --> Line_36 $$ reader = new InputStreamReader(inputSteam) [FD]
Line_16 $$ File file = new File("lib") --> Line_39 $$ URL url2 = new URL("jar:file:" + file.getAbsolutePath() + "/j3d-vrml97-i3mainz.jar!/Shaders/simple.frag") [FD]
Line_35 $$ if (inputSteam != null) --> Line_40 $$ InputStream inputSteam2 = url2.openStream() [CD]
Line_17 $$ URL url2 = new URL("jar:file:" + file.getAbsolutePath() + "/j3d-vrml97-i3mainz.jar!/Shaders/simple.vert") --> Line_40 $$ InputStream inputSteam2 = url2.openStream() [FD]
Line_35 $$ if (inputSteam != null) --> Line_41 $$ reader = new InputStreamReader(inputSteam2) [CD]
Line_12 $$ Reader reader = null --> Line_41 $$ reader = new InputStreamReader(inputSteam2) [FD]
Line_14 $$ reader = new InputStreamReader(inputSteam) --> Line_41 $$ reader = new InputStreamReader(inputSteam2) [FD]
Line_19 $$ reader = new InputStreamReader(inputSteam2) --> Line_41 $$ reader = new InputStreamReader(inputSteam2) [FD]
Line_36 $$ reader = new InputStreamReader(inputSteam) --> Line_41 $$ reader = new InputStreamReader(inputSteam2) [FD]
Line_12 $$ Reader reader = null --> Line_44 $$ int len = reader.read(buffer) [FD]
Line_14 $$ reader = new InputStreamReader(inputSteam) --> Line_44 $$ int len = reader.read(buffer) [FD]
Line_19 $$ reader = new InputStreamReader(inputSteam2) --> Line_44 $$ int len = reader.read(buffer) [FD]
Line_36 $$ reader = new InputStreamReader(inputSteam) --> Line_44 $$ int len = reader.read(buffer) [FD]
Line_41 $$ reader = new InputStreamReader(inputSteam2) --> Line_44 $$ int len = reader.read(buffer) [FD]
Line_21 $$ char[] buffer = new char[10000] --> Line_44 $$ int len = reader.read(buffer) [FD]
Line_5 $$ String fragmentProgram = null --> Line_45 $$ fragmentProgram = new String(buffer) [FD]
Line_5 $$ String fragmentProgram = null --> Line_46 $$ fragmentProgram = fragmentProgram.substring(0, len) [FD]
Line_45 $$ fragmentProgram = new String(buffer) --> Line_46 $$ fragmentProgram = fragmentProgram.substring(0, len) [FD]
Line_22 $$ int len = reader.read(buffer) --> Line_46 $$ fragmentProgram = fragmentProgram.substring(0, len) [FD]
Line_2 $$ private ShaderProgram loadShaderProgram() --> Line_51 $$ if (vertexProgram != null && fragmentProgram != null) [CD]
Line_51 $$ if (vertexProgram != null && fragmentProgram != null) --> Line_52 $$ shaders[0] = new SourceCodeShader(Shader.SHADING_LANGUAGE_GLSL, Shader.SHADER_TYPE_VERTEX, vertexProgram) [CD]
Line_51 $$ if (vertexProgram != null && fragmentProgram != null) --> Line_53 $$ shaders[1] = new SourceCodeShader(Shader.SHADING_LANGUAGE_GLSL, Shader.SHADER_TYPE_FRAGMENT, fragmentProgram) [CD]
Line_51 $$ if (vertexProgram != null && fragmentProgram != null) --> Line_54 $$ sp = new GLSLShaderProgram() [CD]
Line_3 $$ ShaderProgram sp = null --> Line_54 $$ sp = new GLSLShaderProgram() [FD]
Line_51 $$ if (vertexProgram != null && fragmentProgram != null) --> Line_55 $$ sp.setShaders(shaders) [CD]
Line_3 $$ ShaderProgram sp = null --> Line_55 $$ sp.setShaders(shaders) [FD]
Line_54 $$ sp = new GLSLShaderProgram() --> Line_55 $$ sp.setShaders(shaders) [FD]
Line_6 $$ Shader[] shaders = new Shader[2] --> Line_55 $$ sp.setShaders(shaders) [FD]
Line_2 $$ private ShaderProgram loadShaderProgram() --> Line_57 $$ return sp [CD]
