Line_2 $$ public ProcessorOutput createOutput(String name) --> Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) [CD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_5 $$ ProcessorInput i = getInputByName(INPUT_DATA) [CD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_7 $$ Grammar grammar = (Grammar) readCacheInputAsObject(context, getInputByName(INPUT_CONFIG), new CacheableInputReader() [FD]
Line_7 $$ Grammar grammar = (Grammar) readCacheInputAsObject(context, getInputByName(INPUT_CONFIG), new CacheableInputReader() --> Line_9 $$ final Locator[] locator = new Locator[1] [CD]
Line_7 $$ Grammar grammar = (Grammar) readCacheInputAsObject(context, getInputByName(INPUT_CONFIG), new CacheableInputReader() --> Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() [CD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_18 $$ URL url = URLFactory.createURL((locator[0] != null && locator[0].getSystemId() != null) ? locator[0].getSystemId() : null, systemId) [CD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_18 $$ URL url = URLFactory.createURL((locator[0] != null && locator[0].getSystemId() != null) ? locator[0].getSystemId() : null, systemId) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_19 $$ InputSource i = new InputSource(url.openStream()) [CD]
Line_18 $$ URL url = URLFactory.createURL((locator[0] != null && locator[0].getSystemId() != null) ? locator[0].getSystemId() : null, systemId) --> Line_19 $$ InputSource i = new InputSource(url.openStream()) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_20 $$ i.setSystemId(url.toString()) [CD]
Line_19 $$ InputSource i = new InputSource(url.openStream()) --> Line_20 $$ i.setSystemId(url.toString()) [FD]
Line_5 $$ ProcessorInput i = getInputByName(INPUT_DATA) --> Line_20 $$ i.setSystemId(url.toString()) [FD]
Line_18 $$ URL url = URLFactory.createURL((locator[0] != null && locator[0].getSystemId() != null) ? locator[0].getSystemId() : null, systemId) --> Line_20 $$ i.setSystemId(url.toString()) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_21 $$ return i [CD]
Line_7 $$ Grammar grammar = (Grammar) readCacheInputAsObject(context, getInputByName(INPUT_CONFIG), new CacheableInputReader() --> Line_24 $$ readInputAsSAX(context, input, new ForwardingContentHandler(grammarReader) [CD]
Line_7 $$ Grammar grammar = (Grammar) readCacheInputAsObject(context, getInputByName(INPUT_CONFIG), new CacheableInputReader() --> Line_24 $$ readInputAsSAX(context, input, new ForwardingContentHandler(grammarReader) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_24 $$ readInputAsSAX(context, input, new ForwardingContentHandler(grammarReader) [FD]
Line_24 $$ readInputAsSAX(context, input, new ForwardingContentHandler(grammarReader) --> Line_26 $$ super.setDocumentLocator(loc) [CD]
Line_24 $$ readInputAsSAX(context, input, new ForwardingContentHandler(grammarReader) --> Line_26 $$ super.setDocumentLocator(loc) [FD]
Line_24 $$ readInputAsSAX(context, input, new ForwardingContentHandler(grammarReader) --> Line_27 $$ locator[0] = loc [CD]
Line_24 $$ readInputAsSAX(context, input, new ForwardingContentHandler(grammarReader) --> Line_27 $$ locator[0] = loc [FD]
Line_7 $$ Grammar grammar = (Grammar) readCacheInputAsObject(context, getInputByName(INPUT_CONFIG), new CacheableInputReader() --> Line_30 $$ return grammarReader.getResultAsGrammar() [CD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_30 $$ return grammarReader.getResultAsGrammar() [FD]
Line_7 $$ Grammar grammar = (Grammar) readCacheInputAsObject(context, getInputByName(INPUT_CONFIG), new CacheableInputReader() --> Line_33 $$ DocumentDeclaration vgm = new REDocumentDeclaration(grammar.getTopLevel(), new ExpressionPool()) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_37 $$ if (decorateOutput && ve != null) [CD]
Line_37 $$ if (decorateOutput && ve != null) --> Line_38 $$ if (!stopDecorating) [CD]
Line_38 $$ if (!stopDecorating) --> Line_39 $$ AttributesImpl a = new AttributesImpl() [CD]
Line_38 $$ if (!stopDecorating) --> Line_40 $$ a.addAttribute("", ValidationProcessor.MESSAGE_ATTRIBUTE, ValidationProcessor.MESSAGE_ATTRIBUTE, "CDATA", ve.getSimpleMessage()) [CD]
Line_39 $$ AttributesImpl a = new AttributesImpl() --> Line_40 $$ a.addAttribute("", ValidationProcessor.MESSAGE_ATTRIBUTE, ValidationProcessor.MESSAGE_ATTRIBUTE, "CDATA", ve.getSimpleMessage()) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_40 $$ a.addAttribute("", ValidationProcessor.MESSAGE_ATTRIBUTE, ValidationProcessor.MESSAGE_ATTRIBUTE, "CDATA", ve.getSimpleMessage()) [FD]
Line_38 $$ if (!stopDecorating) --> Line_41 $$ a.addAttribute("", ValidationProcessor.SYSTEMID_ATTRIBUTE, ValidationProcessor.SYSTEMID_ATTRIBUTE, "CDATA", ve.getLocationData().getSystemID()) [CD]
Line_39 $$ AttributesImpl a = new AttributesImpl() --> Line_41 $$ a.addAttribute("", ValidationProcessor.SYSTEMID_ATTRIBUTE, ValidationProcessor.SYSTEMID_ATTRIBUTE, "CDATA", ve.getLocationData().getSystemID()) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_41 $$ a.addAttribute("", ValidationProcessor.SYSTEMID_ATTRIBUTE, ValidationProcessor.SYSTEMID_ATTRIBUTE, "CDATA", ve.getLocationData().getSystemID()) [FD]
Line_38 $$ if (!stopDecorating) --> Line_42 $$ a.addAttribute("", ValidationProcessor.LINE_ATTRIBUTE, ValidationProcessor.LINE_ATTRIBUTE, "CDATA", Integer.toString(ve.getLocationData().getLine())) [CD]
Line_39 $$ AttributesImpl a = new AttributesImpl() --> Line_42 $$ a.addAttribute("", ValidationProcessor.LINE_ATTRIBUTE, ValidationProcessor.LINE_ATTRIBUTE, "CDATA", Integer.toString(ve.getLocationData().getLine())) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_42 $$ a.addAttribute("", ValidationProcessor.LINE_ATTRIBUTE, ValidationProcessor.LINE_ATTRIBUTE, "CDATA", Integer.toString(ve.getLocationData().getLine())) [FD]
Line_38 $$ if (!stopDecorating) --> Line_43 $$ a.addAttribute("", ValidationProcessor.COLUMN_ATTRIBUTE, ValidationProcessor.COLUMN_ATTRIBUTE, "CDATA", Integer.toString(ve.getLocationData().getCol())) [CD]
Line_39 $$ AttributesImpl a = new AttributesImpl() --> Line_43 $$ a.addAttribute("", ValidationProcessor.COLUMN_ATTRIBUTE, ValidationProcessor.COLUMN_ATTRIBUTE, "CDATA", Integer.toString(ve.getLocationData().getCol())) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_43 $$ a.addAttribute("", ValidationProcessor.COLUMN_ATTRIBUTE, ValidationProcessor.COLUMN_ATTRIBUTE, "CDATA", Integer.toString(ve.getLocationData().getCol())) [FD]
Line_38 $$ if (!stopDecorating) --> Line_44 $$ contentHandler.startElement(ValidationProcessor.ORBEON_ERROR_NS, ValidationProcessor.ERROR_ELEMENT, ValidationProcessor.ORBEON_ERROR_PREFIX + ":" + ValidationProcessor.ERROR_ELEMENT, a) [CD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_44 $$ contentHandler.startElement(ValidationProcessor.ORBEON_ERROR_NS, ValidationProcessor.ERROR_ELEMENT, ValidationProcessor.ORBEON_ERROR_PREFIX + ":" + ValidationProcessor.ERROR_ELEMENT, a) [FD]
Line_39 $$ AttributesImpl a = new AttributesImpl() --> Line_44 $$ contentHandler.startElement(ValidationProcessor.ORBEON_ERROR_NS, ValidationProcessor.ERROR_ELEMENT, ValidationProcessor.ORBEON_ERROR_PREFIX + ":" + ValidationProcessor.ERROR_ELEMENT, a) [FD]
Line_38 $$ if (!stopDecorating) --> Line_45 $$ contentHandler.endElement(ValidationProcessor.ORBEON_ERROR_NS, ValidationProcessor.ERROR_ELEMENT, ValidationProcessor.ORBEON_ERROR_PREFIX + ":" + ValidationProcessor.ERROR_ELEMENT) [CD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_45 $$ contentHandler.endElement(ValidationProcessor.ORBEON_ERROR_NS, ValidationProcessor.ERROR_ELEMENT, ValidationProcessor.ORBEON_ERROR_PREFIX + ":" + ValidationProcessor.ERROR_ELEMENT) [FD]
Line_38 $$ if (!stopDecorating) --> Line_46 $$ stopDecorating = true [CD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_54 $$ super.characters(chars, i, i1) [FD]
Line_19 $$ InputSource i = new InputSource(url.openStream()) --> Line_54 $$ super.characters(chars, i, i1) [FD]
Line_5 $$ ProcessorInput i = getInputByName(INPUT_DATA) --> Line_54 $$ super.characters(chars, i, i1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_56 $$ generateErrorElement(e) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_58 $$ contentHandler.characters(chars, i, i1) [CD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_58 $$ contentHandler.characters(chars, i, i1) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_58 $$ contentHandler.characters(chars, i, i1) [FD]
Line_19 $$ InputSource i = new InputSource(url.openStream()) --> Line_58 $$ contentHandler.characters(chars, i, i1) [FD]
Line_5 $$ ProcessorInput i = getInputByName(INPUT_DATA) --> Line_58 $$ contentHandler.characters(chars, i, i1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_64 $$ generateErrorElement(e) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_66 $$ contentHandler.endDocument() [CD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_66 $$ contentHandler.endDocument() [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_70 $$ super.endElement(s, s1, s2) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_70 $$ super.endElement(s, s1, s2) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_72 $$ generateErrorElement(e) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_74 $$ contentHandler.endElement(s, s1, s2) [CD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_74 $$ contentHandler.endElement(s, s1, s2) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_74 $$ contentHandler.endElement(s, s1, s2) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_74 $$ contentHandler.endElement(s, s1, s2) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_80 $$ generateErrorElement(e) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_82 $$ contentHandler.startDocument() [CD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_82 $$ contentHandler.startDocument() [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_85 $$ ((ErrorHandler) getErrorHandler()).setElement(s, s1) [CD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_85 $$ ((ErrorHandler) getErrorHandler()).setElement(s, s1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_85 $$ ((ErrorHandler) getErrorHandler()).setElement(s, s1) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_87 $$ super.startElement(s, s1, s2, attributes) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_87 $$ super.startElement(s, s1, s2, attributes) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_89 $$ generateErrorElement(e) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_91 $$ contentHandler.startElement(s, s1, s2, attributes) [CD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_91 $$ contentHandler.startElement(s, s1, s2, attributes) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_91 $$ contentHandler.startElement(s, s1, s2, attributes) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_91 $$ contentHandler.startElement(s, s1, s2, attributes) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_95 $$ super.endPrefixMapping(s) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_95 $$ super.endPrefixMapping(s) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_98 $$ generateErrorElement(e) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_104 $$ contentHandler.endPrefixMapping(s) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_104 $$ contentHandler.endPrefixMapping(s) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_104 $$ contentHandler.endPrefixMapping(s) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_111 $$ super.processingInstruction(s, s1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_111 $$ super.processingInstruction(s, s1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_114 $$ generateErrorElement(e) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_120 $$ contentHandler.processingInstruction(s, s1) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_120 $$ contentHandler.processingInstruction(s, s1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_120 $$ contentHandler.processingInstruction(s, s1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_122 $$ throw new OXFException(e.getException()) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_127 $$ super.setDocumentLocator(locator) [FD]
Line_9 $$ final Locator[] locator = new Locator[1] --> Line_127 $$ super.setDocumentLocator(locator) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_130 $$ generateErrorElement(e) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_135 $$ contentHandler.setDocumentLocator(locator) [CD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_135 $$ contentHandler.setDocumentLocator(locator) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_135 $$ contentHandler.setDocumentLocator(locator) [FD]
Line_9 $$ final Locator[] locator = new Locator[1] --> Line_135 $$ contentHandler.setDocumentLocator(locator) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_139 $$ super.skippedEntity(s) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_139 $$ super.skippedEntity(s) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_142 $$ generateErrorElement(e) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_148 $$ contentHandler.skippedEntity(s) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_148 $$ contentHandler.skippedEntity(s) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_148 $$ contentHandler.skippedEntity(s) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_150 $$ throw new OXFException(e.getException()) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_155 $$ super.startPrefixMapping(s, s1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_155 $$ super.startPrefixMapping(s, s1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_158 $$ generateErrorElement(e) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_164 $$ contentHandler.startPrefixMapping(s, s1) [FD]
Line_34 $$ Verifier verifier = new Verifier(vgm, new ErrorHandler()) --> Line_164 $$ contentHandler.startPrefixMapping(s, s1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_164 $$ contentHandler.startPrefixMapping(s, s1) [FD]
Line_10 $$ GrammarReader grammarReader = new XMLSchemaReader(new GrammarReaderController() --> Line_166 $$ throw new OXFException(e.getException()) [FD]
Line_7 $$ Grammar grammar = (Grammar) readCacheInputAsObject(context, getInputByName(INPUT_CONFIG), new CacheableInputReader() --> Line_170 $$ readInputAsSAX(context, getInputByName(INPUT_DATA), verifier) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_170 $$ readInputAsSAX(context, getInputByName(INPUT_DATA), verifier) [FD]
Line_2 $$ public ProcessorOutput createOutput(String name) --> Line_176 $$ addOutput(name, output) [CD]
Line_2 $$ public ProcessorOutput createOutput(String name) --> Line_176 $$ addOutput(name, output) [FD]
Line_3 $$ ProcessorOutput output = new ProcessorImpl.CacheableTransformerOutputImpl(getClass(), name) --> Line_176 $$ addOutput(name, output) [FD]
Line_2 $$ public ProcessorOutput createOutput(String name) --> Line_177 $$ return output [CD]
