Line_2 $$ public static void main(String[] args) --> Line_3 $$ if (args.length < 2) [CD]
Line_3 $$ if (args.length < 2) --> Line_4 $$ System.out.println(" *** DDL (creates) and DML (inserts) script importer from DB ***") [CD]
Line_3 $$ if (args.length < 2) --> Line_5 $$ System.out.println(" You must specify name of the file with script importing data") [CD]
Line_3 $$ if (args.length < 2) --> Line_6 $$ System.out.println(" Fisrt rows of this file must be:") [CD]
Line_3 $$ if (args.length < 2) --> Line_7 $$ System.out.println(" 1) JDBC driver class for your DBMS") [CD]
Line_3 $$ if (args.length < 2) --> Line_8 $$ System.out.println(" 2) URL for your database instance") [CD]
Line_3 $$ if (args.length < 2) --> Line_9 $$ System.out.println(" 3) user in that database (with sufficient priviliges)") [CD]
Line_3 $$ if (args.length < 2) --> Line_10 $$ System.out.println(" 4) password of that user") [CD]
Line_3 $$ if (args.length < 2) --> Line_11 $$ System.out.println(" Next rows can have:") [CD]
Line_3 $$ if (args.length < 2) --> Line_12 $$ System.out.println("   '}' before table to create,") [CD]
Line_3 $$ if (args.length < 2) --> Line_13 $$ System.out.println("   ' [CD]
Line_3 $$ if (args.length < 2) --> Line_14 $$ System.out.println("   ')' before table to insert into,") [CD]
Line_3 $$ if (args.length < 2) --> Line_15 $$ System.out.println("   '(' before schema to insert into tables in.") [CD]
Line_3 $$ if (args.length < 2) --> Line_16 $$ System.out.println(" '!' before row means that it is a comment.") [CD]
Line_3 $$ if (args.length < 2) --> Line_17 $$ System.out.println(" If some exception is occured, all script is rolled back.") [CD]
Line_3 $$ if (args.length < 2) --> Line_18 $$ System.out.println(" 2nd command line argument is name of output file;") [CD]
Line_3 $$ if (args.length < 2) --> Line_19 $$ System.out.println("   if its extension is *.sql, its format is standard SQL") [CD]
Line_3 $$ if (args.length < 2) --> Line_20 $$ System.out.println("   otherwize format is short one, understanded by SQLScript tool") [CD]
Line_3 $$ if (args.length < 2) --> Line_21 $$ System.out.println(" Connection information remains unchanged in the last format") [CD]
Line_3 $$ if (args.length < 2) --> Line_22 $$ System.out.println("   but in the first one it takes form 'connect user/password@URL'") [CD]
Line_3 $$ if (args.length < 2) --> Line_23 $$ System.out.println("   where URL can be formed with different rools for different DBMSs") [CD]
Line_3 $$ if (args.length < 2) --> Line_24 $$ System.out.println(" If file (with short format header) already exists and you specify") [CD]
Line_3 $$ if (args.length < 2) --> Line_25 $$ System.out.println("   3rd command line argument -db, we generate objects in the database") [CD]
Line_3 $$ if (args.length < 2) --> Line_26 $$ System.out.println("   (known from the file header; must differ from 1st DB) but not in file") [CD]
Line_3 $$ if (args.length < 2) --> Line_27 $$ System.out.println(" Note: when importing to a file of short format, line separators") [CD]
Line_3 $$ if (args.length < 2) --> Line_28 $$ System.out.println("    in VARCHARS will be lost; LOBs will be empty for any file") [CD]
Line_3 $$ if (args.length < 2) --> Line_29 $$ System.exit(0) [CD]
Line_33 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0]))) --> Line_37 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine() [FD]
Line_41 $$ int format = args[1].toLowerCase().endsWith("sql") ? SQL_FORMAT : SHORT_FORMAT --> Line_43 $$ if (format == SHORT_FORMAT) [FD]
Line_43 $$ if (format == SHORT_FORMAT) --> Line_44 $$ if (file.exists() && args.length > 2 && args[2].equalsIgnoreCase("-db")) [CD]
Line_42 $$ File file = new File(args[1]) --> Line_44 $$ if (file.exists() && args.length > 2 && args[2].equalsIgnoreCase("-db")) [FD]
Line_44 $$ if (file.exists() && args.length > 2 && args[2].equalsIgnoreCase("-db")) --> Line_45 $$ String[] outInfo = new String[info.length] [CD]
Line_44 $$ if (file.exists() && args.length > 2 && args[2].equalsIgnoreCase("-db")) --> Line_46 $$ BufferedReader outReader = new BufferedReader(new FileReader(file)) [CD]
Line_44 $$ if (file.exists() && args.length > 2 && args[2].equalsIgnoreCase("-db")) --> Line_47 $$ for (int i = 0; i < outInfo.length; i++) outInfo[i] = reader.readLine() [CD]
Line_37 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine() --> Line_47 $$ for (int i = 0; i < outInfo.length; i++) outInfo[i] = reader.readLine() [FD]
Line_33 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0]))) --> Line_47 $$ for (int i = 0; i < outInfo.length; i++) outInfo[i] = reader.readLine() [FD]
Line_44 $$ if (file.exists() && args.length > 2 && args[2].equalsIgnoreCase("-db")) --> Line_48 $$ outReader.close() [CD]
Line_46 $$ BufferedReader outReader = new BufferedReader(new FileReader(file)) --> Line_48 $$ outReader.close() [FD]
Line_44 $$ if (file.exists() && args.length > 2 && args[2].equalsIgnoreCase("-db")) --> Line_49 $$ if (!(outInfo[1].equals(info[1]) && outInfo[2].equals(info[2]))) [CD]
Line_49 $$ if (!(outInfo[1].equals(info[1]) && outInfo[2].equals(info[2]))) --> Line_50 $$ Class.forName(info[0]) [CD]
Line_49 $$ if (!(outInfo[1].equals(info[1]) && outInfo[2].equals(info[2]))) --> Line_51 $$ outConnection = DriverManager.getConnection(outInfo[1], outInfo[2], outInfo[3]) [CD]
Line_35 $$ Connection outConnection = null --> Line_51 $$ outConnection = DriverManager.getConnection(outInfo[1], outInfo[2], outInfo[3]) [FD]
Line_49 $$ if (!(outInfo[1].equals(info[1]) && outInfo[2].equals(info[2]))) --> Line_52 $$ format = SQL_FORMAT [CD]
Line_41 $$ int format = args[1].toLowerCase().endsWith("sql") ? SQL_FORMAT : SHORT_FORMAT --> Line_52 $$ format = SQL_FORMAT [FD]
Line_35 $$ Connection outConnection = null --> Line_56 $$ writer = new BufferedWriter(new FileWriter(file)) [FD]
Line_51 $$ outConnection = DriverManager.getConnection(outInfo[1], outInfo[2], outInfo[3]) --> Line_56 $$ writer = new BufferedWriter(new FileWriter(file)) [FD]
Line_34 $$ Writer writer = null --> Line_56 $$ writer = new BufferedWriter(new FileWriter(file)) [FD]
Line_57 $$ SQLImporter script = new SQLImporter(outConnection, connection) --> Line_58 $$ script.setFormat(format) [FD]
Line_41 $$ int format = args[1].toLowerCase().endsWith("sql") ? SQL_FORMAT : SHORT_FORMAT --> Line_58 $$ script.setFormat(format) [FD]
Line_52 $$ format = SQL_FORMAT --> Line_58 $$ script.setFormat(format) [FD]
Line_41 $$ int format = args[1].toLowerCase().endsWith("sql") ? SQL_FORMAT : SHORT_FORMAT --> Line_59 $$ if (format == SQL_FORMAT) [FD]
Line_52 $$ format = SQL_FORMAT --> Line_59 $$ if (format == SQL_FORMAT) [FD]
Line_59 $$ if (format == SQL_FORMAT) --> Line_60 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + script.getDatabaseURL(info[1]) + script.statementTerminator) [CD]
Line_34 $$ Writer writer = null --> Line_60 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + script.getDatabaseURL(info[1]) + script.statementTerminator) [FD]
Line_56 $$ writer = new BufferedWriter(new FileWriter(file)) --> Line_60 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + script.getDatabaseURL(info[1]) + script.statementTerminator) [FD]
Line_57 $$ SQLImporter script = new SQLImporter(outConnection, connection) --> Line_60 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + script.getDatabaseURL(info[1]) + script.statementTerminator) [FD]
Line_59 $$ if (format == SQL_FORMAT) --> Line_62 $$ for (int i = 0; i < info.length; i++) writer.write(info[i] + lineSep) [CD]
Line_47 $$ for (int i = 0; i < outInfo.length; i++) outInfo[i] = reader.readLine() --> Line_62 $$ for (int i = 0; i < info.length; i++) writer.write(info[i] + lineSep) [FD]
Line_37 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine() --> Line_62 $$ for (int i = 0; i < info.length; i++) writer.write(info[i] + lineSep) [FD]
Line_34 $$ Writer writer = null --> Line_62 $$ for (int i = 0; i < info.length; i++) writer.write(info[i] + lineSep) [FD]
Line_56 $$ writer = new BufferedWriter(new FileWriter(file)) --> Line_62 $$ for (int i = 0; i < info.length; i++) writer.write(info[i] + lineSep) [FD]
Line_59 $$ if (format == SQL_FORMAT) --> Line_63 $$ writer.write(lineSep) [CD]
Line_34 $$ Writer writer = null --> Line_63 $$ writer.write(lineSep) [FD]
Line_56 $$ writer = new BufferedWriter(new FileWriter(file)) --> Line_63 $$ writer.write(lineSep) [FD]
Line_57 $$ SQLImporter script = new SQLImporter(outConnection, connection) --> Line_66 $$ System.out.println(script.executeScript(reader, writer) + " operations with tables has been generated during import") [FD]
Line_33 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0]))) --> Line_66 $$ System.out.println(script.executeScript(reader, writer) + " operations with tables has been generated during import") [FD]
Line_34 $$ Writer writer = null --> Line_66 $$ System.out.println(script.executeScript(reader, writer) + " operations with tables has been generated during import") [FD]
Line_56 $$ writer = new BufferedWriter(new FileWriter(file)) --> Line_66 $$ System.out.println(script.executeScript(reader, writer) + " operations with tables has been generated during import") [FD]
Line_33 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0]))) --> Line_68 $$ reader.close() [FD]
Line_34 $$ Writer writer = null --> Line_69 $$ outConnection.close() [FD]
Line_56 $$ writer = new BufferedWriter(new FileWriter(file)) --> Line_69 $$ outConnection.close() [FD]
Line_35 $$ Connection outConnection = null --> Line_69 $$ outConnection.close() [FD]
Line_51 $$ outConnection = DriverManager.getConnection(outInfo[1], outInfo[2], outInfo[3]) --> Line_69 $$ outConnection.close() [FD]
Line_40 $$ Connection connection = DriverManager.getConnection(info[1], info[2], info[3]) --> Line_72 $$ connection.close() [FD]
Line_33 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0]))) --> Line_74 $$ reader.close() [FD]
Line_34 $$ Writer writer = null --> Line_75 $$ if (writer != null) [FD]
Line_56 $$ writer = new BufferedWriter(new FileWriter(file)) --> Line_75 $$ if (writer != null) [FD]
