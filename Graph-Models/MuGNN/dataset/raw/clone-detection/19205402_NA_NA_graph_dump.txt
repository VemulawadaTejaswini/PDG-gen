Line_2 $$ public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception --> Line_3 $$ ZipInputStream zis = new ZipInputStream(new BufferedInputStream(inputResource.getInputStream())) [CD]
Line_2 $$ public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception --> Line_4 $$ File targetDirectoryAsFile = new File(targetDirectory) [CD]
Line_2 $$ public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception --> Line_5 $$ if (!targetDirectoryAsFile.exists()) [CD]
Line_4 $$ File targetDirectoryAsFile = new File(targetDirectory) --> Line_5 $$ if (!targetDirectoryAsFile.exists()) [FD]
Line_5 $$ if (!targetDirectoryAsFile.exists()) --> Line_6 $$ FileUtils.forceMkdir(targetDirectoryAsFile) [CD]
Line_4 $$ File targetDirectoryAsFile = new File(targetDirectory) --> Line_6 $$ FileUtils.forceMkdir(targetDirectoryAsFile) [FD]
Line_2 $$ public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception --> Line_8 $$ File target = new File(targetDirectory, targetFile) [CD]
Line_2 $$ public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception --> Line_9 $$ BufferedOutputStream dest = null [CD]
Line_2 $$ public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception --> Line_10 $$ while (zis.getNextEntry() != null) [CD]
Line_3 $$ ZipInputStream zis = new ZipInputStream(new BufferedInputStream(inputResource.getInputStream())) --> Line_10 $$ while (zis.getNextEntry() != null) [FD]
Line_8 $$ File target = new File(targetDirectory, targetFile) --> Line_11 $$ if (!target.exists()) [FD]
Line_11 $$ if (!target.exists()) --> Line_12 $$ target.createNewFile() [CD]
Line_8 $$ File target = new File(targetDirectory, targetFile) --> Line_12 $$ target.createNewFile() [FD]
Line_9 $$ BufferedOutputStream dest = null --> Line_15 $$ dest = new BufferedOutputStream(fos) [FD]
Line_3 $$ ZipInputStream zis = new ZipInputStream(new BufferedInputStream(inputResource.getInputStream())) --> Line_16 $$ IOUtils.copy(zis, dest) [FD]
Line_15 $$ dest = new BufferedOutputStream(fos) --> Line_16 $$ IOUtils.copy(zis, dest) [FD]
Line_9 $$ BufferedOutputStream dest = null --> Line_16 $$ IOUtils.copy(zis, dest) [FD]
Line_15 $$ dest = new BufferedOutputStream(fos) --> Line_17 $$ dest.flush() [FD]
Line_9 $$ BufferedOutputStream dest = null --> Line_17 $$ dest.flush() [FD]
Line_15 $$ dest = new BufferedOutputStream(fos) --> Line_18 $$ dest.close() [FD]
Line_9 $$ BufferedOutputStream dest = null --> Line_18 $$ dest.close() [FD]
Line_2 $$ public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception --> Line_20 $$ zis.close() [CD]
Line_3 $$ ZipInputStream zis = new ZipInputStream(new BufferedInputStream(inputResource.getInputStream())) --> Line_20 $$ zis.close() [FD]
Line_2 $$ public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception --> Line_21 $$ if (!target.exists()) [CD]
Line_8 $$ File target = new File(targetDirectory, targetFile) --> Line_21 $$ if (!target.exists()) [FD]
Line_2 $$ public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception --> Line_24 $$ return RepeatStatus.FINISHED [CD]
