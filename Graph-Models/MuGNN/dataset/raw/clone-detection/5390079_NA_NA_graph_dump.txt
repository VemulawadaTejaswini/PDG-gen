Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_3 $$ File dataFile = new File(Kit.getDataDir() + BLACK_HOLE) [CD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_4 $$ if (dataFile.exists() && daysOld(dataFile) < 1) [CD]
Line_3 $$ File dataFile = new File(Kit.getDataDir() + BLACK_HOLE) --> Line_4 $$ if (dataFile.exists() && daysOld(dataFile) < 1) [FD]
Line_4 $$ if (dataFile.exists() && daysOld(dataFile) < 1) --> Line_5 $$ return getStoredData(dataFile) [CD]
Line_3 $$ File dataFile = new File(Kit.getDataDir() + BLACK_HOLE) --> Line_5 $$ return getStoredData(dataFile) [FD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_7 $$ InputStream stream = null [CD]
Line_7 $$ InputStream stream = null --> Line_11 $$ stream = url.openStream() [FD]
Line_10 $$ URL url = new URL(bh_url) --> Line_11 $$ stream = url.openStream() [FD]
Line_3 $$ File dataFile = new File(Kit.getDataDir() + BLACK_HOLE) --> Line_13 $$ return getStoredData(dataFile) [FD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_15 $$ BufferedReader br = new BufferedReader(new InputStreamReader(stream)) [CD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_16 $$ StringBuffer data = new StringBuffer() [CD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_17 $$ String line [CD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_18 $$ while ((line = br.readLine()) != null) [CD]
Line_17 $$ String line --> Line_18 $$ while ((line = br.readLine()) != null) [FD]
Line_15 $$ BufferedReader br = new BufferedReader(new InputStreamReader(stream)) --> Line_18 $$ while ((line = br.readLine()) != null) [FD]
Line_18 $$ while ((line = br.readLine()) != null) --> Line_19 $$ data.append(line) [CD]
Line_18 $$ while ((line = br.readLine()) != null) --> Line_19 $$ data.append(line) [FD]
Line_16 $$ StringBuffer data = new StringBuffer() --> Line_19 $$ data.append(line) [FD]
Line_17 $$ String line --> Line_19 $$ data.append(line) [FD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_21 $$ br.close() [CD]
Line_15 $$ BufferedReader br = new BufferedReader(new InputStreamReader(stream)) --> Line_21 $$ br.close() [FD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_22 $$ Pattern p = Pattern.compile(regexp) [CD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_23 $$ Matcher m = p.matcher(data) [CD]
Line_22 $$ Pattern p = Pattern.compile(regexp) --> Line_23 $$ Matcher m = p.matcher(data) [FD]
Line_16 $$ StringBuffer data = new StringBuffer() --> Line_23 $$ Matcher m = p.matcher(data) [FD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_24 $$ Map map = new THashMap() [CD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_25 $$ while (m.find()) [CD]
Line_23 $$ Matcher m = p.matcher(data) --> Line_25 $$ while (m.find()) [FD]
Line_25 $$ while (m.find()) --> Line_26 $$ map.put(m.group(1).trim(), new ReplyTimeDatum(Integer.parseInt(m.group(3)), Integer.parseInt(m.group(4)), 0, Integer.parseInt(m.group(2)))) [CD]
Line_24 $$ Map map = new THashMap() --> Line_26 $$ map.put(m.group(1).trim(), new ReplyTimeDatum(Integer.parseInt(m.group(3)), Integer.parseInt(m.group(4)), 0, Integer.parseInt(m.group(2)))) [FD]
Line_23 $$ Matcher m = p.matcher(data) --> Line_26 $$ map.put(m.group(1).trim(), new ReplyTimeDatum(Integer.parseInt(m.group(3)), Integer.parseInt(m.group(4)), 0, Integer.parseInt(m.group(2)))) [FD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_28 $$ ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(dataFile)) [CD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_29 $$ oos.writeObject(map) [CD]
Line_28 $$ ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(dataFile)) --> Line_29 $$ oos.writeObject(map) [FD]
Line_24 $$ Map map = new THashMap() --> Line_29 $$ oos.writeObject(map) [FD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_30 $$ oos.close() [CD]
Line_28 $$ ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(dataFile)) --> Line_30 $$ oos.close() [FD]
Line_2 $$ private Map getBlackHoleData() throws Exception --> Line_31 $$ return map [CD]
