Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException --> Line_3 $$ IProgressMonitor progressMonitor = monitor [CD]
Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException --> Line_4 $$ progressMonitor.beginTask("", 10) [CD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_4 $$ progressMonitor.beginTask("", 10) [FD]
Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException --> Line_5 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_GeneratingJETEmitterFor_message", new Object[] [CD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_5 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_GeneratingJETEmitterFor_message", new Object[] [FD]
Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException --> Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() [CD]
Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException --> Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()) [CD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_10 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETParsing_message", new Object[] [FD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_10 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETParsing_message", new Object[] [FD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_11 $$ jetCompiler.parse() [FD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_12 $$ progressMonitor.worked(1) [FD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName() [FD]
Line_14 $$ if (getTemplateURIPath() != null) --> Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0]) [CD]
Line_14 $$ if (getTemplateURIPath() != null) --> Line_16 $$ URLClassLoader theClassLoader = null [CD]
Line_14 $$ if (getTemplateURIPath() != null) --> Line_17 $$ if (templateURI.isPlatformResource()) [CD]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0]) --> Line_17 $$ if (templateURI.isPlatformResource()) [FD]
Line_17 $$ if (templateURI.isPlatformResource()) --> Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) [CD]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() --> Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) [FD]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0]) --> Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) [FD]
Line_17 $$ if (templateURI.isPlatformResource()) --> Line_19 $$ if (JETNature.getRuntime(project) != null) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_19 $$ if (JETNature.getRuntime(project) != null) [FD]
Line_19 $$ if (JETNature.getRuntime(project) != null) --> Line_20 $$ List<URL> urls = new ArrayList<URL>() [CD]
Line_19 $$ if (JETNature.getRuntime(project) != null) --> Line_21 $$ IJavaProject javaProject = JavaCore.create(project) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_21 $$ IJavaProject javaProject = JavaCore.create(project) [FD]
Line_19 $$ if (JETNature.getRuntime(project) != null) --> Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [CD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_23 $$ for (IClasspathEntry classpathEntry : javaProject.getResolvedClasspath(true)) [FD]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() --> Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0)) [FD]
Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0)) --> Line_27 $$ IJavaProject otherJavaProject = JavaCore.create(otherProject) [FD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0)) --> Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_27 $$ IJavaProject otherJavaProject = JavaCore.create(otherProject) --> Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_19 $$ if (JETNature.getRuntime(project) != null) --> Line_31 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderSuperAction(urls)) [CD]
Line_16 $$ URLClassLoader theClassLoader = null --> Line_31 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderSuperAction(urls)) [FD]
Line_17 $$ if (templateURI.isPlatformResource()) --> Line_33 $$ if (templateURI.isPlatformPlugin()) [CD]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0]) --> Line_33 $$ if (templateURI.isPlatformPlugin()) [FD]
Line_33 $$ if (templateURI.isPlatformPlugin()) --> Line_34 $$ final Bundle bundle = Platform.getBundle(templateURI.segment(1)) [CD]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0]) --> Line_34 $$ final Bundle bundle = Platform.getBundle(templateURI.segment(1)) [FD]
Line_33 $$ if (templateURI.isPlatformPlugin()) --> Line_35 $$ if (bundle != null) [CD]
Line_34 $$ final Bundle bundle = Platform.getBundle(templateURI.segment(1)) --> Line_35 $$ if (bundle != null) [FD]
Line_35 $$ if (bundle != null) --> Line_36 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderBundleAction(bundle)) [CD]
Line_16 $$ URLClassLoader theClassLoader = null --> Line_36 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderBundleAction(bundle)) [FD]
Line_31 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderSuperAction(urls)) --> Line_36 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderBundleAction(bundle)) [FD]
Line_14 $$ if (getTemplateURIPath() != null) --> Line_39 $$ if (theClassLoader != null) [CD]
Line_16 $$ URLClassLoader theClassLoader = null --> Line_39 $$ if (theClassLoader != null) [FD]
Line_31 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderSuperAction(urls)) --> Line_39 $$ if (theClassLoader != null) [FD]
Line_36 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderBundleAction(bundle)) --> Line_39 $$ if (theClassLoader != null) [FD]
Line_39 $$ if (theClassLoader != null) --> Line_40 $$ String className = (packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName() [CD]
Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName() --> Line_40 $$ String className = (packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName() [FD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_40 $$ String className = (packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName() [FD]
Line_39 $$ if (theClassLoader != null) --> Line_41 $$ if (className.endsWith("_")) [CD]
Line_16 $$ URLClassLoader theClassLoader = null --> Line_45 $$ Class<?> theClass = theClassLoader.loadClass(className) [FD]
Line_31 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderSuperAction(urls)) --> Line_45 $$ Class<?> theClass = theClassLoader.loadClass(className) [FD]
Line_36 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderBundleAction(bundle)) --> Line_45 $$ Class<?> theClass = theClassLoader.loadClass(className) [FD]
Line_46 $$ Class<?> theOtherClass = null --> Line_48 $$ theOtherClass = getClassLoader().loadClass(className) [FD]
Line_46 $$ Class<?> theOtherClass = null --> Line_51 $$ if (theClass != theOtherClass) [FD]
Line_51 $$ if (theClass != theOtherClass) --> Line_52 $$ String methodName = jetCompiler.getSkeleton().getMethodName() [CD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_52 $$ String methodName = jetCompiler.getSkeleton().getMethodName() [FD]
Line_51 $$ if (theClass != theOtherClass) --> Line_53 $$ Method[] methods = theClass.getDeclaredMethods() [CD]
Line_51 $$ if (theClass != theOtherClass) --> Line_54 $$ for (int i = 0; i < methods.length; ++i) [CD]
Line_54 $$ for (int i = 0; i < methods.length; ++i) --> Line_55 $$ if (methods[i].getName().equals(methodName)) [CD]
Line_52 $$ String methodName = jetCompiler.getSkeleton().getMethodName() --> Line_55 $$ if (methods[i].getName().equals(methodName)) [FD]
Line_55 $$ if (methods[i].getName().equals(methodName)) --> Line_56 $$ jetEmitter.setMethod(methods[i]) [CD]
Line_51 $$ if (theClass != theOtherClass) --> Line_60 $$ return [CD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_67 $$ jetCompiler.generate(outputStream) [FD]
Line_66 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream() --> Line_67 $$ jetCompiler.generate(outputStream) [FD]
Line_66 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream() --> Line_68 $$ final InputStream contents = new ByteArrayInputStream(outputStream.toByteArray()) [FD]
Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()) --> Line_69 $$ if (!javaModel.isOpen()) [FD]
Line_69 $$ if (!javaModel.isOpen()) --> Line_70 $$ javaModel.open(new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()) --> Line_70 $$ javaModel.open(new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_69 $$ if (!javaModel.isOpen()) --> Line_72 $$ progressMonitor.worked(1) [CD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_72 $$ progressMonitor.worked(1) [FD]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() --> Line_74 $$ final IProject project = workspace.getRoot().getProject(jetEmitter.getProjectName()) [FD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_75 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETPreparingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_75 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETPreparingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_77 $$ if (!project.exists()) [FD]
Line_77 $$ if (!project.exists()) --> Line_78 $$ progressMonitor.subTask("JET creating project " + project.getName()) [CD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_78 $$ progressMonitor.subTask("JET creating project " + project.getName()) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_78 $$ progressMonitor.subTask("JET creating project " + project.getName()) [FD]
Line_77 $$ if (!project.exists()) --> Line_79 $$ project.create(new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_79 $$ project.create(new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_77 $$ if (!project.exists()) --> Line_80 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] [CD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_80 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_80 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] [FD]
Line_77 $$ if (!project.exists()) --> Line_81 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) [CD]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() --> Line_81 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_81 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) [FD]
Line_77 $$ if (!project.exists()) --> Line_82 $$ description.setNatureIds(new String[] [CD]
Line_81 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) --> Line_82 $$ description.setNatureIds(new String[] [FD]
Line_77 $$ if (!project.exists()) --> Line_83 $$ description.setLocation(null) [CD]
Line_81 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) --> Line_83 $$ description.setLocation(null) [FD]
Line_77 $$ if (!project.exists()) --> Line_84 $$ project.open(new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_84 $$ project.open(new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_77 $$ if (!project.exists()) --> Line_85 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_85 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_81 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) --> Line_85 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_77 $$ if (!project.exists()) --> Line_87 $$ project.open(new SubProgressMonitor(progressMonitor, 5)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_87 $$ project.open(new SubProgressMonitor(progressMonitor, 5)) [FD]
Line_77 $$ if (!project.exists()) --> Line_88 $$ IProjectDescription description = project.getDescription() [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_88 $$ IProjectDescription description = project.getDescription() [FD]
Line_77 $$ if (!project.exists()) --> Line_89 $$ description.setNatureIds(new String[] [CD]
Line_81 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) --> Line_89 $$ description.setNatureIds(new String[] [FD]
Line_77 $$ if (!project.exists()) --> Line_90 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_90 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_81 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) --> Line_90 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_92 $$ javaProject = JavaCore.create(project) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_92 $$ javaProject = JavaCore.create(project) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_93 $$ List<IClasspathEntry> classpath = new UniqueEList<IClasspathEntry>(Arrays.asList(javaProject.getRawClasspath())) [FD]
Line_92 $$ javaProject = JavaCore.create(project) --> Line_93 $$ List<IClasspathEntry> classpath = new UniqueEList<IClasspathEntry>(Arrays.asList(javaProject.getRawClasspath())) [FD]
Line_54 $$ for (int i = 0; i < methods.length; ++i) --> Line_94 $$ for (int i = 0, len = classpath.size(); i < len; i++) [FD]
Line_54 $$ for (int i = 0; i < methods.length; ++i) --> Line_95 $$ IClasspathEntry entry = classpath.get(i) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_96 $$ if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) [FD]
Line_54 $$ for (int i = 0; i < methods.length; ++i) --> Line_97 $$ classpath.remove(i) [FD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_100 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETInitializingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_100 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETInitializingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_101 $$ IClasspathEntry classpathEntry = JavaCore.newSourceEntry(new Path("/" + project.getName() + "/src")) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_106 $$ IFolder sourceFolder = project.getFolder(new Path("src")) [FD]
Line_106 $$ IFolder sourceFolder = project.getFolder(new Path("src")) --> Line_107 $$ if (!sourceFolder.exists()) [FD]
Line_107 $$ if (!sourceFolder.exists()) --> Line_108 $$ sourceFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_106 $$ IFolder sourceFolder = project.getFolder(new Path("src")) --> Line_108 $$ sourceFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_110 $$ IFolder runtimeFolder = project.getFolder(new Path("bin")) [FD]
Line_110 $$ IFolder runtimeFolder = project.getFolder(new Path("bin")) --> Line_111 $$ if (!runtimeFolder.exists()) [FD]
Line_111 $$ if (!runtimeFolder.exists()) --> Line_112 $$ runtimeFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_110 $$ IFolder runtimeFolder = project.getFolder(new Path("bin")) --> Line_112 $$ runtimeFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_114 $$ javaProject.setRawClasspath(classpath.toArray(new IClasspathEntry[classpath.size()]), new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_92 $$ javaProject = JavaCore.create(project) --> Line_114 $$ javaProject.setRawClasspath(classpath.toArray(new IClasspathEntry[classpath.size()]), new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_115 $$ javaProject.setOutputLocation(new Path("/" + project.getName() + "/bin"), new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_92 $$ javaProject = JavaCore.create(project) --> Line_115 $$ javaProject.setOutputLocation(new Path("/" + project.getName() + "/bin"), new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_115 $$ javaProject.setOutputLocation(new Path("/" + project.getName() + "/bin"), new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_116 $$ javaProject.close() [FD]
Line_92 $$ javaProject = JavaCore.create(project) --> Line_116 $$ javaProject.close() [FD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_117 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETOpeningJavaProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_117 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETOpeningJavaProject_message", new Object[] [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_118 $$ javaProject.open(new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_92 $$ javaProject = JavaCore.create(project) --> Line_118 $$ javaProject.open(new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_119 $$ IPackageFragmentRoot[] packageFragmentRoots = javaProject.getPackageFragmentRoots() [FD]
Line_92 $$ javaProject = JavaCore.create(project) --> Line_119 $$ IPackageFragmentRoot[] packageFragmentRoots = javaProject.getPackageFragmentRoots() [FD]
Line_121 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) --> Line_122 $$ IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j] [CD]
Line_121 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) --> Line_123 $$ if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) [CD]
Line_122 $$ IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j] --> Line_123 $$ if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) [FD]
Line_123 $$ if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) --> Line_124 $$ sourcePackageFragmentRoot = packageFragmentRoot [CD]
Line_120 $$ IPackageFragmentRoot sourcePackageFragmentRoot = null --> Line_124 $$ sourcePackageFragmentRoot = packageFragmentRoot [FD]
Line_122 $$ IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j] --> Line_124 $$ sourcePackageFragmentRoot = packageFragmentRoot [FD]
Line_129 $$ IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1) --> Line_130 $$ subProgressMonitor.beginTask("", stringTokenizer.countTokens() + 4) [FD]
Line_128 $$ StringTokenizer stringTokenizer = new StringTokenizer(packageName, ".") --> Line_130 $$ subProgressMonitor.beginTask("", stringTokenizer.countTokens() + 4) [FD]
Line_129 $$ IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1) --> Line_131 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_CreateTargetFile_message")) [FD]
Line_124 $$ sourcePackageFragmentRoot = packageFragmentRoot --> Line_132 $$ IContainer sourceContainer = sourcePackageFragmentRoot == null ? project : (IContainer) sourcePackageFragmentRoot.getCorrespondingResource() [FD]
Line_120 $$ IPackageFragmentRoot sourcePackageFragmentRoot = null --> Line_132 $$ IContainer sourceContainer = sourcePackageFragmentRoot == null ? project : (IContainer) sourcePackageFragmentRoot.getCorrespondingResource() [FD]
Line_128 $$ StringTokenizer stringTokenizer = new StringTokenizer(packageName, ".") --> Line_133 $$ while (stringTokenizer.hasMoreElements()) [FD]
Line_133 $$ while (stringTokenizer.hasMoreElements()) --> Line_134 $$ String folderName = stringTokenizer.nextToken() [CD]
Line_128 $$ StringTokenizer stringTokenizer = new StringTokenizer(packageName, ".") --> Line_134 $$ String folderName = stringTokenizer.nextToken() [FD]
Line_133 $$ while (stringTokenizer.hasMoreElements()) --> Line_135 $$ sourceContainer = sourceContainer.getFolder(new Path(folderName)) [CD]
Line_132 $$ IContainer sourceContainer = sourcePackageFragmentRoot == null ? project : (IContainer) sourcePackageFragmentRoot.getCorrespondingResource() --> Line_135 $$ sourceContainer = sourceContainer.getFolder(new Path(folderName)) [FD]
Line_133 $$ while (stringTokenizer.hasMoreElements()) --> Line_136 $$ if (!sourceContainer.exists()) [CD]
Line_135 $$ sourceContainer = sourceContainer.getFolder(new Path(folderName)) --> Line_136 $$ if (!sourceContainer.exists()) [FD]
Line_132 $$ IContainer sourceContainer = sourcePackageFragmentRoot == null ? project : (IContainer) sourcePackageFragmentRoot.getCorrespondingResource() --> Line_136 $$ if (!sourceContainer.exists()) [FD]
Line_136 $$ if (!sourceContainer.exists()) --> Line_137 $$ ((IFolder) sourceContainer).create(false, true, new SubProgressMonitor(subProgressMonitor, 1)) [CD]
Line_135 $$ sourceContainer = sourceContainer.getFolder(new Path(folderName)) --> Line_140 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java")) [FD]
Line_132 $$ IContainer sourceContainer = sourcePackageFragmentRoot == null ? project : (IContainer) sourcePackageFragmentRoot.getCorrespondingResource() --> Line_140 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java")) [FD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_140 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java")) [FD]
Line_140 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java")) --> Line_141 $$ if (!targetFile.exists()) [FD]
Line_141 $$ if (!targetFile.exists()) --> Line_142 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreating_message", new Object[] [CD]
Line_129 $$ IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1) --> Line_142 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreating_message", new Object[] [FD]
Line_140 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java")) --> Line_142 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreating_message", new Object[] [FD]
Line_141 $$ if (!targetFile.exists()) --> Line_143 $$ targetFile.create(contents, true, new SubProgressMonitor(subProgressMonitor, 1)) [CD]
Line_140 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java")) --> Line_143 $$ targetFile.create(contents, true, new SubProgressMonitor(subProgressMonitor, 1)) [FD]
Line_68 $$ final InputStream contents = new ByteArrayInputStream(outputStream.toByteArray()) --> Line_143 $$ targetFile.create(contents, true, new SubProgressMonitor(subProgressMonitor, 1)) [FD]
Line_141 $$ if (!targetFile.exists()) --> Line_145 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETUpdating_message", new Object[] [CD]
Line_129 $$ IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1) --> Line_145 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETUpdating_message", new Object[] [FD]
Line_140 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java")) --> Line_145 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETUpdating_message", new Object[] [FD]
Line_141 $$ if (!targetFile.exists()) --> Line_146 $$ targetFile.setContents(contents, true, true, new SubProgressMonitor(subProgressMonitor, 1)) [CD]
Line_140 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java")) --> Line_146 $$ targetFile.setContents(contents, true, true, new SubProgressMonitor(subProgressMonitor, 1)) [FD]
Line_68 $$ final InputStream contents = new ByteArrayInputStream(outputStream.toByteArray()) --> Line_146 $$ targetFile.setContents(contents, true, true, new SubProgressMonitor(subProgressMonitor, 1)) [FD]
Line_129 $$ IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1) --> Line_148 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETBuilding_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_148 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETBuilding_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_149 $$ project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, new SubProgressMonitor(subProgressMonitor, 1)) [FD]
Line_129 $$ IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1) --> Line_150 $$ boolean errors = hasErrors(subProgressMonitor, targetFile) [FD]
Line_140 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java")) --> Line_150 $$ boolean errors = hasErrors(subProgressMonitor, targetFile) [FD]
Line_150 $$ boolean errors = hasErrors(subProgressMonitor, targetFile) --> Line_151 $$ if (!errors) [FD]
Line_151 $$ if (!errors) --> Line_152 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETLoadingClass_message", new Object[] [CD]
Line_129 $$ IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1) --> Line_152 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETLoadingClass_message", new Object[] [FD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_152 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETLoadingClass_message", new Object[] [FD]
Line_151 $$ if (!errors) --> Line_154 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [CD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_154 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_154 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_154 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_92 $$ javaProject = JavaCore.create(project) --> Line_154 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL()) [FD]
Line_151 $$ if (!errors) --> Line_155 $$ final Set<Bundle> bundles = new HashSet<Bundle>() [CD]
Line_34 $$ final Bundle bundle = Platform.getBundle(templateURI.segment(1)) --> Line_162 $$ if (bundle != null) [FD]
Line_162 $$ if (bundle != null) --> Line_163 $$ bundles.add(bundle) [CD]
Line_155 $$ final Set<Bundle> bundles = new HashSet<Bundle>() --> Line_163 $$ bundles.add(bundle) [FD]
Line_34 $$ final Bundle bundle = Platform.getBundle(templateURI.segment(1)) --> Line_163 $$ bundles.add(bundle) [FD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_169 $$ urls.add(new URL("platform:/resource" + jetEmitterClasspathEntry.getPath() + "/")) [FD]
Line_151 $$ if (!errors) --> Line_171 $$ URLClassLoader theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderSuperBundlesAction(bundles, urls)) [CD]
Line_151 $$ if (!errors) --> Line_172 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [CD]
Line_16 $$ URLClassLoader theClassLoader = null --> Line_172 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [FD]
Line_31 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderSuperAction(urls)) --> Line_172 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [FD]
Line_36 $$ theClassLoader = AccessController.doPrivileged(new GetURLClassLoaderBundleAction(bundle)) --> Line_172 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [FD]
Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName() --> Line_172 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [FD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_172 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [FD]
Line_151 $$ if (!errors) --> Line_173 $$ String methodName = jetCompiler.getSkeleton().getMethodName() [CD]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader()) --> Line_173 $$ String methodName = jetCompiler.getSkeleton().getMethodName() [FD]
Line_151 $$ if (!errors) --> Line_174 $$ Method[] methods = theClass.getDeclaredMethods() [CD]
Line_151 $$ if (!errors) --> Line_175 $$ for (int i = 0; i < methods.length; ++i) [CD]
Line_54 $$ for (int i = 0; i < methods.length; ++i) --> Line_175 $$ for (int i = 0; i < methods.length; ++i) [FD]
Line_175 $$ for (int i = 0; i < methods.length; ++i) --> Line_176 $$ if (methods[i].getName().equals(methodName)) [CD]
Line_52 $$ String methodName = jetCompiler.getSkeleton().getMethodName() --> Line_176 $$ if (methods[i].getName().equals(methodName)) [FD]
Line_176 $$ if (methods[i].getName().equals(methodName)) --> Line_177 $$ jetEmitter.setMethod(methods[i]) [CD]
Line_129 $$ IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1) --> Line_182 $$ subProgressMonitor.done() [FD]
Line_3 $$ IProgressMonitor progressMonitor = monitor --> Line_188 $$ progressMonitor.done() [FD]
