Line_4 $$ URL url = new URL(apiUrl) --> Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection() [FD]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection() --> Line_7 $$ request.setRequestProperty(headerName, requestHeaders.get(headerName)) [FD]
Line_6 $$ for (String headerName : requestHeaders.keySet()) --> Line_7 $$ request.setRequestProperty(headerName, requestHeaders.get(headerName)) [FD]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection() --> Line_9 $$ request.connect() [FD]
Line_2 $$ protected InputStream callApiMethod(String apiUrl, int expected) --> Line_10 $$ if (request.getResponseCode() != expected) [FD]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection() --> Line_10 $$ if (request.getResponseCode() != expected) [FD]
Line_10 $$ if (request.getResponseCode() != expected) --> Line_11 $$ Error error = readResponse(Error.class, getWrappedInputStream(request.getErrorStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()))) [CD]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection() --> Line_11 $$ Error error = readResponse(Error.class, getWrappedInputStream(request.getErrorStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()))) [FD]
Line_10 $$ if (request.getResponseCode() != expected) --> Line_14 $$ return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding())) [CD]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection() --> Line_14 $$ return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding())) [FD]
