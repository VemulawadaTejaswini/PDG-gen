Line_2 $$ private void doDecrypt(boolean createOutput) throws IOException --> Line_3 $$ FileInputStream input = null [CD]
Line_2 $$ private void doDecrypt(boolean createOutput) throws IOException --> Line_4 $$ FileOutputStream output = null [CD]
Line_2 $$ private void doDecrypt(boolean createOutput) throws IOException --> Line_5 $$ File tempOutput = null [CD]
Line_3 $$ FileInputStream input = null --> Line_7 $$ input = new FileInputStream(infile) [FD]
Line_3 $$ FileInputStream input = null --> Line_10 $$ input.read(magic) [FD]
Line_7 $$ input = new FileInputStream(infile) --> Line_10 $$ input.read(magic) [FD]
Line_9 $$ byte[] magic = new byte[MAGIC.length] --> Line_10 $$ input.read(magic) [FD]
Line_11 $$ for (int i = 0; i < MAGIC.length; i++) --> Line_12 $$ if (MAGIC[i] != magic[i]) [CD]
Line_3 $$ FileInputStream input = null --> Line_14 $$ short version = readShort(input) [FD]
Line_7 $$ input = new FileInputStream(infile) --> Line_14 $$ short version = readShort(input) [FD]
Line_3 $$ FileInputStream input = null --> Line_16 $$ String cipherName = readString(input) [FD]
Line_7 $$ input = new FileInputStream(infile) --> Line_16 $$ String cipherName = readString(input) [FD]
Line_16 $$ String cipherName = readString(input) --> Line_17 $$ Cipher cipher = createCipher(cipherName, createSessionKey(password, cipherBaseFilename)) [FD]
Line_8 $$ String cipherBaseFilename = basename(infile) --> Line_17 $$ Cipher cipher = createCipher(cipherName, createSessionKey(password, cipherBaseFilename)) [FD]
Line_18 $$ CipherInputStream decryptedInput = new CipherInputStream(input, cipher) --> Line_19 $$ long headerCrc = Unsigned.promote(readInt(decryptedInput)) [FD]
Line_18 $$ CipherInputStream decryptedInput = new CipherInputStream(input, cipher) --> Line_20 $$ decryptedInput.resetCRC() [FD]
Line_18 $$ CipherInputStream decryptedInput = new CipherInputStream(input, cipher) --> Line_21 $$ outfile = new File(outputDir, readString(decryptedInput)) [FD]
Line_2 $$ private void doDecrypt(boolean createOutput) throws IOException --> Line_22 $$ if (!createOutput || outfile.exists()) [FD]
Line_22 $$ if (!createOutput || outfile.exists()) --> Line_24 $$ return [CD]
Line_5 $$ File tempOutput = null --> Line_26 $$ tempOutput = File.createTempFile("bork", null, outputDir) [FD]
Line_5 $$ File tempOutput = null --> Line_27 $$ tempOutput.deleteOnExit() [FD]
Line_26 $$ tempOutput = File.createTempFile("bork", null, outputDir) --> Line_27 $$ tempOutput.deleteOnExit() [FD]
Line_4 $$ FileOutputStream output = null --> Line_29 $$ output = new FileOutputStream(tempOutput) [FD]
Line_30 $$ int bytesRead --> Line_31 $$ while ((bytesRead = decryptedInput.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_18 $$ CipherInputStream decryptedInput = new CipherInputStream(input, cipher) --> Line_31 $$ while ((bytesRead = decryptedInput.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_28 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_31 $$ while ((bytesRead = decryptedInput.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_4 $$ FileOutputStream output = null --> Line_31 $$ while ((bytesRead = decryptedInput.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_29 $$ output = new FileOutputStream(tempOutput) --> Line_31 $$ while ((bytesRead = decryptedInput.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_4 $$ FileOutputStream output = null --> Line_32 $$ output.close() [FD]
Line_29 $$ output = new FileOutputStream(tempOutput) --> Line_32 $$ output.close() [FD]
Line_4 $$ FileOutputStream output = null --> Line_33 $$ output = null [FD]
Line_29 $$ output = new FileOutputStream(tempOutput) --> Line_33 $$ output = null [FD]
Line_19 $$ long headerCrc = Unsigned.promote(readInt(decryptedInput)) --> Line_34 $$ if (headerCrc != decryptedInput.getCRC()) [FD]
Line_18 $$ CipherInputStream decryptedInput = new CipherInputStream(input, cipher) --> Line_34 $$ if (headerCrc != decryptedInput.getCRC()) [FD]
Line_5 $$ File tempOutput = null --> Line_38 $$ if (!tempOutput.renameTo(outfile)) [FD]
Line_26 $$ tempOutput = File.createTempFile("bork", null, outputDir) --> Line_38 $$ if (!tempOutput.renameTo(outfile)) [FD]
Line_3 $$ FileInputStream input = null --> Line_41 $$ close(input) [FD]
Line_7 $$ input = new FileInputStream(infile) --> Line_41 $$ close(input) [FD]
Line_4 $$ FileOutputStream output = null --> Line_42 $$ close(output) [FD]
Line_29 $$ output = new FileOutputStream(tempOutput) --> Line_42 $$ close(output) [FD]
Line_33 $$ output = null --> Line_42 $$ close(output) [FD]
Line_5 $$ File tempOutput = null --> Line_43 $$ if (tempOutput != null) [FD]
Line_26 $$ tempOutput = File.createTempFile("bork", null, outputDir) --> Line_43 $$ if (tempOutput != null) [FD]
