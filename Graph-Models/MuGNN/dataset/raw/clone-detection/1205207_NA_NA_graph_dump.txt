Line_2 $$ private void loadClassFilesFromJar() --> Line_3 $$ IPackageFragmentRoot packageFragmentRoot = (IPackageFragmentRoot) getJavaElement() [CD]
Line_2 $$ private void loadClassFilesFromJar() --> Line_4 $$ File jarFile = packageFragmentRoot.getResource().getLocation().toFile() [CD]
Line_3 $$ IPackageFragmentRoot packageFragmentRoot = (IPackageFragmentRoot) getJavaElement() --> Line_4 $$ File jarFile = packageFragmentRoot.getResource().getLocation().toFile() [FD]
Line_4 $$ File jarFile = packageFragmentRoot.getResource().getLocation().toFile() --> Line_6 $$ URL url = jarFile.toURL() [FD]
Line_6 $$ URL url = jarFile.toURL() --> Line_7 $$ URLConnection u = url.openConnection() [FD]
Line_7 $$ URLConnection u = url.openConnection() --> Line_8 $$ ZipInputStream inputStream = new ZipInputStream(u.getInputStream()) [FD]
Line_8 $$ ZipInputStream inputStream = new ZipInputStream(u.getInputStream()) --> Line_9 $$ ZipEntry entry = inputStream.getNextEntry() [FD]
Line_10 $$ while (null != entry) --> Line_11 $$ if (entry.getName().endsWith(".class")) [CD]
Line_12 $$ ClassParser parser = new ClassParser(inputStream, entry.getName()) --> Line_13 $$ Repository.addClass(parser.parse()) [FD]
Line_10 $$ while (null != entry) --> Line_15 $$ entry = inputStream.getNextEntry() [CD]
Line_8 $$ ZipInputStream inputStream = new ZipInputStream(u.getInputStream()) --> Line_15 $$ entry = inputStream.getNextEntry() [FD]
