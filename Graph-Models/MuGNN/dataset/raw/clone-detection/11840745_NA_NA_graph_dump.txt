Line_2 $$ public final void close() throws IOException --> Line_3 $$ if (dataStream == null) [CD]
Line_2 $$ public final void close() throws IOException --> Line_4 $$ dataStream.flush() [CD]
Line_2 $$ public final void close() throws IOException --> Line_5 $$ dataStream.close() [CD]
Line_2 $$ public final void close() throws IOException --> Line_7 $$ File tmpFile = new File(packPath + ".tmp") [CD]
Line_2 $$ public final void close() throws IOException --> Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) [CD]
Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) --> Line_11 $$ packStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1)) [FD]
Line_10 $$ String nbFiles = Long.toString(currentNbFiles) + "\0" --> Line_14 $$ int headerSize = structBuffer.size() + nbFiles.length() [FD]
Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) --> Line_15 $$ packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1)) [FD]
Line_14 $$ int headerSize = structBuffer.size() + nbFiles.length() --> Line_15 $$ packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1)) [FD]
Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) --> Line_16 $$ packStream.write('\0') [FD]
Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) --> Line_17 $$ packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1)) [FD]
Line_10 $$ String nbFiles = Long.toString(currentNbFiles) + "\0" --> Line_17 $$ packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1)) [FD]
Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) --> Line_18 $$ structBuffer.writeTo(packStream) [FD]
Line_24 $$ int read --> Line_25 $$ while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read) [FD]
Line_21 $$ FileInputStream in = new FileInputStream(tmpFile) --> Line_25 $$ while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read) [FD]
Line_23 $$ byte[] buffer = new byte[FILE_COPY_BUFFER_LEN] --> Line_25 $$ while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read) [FD]
Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) --> Line_25 $$ while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read) [FD]
Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) --> Line_26 $$ packStream.flush() [FD]
Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) --> Line_27 $$ packStream.close() [FD]
Line_21 $$ FileInputStream in = new FileInputStream(tmpFile) --> Line_29 $$ Utilities.closeStream(in) [FD]
Line_8 $$ FileOutputStream packStream = new FileOutputStream(packPath) --> Line_32 $$ Utilities.closeStream(packStream) [FD]
Line_2 $$ public final void close() throws IOException --> Line_34 $$ Utilities.deleteFile(tmpFile) [CD]
Line_7 $$ File tmpFile = new File(packPath + ".tmp") --> Line_34 $$ Utilities.deleteFile(tmpFile) [FD]
