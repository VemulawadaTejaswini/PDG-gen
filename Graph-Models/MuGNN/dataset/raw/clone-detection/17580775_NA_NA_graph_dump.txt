Line_2 $$ public void runInternal() --> Line_4 $$ boolean itemsLoadedPartially = false [CD]
Line_2 $$ public void runInternal() --> Line_5 $$ boolean loadNext = false [CD]
Line_2 $$ public void runInternal() --> Line_6 $$ HashSet<String> visited = new HashSet<String>() [CD]
Line_2 $$ public void runInternal() --> Line_7 $$ do [CD]
Line_6 $$ HashSet<String> visited = new HashSet<String>() --> Line_10 $$ visited.add(url.toString()) [FD]
Line_13 $$ URLConnection conn = url.openConnection() --> Line_14 $$ if (conn instanceof HttpsURLConnection) [FD]
Line_14 $$ if (conn instanceof HttpsURLConnection) --> Line_15 $$ onError("HTTPs is not supported yet") [CD]
Line_14 $$ if (conn instanceof HttpsURLConnection) --> Line_16 $$ return [CD]
Line_18 $$ if (!(conn instanceof HttpURLConnection)) --> Line_19 $$ onError("Only HTTP supported") [CD]
Line_18 $$ if (!(conn instanceof HttpURLConnection)) --> Line_20 $$ return [CD]
Line_31 $$ String disp = connection.getHeaderField("Content-Disposition") --> Line_32 $$ if (disp != null) [FD]
Line_32 $$ if (disp != null) --> Line_33 $$ int p = disp.indexOf("filename=") [CD]
Line_31 $$ String disp = connection.getHeaderField("Content-Disposition") --> Line_33 $$ int p = disp.indexOf("filename=") [FD]
Line_32 $$ if (disp != null) --> Line_34 $$ if (p > 0) [CD]
Line_33 $$ int p = disp.indexOf("filename=") --> Line_34 $$ if (p > 0) [FD]
Line_34 $$ if (p > 0) --> Line_35 $$ fileName = disp.substring(p + 9) [CD]
Line_30 $$ String fileName = null --> Line_35 $$ fileName = disp.substring(p + 9) [FD]
Line_31 $$ String disp = connection.getHeaderField("Content-Disposition") --> Line_35 $$ fileName = disp.substring(p + 9) [FD]
Line_38 $$ int response = -1 --> Line_39 $$ response = connection.getResponseCode() [FD]
Line_38 $$ int response = -1 --> Line_41 $$ if (response != 200) [FD]
Line_39 $$ response = connection.getResponseCode() --> Line_41 $$ if (response != 200) [FD]
Line_41 $$ if (response != 200) --> Line_42 $$ onError("Error " + response) [CD]
Line_41 $$ if (response != 200) --> Line_43 $$ return [CD]
Line_47 $$ int contentLen = connection.getContentLength() --> Line_51 $$ setProgressMessage(url.toString(), contentLen) [FD]
Line_52 $$ InputStream is = connection.getInputStream() --> Line_54 $$ is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80) [FD]
Line_45 $$ String contentType = connection.getContentType() --> Line_56 $$ boolean isZip = contentType != null && contentType.equals("application/zip") [FD]
Line_45 $$ String contentType = connection.getContentType() --> Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) [FD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_58 $$ byte[] buf = new byte[contentLen] [CD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_59 $$ if (is.read(buf) != contentLen) [CD]
Line_47 $$ int contentLen = connection.getContentLength() --> Line_59 $$ if (is.read(buf) != contentLen) [FD]
Line_52 $$ InputStream is = connection.getInputStream() --> Line_59 $$ if (is.read(buf) != contentLen) [FD]
Line_54 $$ is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80) --> Line_59 $$ if (is.read(buf) != contentLen) [FD]
Line_58 $$ byte[] buf = new byte[contentLen] --> Line_59 $$ if (is.read(buf) != contentLen) [FD]
Line_59 $$ if (is.read(buf) != contentLen) --> Line_60 $$ onError("Wrong content length") [CD]
Line_59 $$ if (is.read(buf) != contentLen) --> Line_61 $$ return [CD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_63 $$ is.close() [CD]
Line_52 $$ InputStream is = connection.getInputStream() --> Line_63 $$ is.close() [FD]
Line_54 $$ is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80) --> Line_63 $$ is.close() [FD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_64 $$ is = null [CD]
Line_52 $$ InputStream is = connection.getInputStream() --> Line_64 $$ is = null [FD]
Line_54 $$ is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80) --> Line_64 $$ is = null [FD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_65 $$ is = new ByteArrayInputStream(buf) [CD]
Line_52 $$ InputStream is = connection.getInputStream() --> Line_65 $$ is = new ByteArrayInputStream(buf) [FD]
Line_54 $$ is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80) --> Line_65 $$ is = new ByteArrayInputStream(buf) [FD]
Line_64 $$ is = null --> Line_65 $$ is = new ByteArrayInputStream(buf) [FD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_66 $$ if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) [CD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_66 $$ if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) [FD]
Line_58 $$ byte[] buf = new byte[contentLen] --> Line_66 $$ if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) [FD]
Line_45 $$ String contentType = connection.getContentType() --> Line_66 $$ if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) [FD]
Line_45 $$ String contentType = connection.getContentType() --> Line_68 $$ if (contentType.startsWith("application/atom+xml")) [FD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_68 $$ if (contentType.startsWith("application/atom+xml")) [FD]
Line_66 $$ if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) --> Line_68 $$ if (contentType.startsWith("application/atom+xml")) [FD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_69 $$ L.d("Parsing feed") [CD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_70 $$ parseFeed(is) [CD]
Line_52 $$ InputStream is = connection.getInputStream() --> Line_70 $$ parseFeed(is) [FD]
Line_54 $$ is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80) --> Line_70 $$ parseFeed(is) [FD]
Line_64 $$ is = null --> Line_70 $$ parseFeed(is) [FD]
Line_65 $$ is = new ByteArrayInputStream(buf) --> Line_70 $$ parseFeed(is) [FD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_71 $$ itemsLoadedPartially = true [CD]
Line_4 $$ boolean itemsLoadedPartially = false --> Line_71 $$ itemsLoadedPartially = true [FD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_72 $$ if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith("application/atom+xml;profile=opds-catalog")) [CD]
Line_72 $$ if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith("application/atom+xml;profile=opds-catalog")) --> Line_73 $$ if (handler.entries.size() < MAX_OPDS_ITEMS) [CD]
Line_73 $$ if (handler.entries.size() < MAX_OPDS_ITEMS) --> Line_75 $$ loadNext = !visited.contains(url.toString()) [CD]
Line_5 $$ boolean loadNext = false --> Line_75 $$ loadNext = !visited.contains(url.toString()) [FD]
Line_6 $$ HashSet<String> visited = new HashSet<String>() --> Line_75 $$ loadNext = !visited.contains(url.toString()) [FD]
Line_73 $$ if (handler.entries.size() < MAX_OPDS_ITEMS) --> Line_76 $$ L.d("continue with next part: " + url) [CD]
Line_73 $$ if (handler.entries.size() < MAX_OPDS_ITEMS) --> Line_78 $$ L.d("max item count reached: " + handler.entries.size()) [CD]
Line_73 $$ if (handler.entries.size() < MAX_OPDS_ITEMS) --> Line_79 $$ loadNext = false [CD]
Line_75 $$ loadNext = !visited.contains(url.toString()) --> Line_79 $$ loadNext = false [FD]
Line_5 $$ boolean loadNext = false --> Line_79 $$ loadNext = false [FD]
Line_72 $$ if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith("application/atom+xml;profile=opds-catalog")) --> Line_82 $$ loadNext = false [CD]
Line_75 $$ loadNext = !visited.contains(url.toString()) --> Line_82 $$ loadNext = false [FD]
Line_79 $$ loadNext = false --> Line_82 $$ loadNext = false [FD]
Line_5 $$ boolean loadNext = false --> Line_82 $$ loadNext = false [FD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_85 $$ fileName = defaultFileName [CD]
Line_30 $$ String fileName = null --> Line_85 $$ fileName = defaultFileName [FD]
Line_35 $$ fileName = disp.substring(p + 9) --> Line_85 $$ fileName = defaultFileName [FD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_86 $$ L.d("Downloading book: " + contentEncoding) [CD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [CD]
Line_45 $$ String contentType = connection.getContentType() --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_66 $$ if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_52 $$ InputStream is = connection.getInputStream() --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_54 $$ is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80) --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_64 $$ is = null --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_65 $$ is = new ByteArrayInputStream(buf) --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_47 $$ int contentLen = connection.getContentLength() --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_30 $$ String fileName = null --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_35 $$ fileName = disp.substring(p + 9) --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_85 $$ fileName = defaultFileName --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_56 $$ boolean isZip = contentType != null && contentType.equals("application/zip") --> Line_87 $$ downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip) [FD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_88 $$ coolReader.getEngine().hideProgress() [CD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_89 $$ loadNext = false [CD]
Line_75 $$ loadNext = !visited.contains(url.toString()) --> Line_89 $$ loadNext = false [FD]
Line_79 $$ loadNext = false --> Line_89 $$ loadNext = false [FD]
Line_82 $$ loadNext = false --> Line_89 $$ loadNext = false [FD]
Line_5 $$ boolean loadNext = false --> Line_89 $$ loadNext = false [FD]
Line_68 $$ if (contentType.startsWith("application/atom+xml")) --> Line_90 $$ itemsLoadedPartially = false [CD]
Line_71 $$ itemsLoadedPartially = true --> Line_90 $$ itemsLoadedPartially = false [FD]
Line_4 $$ boolean itemsLoadedPartially = false --> Line_90 $$ itemsLoadedPartially = false [FD]
Line_2 $$ public void runInternal() --> Line_104 $$ coolReader.getEngine().hideProgress() [CD]
Line_2 $$ public void runInternal() --> Line_105 $$ BackgroundThread.guiExecutor.execute(new Runnable() [CD]
Line_105 $$ BackgroundThread.guiExecutor.execute(new Runnable() --> Line_107 $$ L.d("Parsing is finished successfully. " + handler.entries.size() + " entries found") [CD]
Line_105 $$ BackgroundThread.guiExecutor.execute(new Runnable() --> Line_108 $$ callback.onFinish(handler.docInfo, handler.entries) [CD]
Line_57 $$ if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) --> Line_56 $$ boolean isZip = contentType != null && contentType.equals("application/zip") [FD]
Line_66 $$ if (findSubstring(buf, "<?xml version=") >= 0 && findSubstring(buf, "<feed") >= 0) --> Line_56 $$ boolean isZip = contentType != null && contentType.equals("application/zip") [FD]
Line_64 $$ is = null --> Line_59 $$ if (is.read(buf) != contentLen) [FD]
Line_65 $$ is = new ByteArrayInputStream(buf) --> Line_59 $$ if (is.read(buf) != contentLen) [FD]
Line_64 $$ is = null --> Line_63 $$ is.close() [FD]
Line_65 $$ is = new ByteArrayInputStream(buf) --> Line_63 $$ is.close() [FD]
