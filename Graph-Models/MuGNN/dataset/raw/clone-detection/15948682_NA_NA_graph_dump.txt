Line_2 $$ private byte[] odszyfrujKlucz(byte[] kluczSesyjny, int rozmiarKlucza) --> Line_3 $$ byte[] odszyfrowanyKlucz = null [CD]
Line_2 $$ private byte[] odszyfrujKlucz(byte[] kluczSesyjny, int rozmiarKlucza) --> Line_4 $$ byte[] kluczTymczasowy = null [CD]
Line_6 $$ MessageDigest skrot = MessageDigest.getInstance("SHA-1") --> Line_7 $$ skrot.update(haslo.getBytes()) [FD]
Line_6 $$ MessageDigest skrot = MessageDigest.getInstance("SHA-1") --> Line_8 $$ byte[] skrotHasla = skrot.digest() [FD]
Line_8 $$ byte[] skrotHasla = skrot.digest() --> Line_9 $$ Object kluczDoKlucza = MARS_Algorithm.makeKey(skrotHasla) [FD]
Line_4 $$ byte[] kluczTymczasowy = null --> Line_11 $$ kluczTymczasowy = new byte[rozmiarKlucza] [FD]
Line_12 $$ int liczbaBlokow = rozmiarKlucza / ROZMIAR_BLOKU --> Line_13 $$ for (int i = 0; i < liczbaBlokow; i++) [FD]
Line_13 $$ for (int i = 0; i < liczbaBlokow; i++) --> Line_14 $$ tekst = MARS_Algorithm.blockDecrypt(kluczSesyjny, i * ROZMIAR_BLOKU, kluczDoKlucza) [CD]
Line_10 $$ byte[] tekst = null --> Line_14 $$ tekst = MARS_Algorithm.blockDecrypt(kluczSesyjny, i * ROZMIAR_BLOKU, kluczDoKlucza) [FD]
Line_2 $$ private byte[] odszyfrujKlucz(byte[] kluczSesyjny, int rozmiarKlucza) --> Line_14 $$ tekst = MARS_Algorithm.blockDecrypt(kluczSesyjny, i * ROZMIAR_BLOKU, kluczDoKlucza) [FD]
Line_9 $$ Object kluczDoKlucza = MARS_Algorithm.makeKey(skrotHasla) --> Line_14 $$ tekst = MARS_Algorithm.blockDecrypt(kluczSesyjny, i * ROZMIAR_BLOKU, kluczDoKlucza) [FD]
Line_13 $$ for (int i = 0; i < liczbaBlokow; i++) --> Line_15 $$ System.arraycopy(tekst, 0, kluczTymczasowy, i * ROZMIAR_BLOKU, tekst.length) [CD]
Line_14 $$ tekst = MARS_Algorithm.blockDecrypt(kluczSesyjny, i * ROZMIAR_BLOKU, kluczDoKlucza) --> Line_15 $$ System.arraycopy(tekst, 0, kluczTymczasowy, i * ROZMIAR_BLOKU, tekst.length) [FD]
Line_10 $$ byte[] tekst = null --> Line_15 $$ System.arraycopy(tekst, 0, kluczTymczasowy, i * ROZMIAR_BLOKU, tekst.length) [FD]
Line_4 $$ byte[] kluczTymczasowy = null --> Line_15 $$ System.arraycopy(tekst, 0, kluczTymczasowy, i * ROZMIAR_BLOKU, tekst.length) [FD]
Line_11 $$ kluczTymczasowy = new byte[rozmiarKlucza] --> Line_15 $$ System.arraycopy(tekst, 0, kluczTymczasowy, i * ROZMIAR_BLOKU, tekst.length) [FD]
Line_3 $$ byte[] odszyfrowanyKlucz = null --> Line_17 $$ odszyfrowanyKlucz = new byte[dlugoscKlucza] [FD]
Line_4 $$ byte[] kluczTymczasowy = null --> Line_18 $$ System.arraycopy(kluczTymczasowy, 0, odszyfrowanyKlucz, 0, dlugoscKlucza) [FD]
Line_11 $$ kluczTymczasowy = new byte[rozmiarKlucza] --> Line_18 $$ System.arraycopy(kluczTymczasowy, 0, odszyfrowanyKlucz, 0, dlugoscKlucza) [FD]
Line_3 $$ byte[] odszyfrowanyKlucz = null --> Line_18 $$ System.arraycopy(kluczTymczasowy, 0, odszyfrowanyKlucz, 0, dlugoscKlucza) [FD]
Line_17 $$ odszyfrowanyKlucz = new byte[dlugoscKlucza] --> Line_18 $$ System.arraycopy(kluczTymczasowy, 0, odszyfrowanyKlucz, 0, dlugoscKlucza) [FD]
Line_2 $$ private byte[] odszyfrujKlucz(byte[] kluczSesyjny, int rozmiarKlucza) --> Line_24 $$ return odszyfrowanyKlucz [CD]
