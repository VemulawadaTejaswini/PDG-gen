Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_3 $$ Stack sourceStack = new Stack() [CD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_4 $$ Stack destinationStack = new Stack() [CD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_5 $$ sourceStack.push(source) [CD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_5 $$ sourceStack.push(source) [FD]
Line_3 $$ Stack sourceStack = new Stack() --> Line_5 $$ sourceStack.push(source) [FD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_6 $$ destinationStack.push(destination) [CD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_6 $$ destinationStack.push(destination) [FD]
Line_4 $$ Stack destinationStack = new Stack() --> Line_6 $$ destinationStack.push(destination) [FD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_7 $$ while (!sourceStack.isEmpty()) [CD]
Line_3 $$ Stack sourceStack = new Stack() --> Line_7 $$ while (!sourceStack.isEmpty()) [FD]
Line_7 $$ while (!sourceStack.isEmpty()) --> Line_8 $$ source = (File) sourceStack.pop() [CD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_8 $$ source = (File) sourceStack.pop() [FD]
Line_3 $$ Stack sourceStack = new Stack() --> Line_8 $$ source = (File) sourceStack.pop() [FD]
Line_7 $$ while (!sourceStack.isEmpty()) --> Line_9 $$ destination = (File) destinationStack.pop() [CD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_9 $$ destination = (File) destinationStack.pop() [FD]
Line_4 $$ Stack destinationStack = new Stack() --> Line_9 $$ destination = (File) destinationStack.pop() [FD]
Line_7 $$ while (!sourceStack.isEmpty()) --> Line_10 $$ if (!destination.exists()) [CD]
Line_9 $$ destination = (File) destinationStack.pop() --> Line_10 $$ if (!destination.exists()) [FD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_10 $$ if (!destination.exists()) [FD]
Line_7 $$ while (!sourceStack.isEmpty()) --> Line_11 $$ File[] files = source.listFiles() [CD]
Line_8 $$ source = (File) sourceStack.pop() --> Line_11 $$ File[] files = source.listFiles() [FD]
Line_2 $$ private void convertClasses(File source, File destination) throws PostProcessingException, CodeCheckException, IOException --> Line_11 $$ File[] files = source.listFiles() [FD]
Line_7 $$ while (!sourceStack.isEmpty()) --> Line_12 $$ for (int i = 0; i < files.length; i++) [CD]
Line_12 $$ for (int i = 0; i < files.length; i++) --> Line_13 $$ File current = (File) files[i] [CD]
Line_12 $$ for (int i = 0; i < files.length; i++) --> Line_14 $$ if (current.isDirectory()) [CD]
Line_13 $$ File current = (File) files[i] --> Line_14 $$ if (current.isDirectory()) [FD]
Line_14 $$ if (current.isDirectory()) --> Line_15 $$ sourceStack.push(current) [CD]
Line_3 $$ Stack sourceStack = new Stack() --> Line_15 $$ sourceStack.push(current) [FD]
Line_13 $$ File current = (File) files[i] --> Line_15 $$ sourceStack.push(current) [FD]
Line_14 $$ if (current.isDirectory()) --> Line_16 $$ destinationStack.push(new File(destination, current.getName())) [CD]
Line_4 $$ Stack destinationStack = new Stack() --> Line_16 $$ destinationStack.push(new File(destination, current.getName())) [FD]
Line_13 $$ File current = (File) files[i] --> Line_16 $$ destinationStack.push(new File(destination, current.getName())) [FD]
Line_14 $$ if (current.isDirectory()) --> Line_17 $$ if (current.getName().endsWith(".class")) [CD]
Line_13 $$ File current = (File) files[i] --> Line_17 $$ if (current.getName().endsWith(".class")) [FD]
Line_18 $$ ClassWriter writer = new ClassWriter() --> Line_20 $$ writer.readClass(is) [FD]
Line_19 $$ InputStream is = new BufferedInputStream(new FileInputStream(current)) --> Line_20 $$ writer.readClass(is) [FD]
Line_19 $$ InputStream is = new BufferedInputStream(new FileInputStream(current)) --> Line_21 $$ is.close() [FD]
Line_18 $$ ClassWriter writer = new ClassWriter() --> Line_22 $$ if ((getStatusFlags(writer.getClassName(writer.getCurrentClassIndex())) & PP_PROCESSED) != 0) [FD]
Line_22 $$ if ((getStatusFlags(writer.getClassName(writer.getCurrentClassIndex())) & PP_PROCESSED) != 0) --> Line_23 $$ ClassWriter[] auxWriter = new ClassWriter[1] [CD]
Line_22 $$ if ((getStatusFlags(writer.getClassName(writer.getCurrentClassIndex())) & PP_PROCESSED) != 0) --> Line_24 $$ transformClass(writer, auxWriter) [CD]
Line_18 $$ ClassWriter writer = new ClassWriter() --> Line_24 $$ transformClass(writer, auxWriter) [FD]
Line_23 $$ ClassWriter[] auxWriter = new ClassWriter[1] --> Line_24 $$ transformClass(writer, auxWriter) [FD]
Line_22 $$ if ((getStatusFlags(writer.getClassName(writer.getCurrentClassIndex())) & PP_PROCESSED) != 0) --> Line_25 $$ File output = new File(destination, current.getName()) [CD]
Line_13 $$ File current = (File) files[i] --> Line_25 $$ File output = new File(destination, current.getName()) [FD]
Line_22 $$ if ((getStatusFlags(writer.getClassName(writer.getCurrentClassIndex())) & PP_PROCESSED) != 0) --> Line_26 $$ OutputStream os = new BufferedOutputStream(new FileOutputStream(output)) [CD]
Line_22 $$ if ((getStatusFlags(writer.getClassName(writer.getCurrentClassIndex())) & PP_PROCESSED) != 0) --> Line_27 $$ writer.writeClass(os) [CD]
Line_18 $$ ClassWriter writer = new ClassWriter() --> Line_27 $$ writer.writeClass(os) [FD]
Line_26 $$ OutputStream os = new BufferedOutputStream(new FileOutputStream(output)) --> Line_27 $$ writer.writeClass(os) [FD]
Line_22 $$ if ((getStatusFlags(writer.getClassName(writer.getCurrentClassIndex())) & PP_PROCESSED) != 0) --> Line_28 $$ os.close() [CD]
Line_26 $$ OutputStream os = new BufferedOutputStream(new FileOutputStream(output)) --> Line_28 $$ os.close() [FD]
Line_22 $$ if ((getStatusFlags(writer.getClassName(writer.getCurrentClassIndex())) & PP_PROCESSED) != 0) --> Line_29 $$ if (auxWriter[0] != null) [CD]
Line_29 $$ if (auxWriter[0] != null) --> Line_30 $$ String className = auxWriter[0].getClassName(auxWriter[0].getCurrentClassIndex()) [CD]
Line_29 $$ if (auxWriter[0] != null) --> Line_31 $$ className = className.substring(className.lastIndexOf('.') + 1, className.length()) [CD]
Line_29 $$ if (auxWriter[0] != null) --> Line_32 $$ output = new File(destination, className + ".class") [CD]
Line_25 $$ File output = new File(destination, current.getName()) --> Line_32 $$ output = new File(destination, className + ".class") [FD]
Line_29 $$ if (auxWriter[0] != null) --> Line_33 $$ os = new BufferedOutputStream(new FileOutputStream(output)) [CD]
Line_26 $$ OutputStream os = new BufferedOutputStream(new FileOutputStream(output)) --> Line_33 $$ os = new BufferedOutputStream(new FileOutputStream(output)) [FD]
Line_29 $$ if (auxWriter[0] != null) --> Line_34 $$ auxWriter[0].writeClass(os) [CD]
Line_26 $$ OutputStream os = new BufferedOutputStream(new FileOutputStream(output)) --> Line_34 $$ auxWriter[0].writeClass(os) [FD]
Line_33 $$ os = new BufferedOutputStream(new FileOutputStream(output)) --> Line_34 $$ auxWriter[0].writeClass(os) [FD]
Line_29 $$ if (auxWriter[0] != null) --> Line_35 $$ os.close() [CD]
Line_26 $$ OutputStream os = new BufferedOutputStream(new FileOutputStream(output)) --> Line_35 $$ os.close() [FD]
Line_33 $$ os = new BufferedOutputStream(new FileOutputStream(output)) --> Line_35 $$ os.close() [FD]
Line_33 $$ os = new BufferedOutputStream(new FileOutputStream(output)) --> Line_27 $$ writer.writeClass(os) [FD]
Line_33 $$ os = new BufferedOutputStream(new FileOutputStream(output)) --> Line_28 $$ os.close() [FD]
