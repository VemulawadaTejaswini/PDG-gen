Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() [CD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_4 $$ qparams.add(new BasicNameValuePair("method", "gg.photos.geo.getListProvinces")) [CD]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() --> Line_4 $$ qparams.add(new BasicNameValuePair("method", "gg.photos.geo.getListProvinces")) [FD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_5 $$ qparams.add(new BasicNameValuePair("key", this.key)) [CD]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() --> Line_5 $$ qparams.add(new BasicNameValuePair("key", this.key)) [FD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_6 $$ String url = REST_URL + "?" + URLEncodedUtils.format(qparams, "UTF-8") [CD]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() --> Line_6 $$ String url = REST_URL + "?" + URLEncodedUtils.format(qparams, "UTF-8") [FD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_7 $$ URI uri = new URI(url) [CD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_8 $$ HttpGet httpget = new HttpGet(uri) [CD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_9 $$ HttpResponse response = httpClient.execute(httpget) [CD]
Line_8 $$ HttpGet httpget = new HttpGet(uri) --> Line_9 $$ HttpResponse response = httpClient.execute(httpget) [FD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_10 $$ int status = response.getStatusLine().getStatusCode() [CD]
Line_9 $$ HttpResponse response = httpClient.execute(httpget) --> Line_10 $$ int status = response.getStatusLine().getStatusCode() [FD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_11 $$ errorCheck(response, status) [CD]
Line_9 $$ HttpResponse response = httpClient.execute(httpget) --> Line_11 $$ errorCheck(response, status) [FD]
Line_10 $$ int status = response.getStatusLine().getStatusCode() --> Line_11 $$ errorCheck(response, status) [FD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_12 $$ InputStream content = response.getEntity().getContent() [CD]
Line_9 $$ HttpResponse response = httpClient.execute(httpget) --> Line_12 $$ InputStream content = response.getEntity().getContent() [FD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_13 $$ GGProvinces provinces = JAXB.unmarshal(content, GGProvinces.class) [CD]
Line_12 $$ InputStream content = response.getEntity().getContent() --> Line_13 $$ GGProvinces provinces = JAXB.unmarshal(content, GGProvinces.class) [FD]
Line_2 $$ public GGProvinces getListProvinces() throws IllegalStateException, GGException, Exception --> Line_14 $$ return provinces [CD]
