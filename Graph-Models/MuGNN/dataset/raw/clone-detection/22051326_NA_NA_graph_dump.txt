Line_2 $$ public static LicenseKey parseKey(String key) throws InvalidLicenseKeyException --> Line_3 $$ final String f_key = key.trim() [CD]
Line_2 $$ public static LicenseKey parseKey(String key) throws InvalidLicenseKeyException --> Line_3 $$ final String f_key = key.trim() [FD]
Line_2 $$ public static LicenseKey parseKey(String key) throws InvalidLicenseKeyException --> Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) [CD]
Line_2 $$ public static LicenseKey parseKey(String key) throws InvalidLicenseKeyException --> Line_5 $$ int tc = st.countTokens() [CD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_5 $$ int tc = st.countTokens() [FD]
Line_2 $$ public static LicenseKey parseKey(String key) throws InvalidLicenseKeyException --> Line_6 $$ int tc_name = tc - 9 [CD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_8 $$ final String product = st.nextToken() [FD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_9 $$ final String type = st.nextToken() [FD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_10 $$ final String loadStr = st.nextToken() [FD]
Line_10 $$ final String loadStr = st.nextToken() --> Line_11 $$ final int load = Integer.parseInt(loadStr) [FD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_12 $$ final String lowMajorVersionStr = st.nextToken() [FD]
Line_12 $$ final String lowMajorVersionStr = st.nextToken() --> Line_13 $$ final int lowMajorVersion = Integer.parseInt(lowMajorVersionStr) [FD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_14 $$ final String lowMinorVersionStr = st.nextToken() [FD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_16 $$ final String highMajorVersionStr = st.nextToken() [FD]
Line_16 $$ final String highMajorVersionStr = st.nextToken() --> Line_17 $$ final int highMajorVersion = Integer.parseInt(highMajorVersionStr) [FD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_18 $$ final String highMinorVersionStr = st.nextToken() [FD]
Line_6 $$ int tc_name = tc - 9 --> Line_21 $$ for (int i = 0; i < tc_name; i++) regName += (i == 0 ? st.nextToken() : FIELD_SEPERATOR + st.nextToken()) [FD]
Line_20 $$ String regName = "" --> Line_21 $$ for (int i = 0; i < tc_name; i++) regName += (i == 0 ? st.nextToken() : FIELD_SEPERATOR + st.nextToken()) [FD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_21 $$ for (int i = 0; i < tc_name; i++) regName += (i == 0 ? st.nextToken() : FIELD_SEPERATOR + st.nextToken()) [FD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_22 $$ final String randomHexStr = st.nextToken() [FD]
Line_4 $$ StringTokenizer st = new StringTokenizer(f_key, FIELD_SEPERATOR) --> Line_23 $$ final String md5Str = st.nextToken() [FD]
Line_3 $$ final String f_key = key.trim() --> Line_24 $$ String subKey = f_key.substring(0, f_key.indexOf(md5Str) - 1) [FD]
Line_23 $$ final String md5Str = st.nextToken() --> Line_24 $$ String subKey = f_key.substring(0, f_key.indexOf(md5Str) - 1) [FD]
Line_26 $$ MessageDigest md = null --> Line_27 $$ md = MessageDigest.getInstance("MD5") [FD]
Line_26 $$ MessageDigest md = null --> Line_28 $$ md.update(subKey.getBytes()) [FD]
Line_27 $$ md = MessageDigest.getInstance("MD5") --> Line_28 $$ md.update(subKey.getBytes()) [FD]
Line_24 $$ String subKey = f_key.substring(0, f_key.indexOf(md5Str) - 1) --> Line_28 $$ md.update(subKey.getBytes()) [FD]
Line_26 $$ MessageDigest md = null --> Line_29 $$ md.update(FIELD_SEPERATOR.getBytes()) [FD]
Line_27 $$ md = MessageDigest.getInstance("MD5") --> Line_29 $$ md.update(FIELD_SEPERATOR.getBytes()) [FD]
Line_26 $$ MessageDigest md = null --> Line_30 $$ md.update(zuonicsPassword.getBytes()) [FD]
Line_27 $$ md = MessageDigest.getInstance("MD5") --> Line_30 $$ md.update(zuonicsPassword.getBytes()) [FD]
Line_25 $$ byte[] md5 --> Line_31 $$ md5 = md.digest() [FD]
Line_26 $$ MessageDigest md = null --> Line_31 $$ md5 = md.digest() [FD]
Line_27 $$ md = MessageDigest.getInstance("MD5") --> Line_31 $$ md5 = md.digest() [FD]
Line_21 $$ for (int i = 0; i < tc_name; i++) regName += (i == 0 ? st.nextToken() : FIELD_SEPERATOR + st.nextToken()) --> Line_33 $$ for (int i = 0; i < md5.length; i++) testKey += Integer.toHexString(md5[i]).toUpperCase() [FD]
Line_32 $$ String testKey = subKey + FIELD_SEPERATOR --> Line_33 $$ for (int i = 0; i < md5.length; i++) testKey += Integer.toHexString(md5[i]).toUpperCase() [FD]
Line_33 $$ for (int i = 0; i < md5.length; i++) testKey += Integer.toHexString(md5[i]).toUpperCase() --> Line_34 $$ if (!testKey.equals(f_key)) [FD]
Line_32 $$ String testKey = subKey + FIELD_SEPERATOR --> Line_34 $$ if (!testKey.equals(f_key)) [FD]
Line_3 $$ final String f_key = key.trim() --> Line_34 $$ if (!testKey.equals(f_key)) [FD]
Line_36 $$ return new LicenseKey() --> Line_38 $$ return product [CD]
Line_36 $$ return new LicenseKey() --> Line_41 $$ return type [CD]
Line_36 $$ return new LicenseKey() --> Line_44 $$ return load [CD]
Line_36 $$ return new LicenseKey() --> Line_47 $$ return f_regName [CD]
Line_36 $$ return new LicenseKey() --> Line_50 $$ return lowMajorVersion + lowMinorVersion [CD]
Line_36 $$ return new LicenseKey() --> Line_53 $$ return highMajorVersion + highMinorVersion [CD]
Line_36 $$ return new LicenseKey() --> Line_56 $$ return randomHexStr [CD]
Line_36 $$ return new LicenseKey() --> Line_59 $$ return md5Str [CD]
Line_36 $$ return new LicenseKey() --> Line_62 $$ return f_key [CD]
Line_36 $$ return new LicenseKey() --> Line_65 $$ if (obj.toString().equals(toString())) [CD]
Line_36 $$ return new LicenseKey() --> Line_65 $$ if (obj.toString().equals(toString())) [FD]
Line_36 $$ return new LicenseKey() --> Line_66 $$ return false [CD]
