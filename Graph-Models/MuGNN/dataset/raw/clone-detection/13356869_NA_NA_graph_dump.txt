Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFileName), 8096)) --> Line_6 $$ out.setLevel(Deflater.BEST_COMPRESSION) [FD]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFileName), 8096)) --> Line_7 $$ out.setMethod(ZipOutputStream.DEFLATED) [FD]
Line_2 $$ public void createZip(File zipFileName, Vector<File> selected) --> Line_8 $$ for (int i = 0; i < selected.size(); i++) [FD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_9 $$ FileInputStream in = new FileInputStream(selected.get(i)) [CD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_9 $$ FileInputStream in = new FileInputStream(selected.get(i)) [FD]
Line_2 $$ public void createZip(File zipFileName, Vector<File> selected) --> Line_9 $$ FileInputStream in = new FileInputStream(selected.get(i)) [FD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_10 $$ String file = selected.get(i).getPath() [CD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_10 $$ String file = selected.get(i).getPath() [FD]
Line_2 $$ public void createZip(File zipFileName, Vector<File> selected) --> Line_10 $$ String file = selected.get(i).getPath() [FD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_11 $$ file = file.substring(file.lastIndexOf(Options.fs) + 1, file.length()) [CD]
Line_10 $$ String file = selected.get(i).getPath() --> Line_11 $$ file = file.substring(file.lastIndexOf(Options.fs) + 1, file.length()) [FD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_12 $$ ZipEntry ze = new ZipEntry(file) [CD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_13 $$ out.putNextEntry(ze) [CD]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFileName), 8096)) --> Line_13 $$ out.putNextEntry(ze) [FD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_14 $$ int len [CD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_15 $$ while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len) [CD]
Line_14 $$ int len --> Line_15 $$ while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len) [FD]
Line_9 $$ FileInputStream in = new FileInputStream(selected.get(i)) --> Line_15 $$ while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len) [FD]
Line_4 $$ byte[] buffer = new byte[4096] --> Line_15 $$ while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len) [FD]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFileName), 8096)) --> Line_15 $$ while ((len = in.read(buffer)) > 0) out.write(buffer, 0, len) [FD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_16 $$ out.closeEntry() [CD]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFileName), 8096)) --> Line_16 $$ out.closeEntry() [FD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_17 $$ in.close() [CD]
Line_9 $$ FileInputStream in = new FileInputStream(selected.get(i)) --> Line_17 $$ in.close() [FD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_18 $$ selected.get(i).delete() [CD]
Line_8 $$ for (int i = 0; i < selected.size(); i++) --> Line_18 $$ selected.get(i).delete() [FD]
Line_2 $$ public void createZip(File zipFileName, Vector<File> selected) --> Line_18 $$ selected.get(i).delete() [FD]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFileName), 8096)) --> Line_20 $$ out.close() [FD]
