Line_2 $$ public void setUp() throws Exception --> Line_3 $$ final URL url = getClass().getClassLoader().getResource("insecureSSL.keystore") [CD]
Line_2 $$ public void setUp() throws Exception --> Line_4 $$ final KeyStore keystore = KeyStore.getInstance("jks") [CD]
Line_2 $$ public void setUp() throws Exception --> Line_5 $$ final char[] pwd = "nopassword".toCharArray() [CD]
Line_2 $$ public void setUp() throws Exception --> Line_6 $$ keystore.load(url.openStream(), pwd) [CD]
Line_4 $$ final KeyStore keystore = KeyStore.getInstance("jks") --> Line_6 $$ keystore.load(url.openStream(), pwd) [FD]
Line_5 $$ final char[] pwd = "nopassword".toCharArray() --> Line_6 $$ keystore.load(url.openStream(), pwd) [FD]
Line_3 $$ final URL url = getClass().getClassLoader().getResource("insecureSSL.keystore") --> Line_6 $$ keystore.load(url.openStream(), pwd) [FD]
Line_2 $$ public void setUp() throws Exception --> Line_7 $$ final TrustManagerFactory trustManagerFactory = createTrustManagerFactory() [CD]
Line_2 $$ public void setUp() throws Exception --> Line_8 $$ trustManagerFactory.init(keystore) [CD]
Line_7 $$ final TrustManagerFactory trustManagerFactory = createTrustManagerFactory() --> Line_8 $$ trustManagerFactory.init(keystore) [FD]
Line_4 $$ final KeyStore keystore = KeyStore.getInstance("jks") --> Line_8 $$ trustManagerFactory.init(keystore) [FD]
Line_2 $$ public void setUp() throws Exception --> Line_9 $$ final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers() [CD]
Line_7 $$ final TrustManagerFactory trustManagerFactory = createTrustManagerFactory() --> Line_9 $$ final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers() [FD]
Line_2 $$ public void setUp() throws Exception --> Line_10 $$ final KeyManagerFactory keyManagerFactory = createKeyManagerFactory() [CD]
Line_2 $$ public void setUp() throws Exception --> Line_11 $$ keyManagerFactory.init(keystore, pwd) [CD]
Line_10 $$ final KeyManagerFactory keyManagerFactory = createKeyManagerFactory() --> Line_11 $$ keyManagerFactory.init(keystore, pwd) [FD]
Line_4 $$ final KeyStore keystore = KeyStore.getInstance("jks") --> Line_11 $$ keyManagerFactory.init(keystore, pwd) [FD]
Line_5 $$ final char[] pwd = "nopassword".toCharArray() --> Line_11 $$ keyManagerFactory.init(keystore, pwd) [FD]
Line_2 $$ public void setUp() throws Exception --> Line_12 $$ final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers() [CD]
Line_10 $$ final KeyManagerFactory keyManagerFactory = createKeyManagerFactory() --> Line_12 $$ final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers() [FD]
Line_2 $$ public void setUp() throws Exception --> Line_13 $$ final SSLContext serverSSLContext = SSLContext.getInstance("TLS") [CD]
Line_2 $$ public void setUp() throws Exception --> Line_14 $$ serverSSLContext.init(keyManagers, trustManagers, null) [CD]
Line_13 $$ final SSLContext serverSSLContext = SSLContext.getInstance("TLS") --> Line_14 $$ serverSSLContext.init(keyManagers, trustManagers, null) [FD]
Line_12 $$ final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers() --> Line_14 $$ serverSSLContext.init(keyManagers, trustManagers, null) [FD]
Line_9 $$ final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers() --> Line_14 $$ serverSSLContext.init(keyManagers, trustManagers, null) [FD]
Line_2 $$ public void setUp() throws Exception --> Line_16 $$ localServer_.registerDefaultHandlers() [CD]
Line_2 $$ public void setUp() throws Exception --> Line_17 $$ localServer_.start() [CD]
