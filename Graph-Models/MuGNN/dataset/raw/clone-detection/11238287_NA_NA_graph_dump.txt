Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser() --> Line_5 $$ Option formatOption = cmdLineParser.addStringOption('f', "format") [FD]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser() --> Line_6 $$ Option encodingOption = cmdLineParser.addStringOption('c', "charset") [FD]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser() --> Line_7 $$ cmdLineParser.parse(args) [FD]
Line_2 $$ public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException --> Line_7 $$ cmdLineParser.parse(args) [FD]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser() --> Line_8 $$ String format = (String) cmdLineParser.getOptionValue(formatOption) [FD]
Line_5 $$ Option formatOption = cmdLineParser.addStringOption('f', "format") --> Line_8 $$ String format = (String) cmdLineParser.getOptionValue(formatOption) [FD]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser() --> Line_9 $$ String encoding = (String) cmdLineParser.getOptionValue(encodingOption) [FD]
Line_6 $$ Option encodingOption = cmdLineParser.addStringOption('c', "charset") --> Line_9 $$ String encoding = (String) cmdLineParser.getOptionValue(encodingOption) [FD]
Line_9 $$ String encoding = (String) cmdLineParser.getOptionValue(encodingOption) --> Line_10 $$ if (encoding == null || encoding.trim().equals("")) [FD]
Line_10 $$ if (encoding == null || encoding.trim().equals("")) --> Line_11 $$ encoding = "utf-8" [CD]
Line_9 $$ String encoding = (String) cmdLineParser.getOptionValue(encodingOption) --> Line_11 $$ encoding = "utf-8" [FD]
Line_10 $$ if (encoding == null || encoding.trim().equals("")) --> Line_12 $$ System.out.println("Defaulting to output charset utf-8 as argument -c is missing or not valid.") [CD]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser() --> Line_14 $$ String[] remainingArgs = cmdLineParser.getRemainingArgs() [FD]
Line_15 $$ if (remainingArgs.length != 2) --> Line_16 $$ printUsage("Input and output file are not specified correctly. ") [CD]
Line_18 $$ File inputFile = new File(remainingArgs[0]) --> Line_19 $$ if (!inputFile.exists()) [FD]
Line_19 $$ if (!inputFile.exists()) --> Line_20 $$ printUsage("Input file " + remainingArgs[0] + " does not exist. ") [CD]
Line_22 $$ File outputFile = new File(remainingArgs[1]) --> Line_23 $$ if (!outputFile.exists()) [FD]
Line_23 $$ if (!outputFile.exists()) --> Line_24 $$ outputFile.createNewFile() [CD]
Line_22 $$ File outputFile = new File(remainingArgs[1]) --> Line_24 $$ outputFile.createNewFile() [FD]
Line_8 $$ String format = (String) cmdLineParser.getOptionValue(formatOption) --> Line_26 $$ if (format == null || format.trim().equals("")) [FD]
Line_26 $$ if (format == null || format.trim().equals("")) --> Line_27 $$ format = (String) FileUtil.cutExtension(outputFile.getName()).getValue() [CD]
Line_8 $$ String format = (String) cmdLineParser.getOptionValue(formatOption) --> Line_27 $$ format = (String) FileUtil.cutExtension(outputFile.getName()).getValue() [FD]
Line_22 $$ File outputFile = new File(remainingArgs[1]) --> Line_27 $$ format = (String) FileUtil.cutExtension(outputFile.getName()).getValue() [FD]
Line_8 $$ String format = (String) cmdLineParser.getOptionValue(formatOption) --> Line_29 $$ if ("tex".equals(format)) [FD]
Line_27 $$ format = (String) FileUtil.cutExtension(outputFile.getName()).getValue() --> Line_29 $$ if ("tex".equals(format)) [FD]
Line_29 $$ if ("tex".equals(format)) --> Line_30 $$ Reader reader = new LatexEncoderReader(new FileReader(inputFile)) [CD]
Line_29 $$ if ("tex".equals(format)) --> Line_31 $$ OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), encoding) [CD]
Line_29 $$ if ("tex".equals(format)) --> Line_32 $$ char[] buffer = new char[1024] [CD]
Line_29 $$ if ("tex".equals(format)) --> Line_33 $$ int read [CD]
Line_29 $$ if ("tex".equals(format)) --> Line_34 $$ do [CD]
Line_33 $$ int read --> Line_34 $$ do [FD]
Line_34 $$ do --> Line_35 $$ read = reader.read(buffer) [CD]
Line_33 $$ int read --> Line_35 $$ read = reader.read(buffer) [FD]
Line_30 $$ Reader reader = new LatexEncoderReader(new FileReader(inputFile)) --> Line_35 $$ read = reader.read(buffer) [FD]
Line_32 $$ char[] buffer = new char[1024] --> Line_35 $$ read = reader.read(buffer) [FD]
Line_34 $$ do --> Line_36 $$ if (read > 0) [CD]
Line_35 $$ read = reader.read(buffer) --> Line_36 $$ if (read > 0) [FD]
Line_33 $$ int read --> Line_36 $$ if (read > 0) [FD]
Line_36 $$ if (read > 0) --> Line_37 $$ out.write(buffer, 0, read) [CD]
Line_31 $$ OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), encoding) --> Line_37 $$ out.write(buffer, 0, read) [FD]
Line_32 $$ char[] buffer = new char[1024] --> Line_37 $$ out.write(buffer, 0, read) [FD]
Line_35 $$ read = reader.read(buffer) --> Line_37 $$ out.write(buffer, 0, read) [FD]
Line_33 $$ int read --> Line_37 $$ out.write(buffer, 0, read) [FD]
Line_29 $$ if ("tex".equals(format)) --> Line_40 $$ out.flush() [CD]
Line_31 $$ OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), encoding) --> Line_40 $$ out.flush() [FD]
Line_29 $$ if ("tex".equals(format)) --> Line_41 $$ out.close() [CD]
Line_31 $$ OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), encoding) --> Line_41 $$ out.close() [FD]
Line_29 $$ if ("tex".equals(format)) --> Line_43 $$ printUsage("Format not specified via argument -f. Also guessing for the extension of output file " + outputFile.getName() + " failed") [CD]
Line_22 $$ File outputFile = new File(remainingArgs[1]) --> Line_43 $$ printUsage("Format not specified via argument -f. Also guessing for the extension of output file " + outputFile.getName() + " failed") [FD]
Line_35 $$ read = reader.read(buffer) --> Line_34 $$ do [FD]
