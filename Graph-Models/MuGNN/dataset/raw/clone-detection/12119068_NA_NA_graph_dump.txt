Line_2 $$ public String drive() --> Line_3 $$ logger.info("\n") [CD]
Line_2 $$ public String drive() --> Line_4 $$ logger.info("===========================================================") [CD]
Line_2 $$ public String drive() --> Line_5 $$ logger.info("========== Start drive method =============================") [CD]
Line_2 $$ public String drive() --> Line_6 $$ logger.info("===========================================================") [CD]
Line_2 $$ public String drive() --> Line_7 $$ logger.entering(cl, "drive") [CD]
Line_2 $$ public String drive() --> Line_9 $$ xstream.setMode(XStream.NO_REFERENCES) [CD]
Line_2 $$ public String drive() --> Line_10 $$ xstream.alias("AuditDiffFacade", AuditDiffFacade.class) [CD]
Line_2 $$ public String drive() --> Line_11 $$ File auditSchemaFile = null [CD]
Line_2 $$ public String drive() --> Line_12 $$ File auditSchemaXsdFile = null [CD]
Line_14 $$ if (configFile == null) --> Line_15 $$ logger.severe("Request Failed: configFile is null") [CD]
Line_14 $$ if (configFile == null) --> Line_16 $$ return null [CD]
Line_14 $$ if (configFile == null) --> Line_18 $$ if (configFile.getAuditSchemaFile() != null) [CD]
Line_18 $$ if (configFile.getAuditSchemaFile() != null) --> Line_19 $$ logger.info("auditSchemaFile=" + configFile.getAuditSchemaFile()) [CD]
Line_18 $$ if (configFile.getAuditSchemaFile() != null) --> Line_20 $$ logger.info("auditSchemaXsdFile=" + configFile.getAuditSchemaXsdFile()) [CD]
Line_18 $$ if (configFile.getAuditSchemaFile() != null) --> Line_21 $$ logger.info("plnXpathFile=" + configFile.getPlnXpathFile()) [CD]
Line_18 $$ if (configFile.getAuditSchemaFile() != null) --> Line_22 $$ logger.info("auditSchemaFileDir=" + configFile.getAuditSchemaFileDir()) [CD]
Line_18 $$ if (configFile.getAuditSchemaFile() != null) --> Line_23 $$ logger.info("auditReportFile=" + configFile.getAuditReportFile()) [CD]
Line_18 $$ if (configFile.getAuditSchemaFile() != null) --> Line_24 $$ logger.info("auditReportXsdFile=" + configFile.getAuditReportXsdFile()) [CD]
Line_18 $$ if (configFile.getAuditSchemaFile() != null) --> Line_26 $$ logger.severe("Request Failed: auditSchemaFile is null") [CD]
Line_18 $$ if (configFile.getAuditSchemaFile() != null) --> Line_27 $$ return null [CD]
Line_11 $$ File auditSchemaFile = null --> Line_31 $$ auditSchemaFile = new File(configFile.getAuditSchemaFile()) [FD]
Line_11 $$ File auditSchemaFile = null --> Line_32 $$ if (!auditSchemaFile.exists() || auditSchemaFile.length() == 0L) [FD]
Line_31 $$ auditSchemaFile = new File(configFile.getAuditSchemaFile()) --> Line_32 $$ if (!auditSchemaFile.exists() || auditSchemaFile.length() == 0L) [FD]
Line_32 $$ if (!auditSchemaFile.exists() || auditSchemaFile.length() == 0L) --> Line_33 $$ logger.severe("Request Failed: the audit schema file does not exist or empty") [CD]
Line_32 $$ if (!auditSchemaFile.exists() || auditSchemaFile.length() == 0L) --> Line_34 $$ return null [CD]
Line_12 $$ File auditSchemaXsdFile = null --> Line_36 $$ auditSchemaXsdFile = null [FD]
Line_37 $$ if (configFile.getAuditSchemaXsdFile() != null) --> Line_38 $$ auditSchemaXsdFile = new File(configFile.getAuditSchemaXsdFile()) [CD]
Line_12 $$ File auditSchemaXsdFile = null --> Line_38 $$ auditSchemaXsdFile = new File(configFile.getAuditSchemaXsdFile()) [FD]
Line_36 $$ auditSchemaXsdFile = null --> Line_38 $$ auditSchemaXsdFile = new File(configFile.getAuditSchemaXsdFile()) [FD]
Line_37 $$ if (configFile.getAuditSchemaXsdFile() != null) --> Line_40 $$ logger.severe("Request Failed: the audit schema xsd file is null") [CD]
Line_37 $$ if (configFile.getAuditSchemaXsdFile() != null) --> Line_41 $$ return null [CD]
Line_12 $$ File auditSchemaXsdFile = null --> Line_43 $$ if (!auditSchemaXsdFile.exists() || auditSchemaXsdFile.length() == 0L) [FD]
Line_36 $$ auditSchemaXsdFile = null --> Line_43 $$ if (!auditSchemaXsdFile.exists() || auditSchemaXsdFile.length() == 0L) [FD]
Line_38 $$ auditSchemaXsdFile = new File(configFile.getAuditSchemaXsdFile()) --> Line_43 $$ if (!auditSchemaXsdFile.exists() || auditSchemaXsdFile.length() == 0L) [FD]
Line_43 $$ if (!auditSchemaXsdFile.exists() || auditSchemaXsdFile.length() == 0L) --> Line_44 $$ logger.severe("Request Failed: the audit schema xsd file does not exist or empty") [CD]
Line_43 $$ if (!auditSchemaXsdFile.exists() || auditSchemaXsdFile.length() == 0L) --> Line_45 $$ return null [CD]
Line_47 $$ SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI) --> Line_48 $$ Schema schema = factory.newSchema(auditSchemaXsdFile) [FD]
Line_12 $$ File auditSchemaXsdFile = null --> Line_48 $$ Schema schema = factory.newSchema(auditSchemaXsdFile) [FD]
Line_36 $$ auditSchemaXsdFile = null --> Line_48 $$ Schema schema = factory.newSchema(auditSchemaXsdFile) [FD]
Line_38 $$ auditSchemaXsdFile = new File(configFile.getAuditSchemaXsdFile()) --> Line_48 $$ Schema schema = factory.newSchema(auditSchemaXsdFile) [FD]
Line_48 $$ Schema schema = factory.newSchema(auditSchemaXsdFile) --> Line_49 $$ Validator validator = schema.newValidator() [FD]
Line_49 $$ Validator validator = schema.newValidator() --> Line_51 $$ validator.validate(source) [FD]
Line_50 $$ Source source = new StreamSource(auditSchemaFile) --> Line_51 $$ validator.validate(source) [FD]
Line_2 $$ public String drive() --> Line_59 $$ String xPathFile = null [CD]
Line_2 $$ public String drive() --> Line_60 $$ if (configFile.getPlnXpathFile() != null) [CD]
Line_60 $$ if (configFile.getPlnXpathFile() != null) --> Line_61 $$ xPathFile = configFile.getPlnXpathFile() [CD]
Line_59 $$ String xPathFile = null --> Line_61 $$ xPathFile = configFile.getPlnXpathFile() [FD]
Line_60 $$ if (configFile.getPlnXpathFile() != null) --> Line_62 $$ logger.info("Attempting to retrieve xpaths from file: '" + xPathFile + "'") [CD]
Line_60 $$ if (configFile.getPlnXpathFile() != null) --> Line_63 $$ XpathUtility.readFile(xPathFile) [CD]
Line_59 $$ String xPathFile = null --> Line_63 $$ XpathUtility.readFile(xPathFile) [FD]
Line_61 $$ xPathFile = configFile.getPlnXpathFile() --> Line_63 $$ XpathUtility.readFile(xPathFile) [FD]
Line_60 $$ if (configFile.getPlnXpathFile() != null) --> Line_65 $$ logger.severe("Configuration file does not have a value for the Xpath Filename") [CD]
Line_60 $$ if (configFile.getPlnXpathFile() != null) --> Line_66 $$ return null [CD]
Line_2 $$ public String drive() --> Line_68 $$ Properties xpathProps = XpathUtility.getXpathsProps() [CD]
Line_2 $$ public String drive() --> Line_69 $$ if (xpathProps == null) [CD]
Line_68 $$ Properties xpathProps = XpathUtility.getXpathsProps() --> Line_69 $$ if (xpathProps == null) [FD]
Line_69 $$ if (xpathProps == null) --> Line_70 $$ logger.severe("No Xpaths could be extracted from file: '" + xPathFile + "' - xpath properties object is null") [CD]
Line_69 $$ if (xpathProps == null) --> Line_71 $$ return null [CD]
Line_2 $$ public String drive() --> Line_73 $$ if (xpathProps.isEmpty()) [CD]
Line_68 $$ Properties xpathProps = XpathUtility.getXpathsProps() --> Line_73 $$ if (xpathProps.isEmpty()) [FD]
Line_73 $$ if (xpathProps.isEmpty()) --> Line_74 $$ logger.severe("No Xpaths could be extracted from file: '" + xPathFile + "' - xpath properties object is empty") [CD]
Line_73 $$ if (xpathProps.isEmpty()) --> Line_75 $$ return null [CD]
Line_2 $$ public String drive() --> Line_77 $$ logger.info(xpathProps.size() + " xpaths retrieved.") [CD]
Line_68 $$ Properties xpathProps = XpathUtility.getXpathsProps() --> Line_77 $$ logger.info(xpathProps.size() + " xpaths retrieved.") [FD]
Line_68 $$ Properties xpathProps = XpathUtility.getXpathsProps() --> Line_78 $$ for (String key : xpathProps.stringPropertyNames()) [FD]
Line_68 $$ Properties xpathProps = XpathUtility.getXpathsProps() --> Line_79 $$ logger.info("Key=" + key + "   Value=" + xpathProps.getProperty(key)) [FD]
Line_78 $$ for (String key : xpathProps.stringPropertyNames()) --> Line_79 $$ logger.info("Key=" + key + "   Value=" + xpathProps.getProperty(key)) [FD]
Line_2 $$ public String drive() --> Line_81 $$ logger.info("\n") [CD]
Line_2 $$ public String drive() --> Line_82 $$ logger.info("===========================================================") [CD]
Line_2 $$ public String drive() --> Line_83 $$ logger.info("========== Process XML Schema File BEGIN ==================") [CD]
Line_2 $$ public String drive() --> Line_84 $$ logger.info("===========================================================") [CD]
Line_2 $$ public String drive() --> Line_85 $$ SchemaSAXReader sax = new SchemaSAXReader() [CD]
Line_2 $$ public String drive() --> Line_86 $$ ArrayList<String> key_matches = new ArrayList<String>(sax.parseDocument(auditSchemaFile, xpathProps)) [CD]
Line_85 $$ SchemaSAXReader sax = new SchemaSAXReader() --> Line_86 $$ ArrayList<String> key_matches = new ArrayList<String>(sax.parseDocument(auditSchemaFile, xpathProps)) [FD]
Line_11 $$ File auditSchemaFile = null --> Line_86 $$ ArrayList<String> key_matches = new ArrayList<String>(sax.parseDocument(auditSchemaFile, xpathProps)) [FD]
Line_31 $$ auditSchemaFile = new File(configFile.getAuditSchemaFile()) --> Line_86 $$ ArrayList<String> key_matches = new ArrayList<String>(sax.parseDocument(auditSchemaFile, xpathProps)) [FD]
Line_68 $$ Properties xpathProps = XpathUtility.getXpathsProps() --> Line_86 $$ ArrayList<String> key_matches = new ArrayList<String>(sax.parseDocument(auditSchemaFile, xpathProps)) [FD]
Line_2 $$ public String drive() --> Line_87 $$ logger.info("Check Input xpath hash against xpaths found in Schema.") [CD]
Line_2 $$ public String drive() --> Line_88 $$ Comparison comp_keys = new Comparison() [CD]
Line_2 $$ public String drive() --> Line_89 $$ ArrayList<String> in_xpath_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(xpathProps, Utility.arraylist_to_map(key_matches, "key_matches"), "xpath Properties", "hm_key_matches")) [CD]
Line_88 $$ Comparison comp_keys = new Comparison() --> Line_89 $$ ArrayList<String> in_xpath_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(xpathProps, Utility.arraylist_to_map(key_matches, "key_matches"), "xpath Properties", "hm_key_matches")) [FD]
Line_68 $$ Properties xpathProps = XpathUtility.getXpathsProps() --> Line_89 $$ ArrayList<String> in_xpath_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(xpathProps, Utility.arraylist_to_map(key_matches, "key_matches"), "xpath Properties", "hm_key_matches")) [FD]
Line_86 $$ ArrayList<String> key_matches = new ArrayList<String>(sax.parseDocument(auditSchemaFile, xpathProps)) --> Line_89 $$ ArrayList<String> in_xpath_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(xpathProps, Utility.arraylist_to_map(key_matches, "key_matches"), "xpath Properties", "hm_key_matches")) [FD]
Line_2 $$ public String drive() --> Line_90 $$ if (in_xpath_not_in_schema.size() > 0) [CD]
Line_89 $$ ArrayList<String> in_xpath_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(xpathProps, Utility.arraylist_to_map(key_matches, "key_matches"), "xpath Properties", "hm_key_matches")) --> Line_90 $$ if (in_xpath_not_in_schema.size() > 0) [FD]
Line_90 $$ if (in_xpath_not_in_schema.size() > 0) --> Line_91 $$ logger.severe("All XPaths in Input xpath Properties list were not found in Schema.") [CD]
Line_90 $$ if (in_xpath_not_in_schema.size() > 0) --> Line_92 $$ logger.severe("Xpaths in xpath Properties list missing from schema file:" + xstream.toXML(in_xpath_not_in_schema)) [CD]
Line_89 $$ ArrayList<String> in_xpath_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(xpathProps, Utility.arraylist_to_map(key_matches, "key_matches"), "xpath Properties", "hm_key_matches")) --> Line_92 $$ logger.severe("Xpaths in xpath Properties list missing from schema file:" + xstream.toXML(in_xpath_not_in_schema)) [FD]
Line_90 $$ if (in_xpath_not_in_schema.size() > 0) --> Line_93 $$ logger.severe("Quitting.") [CD]
Line_90 $$ if (in_xpath_not_in_schema.size() > 0) --> Line_94 $$ return null [CD]
Line_2 $$ public String drive() --> Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() [CD]
Line_85 $$ SchemaSAXReader sax = new SchemaSAXReader() --> Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() [FD]
Line_2 $$ public String drive() --> Line_97 $$ logger.info("schema_audit_hashbox\n" + xstream.toXML(schema_audit_hashbox)) [CD]
Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() --> Line_97 $$ logger.info("schema_audit_hashbox\n" + xstream.toXML(schema_audit_hashbox)) [FD]
Line_2 $$ public String drive() --> Line_98 $$ Map<String, Map> schema_network_hashbox = sax.get_net_hashbox() [CD]
Line_85 $$ SchemaSAXReader sax = new SchemaSAXReader() --> Line_98 $$ Map<String, Map> schema_network_hashbox = sax.get_net_hashbox() [FD]
Line_2 $$ public String drive() --> Line_99 $$ logger.info("schema_network_hashbox\n" + xstream.toXML(schema_network_hashbox)) [CD]
Line_98 $$ Map<String, Map> schema_network_hashbox = sax.get_net_hashbox() --> Line_99 $$ logger.info("schema_network_hashbox\n" + xstream.toXML(schema_network_hashbox)) [FD]
Line_2 $$ public String drive() --> Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() [CD]
Line_85 $$ SchemaSAXReader sax = new SchemaSAXReader() --> Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() [FD]
Line_2 $$ public String drive() --> Line_101 $$ Map<String, Map> schema_au_hashbox = sax.get_au_hashbox() [CD]
Line_85 $$ SchemaSAXReader sax = new SchemaSAXReader() --> Line_101 $$ Map<String, Map> schema_au_hashbox = sax.get_au_hashbox() [FD]
Line_2 $$ public String drive() --> Line_102 $$ logger.info("schema_au_hashbox\n" + xstream.toXML(schema_au_hashbox)) [CD]
Line_101 $$ Map<String, Map> schema_au_hashbox = sax.get_au_hashbox() --> Line_102 $$ logger.info("schema_au_hashbox\n" + xstream.toXML(schema_au_hashbox)) [FD]
Line_2 $$ public String drive() --> Line_103 $$ Hasherator hr = new Hasherator() [CD]
Line_2 $$ public String drive() --> Line_104 $$ Set<String> s_host_hb_additions = new HashSet<String>() [CD]
Line_2 $$ public String drive() --> Line_105 $$ s_host_hb_additions.add("/SSP/network/@network_id") [CD]
Line_104 $$ Set<String> s_host_hb_additions = new HashSet<String>() --> Line_105 $$ s_host_hb_additions.add("/SSP/network/@network_id") [FD]
Line_2 $$ public String drive() --> Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) [CD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) [FD]
Line_98 $$ Map<String, Map> schema_network_hashbox = sax.get_net_hashbox() --> Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) [FD]
Line_104 $$ Set<String> s_host_hb_additions = new HashSet<String>() --> Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) [FD]
Line_2 $$ public String drive() --> Line_107 $$ logger.info("schema_host_hashbox(after adding network name)\n" + xstream.toXML(schema_host_hashbox)) [CD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_107 $$ logger.info("schema_host_hashbox(after adding network name)\n" + xstream.toXML(schema_host_hashbox)) [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_107 $$ logger.info("schema_host_hashbox(after adding network name)\n" + xstream.toXML(schema_host_hashbox)) [FD]
Line_2 $$ public String drive() --> Line_108 $$ Map<String, String> transforms_s_au_hb = new HashMap<String, String>() [CD]
Line_2 $$ public String drive() --> Line_109 $$ transforms_s_au_hb.put("/SSP/archivalUnits/au/auCapabilities/storageRequired/@max_size", "s_gigabytes_to_string_bytes_unformatted()") [CD]
Line_108 $$ Map<String, String> transforms_s_au_hb = new HashMap<String, String>() --> Line_109 $$ transforms_s_au_hb.put("/SSP/archivalUnits/au/auCapabilities/storageRequired/@max_size", "s_gigabytes_to_string_bytes_unformatted()") [FD]
Line_2 $$ public String drive() --> Line_110 $$ schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb) [CD]
Line_101 $$ Map<String, Map> schema_au_hashbox = sax.get_au_hashbox() --> Line_110 $$ schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_110 $$ schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb) [FD]
Line_108 $$ Map<String, String> transforms_s_au_hb = new HashMap<String, String>() --> Line_110 $$ schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb) [FD]
Line_2 $$ public String drive() --> Line_111 $$ Map<String, String> transforms_s_host_hb = new HashMap<String, String>() [CD]
Line_2 $$ public String drive() --> Line_112 $$ transforms_s_host_hb.put("/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size", "s_gigabytes_to_string_bytes_unformatted()") [CD]
Line_111 $$ Map<String, String> transforms_s_host_hb = new HashMap<String, String>() --> Line_112 $$ transforms_s_host_hb.put("/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size", "s_gigabytes_to_string_bytes_unformatted()") [FD]
Line_2 $$ public String drive() --> Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) [CD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) [FD]
Line_111 $$ Map<String, String> transforms_s_host_hb = new HashMap<String, String>() --> Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) [FD]
Line_2 $$ public String drive() --> Line_114 $$ logger.info("schema_host_hashbox(after transformations)\n" + xstream.toXML(schema_host_hashbox)) [CD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_114 $$ logger.info("schema_host_hashbox(after transformations)\n" + xstream.toXML(schema_host_hashbox)) [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_114 $$ logger.info("schema_host_hashbox(after transformations)\n" + xstream.toXML(schema_host_hashbox)) [FD]
Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) --> Line_114 $$ logger.info("schema_host_hashbox(after transformations)\n" + xstream.toXML(schema_host_hashbox)) [FD]
Line_2 $$ public String drive() --> Line_115 $$ logger.info("\n") [CD]
Line_2 $$ public String drive() --> Line_116 $$ logger.info("========== Process Schema  END ============================") [CD]
Line_2 $$ public String drive() --> Line_117 $$ logger.info("\n") [CD]
Line_2 $$ public String drive() --> Line_118 $$ logger.info("========== Database Operations ============================") [CD]
Line_2 $$ public String drive() --> Line_119 $$ MYSQLWorkPlnHostSummaryDAO daowphs = new MYSQLWorkPlnHostSummaryDAO() [CD]
Line_2 $$ public String drive() --> Line_120 $$ daowphs.drop() [CD]
Line_119 $$ MYSQLWorkPlnHostSummaryDAO daowphs = new MYSQLWorkPlnHostSummaryDAO() --> Line_120 $$ daowphs.drop() [FD]
Line_2 $$ public String drive() --> Line_121 $$ daowphs.create() [CD]
Line_119 $$ MYSQLWorkPlnHostSummaryDAO daowphs = new MYSQLWorkPlnHostSummaryDAO() --> Line_121 $$ daowphs.create() [FD]
Line_2 $$ public String drive() --> Line_122 $$ daowphs.updateTimestamp() [CD]
Line_119 $$ MYSQLWorkPlnHostSummaryDAO daowphs = new MYSQLWorkPlnHostSummaryDAO() --> Line_122 $$ daowphs.updateTimestamp() [FD]
Line_2 $$ public String drive() --> Line_123 $$ CachedRowSet rs_q0_N = daowphs.query_0_N() [CD]
Line_119 $$ MYSQLWorkPlnHostSummaryDAO daowphs = new MYSQLWorkPlnHostSummaryDAO() --> Line_123 $$ CachedRowSet rs_q0_N = daowphs.query_0_N() [FD]
Line_2 $$ public String drive() --> Line_124 $$ double d_space_total = DBUtil.get_single_db_double_value(rs_q0_N, "net_sum_repo_size") [CD]
Line_123 $$ CachedRowSet rs_q0_N = daowphs.query_0_N() --> Line_124 $$ double d_space_total = DBUtil.get_single_db_double_value(rs_q0_N, "net_sum_repo_size") [FD]
Line_2 $$ public String drive() --> Line_125 $$ double d_space_used = DBUtil.get_single_db_double_value(rs_q0_N, "net_sum_used_space") [CD]
Line_123 $$ CachedRowSet rs_q0_N = daowphs.query_0_N() --> Line_125 $$ double d_space_used = DBUtil.get_single_db_double_value(rs_q0_N, "net_sum_used_space") [FD]
Line_2 $$ public String drive() --> Line_126 $$ double d_space_free = d_space_total - d_space_used [CD]
Line_2 $$ public String drive() --> Line_127 $$ double d_avg_uptime = DBUtil.get_single_db_double_value(rs_q0_N, "net_avg_uptime") [CD]
Line_123 $$ CachedRowSet rs_q0_N = daowphs.query_0_N() --> Line_127 $$ double d_avg_uptime = DBUtil.get_single_db_double_value(rs_q0_N, "net_avg_uptime") [FD]
Line_2 $$ public String drive() --> Line_128 $$ long space_total = (long) d_space_total [CD]
Line_2 $$ public String drive() --> Line_129 $$ long space_used = (long) d_space_used [CD]
Line_2 $$ public String drive() --> Line_130 $$ long space_free = space_total - space_used [CD]
Line_2 $$ public String drive() --> Line_131 $$ String f_space_total = Utility.l_bytes_to_other_units_formatted(space_total, 3, "T") [CD]
Line_128 $$ long space_total = (long) d_space_total --> Line_131 $$ String f_space_total = Utility.l_bytes_to_other_units_formatted(space_total, 3, "T") [FD]
Line_2 $$ public String drive() --> Line_132 $$ String f_space_used = Utility.l_bytes_to_other_units_formatted(space_used, 3, "G") [CD]
Line_129 $$ long space_used = (long) d_space_used --> Line_132 $$ String f_space_used = Utility.l_bytes_to_other_units_formatted(space_used, 3, "G") [FD]
Line_2 $$ public String drive() --> Line_133 $$ String f_space_free = Utility.l_bytes_to_other_units_formatted(space_free, 3, "T") [CD]
Line_130 $$ long space_free = space_total - space_used --> Line_133 $$ String f_space_free = Utility.l_bytes_to_other_units_formatted(space_free, 3, "T") [FD]
Line_2 $$ public String drive() --> Line_134 $$ String f_space_free2 = Utility.l_bytes_to_other_units_formatted(space_free, 3, null) [CD]
Line_130 $$ long space_free = space_total - space_used --> Line_134 $$ String f_space_free2 = Utility.l_bytes_to_other_units_formatted(space_free, 3, null) [FD]
Line_2 $$ public String drive() --> Line_135 $$ logger.info("d_space_total: " + d_space_total + "\n" + "d_space_used: " + d_space_used + "\n" + "space_total: " + space_total + "\n" + "space_used: " + space_used + "\n" + "space_free: " + space_free + "\n\n" + "Double.toString( d_space_total ): " + Double.toString(d_space_total) + "\n\n" + "f_space_total: " + f_space_total + "\n" + "f_space_used: " + f_space_used + "\n" + "f_space_free: " + f_space_free + "\n" + "f_space_free2: " + f_space_free2) [CD]
Line_124 $$ double d_space_total = DBUtil.get_single_db_double_value(rs_q0_N, "net_sum_repo_size") --> Line_135 $$ logger.info("d_space_total: " + d_space_total + "\n" + "d_space_used: " + d_space_used + "\n" + "space_total: " + space_total + "\n" + "space_used: " + space_used + "\n" + "space_free: " + space_free + "\n\n" + "Double.toString( d_space_total ): " + Double.toString(d_space_total) + "\n\n" + "f_space_total: " + f_space_total + "\n" + "f_space_used: " + f_space_used + "\n" + "f_space_free: " + f_space_free + "\n" + "f_space_free2: " + f_space_free2) [FD]
Line_2 $$ public String drive() --> Line_137 $$ logger.info("\n") [CD]
Line_2 $$ public String drive() --> Line_138 $$ logger.info("========== Load Report Constants from Calculations ===========") [CD]
Line_2 $$ public String drive() --> Line_139 $$ rprtCnst.addKV("REPORT_HOSTS_TOTAL_DISKSPACE", f_space_total) [CD]
Line_131 $$ String f_space_total = Utility.l_bytes_to_other_units_formatted(space_total, 3, "T") --> Line_139 $$ rprtCnst.addKV("REPORT_HOSTS_TOTAL_DISKSPACE", f_space_total) [FD]
Line_2 $$ public String drive() --> Line_140 $$ rprtCnst.addKV("REPORT_HOSTS_TOTAL_DISKSPACE_USED", f_space_used) [CD]
Line_132 $$ String f_space_used = Utility.l_bytes_to_other_units_formatted(space_used, 3, "G") --> Line_140 $$ rprtCnst.addKV("REPORT_HOSTS_TOTAL_DISKSPACE_USED", f_space_used) [FD]
Line_2 $$ public String drive() --> Line_141 $$ rprtCnst.addKV("REPORT_HOSTS_TOTAL_DISKSPACE_FREE", f_space_free) [CD]
Line_133 $$ String f_space_free = Utility.l_bytes_to_other_units_formatted(space_free, 3, "T") --> Line_141 $$ rprtCnst.addKV("REPORT_HOSTS_TOTAL_DISKSPACE_FREE", f_space_free) [FD]
Line_2 $$ public String drive() --> Line_142 $$ rprtCnst.addKV("REPORT_HOSTS_MEAN_UPTIME", Utility.ms_to_dd_hh_mm_ss_formatted((long) d_avg_uptime)) [CD]
Line_2 $$ public String drive() --> Line_143 $$ logger.info("r=\n" + rprtCnst.toString()) [CD]
Line_2 $$ public String drive() --> Line_144 $$ logger.info("\n") [CD]
Line_2 $$ public String drive() --> Line_145 $$ logger.info("========== Load Report Constants from ConfigFile =============") [CD]
Line_2 $$ public String drive() --> Line_146 $$ rprtCnst.addKV("REPORT_FILENAME_SCHEMA_FILENAME", configFile.getAuditSchemaFile()) [CD]
Line_2 $$ public String drive() --> Line_147 $$ rprtCnst.addKV("REPORT_FILENAME_SCHEMA_FILE_XSD_FILENAME", configFile.getAuditSchemaXsdFile()) [CD]
Line_2 $$ public String drive() --> Line_148 $$ rprtCnst.addKV("REPORT_FILENAME_XML_DIFF_FILENAME", configFile.getAuditReportFile()) [CD]
Line_2 $$ public String drive() --> Line_149 $$ rprtCnst.addKV("REPORT_FILENAME_XML_DIFF_FILE_XSD_FILENAME", configFile.getAuditReportXsdFile()) [CD]
Line_2 $$ public String drive() --> Line_150 $$ logger.info("\n") [CD]
Line_2 $$ public String drive() --> Line_151 $$ logger.info("========== Load Report Constants from Hashboxes ==============") [CD]
Line_2 $$ public String drive() --> Line_152 $$ Set auditHBKeySet = hr.getMapKeyset(schema_audit_hashbox, "schema_audit_hashbox") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_152 $$ Set auditHBKeySet = hr.getMapKeyset(schema_audit_hashbox, "schema_audit_hashbox") [FD]
Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() --> Line_152 $$ Set auditHBKeySet = hr.getMapKeyset(schema_audit_hashbox, "schema_audit_hashbox") [FD]
Line_2 $$ public String drive() --> Line_153 $$ String audit_id = hr.singleKeysetEntryToString(auditHBKeySet) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_153 $$ String audit_id = hr.singleKeysetEntryToString(auditHBKeySet) [FD]
Line_152 $$ Set auditHBKeySet = hr.getMapKeyset(schema_audit_hashbox, "schema_audit_hashbox") --> Line_153 $$ String audit_id = hr.singleKeysetEntryToString(auditHBKeySet) [FD]
Line_2 $$ public String drive() --> Line_154 $$ logger.info("audit_id: " + audit_id) [CD]
Line_2 $$ public String drive() --> Line_155 $$ Set networkHBKeySet = hr.getMapKeyset(schema_network_hashbox, "schema_network_hashbox") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_155 $$ Set networkHBKeySet = hr.getMapKeyset(schema_network_hashbox, "schema_network_hashbox") [FD]
Line_98 $$ Map<String, Map> schema_network_hashbox = sax.get_net_hashbox() --> Line_155 $$ Set networkHBKeySet = hr.getMapKeyset(schema_network_hashbox, "schema_network_hashbox") [FD]
Line_2 $$ public String drive() --> Line_156 $$ String network_id = hr.singleKeysetEntryToString(networkHBKeySet) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_156 $$ String network_id = hr.singleKeysetEntryToString(networkHBKeySet) [FD]
Line_155 $$ Set networkHBKeySet = hr.getMapKeyset(schema_network_hashbox, "schema_network_hashbox") --> Line_156 $$ String network_id = hr.singleKeysetEntryToString(networkHBKeySet) [FD]
Line_2 $$ public String drive() --> Line_157 $$ logger.info("network_id: " + network_id) [CD]
Line_2 $$ public String drive() --> Line_158 $$ rprtCnst.addKV("REPORT_AUDIT_ID", audit_id) [CD]
Line_2 $$ public String drive() --> Line_159 $$ rprtCnst.addKV("REPORT_AUDIT_REPORT_EMAIL", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/auditReportEmail")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_159 $$ rprtCnst.addKV("REPORT_AUDIT_REPORT_EMAIL", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/auditReportEmail")) [FD]
Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() --> Line_159 $$ rprtCnst.addKV("REPORT_AUDIT_REPORT_EMAIL", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/auditReportEmail")) [FD]
Line_2 $$ public String drive() --> Line_160 $$ rprtCnst.addKV("REPORT_AUDIT_INTERVAL", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/auditReportInterval/@maxDays")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_160 $$ rprtCnst.addKV("REPORT_AUDIT_INTERVAL", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/auditReportInterval/@maxDays")) [FD]
Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() --> Line_160 $$ rprtCnst.addKV("REPORT_AUDIT_INTERVAL", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/auditReportInterval/@maxDays")) [FD]
Line_2 $$ public String drive() --> Line_161 $$ rprtCnst.addKV("REPORT_SCHEMA_VERSION", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/schemaVersion")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_161 $$ rprtCnst.addKV("REPORT_SCHEMA_VERSION", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/schemaVersion")) [FD]
Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() --> Line_161 $$ rprtCnst.addKV("REPORT_SCHEMA_VERSION", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/schemaVersion")) [FD]
Line_2 $$ public String drive() --> Line_162 $$ rprtCnst.addKV("REPORT_CLASSIFICATION_GEOGRAPHIC_SUMMARY_SCHEME", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/geographicSummaryScheme")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_162 $$ rprtCnst.addKV("REPORT_CLASSIFICATION_GEOGRAPHIC_SUMMARY_SCHEME", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/geographicSummaryScheme")) [FD]
Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() --> Line_162 $$ rprtCnst.addKV("REPORT_CLASSIFICATION_GEOGRAPHIC_SUMMARY_SCHEME", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/geographicSummaryScheme")) [FD]
Line_2 $$ public String drive() --> Line_163 $$ rprtCnst.addKV("REPORT_CLASSIFICATION_SUBJECT_SUMMARY_SCHEME", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/subjectSummaryScheme")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_163 $$ rprtCnst.addKV("REPORT_CLASSIFICATION_SUBJECT_SUMMARY_SCHEME", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/subjectSummaryScheme")) [FD]
Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() --> Line_163 $$ rprtCnst.addKV("REPORT_CLASSIFICATION_SUBJECT_SUMMARY_SCHEME", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/subjectSummaryScheme")) [FD]
Line_2 $$ public String drive() --> Line_164 $$ rprtCnst.addKV("REPORT_CLASSIFICATION_OWNER_INSTITUTION_SUMMARY_SCHEME", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/ownerInstSummaryScheme")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_164 $$ rprtCnst.addKV("REPORT_CLASSIFICATION_OWNER_INSTITUTION_SUMMARY_SCHEME", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/ownerInstSummaryScheme")) [FD]
Line_96 $$ Map<String, Map> schema_audit_hashbox = sax.get_audit_hashbox() --> Line_164 $$ rprtCnst.addKV("REPORT_CLASSIFICATION_OWNER_INSTITUTION_SUMMARY_SCHEME", hr.extractSingleValueFromHashbox(schema_audit_hashbox, "schema_audit_hashbox", audit_id, "/SSP/audit/ownerInstSummaryScheme")) [FD]
Line_2 $$ public String drive() --> Line_165 $$ rprtCnst.addKV("REPORT_NETWORK_ID", network_id) [CD]
Line_2 $$ public String drive() --> Line_166 $$ rprtCnst.addKV("REPORT_NETWORK_ADMIN_EMAIL", hr.extractSingleValueFromHashbox(schema_network_hashbox, "schema_network_hashbox", network_id, "/SSP/network/networkIdentity/accessBase/@adminEmail")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_166 $$ rprtCnst.addKV("REPORT_NETWORK_ADMIN_EMAIL", hr.extractSingleValueFromHashbox(schema_network_hashbox, "schema_network_hashbox", network_id, "/SSP/network/networkIdentity/accessBase/@adminEmail")) [FD]
Line_98 $$ Map<String, Map> schema_network_hashbox = sax.get_net_hashbox() --> Line_166 $$ rprtCnst.addKV("REPORT_NETWORK_ADMIN_EMAIL", hr.extractSingleValueFromHashbox(schema_network_hashbox, "schema_network_hashbox", network_id, "/SSP/network/networkIdentity/accessBase/@adminEmail")) [FD]
Line_2 $$ public String drive() --> Line_167 $$ rprtCnst.addKV("REPORT_GEOGRAPHIC_CODING", hr.extractSingleValueFromHashbox(schema_network_hashbox, "schema_network_hashbox", network_id, "/SSP/network/networkIdentity/geographicCoding")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_167 $$ rprtCnst.addKV("REPORT_GEOGRAPHIC_CODING", hr.extractSingleValueFromHashbox(schema_network_hashbox, "schema_network_hashbox", network_id, "/SSP/network/networkIdentity/geographicCoding")) [FD]
Line_98 $$ Map<String, Map> schema_network_hashbox = sax.get_net_hashbox() --> Line_167 $$ rprtCnst.addKV("REPORT_GEOGRAPHIC_CODING", hr.extractSingleValueFromHashbox(schema_network_hashbox, "schema_network_hashbox", network_id, "/SSP/network/networkIdentity/geographicCoding")) [FD]
Line_2 $$ public String drive() --> Line_168 $$ logger.info("\n") [CD]
Line_2 $$ public String drive() --> Line_169 $$ logger.info("===========================================================") [CD]
Line_2 $$ public String drive() --> Line_170 $$ logger.info("========== Process Network Data BEGIN======================") [CD]
Line_2 $$ public String drive() --> Line_171 $$ logger.info("===========================================================") [CD]
Line_2 $$ public String drive() --> Line_172 $$ Set<String> tableSet0 = reportAuOverviewFacade.findAllTables() [CD]
Line_2 $$ public String drive() --> Line_173 $$ String reportAuOverviewTable = "report_au_overview" [CD]
Line_2 $$ public String drive() --> Line_174 $$ int n_tabs = 0 [CD]
Line_2 $$ public String drive() --> Line_175 $$ if (tableSet0 != null && !tableSet0.isEmpty()) [CD]
Line_172 $$ Set<String> tableSet0 = reportAuOverviewFacade.findAllTables() --> Line_175 $$ if (tableSet0 != null && !tableSet0.isEmpty()) [FD]
Line_175 $$ if (tableSet0 != null && !tableSet0.isEmpty()) --> Line_176 $$ logger.fine("Table List N=" + tableSet0.size()) [CD]
Line_172 $$ Set<String> tableSet0 = reportAuOverviewFacade.findAllTables() --> Line_176 $$ logger.fine("Table List N=" + tableSet0.size()) [FD]
Line_174 $$ int n_tabs = 0 --> Line_178 $$ n_tabs++ [FD]
Line_177 $$ for (String tableName : tableSet0) --> Line_179 $$ if (tableName.equalsIgnoreCase(reportAuOverviewTable)) [FD]
Line_173 $$ String reportAuOverviewTable = "report_au_overview" --> Line_179 $$ if (tableName.equalsIgnoreCase(reportAuOverviewTable)) [FD]
Line_179 $$ if (tableName.equalsIgnoreCase(reportAuOverviewTable)) --> Line_180 $$ logger.fine(n_tabs + " " + tableName + " <--") [CD]
Line_179 $$ if (tableName.equalsIgnoreCase(reportAuOverviewTable)) --> Line_182 $$ logger.fine(n_tabs + " " + tableName) [CD]
Line_175 $$ if (tableSet0 != null && !tableSet0.isEmpty()) --> Line_186 $$ logger.fine("No tables found in DB.") [CD]
Line_2 $$ public String drive() --> Line_188 $$ if (!tableSet0.contains(reportAuOverviewTable)) [CD]
Line_172 $$ Set<String> tableSet0 = reportAuOverviewFacade.findAllTables() --> Line_188 $$ if (!tableSet0.contains(reportAuOverviewTable)) [FD]
Line_173 $$ String reportAuOverviewTable = "report_au_overview" --> Line_188 $$ if (!tableSet0.contains(reportAuOverviewTable)) [FD]
Line_188 $$ if (!tableSet0.contains(reportAuOverviewTable)) --> Line_189 $$ logger.info("Database does not contain table '" + reportAuOverviewTable + "'") [CD]
Line_2 $$ public String drive() --> Line_191 $$ List<ReportAuOverview> repAuOvTabAllData = null [CD]
Line_2 $$ public String drive() --> Line_192 $$ repAuOvTabAllData = reportAuOverviewFacade.findAll() [CD]
Line_191 $$ List<ReportAuOverview> repAuOvTabAllData = null --> Line_192 $$ repAuOvTabAllData = reportAuOverviewFacade.findAll() [FD]
Line_2 $$ public String drive() --> Line_193 $$ if (repAuOvTabAllData != null && !(repAuOvTabAllData.isEmpty())) [CD]
Line_191 $$ List<ReportAuOverview> repAuOvTabAllData = null --> Line_193 $$ if (repAuOvTabAllData != null && !(repAuOvTabAllData.isEmpty())) [FD]
Line_192 $$ repAuOvTabAllData = reportAuOverviewFacade.findAll() --> Line_193 $$ if (repAuOvTabAllData != null && !(repAuOvTabAllData.isEmpty())) [FD]
Line_193 $$ if (repAuOvTabAllData != null && !(repAuOvTabAllData.isEmpty())) --> Line_194 $$ logger.fine("\n" + reportAuOverviewTable + " table has " + repAuOvTabAllData.size() + " rows.") [CD]
Line_191 $$ List<ReportAuOverview> repAuOvTabAllData = null --> Line_194 $$ logger.fine("\n" + reportAuOverviewTable + " table has " + repAuOvTabAllData.size() + " rows.") [FD]
Line_192 $$ repAuOvTabAllData = reportAuOverviewFacade.findAll() --> Line_194 $$ logger.fine("\n" + reportAuOverviewTable + " table has " + repAuOvTabAllData.size() + " rows.") [FD]
Line_193 $$ if (repAuOvTabAllData != null && !(repAuOvTabAllData.isEmpty())) --> Line_195 $$ int n_rows = 0 [CD]
Line_195 $$ int n_rows = 0 --> Line_197 $$ n_rows++ [FD]
Line_196 $$ for (ReportAuOverview row : repAuOvTabAllData) --> Line_198 $$ logger.fine(n_rows + " " + row.toString()) [FD]
Line_193 $$ if (repAuOvTabAllData != null && !(repAuOvTabAllData.isEmpty())) --> Line_201 $$ logger.fine(reportAuOverviewTable + " is null, empty, or nonexistent.") [CD]
Line_2 $$ public String drive() --> Line_203 $$ logger.fine("report_au_overview Table xstream Dump:\n" + xstream.toXML(repAuOvTabAllData)) [CD]
Line_191 $$ List<ReportAuOverview> repAuOvTabAllData = null --> Line_203 $$ logger.fine("report_au_overview Table xstream Dump:\n" + xstream.toXML(repAuOvTabAllData)) [FD]
Line_192 $$ repAuOvTabAllData = reportAuOverviewFacade.findAll() --> Line_203 $$ logger.fine("report_au_overview Table xstream Dump:\n" + xstream.toXML(repAuOvTabAllData)) [FD]
Line_2 $$ public String drive() --> Line_204 $$ logger.fine("\n") [CD]
Line_2 $$ public String drive() --> Line_205 $$ logger.fine("Iterate over repAuOvTabAllData 2") [CD]
Line_2 $$ public String drive() --> Line_206 $$ Iterator it = repAuOvTabAllData.iterator() [CD]
Line_191 $$ List<ReportAuOverview> repAuOvTabAllData = null --> Line_206 $$ Iterator it = repAuOvTabAllData.iterator() [FD]
Line_192 $$ repAuOvTabAllData = reportAuOverviewFacade.findAll() --> Line_206 $$ Iterator it = repAuOvTabAllData.iterator() [FD]
Line_2 $$ public String drive() --> Line_207 $$ int n_el = 0 [CD]
Line_2 $$ public String drive() --> Line_208 $$ while (it.hasNext()) [CD]
Line_206 $$ Iterator it = repAuOvTabAllData.iterator() --> Line_208 $$ while (it.hasNext()) [FD]
Line_208 $$ while (it.hasNext()) --> Line_209 $$ ++n_el [CD]
Line_207 $$ int n_el = 0 --> Line_209 $$ ++n_el [FD]
Line_208 $$ while (it.hasNext()) --> Line_210 $$ String el = it.next().toString() [CD]
Line_206 $$ Iterator it = repAuOvTabAllData.iterator() --> Line_210 $$ String el = it.next().toString() [FD]
Line_208 $$ while (it.hasNext()) --> Line_211 $$ logger.fine(n_el + ". " + el) [CD]
Line_2 $$ public String drive() --> Line_213 $$ Class aClass = edu.harvard.iq.safe.saasystem.entities.ReportAuOverview.class [CD]
Line_2 $$ public String drive() --> Line_214 $$ String reportAuOverviewTableName = reportAuOverviewFacade.getTableName() [CD]
Line_2 $$ public String drive() --> Line_215 $$ logger.fine("\n") [CD]
Line_2 $$ public String drive() --> Line_216 $$ logger.fine("EntityManager Tests") [CD]
Line_2 $$ public String drive() --> Line_217 $$ logger.fine("Table: " + reportAuOverviewTableName) [CD]
Line_2 $$ public String drive() --> Line_218 $$ logger.fine("\n") [CD]
Line_2 $$ public String drive() --> Line_219 $$ logger.fine("Schema: " + reportAuOverviewFacade.getSchema()) [CD]
Line_2 $$ public String drive() --> Line_220 $$ logger.fine("\n") [CD]
Line_2 $$ public String drive() --> Line_221 $$ Set columnList = reportAuOverviewFacade.getColumnList(reportAuOverviewFacade.getTableName()) [CD]
Line_2 $$ public String drive() --> Line_222 $$ logger.fine("Columns (fields) in table '" + reportAuOverviewTableName + "' (N=" + columnList.size() + ")") [CD]
Line_221 $$ Set columnList = reportAuOverviewFacade.getColumnList(reportAuOverviewFacade.getTableName()) --> Line_222 $$ logger.fine("Columns (fields) in table '" + reportAuOverviewTableName + "' (N=" + columnList.size() + ")") [FD]
Line_2 $$ public String drive() --> Line_223 $$ Set<String> colList = new HashSet() [CD]
Line_2 $$ public String drive() --> Line_224 $$ Iterator colNames = columnList.iterator() [CD]
Line_221 $$ Set columnList = reportAuOverviewFacade.getColumnList(reportAuOverviewFacade.getTableName()) --> Line_224 $$ Iterator colNames = columnList.iterator() [FD]
Line_2 $$ public String drive() --> Line_225 $$ int n_el2 = 0 [CD]
Line_2 $$ public String drive() --> Line_226 $$ while (colNames.hasNext()) [CD]
Line_224 $$ Iterator colNames = columnList.iterator() --> Line_226 $$ while (colNames.hasNext()) [FD]
Line_226 $$ while (colNames.hasNext()) --> Line_227 $$ ++n_el2 [CD]
Line_225 $$ int n_el2 = 0 --> Line_227 $$ ++n_el2 [FD]
Line_226 $$ while (colNames.hasNext()) --> Line_228 $$ String el = colNames.next().toString() [CD]
Line_224 $$ Iterator colNames = columnList.iterator() --> Line_228 $$ String el = colNames.next().toString() [FD]
Line_226 $$ while (colNames.hasNext()) --> Line_229 $$ logger.fine(n_el2 + ". " + el) [CD]
Line_226 $$ while (colNames.hasNext()) --> Line_230 $$ colList.add(el) [CD]
Line_223 $$ Set<String> colList = new HashSet() --> Line_230 $$ colList.add(el) [FD]
Line_228 $$ String el = colNames.next().toString() --> Line_230 $$ colList.add(el) [FD]
Line_210 $$ String el = it.next().toString() --> Line_230 $$ colList.add(el) [FD]
Line_2 $$ public String drive() --> Line_232 $$ logger.fine(colList.size() + " entries in Set 'colList' ") [CD]
Line_223 $$ Set<String> colList = new HashSet() --> Line_232 $$ logger.fine(colList.size() + " entries in Set 'colList' ") [FD]
Line_2 $$ public String drive() --> Line_233 $$ logger.info("========== Query 'au_overview_table'=============") [CD]
Line_2 $$ public String drive() --> Line_234 $$ MySQLAuOverviewDAO daoao = new MySQLAuOverviewDAO() [CD]
Line_2 $$ public String drive() --> Line_235 $$ CachedRowSet rs_q1_A = daoao.query_q1_A() [CD]
Line_234 $$ MySQLAuOverviewDAO daoao = new MySQLAuOverviewDAO() --> Line_235 $$ CachedRowSet rs_q1_A = daoao.query_q1_A() [FD]
Line_2 $$ public String drive() --> Line_236 $$ int[] au_table_rc = DBUtil.get_rs_dims(rs_q1_A) [CD]
Line_235 $$ CachedRowSet rs_q1_A = daoao.query_q1_A() --> Line_236 $$ int[] au_table_rc = DBUtil.get_rs_dims(rs_q1_A) [FD]
Line_2 $$ public String drive() --> Line_237 $$ logger.info("Au Table Query ResultSet has " + au_table_rc[0] + " rows and " + au_table_rc[1] + " columns.") [CD]
Line_2 $$ public String drive() --> Line_238 $$ rprtCnst.addKV("REPORT_N_AUS_IN_NETWORK", Integer.toString(au_table_rc[0])) [CD]
Line_2 $$ public String drive() --> Line_239 $$ logger.info("========== Create 'network_au_hashbox' ==========") [CD]
Line_2 $$ public String drive() --> Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) [CD]
Line_235 $$ CachedRowSet rs_q1_A = daoao.query_q1_A() --> Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) [FD]
Line_2 $$ public String drive() --> Line_241 $$ logger.info("network_au_hashbox before transformations\n" + xstream.toXML(network_au_hashbox)) [CD]
Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) --> Line_241 $$ logger.info("network_au_hashbox before transformations\n" + xstream.toXML(network_au_hashbox)) [FD]
Line_2 $$ public String drive() --> Line_242 $$ Map<String, String> transforms_n_au_hb = new HashMap<String, String>() [CD]
Line_2 $$ public String drive() --> Line_243 $$ transforms_n_au_hb.put("last_s_crawl_end", "ms_to_decimal_days_elapsed()") [CD]
Line_242 $$ Map<String, String> transforms_n_au_hb = new HashMap<String, String>() --> Line_243 $$ transforms_n_au_hb.put("last_s_crawl_end", "ms_to_decimal_days_elapsed()") [FD]
Line_2 $$ public String drive() --> Line_244 $$ transforms_n_au_hb.put("last_s_poll_end", "ms_to_decimal_days_elapsed()") [CD]
Line_242 $$ Map<String, String> transforms_n_au_hb = new HashMap<String, String>() --> Line_244 $$ transforms_n_au_hb.put("last_s_poll_end", "ms_to_decimal_days_elapsed()") [FD]
Line_2 $$ public String drive() --> Line_245 $$ transforms_n_au_hb.put("crawl_duration", "ms_to_decimal_days()") [CD]
Line_242 $$ Map<String, String> transforms_n_au_hb = new HashMap<String, String>() --> Line_245 $$ transforms_n_au_hb.put("crawl_duration", "ms_to_decimal_days()") [FD]
Line_2 $$ public String drive() --> Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) [CD]
Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) --> Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) [FD]
Line_242 $$ Map<String, String> transforms_n_au_hb = new HashMap<String, String>() --> Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) [FD]
Line_2 $$ public String drive() --> Line_247 $$ Map<String, String> auNVerifiedRegions = reportAuOverviewFacade.getAuNVerifiedRegions() [CD]
Line_2 $$ public String drive() --> Line_248 $$ logger.fine("auNVerifiedRegions\n" + xstream.toXML(auNVerifiedRegions)) [CD]
Line_247 $$ Map<String, String> auNVerifiedRegions = reportAuOverviewFacade.getAuNVerifiedRegions() --> Line_248 $$ logger.fine("auNVerifiedRegions\n" + xstream.toXML(auNVerifiedRegions)) [FD]
Line_2 $$ public String drive() --> Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") [CD]
Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) --> Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") [FD]
Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) --> Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") [FD]
Line_247 $$ Map<String, String> auNVerifiedRegions = reportAuOverviewFacade.getAuNVerifiedRegions() --> Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") [FD]
Line_2 $$ public String drive() --> Line_250 $$ logger.info("network_au_hashbox after Transformations and Addition of 'au_n_verified_regions'" + xstream.toXML(network_au_hashbox)) [CD]
Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) --> Line_250 $$ logger.info("network_au_hashbox after Transformations and Addition of 'au_n_verified_regions'" + xstream.toXML(network_au_hashbox)) [FD]
Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) --> Line_250 $$ logger.info("network_au_hashbox after Transformations and Addition of 'au_n_verified_regions'" + xstream.toXML(network_au_hashbox)) [FD]
Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") --> Line_250 $$ logger.info("network_au_hashbox after Transformations and Addition of 'au_n_verified_regions'" + xstream.toXML(network_au_hashbox)) [FD]
Line_2 $$ public String drive() --> Line_251 $$ logger.info("========== Compare AUs BEGIN ==============================") [CD]
Line_2 $$ public String drive() --> Line_252 $$ ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, "schema_aus", "network_aus")) [CD]
Line_88 $$ Comparison comp_keys = new Comparison() --> Line_252 $$ ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, "schema_aus", "network_aus")) [FD]
Line_101 $$ Map<String, Map> schema_au_hashbox = sax.get_au_hashbox() --> Line_252 $$ ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, "schema_aus", "network_aus")) [FD]
Line_110 $$ schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb) --> Line_252 $$ ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, "schema_aus", "network_aus")) [FD]
Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) --> Line_252 $$ ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, "schema_aus", "network_aus")) [FD]
Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) --> Line_252 $$ ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, "schema_aus", "network_aus")) [FD]
Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") --> Line_252 $$ ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, "schema_aus", "network_aus")) [FD]
Line_2 $$ public String drive() --> Line_253 $$ Map<String, String> h_aus_in_schema_not_in_network = hr.get_names_from_id_list(schema_au_hashbox, al_aus_in_schema_not_in_network, "/SSP/archivalUnits/au/auIdentity/name") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_253 $$ Map<String, String> h_aus_in_schema_not_in_network = hr.get_names_from_id_list(schema_au_hashbox, al_aus_in_schema_not_in_network, "/SSP/archivalUnits/au/auIdentity/name") [FD]
Line_101 $$ Map<String, Map> schema_au_hashbox = sax.get_au_hashbox() --> Line_253 $$ Map<String, String> h_aus_in_schema_not_in_network = hr.get_names_from_id_list(schema_au_hashbox, al_aus_in_schema_not_in_network, "/SSP/archivalUnits/au/auIdentity/name") [FD]
Line_110 $$ schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb) --> Line_253 $$ Map<String, String> h_aus_in_schema_not_in_network = hr.get_names_from_id_list(schema_au_hashbox, al_aus_in_schema_not_in_network, "/SSP/archivalUnits/au/auIdentity/name") [FD]
Line_252 $$ ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, "schema_aus", "network_aus")) --> Line_253 $$ Map<String, String> h_aus_in_schema_not_in_network = hr.get_names_from_id_list(schema_au_hashbox, al_aus_in_schema_not_in_network, "/SSP/archivalUnits/au/auIdentity/name") [FD]
Line_2 $$ public String drive() --> Line_254 $$ rprtCnst.addKV("REPORT_N_AUS_IN_SCHEMA_NOT_IN_NETWORK", Integer.toString(al_aus_in_schema_not_in_network.size())) [CD]
Line_252 $$ ArrayList<String> al_aus_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_au_hashbox, network_au_hashbox, "schema_aus", "network_aus")) --> Line_254 $$ rprtCnst.addKV("REPORT_N_AUS_IN_SCHEMA_NOT_IN_NETWORK", Integer.toString(al_aus_in_schema_not_in_network.size())) [FD]
Line_2 $$ public String drive() --> Line_255 $$ rprtCnst.set_h_aus_in_schema_not_in_network(h_aus_in_schema_not_in_network) [CD]
Line_253 $$ Map<String, String> h_aus_in_schema_not_in_network = hr.get_names_from_id_list(schema_au_hashbox, al_aus_in_schema_not_in_network, "/SSP/archivalUnits/au/auIdentity/name") --> Line_255 $$ rprtCnst.set_h_aus_in_schema_not_in_network(h_aus_in_schema_not_in_network) [FD]
Line_2 $$ public String drive() --> Line_256 $$ MYSQLReportAusInSchemaNotInNetworkDAO daoraisnin = new MYSQLReportAusInSchemaNotInNetworkDAO() [CD]
Line_2 $$ public String drive() --> Line_257 $$ daoraisnin.create() [CD]
Line_256 $$ MYSQLReportAusInSchemaNotInNetworkDAO daoraisnin = new MYSQLReportAusInSchemaNotInNetworkDAO() --> Line_257 $$ daoraisnin.create() [FD]
Line_2 $$ public String drive() --> Line_258 $$ daoraisnin.update(h_aus_in_schema_not_in_network) [CD]
Line_256 $$ MYSQLReportAusInSchemaNotInNetworkDAO daoraisnin = new MYSQLReportAusInSchemaNotInNetworkDAO() --> Line_258 $$ daoraisnin.update(h_aus_in_schema_not_in_network) [FD]
Line_253 $$ Map<String, String> h_aus_in_schema_not_in_network = hr.get_names_from_id_list(schema_au_hashbox, al_aus_in_schema_not_in_network, "/SSP/archivalUnits/au/auIdentity/name") --> Line_258 $$ daoraisnin.update(h_aus_in_schema_not_in_network) [FD]
Line_2 $$ public String drive() --> Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) [CD]
Line_88 $$ Comparison comp_keys = new Comparison() --> Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) [FD]
Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) --> Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) [FD]
Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) --> Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) [FD]
Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") --> Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) [FD]
Line_101 $$ Map<String, Map> schema_au_hashbox = sax.get_au_hashbox() --> Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) [FD]
Line_110 $$ schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb) --> Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) [FD]
Line_2 $$ public String drive() --> Line_260 $$ Utility.print_arraylist(al_aus_in_network_not_in_schema, "aus in_network_not_in_schema") [CD]
Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) --> Line_260 $$ Utility.print_arraylist(al_aus_in_network_not_in_schema, "aus in_network_not_in_schema") [FD]
Line_2 $$ public String drive() --> Line_261 $$ Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, "au_name") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_261 $$ Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, "au_name") [FD]
Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) --> Line_261 $$ Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, "au_name") [FD]
Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) --> Line_261 $$ Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, "au_name") [FD]
Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") --> Line_261 $$ Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, "au_name") [FD]
Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) --> Line_261 $$ Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, "au_name") [FD]
Line_2 $$ public String drive() --> Line_262 $$ rprtCnst.addKV("REPORT_N_AUS_IN_NETWORK_NOT_IN_SCHEMA", Integer.toString(al_aus_in_network_not_in_schema.size())) [CD]
Line_259 $$ ArrayList<String> al_aus_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_au_hashbox, schema_au_hashbox, "network_aus", "schema_aus")) --> Line_262 $$ rprtCnst.addKV("REPORT_N_AUS_IN_NETWORK_NOT_IN_SCHEMA", Integer.toString(al_aus_in_network_not_in_schema.size())) [FD]
Line_2 $$ public String drive() --> Line_263 $$ rprtCnst.set_h_aus_in_network_not_in_schema(h_aus_in_network_not_in_schema) [CD]
Line_261 $$ Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, "au_name") --> Line_263 $$ rprtCnst.set_h_aus_in_network_not_in_schema(h_aus_in_network_not_in_schema) [FD]
Line_2 $$ public String drive() --> Line_264 $$ MYSQLReportAusInNetworkNotInSchemaDAO daorainnis = new MYSQLReportAusInNetworkNotInSchemaDAO() [CD]
Line_2 $$ public String drive() --> Line_265 $$ daorainnis.create() [CD]
Line_264 $$ MYSQLReportAusInNetworkNotInSchemaDAO daorainnis = new MYSQLReportAusInNetworkNotInSchemaDAO() --> Line_265 $$ daorainnis.create() [FD]
Line_2 $$ public String drive() --> Line_266 $$ daorainnis.update(h_aus_in_network_not_in_schema) [CD]
Line_264 $$ MYSQLReportAusInNetworkNotInSchemaDAO daorainnis = new MYSQLReportAusInNetworkNotInSchemaDAO() --> Line_266 $$ daorainnis.update(h_aus_in_network_not_in_schema) [FD]
Line_261 $$ Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, "au_name") --> Line_266 $$ daorainnis.update(h_aus_in_network_not_in_schema) [FD]
Line_2 $$ public String drive() --> Line_267 $$ Comparison comp_au = new Comparison(schema_au_hashbox, "Schema_AU", network_au_hashbox, "Network_AU", XpathUtility.getXpathToDbColumnMap(), XpathUtility.getXpathToCompOpMap()) [CD]
Line_2 $$ public String drive() --> Line_268 $$ comp_au.init() [CD]
Line_267 $$ Comparison comp_au = new Comparison(schema_au_hashbox, "Schema_AU", network_au_hashbox, "Network_AU", XpathUtility.getXpathToDbColumnMap(), XpathUtility.getXpathToCompOpMap()) --> Line_268 $$ comp_au.init() [FD]
Line_2 $$ public String drive() --> Line_269 $$ logger.info("Attempting to create DB table 'lockss_audit.audit_results_au'") [CD]
Line_2 $$ public String drive() --> Line_270 $$ MYSQLAuditResultsAuDAO daoara = new MYSQLAuditResultsAuDAO() [CD]
Line_2 $$ public String drive() --> Line_271 $$ daoara.create() [CD]
Line_270 $$ MYSQLAuditResultsAuDAO daoara = new MYSQLAuditResultsAuDAO() --> Line_271 $$ daoara.create() [FD]
Line_2 $$ public String drive() --> Line_272 $$ String results_table_au = "audit_results_au" [CD]
Line_2 $$ public String drive() --> Line_273 $$ String sql_vals_au_schema = comp_au.iterate_hbs_au(daoara, results_table_au, "au", h_aus_in_network_not_in_schema) [CD]
Line_267 $$ Comparison comp_au = new Comparison(schema_au_hashbox, "Schema_AU", network_au_hashbox, "Network_AU", XpathUtility.getXpathToDbColumnMap(), XpathUtility.getXpathToCompOpMap()) --> Line_273 $$ String sql_vals_au_schema = comp_au.iterate_hbs_au(daoara, results_table_au, "au", h_aus_in_network_not_in_schema) [FD]
Line_270 $$ MYSQLAuditResultsAuDAO daoara = new MYSQLAuditResultsAuDAO() --> Line_273 $$ String sql_vals_au_schema = comp_au.iterate_hbs_au(daoara, results_table_au, "au", h_aus_in_network_not_in_schema) [FD]
Line_272 $$ String results_table_au = "audit_results_au" --> Line_273 $$ String sql_vals_au_schema = comp_au.iterate_hbs_au(daoara, results_table_au, "au", h_aus_in_network_not_in_schema) [FD]
Line_261 $$ Map<String, String> h_aus_in_network_not_in_schema = hr.get_names_from_id_list(network_au_hashbox, al_aus_in_network_not_in_schema, "au_name") --> Line_273 $$ String sql_vals_au_schema = comp_au.iterate_hbs_au(daoara, results_table_au, "au", h_aus_in_network_not_in_schema) [FD]
Line_2 $$ public String drive() --> Line_274 $$ CachedRowSet rs_RA2 = daoara.query_q1_RA() [CD]
Line_270 $$ MYSQLAuditResultsAuDAO daoara = new MYSQLAuditResultsAuDAO() --> Line_274 $$ CachedRowSet rs_RA2 = daoara.query_q1_RA() [FD]
Line_2 $$ public String drive() --> Line_275 $$ String n_aus_not_verified = DBUtil.get_single_count_from_rs(rs_RA2) [CD]
Line_274 $$ CachedRowSet rs_RA2 = daoara.query_q1_RA() --> Line_275 $$ String n_aus_not_verified = DBUtil.get_single_count_from_rs(rs_RA2) [FD]
Line_2 $$ public String drive() --> Line_276 $$ rprtCnst.addKV("REPORT_N_AUS_NOT_VERIFIED", DBUtil.get_single_count_from_rs(rs_RA2)) [CD]
Line_274 $$ CachedRowSet rs_RA2 = daoara.query_q1_RA() --> Line_276 $$ rprtCnst.addKV("REPORT_N_AUS_NOT_VERIFIED", DBUtil.get_single_count_from_rs(rs_RA2)) [FD]
Line_2 $$ public String drive() --> Line_277 $$ logger.info("\nInstantiating Result Class from main()") [CD]
Line_2 $$ public String drive() --> Line_278 $$ DiffResult result = new DiffResult() [CD]
Line_2 $$ public String drive() --> Line_279 $$ Map au_comp_host = result.get_result_hash("au") [CD]
Line_278 $$ DiffResult result = new DiffResult() --> Line_279 $$ Map au_comp_host = result.get_result_hash("au") [FD]
Line_2 $$ public String drive() --> Line_280 $$ logger.info("========== Compare AUs END ================================") [CD]
Line_2 $$ public String drive() --> Line_281 $$ logger.info("========== Process Network Host Table =====================") [CD]
Line_2 $$ public String drive() --> Line_282 $$ logger.info("========== Query 'lockss_box_table' and =========") [CD]
Line_2 $$ public String drive() --> Line_283 $$ logger.info("================ 'repository_space_table' =======\n") [CD]
Line_2 $$ public String drive() --> Line_284 $$ MySQLLockssBoxRepositorySpaceDAO daolbrs = new MySQLLockssBoxRepositorySpaceDAO() [CD]
Line_2 $$ public String drive() --> Line_285 $$ CachedRowSet rs_q1_H = daolbrs.query_q1_H() [CD]
Line_284 $$ MySQLLockssBoxRepositorySpaceDAO daolbrs = new MySQLLockssBoxRepositorySpaceDAO() --> Line_285 $$ CachedRowSet rs_q1_H = daolbrs.query_q1_H() [FD]
Line_2 $$ public String drive() --> Line_286 $$ int[] host_table_rc = DBUtil.get_rs_dims(rs_q1_H) [CD]
Line_285 $$ CachedRowSet rs_q1_H = daolbrs.query_q1_H() --> Line_286 $$ int[] host_table_rc = DBUtil.get_rs_dims(rs_q1_H) [FD]
Line_2 $$ public String drive() --> Line_287 $$ logger.info("Host Table Query ResultSet has " + host_table_rc[0] + " rows and " + host_table_rc[1] + " columns.") [CD]
Line_2 $$ public String drive() --> Line_288 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK", Integer.toString(host_table_rc[0])) [CD]
Line_2 $$ public String drive() --> Line_289 $$ Long numberOfMemberHosts [CD]
Line_2 $$ public String drive() --> Line_290 $$ if (StringUtils.isNotBlank(saasConfigurationRegistry.getSaasConfigProperties().getProperty("saas.ip.fromlockssxml"))) [CD]
Line_290 $$ if (StringUtils.isNotBlank(saasConfigurationRegistry.getSaasConfigProperties().getProperty("saas.ip.fromlockssxml"))) --> Line_291 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasConfigProperties().getProperty("saas.ip.fromlockssxml").split(",").length)) [CD]
Line_289 $$ Long numberOfMemberHosts --> Line_291 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasConfigProperties().getProperty("saas.ip.fromlockssxml").split(",").length)) [FD]
Line_290 $$ if (StringUtils.isNotBlank(saasConfigurationRegistry.getSaasConfigProperties().getProperty("saas.ip.fromlockssxml"))) --> Line_293 $$ if (StringUtils.isNotBlank(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty("saas.targetIp"))) [CD]
Line_293 $$ if (StringUtils.isNotBlank(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty("saas.targetIp"))) --> Line_294 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty("saas.targetIp").split(",").length)) [CD]
Line_289 $$ Long numberOfMemberHosts --> Line_294 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty("saas.targetIp").split(",").length)) [FD]
Line_291 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasConfigProperties().getProperty("saas.ip.fromlockssxml").split(",").length)) --> Line_294 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty("saas.targetIp").split(",").length)) [FD]
Line_293 $$ if (StringUtils.isNotBlank(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty("saas.targetIp"))) --> Line_296 $$ numberOfMemberHosts = 0L [CD]
Line_289 $$ Long numberOfMemberHosts --> Line_296 $$ numberOfMemberHosts = 0L [FD]
Line_291 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasConfigProperties().getProperty("saas.ip.fromlockssxml").split(",").length)) --> Line_296 $$ numberOfMemberHosts = 0L [FD]
Line_294 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty("saas.targetIp").split(",").length)) --> Line_296 $$ numberOfMemberHosts = 0L [FD]
Line_2 $$ public String drive() --> Line_299 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_2", Long.toString(numberOfMemberHosts)) [CD]
Line_289 $$ Long numberOfMemberHosts --> Line_299 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_2", Long.toString(numberOfMemberHosts)) [FD]
Line_291 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasConfigProperties().getProperty("saas.ip.fromlockssxml").split(",").length)) --> Line_299 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_2", Long.toString(numberOfMemberHosts)) [FD]
Line_294 $$ numberOfMemberHosts = Long.parseLong(Integer.toString(saasConfigurationRegistry.getSaasAuditConfigProperties().getProperty("saas.targetIp").split(",").length)) --> Line_299 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_2", Long.toString(numberOfMemberHosts)) [FD]
Line_296 $$ numberOfMemberHosts = 0L --> Line_299 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_2", Long.toString(numberOfMemberHosts)) [FD]
Line_2 $$ public String drive() --> Line_300 $$ Long numberOfReachableHosts [CD]
Line_2 $$ public String drive() --> Line_301 $$ numberOfReachableHosts = lockssBoxFacade.getTotalHosts() [CD]
Line_300 $$ Long numberOfReachableHosts --> Line_301 $$ numberOfReachableHosts = lockssBoxFacade.getTotalHosts() [FD]
Line_2 $$ public String drive() --> Line_302 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_REACHABLE", Long.toString(numberOfReachableHosts)) [CD]
Line_300 $$ Long numberOfReachableHosts --> Line_302 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_REACHABLE", Long.toString(numberOfReachableHosts)) [FD]
Line_301 $$ numberOfReachableHosts = lockssBoxFacade.getTotalHosts() --> Line_302 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_REACHABLE", Long.toString(numberOfReachableHosts)) [FD]
Line_2 $$ public String drive() --> Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) [CD]
Line_285 $$ CachedRowSet rs_q1_H = daolbrs.query_q1_H() --> Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) [FD]
Line_2 $$ public String drive() --> Line_304 $$ logger.info("network_host_hashbox before transformations\n" + xstream.toXML(network_host_hashbox)) [CD]
Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) --> Line_304 $$ logger.info("network_host_hashbox before transformations\n" + xstream.toXML(network_host_hashbox)) [FD]
Line_2 $$ public String drive() --> Line_305 $$ Map<String, String> transforms_n_host_hb = new HashMap<String, String>() [CD]
Line_2 $$ public String drive() --> Line_306 $$ transforms_n_host_hb.put("repo_size", "SciToStr2()") [CD]
Line_305 $$ Map<String, String> transforms_n_host_hb = new HashMap<String, String>() --> Line_306 $$ transforms_n_host_hb.put("repo_size", "SciToStr2()") [FD]
Line_2 $$ public String drive() --> Line_307 $$ transforms_n_host_hb.put("used_space", "SciToStr2()") [CD]
Line_305 $$ Map<String, String> transforms_n_host_hb = new HashMap<String, String>() --> Line_307 $$ transforms_n_host_hb.put("used_space", "SciToStr2()") [FD]
Line_2 $$ public String drive() --> Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) [CD]
Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) --> Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) [FD]
Line_305 $$ Map<String, String> transforms_n_host_hb = new HashMap<String, String>() --> Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) [FD]
Line_2 $$ public String drive() --> Line_309 $$ logger.info("network_host_hashbox(after transformations)\n" + xstream.toXML(network_host_hashbox)) [CD]
Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) --> Line_309 $$ logger.info("network_host_hashbox(after transformations)\n" + xstream.toXML(network_host_hashbox)) [FD]
Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) --> Line_309 $$ logger.info("network_host_hashbox(after transformations)\n" + xstream.toXML(network_host_hashbox)) [FD]
Line_2 $$ public String drive() --> Line_310 $$ Map<String, String> network_host_hb_sel_used_space = hr.join_hash_pk_to_inner_hash_value(network_host_hashbox, "used_space") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_310 $$ Map<String, String> network_host_hb_sel_used_space = hr.join_hash_pk_to_inner_hash_value(network_host_hashbox, "used_space") [FD]
Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) --> Line_310 $$ Map<String, String> network_host_hb_sel_used_space = hr.join_hash_pk_to_inner_hash_value(network_host_hashbox, "used_space") [FD]
Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) --> Line_310 $$ Map<String, String> network_host_hb_sel_used_space = hr.join_hash_pk_to_inner_hash_value(network_host_hashbox, "used_space") [FD]
Line_2 $$ public String drive() --> Line_311 $$ Map<String, String> schema_host_hb_sel_size = hr.join_hash_pk_to_inner_hash_value(schema_host_hashbox, "/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_311 $$ Map<String, String> schema_host_hb_sel_size = hr.join_hash_pk_to_inner_hash_value(schema_host_hashbox, "/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size") [FD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_311 $$ Map<String, String> schema_host_hb_sel_size = hr.join_hash_pk_to_inner_hash_value(schema_host_hashbox, "/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size") [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_311 $$ Map<String, String> schema_host_hb_sel_size = hr.join_hash_pk_to_inner_hash_value(schema_host_hashbox, "/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size") [FD]
Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) --> Line_311 $$ Map<String, String> schema_host_hb_sel_size = hr.join_hash_pk_to_inner_hash_value(schema_host_hashbox, "/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size") [FD]
Line_2 $$ public String drive() --> Line_312 $$ logger.info("\n========== Process Network  END ===========================") [CD]
Line_2 $$ public String drive() --> Line_313 $$ logger.info("========== Compare Key Sets (IDs)==========================") [CD]
Line_2 $$ public String drive() --> Line_314 $$ Set<String> sa_hb_keys = hr.gen_hash_keyset(schema_au_hashbox, "schema_au_hashbox") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_314 $$ Set<String> sa_hb_keys = hr.gen_hash_keyset(schema_au_hashbox, "schema_au_hashbox") [FD]
Line_101 $$ Map<String, Map> schema_au_hashbox = sax.get_au_hashbox() --> Line_314 $$ Set<String> sa_hb_keys = hr.gen_hash_keyset(schema_au_hashbox, "schema_au_hashbox") [FD]
Line_110 $$ schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb) --> Line_314 $$ Set<String> sa_hb_keys = hr.gen_hash_keyset(schema_au_hashbox, "schema_au_hashbox") [FD]
Line_2 $$ public String drive() --> Line_315 $$ hr.set_hash_keyset(sa_hb_keys, "s_au_hb") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_315 $$ hr.set_hash_keyset(sa_hb_keys, "s_au_hb") [FD]
Line_314 $$ Set<String> sa_hb_keys = hr.gen_hash_keyset(schema_au_hashbox, "schema_au_hashbox") --> Line_315 $$ hr.set_hash_keyset(sa_hb_keys, "s_au_hb") [FD]
Line_2 $$ public String drive() --> Line_316 $$ Set<String> sh_hb_keys = hr.gen_hash_keyset(schema_host_hashbox, "schema_host_hashbox") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_316 $$ Set<String> sh_hb_keys = hr.gen_hash_keyset(schema_host_hashbox, "schema_host_hashbox") [FD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_316 $$ Set<String> sh_hb_keys = hr.gen_hash_keyset(schema_host_hashbox, "schema_host_hashbox") [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_316 $$ Set<String> sh_hb_keys = hr.gen_hash_keyset(schema_host_hashbox, "schema_host_hashbox") [FD]
Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) --> Line_316 $$ Set<String> sh_hb_keys = hr.gen_hash_keyset(schema_host_hashbox, "schema_host_hashbox") [FD]
Line_2 $$ public String drive() --> Line_317 $$ hr.set_hash_keyset(sh_hb_keys, "s_h_hb") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_317 $$ hr.set_hash_keyset(sh_hb_keys, "s_h_hb") [FD]
Line_316 $$ Set<String> sh_hb_keys = hr.gen_hash_keyset(schema_host_hashbox, "schema_host_hashbox") --> Line_317 $$ hr.set_hash_keyset(sh_hb_keys, "s_h_hb") [FD]
Line_2 $$ public String drive() --> Line_318 $$ Set<String> na_hb_keys = hr.gen_hash_keyset(network_au_hashbox, "network_au_hashbox") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_318 $$ Set<String> na_hb_keys = hr.gen_hash_keyset(network_au_hashbox, "network_au_hashbox") [FD]
Line_240 $$ Map<String, Map> network_au_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_A, null, "au_id")) --> Line_318 $$ Set<String> na_hb_keys = hr.gen_hash_keyset(network_au_hashbox, "network_au_hashbox") [FD]
Line_246 $$ network_au_hashbox = hr.convert_hashbox_vals(network_au_hashbox, transforms_n_au_hb) --> Line_318 $$ Set<String> na_hb_keys = hr.gen_hash_keyset(network_au_hashbox, "network_au_hashbox") [FD]
Line_249 $$ network_au_hashbox = hr.addNewInnerHashEntriesToHashbox(network_au_hashbox, auNVerifiedRegions, "au_n_verified_regions") --> Line_318 $$ Set<String> na_hb_keys = hr.gen_hash_keyset(network_au_hashbox, "network_au_hashbox") [FD]
Line_2 $$ public String drive() --> Line_319 $$ hr.set_hash_keyset(na_hb_keys, "n_au_hb") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_319 $$ hr.set_hash_keyset(na_hb_keys, "n_au_hb") [FD]
Line_318 $$ Set<String> na_hb_keys = hr.gen_hash_keyset(network_au_hashbox, "network_au_hashbox") --> Line_319 $$ hr.set_hash_keyset(na_hb_keys, "n_au_hb") [FD]
Line_2 $$ public String drive() --> Line_320 $$ Set<String> nh_hb_keys = hr.gen_hash_keyset(network_host_hashbox, "network_host_hashbox") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_320 $$ Set<String> nh_hb_keys = hr.gen_hash_keyset(network_host_hashbox, "network_host_hashbox") [FD]
Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) --> Line_320 $$ Set<String> nh_hb_keys = hr.gen_hash_keyset(network_host_hashbox, "network_host_hashbox") [FD]
Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) --> Line_320 $$ Set<String> nh_hb_keys = hr.gen_hash_keyset(network_host_hashbox, "network_host_hashbox") [FD]
Line_2 $$ public String drive() --> Line_321 $$ hr.set_hash_keyset(nh_hb_keys, "n_h_hb") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_321 $$ hr.set_hash_keyset(nh_hb_keys, "n_h_hb") [FD]
Line_320 $$ Set<String> nh_hb_keys = hr.gen_hash_keyset(network_host_hashbox, "network_host_hashbox") --> Line_321 $$ hr.set_hash_keyset(nh_hb_keys, "n_h_hb") [FD]
Line_2 $$ public String drive() --> Line_322 $$ Set<String> aus_in_schema_not_in_network = new TreeSet<String>(hr.get_hash_keyset("s_au_hb")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_322 $$ Set<String> aus_in_schema_not_in_network = new TreeSet<String>(hr.get_hash_keyset("s_au_hb")) [FD]
Line_2 $$ public String drive() --> Line_323 $$ aus_in_schema_not_in_network.removeAll(hr.get_hash_keyset("n_au_hb")) [CD]
Line_322 $$ Set<String> aus_in_schema_not_in_network = new TreeSet<String>(hr.get_hash_keyset("s_au_hb")) --> Line_323 $$ aus_in_schema_not_in_network.removeAll(hr.get_hash_keyset("n_au_hb")) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_323 $$ aus_in_schema_not_in_network.removeAll(hr.get_hash_keyset("n_au_hb")) [FD]
Line_2 $$ public String drive() --> Line_324 $$ Set<String> aus_in_network_not_in_schema = new TreeSet<String>(hr.get_hash_keyset("n_au_hb")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_324 $$ Set<String> aus_in_network_not_in_schema = new TreeSet<String>(hr.get_hash_keyset("n_au_hb")) [FD]
Line_2 $$ public String drive() --> Line_325 $$ aus_in_network_not_in_schema.removeAll(hr.get_hash_keyset("s_au_hb")) [CD]
Line_324 $$ Set<String> aus_in_network_not_in_schema = new TreeSet<String>(hr.get_hash_keyset("n_au_hb")) --> Line_325 $$ aus_in_network_not_in_schema.removeAll(hr.get_hash_keyset("s_au_hb")) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_325 $$ aus_in_network_not_in_schema.removeAll(hr.get_hash_keyset("s_au_hb")) [FD]
Line_2 $$ public String drive() --> Line_326 $$ Set<String> symmetricDiff = new HashSet<String>(hr.get_hash_keyset("s_au_hb")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_326 $$ Set<String> symmetricDiff = new HashSet<String>(hr.get_hash_keyset("s_au_hb")) [FD]
Line_2 $$ public String drive() --> Line_327 $$ symmetricDiff.addAll(hr.get_hash_keyset("n_au_hb")) [CD]
Line_326 $$ Set<String> symmetricDiff = new HashSet<String>(hr.get_hash_keyset("s_au_hb")) --> Line_327 $$ symmetricDiff.addAll(hr.get_hash_keyset("n_au_hb")) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_327 $$ symmetricDiff.addAll(hr.get_hash_keyset("n_au_hb")) [FD]
Line_2 $$ public String drive() --> Line_328 $$ Set<String> tmp = new HashSet<String>(hr.get_hash_keyset("s_au_hb")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_328 $$ Set<String> tmp = new HashSet<String>(hr.get_hash_keyset("s_au_hb")) [FD]
Line_2 $$ public String drive() --> Line_329 $$ tmp.retainAll(hr.get_hash_keyset("n_au_hb")) [CD]
Line_328 $$ Set<String> tmp = new HashSet<String>(hr.get_hash_keyset("s_au_hb")) --> Line_329 $$ tmp.retainAll(hr.get_hash_keyset("n_au_hb")) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_329 $$ tmp.retainAll(hr.get_hash_keyset("n_au_hb")) [FD]
Line_2 $$ public String drive() --> Line_330 $$ symmetricDiff.removeAll(tmp) [CD]
Line_326 $$ Set<String> symmetricDiff = new HashSet<String>(hr.get_hash_keyset("s_au_hb")) --> Line_330 $$ symmetricDiff.removeAll(tmp) [FD]
Line_328 $$ Set<String> tmp = new HashSet<String>(hr.get_hash_keyset("s_au_hb")) --> Line_330 $$ symmetricDiff.removeAll(tmp) [FD]
Line_2 $$ public String drive() --> Line_331 $$ Set<String> hosts_in_network_not_in_schema = new TreeSet<String>(hr.get_hash_keyset("n_h_hb")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_331 $$ Set<String> hosts_in_network_not_in_schema = new TreeSet<String>(hr.get_hash_keyset("n_h_hb")) [FD]
Line_2 $$ public String drive() --> Line_332 $$ hosts_in_network_not_in_schema.removeAll(hr.get_hash_keyset("s_h_hb")) [CD]
Line_331 $$ Set<String> hosts_in_network_not_in_schema = new TreeSet<String>(hr.get_hash_keyset("n_h_hb")) --> Line_332 $$ hosts_in_network_not_in_schema.removeAll(hr.get_hash_keyset("s_h_hb")) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_332 $$ hosts_in_network_not_in_schema.removeAll(hr.get_hash_keyset("s_h_hb")) [FD]
Line_2 $$ public String drive() --> Line_333 $$ Set<String> hosts_in_schema_not_in_network = new TreeSet<String>(hr.get_hash_keyset("s_h_hb")) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_333 $$ Set<String> hosts_in_schema_not_in_network = new TreeSet<String>(hr.get_hash_keyset("s_h_hb")) [FD]
Line_2 $$ public String drive() --> Line_334 $$ hosts_in_schema_not_in_network.removeAll(hr.get_hash_keyset("n_h_hb")) [CD]
Line_333 $$ Set<String> hosts_in_schema_not_in_network = new TreeSet<String>(hr.get_hash_keyset("s_h_hb")) --> Line_334 $$ hosts_in_schema_not_in_network.removeAll(hr.get_hash_keyset("n_h_hb")) [FD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_334 $$ hosts_in_schema_not_in_network.removeAll(hr.get_hash_keyset("n_h_hb")) [FD]
Line_2 $$ public String drive() --> Line_335 $$ ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, "schema_hosts", "network_hosts")) [CD]
Line_88 $$ Comparison comp_keys = new Comparison() --> Line_335 $$ ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, "schema_hosts", "network_hosts")) [FD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_335 $$ ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, "schema_hosts", "network_hosts")) [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_335 $$ ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, "schema_hosts", "network_hosts")) [FD]
Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) --> Line_335 $$ ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, "schema_hosts", "network_hosts")) [FD]
Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) --> Line_335 $$ ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, "schema_hosts", "network_hosts")) [FD]
Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) --> Line_335 $$ ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, "schema_hosts", "network_hosts")) [FD]
Line_2 $$ public String drive() --> Line_336 $$ Map<String, String> h_hosts_in_schema_not_in_network = hr.get_names_from_id_list(schema_host_hashbox, al_hosts_in_schema_not_in_network, "/SSP/hosts/host/hostIdentity/name") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_336 $$ Map<String, String> h_hosts_in_schema_not_in_network = hr.get_names_from_id_list(schema_host_hashbox, al_hosts_in_schema_not_in_network, "/SSP/hosts/host/hostIdentity/name") [FD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_336 $$ Map<String, String> h_hosts_in_schema_not_in_network = hr.get_names_from_id_list(schema_host_hashbox, al_hosts_in_schema_not_in_network, "/SSP/hosts/host/hostIdentity/name") [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_336 $$ Map<String, String> h_hosts_in_schema_not_in_network = hr.get_names_from_id_list(schema_host_hashbox, al_hosts_in_schema_not_in_network, "/SSP/hosts/host/hostIdentity/name") [FD]
Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) --> Line_336 $$ Map<String, String> h_hosts_in_schema_not_in_network = hr.get_names_from_id_list(schema_host_hashbox, al_hosts_in_schema_not_in_network, "/SSP/hosts/host/hostIdentity/name") [FD]
Line_335 $$ ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, "schema_hosts", "network_hosts")) --> Line_336 $$ Map<String, String> h_hosts_in_schema_not_in_network = hr.get_names_from_id_list(schema_host_hashbox, al_hosts_in_schema_not_in_network, "/SSP/hosts/host/hostIdentity/name") [FD]
Line_2 $$ public String drive() --> Line_337 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_SCHEMA_NOT_IN_NETWORK", Integer.toString(al_hosts_in_schema_not_in_network.size())) [CD]
Line_335 $$ ArrayList<String> al_hosts_in_schema_not_in_network = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(schema_host_hashbox, network_host_hashbox, "schema_hosts", "network_hosts")) --> Line_337 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_SCHEMA_NOT_IN_NETWORK", Integer.toString(al_hosts_in_schema_not_in_network.size())) [FD]
Line_2 $$ public String drive() --> Line_338 $$ rprtCnst.set_h_hosts_in_schema_not_in_network(h_hosts_in_schema_not_in_network) [CD]
Line_336 $$ Map<String, String> h_hosts_in_schema_not_in_network = hr.get_names_from_id_list(schema_host_hashbox, al_hosts_in_schema_not_in_network, "/SSP/hosts/host/hostIdentity/name") --> Line_338 $$ rprtCnst.set_h_hosts_in_schema_not_in_network(h_hosts_in_schema_not_in_network) [FD]
Line_2 $$ public String drive() --> Line_339 $$ MYSQLReportHostsInSchemaNotInNetworkDAO daorhisnin = new MYSQLReportHostsInSchemaNotInNetworkDAO() [CD]
Line_2 $$ public String drive() --> Line_340 $$ daorhisnin.create() [CD]
Line_339 $$ MYSQLReportHostsInSchemaNotInNetworkDAO daorhisnin = new MYSQLReportHostsInSchemaNotInNetworkDAO() --> Line_340 $$ daorhisnin.create() [FD]
Line_2 $$ public String drive() --> Line_341 $$ daorhisnin.update(h_hosts_in_schema_not_in_network) [CD]
Line_339 $$ MYSQLReportHostsInSchemaNotInNetworkDAO daorhisnin = new MYSQLReportHostsInSchemaNotInNetworkDAO() --> Line_341 $$ daorhisnin.update(h_hosts_in_schema_not_in_network) [FD]
Line_336 $$ Map<String, String> h_hosts_in_schema_not_in_network = hr.get_names_from_id_list(schema_host_hashbox, al_hosts_in_schema_not_in_network, "/SSP/hosts/host/hostIdentity/name") --> Line_341 $$ daorhisnin.update(h_hosts_in_schema_not_in_network) [FD]
Line_2 $$ public String drive() --> Line_342 $$ ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, "network_hosts", "schema_hosts")) [CD]
Line_88 $$ Comparison comp_keys = new Comparison() --> Line_342 $$ ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, "network_hosts", "schema_hosts")) [FD]
Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) --> Line_342 $$ ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, "network_hosts", "schema_hosts")) [FD]
Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) --> Line_342 $$ ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, "network_hosts", "schema_hosts")) [FD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_342 $$ ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, "network_hosts", "schema_hosts")) [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_342 $$ ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, "network_hosts", "schema_hosts")) [FD]
Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) --> Line_342 $$ ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, "network_hosts", "schema_hosts")) [FD]
Line_2 $$ public String drive() --> Line_343 $$ Map<String, String> h_hosts_in_network_not_in_schema = hr.get_names_from_id_list(network_host_hashbox, al_hosts_in_network_not_in_schema, "host_name") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_343 $$ Map<String, String> h_hosts_in_network_not_in_schema = hr.get_names_from_id_list(network_host_hashbox, al_hosts_in_network_not_in_schema, "host_name") [FD]
Line_303 $$ Map<String, Map> network_host_hashbox = new TreeMap<String, Map>(DBUtil.rs_to_hashbox(rs_q1_H, null, "ip_address")) --> Line_343 $$ Map<String, String> h_hosts_in_network_not_in_schema = hr.get_names_from_id_list(network_host_hashbox, al_hosts_in_network_not_in_schema, "host_name") [FD]
Line_308 $$ network_host_hashbox = hr.convert_hashbox_vals(network_host_hashbox, transforms_n_host_hb) --> Line_343 $$ Map<String, String> h_hosts_in_network_not_in_schema = hr.get_names_from_id_list(network_host_hashbox, al_hosts_in_network_not_in_schema, "host_name") [FD]
Line_342 $$ ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, "network_hosts", "schema_hosts")) --> Line_343 $$ Map<String, String> h_hosts_in_network_not_in_schema = hr.get_names_from_id_list(network_host_hashbox, al_hosts_in_network_not_in_schema, "host_name") [FD]
Line_2 $$ public String drive() --> Line_344 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_NOT_IN_SCHEMA", Integer.toString(al_hosts_in_network_not_in_schema.size())) [CD]
Line_342 $$ ArrayList<String> al_hosts_in_network_not_in_schema = new ArrayList<String>(comp_keys.keys_not_in_both_hashes(network_host_hashbox, schema_host_hashbox, "network_hosts", "schema_hosts")) --> Line_344 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_NETWORK_NOT_IN_SCHEMA", Integer.toString(al_hosts_in_network_not_in_schema.size())) [FD]
Line_2 $$ public String drive() --> Line_345 $$ rprtCnst.set_h_hosts_in_network_not_in_schema(h_hosts_in_network_not_in_schema) [CD]
Line_343 $$ Map<String, String> h_hosts_in_network_not_in_schema = hr.get_names_from_id_list(network_host_hashbox, al_hosts_in_network_not_in_schema, "host_name") --> Line_345 $$ rprtCnst.set_h_hosts_in_network_not_in_schema(h_hosts_in_network_not_in_schema) [FD]
Line_2 $$ public String drive() --> Line_346 $$ MYSQLReportHostsInNetworkNotInSchemaDAO rhinnis = new MYSQLReportHostsInNetworkNotInSchemaDAO() [CD]
Line_2 $$ public String drive() --> Line_347 $$ rhinnis.create() [CD]
Line_346 $$ MYSQLReportHostsInNetworkNotInSchemaDAO rhinnis = new MYSQLReportHostsInNetworkNotInSchemaDAO() --> Line_347 $$ rhinnis.create() [FD]
Line_2 $$ public String drive() --> Line_348 $$ rhinnis.update(h_hosts_in_network_not_in_schema) [CD]
Line_346 $$ MYSQLReportHostsInNetworkNotInSchemaDAO rhinnis = new MYSQLReportHostsInNetworkNotInSchemaDAO() --> Line_348 $$ rhinnis.update(h_hosts_in_network_not_in_schema) [FD]
Line_343 $$ Map<String, String> h_hosts_in_network_not_in_schema = hr.get_names_from_id_list(network_host_hashbox, al_hosts_in_network_not_in_schema, "host_name") --> Line_348 $$ rhinnis.update(h_hosts_in_network_not_in_schema) [FD]
Line_2 $$ public String drive() --> Line_349 $$ logger.info("========== Compare Hosts BEGIN ============================") [CD]
Line_2 $$ public String drive() --> Line_350 $$ Comparison comp_host = new Comparison(schema_host_hashbox, "Schema_Host", network_host_hashbox, "Network_Host", XpathUtility.getXpathToDbColumnMap(), XpathUtility.getXpathToCompOpMap()) [CD]
Line_2 $$ public String drive() --> Line_351 $$ comp_host.init() [CD]
Line_350 $$ Comparison comp_host = new Comparison(schema_host_hashbox, "Schema_Host", network_host_hashbox, "Network_Host", XpathUtility.getXpathToDbColumnMap(), XpathUtility.getXpathToCompOpMap()) --> Line_351 $$ comp_host.init() [FD]
Line_2 $$ public String drive() --> Line_352 $$ MYSQLAuditResultsHostDAO daoarh = new MYSQLAuditResultsHostDAO() [CD]
Line_2 $$ public String drive() --> Line_353 $$ daoarh.create() [CD]
Line_352 $$ MYSQLAuditResultsHostDAO daoarh = new MYSQLAuditResultsHostDAO() --> Line_353 $$ daoarh.create() [FD]
Line_2 $$ public String drive() --> Line_354 $$ String sql_vals_host_schema = comp_host.iterate_hbs_host(daoarh, "audit_results_host", "host", h_hosts_in_network_not_in_schema) [CD]
Line_350 $$ Comparison comp_host = new Comparison(schema_host_hashbox, "Schema_Host", network_host_hashbox, "Network_Host", XpathUtility.getXpathToDbColumnMap(), XpathUtility.getXpathToCompOpMap()) --> Line_354 $$ String sql_vals_host_schema = comp_host.iterate_hbs_host(daoarh, "audit_results_host", "host", h_hosts_in_network_not_in_schema) [FD]
Line_352 $$ MYSQLAuditResultsHostDAO daoarh = new MYSQLAuditResultsHostDAO() --> Line_354 $$ String sql_vals_host_schema = comp_host.iterate_hbs_host(daoarh, "audit_results_host", "host", h_hosts_in_network_not_in_schema) [FD]
Line_343 $$ Map<String, String> h_hosts_in_network_not_in_schema = hr.get_names_from_id_list(network_host_hashbox, al_hosts_in_network_not_in_schema, "host_name") --> Line_354 $$ String sql_vals_host_schema = comp_host.iterate_hbs_host(daoarh, "audit_results_host", "host", h_hosts_in_network_not_in_schema) [FD]
Line_2 $$ public String drive() --> Line_355 $$ CachedRowSet rs_RH = daoarh.query_q1_RH() [CD]
Line_352 $$ MYSQLAuditResultsHostDAO daoarh = new MYSQLAuditResultsHostDAO() --> Line_355 $$ CachedRowSet rs_RH = daoarh.query_q1_RH() [FD]
Line_2 $$ public String drive() --> Line_356 $$ String n_hosts_not_meeting_storage = DBUtil.get_single_count_from_rs(rs_RH) [CD]
Line_355 $$ CachedRowSet rs_RH = daoarh.query_q1_RH() --> Line_356 $$ String n_hosts_not_meeting_storage = DBUtil.get_single_count_from_rs(rs_RH) [FD]
Line_2 $$ public String drive() --> Line_357 $$ rprtCnst.addKV("REPORT_N_HOSTS_NOT_MEETING_STORAGE", n_hosts_not_meeting_storage) [CD]
Line_356 $$ String n_hosts_not_meeting_storage = DBUtil.get_single_count_from_rs(rs_RH) --> Line_357 $$ rprtCnst.addKV("REPORT_N_HOSTS_NOT_MEETING_STORAGE", n_hosts_not_meeting_storage) [FD]
Line_2 $$ public String drive() --> Line_358 $$ logger.info("Calling result.get_result_hash( \"host\" ) from main()") [CD]
Line_2 $$ public String drive() --> Line_359 $$ Map host_comp_hash = result.get_result_hash("host") [CD]
Line_278 $$ DiffResult result = new DiffResult() --> Line_359 $$ Map host_comp_hash = result.get_result_hash("host") [FD]
Line_2 $$ public String drive() --> Line_360 $$ Map au_comp_hash2 = result.get_result_hash("au") [CD]
Line_278 $$ DiffResult result = new DiffResult() --> Line_360 $$ Map au_comp_hash2 = result.get_result_hash("au") [FD]
Line_2 $$ public String drive() --> Line_361 $$ logger.info("========== Compare Hosts END ==============================") [CD]
Line_2 $$ public String drive() --> Line_362 $$ Map<String, String> map_host_ip_to_host_name = hr.make_id_hash(schema_host_hashbox, "/SSP/hosts/host/hostIdentity/name") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_362 $$ Map<String, String> map_host_ip_to_host_name = hr.make_id_hash(schema_host_hashbox, "/SSP/hosts/host/hostIdentity/name") [FD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_362 $$ Map<String, String> map_host_ip_to_host_name = hr.make_id_hash(schema_host_hashbox, "/SSP/hosts/host/hostIdentity/name") [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_362 $$ Map<String, String> map_host_ip_to_host_name = hr.make_id_hash(schema_host_hashbox, "/SSP/hosts/host/hostIdentity/name") [FD]
Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) --> Line_362 $$ Map<String, String> map_host_ip_to_host_name = hr.make_id_hash(schema_host_hashbox, "/SSP/hosts/host/hostIdentity/name") [FD]
Line_2 $$ public String drive() --> Line_363 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_SCHEMA", Integer.toString(map_host_ip_to_host_name.size())) [CD]
Line_362 $$ Map<String, String> map_host_ip_to_host_name = hr.make_id_hash(schema_host_hashbox, "/SSP/hosts/host/hostIdentity/name") --> Line_363 $$ rprtCnst.addKV("REPORT_N_HOSTS_IN_SCHEMA", Integer.toString(map_host_ip_to_host_name.size())) [FD]
Line_2 $$ public String drive() --> Line_364 $$ String[] host_ip_list = hr.hash_keys_to_array(schema_host_hashbox) [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_364 $$ String[] host_ip_list = hr.hash_keys_to_array(schema_host_hashbox) [FD]
Line_100 $$ Map<String, Map> schema_host_hashbox = sax.get_host_hashbox() --> Line_364 $$ String[] host_ip_list = hr.hash_keys_to_array(schema_host_hashbox) [FD]
Line_106 $$ schema_host_hashbox = hr.copy_hashbox_entries(schema_network_hashbox, schema_host_hashbox, s_host_hb_additions) --> Line_364 $$ String[] host_ip_list = hr.hash_keys_to_array(schema_host_hashbox) [FD]
Line_113 $$ schema_host_hashbox = hr.convert_hashbox_vals(schema_host_hashbox, transforms_s_host_hb) --> Line_364 $$ String[] host_ip_list = hr.hash_keys_to_array(schema_host_hashbox) [FD]
Line_2 $$ public String drive() --> Line_365 $$ String[][] col2 = Utility.add_column_to_array1(map_host_ip_to_host_name.values().toArray(new String[0]), host_ip_list, null) [CD]
Line_364 $$ String[] host_ip_list = hr.hash_keys_to_array(schema_host_hashbox) --> Line_365 $$ String[][] col2 = Utility.add_column_to_array1(map_host_ip_to_host_name.values().toArray(new String[0]), host_ip_list, null) [FD]
Line_362 $$ Map<String, String> map_host_ip_to_host_name = hr.make_id_hash(schema_host_hashbox, "/SSP/hosts/host/hostIdentity/name") --> Line_365 $$ String[][] col2 = Utility.add_column_to_array1(map_host_ip_to_host_name.values().toArray(new String[0]), host_ip_list, null) [FD]
Line_2 $$ public String drive() --> Line_366 $$ Map<String, String> map_au_key_string_to_au_name = hr.make_id_hash(schema_au_hashbox, "/SSP/archivalUnits/au/auIdentity/name") [CD]
Line_103 $$ Hasherator hr = new Hasherator() --> Line_366 $$ Map<String, String> map_au_key_string_to_au_name = hr.make_id_hash(schema_au_hashbox, "/SSP/archivalUnits/au/auIdentity/name") [FD]
Line_101 $$ Map<String, Map> schema_au_hashbox = sax.get_au_hashbox() --> Line_366 $$ Map<String, String> map_au_key_string_to_au_name = hr.make_id_hash(schema_au_hashbox, "/SSP/archivalUnits/au/auIdentity/name") [FD]
Line_110 $$ schema_au_hashbox = hr.convert_hashbox_vals(schema_au_hashbox, transforms_s_au_hb) --> Line_366 $$ Map<String, String> map_au_key_string_to_au_name = hr.make_id_hash(schema_au_hashbox, "/SSP/archivalUnits/au/auIdentity/name") [FD]
Line_2 $$ public String drive() --> Line_367 $$ logger.info("Length map_au_key_string_to_au_name.values().toArray(new String[0]: " + map_au_key_string_to_au_name.values().toArray(new String[0]).length) [CD]
Line_366 $$ Map<String, String> map_au_key_string_to_au_name = hr.make_id_hash(schema_au_hashbox, "/SSP/archivalUnits/au/auIdentity/name") --> Line_367 $$ logger.info("Length map_au_key_string_to_au_name.values().toArray(new String[0]: " + map_au_key_string_to_au_name.values().toArray(new String[0]).length) [FD]
Line_2 $$ public String drive() --> Line_368 $$ rprtCnst.addKV("REPORT_N_AUS_IN_SCHEMA", Integer.toString(map_au_key_string_to_au_name.size())) [CD]
Line_366 $$ Map<String, String> map_au_key_string_to_au_name = hr.make_id_hash(schema_au_hashbox, "/SSP/archivalUnits/au/auIdentity/name") --> Line_368 $$ rprtCnst.addKV("REPORT_N_AUS_IN_SCHEMA", Integer.toString(map_au_key_string_to_au_name.size())) [FD]
Line_2 $$ public String drive() --> Line_369 $$ MySQLLockssBoxArchivalUnitStatusDAO daolbaus = new MySQLLockssBoxArchivalUnitStatusDAO() [CD]
Line_2 $$ public String drive() --> Line_370 $$ int[] rc = daolbaus.getResultSetDimensions() [CD]
Line_369 $$ MySQLLockssBoxArchivalUnitStatusDAO daolbaus = new MySQLLockssBoxArchivalUnitStatusDAO() --> Line_370 $$ int[] rc = daolbaus.getResultSetDimensions() [FD]
Line_2 $$ public String drive() --> Line_371 $$ int n_rs_rows = rc[0] [CD]
Line_2 $$ public String drive() --> Line_372 $$ int n_rs_cols = rc[1] [CD]
Line_2 $$ public String drive() --> Line_373 $$ logger.info("\n" + n_rs_rows + " rows (Host-AU's). " + n_rs_cols + " columns.") [CD]
Line_2 $$ public String drive() --> Line_374 $$ rprtCnst.addKV("REPORT_N_HOST_AUS_IN_NETWORK", Integer.toString(n_rs_rows)) [CD]
Line_371 $$ int n_rs_rows = rc[0] --> Line_374 $$ rprtCnst.addKV("REPORT_N_HOST_AUS_IN_NETWORK", Integer.toString(n_rs_rows)) [FD]
Line_2 $$ public String drive() --> Line_375 $$ logger.info("================== Query 'audit_results_host' Table ==========") [CD]
Line_2 $$ public String drive() --> Line_376 $$ CachedRowSet NNonCompliantAUsCRS = daoara.getNNonCompliantAUs() [CD]
Line_270 $$ MYSQLAuditResultsAuDAO daoara = new MYSQLAuditResultsAuDAO() --> Line_376 $$ CachedRowSet NNonCompliantAUsCRS = daoara.getNNonCompliantAUs() [FD]
Line_2 $$ public String drive() --> Line_377 $$ String NNonCompliantAUs = DBUtil.get_single_count_from_rs(NNonCompliantAUsCRS) [CD]
Line_376 $$ CachedRowSet NNonCompliantAUsCRS = daoara.getNNonCompliantAUs() --> Line_377 $$ String NNonCompliantAUs = DBUtil.get_single_count_from_rs(NNonCompliantAUsCRS) [FD]
Line_2 $$ public String drive() --> Line_378 $$ rprtCnst.addKV("REPORT_N_AUS_NONCOMPLIANT", NNonCompliantAUs) [CD]
Line_377 $$ String NNonCompliantAUs = DBUtil.get_single_count_from_rs(NNonCompliantAUsCRS) --> Line_378 $$ rprtCnst.addKV("REPORT_N_AUS_NONCOMPLIANT", NNonCompliantAUs) [FD]
Line_2 $$ public String drive() --> Line_379 $$ logger.info("================== Query 'audit_results_host' Table END ======") [CD]
Line_2 $$ public String drive() --> Line_380 $$ logger.info("========== Output Report ==================================") [CD]
Line_2 $$ public String drive() --> Line_381 $$ MYSQLReportConstantsDAO daorc = new MYSQLReportConstantsDAO() [CD]
Line_2 $$ public String drive() --> Line_382 $$ daorc.create() [CD]
Line_381 $$ MYSQLReportConstantsDAO daorc = new MYSQLReportConstantsDAO() --> Line_382 $$ daorc.create() [FD]
Line_2 $$ public String drive() --> Line_383 $$ daorc.update(rprtCnst.getBox()) [CD]
Line_381 $$ MYSQLReportConstantsDAO daorc = new MYSQLReportConstantsDAO() --> Line_383 $$ daorc.update(rprtCnst.getBox()) [FD]
Line_2 $$ public String drive() --> Line_384 $$ MYSQLReportHostSummaryDAO daorhs = new MYSQLReportHostSummaryDAO() [CD]
Line_2 $$ public String drive() --> Line_385 $$ daorhs.create() [CD]
Line_384 $$ MYSQLReportHostSummaryDAO daorhs = new MYSQLReportHostSummaryDAO() --> Line_385 $$ daorhs.create() [FD]
Line_2 $$ public String drive() --> Line_386 $$ CachedRowSet crsarh = daoarh.queryAll() [CD]
Line_352 $$ MYSQLAuditResultsHostDAO daoarh = new MYSQLAuditResultsHostDAO() --> Line_386 $$ CachedRowSet crsarh = daoarh.queryAll() [FD]
Line_2 $$ public String drive() --> Line_387 $$ daorhs.update(crsarh) [CD]
Line_384 $$ MYSQLReportHostSummaryDAO daorhs = new MYSQLReportHostSummaryDAO() --> Line_387 $$ daorhs.update(crsarh) [FD]
Line_386 $$ CachedRowSet crsarh = daoarh.queryAll() --> Line_387 $$ daorhs.update(crsarh) [FD]
Line_2 $$ public String drive() --> Line_388 $$ daorhs.update_new_column("space_offered", schema_host_hb_sel_size) [CD]
Line_384 $$ MYSQLReportHostSummaryDAO daorhs = new MYSQLReportHostSummaryDAO() --> Line_388 $$ daorhs.update_new_column("space_offered", schema_host_hb_sel_size) [FD]
Line_311 $$ Map<String, String> schema_host_hb_sel_size = hr.join_hash_pk_to_inner_hash_value(schema_host_hashbox, "/SSP/hosts/host/hostCapabilities/storageAvailable/@max_size") --> Line_388 $$ daorhs.update_new_column("space_offered", schema_host_hb_sel_size) [FD]
Line_2 $$ public String drive() --> Line_389 $$ daorhs.update_new_column("space_used", network_host_hb_sel_used_space) [CD]
Line_384 $$ MYSQLReportHostSummaryDAO daorhs = new MYSQLReportHostSummaryDAO() --> Line_389 $$ daorhs.update_new_column("space_used", network_host_hb_sel_used_space) [FD]
Line_310 $$ Map<String, String> network_host_hb_sel_used_space = hr.join_hash_pk_to_inner_hash_value(network_host_hashbox, "used_space") --> Line_389 $$ daorhs.update_new_column("space_used", network_host_hb_sel_used_space) [FD]
Line_2 $$ public String drive() --> Line_390 $$ Map<String, String> computation_cols_in_net_host_summary = new HashMap<String, String>() [CD]
Line_2 $$ public String drive() --> Line_391 $$ computation_cols_in_net_host_summary.put("space_total", "1") [CD]
Line_390 $$ Map<String, String> computation_cols_in_net_host_summary = new HashMap<String, String>() --> Line_391 $$ computation_cols_in_net_host_summary.put("space_total", "1") [FD]
Line_2 $$ public String drive() --> Line_392 $$ computation_cols_in_net_host_summary.put("space_used", "2") [CD]
Line_390 $$ Map<String, String> computation_cols_in_net_host_summary = new HashMap<String, String>() --> Line_392 $$ computation_cols_in_net_host_summary.put("space_used", "2") [FD]
Line_2 $$ public String drive() --> Line_393 $$ daorhs.update_compute_column("space_free", computation_cols_in_net_host_summary) [CD]
Line_384 $$ MYSQLReportHostSummaryDAO daorhs = new MYSQLReportHostSummaryDAO() --> Line_393 $$ daorhs.update_compute_column("space_free", computation_cols_in_net_host_summary) [FD]
Line_390 $$ Map<String, String> computation_cols_in_net_host_summary = new HashMap<String, String>() --> Line_393 $$ daorhs.update_compute_column("space_free", computation_cols_in_net_host_summary) [FD]
Line_2 $$ public String drive() --> Line_394 $$ logger.info("========== Audit Report Writer ======================================") [CD]
Line_2 $$ public String drive() --> Line_395 $$ AuditReportXMLWriter arxw = new AuditReportXMLWriter(rprtCnst, configFile.getAuditReportFile()) [CD]
Line_2 $$ public String drive() --> Line_396 $$ Set<String> tableSet = tracAuditChecklistDataFacade.findAllTables() [CD]
Line_2 $$ public String drive() --> Line_397 $$ String tracResultTable = "trac_audit_checklist_data" [CD]
Line_2 $$ public String drive() --> Line_398 $$ List<TracAuditChecklistData> evidenceList = null [CD]
Line_2 $$ public String drive() --> Line_399 $$ if (tableSet.contains(tracResultTable)) [CD]
Line_396 $$ Set<String> tableSet = tracAuditChecklistDataFacade.findAllTables() --> Line_399 $$ if (tableSet.contains(tracResultTable)) [FD]
Line_397 $$ String tracResultTable = "trac_audit_checklist_data" --> Line_399 $$ if (tableSet.contains(tracResultTable)) [FD]
Line_399 $$ if (tableSet.contains(tracResultTable)) --> Line_400 $$ evidenceList = tracAuditChecklistDataFacade.findAll() [CD]
Line_398 $$ List<TracAuditChecklistData> evidenceList = null --> Line_400 $$ evidenceList = tracAuditChecklistDataFacade.findAll() [FD]
Line_399 $$ if (tableSet.contains(tracResultTable)) --> Line_401 $$ logger.info("TRAC evidence list is size:" + evidenceList.size()) [CD]
Line_398 $$ List<TracAuditChecklistData> evidenceList = null --> Line_401 $$ logger.info("TRAC evidence list is size:" + evidenceList.size()) [FD]
Line_400 $$ evidenceList = tracAuditChecklistDataFacade.findAll() --> Line_401 $$ logger.info("TRAC evidence list is size:" + evidenceList.size()) [FD]
Line_399 $$ if (tableSet.contains(tracResultTable)) --> Line_403 $$ logger.info("Database does not contain table 'trac_audit_checklist_data'") [CD]
Line_2 $$ public String drive() --> Line_405 $$ Map<String, String> tracDataMap = new LinkedHashMap<String, String>() [CD]
Line_405 $$ Map<String, String> tracDataMap = new LinkedHashMap<String, String>() --> Line_407 $$ tracDataMap.put(tracdata.getAspectId(), tracdata.getEvidence()) [FD]
Line_406 $$ for (TracAuditChecklistData tracdata : evidenceList) --> Line_407 $$ tracDataMap.put(tracdata.getAspectId(), tracdata.getEvidence()) [FD]
Line_2 $$ public String drive() --> Line_409 $$ String writeTimestamp = arxw.write(daoarh, daoara, daorc, tracDataMap) [CD]
Line_395 $$ AuditReportXMLWriter arxw = new AuditReportXMLWriter(rprtCnst, configFile.getAuditReportFile()) --> Line_409 $$ String writeTimestamp = arxw.write(daoarh, daoara, daorc, tracDataMap) [FD]
Line_352 $$ MYSQLAuditResultsHostDAO daoarh = new MYSQLAuditResultsHostDAO() --> Line_409 $$ String writeTimestamp = arxw.write(daoarh, daoara, daorc, tracDataMap) [FD]
Line_270 $$ MYSQLAuditResultsAuDAO daoara = new MYSQLAuditResultsAuDAO() --> Line_409 $$ String writeTimestamp = arxw.write(daoarh, daoara, daorc, tracDataMap) [FD]
Line_381 $$ MYSQLReportConstantsDAO daorc = new MYSQLReportConstantsDAO() --> Line_409 $$ String writeTimestamp = arxw.write(daoarh, daoara, daorc, tracDataMap) [FD]
Line_405 $$ Map<String, String> tracDataMap = new LinkedHashMap<String, String>() --> Line_409 $$ String writeTimestamp = arxw.write(daoarh, daoara, daorc, tracDataMap) [FD]
Line_2 $$ public String drive() --> Line_410 $$ File target = new File(configFile.getAuditReportFileDir() + File.separator + configFile.getAuditSchemaFileName() + "." + writeTimestamp) [CD]
Line_2 $$ public String drive() --> Line_411 $$ FileChannel sourceChannel = null [CD]
Line_2 $$ public String drive() --> Line_412 $$ FileChannel targetChannel = null [CD]
Line_411 $$ FileChannel sourceChannel = null --> Line_414 $$ sourceChannel = new FileInputStream(auditSchemaFile).getChannel() [FD]
Line_412 $$ FileChannel targetChannel = null --> Line_415 $$ targetChannel = new FileOutputStream(target).getChannel() [FD]
Line_412 $$ FileChannel targetChannel = null --> Line_416 $$ targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size()) [FD]
Line_415 $$ targetChannel = new FileOutputStream(target).getChannel() --> Line_416 $$ targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size()) [FD]
Line_411 $$ FileChannel sourceChannel = null --> Line_416 $$ targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size()) [FD]
Line_414 $$ sourceChannel = new FileInputStream(auditSchemaFile).getChannel() --> Line_416 $$ targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size()) [FD]
Line_411 $$ FileChannel sourceChannel = null --> Line_421 $$ if (sourceChannel != null) [FD]
Line_414 $$ sourceChannel = new FileInputStream(auditSchemaFile).getChannel() --> Line_421 $$ if (sourceChannel != null) [FD]
Line_421 $$ if (sourceChannel != null) --> Line_422 $$ sourceChannel.close() [CD]
Line_411 $$ FileChannel sourceChannel = null --> Line_422 $$ sourceChannel.close() [FD]
Line_414 $$ sourceChannel = new FileInputStream(auditSchemaFile).getChannel() --> Line_422 $$ sourceChannel.close() [FD]
Line_412 $$ FileChannel targetChannel = null --> Line_424 $$ if (targetChannel != null) [FD]
Line_415 $$ targetChannel = new FileOutputStream(target).getChannel() --> Line_424 $$ if (targetChannel != null) [FD]
Line_424 $$ if (targetChannel != null) --> Line_425 $$ targetChannel.close() [CD]
Line_412 $$ FileChannel targetChannel = null --> Line_425 $$ targetChannel.close() [FD]
Line_415 $$ targetChannel = new FileOutputStream(target).getChannel() --> Line_425 $$ targetChannel.close() [FD]
Line_2 $$ public String drive() --> Line_431 $$ logger.info("\n========== EXIT drive() ===========================================") [CD]
Line_2 $$ public String drive() --> Line_432 $$ return writeTimestamp [CD]
