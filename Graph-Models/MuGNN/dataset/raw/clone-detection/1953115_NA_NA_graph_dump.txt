Line_2 $$ protected int doWork() --> Line_3 $$ SAMFileReader reader = new SAMFileReader(IoUtil.openFileForReading(INPUT)) [CD]
Line_2 $$ protected int doWork() --> Line_4 $$ reader.getFileHeader().setSortOrder(SORT_ORDER) [CD]
Line_3 $$ SAMFileReader reader = new SAMFileReader(IoUtil.openFileForReading(INPUT)) --> Line_4 $$ reader.getFileHeader().setSortOrder(SORT_ORDER) [FD]
Line_2 $$ protected int doWork() --> Line_5 $$ SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), false, OUTPUT) [CD]
Line_3 $$ SAMFileReader reader = new SAMFileReader(IoUtil.openFileForReading(INPUT)) --> Line_5 $$ SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), false, OUTPUT) [FD]
Line_2 $$ protected int doWork() --> Line_6 $$ Iterator<SAMRecord> iterator = reader.iterator() [CD]
Line_3 $$ SAMFileReader reader = new SAMFileReader(IoUtil.openFileForReading(INPUT)) --> Line_6 $$ Iterator<SAMRecord> iterator = reader.iterator() [FD]
Line_2 $$ protected int doWork() --> Line_7 $$ while (iterator.hasNext()) writer.addAlignment(iterator.next()) [CD]
Line_6 $$ Iterator<SAMRecord> iterator = reader.iterator() --> Line_7 $$ while (iterator.hasNext()) writer.addAlignment(iterator.next()) [FD]
Line_5 $$ SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), false, OUTPUT) --> Line_7 $$ while (iterator.hasNext()) writer.addAlignment(iterator.next()) [FD]
Line_2 $$ protected int doWork() --> Line_8 $$ reader.close() [CD]
Line_3 $$ SAMFileReader reader = new SAMFileReader(IoUtil.openFileForReading(INPUT)) --> Line_8 $$ reader.close() [FD]
Line_2 $$ protected int doWork() --> Line_9 $$ writer.close() [CD]
Line_5 $$ SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), false, OUTPUT) --> Line_9 $$ writer.close() [FD]
Line_2 $$ protected int doWork() --> Line_10 $$ return 0 [CD]
