Line_2 $$ public static void decompress(File apps, File f) throws IOException --> Line_3 $$ String filename = f.getName() [CD]
Line_2 $$ public static void decompress(File apps, File f) throws IOException --> Line_3 $$ String filename = f.getName() [FD]
Line_2 $$ public static void decompress(File apps, File f) throws IOException --> Line_4 $$ filename = filename.substring(0, filename.length() - PACK_FILE_SUFFIX.length()) [CD]
Line_3 $$ String filename = f.getName() --> Line_4 $$ filename = filename.substring(0, filename.length() - PACK_FILE_SUFFIX.length()) [FD]
Line_2 $$ public static void decompress(File apps, File f) throws IOException --> Line_5 $$ File dir = new File(apps, filename) [CD]
Line_2 $$ public static void decompress(File apps, File f) throws IOException --> Line_6 $$ if (!dir.exists()) [CD]
Line_5 $$ File dir = new File(apps, filename) --> Line_6 $$ if (!dir.exists()) [FD]
Line_6 $$ if (!dir.exists()) --> Line_7 $$ dir.mkdirs() [CD]
Line_5 $$ File dir = new File(apps, filename) --> Line_7 $$ dir.mkdirs() [FD]
Line_2 $$ public static void decompress(File apps, File f) throws IOException --> Line_9 $$ if (dir.isDirectory()) [CD]
Line_5 $$ File dir = new File(apps, filename) --> Line_9 $$ if (dir.isDirectory()) [FD]
Line_9 $$ if (dir.isDirectory()) --> Line_10 $$ JarFile jar = new JarFile(f) [CD]
Line_9 $$ if (dir.isDirectory()) --> Line_11 $$ Enumeration<JarEntry> files = jar.entries() [CD]
Line_10 $$ JarFile jar = new JarFile(f) --> Line_11 $$ Enumeration<JarEntry> files = jar.entries() [FD]
Line_9 $$ if (dir.isDirectory()) --> Line_12 $$ while (files.hasMoreElements()) [CD]
Line_12 $$ while (files.hasMoreElements()) --> Line_13 $$ JarEntry je = files.nextElement() [CD]
Line_12 $$ while (files.hasMoreElements()) --> Line_14 $$ if (je.isDirectory()) [CD]
Line_14 $$ if (je.isDirectory()) --> Line_15 $$ File item = new File(dir, je.getName()) [CD]
Line_14 $$ if (je.isDirectory()) --> Line_16 $$ item.mkdirs() [CD]
Line_15 $$ File item = new File(dir, je.getName()) --> Line_16 $$ item.mkdirs() [FD]
Line_14 $$ if (je.isDirectory()) --> Line_19 $$ item.getParentFile().mkdirs() [CD]
Line_15 $$ File item = new File(dir, je.getName()) --> Line_19 $$ item.getParentFile().mkdirs() [FD]
Line_14 $$ if (je.isDirectory()) --> Line_20 $$ InputStream input = jar.getInputStream(je) [CD]
Line_10 $$ JarFile jar = new JarFile(f) --> Line_20 $$ InputStream input = jar.getInputStream(je) [FD]
Line_14 $$ if (je.isDirectory()) --> Line_21 $$ FileOutputStream out = new FileOutputStream(item) [CD]
Line_14 $$ if (je.isDirectory()) --> Line_22 $$ IOUtils.copy(input, out) [CD]
Line_20 $$ InputStream input = jar.getInputStream(je) --> Line_22 $$ IOUtils.copy(input, out) [FD]
Line_21 $$ FileOutputStream out = new FileOutputStream(item) --> Line_22 $$ IOUtils.copy(input, out) [FD]
Line_14 $$ if (je.isDirectory()) --> Line_23 $$ input.close() [CD]
Line_20 $$ InputStream input = jar.getInputStream(je) --> Line_23 $$ input.close() [FD]
Line_14 $$ if (je.isDirectory()) --> Line_24 $$ out.close() [CD]
Line_21 $$ FileOutputStream out = new FileOutputStream(item) --> Line_24 $$ out.close() [FD]
