Line_2 $$ private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException --> Line_3 $$ FileInputStream is = null [CD]
Line_2 $$ private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException --> Line_4 $$ FileOutputStream os = null [CD]
Line_3 $$ FileInputStream is = null --> Line_6 $$ is = new FileInputStream(srcFile) [FD]
Line_3 $$ FileInputStream is = null --> Line_7 $$ FileChannel iChannel = is.getChannel() [FD]
Line_6 $$ is = new FileInputStream(srcFile) --> Line_7 $$ FileChannel iChannel = is.getChannel() [FD]
Line_4 $$ FileOutputStream os = null --> Line_8 $$ os = new FileOutputStream(destFile, false) [FD]
Line_4 $$ FileOutputStream os = null --> Line_9 $$ FileChannel oChannel = os.getChannel() [FD]
Line_8 $$ os = new FileOutputStream(destFile, false) --> Line_9 $$ FileChannel oChannel = os.getChannel() [FD]
Line_2 $$ private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException --> Line_11 $$ long todoBytes = srcFile.length() [FD]
Line_11 $$ long todoBytes = srcFile.length() --> Line_12 $$ while (todoBytes != 0L) [FD]
Line_12 $$ while (todoBytes != 0L) --> Line_13 $$ long iterationBytes = Math.min(todoBytes, chunkSize) [CD]
Line_11 $$ long todoBytes = srcFile.length() --> Line_13 $$ long iterationBytes = Math.min(todoBytes, chunkSize) [FD]
Line_2 $$ private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException --> Line_13 $$ long iterationBytes = Math.min(todoBytes, chunkSize) [FD]
Line_12 $$ while (todoBytes != 0L) --> Line_14 $$ long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes) [CD]
Line_9 $$ FileChannel oChannel = os.getChannel() --> Line_14 $$ long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes) [FD]
Line_7 $$ FileChannel iChannel = is.getChannel() --> Line_14 $$ long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes) [FD]
Line_10 $$ long doneBytes = 0L --> Line_14 $$ long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes) [FD]
Line_13 $$ long iterationBytes = Math.min(todoBytes, chunkSize) --> Line_14 $$ long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes) [FD]
Line_12 $$ while (todoBytes != 0L) --> Line_15 $$ if (iterationBytes != transferredLength) [CD]
Line_13 $$ long iterationBytes = Math.min(todoBytes, chunkSize) --> Line_15 $$ if (iterationBytes != transferredLength) [FD]
Line_14 $$ long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes) --> Line_15 $$ if (iterationBytes != transferredLength) [FD]
Line_12 $$ while (todoBytes != 0L) --> Line_18 $$ doneBytes += transferredLength [CD]
Line_10 $$ long doneBytes = 0L --> Line_18 $$ doneBytes += transferredLength [FD]
Line_14 $$ long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes) --> Line_18 $$ doneBytes += transferredLength [FD]
Line_12 $$ while (todoBytes != 0L) --> Line_19 $$ todoBytes -= transferredLength [CD]
Line_11 $$ long todoBytes = srcFile.length() --> Line_19 $$ todoBytes -= transferredLength [FD]
Line_14 $$ long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes) --> Line_19 $$ todoBytes -= transferredLength [FD]
Line_3 $$ FileInputStream is = null --> Line_22 $$ if (is != null) [FD]
Line_6 $$ is = new FileInputStream(srcFile) --> Line_22 $$ if (is != null) [FD]
Line_22 $$ if (is != null) --> Line_23 $$ is.close() [CD]
Line_3 $$ FileInputStream is = null --> Line_23 $$ is.close() [FD]
Line_6 $$ is = new FileInputStream(srcFile) --> Line_23 $$ is.close() [FD]
Line_4 $$ FileOutputStream os = null --> Line_25 $$ if (os != null) [FD]
Line_8 $$ os = new FileOutputStream(destFile, false) --> Line_25 $$ if (os != null) [FD]
Line_25 $$ if (os != null) --> Line_26 $$ os.close() [CD]
Line_4 $$ FileOutputStream os = null --> Line_26 $$ os.close() [FD]
Line_8 $$ os = new FileOutputStream(destFile, false) --> Line_26 $$ os.close() [FD]
Line_2 $$ private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException --> Line_29 $$ boolean successTimestampOp = destFile.setLastModified(srcFile.lastModified()) [CD]
Line_2 $$ private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException --> Line_29 $$ boolean successTimestampOp = destFile.setLastModified(srcFile.lastModified()) [FD]
Line_2 $$ private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException --> Line_30 $$ if (!successTimestampOp) [CD]
Line_29 $$ boolean successTimestampOp = destFile.setLastModified(srcFile.lastModified()) --> Line_30 $$ if (!successTimestampOp) [FD]
Line_30 $$ if (!successTimestampOp) --> Line_31 $$ log.warn("Could not change timestamp for [CD]
Line_2 $$ private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException --> Line_31 $$ log.warn("Could not change timestamp for [FD]
Line_19 $$ todoBytes -= transferredLength --> Line_12 $$ while (todoBytes != 0L) [FD]
Line_19 $$ todoBytes -= transferredLength --> Line_13 $$ long iterationBytes = Math.min(todoBytes, chunkSize) [FD]
Line_18 $$ doneBytes += transferredLength --> Line_14 $$ long transferredLength = oChannel.transferFrom(iChannel, doneBytes, iterationBytes) [FD]
