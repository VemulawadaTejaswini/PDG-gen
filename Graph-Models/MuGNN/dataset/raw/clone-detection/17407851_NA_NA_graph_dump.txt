Line_2 $$ private String _doPost(final String urlStr, final Map<String, String> params) --> Line_3 $$ String paramsStr = "" [CD]
Line_2 $$ private String _doPost(final String urlStr, final Map<String, String> params) --> Line_4 $$ for (String key : params.keySet()) [FD]
Line_3 $$ String paramsStr = "" --> Line_6 $$ paramsStr += URLEncoder.encode(key, ENCODING) + "=" + URLEncoder.encode(params.get(key), ENCODING) + "&" [FD]
Line_4 $$ for (String key : params.keySet()) --> Line_6 $$ paramsStr += URLEncoder.encode(key, ENCODING) + "=" + URLEncoder.encode(params.get(key), ENCODING) + "&" [FD]
Line_2 $$ private String _doPost(final String urlStr, final Map<String, String> params) --> Line_6 $$ paramsStr += URLEncoder.encode(key, ENCODING) + "=" + URLEncoder.encode(params.get(key), ENCODING) + "&" [FD]
Line_2 $$ private String _doPost(final String urlStr, final Map<String, String> params) --> Line_8 $$ s_logger.debug("UnsupportedEncodingException caught. Trying to encode: " + key + " and " + params.get(key)) [FD]
Line_4 $$ for (String key : params.keySet()) --> Line_8 $$ s_logger.debug("UnsupportedEncodingException caught. Trying to encode: " + key + " and " + params.get(key)) [FD]
Line_2 $$ private String _doPost(final String urlStr, final Map<String, String> params) --> Line_12 $$ if (paramsStr.length() == 0) [CD]
Line_3 $$ String paramsStr = "" --> Line_12 $$ if (paramsStr.length() == 0) [FD]
Line_6 $$ paramsStr += URLEncoder.encode(key, ENCODING) + "=" + URLEncoder.encode(params.get(key), ENCODING) + "&" --> Line_12 $$ if (paramsStr.length() == 0) [FD]
Line_12 $$ if (paramsStr.length() == 0) --> Line_13 $$ s_logger.debug("POST will not complete, no parameters specified.") [CD]
Line_12 $$ if (paramsStr.length() == 0) --> Line_14 $$ return null [CD]
Line_2 $$ private String _doPost(final String urlStr, final Map<String, String> params) --> Line_16 $$ s_logger.debug("POST to server will be done with the following parameters: " + paramsStr) [CD]
Line_2 $$ private String _doPost(final String urlStr, final Map<String, String> params) --> Line_17 $$ HttpURLConnection connection = null [CD]
Line_2 $$ private String _doPost(final String urlStr, final Map<String, String> params) --> Line_18 $$ String responseStr = null [CD]
Line_17 $$ HttpURLConnection connection = null --> Line_20 $$ connection = (HttpURLConnection) (new URL(urlStr)).openConnection() [FD]
Line_17 $$ HttpURLConnection connection = null --> Line_21 $$ connection.setRequestMethod(REQUEST_METHOD) [FD]
Line_20 $$ connection = (HttpURLConnection) (new URL(urlStr)).openConnection() --> Line_21 $$ connection.setRequestMethod(REQUEST_METHOD) [FD]
Line_17 $$ HttpURLConnection connection = null --> Line_22 $$ connection.setDoOutput(true) [FD]
Line_20 $$ connection = (HttpURLConnection) (new URL(urlStr)).openConnection() --> Line_22 $$ connection.setDoOutput(true) [FD]
Line_17 $$ HttpURLConnection connection = null --> Line_23 $$ DataOutputStream dos = new DataOutputStream(connection.getOutputStream()) [FD]
Line_20 $$ connection = (HttpURLConnection) (new URL(urlStr)).openConnection() --> Line_23 $$ DataOutputStream dos = new DataOutputStream(connection.getOutputStream()) [FD]
Line_23 $$ DataOutputStream dos = new DataOutputStream(connection.getOutputStream()) --> Line_24 $$ dos.write(paramsStr.getBytes()) [FD]
Line_3 $$ String paramsStr = "" --> Line_24 $$ dos.write(paramsStr.getBytes()) [FD]
Line_6 $$ paramsStr += URLEncoder.encode(key, ENCODING) + "=" + URLEncoder.encode(params.get(key), ENCODING) + "&" --> Line_24 $$ dos.write(paramsStr.getBytes()) [FD]
Line_23 $$ DataOutputStream dos = new DataOutputStream(connection.getOutputStream()) --> Line_25 $$ dos.flush() [FD]
Line_23 $$ DataOutputStream dos = new DataOutputStream(connection.getOutputStream()) --> Line_26 $$ dos.close() [FD]
Line_17 $$ HttpURLConnection connection = null --> Line_27 $$ InputStream is = connection.getInputStream() [FD]
Line_20 $$ connection = (HttpURLConnection) (new URL(urlStr)).openConnection() --> Line_27 $$ InputStream is = connection.getInputStream() [FD]
Line_29 $$ String line --> Line_31 $$ while ((line = rd.readLine()) != null) [FD]
Line_28 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(is)) --> Line_31 $$ while ((line = rd.readLine()) != null) [FD]
Line_31 $$ while ((line = rd.readLine()) != null) --> Line_32 $$ response.append(line) [CD]
Line_31 $$ while ((line = rd.readLine()) != null) --> Line_32 $$ response.append(line) [FD]
Line_30 $$ StringBuffer response = new StringBuffer() --> Line_32 $$ response.append(line) [FD]
Line_29 $$ String line --> Line_32 $$ response.append(line) [FD]
Line_31 $$ while ((line = rd.readLine()) != null) --> Line_33 $$ response.append('\r') [CD]
Line_30 $$ StringBuffer response = new StringBuffer() --> Line_33 $$ response.append('\r') [FD]
Line_28 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(is)) --> Line_35 $$ rd.close() [FD]
Line_18 $$ String responseStr = null --> Line_36 $$ responseStr = response.toString() [FD]
Line_30 $$ StringBuffer response = new StringBuffer() --> Line_36 $$ responseStr = response.toString() [FD]
Line_2 $$ private String _doPost(final String urlStr, final Map<String, String> params) --> Line_44 $$ return responseStr [CD]
