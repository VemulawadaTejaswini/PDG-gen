Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_3 $$ String pathInfo = request.getPathInfo() [CD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_3 $$ String pathInfo = request.getPathInfo() [FD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_4 $$ getLog().info("Process request " + pathInfo) [CD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_5 $$ if (null != pathInfo) [CD]
Line_3 $$ String pathInfo = request.getPathInfo() --> Line_5 $$ if (null != pathInfo) [FD]
Line_5 $$ if (null != pathInfo) --> Line_6 $$ String pathId = getPathId(pathInfo) [CD]
Line_3 $$ String pathInfo = request.getPathInfo() --> Line_6 $$ String pathId = getPathId(pathInfo) [FD]
Line_5 $$ if (null != pathInfo) --> Line_7 $$ JobResources res = ContextUtil.getJobResource(pathId) [CD]
Line_6 $$ String pathId = getPathId(pathInfo) --> Line_7 $$ JobResources res = ContextUtil.getJobResource(pathId) [FD]
Line_5 $$ if (null != pathInfo) --> Line_8 $$ if (null != res) [CD]
Line_7 $$ JobResources res = ContextUtil.getJobResource(pathId) --> Line_8 $$ if (null != res) [FD]
Line_8 $$ if (null != res) --> Line_9 $$ RequestType requType = getRequestType(request) [CD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_9 $$ RequestType requType = getRequestType(request) [FD]
Line_8 $$ if (null != res) --> Line_10 $$ ResultAccess access = new ResultAccess(res) [CD]
Line_8 $$ if (null != res) --> Line_11 $$ Collection<Long> uIdColl = res.getUniqIds() [CD]
Line_7 $$ JobResources res = ContextUtil.getJobResource(pathId) --> Line_11 $$ Collection<Long> uIdColl = res.getUniqIds() [FD]
Line_8 $$ if (null != res) --> Line_12 $$ boolean isFiltered = false [CD]
Line_8 $$ if (null != res) --> Line_14 $$ List<String> postSeqIds = getSeqList(request) [CD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_14 $$ List<String> postSeqIds = getSeqList(request) [FD]
Line_8 $$ if (null != res) --> Line_15 $$ if (!postSeqIds.isEmpty()) [CD]
Line_14 $$ List<String> postSeqIds = getSeqList(request) --> Line_15 $$ if (!postSeqIds.isEmpty()) [FD]
Line_15 $$ if (!postSeqIds.isEmpty()) --> Line_16 $$ isFiltered = true [CD]
Line_12 $$ boolean isFiltered = false --> Line_16 $$ isFiltered = true [FD]
Line_15 $$ if (!postSeqIds.isEmpty()) --> Line_17 $$ uIdColl = access.loadIds(postSeqIds) [CD]
Line_11 $$ Collection<Long> uIdColl = res.getUniqIds() --> Line_17 $$ uIdColl = access.loadIds(postSeqIds) [FD]
Line_10 $$ ResultAccess access = new ResultAccess(res) --> Line_17 $$ uIdColl = access.loadIds(postSeqIds) [FD]
Line_14 $$ List<String> postSeqIds = getSeqList(request) --> Line_17 $$ uIdColl = access.loadIds(postSeqIds) [FD]
Line_9 $$ RequestType requType = getRequestType(request) --> Line_21 $$ if ((requType.equals(RequestType.FASTA)) || (requType.equals(RequestType.SWISSPROT))) [FD]
Line_21 $$ if ((requType.equals(RequestType.FASTA)) || (requType.equals(RequestType.SWISSPROT))) --> Line_22 $$ OutputStreamWriter out = null [CD]
Line_21 $$ if ((requType.equals(RequestType.FASTA)) || (requType.equals(RequestType.SWISSPROT))) --> Line_23 $$ out = new OutputStreamWriter(response.getOutputStream()) [CD]
Line_22 $$ OutputStreamWriter out = null --> Line_23 $$ out = new OutputStreamWriter(response.getOutputStream()) [FD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_23 $$ out = new OutputStreamWriter(response.getOutputStream()) [FD]
Line_9 $$ RequestType requType = getRequestType(request) --> Line_25 $$ if (requType.equals(RequestType.FASTA)) [FD]
Line_25 $$ if (requType.equals(RequestType.FASTA)) --> Line_26 $$ SwissProt sw = access.getSwissprotEntry(uid) [CD]
Line_10 $$ ResultAccess access = new ResultAccess(res) --> Line_26 $$ SwissProt sw = access.getSwissprotEntry(uid) [FD]
Line_24 $$ for (Long uid : uIdColl) --> Line_26 $$ SwissProt sw = access.getSwissprotEntry(uid) [FD]
Line_25 $$ if (requType.equals(RequestType.FASTA)) --> Line_27 $$ if (null != sw) [CD]
Line_27 $$ if (null != sw) --> Line_28 $$ PrintFactory.instance().print(ConvertFactory.instance().SwissProt2fasta(sw), out) [CD]
Line_22 $$ OutputStreamWriter out = null --> Line_28 $$ PrintFactory.instance().print(ConvertFactory.instance().SwissProt2fasta(sw), out) [FD]
Line_23 $$ out = new OutputStreamWriter(response.getOutputStream()) --> Line_28 $$ PrintFactory.instance().print(ConvertFactory.instance().SwissProt2fasta(sw), out) [FD]
Line_27 $$ if (null != sw) --> Line_30 $$ System.err.println("Not able to read Swissprot entry " + uid + " in project " + res.getBaseDir()) [CD]
Line_7 $$ JobResources res = ContextUtil.getJobResource(pathId) --> Line_30 $$ System.err.println("Not able to read Swissprot entry " + uid + " in project " + res.getBaseDir()) [FD]
Line_25 $$ if (requType.equals(RequestType.FASTA)) --> Line_32 $$ if (requType.equals(RequestType.SWISSPROT)) [CD]
Line_9 $$ RequestType requType = getRequestType(request) --> Line_32 $$ if (requType.equals(RequestType.SWISSPROT)) [FD]
Line_32 $$ if (requType.equals(RequestType.SWISSPROT)) --> Line_33 $$ File swissFile = res.getSwissprotFile(uid) [CD]
Line_7 $$ JobResources res = ContextUtil.getJobResource(pathId) --> Line_33 $$ File swissFile = res.getSwissprotFile(uid) [FD]
Line_24 $$ for (Long uid : uIdColl) --> Line_33 $$ File swissFile = res.getSwissprotFile(uid) [FD]
Line_32 $$ if (requType.equals(RequestType.SWISSPROT)) --> Line_34 $$ if (swissFile.exists()) [CD]
Line_33 $$ File swissFile = res.getSwissprotFile(uid) --> Line_34 $$ if (swissFile.exists()) [FD]
Line_34 $$ if (swissFile.exists()) --> Line_35 $$ InputStream in = null [CD]
Line_35 $$ InputStream in = null --> Line_37 $$ in = new FileInputStream(swissFile) [FD]
Line_35 $$ InputStream in = null --> Line_38 $$ IOUtils.copy(in, out) [FD]
Line_37 $$ in = new FileInputStream(swissFile) --> Line_38 $$ IOUtils.copy(in, out) [FD]
Line_22 $$ OutputStreamWriter out = null --> Line_38 $$ IOUtils.copy(in, out) [FD]
Line_23 $$ out = new OutputStreamWriter(response.getOutputStream()) --> Line_38 $$ IOUtils.copy(in, out) [FD]
Line_35 $$ InputStream in = null --> Line_43 $$ IOUtils.closeQuietly(in) [FD]
Line_37 $$ in = new FileInputStream(swissFile) --> Line_43 $$ IOUtils.closeQuietly(in) [FD]
Line_34 $$ if (swissFile.exists()) --> Line_46 $$ System.err.println("Swissprot file does not exist: " + swissFile) [CD]
Line_21 $$ if ((requType.equals(RequestType.FASTA)) || (requType.equals(RequestType.SWISSPROT))) --> Line_50 $$ out.flush() [CD]
Line_22 $$ OutputStreamWriter out = null --> Line_50 $$ out.flush() [FD]
Line_23 $$ out = new OutputStreamWriter(response.getOutputStream()) --> Line_50 $$ out.flush() [FD]
Line_21 $$ if ((requType.equals(RequestType.FASTA)) || (requType.equals(RequestType.SWISSPROT))) --> Line_52 $$ if (uIdColl.size() <= 2) [CD]
Line_11 $$ Collection<Long> uIdColl = res.getUniqIds() --> Line_52 $$ if (uIdColl.size() <= 2) [FD]
Line_17 $$ uIdColl = access.loadIds(postSeqIds) --> Line_52 $$ if (uIdColl.size() <= 2) [FD]
Line_52 $$ if (uIdColl.size() <= 2) --> Line_53 $$ isFiltered = false [CD]
Line_12 $$ boolean isFiltered = false --> Line_53 $$ isFiltered = false [FD]
Line_16 $$ isFiltered = true --> Line_53 $$ isFiltered = false [FD]
Line_52 $$ if (uIdColl.size() <= 2) --> Line_54 $$ uIdColl = res.getUniqIds() [CD]
Line_11 $$ Collection<Long> uIdColl = res.getUniqIds() --> Line_54 $$ uIdColl = res.getUniqIds() [FD]
Line_17 $$ uIdColl = access.loadIds(postSeqIds) --> Line_54 $$ uIdColl = res.getUniqIds() [FD]
Line_7 $$ JobResources res = ContextUtil.getJobResource(pathId) --> Line_54 $$ uIdColl = res.getUniqIds() [FD]
Line_21 $$ if ((requType.equals(RequestType.FASTA)) || (requType.equals(RequestType.SWISSPROT))) --> Line_56 $$ Tree tree = access.getTreeByUniquId(uIdColl) [CD]
Line_10 $$ ResultAccess access = new ResultAccess(res) --> Line_56 $$ Tree tree = access.getTreeByUniquId(uIdColl) [FD]
Line_11 $$ Collection<Long> uIdColl = res.getUniqIds() --> Line_56 $$ Tree tree = access.getTreeByUniquId(uIdColl) [FD]
Line_17 $$ uIdColl = access.loadIds(postSeqIds) --> Line_56 $$ Tree tree = access.getTreeByUniquId(uIdColl) [FD]
Line_54 $$ uIdColl = res.getUniqIds() --> Line_56 $$ Tree tree = access.getTreeByUniquId(uIdColl) [FD]
Line_21 $$ if ((requType.equals(RequestType.FASTA)) || (requType.equals(RequestType.SWISSPROT))) --> Line_57 $$ if (requType.equals(RequestType.TREE)) [CD]
Line_9 $$ RequestType requType = getRequestType(request) --> Line_57 $$ if (requType.equals(RequestType.TREE)) [FD]
Line_57 $$ if (requType.equals(RequestType.TREE)) --> Line_58 $$ response.getWriter().write(tree.toNewHampshireX()) [CD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_58 $$ response.getWriter().write(tree.toNewHampshireX()) [FD]
Line_56 $$ Tree tree = access.getTreeByUniquId(uIdColl) --> Line_58 $$ response.getWriter().write(tree.toNewHampshireX()) [FD]
Line_57 $$ if (requType.equals(RequestType.TREE)) --> Line_59 $$ if (requType.equals(RequestType.PNG)) [CD]
Line_9 $$ RequestType requType = getRequestType(request) --> Line_59 $$ if (requType.equals(RequestType.PNG)) [FD]
Line_59 $$ if (requType.equals(RequestType.PNG)) --> Line_60 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [CD]
Line_10 $$ ResultAccess access = new ResultAccess(res) --> Line_60 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [FD]
Line_11 $$ Collection<Long> uIdColl = res.getUniqIds() --> Line_60 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [FD]
Line_17 $$ uIdColl = access.loadIds(postSeqIds) --> Line_60 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [FD]
Line_54 $$ uIdColl = res.getUniqIds() --> Line_60 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [FD]
Line_59 $$ if (requType.equals(RequestType.PNG)) --> Line_61 $$ ImageMap map = ImageFactory.instance().createProteinCard(sp, tree, true, res) [CD]
Line_60 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) --> Line_61 $$ ImageMap map = ImageFactory.instance().createProteinCard(sp, tree, true, res) [FD]
Line_56 $$ Tree tree = access.getTreeByUniquId(uIdColl) --> Line_61 $$ ImageMap map = ImageFactory.instance().createProteinCard(sp, tree, true, res) [FD]
Line_7 $$ JobResources res = ContextUtil.getJobResource(pathId) --> Line_61 $$ ImageMap map = ImageFactory.instance().createProteinCard(sp, tree, true, res) [FD]
Line_59 $$ if (requType.equals(RequestType.PNG)) --> Line_62 $$ response.setContentType("image/png") [CD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_62 $$ response.setContentType("image/png") [FD]
Line_59 $$ if (requType.equals(RequestType.PNG)) --> Line_63 $$ response.addHeader("Content-Disposition", "filename=ProteinCards.png") [CD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_63 $$ response.addHeader("Content-Disposition", "filename=ProteinCards.png") [FD]
Line_59 $$ if (requType.equals(RequestType.PNG)) --> Line_64 $$ ImageFactory.instance().printPNG(map.getImage(), response.getOutputStream()) [CD]
Line_61 $$ ImageMap map = ImageFactory.instance().createProteinCard(sp, tree, true, res) --> Line_64 $$ ImageFactory.instance().printPNG(map.getImage(), response.getOutputStream()) [FD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_64 $$ ImageFactory.instance().printPNG(map.getImage(), response.getOutputStream()) [FD]
Line_59 $$ if (requType.equals(RequestType.PNG)) --> Line_65 $$ response.getOutputStream().flush() [CD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_65 $$ response.getOutputStream().flush() [FD]
Line_59 $$ if (requType.equals(RequestType.PNG)) --> Line_66 $$ if (requType.equals(RequestType.HTML)) [CD]
Line_9 $$ RequestType requType = getRequestType(request) --> Line_66 $$ if (requType.equals(RequestType.HTML)) [FD]
Line_66 $$ if (requType.equals(RequestType.HTML)) --> Line_67 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [CD]
Line_10 $$ ResultAccess access = new ResultAccess(res) --> Line_67 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [FD]
Line_11 $$ Collection<Long> uIdColl = res.getUniqIds() --> Line_67 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [FD]
Line_17 $$ uIdColl = access.loadIds(postSeqIds) --> Line_67 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [FD]
Line_54 $$ uIdColl = res.getUniqIds() --> Line_67 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) [FD]
Line_66 $$ if (requType.equals(RequestType.HTML)) --> Line_68 $$ createHtml(res, access, tree, request, response, sp, isFiltered) [CD]
Line_7 $$ JobResources res = ContextUtil.getJobResource(pathId) --> Line_68 $$ createHtml(res, access, tree, request, response, sp, isFiltered) [FD]
Line_10 $$ ResultAccess access = new ResultAccess(res) --> Line_68 $$ createHtml(res, access, tree, request, response, sp, isFiltered) [FD]
Line_56 $$ Tree tree = access.getTreeByUniquId(uIdColl) --> Line_68 $$ createHtml(res, access, tree, request, response, sp, isFiltered) [FD]
Line_2 $$ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_68 $$ createHtml(res, access, tree, request, response, sp, isFiltered) [FD]
Line_60 $$ List<SwissProt> sp = access.getSwissprotEntriesByUniquId(uIdColl) --> Line_68 $$ createHtml(res, access, tree, request, response, sp, isFiltered) [FD]
Line_12 $$ boolean isFiltered = false --> Line_68 $$ createHtml(res, access, tree, request, response, sp, isFiltered) [FD]
Line_16 $$ isFiltered = true --> Line_68 $$ createHtml(res, access, tree, request, response, sp, isFiltered) [FD]
Line_53 $$ isFiltered = false --> Line_68 $$ createHtml(res, access, tree, request, response, sp, isFiltered) [FD]
Line_8 $$ if (null != res) --> Line_76 $$ getLog().error("Resource is null: " + pathId + "; path " + pathInfo) [CD]
Line_5 $$ if (null != pathInfo) --> Line_79 $$ getLog().error("PathInfo is null!!!") [CD]
