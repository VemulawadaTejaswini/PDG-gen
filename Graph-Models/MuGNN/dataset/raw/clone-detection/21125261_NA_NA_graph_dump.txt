Line_2 $$ public void test() throws Exception --> Line_3 $$ InputStream is = this.getClass().getResourceAsStream("originAndDestination.xml") [CD]
Line_2 $$ public void test() throws Exception --> Line_4 $$ ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream() [CD]
Line_2 $$ public void test() throws Exception --> Line_5 $$ IOUtils.copy(is, byteArrayOutputStream) [CD]
Line_3 $$ InputStream is = this.getClass().getResourceAsStream("originAndDestination.xml") --> Line_5 $$ IOUtils.copy(is, byteArrayOutputStream) [FD]
Line_4 $$ ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream() --> Line_5 $$ IOUtils.copy(is, byteArrayOutputStream) [FD]
Line_2 $$ public void test() throws Exception --> Line_6 $$ TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray()) [CD]
Line_4 $$ ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream() --> Line_6 $$ TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray()) [FD]
Line_2 $$ public void test() throws Exception --> Line_7 $$ TrafficSimulationEngine se = new TrafficSimulationEngine() [CD]
Line_2 $$ public void test() throws Exception --> Line_8 $$ se.init(def) [CD]
Line_7 $$ TrafficSimulationEngine se = new TrafficSimulationEngine() --> Line_8 $$ se.init(def) [FD]
Line_6 $$ TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray()) --> Line_8 $$ se.init(def) [FD]
Line_2 $$ public void test() throws Exception --> Line_9 $$ int linkId = 2 [CD]
Line_2 $$ public void test() throws Exception --> Line_10 $$ int segmentId = 0 [CD]
Line_2 $$ public void test() throws Exception --> Line_11 $$ Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>() [CD]
Line_2 $$ public void test() throws Exception --> Line_12 $$ Set<Integer> segments = new HashSet<Integer>() [CD]
Line_2 $$ public void test() throws Exception --> Line_13 $$ segments.add(segmentId) [CD]
Line_12 $$ Set<Integer> segments = new HashSet<Integer>() --> Line_13 $$ segments.add(segmentId) [FD]
Line_10 $$ int segmentId = 0 --> Line_13 $$ segments.add(segmentId) [FD]
Line_2 $$ public void test() throws Exception --> Line_14 $$ linkSegments.put(linkId, segments) [CD]
Line_11 $$ Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>() --> Line_14 $$ linkSegments.put(linkId, segments) [FD]
Line_9 $$ int linkId = 2 --> Line_14 $$ linkSegments.put(linkId, segments) [FD]
Line_12 $$ Set<Integer> segments = new HashSet<Integer>() --> Line_14 $$ linkSegments.put(linkId, segments) [FD]
Line_2 $$ public void test() throws Exception --> Line_15 $$ FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>()) [CD]
Line_2 $$ public void test() throws Exception --> Line_16 $$ se.setFrameProperties(frameProperties) [CD]
Line_7 $$ TrafficSimulationEngine se = new TrafficSimulationEngine() --> Line_16 $$ se.setFrameProperties(frameProperties) [FD]
Line_15 $$ FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>()) --> Line_16 $$ se.setFrameProperties(frameProperties) [FD]
Line_2 $$ public void test() throws Exception --> Line_17 $$ for (float time = 0; time < 60 * 10; time += 0.1f) [CD]
Line_17 $$ for (float time = 0; time < 60 * 10; time += 0.1f) --> Line_18 $$ se.step(0.1f) [CD]
Line_7 $$ TrafficSimulationEngine se = new TrafficSimulationEngine() --> Line_18 $$ se.step(0.1f) [FD]
Line_7 $$ TrafficSimulationEngine se = new TrafficSimulationEngine() --> Line_19 $$ for (RoadObject vehicle : se.getDynamicObjects()) [FD]
Line_19 $$ for (RoadObject vehicle : se.getDynamicObjects()) --> Line_20 $$ System.out.println(time + ": X=" + vehicle.getPosition() + "\tV=" + vehicle.getSpeed()) [FD]
