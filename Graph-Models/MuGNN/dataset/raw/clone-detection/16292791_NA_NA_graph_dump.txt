Line_2 $$ public void doCompress(File[] files, File out, List<String> excludedKeys) --> Line_3 $$ Map<String, File> map = new HashMap<String, File>() [CD]
Line_2 $$ public void doCompress(File[] files, File out, List<String> excludedKeys) --> Line_4 $$ String parent = FilenameUtils.getBaseName(out.getName()) [CD]
Line_2 $$ public void doCompress(File[] files, File out, List<String> excludedKeys) --> Line_4 $$ String parent = FilenameUtils.getBaseName(out.getName()) [FD]
Line_5 $$ for (File f : files) --> Line_6 $$ CompressionUtil.list(f, parent, map, excludedKeys) [FD]
Line_4 $$ String parent = FilenameUtils.getBaseName(out.getName()) --> Line_6 $$ CompressionUtil.list(f, parent, map, excludedKeys) [FD]
Line_3 $$ Map<String, File> map = new HashMap<String, File>() --> Line_6 $$ CompressionUtil.list(f, parent, map, excludedKeys) [FD]
Line_2 $$ public void doCompress(File[] files, File out, List<String> excludedKeys) --> Line_6 $$ CompressionUtil.list(f, parent, map, excludedKeys) [FD]
Line_2 $$ public void doCompress(File[] files, File out, List<String> excludedKeys) --> Line_8 $$ if (!map.isEmpty()) [CD]
Line_3 $$ Map<String, File> map = new HashMap<String, File>() --> Line_8 $$ if (!map.isEmpty()) [FD]
Line_8 $$ if (!map.isEmpty()) --> Line_9 $$ FileOutputStream fos = null [CD]
Line_8 $$ if (!map.isEmpty()) --> Line_10 $$ ArchiveOutputStream aos = null [CD]
Line_8 $$ if (!map.isEmpty()) --> Line_11 $$ InputStream is = null [CD]
Line_9 $$ FileOutputStream fos = null --> Line_13 $$ fos = new FileOutputStream(out) [FD]
Line_10 $$ ArchiveOutputStream aos = null --> Line_14 $$ aos = getArchiveOutputStream(fos) [FD]
Line_9 $$ FileOutputStream fos = null --> Line_14 $$ aos = getArchiveOutputStream(fos) [FD]
Line_13 $$ fos = new FileOutputStream(out) --> Line_14 $$ aos = getArchiveOutputStream(fos) [FD]
Line_3 $$ Map<String, File> map = new HashMap<String, File>() --> Line_15 $$ for (Map.Entry<String, File> entry : map.entrySet()) [FD]
Line_16 $$ File file = entry.getValue() --> Line_17 $$ ArchiveEntry ae = getArchiveEntry(file, entry.getKey()) [FD]
Line_10 $$ ArchiveOutputStream aos = null --> Line_18 $$ aos.putArchiveEntry(ae) [FD]
Line_14 $$ aos = getArchiveOutputStream(fos) --> Line_18 $$ aos.putArchiveEntry(ae) [FD]
Line_16 $$ File file = entry.getValue() --> Line_19 $$ if (file.isFile()) [FD]
Line_19 $$ if (file.isFile()) --> Line_20 $$ IOUtils.copy(is = new FileInputStream(file), aos) [CD]
Line_10 $$ ArchiveOutputStream aos = null --> Line_20 $$ IOUtils.copy(is = new FileInputStream(file), aos) [FD]
Line_14 $$ aos = getArchiveOutputStream(fos) --> Line_20 $$ IOUtils.copy(is = new FileInputStream(file), aos) [FD]
Line_11 $$ InputStream is = null --> Line_20 $$ IOUtils.copy(is = new FileInputStream(file), aos) [FD]
Line_19 $$ if (file.isFile()) --> Line_21 $$ IOUtils.closeQuietly(is) [CD]
Line_11 $$ InputStream is = null --> Line_21 $$ IOUtils.closeQuietly(is) [FD]
Line_20 $$ IOUtils.copy(is = new FileInputStream(file), aos) --> Line_21 $$ IOUtils.closeQuietly(is) [FD]
Line_19 $$ if (file.isFile()) --> Line_22 $$ is = null [CD]
Line_11 $$ InputStream is = null --> Line_22 $$ is = null [FD]
Line_20 $$ IOUtils.copy(is = new FileInputStream(file), aos) --> Line_22 $$ is = null [FD]
Line_10 $$ ArchiveOutputStream aos = null --> Line_24 $$ aos.closeArchiveEntry() [FD]
Line_14 $$ aos = getArchiveOutputStream(fos) --> Line_24 $$ aos.closeArchiveEntry() [FD]
Line_10 $$ ArchiveOutputStream aos = null --> Line_26 $$ aos.finish() [FD]
Line_14 $$ aos = getArchiveOutputStream(fos) --> Line_26 $$ aos.finish() [FD]
Line_11 $$ InputStream is = null --> Line_30 $$ IOUtils.closeQuietly(is) [FD]
Line_20 $$ IOUtils.copy(is = new FileInputStream(file), aos) --> Line_30 $$ IOUtils.closeQuietly(is) [FD]
Line_22 $$ is = null --> Line_30 $$ IOUtils.closeQuietly(is) [FD]
Line_10 $$ ArchiveOutputStream aos = null --> Line_31 $$ IOUtils.closeQuietly(aos) [FD]
Line_14 $$ aos = getArchiveOutputStream(fos) --> Line_31 $$ IOUtils.closeQuietly(aos) [FD]
Line_9 $$ FileOutputStream fos = null --> Line_32 $$ IOUtils.closeQuietly(fos) [FD]
Line_13 $$ fos = new FileOutputStream(out) --> Line_32 $$ IOUtils.closeQuietly(fos) [FD]
