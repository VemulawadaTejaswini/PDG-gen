Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_3 $$ List<Preference> preferences = prefService.findAll() [CD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_4 $$ if (preferences != null && !preferences.isEmpty()) [CD]
Line_3 $$ List<Preference> preferences = prefService.findAll() --> Line_4 $$ if (preferences != null && !preferences.isEmpty()) [FD]
Line_4 $$ if (preferences != null && !preferences.isEmpty()) --> Line_5 $$ preference = preferences.get(0) [CD]
Line_3 $$ List<Preference> preferences = prefService.findAll() --> Line_5 $$ preference = preferences.get(0) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_7 $$ SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATEFORMAT_YYYYMMDD) [CD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_8 $$ String repo = preference.getRepository() [CD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_9 $$ Calendar calendar = Calendar.getInstance() [CD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_10 $$ StringBuffer sbRepo = new StringBuffer(repo) [CD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_11 $$ sbRepo.append(File.separator) [CD]
Line_10 $$ StringBuffer sbRepo = new StringBuffer(repo) --> Line_11 $$ sbRepo.append(File.separator) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_12 $$ StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime())) [CD]
Line_7 $$ SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATEFORMAT_YYYYMMDD) --> Line_12 $$ StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime())) [FD]
Line_9 $$ Calendar calendar = Calendar.getInstance() --> Line_12 $$ StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime())) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_13 $$ sbFolder.append(File.separator).append(calendar.get(Calendar.HOUR_OF_DAY)) [CD]
Line_12 $$ StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime())) --> Line_13 $$ sbFolder.append(File.separator).append(calendar.get(Calendar.HOUR_OF_DAY)) [FD]
Line_9 $$ Calendar calendar = Calendar.getInstance() --> Line_13 $$ sbFolder.append(File.separator).append(calendar.get(Calendar.HOUR_OF_DAY)) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_14 $$ File folder = new File(sbRepo.append(sbFolder).toString()) [CD]
Line_10 $$ StringBuffer sbRepo = new StringBuffer(repo) --> Line_14 $$ File folder = new File(sbRepo.append(sbFolder).toString()) [FD]
Line_12 $$ StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime())) --> Line_14 $$ File folder = new File(sbRepo.append(sbFolder).toString()) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_15 $$ if (!folder.exists()) [CD]
Line_14 $$ File folder = new File(sbRepo.append(sbFolder).toString()) --> Line_15 $$ if (!folder.exists()) [FD]
Line_15 $$ if (!folder.exists()) --> Line_16 $$ folder.mkdirs() [CD]
Line_14 $$ File folder = new File(sbRepo.append(sbFolder).toString()) --> Line_16 $$ folder.mkdirs() [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_18 $$ FileChannel fcSource = null, fcDest = null [CD]
Line_14 $$ File folder = new File(sbRepo.append(sbFolder).toString()) --> Line_20 $$ StringBuffer sbFile = new StringBuffer(folder.getAbsolutePath()) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_21 $$ StringBuffer fname = new StringBuffer(document.getId().toString()) [FD]
Line_21 $$ StringBuffer fname = new StringBuffer(document.getId().toString()) --> Line_22 $$ fname.append(".").append(document.getExt()) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_22 $$ fname.append(".").append(document.getExt()) [FD]
Line_21 $$ StringBuffer fname = new StringBuffer(document.getId().toString()) --> Line_23 $$ sbFile.append(File.separator).append(fname) [FD]
Line_20 $$ StringBuffer sbFile = new StringBuffer(folder.getAbsolutePath()) --> Line_23 $$ sbFile.append(File.separator).append(fname) [FD]
Line_18 $$ FileChannel fcSource = null, fcDest = null --> Line_24 $$ fcSource = new FileInputStream(file).getChannel() [FD]
Line_18 $$ FileChannel fcSource = null, fcDest = null --> Line_25 $$ fcDest = new FileOutputStream(sbFile.toString()).getChannel() [FD]
Line_20 $$ StringBuffer sbFile = new StringBuffer(folder.getAbsolutePath()) --> Line_25 $$ fcDest = new FileOutputStream(sbFile.toString()).getChannel() [FD]
Line_18 $$ FileChannel fcSource = null, fcDest = null --> Line_26 $$ fcDest.transferFrom(fcSource, 0, fcSource.size()) [FD]
Line_25 $$ fcDest = new FileOutputStream(sbFile.toString()).getChannel() --> Line_26 $$ fcDest.transferFrom(fcSource, 0, fcSource.size()) [FD]
Line_24 $$ fcSource = new FileInputStream(file).getChannel() --> Line_26 $$ fcDest.transferFrom(fcSource, 0, fcSource.size()) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_27 $$ document.setLocation(sbFolder.toString()) [FD]
Line_12 $$ StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime())) --> Line_27 $$ document.setLocation(sbFolder.toString()) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_28 $$ documentService.save(document) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_30 $$ log.error("saveFile file not found: " + document.getName(), notFoundEx) [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_32 $$ log.error("saveFile IOException: " + document.getName(), ioEx) [FD]
Line_18 $$ FileChannel fcSource = null, fcDest = null --> Line_35 $$ if (fcSource != null) [FD]
Line_24 $$ fcSource = new FileInputStream(file).getChannel() --> Line_35 $$ if (fcSource != null) [FD]
Line_35 $$ if (fcSource != null) --> Line_36 $$ fcSource.close() [CD]
Line_18 $$ FileChannel fcSource = null, fcDest = null --> Line_36 $$ fcSource.close() [FD]
Line_24 $$ fcSource = new FileInputStream(file).getChannel() --> Line_36 $$ fcSource.close() [FD]
Line_18 $$ FileChannel fcSource = null, fcDest = null --> Line_38 $$ if (fcDest != null) [FD]
Line_25 $$ fcDest = new FileOutputStream(sbFile.toString()).getChannel() --> Line_38 $$ if (fcDest != null) [FD]
Line_38 $$ if (fcDest != null) --> Line_39 $$ fcDest.close() [CD]
Line_18 $$ FileChannel fcSource = null, fcDest = null --> Line_39 $$ fcDest.close() [FD]
Line_25 $$ fcDest = new FileOutputStream(sbFile.toString()).getChannel() --> Line_39 $$ fcDest.close() [FD]
Line_2 $$ private Document saveFile(Document document, File file) throws Exception --> Line_45 $$ return document [CD]
