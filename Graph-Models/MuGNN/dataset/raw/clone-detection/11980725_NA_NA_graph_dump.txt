Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_3 $$ int remainingWorkUnits = 10 [CD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_4 $$ monitor.beginTask("New Modulo Project Creation", remainingWorkUnits) [CD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_4 $$ monitor.beginTask("New Modulo Project Creation", remainingWorkUnits) [FD]
Line_3 $$ int remainingWorkUnits = 10 --> Line_4 $$ monitor.beginTask("New Modulo Project Creation", remainingWorkUnits) [FD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_5 $$ IWorkspace ws = ResourcesPlugin.getWorkspace() [CD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_6 $$ newProject = fMainPage.getProjectHandle() [CD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_7 $$ IProjectDescription description = ws.newProjectDescription(newProject.getName()) [CD]
Line_5 $$ IWorkspace ws = ResourcesPlugin.getWorkspace() --> Line_7 $$ IProjectDescription description = ws.newProjectDescription(newProject.getName()) [FD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_8 $$ String[] natures = [CD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_9 $$ description.setNatureIds(natures) [CD]
Line_7 $$ IProjectDescription description = ws.newProjectDescription(newProject.getName()) --> Line_9 $$ description.setNatureIds(natures) [FD]
Line_8 $$ String[] natures = --> Line_9 $$ description.setNatureIds(natures) [FD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_10 $$ ICommand command = description.newCommand() [CD]
Line_7 $$ IProjectDescription description = ws.newProjectDescription(newProject.getName()) --> Line_10 $$ ICommand command = description.newCommand() [FD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_11 $$ command.setBuilderName(JavaCore.BUILDER_ID) [CD]
Line_10 $$ ICommand command = description.newCommand() --> Line_11 $$ command.setBuilderName(JavaCore.BUILDER_ID) [FD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_12 $$ ICommand[] commands = [CD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_13 $$ description.setBuildSpec(commands) [CD]
Line_7 $$ IProjectDescription description = ws.newProjectDescription(newProject.getName()) --> Line_13 $$ description.setBuildSpec(commands) [FD]
Line_12 $$ ICommand[] commands = --> Line_13 $$ description.setBuildSpec(commands) [FD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_14 $$ IJavaProject jproject = JavaCore.create(newProject) [CD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_15 $$ ModuloProject modProj = new ModuloProject() [CD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_16 $$ modProj.setJavaProject(jproject) [CD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_16 $$ modProj.setJavaProject(jproject) [FD]
Line_14 $$ IJavaProject jproject = JavaCore.create(newProject) --> Line_16 $$ modProj.setJavaProject(jproject) [FD]
Line_7 $$ IProjectDescription description = ws.newProjectDescription(newProject.getName()) --> Line_18 $$ newProject.create(description, new SubProgressMonitor(monitor, 1)) [FD]
Line_20 $$ IFolder srcFolder = newProject.getFolder("src") --> Line_21 $$ IFolder javaFolder = srcFolder.getFolder("java") [FD]
Line_22 $$ IFolder buildFolder = newProject.getFolder("build") --> Line_23 $$ IFolder classesFolder = buildFolder.getFolder("classes") [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_24 $$ modProj.createFolder(srcFolder) [FD]
Line_20 $$ IFolder srcFolder = newProject.getFolder("src") --> Line_24 $$ modProj.createFolder(srcFolder) [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_25 $$ modProj.createFolder(javaFolder) [FD]
Line_21 $$ IFolder javaFolder = srcFolder.getFolder("java") --> Line_25 $$ modProj.createFolder(javaFolder) [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_26 $$ modProj.createFolder(buildFolder) [FD]
Line_22 $$ IFolder buildFolder = newProject.getFolder("build") --> Line_26 $$ modProj.createFolder(buildFolder) [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_27 $$ modProj.createFolder(classesFolder) [FD]
Line_14 $$ IJavaProject jproject = JavaCore.create(newProject) --> Line_29 $$ jproject.setOutputLocation(buildPath, new SubProgressMonitor(monitor, 1)) [FD]
Line_14 $$ IJavaProject jproject = JavaCore.create(newProject) --> Line_31 $$ jproject.setRawClasspath(entries, new SubProgressMonitor(monitor, 1)) [FD]
Line_32 $$ ModuleDefinition definition = new ModuleDefinition() --> Line_33 $$ definition.setId(fModuloPage.getPackageName()) [FD]
Line_32 $$ ModuleDefinition definition = new ModuleDefinition() --> Line_34 $$ definition.setVersion(new VersionNumber(1, 0, 0)) [FD]
Line_32 $$ ModuleDefinition definition = new ModuleDefinition() --> Line_35 $$ definition.setMetaName(fModuloPage.getModuleName()) [FD]
Line_32 $$ ModuleDefinition definition = new ModuleDefinition() --> Line_36 $$ definition.setMetaDescription("The " + fModuloPage.getModuleName() + " Module.") [FD]
Line_32 $$ ModuleDefinition definition = new ModuleDefinition() --> Line_37 $$ definition.setModuleClassName(fModuloPage.getPackageName() + "." + fModuloPage.getModuleClassName()) [FD]
Line_32 $$ ModuleDefinition definition = new ModuleDefinition() --> Line_38 $$ definition.setConfigurationClassName(fModuloPage.getPackageName() + "." + fModuloPage.getConfigClassName()) [FD]
Line_32 $$ ModuleDefinition definition = new ModuleDefinition() --> Line_39 $$ definition.setStatisticsClassName(fModuloPage.getPackageName() + "." + fModuloPage.getStatClassName()) [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_40 $$ modProj.setDefinition(definition) [FD]
Line_32 $$ ModuleDefinition definition = new ModuleDefinition() --> Line_40 $$ modProj.setDefinition(definition) [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_41 $$ modProj.createPackage() [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_42 $$ modProj.createModuleXML() [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_43 $$ modProj.createMainClass() [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_44 $$ if (fModuloPage.isConfigSelectioned()) [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_45 $$ if (fModuloPage.isStatSelectioned()) [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_46 $$ modProj.createModuleProperties() [FD]
Line_15 $$ ModuloProject modProj = new ModuloProject() --> Line_47 $$ modProj.createMessagesProperties() [FD]
Line_48 $$ IFolder binFolder = newProject.getFolder("bin") --> Line_49 $$ binFolder.delete(true, new SubProgressMonitor(monitor, 1)) [FD]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException --> Line_53 $$ monitor.done() [FD]
