Line_2 $$ public void testFromFile() throws IOException --> Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp") [CD]
Line_2 $$ public void testFromFile() throws IOException --> Line_4 $$ temp.deleteOnExit() [CD]
Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp") --> Line_4 $$ temp.deleteOnExit() [FD]
Line_2 $$ public void testFromFile() throws IOException --> Line_5 $$ IOUtils.copy(this.getClass().getResourceAsStream("xor_float.net"), new FileOutputStream(temp)) [CD]
Line_2 $$ public void testFromFile() throws IOException --> Line_6 $$ Fann fann = new Fann(temp.getPath()) [CD]
Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp") --> Line_6 $$ Fann fann = new Fann(temp.getPath()) [FD]
Line_2 $$ public void testFromFile() throws IOException --> Line_7 $$ assertEquals(2, fann.getNumInputNeurons()) [CD]
Line_6 $$ Fann fann = new Fann(temp.getPath()) --> Line_7 $$ assertEquals(2, fann.getNumInputNeurons()) [FD]
Line_2 $$ public void testFromFile() throws IOException --> Line_8 $$ assertEquals(1, fann.getNumOutputNeurons()) [CD]
Line_6 $$ Fann fann = new Fann(temp.getPath()) --> Line_8 $$ assertEquals(1, fann.getNumOutputNeurons()) [FD]
Line_2 $$ public void testFromFile() throws IOException --> Line_9 $$ assertEquals(-1f, fann.run(new float[] [CD]
Line_6 $$ Fann fann = new Fann(temp.getPath()) --> Line_9 $$ assertEquals(-1f, fann.run(new float[] [FD]
Line_2 $$ public void testFromFile() throws IOException --> Line_10 $$ assertEquals(1f, fann.run(new float[] [CD]
Line_6 $$ Fann fann = new Fann(temp.getPath()) --> Line_10 $$ assertEquals(1f, fann.run(new float[] [FD]
Line_2 $$ public void testFromFile() throws IOException --> Line_11 $$ assertEquals(1f, fann.run(new float[] [CD]
Line_6 $$ Fann fann = new Fann(temp.getPath()) --> Line_11 $$ assertEquals(1f, fann.run(new float[] [FD]
Line_2 $$ public void testFromFile() throws IOException --> Line_12 $$ assertEquals(-1f, fann.run(new float[] [CD]
Line_6 $$ Fann fann = new Fann(temp.getPath()) --> Line_12 $$ assertEquals(-1f, fann.run(new float[] [FD]
Line_2 $$ public void testFromFile() throws IOException --> Line_13 $$ fann.close() [CD]
Line_6 $$ Fann fann = new Fann(temp.getPath()) --> Line_13 $$ fann.close() [FD]
