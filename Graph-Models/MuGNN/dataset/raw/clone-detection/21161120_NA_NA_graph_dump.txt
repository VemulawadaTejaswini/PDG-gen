Line_2 $$ public static void main(String[] args) --> Line_3 $$ String host [CD]
Line_2 $$ public static void main(String[] args) --> Line_4 $$ int port [CD]
Line_2 $$ public static void main(String[] args) --> Line_5 $$ char[] passphrase [CD]
Line_2 $$ public static void main(String[] args) --> Line_6 $$ System.out.println("InstallCert - Install CA certificate to Java Keystore") [CD]
Line_2 $$ public static void main(String[] args) --> Line_7 $$ System.out.println("=====================================================") [CD]
Line_2 $$ public static void main(String[] args) --> Line_8 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)) [CD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_11 $$ String[] c = args[0].split(":") [CD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_12 $$ host = c[0] [CD]
Line_3 $$ String host --> Line_12 $$ host = c[0] [FD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_13 $$ port = (c.length == 1) ? 443 : Integer.parseInt(c[1]) [CD]
Line_4 $$ int port --> Line_13 $$ port = (c.length == 1) ? 443 : Integer.parseInt(c[1]) [FD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_14 $$ String p = (args.length == 1) ? "changeit" : args[1] [CD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_15 $$ passphrase = p.toCharArray() [CD]
Line_5 $$ char[] passphrase --> Line_15 $$ passphrase = p.toCharArray() [FD]
Line_14 $$ String p = (args.length == 1) ? "changeit" : args[1] --> Line_15 $$ passphrase = p.toCharArray() [FD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_17 $$ String tmpStr [CD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_18 $$ do [CD]
Line_17 $$ String tmpStr --> Line_18 $$ do [FD]
Line_18 $$ do --> Line_19 $$ System.out.print("Enter hostname or IP address: ") [CD]
Line_18 $$ do --> Line_20 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) [CD]
Line_17 $$ String tmpStr --> Line_20 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) [FD]
Line_8 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)) --> Line_20 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) [FD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_22 $$ host = tmpStr [CD]
Line_3 $$ String host --> Line_22 $$ host = tmpStr [FD]
Line_12 $$ host = c[0] --> Line_22 $$ host = tmpStr [FD]
Line_20 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) --> Line_22 $$ host = tmpStr [FD]
Line_17 $$ String tmpStr --> Line_22 $$ host = tmpStr [FD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_23 $$ System.out.print("Enter port number [443]: ") [CD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_24 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) [CD]
Line_20 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) --> Line_24 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) [FD]
Line_17 $$ String tmpStr --> Line_24 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) [FD]
Line_8 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)) --> Line_24 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) [FD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_25 $$ port = tmpStr == null ? 443 : Integer.parseInt(tmpStr) [CD]
Line_4 $$ int port --> Line_25 $$ port = tmpStr == null ? 443 : Integer.parseInt(tmpStr) [FD]
Line_13 $$ port = (c.length == 1) ? 443 : Integer.parseInt(c[1]) --> Line_25 $$ port = tmpStr == null ? 443 : Integer.parseInt(tmpStr) [FD]
Line_20 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) --> Line_25 $$ port = tmpStr == null ? 443 : Integer.parseInt(tmpStr) [FD]
Line_17 $$ String tmpStr --> Line_25 $$ port = tmpStr == null ? 443 : Integer.parseInt(tmpStr) [FD]
Line_24 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) --> Line_25 $$ port = tmpStr == null ? 443 : Integer.parseInt(tmpStr) [FD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_26 $$ System.out.print("Enter keystore password [changeit]: ") [CD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_27 $$ tmpStr = reader.readLine() [CD]
Line_20 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) --> Line_27 $$ tmpStr = reader.readLine() [FD]
Line_17 $$ String tmpStr --> Line_27 $$ tmpStr = reader.readLine() [FD]
Line_24 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) --> Line_27 $$ tmpStr = reader.readLine() [FD]
Line_8 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)) --> Line_27 $$ tmpStr = reader.readLine() [FD]
Line_20 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) --> Line_28 $$ String p = "".equals(tmpStr) ? "changeit" : tmpStr [FD]
Line_17 $$ String tmpStr --> Line_28 $$ String p = "".equals(tmpStr) ? "changeit" : tmpStr [FD]
Line_24 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) --> Line_28 $$ String p = "".equals(tmpStr) ? "changeit" : tmpStr [FD]
Line_27 $$ tmpStr = reader.readLine() --> Line_28 $$ String p = "".equals(tmpStr) ? "changeit" : tmpStr [FD]
Line_10 $$ if ((args.length == 1) || (args.length == 2)) --> Line_29 $$ passphrase = p.toCharArray() [CD]
Line_5 $$ char[] passphrase --> Line_29 $$ passphrase = p.toCharArray() [FD]
Line_15 $$ passphrase = p.toCharArray() --> Line_29 $$ passphrase = p.toCharArray() [FD]
Line_14 $$ String p = (args.length == 1) ? "changeit" : args[1] --> Line_29 $$ passphrase = p.toCharArray() [FD]
Line_36 $$ KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()) --> Line_37 $$ ks.load(in, passphrase) [FD]
Line_35 $$ InputStream in = new FileInputStream(file) --> Line_37 $$ ks.load(in, passphrase) [FD]
Line_5 $$ char[] passphrase --> Line_37 $$ ks.load(in, passphrase) [FD]
Line_15 $$ passphrase = p.toCharArray() --> Line_37 $$ ks.load(in, passphrase) [FD]
Line_29 $$ passphrase = p.toCharArray() --> Line_37 $$ ks.load(in, passphrase) [FD]
Line_35 $$ InputStream in = new FileInputStream(file) --> Line_38 $$ in.close() [FD]
Line_40 $$ TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()) --> Line_41 $$ tmf.init(ks) [FD]
Line_36 $$ KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()) --> Line_41 $$ tmf.init(ks) [FD]
Line_40 $$ TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()) --> Line_42 $$ X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0] [FD]
Line_39 $$ SSLContext context = SSLContext.getInstance("TLS") --> Line_44 $$ context.init(null, new TrustManager[] [FD]
Line_39 $$ SSLContext context = SSLContext.getInstance("TLS") --> Line_45 $$ SSLSocketFactory factory = context.getSocketFactory() [FD]
Line_45 $$ SSLSocketFactory factory = context.getSocketFactory() --> Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) [FD]
Line_3 $$ String host --> Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) [FD]
Line_12 $$ host = c[0] --> Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) [FD]
Line_22 $$ host = tmpStr --> Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) [FD]
Line_4 $$ int port --> Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) [FD]
Line_13 $$ port = (c.length == 1) ? 443 : Integer.parseInt(c[1]) --> Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) [FD]
Line_25 $$ port = tmpStr == null ? 443 : Integer.parseInt(tmpStr) --> Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) [FD]
Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) --> Line_48 $$ socket.setSoTimeout(10000) [FD]
Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) --> Line_51 $$ socket.startHandshake() [FD]
Line_47 $$ SSLSocket socket = (SSLSocket) factory.createSocket(host, port) --> Line_52 $$ socket.close() [FD]
Line_59 $$ X509Certificate[] chain = tm.chain --> Line_60 $$ if (chain == null) [FD]
Line_60 $$ if (chain == null) --> Line_61 $$ System.out.println("Could not obtain server certificate chain") [CD]
Line_60 $$ if (chain == null) --> Line_62 $$ return [CD]
Line_69 $$ for (int i = 0; i < chain.length; i++) --> Line_70 $$ X509Certificate cert = chain[i] [CD]
Line_69 $$ for (int i = 0; i < chain.length; i++) --> Line_71 $$ System.out.println(" " + (i + 1) + " Subject " + cert.getSubjectDN()) [CD]
Line_70 $$ X509Certificate cert = chain[i] --> Line_71 $$ System.out.println(" " + (i + 1) + " Subject " + cert.getSubjectDN()) [FD]
Line_69 $$ for (int i = 0; i < chain.length; i++) --> Line_72 $$ System.out.println("   Issuer  " + cert.getIssuerDN()) [CD]
Line_70 $$ X509Certificate cert = chain[i] --> Line_72 $$ System.out.println("   Issuer  " + cert.getIssuerDN()) [FD]
Line_69 $$ for (int i = 0; i < chain.length; i++) --> Line_73 $$ sha1.update(cert.getEncoded()) [CD]
Line_67 $$ MessageDigest sha1 = MessageDigest.getInstance("SHA1") --> Line_73 $$ sha1.update(cert.getEncoded()) [FD]
Line_70 $$ X509Certificate cert = chain[i] --> Line_73 $$ sha1.update(cert.getEncoded()) [FD]
Line_69 $$ for (int i = 0; i < chain.length; i++) --> Line_74 $$ System.out.println("   sha1    " + toHexString(sha1.digest())) [CD]
Line_67 $$ MessageDigest sha1 = MessageDigest.getInstance("SHA1") --> Line_74 $$ System.out.println("   sha1    " + toHexString(sha1.digest())) [FD]
Line_69 $$ for (int i = 0; i < chain.length; i++) --> Line_75 $$ md5.update(cert.getEncoded()) [CD]
Line_68 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_75 $$ md5.update(cert.getEncoded()) [FD]
Line_70 $$ X509Certificate cert = chain[i] --> Line_75 $$ md5.update(cert.getEncoded()) [FD]
Line_69 $$ for (int i = 0; i < chain.length; i++) --> Line_76 $$ System.out.println("   md5     " + toHexString(md5.digest())) [CD]
Line_68 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_76 $$ System.out.println("   md5     " + toHexString(md5.digest())) [FD]
Line_69 $$ for (int i = 0; i < chain.length; i++) --> Line_77 $$ System.out.println() [CD]
Line_8 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)) --> Line_80 $$ String line = reader.readLine().trim() [FD]
Line_81 $$ int k = -1 --> Line_83 $$ k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1 [FD]
Line_80 $$ String line = reader.readLine().trim() --> Line_83 $$ k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1 [FD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_87 $$ System.out.println("KeyStore not changed") [CD]
Line_91 $$ final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss") --> Line_92 $$ final File backupFile = new File(dir, CACERTS_KEYSTORE + "." + dateFormat.format(new java.util.Date())) [FD]
Line_93 $$ final FileInputStream fis = new FileInputStream(file) --> Line_95 $$ IOUtils.copy(fis, fos) [FD]
Line_94 $$ final FileOutputStream fos = new FileOutputStream(backupFile) --> Line_95 $$ IOUtils.copy(fis, fos) [FD]
Line_93 $$ final FileInputStream fis = new FileInputStream(file) --> Line_96 $$ fis.close() [FD]
Line_94 $$ final FileOutputStream fos = new FileOutputStream(backupFile) --> Line_97 $$ fos.close() [FD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_101 $$ System.out.println("Installing certificate...") [CD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_102 $$ X509Certificate cert = chain[k] [CD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_103 $$ String alias = host + "-" + (k + 1) [CD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_104 $$ ks.setCertificateEntry(alias, cert) [CD]
Line_36 $$ KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()) --> Line_104 $$ ks.setCertificateEntry(alias, cert) [FD]
Line_103 $$ String alias = host + "-" + (k + 1) --> Line_104 $$ ks.setCertificateEntry(alias, cert) [FD]
Line_70 $$ X509Certificate cert = chain[i] --> Line_104 $$ ks.setCertificateEntry(alias, cert) [FD]
Line_102 $$ X509Certificate cert = chain[k] --> Line_104 $$ ks.setCertificateEntry(alias, cert) [FD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_105 $$ OutputStream out = new FileOutputStream(file) [CD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_106 $$ ks.store(out, passphrase) [CD]
Line_36 $$ KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()) --> Line_106 $$ ks.store(out, passphrase) [FD]
Line_105 $$ OutputStream out = new FileOutputStream(file) --> Line_106 $$ ks.store(out, passphrase) [FD]
Line_5 $$ char[] passphrase --> Line_106 $$ ks.store(out, passphrase) [FD]
Line_15 $$ passphrase = p.toCharArray() --> Line_106 $$ ks.store(out, passphrase) [FD]
Line_29 $$ passphrase = p.toCharArray() --> Line_106 $$ ks.store(out, passphrase) [FD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_107 $$ out.close() [CD]
Line_105 $$ OutputStream out = new FileOutputStream(file) --> Line_107 $$ out.close() [FD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_108 $$ System.out.println() [CD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_109 $$ System.out.println(cert) [CD]
Line_70 $$ X509Certificate cert = chain[i] --> Line_109 $$ System.out.println(cert) [FD]
Line_102 $$ X509Certificate cert = chain[k] --> Line_109 $$ System.out.println(cert) [FD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_110 $$ System.out.println() [CD]
Line_86 $$ if (k < 0 || k >= chain.length) --> Line_111 $$ System.out.println("Added certificate to keystore '" + file + "' using alias '" + alias + "'") [CD]
Line_2 $$ public static void main(String[] args) --> Line_120 $$ System.out.println("Press Enter to finish...") [CD]
Line_8 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)) --> Line_122 $$ reader.readLine() [FD]
Line_20 $$ tmpStr = StringUtils.defaultIfEmpty(reader.readLine(), null) --> Line_18 $$ do [FD]
