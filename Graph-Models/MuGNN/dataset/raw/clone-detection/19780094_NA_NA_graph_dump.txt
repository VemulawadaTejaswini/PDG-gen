Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_5 $$ String kk = r.context().task().key() [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_6 $$ if (r.in_1_consumed() && r.context().in_1_link() != null) [FD]
Line_6 $$ if (r.in_1_consumed() && r.context().in_1_link() != null) --> Line_7 $$ sqlImpl().updateFunctions().updateInLink(kk, false, null, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_7 $$ sqlImpl().updateFunctions().updateInLink(kk, false, null, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_7 $$ sqlImpl().updateFunctions().updateInLink(kk, false, null, con) [FD]
Line_6 $$ if (r.in_1_consumed() && r.context().in_1_link() != null) --> Line_8 $$ logAction = logAction | LogEntry.IN_1 [CD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_10 $$ if (r.in_2_consumed() && r.context().in_2_link() != null) [FD]
Line_10 $$ if (r.in_2_consumed() && r.context().in_2_link() != null) --> Line_11 $$ sqlImpl().updateFunctions().updateInLink(kk, true, null, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_11 $$ sqlImpl().updateFunctions().updateInLink(kk, true, null, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_11 $$ sqlImpl().updateFunctions().updateInLink(kk, true, null, con) [FD]
Line_10 $$ if (r.in_2_consumed() && r.context().in_2_link() != null) --> Line_12 $$ logAction = logAction | LogEntry.IN_2 [CD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_14 $$ if (r.out_1_result() != null && r.context().out_1_link() != null) [FD]
Line_14 $$ if (r.out_1_result() != null && r.context().out_1_link() != null) --> Line_15 $$ sqlImpl().updateFunctions().updateOutLink(kk, false, r.out_1_result(), con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_15 $$ sqlImpl().updateFunctions().updateOutLink(kk, false, r.out_1_result(), con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_15 $$ sqlImpl().updateFunctions().updateOutLink(kk, false, r.out_1_result(), con) [FD]
Line_14 $$ if (r.out_1_result() != null && r.context().out_1_link() != null) --> Line_16 $$ logAction = logAction | LogEntry.OUT_1 [CD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_18 $$ if (r.out_2_result() != null && r.context().out_2_link() != null) [FD]
Line_18 $$ if (r.out_2_result() != null && r.context().out_2_link() != null) --> Line_19 $$ sqlImpl().updateFunctions().updateOutLink(kk, true, r.out_2_result(), con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_19 $$ sqlImpl().updateFunctions().updateOutLink(kk, true, r.out_2_result(), con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_19 $$ sqlImpl().updateFunctions().updateOutLink(kk, true, r.out_2_result(), con) [FD]
Line_18 $$ if (r.out_2_result() != null && r.context().out_2_link() != null) --> Line_20 $$ logAction = logAction | LogEntry.OUT_2 [CD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_22 $$ sqlImpl().loggingFunctions().log(r.context().task().key(), logAction, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_23 $$ boolean isParent = r.context().task().isParent() [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_24 $$ if (r instanceof Workflow) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_25 $$ Workflow w = (Workflow) r [CD]
Line_24 $$ if (r instanceof Workflow) --> Line_26 $$ Task[] tt = w.tasks() [CD]
Line_25 $$ Workflow w = (Workflow) r --> Line_26 $$ Task[] tt = w.tasks() [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_27 $$ Link[] ll = w.links() [CD]
Line_25 $$ Workflow w = (Workflow) r --> Line_27 $$ Link[] ll = w.links() [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_28 $$ Hashtable tkeyMap = new Hashtable() [CD]
Line_24 $$ if (r instanceof Workflow) --> Line_29 $$ for (int i = 0; i < tt.length; i++) [CD]
Line_29 $$ for (int i = 0; i < tt.length; i++) --> Line_30 $$ String key = sqlImpl().creationFunctions().newTask(tt[i], r.context().task(), con) [CD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_30 $$ String key = sqlImpl().creationFunctions().newTask(tt[i], r.context().task(), con) [FD]
Line_29 $$ for (int i = 0; i < tt.length; i++) --> Line_31 $$ tkeyMap.put(tt[i], key) [CD]
Line_28 $$ Hashtable tkeyMap = new Hashtable() --> Line_31 $$ tkeyMap.put(tt[i], key) [FD]
Line_30 $$ String key = sqlImpl().creationFunctions().newTask(tt[i], r.context().task(), con) --> Line_31 $$ tkeyMap.put(tt[i], key) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_33 $$ for (int j = 0; j < ll.length; j++) [CD]
Line_33 $$ for (int j = 0; j < ll.length; j++) --> Line_34 $$ sqlImpl().creationFunctions().newLink(ll[j], tkeyMap, con) [CD]
Line_28 $$ Hashtable tkeyMap = new Hashtable() --> Line_34 $$ sqlImpl().creationFunctions().newLink(ll[j], tkeyMap, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_34 $$ sqlImpl().creationFunctions().newLink(ll[j], tkeyMap, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_36 $$ String in_link_1 = sqlImpl().queryFunctions().readInTask(kk, false, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_36 $$ String in_link_1 = sqlImpl().queryFunctions().readInTask(kk, false, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_36 $$ String in_link_1 = sqlImpl().queryFunctions().readInTask(kk, false, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_37 $$ String in_link_2 = sqlImpl().queryFunctions().readInTask(kk, true, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_37 $$ String in_link_2 = sqlImpl().queryFunctions().readInTask(kk, true, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_37 $$ String in_link_2 = sqlImpl().queryFunctions().readInTask(kk, true, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_38 $$ String out_link_1 = sqlImpl().queryFunctions().readOutTask(kk, false, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_38 $$ String out_link_1 = sqlImpl().queryFunctions().readOutTask(kk, false, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_38 $$ String out_link_1 = sqlImpl().queryFunctions().readOutTask(kk, false, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_39 $$ String out_link_2 = sqlImpl().queryFunctions().readOutTask(kk, true, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_39 $$ String out_link_2 = sqlImpl().queryFunctions().readOutTask(kk, true, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_39 $$ String out_link_2 = sqlImpl().queryFunctions().readOutTask(kk, true, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_40 $$ sqlImpl().updateFunctions().rewireInLink(kk, false, w.in_1_binding(), tkeyMap, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_40 $$ sqlImpl().updateFunctions().rewireInLink(kk, false, w.in_1_binding(), tkeyMap, con) [FD]
Line_28 $$ Hashtable tkeyMap = new Hashtable() --> Line_40 $$ sqlImpl().updateFunctions().rewireInLink(kk, false, w.in_1_binding(), tkeyMap, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_40 $$ sqlImpl().updateFunctions().rewireInLink(kk, false, w.in_1_binding(), tkeyMap, con) [FD]
Line_25 $$ Workflow w = (Workflow) r --> Line_40 $$ sqlImpl().updateFunctions().rewireInLink(kk, false, w.in_1_binding(), tkeyMap, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_41 $$ sqlImpl().updateFunctions().rewireInLink(kk, true, w.in_2_binding(), tkeyMap, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_41 $$ sqlImpl().updateFunctions().rewireInLink(kk, true, w.in_2_binding(), tkeyMap, con) [FD]
Line_28 $$ Hashtable tkeyMap = new Hashtable() --> Line_41 $$ sqlImpl().updateFunctions().rewireInLink(kk, true, w.in_2_binding(), tkeyMap, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_41 $$ sqlImpl().updateFunctions().rewireInLink(kk, true, w.in_2_binding(), tkeyMap, con) [FD]
Line_25 $$ Workflow w = (Workflow) r --> Line_41 $$ sqlImpl().updateFunctions().rewireInLink(kk, true, w.in_2_binding(), tkeyMap, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_42 $$ sqlImpl().updateFunctions().rewireOutLink(kk, false, w.out_1_binding(), tkeyMap, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_42 $$ sqlImpl().updateFunctions().rewireOutLink(kk, false, w.out_1_binding(), tkeyMap, con) [FD]
Line_28 $$ Hashtable tkeyMap = new Hashtable() --> Line_42 $$ sqlImpl().updateFunctions().rewireOutLink(kk, false, w.out_1_binding(), tkeyMap, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_42 $$ sqlImpl().updateFunctions().rewireOutLink(kk, false, w.out_1_binding(), tkeyMap, con) [FD]
Line_25 $$ Workflow w = (Workflow) r --> Line_42 $$ sqlImpl().updateFunctions().rewireOutLink(kk, false, w.out_1_binding(), tkeyMap, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_43 $$ sqlImpl().updateFunctions().rewireOutLink(kk, true, w.out_2_binding(), tkeyMap, con) [CD]
Line_5 $$ String kk = r.context().task().key() --> Line_43 $$ sqlImpl().updateFunctions().rewireOutLink(kk, true, w.out_2_binding(), tkeyMap, con) [FD]
Line_28 $$ Hashtable tkeyMap = new Hashtable() --> Line_43 $$ sqlImpl().updateFunctions().rewireOutLink(kk, true, w.out_2_binding(), tkeyMap, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_43 $$ sqlImpl().updateFunctions().rewireOutLink(kk, true, w.out_2_binding(), tkeyMap, con) [FD]
Line_25 $$ Workflow w = (Workflow) r --> Line_43 $$ sqlImpl().updateFunctions().rewireOutLink(kk, true, w.out_2_binding(), tkeyMap, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_44 $$ for (int k = 0; k < tt.length; k++) [CD]
Line_44 $$ for (int k = 0; k < tt.length; k++) --> Line_45 $$ String kkey = (String) tkeyMap.get(tt[k]) [CD]
Line_28 $$ Hashtable tkeyMap = new Hashtable() --> Line_45 $$ String kkey = (String) tkeyMap.get(tt[k]) [FD]
Line_44 $$ for (int k = 0; k < tt.length; k++) --> Line_46 $$ sqlImpl().updateFunctions().checkAndUpdateDone(kkey, con) [CD]
Line_45 $$ String kkey = (String) tkeyMap.get(tt[k]) --> Line_46 $$ sqlImpl().updateFunctions().checkAndUpdateDone(kkey, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_46 $$ sqlImpl().updateFunctions().checkAndUpdateDone(kkey, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_48 $$ sqlImpl().updateFunctions().checkAndUpdateDone(in_link_1, con) [CD]
Line_36 $$ String in_link_1 = sqlImpl().queryFunctions().readInTask(kk, false, con) --> Line_48 $$ sqlImpl().updateFunctions().checkAndUpdateDone(in_link_1, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_48 $$ sqlImpl().updateFunctions().checkAndUpdateDone(in_link_1, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_49 $$ sqlImpl().updateFunctions().checkAndUpdateDone(in_link_2, con) [CD]
Line_37 $$ String in_link_2 = sqlImpl().queryFunctions().readInTask(kk, true, con) --> Line_49 $$ sqlImpl().updateFunctions().checkAndUpdateDone(in_link_2, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_49 $$ sqlImpl().updateFunctions().checkAndUpdateDone(in_link_2, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_50 $$ sqlImpl().updateFunctions().checkAndUpdateDone(out_link_1, con) [CD]
Line_38 $$ String out_link_1 = sqlImpl().queryFunctions().readOutTask(kk, false, con) --> Line_50 $$ sqlImpl().updateFunctions().checkAndUpdateDone(out_link_1, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_50 $$ sqlImpl().updateFunctions().checkAndUpdateDone(out_link_1, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_51 $$ sqlImpl().updateFunctions().checkAndUpdateDone(out_link_2, con) [CD]
Line_39 $$ String out_link_2 = sqlImpl().queryFunctions().readOutTask(kk, true, con) --> Line_51 $$ sqlImpl().updateFunctions().checkAndUpdateDone(out_link_2, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_51 $$ sqlImpl().updateFunctions().checkAndUpdateDone(out_link_2, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_52 $$ for (int k = 0; k < tt.length; k++) [CD]
Line_44 $$ for (int k = 0; k < tt.length; k++) --> Line_52 $$ for (int k = 0; k < tt.length; k++) [FD]
Line_52 $$ for (int k = 0; k < tt.length; k++) --> Line_53 $$ String kkey = (String) tkeyMap.get(tt[k]) [CD]
Line_28 $$ Hashtable tkeyMap = new Hashtable() --> Line_53 $$ String kkey = (String) tkeyMap.get(tt[k]) [FD]
Line_52 $$ for (int k = 0; k < tt.length; k++) --> Line_54 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(kkey, con) [CD]
Line_53 $$ String kkey = (String) tkeyMap.get(tt[k]) --> Line_54 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(kkey, con) [FD]
Line_45 $$ String kkey = (String) tkeyMap.get(tt[k]) --> Line_54 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(kkey, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_54 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(kkey, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_56 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(in_link_1, con) [CD]
Line_36 $$ String in_link_1 = sqlImpl().queryFunctions().readInTask(kk, false, con) --> Line_56 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(in_link_1, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_56 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(in_link_1, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_57 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(in_link_2, con) [CD]
Line_37 $$ String in_link_2 = sqlImpl().queryFunctions().readInTask(kk, true, con) --> Line_57 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(in_link_2, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_57 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(in_link_2, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_58 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(out_link_1, con) [CD]
Line_38 $$ String out_link_1 = sqlImpl().queryFunctions().readOutTask(kk, false, con) --> Line_58 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(out_link_1, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_58 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(out_link_1, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_59 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(out_link_2, con) [CD]
Line_39 $$ String out_link_2 = sqlImpl().queryFunctions().readOutTask(kk, true, con) --> Line_59 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(out_link_2, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_59 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(out_link_2, con) [FD]
Line_24 $$ if (r instanceof Workflow) --> Line_60 $$ isParent = true [CD]
Line_23 $$ boolean isParent = r.context().task().isParent() --> Line_60 $$ isParent = true [FD]
Line_5 $$ String kk = r.context().task().key() --> Line_62 $$ sqlImpl().updateFunctions().checkAndUpdateDone(kk, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_62 $$ sqlImpl().updateFunctions().checkAndUpdateDone(kk, con) [FD]
Line_5 $$ String kk = r.context().task().key() --> Line_63 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(kk, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_63 $$ sqlImpl().updateFunctions().checkAndUpdateTargetExecutable(kk, con) [FD]
Line_64 $$ PreparedStatement s3 = null --> Line_65 $$ s3 = con.prepareStatementFromCache(sqlImpl().sqlStatements().updateTaskModificationStatement()) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_65 $$ s3 = con.prepareStatementFromCache(sqlImpl().sqlStatements().updateTaskModificationStatement()) [FD]
Line_64 $$ PreparedStatement s3 = null --> Line_67 $$ s3.setLong(1, dd.getTime()) [FD]
Line_65 $$ s3 = con.prepareStatementFromCache(sqlImpl().sqlStatements().updateTaskModificationStatement()) --> Line_67 $$ s3.setLong(1, dd.getTime()) [FD]
Line_66 $$ java.util.Date dd = new java.util.Date() --> Line_67 $$ s3.setLong(1, dd.getTime()) [FD]
Line_64 $$ PreparedStatement s3 = null --> Line_68 $$ s3.setBoolean(2, isParent) [FD]
Line_65 $$ s3 = con.prepareStatementFromCache(sqlImpl().sqlStatements().updateTaskModificationStatement()) --> Line_68 $$ s3.setBoolean(2, isParent) [FD]
Line_23 $$ boolean isParent = r.context().task().isParent() --> Line_68 $$ s3.setBoolean(2, isParent) [FD]
Line_60 $$ isParent = true --> Line_68 $$ s3.setBoolean(2, isParent) [FD]
Line_64 $$ PreparedStatement s3 = null --> Line_69 $$ s3.setString(3, r.context().task().key()) [FD]
Line_65 $$ s3 = con.prepareStatementFromCache(sqlImpl().sqlStatements().updateTaskModificationStatement()) --> Line_69 $$ s3.setString(3, r.context().task().key()) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_69 $$ s3.setString(3, r.context().task().key()) [FD]
Line_64 $$ PreparedStatement s3 = null --> Line_70 $$ s3.executeUpdate() [FD]
Line_65 $$ s3 = con.prepareStatementFromCache(sqlImpl().sqlStatements().updateTaskModificationStatement()) --> Line_70 $$ s3.executeUpdate() [FD]
Line_5 $$ String kk = r.context().task().key() --> Line_71 $$ sqlImpl().loggingFunctions().log(kk, LogEntry.ENDED, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_71 $$ sqlImpl().loggingFunctions().log(kk, LogEntry.ENDED, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_72 $$ con.commit() [FD]
Line_5 $$ String kk = r.context().task().key() --> Line_73 $$ return sqlImpl().queryFunctions().readPTask(kk, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_73 $$ return sqlImpl().queryFunctions().readPTask(kk, con) [FD]
Line_2 $$ protected PTask commit_result(Result r, SyrupConnection con) throws Exception --> Line_75 $$ con.rollback() [FD]
