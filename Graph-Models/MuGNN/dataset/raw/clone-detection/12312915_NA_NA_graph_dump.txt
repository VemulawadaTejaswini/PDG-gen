Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_3 $$ ClassWriter writer = new ClassWriter() [CD]
Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_4 $$ writer.readClass(new BufferedInputStream(new FileInputStream(args[0]))) [CD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_4 $$ writer.readClass(new BufferedInputStream(new FileInputStream(args[0]))) [FD]
Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_5 $$ int constantIndex = writer.getStringConstantIndex("Entering ") [CD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_5 $$ int constantIndex = writer.getStringConstantIndex("Entering ") [FD]
Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_6 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;") [CD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_6 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;") [FD]
Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_7 $$ int printlnRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V") [CD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_7 $$ int printlnRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V") [FD]
Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_8 $$ int printRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "print", "(Ljava/lang/String;)V") [CD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_8 $$ int printRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "print", "(Ljava/lang/String;)V") [FD]
Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) [CD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_10 $$ MethodInfo method = (MethodInfo) i.next() [CD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_10 $$ MethodInfo method = (MethodInfo) i.next() [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_11 $$ if (method.getName().equals("readConstant")) [CD]
Line_10 $$ MethodInfo method = (MethodInfo) i.next() --> Line_11 $$ if (method.getName().equals("readConstant")) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_12 $$ CodeAttribute attribute = method.getCodeAttribute() [CD]
Line_10 $$ MethodInfo method = (MethodInfo) i.next() --> Line_12 $$ CodeAttribute attribute = method.getCodeAttribute() [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_13 $$ ArrayList instructions = new ArrayList(10) [CD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_14 $$ byte[] operands [CD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_15 $$ operands = new byte[2] [CD]
Line_14 $$ byte[] operands --> Line_15 $$ operands = new byte[2] [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_16 $$ NetByte.intToPair(fieldRefIndex, operands, 0) [CD]
Line_6 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;") --> Line_16 $$ NetByte.intToPair(fieldRefIndex, operands, 0) [FD]
Line_14 $$ byte[] operands --> Line_16 $$ NetByte.intToPair(fieldRefIndex, operands, 0) [FD]
Line_15 $$ operands = new byte[2] --> Line_16 $$ NetByte.intToPair(fieldRefIndex, operands, 0) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_17 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("getstatic"), 0, operands, false)) [CD]
Line_13 $$ ArrayList instructions = new ArrayList(10) --> Line_17 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("getstatic"), 0, operands, false)) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_18 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("dup"), 0, null, false)) [CD]
Line_13 $$ ArrayList instructions = new ArrayList(10) --> Line_18 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("dup"), 0, null, false)) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_19 $$ instructions.add(Instruction.appropriateLdc(constantIndex, false)) [CD]
Line_13 $$ ArrayList instructions = new ArrayList(10) --> Line_19 $$ instructions.add(Instruction.appropriateLdc(constantIndex, false)) [FD]
Line_5 $$ int constantIndex = writer.getStringConstantIndex("Entering ") --> Line_19 $$ instructions.add(Instruction.appropriateLdc(constantIndex, false)) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_20 $$ operands = new byte[2] [CD]
Line_14 $$ byte[] operands --> Line_20 $$ operands = new byte[2] [FD]
Line_15 $$ operands = new byte[2] --> Line_20 $$ operands = new byte[2] [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_21 $$ NetByte.intToPair(printRefIndex, operands, 0) [CD]
Line_8 $$ int printRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "print", "(Ljava/lang/String;)V") --> Line_21 $$ NetByte.intToPair(printRefIndex, operands, 0) [FD]
Line_14 $$ byte[] operands --> Line_21 $$ NetByte.intToPair(printRefIndex, operands, 0) [FD]
Line_15 $$ operands = new byte[2] --> Line_21 $$ NetByte.intToPair(printRefIndex, operands, 0) [FD]
Line_20 $$ operands = new byte[2] --> Line_21 $$ NetByte.intToPair(printRefIndex, operands, 0) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_22 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false)) [CD]
Line_13 $$ ArrayList instructions = new ArrayList(10) --> Line_22 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false)) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_23 $$ instructions.add(Instruction.appropriateLdc(writer.getStringConstantIndex(method.getName()), false)) [CD]
Line_13 $$ ArrayList instructions = new ArrayList(10) --> Line_23 $$ instructions.add(Instruction.appropriateLdc(writer.getStringConstantIndex(method.getName()), false)) [FD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_23 $$ instructions.add(Instruction.appropriateLdc(writer.getStringConstantIndex(method.getName()), false)) [FD]
Line_10 $$ MethodInfo method = (MethodInfo) i.next() --> Line_23 $$ instructions.add(Instruction.appropriateLdc(writer.getStringConstantIndex(method.getName()), false)) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_24 $$ operands = new byte[2] [CD]
Line_14 $$ byte[] operands --> Line_24 $$ operands = new byte[2] [FD]
Line_15 $$ operands = new byte[2] --> Line_24 $$ operands = new byte[2] [FD]
Line_20 $$ operands = new byte[2] --> Line_24 $$ operands = new byte[2] [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_25 $$ NetByte.intToPair(printlnRefIndex, operands, 0) [CD]
Line_7 $$ int printlnRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V") --> Line_25 $$ NetByte.intToPair(printlnRefIndex, operands, 0) [FD]
Line_14 $$ byte[] operands --> Line_25 $$ NetByte.intToPair(printlnRefIndex, operands, 0) [FD]
Line_15 $$ operands = new byte[2] --> Line_25 $$ NetByte.intToPair(printlnRefIndex, operands, 0) [FD]
Line_20 $$ operands = new byte[2] --> Line_25 $$ NetByte.intToPair(printlnRefIndex, operands, 0) [FD]
Line_24 $$ operands = new byte[2] --> Line_25 $$ NetByte.intToPair(printlnRefIndex, operands, 0) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_26 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false)) [CD]
Line_13 $$ ArrayList instructions = new ArrayList(10) --> Line_26 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false)) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_27 $$ attribute.insertInstructions(0, 0, instructions) [CD]
Line_12 $$ CodeAttribute attribute = method.getCodeAttribute() --> Line_27 $$ attribute.insertInstructions(0, 0, instructions) [FD]
Line_13 $$ ArrayList instructions = new ArrayList(10) --> Line_27 $$ attribute.insertInstructions(0, 0, instructions) [FD]
Line_9 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) --> Line_28 $$ attribute.codeCheck() [CD]
Line_12 $$ CodeAttribute attribute = method.getCodeAttribute() --> Line_28 $$ attribute.codeCheck() [FD]
Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_30 $$ BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1])) [CD]
Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_31 $$ writer.writeClass(outStream) [CD]
Line_3 $$ ClassWriter writer = new ClassWriter() --> Line_31 $$ writer.writeClass(outStream) [FD]
Line_30 $$ BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1])) --> Line_31 $$ writer.writeClass(outStream) [FD]
Line_2 $$ public static void entering(String[] args) throws IOException, CodeCheckException --> Line_32 $$ outStream.close() [CD]
Line_30 $$ BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1])) --> Line_32 $$ outStream.close() [FD]
Line_20 $$ operands = new byte[2] --> Line_16 $$ NetByte.intToPair(fieldRefIndex, operands, 0) [FD]
Line_24 $$ operands = new byte[2] --> Line_16 $$ NetByte.intToPair(fieldRefIndex, operands, 0) [FD]
Line_24 $$ operands = new byte[2] --> Line_21 $$ NetByte.intToPair(printRefIndex, operands, 0) [FD]
