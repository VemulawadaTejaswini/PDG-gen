Line_2 $$ public String getPolicy(String messageBufferName) throws AppFabricException --> Line_3 $$ String responseString = null [CD]
Line_2 $$ public String getPolicy(String messageBufferName) throws AppFabricException --> Line_4 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType()) [CD]
Line_2 $$ public String getPolicy(String messageBufferName) throws AppFabricException --> Line_5 $$ String requestUri = msgBufferUtilObj.getRequestUri() [CD]
Line_4 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType()) --> Line_5 $$ String requestUri = msgBufferUtilObj.getRequestUri() [FD]
Line_2 $$ public String getPolicy(String messageBufferName) throws AppFabricException --> Line_6 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName) [CD]
Line_2 $$ public String getPolicy(String messageBufferName) throws AppFabricException --> Line_6 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName) [FD]
Line_4 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType()) --> Line_6 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName) [FD]
Line_2 $$ public String getPolicy(String messageBufferName) throws AppFabricException --> Line_7 $$ String authorizationToken = "" [CD]
Line_7 $$ String authorizationToken = "" --> Line_10 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri) [FD]
Line_9 $$ ACSTokenProvider tp = new ACSTokenProvider(httpWebProxyServer_, httpWebProxyPort_, this.credentials) --> Line_10 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri) [FD]
Line_5 $$ String requestUri = msgBufferUtilObj.getRequestUri() --> Line_10 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri) [FD]
Line_6 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName) --> Line_10 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri) [FD]
Line_6 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName) --> Line_15 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https") [FD]
Line_17 $$ HttpURLConnection connection --> Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) [FD]
Line_16 $$ URL urlConn = new URL(messageBufferUri) --> Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) [FD]
Line_17 $$ HttpURLConnection connection --> Line_20 $$ connection.setRequestMethod("GET") [FD]
Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) --> Line_20 $$ connection.setRequestMethod("GET") [FD]
Line_17 $$ HttpURLConnection connection --> Line_21 $$ connection.setRequestProperty("Content-type", MessageBufferConstants.getCONTENT_TYPE_PROPERTY_FOR_ATOM_XML()) [FD]
Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) --> Line_21 $$ connection.setRequestProperty("Content-type", MessageBufferConstants.getCONTENT_TYPE_PROPERTY_FOR_ATOM_XML()) [FD]
Line_17 $$ HttpURLConnection connection --> Line_23 $$ connection.setRequestProperty("Authorization", authStr) [FD]
Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) --> Line_23 $$ connection.setRequestProperty("Authorization", authStr) [FD]
Line_22 $$ String authStr = TokenConstants.getWrapAuthenticationType() + " " + TokenConstants.getWrapAuthorizationHeaderKey() + "=\"" + authorizationToken + "\"" --> Line_23 $$ connection.setRequestProperty("Authorization", authStr) [FD]
Line_17 $$ HttpURLConnection connection --> Line_24 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.GetPolicy_REQUEST) [FD]
Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) --> Line_24 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.GetPolicy_REQUEST) [FD]
Line_17 $$ HttpURLConnection connection --> Line_25 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>" [FD]
Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) --> Line_25 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>" [FD]
Line_17 $$ HttpURLConnection connection --> Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) [FD]
Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) --> Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) [FD]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) --> Line_27 $$ InputStream is = connection.getInputStream() [CD]
Line_17 $$ HttpURLConnection connection --> Line_27 $$ InputStream is = connection.getInputStream() [FD]
Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) --> Line_27 $$ InputStream is = connection.getInputStream() [FD]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) --> Line_28 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(is)) [CD]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) --> Line_29 $$ String line [CD]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) --> Line_30 $$ while ((line = rd.readLine()) != null) [CD]
Line_29 $$ String line --> Line_30 $$ while ((line = rd.readLine()) != null) [FD]
Line_28 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(is)) --> Line_30 $$ while ((line = rd.readLine()) != null) [FD]
Line_30 $$ while ((line = rd.readLine()) != null) --> Line_31 $$ sBuf.append(line) [CD]
Line_30 $$ while ((line = rd.readLine()) != null) --> Line_31 $$ sBuf.append(line) [FD]
Line_18 $$ StringBuffer sBuf = new StringBuffer() --> Line_31 $$ sBuf.append(line) [FD]
Line_29 $$ String line --> Line_31 $$ sBuf.append(line) [FD]
Line_30 $$ while ((line = rd.readLine()) != null) --> Line_32 $$ sBuf.append('\r') [CD]
Line_18 $$ StringBuffer sBuf = new StringBuffer() --> Line_32 $$ sBuf.append('\r') [FD]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) --> Line_34 $$ rd.close() [CD]
Line_28 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(is)) --> Line_34 $$ rd.close() [FD]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) --> Line_35 $$ if (sBuf.toString().indexOf("<entry xmlns=") != -1) [CD]
Line_18 $$ StringBuffer sBuf = new StringBuffer() --> Line_35 $$ if (sBuf.toString().indexOf("<entry xmlns=") != -1) [FD]
Line_35 $$ if (sBuf.toString().indexOf("<entry xmlns=") != -1) --> Line_36 $$ responseString = sBuf.toString() [CD]
Line_3 $$ String responseString = null --> Line_36 $$ responseString = sBuf.toString() [FD]
Line_18 $$ StringBuffer sBuf = new StringBuffer() --> Line_36 $$ responseString = sBuf.toString() [FD]
Line_35 $$ if (sBuf.toString().indexOf("<entry xmlns=") != -1) --> Line_37 $$ if (LoggerUtil.getIsLoggingOn()) [CD]
Line_37 $$ if (LoggerUtil.getIsLoggingOn()) --> Line_38 $$ StringBuilder responseXML = new StringBuilder() [CD]
Line_37 $$ if (LoggerUtil.getIsLoggingOn()) --> Line_39 $$ responseXML.append(responseCode) [CD]
Line_38 $$ StringBuilder responseXML = new StringBuilder() --> Line_39 $$ responseXML.append(responseCode) [FD]
Line_25 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>" --> Line_39 $$ responseXML.append(responseCode) [FD]
Line_37 $$ if (LoggerUtil.getIsLoggingOn()) --> Line_40 $$ responseXML.append(responseString) [CD]
Line_38 $$ StringBuilder responseXML = new StringBuilder() --> Line_40 $$ responseXML.append(responseString) [FD]
Line_3 $$ String responseString = null --> Line_40 $$ responseXML.append(responseString) [FD]
Line_36 $$ responseString = sBuf.toString() --> Line_40 $$ responseXML.append(responseString) [FD]
Line_37 $$ if (LoggerUtil.getIsLoggingOn()) --> Line_41 $$ SDKLoggerHelper.logMessage(URLEncoder.encode(responseXML.toString(), "UTF-8"), SDKLoggerHelper.RecordType.GetPolicy_RESPONSE) [CD]
Line_38 $$ StringBuilder responseXML = new StringBuilder() --> Line_41 $$ SDKLoggerHelper.logMessage(URLEncoder.encode(responseXML.toString(), "UTF-8"), SDKLoggerHelper.RecordType.GetPolicy_RESPONSE) [FD]
Line_35 $$ if (sBuf.toString().indexOf("<entry xmlns=") != -1) --> Line_43 $$ return responseString [CD]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) --> Line_48 $$ if (LoggerUtil.getIsLoggingOn()) [CD]
Line_48 $$ if (LoggerUtil.getIsLoggingOn()) --> Line_49 $$ SDKLoggerHelper.logMessage(URLEncoder.encode(responseCode, "UTF-8"), SDKLoggerHelper.RecordType.GetPolicy_RESPONSE) [CD]
Line_25 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>" --> Line_49 $$ SDKLoggerHelper.logMessage(URLEncoder.encode(responseCode, "UTF-8"), SDKLoggerHelper.RecordType.GetPolicy_RESPONSE) [FD]
Line_17 $$ HttpURLConnection connection --> Line_51 $$ throw new AppFabricException("Message buffer policy could not be retrieved. Error.Response code:  " + connection.getResponseCode()) [FD]
Line_19 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_) --> Line_51 $$ throw new AppFabricException("Message buffer policy could not be retrieved. Error.Response code:  " + connection.getResponseCode()) [FD]
