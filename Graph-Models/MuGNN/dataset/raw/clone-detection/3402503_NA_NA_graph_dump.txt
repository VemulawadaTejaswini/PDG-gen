Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_3 $$ Zip64File zip64File = null [CD]
Line_3 $$ Zip64File zip64File = null --> Line_6 $$ zip64File = new Zip64File(zipFile) [FD]
Line_3 $$ Zip64File zip64File = null --> Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath) [FD]
Line_5 $$ boolean compress = false --> Line_9 $$ compress = true [FD]
Line_3 $$ Zip64File zip64File = null --> Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress) [FD]
Line_5 $$ boolean compress = false --> Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress) [FD]
Line_9 $$ compress = true --> Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_14 $$ log.info("[insertFileInto] Will delete this entry before inserting: " + toInsert.getName()) [FD]
Line_3 $$ Zip64File zip64File = null --> Line_16 $$ zip64File.delete(testEntry.getName()) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_16 $$ zip64File.delete(testEntry.getName()) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_18 $$ log.info("[insertFileInto] Entry is a directory. " + "Will delete all files contained in this entry and insert " + toInsert.getName() + "and all nested files.") [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_19 $$ if (!targetPath.contains("/")) [FD]
Line_19 $$ if (!targetPath.contains("/")) --> Line_20 $$ targetPath = targetPath + "/" [CD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_20 $$ targetPath = targetPath + "/" [FD]
Line_3 $$ Zip64File zip64File = null --> Line_22 $$ deleteFileEntry(zip64File, testEntry) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_22 $$ deleteFileEntry(zip64File, testEntry) [FD]
Line_5 $$ boolean compress = false --> Line_27 $$ if (!compress) [FD]
Line_9 $$ compress = true --> Line_27 $$ if (!compress) [FD]
Line_27 $$ if (!compress) --> Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [CD]
Line_3 $$ Zip64File zip64File = null --> Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [FD]
Line_20 $$ targetPath = targetPath + "/" --> Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [FD]
Line_27 $$ if (!compress) --> Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [CD]
Line_3 $$ Zip64File zip64File = null --> Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [FD]
Line_20 $$ targetPath = targetPath + "/" --> Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_32 $$ if (toInsert.isDirectory()) [FD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_33 $$ out.flush() [CD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_34 $$ out.close() [CD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_35 $$ log.info("[insertFileInto] Finished writing entry: " + targetPath) [CD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_36 $$ List<String> containedPaths = normalizePaths(toInsert) [CD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_36 $$ List<String> containedPaths = normalizePaths(toInsert) [FD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>()) [CD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>()) [FD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_38 $$ log.info("[insertFileInto] Added entry is a folder.") [CD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_39 $$ log.info("[insertFileInto] Adding all nested files: ") [CD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [CD]
Line_36 $$ List<String> containedPaths = normalizePaths(toInsert) --> Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [FD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_41 $$ File currentFile = containedFiles.get(i) [CD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_41 $$ File currentFile = containedFiles.get(i) [FD]
Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>()) --> Line_41 $$ File currentFile = containedFiles.get(i) [FD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [CD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [FD]
Line_20 $$ targetPath = targetPath + "/" --> Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [FD]
Line_36 $$ List<String> containedPaths = normalizePaths(toInsert) --> Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [FD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_43 $$ EntryOutputStream loop_out = null [CD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_44 $$ if (!compress) [CD]
Line_5 $$ boolean compress = false --> Line_44 $$ if (!compress) [FD]
Line_9 $$ compress = true --> Line_44 $$ if (!compress) [FD]
Line_44 $$ if (!compress) --> Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [CD]
Line_3 $$ Zip64File zip64File = null --> Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) --> Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_41 $$ File currentFile = containedFiles.get(i) --> Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_44 $$ if (!compress) --> Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [CD]
Line_3 $$ Zip64File zip64File = null --> Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) --> Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_41 $$ File currentFile = containedFiles.get(i) --> Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_49 $$ if (currentFile.isFile()) [CD]
Line_41 $$ File currentFile = containedFiles.get(i) --> Line_49 $$ if (currentFile.isFile()) [FD]
Line_49 $$ if (currentFile.isFile()) --> Line_50 $$ InputStream loop_in = new FileInputStream(currentFile) [CD]
Line_49 $$ if (currentFile.isFile()) --> Line_51 $$ IOUtils.copyLarge(loop_in, loop_out) [CD]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile) --> Line_51 $$ IOUtils.copyLarge(loop_in, loop_out) [FD]
Line_49 $$ if (currentFile.isFile()) --> Line_52 $$ loop_in.close() [CD]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile) --> Line_52 $$ loop_in.close() [FD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_54 $$ log.info("[insertFileInto] Added: " + currentPath) [CD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_55 $$ loop_out.flush() [CD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_56 $$ loop_out.close() [CD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_59 $$ InputStream in = new FileInputStream(toInsert) [CD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_60 $$ IOUtils.copyLarge(in, out) [CD]
Line_59 $$ InputStream in = new FileInputStream(toInsert) --> Line_60 $$ IOUtils.copyLarge(in, out) [FD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_61 $$ in.close() [CD]
Line_59 $$ InputStream in = new FileInputStream(toInsert) --> Line_61 $$ in.close() [FD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_62 $$ out.flush() [CD]
Line_32 $$ if (toInsert.isDirectory()) --> Line_63 $$ out.close() [CD]
Line_5 $$ boolean compress = false --> Line_67 $$ if (!compress) [FD]
Line_9 $$ compress = true --> Line_67 $$ if (!compress) [FD]
Line_67 $$ if (!compress) --> Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [CD]
Line_3 $$ Zip64File zip64File = null --> Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [FD]
Line_20 $$ targetPath = targetPath + "/" --> Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified())) [FD]
Line_67 $$ if (!compress) --> Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [CD]
Line_3 $$ Zip64File zip64File = null --> Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [FD]
Line_20 $$ targetPath = targetPath + "/" --> Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified())) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_72 $$ if (toInsert.isDirectory()) [FD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_73 $$ out.flush() [CD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_74 $$ out.close() [CD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_75 $$ log.info("[insertFileInto] Finished writing entry: " + targetPath) [CD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_76 $$ List<String> containedPaths = normalizePaths(toInsert) [CD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_76 $$ List<String> containedPaths = normalizePaths(toInsert) [FD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_77 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>()) [CD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_77 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>()) [FD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_78 $$ log.info("[insertFileInto] Added entry is a folder.") [CD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_79 $$ log.info("[insertFileInto] Adding all nested files: ") [CD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [CD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [FD]
Line_36 $$ List<String> containedPaths = normalizePaths(toInsert) --> Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [FD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_81 $$ File currentFile = containedFiles.get(i) [CD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_81 $$ File currentFile = containedFiles.get(i) [FD]
Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>()) --> Line_81 $$ File currentFile = containedFiles.get(i) [FD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_81 $$ File currentFile = containedFiles.get(i) [FD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [CD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [FD]
Line_20 $$ targetPath = targetPath + "/" --> Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [FD]
Line_36 $$ List<String> containedPaths = normalizePaths(toInsert) --> Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [FD]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) [FD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_83 $$ EntryOutputStream loop_out = null [CD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_84 $$ if (!compress) [CD]
Line_5 $$ boolean compress = false --> Line_84 $$ if (!compress) [FD]
Line_9 $$ compress = true --> Line_84 $$ if (!compress) [FD]
Line_84 $$ if (!compress) --> Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [CD]
Line_3 $$ Zip64File zip64File = null --> Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) --> Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) --> Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_81 $$ File currentFile = containedFiles.get(i) --> Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_41 $$ File currentFile = containedFiles.get(i) --> Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified())) [FD]
Line_84 $$ if (!compress) --> Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [CD]
Line_3 $$ Zip64File zip64File = null --> Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) --> Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i) --> Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_81 $$ File currentFile = containedFiles.get(i) --> Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_41 $$ File currentFile = containedFiles.get(i) --> Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified())) [FD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_89 $$ if (currentFile.isFile()) [CD]
Line_81 $$ File currentFile = containedFiles.get(i) --> Line_89 $$ if (currentFile.isFile()) [FD]
Line_41 $$ File currentFile = containedFiles.get(i) --> Line_89 $$ if (currentFile.isFile()) [FD]
Line_89 $$ if (currentFile.isFile()) --> Line_90 $$ InputStream loop_in = new FileInputStream(currentFile) [CD]
Line_89 $$ if (currentFile.isFile()) --> Line_91 $$ IOUtils.copyLarge(loop_in, loop_out) [CD]
Line_90 $$ InputStream loop_in = new FileInputStream(currentFile) --> Line_91 $$ IOUtils.copyLarge(loop_in, loop_out) [FD]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile) --> Line_91 $$ IOUtils.copyLarge(loop_in, loop_out) [FD]
Line_89 $$ if (currentFile.isFile()) --> Line_92 $$ loop_in.close() [CD]
Line_90 $$ InputStream loop_in = new FileInputStream(currentFile) --> Line_92 $$ loop_in.close() [FD]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile) --> Line_92 $$ loop_in.close() [FD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_94 $$ log.info("[insertFileInto] Added: " + currentPath) [CD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_95 $$ loop_out.flush() [CD]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) --> Line_96 $$ loop_out.close() [CD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_100 $$ IOUtils.copyLarge(in, out) [CD]
Line_59 $$ InputStream in = new FileInputStream(toInsert) --> Line_100 $$ IOUtils.copyLarge(in, out) [FD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_101 $$ in.close() [CD]
Line_59 $$ InputStream in = new FileInputStream(toInsert) --> Line_101 $$ in.close() [FD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_102 $$ out.flush() [CD]
Line_72 $$ if (toInsert.isDirectory()) --> Line_103 $$ out.close() [CD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_106 $$ log.info("[insertFileInto] Done! Added " + toInsert.getName() + " to zip.") [FD]
Line_3 $$ Zip64File zip64File = null --> Line_107 $$ zip64File.close() [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_107 $$ zip64File.close() [FD]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) --> Line_113 $$ return new File(zip64File.getDiskFile().getFileName()) [CD]
Line_3 $$ Zip64File zip64File = null --> Line_113 $$ return new File(zip64File.getDiskFile().getFileName()) [FD]
Line_6 $$ zip64File = new Zip64File(zipFile) --> Line_113 $$ return new File(zip64File.getDiskFile().getFileName()) [FD]
