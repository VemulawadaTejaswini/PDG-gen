Line_2 $$ public static void unzipFile(File zipFile, File destFile, boolean removeSrcFile) throws Exception --> Line_3 $$ ZipInputStream zipinputstream = new ZipInputStream(new FileInputStream(zipFile)) [CD]
Line_2 $$ public static void unzipFile(File zipFile, File destFile, boolean removeSrcFile) throws Exception --> Line_4 $$ ZipEntry zipentry = zipinputstream.getNextEntry() [CD]
Line_3 $$ ZipInputStream zipinputstream = new ZipInputStream(new FileInputStream(zipFile)) --> Line_4 $$ ZipEntry zipentry = zipinputstream.getNextEntry() [FD]
Line_2 $$ public static void unzipFile(File zipFile, File destFile, boolean removeSrcFile) throws Exception --> Line_5 $$ int BUFFER_SIZE = 4096 [CD]
Line_2 $$ public static void unzipFile(File zipFile, File destFile, boolean removeSrcFile) throws Exception --> Line_6 $$ while (zipentry != null) [CD]
Line_6 $$ while (zipentry != null) --> Line_7 $$ String entryName = zipentry.getName() [CD]
Line_6 $$ while (zipentry != null) --> Line_8 $$ log.info("<<<<<< ZipUtility.unzipFile - Extracting: " + zipentry.getName()) [CD]
Line_6 $$ while (zipentry != null) --> Line_9 $$ File newFile = null [CD]
Line_6 $$ while (zipentry != null) --> Line_10 $$ newFile = new File(destFile, entryName) [CD]
Line_2 $$ public static void unzipFile(File zipFile, File destFile, boolean removeSrcFile) throws Exception --> Line_10 $$ newFile = new File(destFile, entryName) [FD]
Line_9 $$ File newFile = null --> Line_10 $$ newFile = new File(destFile, entryName) [FD]
Line_6 $$ while (zipentry != null) --> Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) [CD]
Line_7 $$ String entryName = zipentry.getName() --> Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) [FD]
Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) --> Line_12 $$ newFile.mkdirs() [CD]
Line_9 $$ File newFile = null --> Line_12 $$ newFile.mkdirs() [FD]
Line_10 $$ newFile = new File(destFile, entryName) --> Line_12 $$ newFile.mkdirs() [FD]
Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) --> Line_14 $$ ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE) [CD]
Line_5 $$ int BUFFER_SIZE = 4096 --> Line_14 $$ ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE) [FD]
Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) --> Line_15 $$ byte[] bufferArray = buffer.array() [CD]
Line_14 $$ ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE) --> Line_15 $$ byte[] bufferArray = buffer.array() [FD]
Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) --> Line_16 $$ FileUtilities.createDirectory(newFile.getParentFile()) [CD]
Line_9 $$ File newFile = null --> Line_16 $$ FileUtilities.createDirectory(newFile.getParentFile()) [FD]
Line_10 $$ newFile = new File(destFile, entryName) --> Line_16 $$ FileUtilities.createDirectory(newFile.getParentFile()) [FD]
Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) --> Line_17 $$ FileChannel destinationChannel = new FileOutputStream(newFile).getChannel() [CD]
Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) --> Line_18 $$ while (true) [CD]
Line_18 $$ while (true) --> Line_19 $$ buffer.clear() [CD]
Line_14 $$ ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE) --> Line_19 $$ buffer.clear() [FD]
Line_18 $$ while (true) --> Line_20 $$ int lim = zipinputstream.read(bufferArray) [CD]
Line_3 $$ ZipInputStream zipinputstream = new ZipInputStream(new FileInputStream(zipFile)) --> Line_20 $$ int lim = zipinputstream.read(bufferArray) [FD]
Line_15 $$ byte[] bufferArray = buffer.array() --> Line_20 $$ int lim = zipinputstream.read(bufferArray) [FD]
Line_18 $$ while (true) --> Line_21 $$ if (lim == -1) [CD]
Line_20 $$ int lim = zipinputstream.read(bufferArray) --> Line_21 $$ if (lim == -1) [FD]
Line_18 $$ while (true) --> Line_22 $$ buffer.flip() [CD]
Line_14 $$ ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE) --> Line_22 $$ buffer.flip() [FD]
Line_18 $$ while (true) --> Line_23 $$ buffer.limit(lim) [CD]
Line_14 $$ ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE) --> Line_23 $$ buffer.limit(lim) [FD]
Line_20 $$ int lim = zipinputstream.read(bufferArray) --> Line_23 $$ buffer.limit(lim) [FD]
Line_18 $$ while (true) --> Line_24 $$ destinationChannel.write(buffer) [CD]
Line_17 $$ FileChannel destinationChannel = new FileOutputStream(newFile).getChannel() --> Line_24 $$ destinationChannel.write(buffer) [FD]
Line_14 $$ ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE) --> Line_24 $$ destinationChannel.write(buffer) [FD]
Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) --> Line_26 $$ destinationChannel.close() [CD]
Line_17 $$ FileChannel destinationChannel = new FileOutputStream(newFile).getChannel() --> Line_26 $$ destinationChannel.close() [FD]
Line_11 $$ if (zipentry.isDirectory() || entryName.endsWith(File.separator + ".")) --> Line_27 $$ zipinputstream.closeEntry() [CD]
Line_3 $$ ZipInputStream zipinputstream = new ZipInputStream(new FileInputStream(zipFile)) --> Line_27 $$ zipinputstream.closeEntry() [FD]
Line_6 $$ while (zipentry != null) --> Line_29 $$ zipentry = zipinputstream.getNextEntry() [CD]
Line_3 $$ ZipInputStream zipinputstream = new ZipInputStream(new FileInputStream(zipFile)) --> Line_29 $$ zipentry = zipinputstream.getNextEntry() [FD]
Line_2 $$ public static void unzipFile(File zipFile, File destFile, boolean removeSrcFile) throws Exception --> Line_31 $$ zipinputstream.close() [CD]
Line_3 $$ ZipInputStream zipinputstream = new ZipInputStream(new FileInputStream(zipFile)) --> Line_31 $$ zipinputstream.close() [FD]
Line_2 $$ public static void unzipFile(File zipFile, File destFile, boolean removeSrcFile) throws Exception --> Line_32 $$ if (removeSrcFile) [CD]
Line_32 $$ if (removeSrcFile) --> Line_33 $$ if (zipFile.exists()) [CD]
Line_2 $$ public static void unzipFile(File zipFile, File destFile, boolean removeSrcFile) throws Exception --> Line_33 $$ if (zipFile.exists()) [FD]
