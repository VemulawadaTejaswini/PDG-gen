Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_3 $$ final URL url [CD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_4 $$ final long lastModified [CD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_5 $$ final InputStream is [CD]
Line_3 $$ final URL url --> Line_7 $$ url = getServletContext().getResource(path) [FD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_7 $$ url = getServletContext().getResource(path) [FD]
Line_4 $$ final long lastModified --> Line_9 $$ lastModified = url.openConnection().getLastModified() [FD]
Line_3 $$ final URL url --> Line_9 $$ lastModified = url.openConnection().getLastModified() [FD]
Line_7 $$ url = getServletContext().getResource(path) --> Line_9 $$ lastModified = url.openConnection().getLastModified() [FD]
Line_5 $$ final InputStream is --> Line_10 $$ is = url.openStream() [FD]
Line_3 $$ final URL url --> Line_10 $$ is = url.openStream() [FD]
Line_7 $$ url = getServletContext().getResource(path) --> Line_10 $$ is = url.openStream() [FD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_15 $$ _lock.readLock().lock() [CD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_16 $$ CachedQuery cached = _caches.get(path) [CD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_16 $$ CachedQuery cached = _caches.get(path) [FD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) [CD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_18 $$ if (cached == null) [CD]
Line_16 $$ CachedQuery cached = _caches.get(path) --> Line_18 $$ if (cached == null) [FD]
Line_18 $$ if (cached == null) --> Line_19 $$ cached = new CachedQuery() [CD]
Line_16 $$ CachedQuery cached = _caches.get(path) --> Line_19 $$ cached = new CachedQuery() [FD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_21 $$ XQueryParser parser = new XQueryParser(is) [CD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_22 $$ StaticContext staticEnv = parser.getStaticContext() [CD]
Line_21 $$ XQueryParser parser = new XQueryParser(is) --> Line_22 $$ StaticContext staticEnv = parser.getStaticContext() [FD]
Line_3 $$ final URL url --> Line_24 $$ URI baseUri = url.toURI() [FD]
Line_7 $$ url = getServletContext().getResource(path) --> Line_24 $$ URI baseUri = url.toURI() [FD]
Line_22 $$ StaticContext staticEnv = parser.getStaticContext() --> Line_25 $$ staticEnv.setBaseURI(baseUri) [FD]
Line_24 $$ URI baseUri = url.toURI() --> Line_25 $$ staticEnv.setBaseURI(baseUri) [FD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_29 $$ final XQueryModule module [CD]
Line_29 $$ final XQueryModule module --> Line_31 $$ module = parser.parse() [FD]
Line_21 $$ XQueryParser parser = new XQueryParser(is) --> Line_31 $$ module = parser.parse() [FD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_37 $$ _lock.readLock().unlock() [CD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_38 $$ _lock.writeLock().lock() [CD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_39 $$ cached.queryObject = module [CD]
Line_29 $$ final XQueryModule module --> Line_39 $$ cached.queryObject = module [FD]
Line_31 $$ module = parser.parse() --> Line_39 $$ cached.queryObject = module [FD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_40 $$ cached.staticEnv = staticEnv [CD]
Line_22 $$ StaticContext staticEnv = parser.getStaticContext() --> Line_40 $$ cached.staticEnv = staticEnv [FD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_41 $$ cached.loadTimeStamp = System.currentTimeMillis() [CD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_42 $$ _caches.put(path, cached) [CD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_42 $$ _caches.put(path, cached) [FD]
Line_16 $$ CachedQuery cached = _caches.get(path) --> Line_42 $$ _caches.put(path, cached) [FD]
Line_19 $$ cached = new CachedQuery() --> Line_42 $$ _caches.put(path, cached) [FD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_43 $$ _lock.writeLock().unlock() [CD]
Line_17 $$ if (cached == null || cached.loadTimeStamp < lastModified) --> Line_44 $$ _lock.readLock().lock() [CD]
Line_29 $$ final XQueryModule module --> Line_46 $$ module.staticAnalysis(staticEnv) [FD]
Line_31 $$ module = parser.parse() --> Line_46 $$ module.staticAnalysis(staticEnv) [FD]
Line_22 $$ StaticContext staticEnv = parser.getStaticContext() --> Line_46 $$ module.staticAnalysis(staticEnv) [FD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_53 $$ _lock.readLock().unlock() [CD]
Line_2 $$ private CachedQuery loadQuery(String path) throws CacheException, IOException, XQueryException --> Line_54 $$ return cached [CD]
