Line_2 $$ public Reader getGETReader_bak(URL url) --> Line_3 $$ Reader reader = null [CD]
Line_2 $$ public Reader getGETReader_bak(URL url) --> Line_4 $$ System.out.println("Web3DService.getGETReader caching " + url) [CD]
Line_2 $$ public Reader getGETReader_bak(URL url) --> Line_5 $$ int contentLength = -1 [CD]
Line_2 $$ public Reader getGETReader_bak(URL url) --> Line_6 $$ URLConnection urlc [CD]
Line_6 $$ URLConnection urlc --> Line_8 $$ urlc = url.openConnection() [FD]
Line_2 $$ public Reader getGETReader_bak(URL url) --> Line_8 $$ urlc = url.openConnection() [FD]
Line_6 $$ URLConnection urlc --> Line_9 $$ urlc.setReadTimeout(Navigator.TIME_OUT) [FD]
Line_8 $$ urlc = url.openConnection() --> Line_9 $$ urlc.setReadTimeout(Navigator.TIME_OUT) [FD]
Line_10 $$ if (getEncoding() != null) --> Line_11 $$ urlc.setRequestProperty("Authorization", "Basic " + getEncoding()) [CD]
Line_6 $$ URLConnection urlc --> Line_11 $$ urlc.setRequestProperty("Authorization", "Basic " + getEncoding()) [FD]
Line_8 $$ urlc = url.openConnection() --> Line_11 $$ urlc.setRequestProperty("Authorization", "Basic " + getEncoding()) [FD]
Line_6 $$ URLConnection urlc --> Line_13 $$ urlc.connect() [FD]
Line_8 $$ urlc = url.openConnection() --> Line_13 $$ urlc.connect() [FD]
Line_6 $$ URLConnection urlc --> Line_14 $$ String content_type = urlc.getContentType() [FD]
Line_8 $$ urlc = url.openConnection() --> Line_14 $$ String content_type = urlc.getContentType() [FD]
Line_14 $$ String content_type = urlc.getContentType() --> Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) [FD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_16 $$ InputStream is = urlc.getInputStream() [CD]
Line_6 $$ URLConnection urlc --> Line_16 $$ InputStream is = urlc.getInputStream() [FD]
Line_8 $$ urlc = url.openConnection() --> Line_16 $$ InputStream is = urlc.getInputStream() [FD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_17 $$ DataInputStream d = new DataInputStream(is) [CD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_18 $$ contentLength = urlc.getContentLength() [CD]
Line_5 $$ int contentLength = -1 --> Line_18 $$ contentLength = urlc.getContentLength() [FD]
Line_6 $$ URLConnection urlc --> Line_18 $$ contentLength = urlc.getContentLength() [FD]
Line_8 $$ urlc = url.openConnection() --> Line_18 $$ contentLength = urlc.getContentLength() [FD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_19 $$ byte[] content = new byte[contentLength] [CD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_20 $$ if (d != null) [CD]
Line_17 $$ DataInputStream d = new DataInputStream(is) --> Line_20 $$ if (d != null) [FD]
Line_20 $$ if (d != null) --> Line_21 $$ d.readFully(content, 0, contentLength) [CD]
Line_17 $$ DataInputStream d = new DataInputStream(is) --> Line_21 $$ d.readFully(content, 0, contentLength) [FD]
Line_19 $$ byte[] content = new byte[contentLength] --> Line_21 $$ d.readFully(content, 0, contentLength) [FD]
Line_5 $$ int contentLength = -1 --> Line_21 $$ d.readFully(content, 0, contentLength) [FD]
Line_18 $$ contentLength = urlc.getContentLength() --> Line_21 $$ d.readFully(content, 0, contentLength) [FD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_23 $$ is.close() [CD]
Line_16 $$ InputStream is = urlc.getInputStream() --> Line_23 $$ is.close() [FD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_24 $$ d.close() [CD]
Line_17 $$ DataInputStream d = new DataInputStream(is) --> Line_24 $$ d.close() [FD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_25 $$ ByteArrayInputStream bais = new ByteArrayInputStream(content) [CD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_26 $$ reader = new InputStreamReader(bais) [CD]
Line_3 $$ Reader reader = null --> Line_26 $$ reader = new InputStreamReader(bais) [FD]
Line_15 $$ if (content_type == null || content_type.equalsIgnoreCase("x-world/x-vrml") || content_type.equalsIgnoreCase("model/vrml") || content_type.equalsIgnoreCase("model/vrml;charset=ISO-8859-1")) --> Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) [CD]
Line_14 $$ String content_type = urlc.getContentType() --> Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) [FD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_28 $$ InputStream is = urlc.getInputStream() [CD]
Line_6 $$ URLConnection urlc --> Line_28 $$ InputStream is = urlc.getInputStream() [FD]
Line_8 $$ urlc = url.openConnection() --> Line_28 $$ InputStream is = urlc.getInputStream() [FD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_29 $$ BufferedInputStream bis = new BufferedInputStream(is) [CD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_30 $$ GZIPInputStream gis = new GZIPInputStream(bis) [CD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_31 $$ StringBuffer sb = new StringBuffer() [CD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_32 $$ BufferedReader zipReader = new BufferedReader(new InputStreamReader(gis)) [CD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_33 $$ char chars[] = new char[10240] [CD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_34 $$ int len = 0 [CD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_35 $$ contentLength = 0 [CD]
Line_5 $$ int contentLength = -1 --> Line_35 $$ contentLength = 0 [FD]
Line_18 $$ contentLength = urlc.getContentLength() --> Line_35 $$ contentLength = 0 [FD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) [CD]
Line_34 $$ int len = 0 --> Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) [FD]
Line_32 $$ BufferedReader zipReader = new BufferedReader(new InputStreamReader(gis)) --> Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) [FD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_37 $$ sb.append(chars, 0, len) [CD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_37 $$ sb.append(chars, 0, len) [FD]
Line_31 $$ StringBuffer sb = new StringBuffer() --> Line_37 $$ sb.append(chars, 0, len) [FD]
Line_34 $$ int len = 0 --> Line_37 $$ sb.append(chars, 0, len) [FD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_38 $$ contentLength += len [CD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_38 $$ contentLength += len [FD]
Line_5 $$ int contentLength = -1 --> Line_38 $$ contentLength += len [FD]
Line_18 $$ contentLength = urlc.getContentLength() --> Line_38 $$ contentLength += len [FD]
Line_35 $$ contentLength = 0 --> Line_38 $$ contentLength += len [FD]
Line_34 $$ int len = 0 --> Line_38 $$ contentLength += len [FD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_41 $$ gis.close() [CD]
Line_30 $$ GZIPInputStream gis = new GZIPInputStream(bis) --> Line_41 $$ gis.close() [FD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_42 $$ zipReader.close() [CD]
Line_32 $$ BufferedReader zipReader = new BufferedReader(new InputStreamReader(gis)) --> Line_42 $$ zipReader.close() [FD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_43 $$ bis.close() [CD]
Line_29 $$ BufferedInputStream bis = new BufferedInputStream(is) --> Line_43 $$ bis.close() [FD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_44 $$ is.close() [CD]
Line_16 $$ InputStream is = urlc.getInputStream() --> Line_44 $$ is.close() [FD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_45 $$ reader = new StringReader(sb.toString()) [CD]
Line_3 $$ Reader reader = null --> Line_45 $$ reader = new StringReader(sb.toString()) [FD]
Line_26 $$ reader = new InputStreamReader(bais) --> Line_45 $$ reader = new StringReader(sb.toString()) [FD]
Line_31 $$ StringBuffer sb = new StringBuffer() --> Line_45 $$ reader = new StringReader(sb.toString()) [FD]
Line_27 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip")) --> Line_46 $$ if (content_type.equalsIgnoreCase("model/vrml.encrypted")) [CD]
Line_14 $$ String content_type = urlc.getContentType() --> Line_46 $$ if (content_type.equalsIgnoreCase("model/vrml.encrypted")) [FD]
Line_46 $$ if (content_type.equalsIgnoreCase("model/vrml.encrypted")) --> Line_47 $$ InputStream is = urlc.getInputStream() [CD]
Line_6 $$ URLConnection urlc --> Line_47 $$ InputStream is = urlc.getInputStream() [FD]
Line_8 $$ urlc = url.openConnection() --> Line_47 $$ InputStream is = urlc.getInputStream() [FD]
Line_46 $$ if (content_type.equalsIgnoreCase("model/vrml.encrypted")) --> Line_49 $$ Cipher pbeCipher = createCipher() [CD]
Line_46 $$ if (content_type.equalsIgnoreCase("model/vrml.encrypted")) --> Line_50 $$ if (pbeCipher != null) [CD]
Line_49 $$ Cipher pbeCipher = createCipher() --> Line_50 $$ if (pbeCipher != null) [FD]
Line_50 $$ if (pbeCipher != null) --> Line_51 $$ CipherInputStream cis = new CipherInputStream(is, pbeCipher) [CD]
Line_50 $$ if (pbeCipher != null) --> Line_52 $$ BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis)) [CD]
Line_50 $$ if (pbeCipher != null) --> Line_55 $$ contentLength = 0 [CD]
Line_38 $$ contentLength += len --> Line_55 $$ contentLength = 0 [FD]
Line_5 $$ int contentLength = -1 --> Line_55 $$ contentLength = 0 [FD]
Line_18 $$ contentLength = urlc.getContentLength() --> Line_55 $$ contentLength = 0 [FD]
Line_35 $$ contentLength = 0 --> Line_55 $$ contentLength = 0 [FD]
Line_50 $$ if (pbeCipher != null) --> Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) [CD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) [FD]
Line_34 $$ int len = 0 --> Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) [FD]
Line_52 $$ BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis)) --> Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) [FD]
Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_57 $$ sb.append(chars, 0, len) [CD]
Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_57 $$ sb.append(chars, 0, len) [FD]
Line_31 $$ StringBuffer sb = new StringBuffer() --> Line_57 $$ sb.append(chars, 0, len) [FD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_57 $$ sb.append(chars, 0, len) [FD]
Line_34 $$ int len = 0 --> Line_57 $$ sb.append(chars, 0, len) [FD]
Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_58 $$ contentLength += len [CD]
Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_58 $$ contentLength += len [FD]
Line_38 $$ contentLength += len --> Line_58 $$ contentLength += len [FD]
Line_5 $$ int contentLength = -1 --> Line_58 $$ contentLength += len [FD]
Line_18 $$ contentLength = urlc.getContentLength() --> Line_58 $$ contentLength += len [FD]
Line_35 $$ contentLength = 0 --> Line_58 $$ contentLength += len [FD]
Line_55 $$ contentLength = 0 --> Line_58 $$ contentLength += len [FD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_58 $$ contentLength += len [FD]
Line_34 $$ int len = 0 --> Line_58 $$ contentLength += len [FD]
Line_50 $$ if (pbeCipher != null) --> Line_61 $$ cis.close() [CD]
Line_51 $$ CipherInputStream cis = new CipherInputStream(is, pbeCipher) --> Line_61 $$ cis.close() [FD]
Line_50 $$ if (pbeCipher != null) --> Line_62 $$ bufReader.close() [CD]
Line_52 $$ BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis)) --> Line_62 $$ bufReader.close() [FD]
Line_50 $$ if (pbeCipher != null) --> Line_63 $$ reader = new StringReader(sb.toString()) [CD]
Line_3 $$ Reader reader = null --> Line_63 $$ reader = new StringReader(sb.toString()) [FD]
Line_26 $$ reader = new InputStreamReader(bais) --> Line_63 $$ reader = new StringReader(sb.toString()) [FD]
Line_45 $$ reader = new StringReader(sb.toString()) --> Line_63 $$ reader = new StringReader(sb.toString()) [FD]
Line_31 $$ StringBuffer sb = new StringBuffer() --> Line_63 $$ reader = new StringReader(sb.toString()) [FD]
Line_46 $$ if (content_type.equalsIgnoreCase("model/vrml.encrypted")) --> Line_65 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip.encrypted")) [CD]
Line_14 $$ String content_type = urlc.getContentType() --> Line_65 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip.encrypted")) [FD]
Line_65 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip.encrypted")) --> Line_66 $$ InputStream is = urlc.getInputStream() [CD]
Line_6 $$ URLConnection urlc --> Line_66 $$ InputStream is = urlc.getInputStream() [FD]
Line_8 $$ urlc = url.openConnection() --> Line_66 $$ InputStream is = urlc.getInputStream() [FD]
Line_65 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip.encrypted")) --> Line_68 $$ Cipher pbeCipher = createCipher() [CD]
Line_65 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip.encrypted")) --> Line_69 $$ if (pbeCipher != null) [CD]
Line_49 $$ Cipher pbeCipher = createCipher() --> Line_69 $$ if (pbeCipher != null) [FD]
Line_69 $$ if (pbeCipher != null) --> Line_75 $$ contentLength = 0 [CD]
Line_58 $$ contentLength += len --> Line_75 $$ contentLength = 0 [FD]
Line_38 $$ contentLength += len --> Line_75 $$ contentLength = 0 [FD]
Line_5 $$ int contentLength = -1 --> Line_75 $$ contentLength = 0 [FD]
Line_18 $$ contentLength = urlc.getContentLength() --> Line_75 $$ contentLength = 0 [FD]
Line_35 $$ contentLength = 0 --> Line_75 $$ contentLength = 0 [FD]
Line_55 $$ contentLength = 0 --> Line_75 $$ contentLength = 0 [FD]
Line_69 $$ if (pbeCipher != null) --> Line_76 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) [CD]
Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_76 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) [FD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_76 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) [FD]
Line_34 $$ int len = 0 --> Line_76 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) [FD]
Line_52 $$ BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis)) --> Line_76 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) [FD]
Line_76 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_77 $$ sb.append(chars, 0, len) [CD]
Line_76 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_77 $$ sb.append(chars, 0, len) [FD]
Line_31 $$ StringBuffer sb = new StringBuffer() --> Line_77 $$ sb.append(chars, 0, len) [FD]
Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_77 $$ sb.append(chars, 0, len) [FD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_77 $$ sb.append(chars, 0, len) [FD]
Line_34 $$ int len = 0 --> Line_77 $$ sb.append(chars, 0, len) [FD]
Line_76 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_78 $$ contentLength += len [CD]
Line_76 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_78 $$ contentLength += len [FD]
Line_58 $$ contentLength += len --> Line_78 $$ contentLength += len [FD]
Line_38 $$ contentLength += len --> Line_78 $$ contentLength += len [FD]
Line_5 $$ int contentLength = -1 --> Line_78 $$ contentLength += len [FD]
Line_18 $$ contentLength = urlc.getContentLength() --> Line_78 $$ contentLength += len [FD]
Line_35 $$ contentLength = 0 --> Line_78 $$ contentLength += len [FD]
Line_55 $$ contentLength = 0 --> Line_78 $$ contentLength += len [FD]
Line_75 $$ contentLength = 0 --> Line_78 $$ contentLength += len [FD]
Line_56 $$ while ((len = bufReader.read(chars, 0, chars.length)) >= 0) --> Line_78 $$ contentLength += len [FD]
Line_36 $$ while ((len = zipReader.read(chars, 0, chars.length)) >= 0) --> Line_78 $$ contentLength += len [FD]
Line_34 $$ int len = 0 --> Line_78 $$ contentLength += len [FD]
Line_69 $$ if (pbeCipher != null) --> Line_81 $$ bufReader.close() [CD]
Line_52 $$ BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis)) --> Line_81 $$ bufReader.close() [FD]
Line_69 $$ if (pbeCipher != null) --> Line_82 $$ gis.close() [CD]
Line_30 $$ GZIPInputStream gis = new GZIPInputStream(bis) --> Line_82 $$ gis.close() [FD]
Line_69 $$ if (pbeCipher != null) --> Line_83 $$ cis.close() [CD]
Line_51 $$ CipherInputStream cis = new CipherInputStream(is, pbeCipher) --> Line_83 $$ cis.close() [FD]
Line_69 $$ if (pbeCipher != null) --> Line_84 $$ reader = new StringReader(sb.toString()) [CD]
Line_3 $$ Reader reader = null --> Line_84 $$ reader = new StringReader(sb.toString()) [FD]
Line_26 $$ reader = new InputStreamReader(bais) --> Line_84 $$ reader = new StringReader(sb.toString()) [FD]
Line_45 $$ reader = new StringReader(sb.toString()) --> Line_84 $$ reader = new StringReader(sb.toString()) [FD]
Line_63 $$ reader = new StringReader(sb.toString()) --> Line_84 $$ reader = new StringReader(sb.toString()) [FD]
Line_31 $$ StringBuffer sb = new StringBuffer() --> Line_84 $$ reader = new StringReader(sb.toString()) [FD]
Line_65 $$ if (content_type.equalsIgnoreCase("model/vrml.gzip.encrypted")) --> Line_86 $$ if (content_type.equalsIgnoreCase("text/html;charset=utf-8")) [CD]
Line_14 $$ String content_type = urlc.getContentType() --> Line_86 $$ if (content_type.equalsIgnoreCase("text/html;charset=utf-8")) [FD]
Line_86 $$ if (content_type.equalsIgnoreCase("text/html;charset=utf-8")) --> Line_87 $$ System.out.println("text/html;charset=utf-8") [CD]
Line_86 $$ if (content_type.equalsIgnoreCase("text/html;charset=utf-8")) --> Line_89 $$ System.err.println("ContentNegotiator.startLoading unsupported MIME type: " + content_type) [CD]
Line_2 $$ public Reader getGETReader_bak(URL url) --> Line_94 $$ return reader [CD]
