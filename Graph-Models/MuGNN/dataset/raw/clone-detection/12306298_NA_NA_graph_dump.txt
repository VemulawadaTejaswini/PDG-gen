Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_3 $$ if (destFile.exists()) [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_3 $$ if (destFile.exists()) [FD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_6 $$ if (!sourceFile.exists()) [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_6 $$ if (!sourceFile.exists()) [FD]
Line_6 $$ if (!sourceFile.exists()) --> Line_7 $$ return [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_9 $$ boolean succ = sourceFile.renameTo(destFile) [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_9 $$ boolean succ = sourceFile.renameTo(destFile) [FD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_10 $$ if (succ) [CD]
Line_10 $$ if (succ) --> Line_11 $$ NLogger.warn(FileUtils.class, "First renameTo operation worked!") [CD]
Line_10 $$ if (succ) --> Line_12 $$ return [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_14 $$ NLogger.warn(FileUtils.class, "First renameTo operation failed.") [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_15 $$ System.gc() [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_16 $$ Thread.yield() [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_17 $$ succ = sourceFile.renameTo(destFile) [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_17 $$ succ = sourceFile.renameTo(destFile) [FD]
Line_9 $$ boolean succ = sourceFile.renameTo(destFile) --> Line_17 $$ succ = sourceFile.renameTo(destFile) [FD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_18 $$ if (succ) [CD]
Line_18 $$ if (succ) --> Line_19 $$ return [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_21 $$ NLogger.warn(FileUtils.class, "Second renameTo operation failed.") [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_22 $$ FileInputStream input = null [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_23 $$ FileOutputStream output = null [CD]
Line_22 $$ FileInputStream input = null --> Line_25 $$ input = new FileInputStream(sourceFile) [FD]
Line_23 $$ FileOutputStream output = null --> Line_26 $$ output = new FileOutputStream(destFile) [FD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_27 $$ long lengthLeft = sourceFile.length() [FD]
Line_27 $$ long lengthLeft = sourceFile.length() --> Line_30 $$ while (lengthLeft > 0) [FD]
Line_30 $$ while (lengthLeft > 0) --> Line_31 $$ read = input.read(buffer) [CD]
Line_29 $$ int read --> Line_31 $$ read = input.read(buffer) [FD]
Line_22 $$ FileInputStream input = null --> Line_31 $$ read = input.read(buffer) [FD]
Line_25 $$ input = new FileInputStream(sourceFile) --> Line_31 $$ read = input.read(buffer) [FD]
Line_28 $$ byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)] --> Line_31 $$ read = input.read(buffer) [FD]
Line_30 $$ while (lengthLeft > 0) --> Line_32 $$ if (read == -1) [CD]
Line_31 $$ read = input.read(buffer) --> Line_32 $$ if (read == -1) [FD]
Line_29 $$ int read --> Line_32 $$ if (read == -1) [FD]
Line_30 $$ while (lengthLeft > 0) --> Line_35 $$ lengthLeft -= read [CD]
Line_27 $$ long lengthLeft = sourceFile.length() --> Line_35 $$ lengthLeft -= read [FD]
Line_31 $$ read = input.read(buffer) --> Line_35 $$ lengthLeft -= read [FD]
Line_29 $$ int read --> Line_35 $$ lengthLeft -= read [FD]
Line_30 $$ while (lengthLeft > 0) --> Line_36 $$ output.write(buffer, 0, read) [CD]
Line_23 $$ FileOutputStream output = null --> Line_36 $$ output.write(buffer, 0, read) [FD]
Line_26 $$ output = new FileOutputStream(destFile) --> Line_36 $$ output.write(buffer, 0, read) [FD]
Line_28 $$ byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)] --> Line_36 $$ output.write(buffer, 0, read) [FD]
Line_31 $$ read = input.read(buffer) --> Line_36 $$ output.write(buffer, 0, read) [FD]
Line_29 $$ int read --> Line_36 $$ output.write(buffer, 0, read) [FD]
Line_22 $$ FileInputStream input = null --> Line_42 $$ IOUtil.closeQuietly(input) [FD]
Line_25 $$ input = new FileInputStream(sourceFile) --> Line_42 $$ IOUtil.closeQuietly(input) [FD]
Line_23 $$ FileOutputStream output = null --> Line_43 $$ IOUtil.closeQuietly(output) [FD]
Line_26 $$ output = new FileOutputStream(destFile) --> Line_43 $$ IOUtil.closeQuietly(output) [FD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_45 $$ destFile.setLastModified(sourceFile.lastModified()) [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_45 $$ destFile.setLastModified(sourceFile.lastModified()) [FD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_46 $$ FileUtils.deleteFileMultiFallback(sourceFile) [CD]
Line_2 $$ public static void renameFileMultiFallback(File sourceFile, File destFile) throws FileHandlingException --> Line_46 $$ FileUtils.deleteFileMultiFallback(sourceFile) [FD]
Line_35 $$ lengthLeft -= read --> Line_30 $$ while (lengthLeft > 0) [FD]
