Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_3 $$ StringBuilder contents = new StringBuilder() [CD]
Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_4 $$ StringOutputStream s = new StringOutputStream() [CD]
Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_5 $$ IOUtils.copy(SeleniumConfiguration.class.getResourceAsStream("default-user-extensions.js"), s) [CD]
Line_4 $$ StringOutputStream s = new StringOutputStream() --> Line_5 $$ IOUtils.copy(SeleniumConfiguration.class.getResourceAsStream("default-user-extensions.js"), s) [FD]
Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_6 $$ contents.append(s.toString()) [CD]
Line_3 $$ StringBuilder contents = new StringBuilder() --> Line_6 $$ contents.append(s.toString()) [FD]
Line_4 $$ StringOutputStream s = new StringOutputStream() --> Line_6 $$ contents.append(s.toString()) [FD]
Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_7 $$ File providedUserExtensions = seleniumConfiguration.getFile(ConfigurationPropertyKeys.SELENIUM_USER_EXTENSIONS, seleniumConfiguration.getDirectoryConfiguration().getInput(), false) [CD]
Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_7 $$ File providedUserExtensions = seleniumConfiguration.getFile(ConfigurationPropertyKeys.SELENIUM_USER_EXTENSIONS, seleniumConfiguration.getDirectoryConfiguration().getInput(), false) [FD]
Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_8 $$ if (providedUserExtensions != null) [CD]
Line_7 $$ File providedUserExtensions = seleniumConfiguration.getFile(ConfigurationPropertyKeys.SELENIUM_USER_EXTENSIONS, seleniumConfiguration.getDirectoryConfiguration().getInput(), false) --> Line_8 $$ if (providedUserExtensions != null) [FD]
Line_8 $$ if (providedUserExtensions != null) --> Line_9 $$ contents.append(FileUtils.readFileToString(providedUserExtensions, null)) [CD]
Line_3 $$ StringBuilder contents = new StringBuilder() --> Line_9 $$ contents.append(FileUtils.readFileToString(providedUserExtensions, null)) [FD]
Line_7 $$ File providedUserExtensions = seleniumConfiguration.getFile(ConfigurationPropertyKeys.SELENIUM_USER_EXTENSIONS, seleniumConfiguration.getDirectoryConfiguration().getInput(), false) --> Line_9 $$ contents.append(FileUtils.readFileToString(providedUserExtensions, null)) [FD]
Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_11 $$ seleniumUserExtensions = new File(seleniumConfiguration.getDirectoryConfiguration().getInput(), "user-extensions.js") [FD]
Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_12 $$ FileUtils.forceMkdir(seleniumUserExtensions.getParentFile()) [CD]
Line_2 $$ private void initUserExtensions(SeleniumConfiguration seleniumConfiguration) throws IOException --> Line_13 $$ FileUtils.writeStringToFile(seleniumUserExtensions, contents.toString(), null) [CD]
Line_3 $$ StringBuilder contents = new StringBuilder() --> Line_13 $$ FileUtils.writeStringToFile(seleniumUserExtensions, contents.toString(), null) [FD]
