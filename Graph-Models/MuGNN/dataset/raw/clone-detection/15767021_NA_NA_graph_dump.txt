Line_2 $$ private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) --> Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) [CD]
Line_2 $$ private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) --> Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) [FD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_4 $$ File selectedFile = documentFileChooser.getSelectedFile() [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_5 $$ File collectionCopyFile [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_6 $$ String newDocumentName = selectedFile.getName() [CD]
Line_4 $$ File selectedFile = documentFileChooser.getSelectedFile() --> Line_6 $$ String newDocumentName = selectedFile.getName() [FD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_7 $$ Document newDocument = new Document(newDocumentName) [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_8 $$ if (activeCollection.containsDocument(newDocument)) [CD]
Line_7 $$ Document newDocument = new Document(newDocumentName) --> Line_8 $$ if (activeCollection.containsDocument(newDocument)) [FD]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) --> Line_9 $$ int matchingFilenameDistinguisher = 1 [CD]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) --> Line_10 $$ StringBuilder distinguisherReplacer = new StringBuilder() [CD]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) --> Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") [CD]
Line_6 $$ String newDocumentName = selectedFile.getName() --> Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") [FD]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) --> Line_12 $$ newDocument.setDocumentName(newDocumentName) [CD]
Line_7 $$ Document newDocument = new Document(newDocumentName) --> Line_12 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_6 $$ String newDocumentName = selectedFile.getName() --> Line_12 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") --> Line_12 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) --> Line_13 $$ while (activeCollection.containsDocument(newDocument)) [CD]
Line_7 $$ Document newDocument = new Document(newDocumentName) --> Line_13 $$ while (activeCollection.containsDocument(newDocument)) [FD]
Line_13 $$ while (activeCollection.containsDocument(newDocument)) --> Line_14 $$ matchingFilenameDistinguisher++ [CD]
Line_9 $$ int matchingFilenameDistinguisher = 1 --> Line_14 $$ matchingFilenameDistinguisher++ [FD]
Line_13 $$ while (activeCollection.containsDocument(newDocument)) --> Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() [CD]
Line_6 $$ String newDocumentName = selectedFile.getName() --> Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() [FD]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") --> Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() [FD]
Line_10 $$ StringBuilder distinguisherReplacer = new StringBuilder() --> Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() [FD]
Line_13 $$ while (activeCollection.containsDocument(newDocument)) --> Line_16 $$ newDocument.setDocumentName(newDocumentName) [CD]
Line_7 $$ Document newDocument = new Document(newDocumentName) --> Line_16 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() --> Line_16 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_6 $$ String newDocumentName = selectedFile.getName() --> Line_16 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") --> Line_16 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_19 $$ Scanner tokenizer = null [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_20 $$ FileChannel fileSource = null [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_21 $$ FileChannel collectionDestination = null [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>() [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_23 $$ Index collectionIndex = activeCollection.getIndex() [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_24 $$ int documentTermMaxFrequency = 0 [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_25 $$ int currentTermFrequency [CD]
Line_19 $$ Scanner tokenizer = null --> Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) [FD]
Line_19 $$ Scanner tokenizer = null --> Line_28 $$ tokenizer.useDelimiter(Pattern.compile("\\p [FD]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) --> Line_28 $$ tokenizer.useDelimiter(Pattern.compile("\\p [FD]
Line_19 $$ Scanner tokenizer = null --> Line_30 $$ while (tokenizer.hasNext()) [FD]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) --> Line_30 $$ while (tokenizer.hasNext()) [FD]
Line_30 $$ while (tokenizer.hasNext()) --> Line_31 $$ nextToken = tokenizer.next().toLowerCase() [CD]
Line_29 $$ String nextToken --> Line_31 $$ nextToken = tokenizer.next().toLowerCase() [FD]
Line_19 $$ Scanner tokenizer = null --> Line_31 $$ nextToken = tokenizer.next().toLowerCase() [FD]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) --> Line_31 $$ nextToken = tokenizer.next().toLowerCase() [FD]
Line_30 $$ while (tokenizer.hasNext()) --> Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1) [CD]
Line_31 $$ nextToken = tokenizer.next().toLowerCase() --> Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1) [FD]
Line_29 $$ String nextToken --> Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1) [FD]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>() --> Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1) [FD]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>() --> Line_35 $$ for (String term : termHashMap.keySet()) [FD]
Line_34 $$ Term newTerm --> Line_36 $$ newTerm = new Term(term) [FD]
Line_23 $$ Index collectionIndex = activeCollection.getIndex() --> Line_37 $$ if (!collectionIndex.termExists(newTerm)) [FD]
Line_34 $$ Term newTerm --> Line_37 $$ if (!collectionIndex.termExists(newTerm)) [FD]
Line_36 $$ newTerm = new Term(term) --> Line_37 $$ if (!collectionIndex.termExists(newTerm)) [FD]
Line_25 $$ int currentTermFrequency --> Line_38 $$ currentTermFrequency = termHashMap.get(term) [FD]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>() --> Line_38 $$ currentTermFrequency = termHashMap.get(term) [FD]
Line_35 $$ for (String term : termHashMap.keySet()) --> Line_38 $$ currentTermFrequency = termHashMap.get(term) [FD]
Line_25 $$ int currentTermFrequency --> Line_39 $$ if (currentTermFrequency > documentTermMaxFrequency) [FD]
Line_38 $$ currentTermFrequency = termHashMap.get(term) --> Line_39 $$ if (currentTermFrequency > documentTermMaxFrequency) [FD]
Line_24 $$ int documentTermMaxFrequency = 0 --> Line_39 $$ if (currentTermFrequency > documentTermMaxFrequency) [FD]
Line_23 $$ Index collectionIndex = activeCollection.getIndex() --> Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_34 $$ Term newTerm --> Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_36 $$ newTerm = new Term(term) --> Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_7 $$ Document newDocument = new Document(newDocumentName) --> Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_25 $$ int currentTermFrequency --> Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_38 $$ currentTermFrequency = termHashMap.get(term) --> Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_7 $$ Document newDocument = new Document(newDocumentName) --> Line_42 $$ activeCollection.addDocument(newDocument) [FD]
Line_5 $$ File collectionCopyFile --> Line_45 $$ collectionCopyFile = new File(userHome + fileSeparator + "Infrared" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName) [FD]
Line_5 $$ File collectionCopyFile --> Line_46 $$ collectionCopyFile.createNewFile() [FD]
Line_45 $$ collectionCopyFile = new File(userHome + fileSeparator + "Infrared" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName) --> Line_46 $$ collectionCopyFile.createNewFile() [FD]
Line_20 $$ FileChannel fileSource = null --> Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel() [FD]
Line_21 $$ FileChannel collectionDestination = null --> Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel() [FD]
Line_21 $$ FileChannel collectionDestination = null --> Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size()) [FD]
Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel() --> Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size()) [FD]
Line_20 $$ FileChannel fileSource = null --> Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size()) [FD]
Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel() --> Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size()) [FD]
Line_19 $$ Scanner tokenizer = null --> Line_58 $$ if (tokenizer != null) [FD]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) --> Line_58 $$ if (tokenizer != null) [FD]
Line_20 $$ FileChannel fileSource = null --> Line_59 $$ if (fileSource != null) [FD]
Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel() --> Line_59 $$ if (fileSource != null) [FD]
Line_21 $$ FileChannel collectionDestination = null --> Line_60 $$ if (collectionDestination != null) [FD]
Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel() --> Line_60 $$ if (collectionDestination != null) [FD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_65 $$ processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING)) [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_66 $$ if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) [CD]
Line_2 $$ private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) --> Line_66 $$ if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) [FD]
