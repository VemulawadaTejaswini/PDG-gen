Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_3 $$ boolean useRegion = false [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_4 $$ int left = 0 [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_5 $$ int top = 0 [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_6 $$ int width = 50 [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_7 $$ int height = 50 [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_8 $$ boolean useleftDouble = false [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_9 $$ Double leftDouble = 0.0 [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_10 $$ boolean usetopDouble = false [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_11 $$ Double topDouble = 0.0 [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_12 $$ boolean usewidthDouble = false [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_13 $$ Double widthDouble = 0.0 [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_14 $$ boolean useheightDouble = false [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_15 $$ Double heightDouble = 0.0 [CD]
Line_2 $$ public BufferedImage extract() throws DjatokaException --> Line_16 $$ if (params.getRegion() != null) [CD]
Line_16 $$ if (params.getRegion() != null) --> Line_17 $$ StringTokenizer st = new StringTokenizer(params.getRegion(), " [CD]
Line_16 $$ if (params.getRegion() != null) --> Line_18 $$ String token [CD]
Line_16 $$ if (params.getRegion() != null) --> Line_19 $$ if ((token = st.nextToken()).contains(".")) [CD]
Line_18 $$ String token --> Line_19 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_17 $$ StringTokenizer st = new StringTokenizer(params.getRegion(), " --> Line_19 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_20 $$ topDouble = Double.parseDouble(token) [CD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_20 $$ topDouble = Double.parseDouble(token) [FD]
Line_11 $$ Double topDouble = 0.0 --> Line_20 $$ topDouble = Double.parseDouble(token) [FD]
Line_18 $$ String token --> Line_20 $$ topDouble = Double.parseDouble(token) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_21 $$ usetopDouble = true [CD]
Line_10 $$ boolean usetopDouble = false --> Line_21 $$ usetopDouble = true [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_22 $$ top = Integer.parseInt(token) [CD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_22 $$ top = Integer.parseInt(token) [FD]
Line_5 $$ int top = 0 --> Line_22 $$ top = Integer.parseInt(token) [FD]
Line_18 $$ String token --> Line_22 $$ top = Integer.parseInt(token) [FD]
Line_16 $$ if (params.getRegion() != null) --> Line_23 $$ if ((token = st.nextToken()).contains(".")) [CD]
Line_18 $$ String token --> Line_23 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_23 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_17 $$ StringTokenizer st = new StringTokenizer(params.getRegion(), " --> Line_23 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_24 $$ leftDouble = Double.parseDouble(token) [CD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_24 $$ leftDouble = Double.parseDouble(token) [FD]
Line_9 $$ Double leftDouble = 0.0 --> Line_24 $$ leftDouble = Double.parseDouble(token) [FD]
Line_18 $$ String token --> Line_24 $$ leftDouble = Double.parseDouble(token) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_24 $$ leftDouble = Double.parseDouble(token) [FD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_25 $$ useleftDouble = true [CD]
Line_8 $$ boolean useleftDouble = false --> Line_25 $$ useleftDouble = true [FD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_26 $$ left = Integer.parseInt(token) [CD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_26 $$ left = Integer.parseInt(token) [FD]
Line_4 $$ int left = 0 --> Line_26 $$ left = Integer.parseInt(token) [FD]
Line_18 $$ String token --> Line_26 $$ left = Integer.parseInt(token) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_26 $$ left = Integer.parseInt(token) [FD]
Line_16 $$ if (params.getRegion() != null) --> Line_27 $$ if ((token = st.nextToken()).contains(".")) [CD]
Line_18 $$ String token --> Line_27 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_27 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_27 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_17 $$ StringTokenizer st = new StringTokenizer(params.getRegion(), " --> Line_27 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_27 $$ if ((token = st.nextToken()).contains(".")) --> Line_28 $$ heightDouble = Double.parseDouble(token) [CD]
Line_27 $$ if ((token = st.nextToken()).contains(".")) --> Line_28 $$ heightDouble = Double.parseDouble(token) [FD]
Line_15 $$ Double heightDouble = 0.0 --> Line_28 $$ heightDouble = Double.parseDouble(token) [FD]
Line_18 $$ String token --> Line_28 $$ heightDouble = Double.parseDouble(token) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_28 $$ heightDouble = Double.parseDouble(token) [FD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_28 $$ heightDouble = Double.parseDouble(token) [FD]
Line_27 $$ if ((token = st.nextToken()).contains(".")) --> Line_29 $$ useheightDouble = true [CD]
Line_14 $$ boolean useheightDouble = false --> Line_29 $$ useheightDouble = true [FD]
Line_27 $$ if ((token = st.nextToken()).contains(".")) --> Line_30 $$ height = Integer.parseInt(token) [CD]
Line_27 $$ if ((token = st.nextToken()).contains(".")) --> Line_30 $$ height = Integer.parseInt(token) [FD]
Line_7 $$ int height = 50 --> Line_30 $$ height = Integer.parseInt(token) [FD]
Line_18 $$ String token --> Line_30 $$ height = Integer.parseInt(token) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_30 $$ height = Integer.parseInt(token) [FD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_30 $$ height = Integer.parseInt(token) [FD]
Line_16 $$ if (params.getRegion() != null) --> Line_31 $$ if ((token = st.nextToken()).contains(".")) [CD]
Line_18 $$ String token --> Line_31 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_31 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_31 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_27 $$ if ((token = st.nextToken()).contains(".")) --> Line_31 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_17 $$ StringTokenizer st = new StringTokenizer(params.getRegion(), " --> Line_31 $$ if ((token = st.nextToken()).contains(".")) [FD]
Line_31 $$ if ((token = st.nextToken()).contains(".")) --> Line_32 $$ widthDouble = Double.parseDouble(token) [CD]
Line_31 $$ if ((token = st.nextToken()).contains(".")) --> Line_32 $$ widthDouble = Double.parseDouble(token) [FD]
Line_13 $$ Double widthDouble = 0.0 --> Line_32 $$ widthDouble = Double.parseDouble(token) [FD]
Line_18 $$ String token --> Line_32 $$ widthDouble = Double.parseDouble(token) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_32 $$ widthDouble = Double.parseDouble(token) [FD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_32 $$ widthDouble = Double.parseDouble(token) [FD]
Line_27 $$ if ((token = st.nextToken()).contains(".")) --> Line_32 $$ widthDouble = Double.parseDouble(token) [FD]
Line_31 $$ if ((token = st.nextToken()).contains(".")) --> Line_33 $$ usewidthDouble = true [CD]
Line_12 $$ boolean usewidthDouble = false --> Line_33 $$ usewidthDouble = true [FD]
Line_31 $$ if ((token = st.nextToken()).contains(".")) --> Line_34 $$ width = Integer.parseInt(token) [CD]
Line_31 $$ if ((token = st.nextToken()).contains(".")) --> Line_34 $$ width = Integer.parseInt(token) [FD]
Line_6 $$ int width = 50 --> Line_34 $$ width = Integer.parseInt(token) [FD]
Line_18 $$ String token --> Line_34 $$ width = Integer.parseInt(token) [FD]
Line_19 $$ if ((token = st.nextToken()).contains(".")) --> Line_34 $$ width = Integer.parseInt(token) [FD]
Line_23 $$ if ((token = st.nextToken()).contains(".")) --> Line_34 $$ width = Integer.parseInt(token) [FD]
Line_27 $$ if ((token = st.nextToken()).contains(".")) --> Line_34 $$ width = Integer.parseInt(token) [FD]
Line_16 $$ if (params.getRegion() != null) --> Line_35 $$ useRegion = true [CD]
Line_3 $$ boolean useRegion = false --> Line_35 $$ useRegion = true [FD]
Line_38 $$ if (is != null) --> Line_39 $$ File f = File.createTempFile("tmp", ".jp2") [CD]
Line_38 $$ if (is != null) --> Line_40 $$ f.deleteOnExit() [CD]
Line_39 $$ File f = File.createTempFile("tmp", ".jp2") --> Line_40 $$ f.deleteOnExit() [FD]
Line_38 $$ if (is != null) --> Line_41 $$ FileOutputStream fos = new FileOutputStream(f) [CD]
Line_38 $$ if (is != null) --> Line_42 $$ sourceFile = f.getAbsolutePath() [CD]
Line_39 $$ File f = File.createTempFile("tmp", ".jp2") --> Line_42 $$ sourceFile = f.getAbsolutePath() [FD]
Line_38 $$ if (is != null) --> Line_43 $$ IOUtils.copyStream(is, fos) [CD]
Line_41 $$ FileOutputStream fos = new FileOutputStream(f) --> Line_43 $$ IOUtils.copyStream(is, fos) [FD]
Line_38 $$ if (is != null) --> Line_44 $$ is.close() [CD]
Line_38 $$ if (is != null) --> Line_45 $$ fos.close() [CD]
Line_41 $$ FileOutputStream fos = new FileOutputStream(f) --> Line_45 $$ fos.close() [FD]
Line_53 $$ Jp2_family_src jp2_family_in = new Jp2_family_src() --> Line_55 $$ jp2_family_in.Open(sourceFile, true) [FD]
Line_51 $$ Jp2_source inputSource = new Jp2_source() --> Line_56 $$ inputSource.Open(jp2_family_in, loc) [FD]
Line_53 $$ Jp2_family_src jp2_family_in = new Jp2_family_src() --> Line_56 $$ inputSource.Open(jp2_family_in, loc) [FD]
Line_54 $$ Jp2_locator loc = new Jp2_locator() --> Line_56 $$ inputSource.Open(jp2_family_in, loc) [FD]
Line_51 $$ Jp2_source inputSource = new Jp2_source() --> Line_57 $$ inputSource.Read_header() [FD]
Line_52 $$ Kdu_compressed_source input = null --> Line_58 $$ input = inputSource [FD]
Line_51 $$ Jp2_source inputSource = new Jp2_source() --> Line_58 $$ input = inputSource [FD]
Line_59 $$ Kdu_codestream codestream = new Kdu_codestream() --> Line_60 $$ codestream.Create(input) [FD]
Line_52 $$ Kdu_compressed_source input = null --> Line_60 $$ codestream.Create(input) [FD]
Line_58 $$ input = inputSource --> Line_60 $$ codestream.Create(input) [FD]
Line_51 $$ Jp2_source inputSource = new Jp2_source() --> Line_62 $$ channels.Configure(inputSource, false) [FD]
Line_61 $$ Kdu_channel_mapping channels = new Kdu_channel_mapping() --> Line_62 $$ channels.Configure(inputSource, false) [FD]
Line_59 $$ Kdu_codestream codestream = new Kdu_codestream() --> Line_62 $$ channels.Configure(inputSource, false) [FD]
Line_61 $$ Kdu_channel_mapping channels = new Kdu_channel_mapping() --> Line_63 $$ int ref_component = channels.Get_source_component(0) [FD]
Line_63 $$ int ref_component = channels.Get_source_component(0) --> Line_64 $$ Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream) [FD]
Line_61 $$ Kdu_channel_mapping channels = new Kdu_channel_mapping() --> Line_64 $$ Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream) [FD]
Line_59 $$ Kdu_codestream codestream = new Kdu_codestream() --> Line_64 $$ Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream) [FD]
Line_59 $$ Kdu_codestream codestream = new Kdu_codestream() --> Line_66 $$ codestream.Get_dims(ref_component, image_dims) [FD]
Line_63 $$ int ref_component = channels.Get_source_component(0) --> Line_66 $$ codestream.Get_dims(ref_component, image_dims) [FD]
Line_65 $$ Kdu_dims image_dims = new Kdu_dims() --> Line_66 $$ codestream.Get_dims(ref_component, image_dims) [FD]
Line_65 $$ Kdu_dims image_dims = new Kdu_dims() --> Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() [FD]
Line_65 $$ Kdu_dims image_dims = new Kdu_dims() --> Line_68 $$ Kdu_coords imagePosition = image_dims.Access_pos() [FD]
Line_4 $$ int left = 0 --> Line_69 $$ left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x()) [FD]
Line_26 $$ left = Integer.parseInt(token) --> Line_69 $$ left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x()) [FD]
Line_68 $$ Kdu_coords imagePosition = image_dims.Access_pos() --> Line_69 $$ left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x()) [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_69 $$ left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x()) [FD]
Line_5 $$ int top = 0 --> Line_70 $$ top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y()) [FD]
Line_22 $$ top = Integer.parseInt(token) --> Line_70 $$ top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y()) [FD]
Line_68 $$ Kdu_coords imagePosition = image_dims.Access_pos() --> Line_70 $$ top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y()) [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_70 $$ top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y()) [FD]
Line_7 $$ int height = 50 --> Line_71 $$ height = (int) Math.round(heightDouble * imageSize.Get_y()) [FD]
Line_30 $$ height = Integer.parseInt(token) --> Line_71 $$ height = (int) Math.round(heightDouble * imageSize.Get_y()) [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_71 $$ height = (int) Math.round(heightDouble * imageSize.Get_y()) [FD]
Line_6 $$ int width = 50 --> Line_72 $$ width = (int) Math.round(widthDouble * imageSize.Get_x()) [FD]
Line_34 $$ width = Integer.parseInt(token) --> Line_72 $$ width = (int) Math.round(widthDouble * imageSize.Get_x()) [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_72 $$ width = (int) Math.round(widthDouble * imageSize.Get_x()) [FD]
Line_73 $$ if (useRegion) --> Line_74 $$ imageSize.Set_x(width) [CD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_74 $$ imageSize.Set_x(width) [FD]
Line_6 $$ int width = 50 --> Line_74 $$ imageSize.Set_x(width) [FD]
Line_34 $$ width = Integer.parseInt(token) --> Line_74 $$ imageSize.Set_x(width) [FD]
Line_72 $$ width = (int) Math.round(widthDouble * imageSize.Get_x()) --> Line_74 $$ imageSize.Set_x(width) [FD]
Line_73 $$ if (useRegion) --> Line_75 $$ imageSize.Set_y(height) [CD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_75 $$ imageSize.Set_y(height) [FD]
Line_7 $$ int height = 50 --> Line_75 $$ imageSize.Set_y(height) [FD]
Line_30 $$ height = Integer.parseInt(token) --> Line_75 $$ imageSize.Set_y(height) [FD]
Line_71 $$ height = (int) Math.round(heightDouble * imageSize.Get_y()) --> Line_75 $$ imageSize.Set_y(height) [FD]
Line_73 $$ if (useRegion) --> Line_76 $$ imagePosition.Set_x(left) [CD]
Line_68 $$ Kdu_coords imagePosition = image_dims.Access_pos() --> Line_76 $$ imagePosition.Set_x(left) [FD]
Line_4 $$ int left = 0 --> Line_76 $$ imagePosition.Set_x(left) [FD]
Line_26 $$ left = Integer.parseInt(token) --> Line_76 $$ imagePosition.Set_x(left) [FD]
Line_69 $$ left = imagePosition.Get_x() + (int) Math.round(leftDouble * imageSize.Get_x()) --> Line_76 $$ imagePosition.Set_x(left) [FD]
Line_73 $$ if (useRegion) --> Line_77 $$ imagePosition.Set_y(top) [CD]
Line_68 $$ Kdu_coords imagePosition = image_dims.Access_pos() --> Line_77 $$ imagePosition.Set_y(top) [FD]
Line_5 $$ int top = 0 --> Line_77 $$ imagePosition.Set_y(top) [FD]
Line_22 $$ top = Integer.parseInt(token) --> Line_77 $$ imagePosition.Set_y(top) [FD]
Line_70 $$ top = imagePosition.Get_y() + (int) Math.round(topDouble * imageSize.Get_y()) --> Line_77 $$ imagePosition.Set_y(top) [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_80 $$ imageSize.Set_x(imageSize.Get_x() * ref_expansion.Get_x()) [FD]
Line_64 $$ Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream) --> Line_80 $$ imageSize.Set_x(imageSize.Get_x() * ref_expansion.Get_x()) [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_81 $$ imageSize.Set_y(imageSize.Get_y() * ref_expansion.Get_y()) [FD]
Line_64 $$ Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream) --> Line_81 $$ imageSize.Set_y(imageSize.Get_y() * ref_expansion.Get_y()) [FD]
Line_68 $$ Kdu_coords imagePosition = image_dims.Access_pos() --> Line_82 $$ imagePosition.Set_x(imagePosition.Get_x() * ref_expansion.Get_x() / reduce - ((ref_expansion.Get_x() / reduce - 1) / 2)) [FD]
Line_64 $$ Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream) --> Line_82 $$ imagePosition.Set_x(imagePosition.Get_x() * ref_expansion.Get_x() / reduce - ((ref_expansion.Get_x() / reduce - 1) / 2)) [FD]
Line_68 $$ Kdu_coords imagePosition = image_dims.Access_pos() --> Line_83 $$ imagePosition.Set_y(imagePosition.Get_y() * ref_expansion.Get_y() / reduce - ((ref_expansion.Get_y() / reduce - 1) / 2)) [FD]
Line_64 $$ Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream) --> Line_83 $$ imagePosition.Set_y(imagePosition.Get_y() * ref_expansion.Get_y() / reduce - ((ref_expansion.Get_y() / reduce - 1) / 2)) [FD]
Line_84 $$ Kdu_dims view_dims = new Kdu_dims() --> Line_85 $$ view_dims.Assign(image_dims) [FD]
Line_65 $$ Kdu_dims image_dims = new Kdu_dims() --> Line_85 $$ view_dims.Assign(image_dims) [FD]
Line_84 $$ Kdu_dims view_dims = new Kdu_dims() --> Line_86 $$ view_dims.Access_size().Set_x(imageSize.Get_x()) [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_86 $$ view_dims.Access_size().Set_x(imageSize.Get_x()) [FD]
Line_84 $$ Kdu_dims view_dims = new Kdu_dims() --> Line_87 $$ view_dims.Access_size().Set_y(imageSize.Get_y()) [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_87 $$ view_dims.Access_size().Set_y(imageSize.Get_y()) [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_88 $$ int region_buf_size = imageSize.Get_x() * imageSize.Get_y() [FD]
Line_90 $$ Kdu_region_decompressor decompressor = new Kdu_region_decompressor() --> Line_91 $$ decompressor.Start(codestream, channels, -1, params.getLevelReductionFactor(), 16384, image_dims, ref_expansion, new Kdu_coords(1, 1), false, Kdu_global.KDU_WANT_OUTPUT_COMPONENTS) [FD]
Line_59 $$ Kdu_codestream codestream = new Kdu_codestream() --> Line_91 $$ decompressor.Start(codestream, channels, -1, params.getLevelReductionFactor(), 16384, image_dims, ref_expansion, new Kdu_coords(1, 1), false, Kdu_global.KDU_WANT_OUTPUT_COMPONENTS) [FD]
Line_61 $$ Kdu_channel_mapping channels = new Kdu_channel_mapping() --> Line_91 $$ decompressor.Start(codestream, channels, -1, params.getLevelReductionFactor(), 16384, image_dims, ref_expansion, new Kdu_coords(1, 1), false, Kdu_global.KDU_WANT_OUTPUT_COMPONENTS) [FD]
Line_65 $$ Kdu_dims image_dims = new Kdu_dims() --> Line_91 $$ decompressor.Start(codestream, channels, -1, params.getLevelReductionFactor(), 16384, image_dims, ref_expansion, new Kdu_coords(1, 1), false, Kdu_global.KDU_WANT_OUTPUT_COMPONENTS) [FD]
Line_64 $$ Kdu_coords ref_expansion = getReferenceExpansion(ref_component, channels, codestream) --> Line_91 $$ decompressor.Start(codestream, channels, -1, params.getLevelReductionFactor(), 16384, image_dims, ref_expansion, new Kdu_coords(1, 1), false, Kdu_global.KDU_WANT_OUTPUT_COMPONENTS) [FD]
Line_84 $$ Kdu_dims view_dims = new Kdu_dims() --> Line_94 $$ Kdu_coords viewSize = view_dims.Access_size() [FD]
Line_93 $$ Kdu_dims incomplete_region = new Kdu_dims() --> Line_95 $$ incomplete_region.Assign(image_dims) [FD]
Line_65 $$ Kdu_dims image_dims = new Kdu_dims() --> Line_95 $$ incomplete_region.Assign(image_dims) [FD]
Line_94 $$ Kdu_coords viewSize = view_dims.Access_size() --> Line_96 $$ int[] imgBuffer = new int[viewSize.Get_x() * viewSize.Get_y()] [FD]
Line_90 $$ Kdu_region_decompressor decompressor = new Kdu_region_decompressor() --> Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) [FD]
Line_89 $$ int[] region_buf = new int[region_buf_size] --> Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) [FD]
Line_88 $$ int region_buf_size = imageSize.Get_x() * imageSize.Get_y() --> Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) [FD]
Line_93 $$ Kdu_dims incomplete_region = new Kdu_dims() --> Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) [FD]
Line_92 $$ Kdu_dims new_region = new Kdu_dims() --> Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) [FD]
Line_65 $$ Kdu_dims image_dims = new Kdu_dims() --> Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) [FD]
Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) --> Line_99 $$ Kdu_coords newOffset = new_region.Access_pos() [CD]
Line_92 $$ Kdu_dims new_region = new Kdu_dims() --> Line_99 $$ Kdu_coords newOffset = new_region.Access_pos() [FD]
Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) --> Line_100 $$ Kdu_coords newSize = new_region.Access_size() [CD]
Line_92 $$ Kdu_dims new_region = new Kdu_dims() --> Line_100 $$ Kdu_coords newSize = new_region.Access_size() [FD]
Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) --> Line_101 $$ newOffset.Subtract(view_dims.Access_pos()) [CD]
Line_99 $$ Kdu_coords newOffset = new_region.Access_pos() --> Line_101 $$ newOffset.Subtract(view_dims.Access_pos()) [FD]
Line_84 $$ Kdu_dims view_dims = new Kdu_dims() --> Line_101 $$ newOffset.Subtract(view_dims.Access_pos()) [FD]
Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) --> Line_102 $$ kduBuffer = region_buf [CD]
Line_97 $$ int[] kduBuffer = null --> Line_102 $$ kduBuffer = region_buf [FD]
Line_89 $$ int[] region_buf = new int[region_buf_size] --> Line_102 $$ kduBuffer = region_buf [FD]
Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) --> Line_103 $$ int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x() [CD]
Line_99 $$ Kdu_coords newOffset = new_region.Access_pos() --> Line_103 $$ int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x() [FD]
Line_94 $$ Kdu_coords viewSize = view_dims.Access_size() --> Line_103 $$ int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x() [FD]
Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) --> Line_104 $$ int kduBufferIdx = 0 [CD]
Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) --> Line_105 $$ int xDiff = viewSize.Get_x() - newSize.Get_x() [CD]
Line_94 $$ Kdu_coords viewSize = view_dims.Access_size() --> Line_105 $$ int xDiff = viewSize.Get_x() - newSize.Get_x() [FD]
Line_100 $$ Kdu_coords newSize = new_region.Access_size() --> Line_105 $$ int xDiff = viewSize.Get_x() - newSize.Get_x() [FD]
Line_98 $$ while (decompressor.Process(region_buf, image_dims.Access_pos(), 0, 0, region_buf_size, incomplete_region, new_region)) --> Line_106 $$ for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) [CD]
Line_100 $$ Kdu_coords newSize = new_region.Access_size() --> Line_106 $$ for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) [FD]
Line_103 $$ int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x() --> Line_106 $$ for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) [FD]
Line_105 $$ int xDiff = viewSize.Get_x() - newSize.Get_x() --> Line_106 $$ for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) [FD]
Line_106 $$ for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) --> Line_107 $$ for (int i = 0; i < newSize.Get_x(); i++) [CD]
Line_100 $$ Kdu_coords newSize = new_region.Access_size() --> Line_107 $$ for (int i = 0; i < newSize.Get_x(); i++) [FD]
Line_107 $$ for (int i = 0; i < newSize.Get_x(); i++) --> Line_108 $$ imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++] [CD]
Line_106 $$ for (int j = 0; j < newSize.Get_y(); j++, imgBuffereIdx += xDiff) --> Line_108 $$ imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++] [FD]
Line_103 $$ int imgBuffereIdx = newOffset.Get_x() + newOffset.Get_y() * viewSize.Get_x() --> Line_108 $$ imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++] [FD]
Line_104 $$ int kduBufferIdx = 0 --> Line_108 $$ imgBuffer[imgBuffereIdx++] = kduBuffer[kduBufferIdx++] [FD]
Line_67 $$ Kdu_coords imageSize = image_dims.Access_size() --> Line_112 $$ BufferedImage image = new BufferedImage(imageSize.Get_x(), imageSize.Get_y(), BufferedImage.TYPE_INT_RGB) [FD]
Line_112 $$ BufferedImage image = new BufferedImage(imageSize.Get_x(), imageSize.Get_y(), BufferedImage.TYPE_INT_RGB) --> Line_113 $$ image.setRGB(0, 0, viewSize.Get_x(), viewSize.Get_y(), imgBuffer, 0, viewSize.Get_x()) [FD]
Line_96 $$ int[] imgBuffer = new int[viewSize.Get_x() * viewSize.Get_y()] --> Line_113 $$ image.setRGB(0, 0, viewSize.Get_x(), viewSize.Get_y(), imgBuffer, 0, viewSize.Get_x()) [FD]
Line_94 $$ Kdu_coords viewSize = view_dims.Access_size() --> Line_113 $$ image.setRGB(0, 0, viewSize.Get_x(), viewSize.Get_y(), imgBuffer, 0, viewSize.Get_x()) [FD]
Line_114 $$ if (params.getRotationDegree() > 0) --> Line_115 $$ image = ImageProcessingUtils.rotate(image, params.getRotationDegree()) [CD]
Line_112 $$ BufferedImage image = new BufferedImage(imageSize.Get_x(), imageSize.Get_y(), BufferedImage.TYPE_INT_RGB) --> Line_115 $$ image = ImageProcessingUtils.rotate(image, params.getRotationDegree()) [FD]
Line_90 $$ Kdu_region_decompressor decompressor = new Kdu_region_decompressor() --> Line_117 $$ decompressor.Native_destroy() [FD]
Line_61 $$ Kdu_channel_mapping channels = new Kdu_channel_mapping() --> Line_118 $$ channels.Native_destroy() [FD]
Line_59 $$ Kdu_codestream codestream = new Kdu_codestream() --> Line_119 $$ if (codestream.Exists()) [FD]
Line_51 $$ Jp2_source inputSource = new Jp2_source() --> Line_120 $$ inputSource.Native_destroy() [FD]
Line_52 $$ Kdu_compressed_source input = null --> Line_121 $$ input.Native_destroy() [FD]
Line_58 $$ input = inputSource --> Line_121 $$ input.Native_destroy() [FD]
Line_53 $$ Jp2_family_src jp2_family_in = new Jp2_family_src() --> Line_122 $$ jp2_family_in.Native_destroy() [FD]
