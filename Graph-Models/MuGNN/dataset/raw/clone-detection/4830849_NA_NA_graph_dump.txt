Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_3 $$ final Connection connection = this.getConnection() [CD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_5 $$ connection.setAutoCommit(false) [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_7 $$ if (elementId != null) [FD]
Line_7 $$ if (elementId != null) --> Line_8 $$ queryString = queryString + " elementId = ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " FROM " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " INNER JOIN " + this.getPersistenceQueryElementsSchemaAndTableName() + " ON " + this.getPersistenceQueryElementsSchemaAndTableName() + ".element_id =  " + this.getPersistenceQueryStatisticsSchemaAndTableName() + ".element_id WHERE " --> Line_8 $$ queryString = queryString + " elementId = ? AND " [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_10 $$ if (contextName != null) [FD]
Line_10 $$ if (contextName != null) --> Line_11 $$ queryString = queryString + " context_name LIKE ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " FROM " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " INNER JOIN " + this.getPersistenceQueryElementsSchemaAndTableName() + " ON " + this.getPersistenceQueryElementsSchemaAndTableName() + ".element_id =  " + this.getPersistenceQueryStatisticsSchemaAndTableName() + ".element_id WHERE " --> Line_11 $$ queryString = queryString + " context_name LIKE ? AND " [FD]
Line_8 $$ queryString = queryString + " elementId = ? AND " --> Line_11 $$ queryString = queryString + " context_name LIKE ? AND " [FD]
Line_13 $$ if ((project != null)) --> Line_14 $$ queryString = queryString + " project LIKE ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " FROM " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " INNER JOIN " + this.getPersistenceQueryElementsSchemaAndTableName() + " ON " + this.getPersistenceQueryElementsSchemaAndTableName() + ".element_id =  " + this.getPersistenceQueryStatisticsSchemaAndTableName() + ".element_id WHERE " --> Line_14 $$ queryString = queryString + " project LIKE ? AND " [FD]
Line_8 $$ queryString = queryString + " elementId = ? AND " --> Line_14 $$ queryString = queryString + " project LIKE ? AND " [FD]
Line_11 $$ queryString = queryString + " context_name LIKE ? AND " --> Line_14 $$ queryString = queryString + " project LIKE ? AND " [FD]
Line_16 $$ if ((name != null)) --> Line_17 $$ queryString = queryString + " name LIKE ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " FROM " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " INNER JOIN " + this.getPersistenceQueryElementsSchemaAndTableName() + " ON " + this.getPersistenceQueryElementsSchemaAndTableName() + ".element_id =  " + this.getPersistenceQueryStatisticsSchemaAndTableName() + ".element_id WHERE " --> Line_17 $$ queryString = queryString + " name LIKE ? AND " [FD]
Line_8 $$ queryString = queryString + " elementId = ? AND " --> Line_17 $$ queryString = queryString + " name LIKE ? AND " [FD]
Line_11 $$ queryString = queryString + " context_name LIKE ? AND " --> Line_17 $$ queryString = queryString + " name LIKE ? AND " [FD]
Line_14 $$ queryString = queryString + " project LIKE ? AND " --> Line_17 $$ queryString = queryString + " name LIKE ? AND " [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_19 $$ if (dateFrom != null) [FD]
Line_19 $$ if (dateFrom != null) --> Line_20 $$ queryString = queryString + " start_timestamp >= ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " FROM " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " INNER JOIN " + this.getPersistenceQueryElementsSchemaAndTableName() + " ON " + this.getPersistenceQueryElementsSchemaAndTableName() + ".element_id =  " + this.getPersistenceQueryStatisticsSchemaAndTableName() + ".element_id WHERE " --> Line_20 $$ queryString = queryString + " start_timestamp >= ? AND " [FD]
Line_8 $$ queryString = queryString + " elementId = ? AND " --> Line_20 $$ queryString = queryString + " start_timestamp >= ? AND " [FD]
Line_11 $$ queryString = queryString + " context_name LIKE ? AND " --> Line_20 $$ queryString = queryString + " start_timestamp >= ? AND " [FD]
Line_14 $$ queryString = queryString + " project LIKE ? AND " --> Line_20 $$ queryString = queryString + " start_timestamp >= ? AND " [FD]
Line_17 $$ queryString = queryString + " name LIKE ? AND " --> Line_20 $$ queryString = queryString + " start_timestamp >= ? AND " [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_22 $$ if (dateTo != null) [FD]
Line_22 $$ if (dateTo != null) --> Line_23 $$ queryString = queryString + " start_timestamp <= ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " FROM " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " INNER JOIN " + this.getPersistenceQueryElementsSchemaAndTableName() + " ON " + this.getPersistenceQueryElementsSchemaAndTableName() + ".element_id =  " + this.getPersistenceQueryStatisticsSchemaAndTableName() + ".element_id WHERE " --> Line_23 $$ queryString = queryString + " start_timestamp <= ? AND " [FD]
Line_8 $$ queryString = queryString + " elementId = ? AND " --> Line_23 $$ queryString = queryString + " start_timestamp <= ? AND " [FD]
Line_11 $$ queryString = queryString + " context_name LIKE ? AND " --> Line_23 $$ queryString = queryString + " start_timestamp <= ? AND " [FD]
Line_14 $$ queryString = queryString + " project LIKE ? AND " --> Line_23 $$ queryString = queryString + " start_timestamp <= ? AND " [FD]
Line_17 $$ queryString = queryString + " name LIKE ? AND " --> Line_23 $$ queryString = queryString + " start_timestamp <= ? AND " [FD]
Line_20 $$ queryString = queryString + " start_timestamp >= ? AND " --> Line_23 $$ queryString = queryString + " start_timestamp <= ? AND " [FD]
Line_6 $$ String queryString = "DELETE " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " FROM " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " INNER JOIN " + this.getPersistenceQueryElementsSchemaAndTableName() + " ON " + this.getPersistenceQueryElementsSchemaAndTableName() + ".element_id =  " + this.getPersistenceQueryStatisticsSchemaAndTableName() + ".element_id WHERE " --> Line_25 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_8 $$ queryString = queryString + " elementId = ? AND " --> Line_25 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_11 $$ queryString = queryString + " context_name LIKE ? AND " --> Line_25 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_14 $$ queryString = queryString + " project LIKE ? AND " --> Line_25 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_17 $$ queryString = queryString + " name LIKE ? AND " --> Line_25 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_20 $$ queryString = queryString + " start_timestamp >= ? AND " --> Line_25 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_23 $$ queryString = queryString + " start_timestamp <= ? AND " --> Line_25 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_6 $$ String queryString = "DELETE " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " FROM " + this.getPersistenceQueryStatisticsSchemaAndTableName() + " INNER JOIN " + this.getPersistenceQueryElementsSchemaAndTableName() + " ON " + this.getPersistenceQueryElementsSchemaAndTableName() + ".element_id =  " + this.getPersistenceQueryStatisticsSchemaAndTableName() + ".element_id WHERE " --> Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_8 $$ queryString = queryString + " elementId = ? AND " --> Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_11 $$ queryString = queryString + " context_name LIKE ? AND " --> Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_14 $$ queryString = queryString + " project LIKE ? AND " --> Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_17 $$ queryString = queryString + " name LIKE ? AND " --> Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_20 $$ queryString = queryString + " start_timestamp >= ? AND " --> Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_23 $$ queryString = queryString + " start_timestamp <= ? AND " --> Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_25 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) --> Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_28 $$ if (elementId != null) [FD]
Line_28 $$ if (elementId != null) --> Line_29 $$ preparedStatement.setLong(indexCounter, elementId.longValue()) [CD]
Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_29 $$ preparedStatement.setLong(indexCounter, elementId.longValue()) [FD]
Line_27 $$ int indexCounter = 1 --> Line_29 $$ preparedStatement.setLong(indexCounter, elementId.longValue()) [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_29 $$ preparedStatement.setLong(indexCounter, elementId.longValue()) [FD]
Line_28 $$ if (elementId != null) --> Line_30 $$ indexCounter = indexCounter + 1 [CD]
Line_27 $$ int indexCounter = 1 --> Line_30 $$ indexCounter = indexCounter + 1 [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_32 $$ if (contextName != null) [FD]
Line_32 $$ if (contextName != null) --> Line_33 $$ preparedStatement.setString(indexCounter, contextName) [CD]
Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_33 $$ preparedStatement.setString(indexCounter, contextName) [FD]
Line_27 $$ int indexCounter = 1 --> Line_33 $$ preparedStatement.setString(indexCounter, contextName) [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_33 $$ preparedStatement.setString(indexCounter, contextName) [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_33 $$ preparedStatement.setString(indexCounter, contextName) [FD]
Line_32 $$ if (contextName != null) --> Line_34 $$ indexCounter = indexCounter + 1 [CD]
Line_27 $$ int indexCounter = 1 --> Line_34 $$ indexCounter = indexCounter + 1 [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_34 $$ indexCounter = indexCounter + 1 [FD]
Line_36 $$ if ((project != null)) --> Line_37 $$ preparedStatement.setString(indexCounter, project) [CD]
Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_37 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_27 $$ int indexCounter = 1 --> Line_37 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_37 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_34 $$ indexCounter = indexCounter + 1 --> Line_37 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_37 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_36 $$ if ((project != null)) --> Line_38 $$ indexCounter = indexCounter + 1 [CD]
Line_27 $$ int indexCounter = 1 --> Line_38 $$ indexCounter = indexCounter + 1 [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_38 $$ indexCounter = indexCounter + 1 [FD]
Line_34 $$ indexCounter = indexCounter + 1 --> Line_38 $$ indexCounter = indexCounter + 1 [FD]
Line_40 $$ if ((name != null)) --> Line_41 $$ preparedStatement.setString(indexCounter, name) [CD]
Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_41 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_27 $$ int indexCounter = 1 --> Line_41 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_41 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_34 $$ indexCounter = indexCounter + 1 --> Line_41 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_38 $$ indexCounter = indexCounter + 1 --> Line_41 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_41 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_40 $$ if ((name != null)) --> Line_42 $$ indexCounter = indexCounter + 1 [CD]
Line_27 $$ int indexCounter = 1 --> Line_42 $$ indexCounter = indexCounter + 1 [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_42 $$ indexCounter = indexCounter + 1 [FD]
Line_34 $$ indexCounter = indexCounter + 1 --> Line_42 $$ indexCounter = indexCounter + 1 [FD]
Line_38 $$ indexCounter = indexCounter + 1 --> Line_42 $$ indexCounter = indexCounter + 1 [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_44 $$ if (dateFrom != null) [FD]
Line_44 $$ if (dateFrom != null) --> Line_45 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [CD]
Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_45 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_27 $$ int indexCounter = 1 --> Line_45 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_45 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_34 $$ indexCounter = indexCounter + 1 --> Line_45 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_38 $$ indexCounter = indexCounter + 1 --> Line_45 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_42 $$ indexCounter = indexCounter + 1 --> Line_45 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_45 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_44 $$ if (dateFrom != null) --> Line_46 $$ indexCounter = indexCounter + 1 [CD]
Line_27 $$ int indexCounter = 1 --> Line_46 $$ indexCounter = indexCounter + 1 [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_46 $$ indexCounter = indexCounter + 1 [FD]
Line_34 $$ indexCounter = indexCounter + 1 --> Line_46 $$ indexCounter = indexCounter + 1 [FD]
Line_38 $$ indexCounter = indexCounter + 1 --> Line_46 $$ indexCounter = indexCounter + 1 [FD]
Line_42 $$ indexCounter = indexCounter + 1 --> Line_46 $$ indexCounter = indexCounter + 1 [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_48 $$ if (dateTo != null) [FD]
Line_48 $$ if (dateTo != null) --> Line_49 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [CD]
Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_49 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_27 $$ int indexCounter = 1 --> Line_49 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_49 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_34 $$ indexCounter = indexCounter + 1 --> Line_49 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_38 $$ indexCounter = indexCounter + 1 --> Line_49 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_42 $$ indexCounter = indexCounter + 1 --> Line_49 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_46 $$ indexCounter = indexCounter + 1 --> Line_49 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_2 $$ public synchronized void deletePersistenceQueryStatistics(Integer elementId, String contextName, String project, String name, Date dateFrom, Date dateTo) throws DatabaseException --> Line_49 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_48 $$ if (dateTo != null) --> Line_50 $$ indexCounter = indexCounter + 1 [CD]
Line_27 $$ int indexCounter = 1 --> Line_50 $$ indexCounter = indexCounter + 1 [FD]
Line_30 $$ indexCounter = indexCounter + 1 --> Line_50 $$ indexCounter = indexCounter + 1 [FD]
Line_34 $$ indexCounter = indexCounter + 1 --> Line_50 $$ indexCounter = indexCounter + 1 [FD]
Line_38 $$ indexCounter = indexCounter + 1 --> Line_50 $$ indexCounter = indexCounter + 1 [FD]
Line_42 $$ indexCounter = indexCounter + 1 --> Line_50 $$ indexCounter = indexCounter + 1 [FD]
Line_46 $$ indexCounter = indexCounter + 1 --> Line_50 $$ indexCounter = indexCounter + 1 [FD]
Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_52 $$ preparedStatement.executeUpdate() [FD]
Line_26 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_53 $$ preparedStatement.close() [FD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_54 $$ connection.commit() [FD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_57 $$ connection.rollback() [FD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_64 $$ this.releaseConnection(connection) [FD]
