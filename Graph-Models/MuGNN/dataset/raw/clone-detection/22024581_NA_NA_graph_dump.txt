Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_3 $$ Collection<String> miCol = new ArrayList<String>() [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_4 $$ String revision = "1.48" [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_5 $$ URL url = new URL(OboUtils.PSI_MI_OBO_LOCATION + "?revision=" + revision) [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_6 $$ log.debug("url " + url) [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_7 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) [CD]
Line_5 $$ URL url = new URL(OboUtils.PSI_MI_OBO_LOCATION + "?revision=" + revision) --> Line_7 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_8 $$ String inputLine [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_9 $$ int termCounter = 0 [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_10 $$ int miCounter = 0 [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_11 $$ int obsoleteCounter = 0 [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_12 $$ int obsoleteCounterDef = 0 [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_13 $$ int typedefCounter = 0 [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_14 $$ int drugTerm = 0 [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_15 $$ int psiTerm = 0 [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_16 $$ String mi = null [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_17 $$ while ((inputLine = in.readLine()) != null) [CD]
Line_8 $$ String inputLine --> Line_17 $$ while ((inputLine = in.readLine()) != null) [FD]
Line_7 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_17 $$ while ((inputLine = in.readLine()) != null) [FD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_18 $$ String temp [CD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_19 $$ temp = inputLine [CD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_19 $$ temp = inputLine [FD]
Line_18 $$ String temp --> Line_19 $$ temp = inputLine [FD]
Line_8 $$ String inputLine --> Line_19 $$ temp = inputLine [FD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_20 $$ if (inputLine.startsWith("[Term]")) [CD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_20 $$ if (inputLine.startsWith("[Term]")) [FD]
Line_8 $$ String inputLine --> Line_20 $$ if (inputLine.startsWith("[Term]")) [FD]
Line_20 $$ if (inputLine.startsWith("[Term]")) --> Line_21 $$ termCounter++ [CD]
Line_9 $$ int termCounter = 0 --> Line_21 $$ termCounter++ [FD]
Line_20 $$ if (inputLine.startsWith("[Term]")) --> Line_22 $$ if (inputLine.matches("id:\\s+(MI:.*)")) [CD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_22 $$ if (inputLine.matches("id:\\s+(MI:.*)")) [FD]
Line_8 $$ String inputLine --> Line_22 $$ if (inputLine.matches("id:\\s+(MI:.*)")) [FD]
Line_22 $$ if (inputLine.matches("id:\\s+(MI:.*)")) --> Line_23 $$ mi = temp.split("\\s+")[1] [CD]
Line_16 $$ String mi = null --> Line_23 $$ mi = temp.split("\\s+")[1] [FD]
Line_18 $$ String temp --> Line_23 $$ mi = temp.split("\\s+")[1] [FD]
Line_19 $$ temp = inputLine --> Line_23 $$ mi = temp.split("\\s+")[1] [FD]
Line_22 $$ if (inputLine.matches("id:\\s+(MI:.*)")) --> Line_24 $$ miCounter++ [CD]
Line_10 $$ int miCounter = 0 --> Line_24 $$ miCounter++ [FD]
Line_22 $$ if (inputLine.matches("id:\\s+(MI:.*)")) --> Line_25 $$ if (inputLine.contains("is_obsolete: true")) [CD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_25 $$ if (inputLine.contains("is_obsolete: true")) [FD]
Line_8 $$ String inputLine --> Line_25 $$ if (inputLine.contains("is_obsolete: true")) [FD]
Line_25 $$ if (inputLine.contains("is_obsolete: true")) --> Line_26 $$ obsoleteCounter++ [CD]
Line_11 $$ int obsoleteCounter = 0 --> Line_26 $$ obsoleteCounter++ [FD]
Line_25 $$ if (inputLine.contains("is_obsolete: true")) --> Line_27 $$ if (inputLine.matches("def:.*?OBSOLETE.*")) [CD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_27 $$ if (inputLine.matches("def:.*?OBSOLETE.*")) [FD]
Line_8 $$ String inputLine --> Line_27 $$ if (inputLine.matches("def:.*?OBSOLETE.*")) [FD]
Line_27 $$ if (inputLine.matches("def:.*?OBSOLETE.*")) --> Line_28 $$ obsoleteCounterDef++ [CD]
Line_12 $$ int obsoleteCounterDef = 0 --> Line_28 $$ obsoleteCounterDef++ [FD]
Line_27 $$ if (inputLine.matches("def:.*?OBSOLETE.*")) --> Line_29 $$ if (inputLine.startsWith("[Typedef]")) [CD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_29 $$ if (inputLine.startsWith("[Typedef]")) [FD]
Line_8 $$ String inputLine --> Line_29 $$ if (inputLine.startsWith("[Typedef]")) [FD]
Line_29 $$ if (inputLine.startsWith("[Typedef]")) --> Line_30 $$ typedefCounter++ [CD]
Line_13 $$ int typedefCounter = 0 --> Line_30 $$ typedefCounter++ [FD]
Line_29 $$ if (inputLine.startsWith("[Typedef]")) --> Line_31 $$ if (inputLine.matches("subset:\\s+PSI-MI\\s+slim")) [CD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_31 $$ if (inputLine.matches("subset:\\s+PSI-MI\\s+slim")) [FD]
Line_8 $$ String inputLine --> Line_31 $$ if (inputLine.matches("subset:\\s+PSI-MI\\s+slim")) [FD]
Line_31 $$ if (inputLine.matches("subset:\\s+PSI-MI\\s+slim")) --> Line_32 $$ psiTerm++ [CD]
Line_15 $$ int psiTerm = 0 --> Line_32 $$ psiTerm++ [FD]
Line_31 $$ if (inputLine.matches("subset:\\s+PSI-MI\\s+slim")) --> Line_33 $$ if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_33 $$ if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) [FD]
Line_3 $$ Collection<String> miCol = new ArrayList<String>() --> Line_33 $$ if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) [FD]
Line_23 $$ mi = temp.split("\\s+")[1] --> Line_33 $$ if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) [FD]
Line_16 $$ String mi = null --> Line_33 $$ if (category.equalsIgnoreCase(OboCategory.PSI_MI_SLIM)) [FD]
Line_31 $$ if (inputLine.matches("subset:\\s+PSI-MI\\s+slim")) --> Line_34 $$ if (inputLine.matches("subset:\\s+Drugable")) [CD]
Line_17 $$ while ((inputLine = in.readLine()) != null) --> Line_34 $$ if (inputLine.matches("subset:\\s+Drugable")) [FD]
Line_8 $$ String inputLine --> Line_34 $$ if (inputLine.matches("subset:\\s+Drugable")) [FD]
Line_34 $$ if (inputLine.matches("subset:\\s+Drugable")) --> Line_35 $$ drugTerm++ [CD]
Line_14 $$ int drugTerm = 0 --> Line_35 $$ drugTerm++ [FD]
Line_34 $$ if (inputLine.matches("subset:\\s+Drugable")) --> Line_36 $$ if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) [CD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_36 $$ if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) [FD]
Line_3 $$ Collection<String> miCol = new ArrayList<String>() --> Line_36 $$ if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) [FD]
Line_23 $$ mi = temp.split("\\s+")[1] --> Line_36 $$ if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) [FD]
Line_16 $$ String mi = null --> Line_36 $$ if (category.equalsIgnoreCase(OboCategory.DRUGABLE)) [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_39 $$ Assert.assertEquals(948, termCounter) [CD]
Line_9 $$ int termCounter = 0 --> Line_39 $$ Assert.assertEquals(948, termCounter) [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_40 $$ Assert.assertEquals(948, miCounter) [CD]
Line_10 $$ int miCounter = 0 --> Line_40 $$ Assert.assertEquals(948, miCounter) [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_41 $$ Assert.assertEquals(53, obsoleteCounter) [CD]
Line_11 $$ int obsoleteCounter = 0 --> Line_41 $$ Assert.assertEquals(53, obsoleteCounter) [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_42 $$ Assert.assertEquals(53, obsoleteCounterDef) [CD]
Line_12 $$ int obsoleteCounterDef = 0 --> Line_42 $$ Assert.assertEquals(53, obsoleteCounterDef) [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_43 $$ Assert.assertEquals(1, typedefCounter) [CD]
Line_13 $$ int typedefCounter = 0 --> Line_43 $$ Assert.assertEquals(1, typedefCounter) [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_44 $$ Assert.assertEquals(844, psiTerm) [CD]
Line_15 $$ int psiTerm = 0 --> Line_44 $$ Assert.assertEquals(844, psiTerm) [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_45 $$ Assert.assertEquals(124, drugTerm) [CD]
Line_14 $$ int drugTerm = 0 --> Line_45 $$ Assert.assertEquals(124, drugTerm) [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_46 $$ in.close() [CD]
Line_7 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_46 $$ in.close() [FD]
Line_2 $$ private static Collection<String> crossCheckFromOBOFile(String category) throws Exception --> Line_47 $$ return miCol [CD]
