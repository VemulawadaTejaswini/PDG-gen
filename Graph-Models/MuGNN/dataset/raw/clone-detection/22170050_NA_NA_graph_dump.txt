Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_3 $$ String sourceAntPath = pPath.sourceAntPath() [CD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_3 $$ String sourceAntPath = pPath.sourceAntPath() [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_4 $$ final String moduleName = projectOperations.getFocusedTopLevelPackage().toString() [CD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_5 $$ logger.info("Module Name: " + moduleName) [CD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_6 $$ String targetDirectory = pPath.canonicalFileSystemPath(projectOperations) [CD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_6 $$ String targetDirectory = pPath.canonicalFileSystemPath(projectOperations) [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_7 $$ logger.info("Moving into target Directory: " + targetDirectory) [CD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_8 $$ if (!targetDirectory.endsWith("/")) [CD]
Line_6 $$ String targetDirectory = pPath.canonicalFileSystemPath(projectOperations) --> Line_8 $$ if (!targetDirectory.endsWith("/")) [FD]
Line_8 $$ if (!targetDirectory.endsWith("/")) --> Line_9 $$ targetDirectory += "/" [CD]
Line_6 $$ String targetDirectory = pPath.canonicalFileSystemPath(projectOperations) --> Line_9 $$ targetDirectory += "/" [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_11 $$ if (!fileManager.exists(targetDirectory)) [CD]
Line_6 $$ String targetDirectory = pPath.canonicalFileSystemPath(projectOperations) --> Line_11 $$ if (!fileManager.exists(targetDirectory)) [FD]
Line_9 $$ targetDirectory += "/" --> Line_11 $$ if (!fileManager.exists(targetDirectory)) [FD]
Line_11 $$ if (!fileManager.exists(targetDirectory)) --> Line_12 $$ fileManager.createDirectory(targetDirectory) [CD]
Line_6 $$ String targetDirectory = pPath.canonicalFileSystemPath(projectOperations) --> Line_12 $$ fileManager.createDirectory(targetDirectory) [FD]
Line_9 $$ targetDirectory += "/" --> Line_12 $$ fileManager.createDirectory(targetDirectory) [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_14 $$ System.out.println("Target Directory: " + pPath.sourceAntPath()) [CD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_14 $$ System.out.println("Target Directory: " + pPath.sourceAntPath()) [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_15 $$ String path = TemplateUtils.getTemplatePath(getClass(), sourceAntPath) [CD]
Line_3 $$ String sourceAntPath = pPath.sourceAntPath() --> Line_15 $$ String path = TemplateUtils.getTemplatePath(getClass(), sourceAntPath) [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_16 $$ Set<URL> urls = UrlFindingUtils.findMatchingClasspathResources(context.getBundleContext(), path) [CD]
Line_15 $$ String path = TemplateUtils.getTemplatePath(getClass(), sourceAntPath) --> Line_16 $$ Set<URL> urls = UrlFindingUtils.findMatchingClasspathResources(context.getBundleContext(), path) [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_17 $$ Assert.notNull(urls, "Could not search bundles for resources for Ant Path '" + path + "'") [CD]
Line_16 $$ Set<URL> urls = UrlFindingUtils.findMatchingClasspathResources(context.getBundleContext(), path) --> Line_17 $$ Assert.notNull(urls, "Could not search bundles for resources for Ant Path '" + path + "'") [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_18 $$ if (urls.isEmpty()) [CD]
Line_16 $$ Set<URL> urls = UrlFindingUtils.findMatchingClasspathResources(context.getBundleContext(), path) --> Line_18 $$ if (urls.isEmpty()) [FD]
Line_18 $$ if (urls.isEmpty()) --> Line_19 $$ logger.info("URLS are empty stopping...") [CD]
Line_21 $$ for (URL url : urls) --> Line_22 $$ logger.info("Stepping into " + url.toExternalForm()) [FD]
Line_21 $$ for (URL url : urls) --> Line_23 $$ String fileName = url.getPath().substring(url.getPath().lastIndexOf("/") + 1) [FD]
Line_23 $$ String fileName = url.getPath().substring(url.getPath().lastIndexOf("/") + 1) --> Line_24 $$ fileName = fileName.replace("-template", "") [FD]
Line_25 $$ String targetFilename = targetDirectory + fileName --> Line_27 $$ if (!fileManager.exists(targetFilename)) [FD]
Line_21 $$ for (URL url : urls) --> Line_30 $$ String input = FileCopyUtils.copyToString(new InputStreamReader(url.openStream())) [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_32 $$ logger.info("SegmentPackage: " + pPath.canonicalFileSystemPath(projectOperations)) [FD]
Line_30 $$ String input = FileCopyUtils.copyToString(new InputStreamReader(url.openStream())) --> Line_34 $$ input = input.replace("__TOP_LEVEL_PACKAGE__", topLevelPackage) [FD]
Line_33 $$ String topLevelPackage = projectOperations.getFocusedTopLevelPackage().toString() --> Line_34 $$ input = input.replace("__TOP_LEVEL_PACKAGE__", topLevelPackage) [FD]
Line_30 $$ String input = FileCopyUtils.copyToString(new InputStreamReader(url.openStream())) --> Line_35 $$ input = input.replace("__SEGMENT_PACKAGE__", pPath.segmentPackage()) [FD]
Line_34 $$ input = input.replace("__TOP_LEVEL_PACKAGE__", topLevelPackage) --> Line_35 $$ input = input.replace("__SEGMENT_PACKAGE__", pPath.segmentPackage()) [FD]
Line_2 $$ private void copyTemplates(ProjectPath pPath) --> Line_35 $$ input = input.replace("__SEGMENT_PACKAGE__", pPath.segmentPackage()) [FD]
Line_30 $$ String input = FileCopyUtils.copyToString(new InputStreamReader(url.openStream())) --> Line_36 $$ input = input.replace("__PROJECT_NAME__", projectOperations.getFocusedProjectName()) [FD]
Line_34 $$ input = input.replace("__TOP_LEVEL_PACKAGE__", topLevelPackage) --> Line_36 $$ input = input.replace("__PROJECT_NAME__", projectOperations.getFocusedProjectName()) [FD]
Line_35 $$ input = input.replace("__SEGMENT_PACKAGE__", pPath.segmentPackage()) --> Line_36 $$ input = input.replace("__PROJECT_NAME__", projectOperations.getFocusedProjectName()) [FD]
Line_30 $$ String input = FileCopyUtils.copyToString(new InputStreamReader(url.openStream())) --> Line_37 $$ input = input.replace("__ENTITY_NAME__", entityName) [FD]
Line_34 $$ input = input.replace("__TOP_LEVEL_PACKAGE__", topLevelPackage) --> Line_37 $$ input = input.replace("__ENTITY_NAME__", entityName) [FD]
Line_35 $$ input = input.replace("__SEGMENT_PACKAGE__", pPath.segmentPackage()) --> Line_37 $$ input = input.replace("__ENTITY_NAME__", entityName) [FD]
Line_36 $$ input = input.replace("__PROJECT_NAME__", projectOperations.getFocusedProjectName()) --> Line_37 $$ input = input.replace("__ENTITY_NAME__", entityName) [FD]
Line_25 $$ String targetFilename = targetDirectory + fileName --> Line_38 $$ MutableFile mutableFile = fileManager.createFile(targetFilename) [FD]
Line_30 $$ String input = FileCopyUtils.copyToString(new InputStreamReader(url.openStream())) --> Line_39 $$ FileCopyUtils.copy(input.getBytes(), mutableFile.getOutputStream()) [FD]
Line_34 $$ input = input.replace("__TOP_LEVEL_PACKAGE__", topLevelPackage) --> Line_39 $$ FileCopyUtils.copy(input.getBytes(), mutableFile.getOutputStream()) [FD]
Line_35 $$ input = input.replace("__SEGMENT_PACKAGE__", pPath.segmentPackage()) --> Line_39 $$ FileCopyUtils.copy(input.getBytes(), mutableFile.getOutputStream()) [FD]
Line_36 $$ input = input.replace("__PROJECT_NAME__", projectOperations.getFocusedProjectName()) --> Line_39 $$ FileCopyUtils.copy(input.getBytes(), mutableFile.getOutputStream()) [FD]
Line_37 $$ input = input.replace("__ENTITY_NAME__", entityName) --> Line_39 $$ FileCopyUtils.copy(input.getBytes(), mutableFile.getOutputStream()) [FD]
Line_38 $$ MutableFile mutableFile = fileManager.createFile(targetFilename) --> Line_39 $$ FileCopyUtils.copy(input.getBytes(), mutableFile.getOutputStream()) [FD]
