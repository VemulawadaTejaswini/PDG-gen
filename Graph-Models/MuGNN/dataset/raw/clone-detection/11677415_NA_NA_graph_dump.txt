Line_2 $$ public void behaveTest() --> Line_3 $$ InputStream is = this.getClass().getResourceAsStream("safetyCaseTest.mdf") [CD]
Line_2 $$ public void behaveTest() --> Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream() [CD]
Line_3 $$ InputStream is = this.getClass().getResourceAsStream("safetyCaseTest.mdf") --> Line_6 $$ IOUtils.copy(is, out) [FD]
Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream() --> Line_6 $$ IOUtils.copy(is, out) [FD]
Line_2 $$ public void behaveTest() --> Line_10 $$ TrafficSimulationEngine engine = new TrafficSimulationEngine() [CD]
Line_2 $$ public void behaveTest() --> Line_11 $$ TrafficModelDefinition def = MDFReader.read(out.toByteArray()) [CD]
Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream() --> Line_11 $$ TrafficModelDefinition def = MDFReader.read(out.toByteArray()) [FD]
Line_2 $$ public void behaveTest() --> Line_12 $$ engine.init(def) [CD]
Line_10 $$ TrafficSimulationEngine engine = new TrafficSimulationEngine() --> Line_12 $$ engine.init(def) [FD]
Line_11 $$ TrafficModelDefinition def = MDFReader.read(out.toByteArray()) --> Line_12 $$ engine.init(def) [FD]
Line_2 $$ public void behaveTest() --> Line_13 $$ Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>() [CD]
Line_2 $$ public void behaveTest() --> Line_14 $$ Set<Integer> segments = new HashSet<Integer>() [CD]
Line_2 $$ public void behaveTest() --> Line_15 $$ segments.add(0) [CD]
Line_14 $$ Set<Integer> segments = new HashSet<Integer>() --> Line_15 $$ segments.add(0) [FD]
Line_2 $$ public void behaveTest() --> Line_16 $$ linkSegments.put(0, segments) [CD]
Line_13 $$ Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>() --> Line_16 $$ linkSegments.put(0, segments) [FD]
Line_14 $$ Set<Integer> segments = new HashSet<Integer>() --> Line_16 $$ linkSegments.put(0, segments) [FD]
Line_2 $$ public void behaveTest() --> Line_17 $$ FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>()) [CD]
Line_2 $$ public void behaveTest() --> Line_18 $$ engine.setFrameProperties(frameProperties) [CD]
Line_10 $$ TrafficSimulationEngine engine = new TrafficSimulationEngine() --> Line_18 $$ engine.setFrameProperties(frameProperties) [FD]
Line_17 $$ FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>()) --> Line_18 $$ engine.setFrameProperties(frameProperties) [FD]
Line_2 $$ public void behaveTest() --> Line_19 $$ RegularVehicle vehicle = (RegularVehicle) engine.getDynamicObjects().iterator().next() [CD]
Line_10 $$ TrafficSimulationEngine engine = new TrafficSimulationEngine() --> Line_19 $$ RegularVehicle vehicle = (RegularVehicle) engine.getDynamicObjects().iterator().next() [FD]
Line_2 $$ public void behaveTest() --> Line_20 $$ CompositeDriver driver = (CompositeDriver) vehicle.getDriver() [CD]
Line_19 $$ RegularVehicle vehicle = (RegularVehicle) engine.getDynamicObjects().iterator().next() --> Line_20 $$ CompositeDriver driver = (CompositeDriver) vehicle.getDriver() [FD]
Line_2 $$ public void behaveTest() --> Line_21 $$ driver.drive(0.1f) [CD]
Line_20 $$ CompositeDriver driver = (CompositeDriver) vehicle.getDriver() --> Line_21 $$ driver.drive(0.1f) [FD]
Line_2 $$ public void behaveTest() --> Line_22 $$ SafetyCase safety = new SafetyCase(driver) [CD]
Line_2 $$ public void behaveTest() --> Line_23 $$ RectangleCCRange ccRange = (RectangleCCRange) safety.behave(0.1f) [CD]
Line_22 $$ SafetyCase safety = new SafetyCase(driver) --> Line_23 $$ RectangleCCRange ccRange = (RectangleCCRange) safety.behave(0.1f) [FD]
Line_2 $$ public void behaveTest() --> Line_24 $$ HandRange turnRange = ccRange.getTurnRange() [CD]
Line_23 $$ RectangleCCRange ccRange = (RectangleCCRange) safety.behave(0.1f) --> Line_24 $$ HandRange turnRange = ccRange.getTurnRange() [FD]
Line_2 $$ public void behaveTest() --> Line_25 $$ HandRange probeRange = new HandRange() [CD]
Line_2 $$ public void behaveTest() --> Line_26 $$ probeRange.remove(Hand.Left) [CD]
Line_25 $$ HandRange probeRange = new HandRange() --> Line_26 $$ probeRange.remove(Hand.Left) [FD]
Line_2 $$ public void behaveTest() --> Line_27 $$ assertTrue(turnRange.equals(probeRange)) [CD]
Line_24 $$ HandRange turnRange = ccRange.getTurnRange() --> Line_27 $$ assertTrue(turnRange.equals(probeRange)) [FD]
Line_25 $$ HandRange probeRange = new HandRange() --> Line_27 $$ assertTrue(turnRange.equals(probeRange)) [FD]
Line_2 $$ public void behaveTest() --> Line_28 $$ assertTrue(ccRange.getPriority() == Priority.SafetyCase) [CD]
Line_23 $$ RectangleCCRange ccRange = (RectangleCCRange) safety.behave(0.1f) --> Line_28 $$ assertTrue(ccRange.getPriority() == Priority.SafetyCase) [FD]
