Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_3 $$ final String servetPath = httpServletRequest.getServletPath() [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_3 $$ final String servetPath = httpServletRequest.getServletPath() [FD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_4 $$ final String previousToken = httpServletRequest.getHeader(IF_NONE_MATCH) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_4 $$ final String previousToken = httpServletRequest.getHeader(IF_NONE_MATCH) [FD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_5 $$ final String currentToken = getETagValue(httpServletRequest) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_5 $$ final String currentToken = getETagValue(httpServletRequest) [FD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_6 $$ httpServletResponse.setHeader(ETAG, currentToken) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_6 $$ httpServletResponse.setHeader(ETAG, currentToken) [FD]
Line_5 $$ final String currentToken = getETagValue(httpServletRequest) --> Line_6 $$ httpServletResponse.setHeader(ETAG, currentToken) [FD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_7 $$ final Date modifiedDate = new Date(httpServletRequest.getDateHeader(IF_MODIFIED_SINCE)) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_7 $$ final Date modifiedDate = new Date(httpServletRequest.getDateHeader(IF_MODIFIED_SINCE)) [FD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_8 $$ final Calendar calendar = Calendar.getInstance() [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_9 $$ final Date now = calendar.getTime() [CD]
Line_8 $$ final Calendar calendar = Calendar.getInstance() --> Line_9 $$ final Date now = calendar.getTime() [FD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_10 $$ calendar.setTime(modifiedDate) [CD]
Line_8 $$ final Calendar calendar = Calendar.getInstance() --> Line_10 $$ calendar.setTime(modifiedDate) [FD]
Line_7 $$ final Date modifiedDate = new Date(httpServletRequest.getDateHeader(IF_MODIFIED_SINCE)) --> Line_10 $$ calendar.setTime(modifiedDate) [FD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_11 $$ calendar.add(Calendar.MINUTE, getEtagExpiration()) [CD]
Line_8 $$ final Calendar calendar = Calendar.getInstance() --> Line_11 $$ calendar.add(Calendar.MINUTE, getEtagExpiration()) [FD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) [CD]
Line_5 $$ final String currentToken = getETagValue(httpServletRequest) --> Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) [FD]
Line_4 $$ final String previousToken = httpServletRequest.getHeader(IF_NONE_MATCH) --> Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) [FD]
Line_9 $$ final Date now = calendar.getTime() --> Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) [FD]
Line_8 $$ final Calendar calendar = Calendar.getInstance() --> Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_13 $$ httpServletResponse.sendError(HttpServletResponse.SC_NOT_MODIFIED) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_13 $$ httpServletResponse.sendError(HttpServletResponse.SC_NOT_MODIFIED) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_14 $$ httpServletResponse.setHeader(LAST_MODIFIED, httpServletRequest.getHeader(IF_MODIFIED_SINCE)) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_14 $$ httpServletResponse.setHeader(LAST_MODIFIED, httpServletRequest.getHeader(IF_MODIFIED_SINCE)) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_15 $$ if (LOG.isDebugEnabled()) [CD]
Line_15 $$ if (LOG.isDebugEnabled()) --> Line_16 $$ LOG.debug("ETag the same, will return 304") [CD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_19 $$ httpServletResponse.setDateHeader(LAST_MODIFIED, (new Date()).getTime()) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_19 $$ httpServletResponse.setDateHeader(LAST_MODIFIED, (new Date()).getTime()) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_20 $$ final String width = httpServletRequest.getParameter(Constants.WIDTH) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_20 $$ final String width = httpServletRequest.getParameter(Constants.WIDTH) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_21 $$ final String height = httpServletRequest.getParameter(Constants.HEIGHT) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_21 $$ final String height = httpServletRequest.getParameter(Constants.HEIGHT) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_22 $$ final ImageNameStrategy imageNameStrategy = imageService.getImageNameStrategy(servetPath) [CD]
Line_3 $$ final String servetPath = httpServletRequest.getServletPath() --> Line_22 $$ final ImageNameStrategy imageNameStrategy = imageService.getImageNameStrategy(servetPath) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_23 $$ String code = imageNameStrategy.getCode(servetPath) [CD]
Line_22 $$ final ImageNameStrategy imageNameStrategy = imageService.getImageNameStrategy(servetPath) --> Line_23 $$ String code = imageNameStrategy.getCode(servetPath) [FD]
Line_3 $$ final String servetPath = httpServletRequest.getServletPath() --> Line_23 $$ String code = imageNameStrategy.getCode(servetPath) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_24 $$ String fileName = imageNameStrategy.getFileName(servetPath) [CD]
Line_22 $$ final ImageNameStrategy imageNameStrategy = imageService.getImageNameStrategy(servetPath) --> Line_24 $$ String fileName = imageNameStrategy.getFileName(servetPath) [FD]
Line_3 $$ final String servetPath = httpServletRequest.getServletPath() --> Line_24 $$ String fileName = imageNameStrategy.getFileName(servetPath) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_25 $$ final String imageRealPathPrefix = getRealPathPrefix(httpServletRequest.getServerName().toLowerCase()) [CD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_25 $$ final String imageRealPathPrefix = getRealPathPrefix(httpServletRequest.getServerName().toLowerCase()) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_26 $$ String original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [CD]
Line_22 $$ final ImageNameStrategy imageNameStrategy = imageService.getImageNameStrategy(servetPath) --> Line_26 $$ String original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_24 $$ String fileName = imageNameStrategy.getFileName(servetPath) --> Line_26 $$ String original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_23 $$ String code = imageNameStrategy.getCode(servetPath) --> Line_26 $$ String original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_27 $$ final File origFile = new File(original) [CD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_28 $$ if (!origFile.exists()) [CD]
Line_27 $$ final File origFile = new File(original) --> Line_28 $$ if (!origFile.exists()) [FD]
Line_28 $$ if (!origFile.exists()) --> Line_29 $$ code = Constants.NO_IMAGE [CD]
Line_23 $$ String code = imageNameStrategy.getCode(servetPath) --> Line_29 $$ code = Constants.NO_IMAGE [FD]
Line_28 $$ if (!origFile.exists()) --> Line_30 $$ fileName = imageNameStrategy.getFileName(code) [CD]
Line_24 $$ String fileName = imageNameStrategy.getFileName(servetPath) --> Line_30 $$ fileName = imageNameStrategy.getFileName(code) [FD]
Line_22 $$ final ImageNameStrategy imageNameStrategy = imageService.getImageNameStrategy(servetPath) --> Line_30 $$ fileName = imageNameStrategy.getFileName(code) [FD]
Line_23 $$ String code = imageNameStrategy.getCode(servetPath) --> Line_30 $$ fileName = imageNameStrategy.getFileName(code) [FD]
Line_29 $$ code = Constants.NO_IMAGE --> Line_30 $$ fileName = imageNameStrategy.getFileName(code) [FD]
Line_28 $$ if (!origFile.exists()) --> Line_31 $$ original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [CD]
Line_26 $$ String original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) --> Line_31 $$ original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_25 $$ final String imageRealPathPrefix = getRealPathPrefix(httpServletRequest.getServerName().toLowerCase()) --> Line_31 $$ original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_22 $$ final ImageNameStrategy imageNameStrategy = imageService.getImageNameStrategy(servetPath) --> Line_31 $$ original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_24 $$ String fileName = imageNameStrategy.getFileName(servetPath) --> Line_31 $$ original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_30 $$ fileName = imageNameStrategy.getFileName(code) --> Line_31 $$ original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_23 $$ String code = imageNameStrategy.getCode(servetPath) --> Line_31 $$ original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_29 $$ code = Constants.NO_IMAGE --> Line_31 $$ original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_33 $$ String resizedImageFileName = null [CD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_34 $$ if (width != null && height != null && imageService.isSizeAllowed(width, height)) [CD]
Line_20 $$ final String width = httpServletRequest.getParameter(Constants.WIDTH) --> Line_34 $$ if (width != null && height != null && imageService.isSizeAllowed(width, height)) [FD]
Line_21 $$ final String height = httpServletRequest.getParameter(Constants.HEIGHT) --> Line_34 $$ if (width != null && height != null && imageService.isSizeAllowed(width, height)) [FD]
Line_34 $$ if (width != null && height != null && imageService.isSizeAllowed(width, height)) --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [CD]
Line_33 $$ String resizedImageFileName = null --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [FD]
Line_25 $$ final String imageRealPathPrefix = getRealPathPrefix(httpServletRequest.getServerName().toLowerCase()) --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [FD]
Line_22 $$ final ImageNameStrategy imageNameStrategy = imageService.getImageNameStrategy(servetPath) --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [FD]
Line_24 $$ String fileName = imageNameStrategy.getFileName(servetPath) --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [FD]
Line_30 $$ fileName = imageNameStrategy.getFileName(code) --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [FD]
Line_23 $$ String code = imageNameStrategy.getCode(servetPath) --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [FD]
Line_29 $$ code = Constants.NO_IMAGE --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [FD]
Line_20 $$ final String width = httpServletRequest.getParameter(Constants.WIDTH) --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [FD]
Line_21 $$ final String height = httpServletRequest.getParameter(Constants.HEIGHT) --> Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_37 $$ final File imageFile = getImageFile(original, resizedImageFileName, width, height) [CD]
Line_26 $$ String original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) --> Line_37 $$ final File imageFile = getImageFile(original, resizedImageFileName, width, height) [FD]
Line_31 $$ original = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code) --> Line_37 $$ final File imageFile = getImageFile(original, resizedImageFileName, width, height) [FD]
Line_33 $$ String resizedImageFileName = null --> Line_37 $$ final File imageFile = getImageFile(original, resizedImageFileName, width, height) [FD]
Line_35 $$ resizedImageFileName = imageRealPathPrefix + imageNameStrategy.getFullFileNamePath(fileName, code, width, height) --> Line_37 $$ final File imageFile = getImageFile(original, resizedImageFileName, width, height) [FD]
Line_20 $$ final String width = httpServletRequest.getParameter(Constants.WIDTH) --> Line_37 $$ final File imageFile = getImageFile(original, resizedImageFileName, width, height) [FD]
Line_21 $$ final String height = httpServletRequest.getParameter(Constants.HEIGHT) --> Line_37 $$ final File imageFile = getImageFile(original, resizedImageFileName, width, height) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_38 $$ final FileInputStream fileInputStream = new FileInputStream(imageFile) [CD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_39 $$ IOUtils.copy(fileInputStream, httpServletResponse.getOutputStream()) [CD]
Line_38 $$ final FileInputStream fileInputStream = new FileInputStream(imageFile) --> Line_39 $$ IOUtils.copy(fileInputStream, httpServletResponse.getOutputStream()) [FD]
Line_2 $$ public void handleRequestInternal(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws ServletException, IOException --> Line_39 $$ IOUtils.copy(fileInputStream, httpServletResponse.getOutputStream()) [FD]
Line_12 $$ if (currentToken.equals(previousToken) && (now.getTime() < calendar.getTime().getTime())) --> Line_40 $$ fileInputStream.close() [CD]
Line_38 $$ final FileInputStream fileInputStream = new FileInputStream(imageFile) --> Line_40 $$ fileInputStream.close() [FD]
