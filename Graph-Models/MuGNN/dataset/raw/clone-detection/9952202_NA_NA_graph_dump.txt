Line_2 $$ public void testIntegrityViolation() throws Exception --> Line_3 $$ if (getDialect() instanceof MySQLMyISAMDialect) [CD]
Line_3 $$ if (getDialect() instanceof MySQLMyISAMDialect) --> Line_4 $$ reportSkip("MySQL (ISAM) does not support FK violation checking", "exception conversion") [CD]
Line_3 $$ if (getDialect() instanceof MySQLMyISAMDialect) --> Line_5 $$ return [CD]
Line_2 $$ public void testIntegrityViolation() throws Exception --> Line_7 $$ SQLExceptionConverter converter = getDialect().buildSQLExceptionConverter() [CD]
Line_2 $$ public void testIntegrityViolation() throws Exception --> Line_8 $$ Session session = openSession() [CD]
Line_2 $$ public void testIntegrityViolation() throws Exception --> Line_9 $$ session.beginTransaction() [CD]
Line_8 $$ Session session = openSession() --> Line_9 $$ session.beginTransaction() [FD]
Line_2 $$ public void testIntegrityViolation() throws Exception --> Line_10 $$ Connection connection = session.connection() [CD]
Line_8 $$ Session session = openSession() --> Line_10 $$ Connection connection = session.connection() [FD]
Line_2 $$ public void testIntegrityViolation() throws Exception --> Line_11 $$ PreparedStatement ps = null [CD]
Line_11 $$ PreparedStatement ps = null --> Line_13 $$ ps = connection.prepareStatement("INSERT INTO T_MEMBERSHIP (user_id, group_id) VALUES (?, ?)") [FD]
Line_10 $$ Connection connection = session.connection() --> Line_13 $$ ps = connection.prepareStatement("INSERT INTO T_MEMBERSHIP (user_id, group_id) VALUES (?, ?)") [FD]
Line_11 $$ PreparedStatement ps = null --> Line_14 $$ ps.setLong(1, 52134241) [FD]
Line_13 $$ ps = connection.prepareStatement("INSERT INTO T_MEMBERSHIP (user_id, group_id) VALUES (?, ?)") --> Line_14 $$ ps.setLong(1, 52134241) [FD]
Line_11 $$ PreparedStatement ps = null --> Line_15 $$ ps.setLong(2, 5342) [FD]
Line_13 $$ ps = connection.prepareStatement("INSERT INTO T_MEMBERSHIP (user_id, group_id) VALUES (?, ?)") --> Line_15 $$ ps.setLong(2, 5342) [FD]
Line_11 $$ PreparedStatement ps = null --> Line_16 $$ ps.executeUpdate() [FD]
Line_13 $$ ps = connection.prepareStatement("INSERT INTO T_MEMBERSHIP (user_id, group_id) VALUES (?, ?)") --> Line_16 $$ ps.executeUpdate() [FD]
Line_7 $$ SQLExceptionConverter converter = getDialect().buildSQLExceptionConverter() --> Line_20 $$ JDBCException jdbcException = converter.convert(sqle, null, null) [FD]
Line_20 $$ JDBCException jdbcException = converter.convert(sqle, null, null) --> Line_21 $$ assertEquals("Bad conversion [" + sqle.getMessage() + "]", ConstraintViolationException.class, jdbcException.getClass()) [FD]
Line_22 $$ ConstraintViolationException ex = (ConstraintViolationException) jdbcException --> Line_23 $$ System.out.println("Violated constraint name: " + ex.getConstraintName()) [FD]
Line_11 $$ PreparedStatement ps = null --> Line_25 $$ if (ps != null) [FD]
Line_13 $$ ps = connection.prepareStatement("INSERT INTO T_MEMBERSHIP (user_id, group_id) VALUES (?, ?)") --> Line_25 $$ if (ps != null) [FD]
Line_11 $$ PreparedStatement ps = null --> Line_27 $$ ps.close() [FD]
Line_13 $$ ps = connection.prepareStatement("INSERT INTO T_MEMBERSHIP (user_id, group_id) VALUES (?, ?)") --> Line_27 $$ ps.close() [FD]
Line_2 $$ public void testIntegrityViolation() throws Exception --> Line_32 $$ session.getTransaction().rollback() [CD]
Line_8 $$ Session session = openSession() --> Line_32 $$ session.getTransaction().rollback() [FD]
Line_2 $$ public void testIntegrityViolation() throws Exception --> Line_33 $$ session.close() [CD]
Line_8 $$ Session session = openSession() --> Line_33 $$ session.close() [FD]
