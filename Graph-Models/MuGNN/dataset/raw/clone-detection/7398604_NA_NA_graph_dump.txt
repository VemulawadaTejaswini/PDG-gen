Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_3 $$ progress.initialize(2, "Ściągam autorów amerykańskich") [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_4 $$ String url = "http://pl.wikipedia.org/wiki/Kategoria:Ameryka%C5%84scy_autorzy_fantastyki" [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_5 $$ UrlResource resource = new UrlResource(url) [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_6 $$ InputStream urlInputStream = resource.getInputStream() [CD]
Line_5 $$ UrlResource resource = new UrlResource(url) --> Line_6 $$ InputStream urlInputStream = resource.getInputStream() [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_7 $$ StringWriter writer = new StringWriter() [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_8 $$ IOUtils.copy(urlInputStream, writer) [CD]
Line_6 $$ InputStream urlInputStream = resource.getInputStream() --> Line_8 $$ IOUtils.copy(urlInputStream, writer) [FD]
Line_7 $$ StringWriter writer = new StringWriter() --> Line_8 $$ IOUtils.copy(urlInputStream, writer) [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_9 $$ progress.advance("Parsuję autorów amerykańskich") [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_10 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance() [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_11 $$ DocumentBuilder builder = factory.newDocumentBuilder() [CD]
Line_10 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance() --> Line_11 $$ DocumentBuilder builder = factory.newDocumentBuilder() [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_12 $$ String httpDoc = writer.toString() [CD]
Line_7 $$ StringWriter writer = new StringWriter() --> Line_12 $$ String httpDoc = writer.toString() [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_13 $$ httpDoc = httpDoc.replaceFirst("(?s)<!DOCTYPE.+?>\\n", "") [CD]
Line_12 $$ String httpDoc = writer.toString() --> Line_13 $$ httpDoc = httpDoc.replaceFirst("(?s)<!DOCTYPE.+?>\\n", "") [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_14 $$ httpDoc = httpDoc.replaceAll("(?s)<script.+?</script>", "") [CD]
Line_12 $$ String httpDoc = writer.toString() --> Line_14 $$ httpDoc = httpDoc.replaceAll("(?s)<script.+?</script>", "") [FD]
Line_13 $$ httpDoc = httpDoc.replaceFirst("(?s)<!DOCTYPE.+?>\\n", "") --> Line_14 $$ httpDoc = httpDoc.replaceAll("(?s)<script.+?</script>", "") [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_15 $$ httpDoc = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n" + httpDoc [CD]
Line_12 $$ String httpDoc = writer.toString() --> Line_15 $$ httpDoc = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n" + httpDoc [FD]
Line_13 $$ httpDoc = httpDoc.replaceFirst("(?s)<!DOCTYPE.+?>\\n", "") --> Line_15 $$ httpDoc = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n" + httpDoc [FD]
Line_14 $$ httpDoc = httpDoc.replaceAll("(?s)<script.+?</script>", "") --> Line_15 $$ httpDoc = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n" + httpDoc [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_16 $$ ByteArrayInputStream byteInputStream = new ByteArrayInputStream(httpDoc.getBytes("UTF-8")) [CD]
Line_12 $$ String httpDoc = writer.toString() --> Line_16 $$ ByteArrayInputStream byteInputStream = new ByteArrayInputStream(httpDoc.getBytes("UTF-8")) [FD]
Line_13 $$ httpDoc = httpDoc.replaceFirst("(?s)<!DOCTYPE.+?>\\n", "") --> Line_16 $$ ByteArrayInputStream byteInputStream = new ByteArrayInputStream(httpDoc.getBytes("UTF-8")) [FD]
Line_14 $$ httpDoc = httpDoc.replaceAll("(?s)<script.+?</script>", "") --> Line_16 $$ ByteArrayInputStream byteInputStream = new ByteArrayInputStream(httpDoc.getBytes("UTF-8")) [FD]
Line_15 $$ httpDoc = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>\n" + httpDoc --> Line_16 $$ ByteArrayInputStream byteInputStream = new ByteArrayInputStream(httpDoc.getBytes("UTF-8")) [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_17 $$ Document doc = builder.parse(byteInputStream) [CD]
Line_11 $$ DocumentBuilder builder = factory.newDocumentBuilder() --> Line_17 $$ Document doc = builder.parse(byteInputStream) [FD]
Line_16 $$ ByteArrayInputStream byteInputStream = new ByteArrayInputStream(httpDoc.getBytes("UTF-8")) --> Line_17 $$ Document doc = builder.parse(byteInputStream) [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_18 $$ ArrayList<String> authorNames = new ArrayList<String>() [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_19 $$ ArrayList<IAuthor> authors = new ArrayList<IAuthor>() [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_20 $$ XPathFactory xpathFactory = XPathFactory.newInstance() [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_21 $$ XPath xpath = xpathFactory.newXPath() [CD]
Line_20 $$ XPathFactory xpathFactory = XPathFactory.newInstance() --> Line_21 $$ XPath xpath = xpathFactory.newXPath() [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_22 $$ NodeList list = (NodeList) xpath.evaluate("//ul/li/div/div/a", doc, XPathConstants.NODESET) [CD]
Line_21 $$ XPath xpath = xpathFactory.newXPath() --> Line_22 $$ NodeList list = (NodeList) xpath.evaluate("//ul/li/div/div/a", doc, XPathConstants.NODESET) [FD]
Line_17 $$ Document doc = builder.parse(byteInputStream) --> Line_22 $$ NodeList list = (NodeList) xpath.evaluate("//ul/li/div/div/a", doc, XPathConstants.NODESET) [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_23 $$ for (int i = 0; i < list.getLength(); i++) [CD]
Line_22 $$ NodeList list = (NodeList) xpath.evaluate("//ul/li/div/div/a", doc, XPathConstants.NODESET) --> Line_23 $$ for (int i = 0; i < list.getLength(); i++) [FD]
Line_23 $$ for (int i = 0; i < list.getLength(); i++) --> Line_24 $$ String name = list.item(i).getTextContent() [CD]
Line_23 $$ for (int i = 0; i < list.getLength(); i++) --> Line_24 $$ String name = list.item(i).getTextContent() [FD]
Line_22 $$ NodeList list = (NodeList) xpath.evaluate("//ul/li/div/div/a", doc, XPathConstants.NODESET) --> Line_24 $$ String name = list.item(i).getTextContent() [FD]
Line_23 $$ for (int i = 0; i < list.getLength(); i++) --> Line_25 $$ if (StringUtils.isNotBlank(name)) [CD]
Line_24 $$ String name = list.item(i).getTextContent() --> Line_25 $$ if (StringUtils.isNotBlank(name)) [FD]
Line_25 $$ if (StringUtils.isNotBlank(name)) --> Line_26 $$ authorNames.add(name) [CD]
Line_18 $$ ArrayList<String> authorNames = new ArrayList<String>() --> Line_26 $$ authorNames.add(name) [FD]
Line_24 $$ String name = list.item(i).getTextContent() --> Line_26 $$ authorNames.add(name) [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_29 $$ list = (NodeList) xpath.evaluate("//td/ul/li/a", doc, XPathConstants.NODESET) [CD]
Line_22 $$ NodeList list = (NodeList) xpath.evaluate("//ul/li/div/div/a", doc, XPathConstants.NODESET) --> Line_29 $$ list = (NodeList) xpath.evaluate("//td/ul/li/a", doc, XPathConstants.NODESET) [FD]
Line_21 $$ XPath xpath = xpathFactory.newXPath() --> Line_29 $$ list = (NodeList) xpath.evaluate("//td/ul/li/a", doc, XPathConstants.NODESET) [FD]
Line_17 $$ Document doc = builder.parse(byteInputStream) --> Line_29 $$ list = (NodeList) xpath.evaluate("//td/ul/li/a", doc, XPathConstants.NODESET) [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_30 $$ for (int i = 0; i < list.getLength(); i++) [CD]
Line_23 $$ for (int i = 0; i < list.getLength(); i++) --> Line_30 $$ for (int i = 0; i < list.getLength(); i++) [FD]
Line_22 $$ NodeList list = (NodeList) xpath.evaluate("//ul/li/div/div/a", doc, XPathConstants.NODESET) --> Line_30 $$ for (int i = 0; i < list.getLength(); i++) [FD]
Line_29 $$ list = (NodeList) xpath.evaluate("//td/ul/li/a", doc, XPathConstants.NODESET) --> Line_30 $$ for (int i = 0; i < list.getLength(); i++) [FD]
Line_30 $$ for (int i = 0; i < list.getLength(); i++) --> Line_31 $$ String name = list.item(i).getTextContent() [CD]
Line_30 $$ for (int i = 0; i < list.getLength(); i++) --> Line_31 $$ String name = list.item(i).getTextContent() [FD]
Line_22 $$ NodeList list = (NodeList) xpath.evaluate("//ul/li/div/div/a", doc, XPathConstants.NODESET) --> Line_31 $$ String name = list.item(i).getTextContent() [FD]
Line_29 $$ list = (NodeList) xpath.evaluate("//td/ul/li/a", doc, XPathConstants.NODESET) --> Line_31 $$ String name = list.item(i).getTextContent() [FD]
Line_23 $$ for (int i = 0; i < list.getLength(); i++) --> Line_31 $$ String name = list.item(i).getTextContent() [FD]
Line_30 $$ for (int i = 0; i < list.getLength(); i++) --> Line_32 $$ if (StringUtils.isNotBlank(name)) [CD]
Line_31 $$ String name = list.item(i).getTextContent() --> Line_32 $$ if (StringUtils.isNotBlank(name)) [FD]
Line_24 $$ String name = list.item(i).getTextContent() --> Line_32 $$ if (StringUtils.isNotBlank(name)) [FD]
Line_32 $$ if (StringUtils.isNotBlank(name)) --> Line_33 $$ authorNames.add(name) [CD]
Line_18 $$ ArrayList<String> authorNames = new ArrayList<String>() --> Line_33 $$ authorNames.add(name) [FD]
Line_31 $$ String name = list.item(i).getTextContent() --> Line_33 $$ authorNames.add(name) [FD]
Line_24 $$ String name = list.item(i).getTextContent() --> Line_33 $$ authorNames.add(name) [FD]
Line_31 $$ String name = list.item(i).getTextContent() --> Line_37 $$ int idx = name.lastIndexOf(' ') [FD]
Line_24 $$ String name = list.item(i).getTextContent() --> Line_37 $$ int idx = name.lastIndexOf(' ') [FD]
Line_36 $$ for (String name : authorNames) --> Line_37 $$ int idx = name.lastIndexOf(' ') [FD]
Line_31 $$ String name = list.item(i).getTextContent() --> Line_38 $$ String fname = name.substring(0, idx).trim() [FD]
Line_24 $$ String name = list.item(i).getTextContent() --> Line_38 $$ String fname = name.substring(0, idx).trim() [FD]
Line_36 $$ for (String name : authorNames) --> Line_38 $$ String fname = name.substring(0, idx).trim() [FD]
Line_37 $$ int idx = name.lastIndexOf(' ') --> Line_38 $$ String fname = name.substring(0, idx).trim() [FD]
Line_31 $$ String name = list.item(i).getTextContent() --> Line_39 $$ String lname = name.substring(idx + 1).trim() [FD]
Line_24 $$ String name = list.item(i).getTextContent() --> Line_39 $$ String lname = name.substring(idx + 1).trim() [FD]
Line_36 $$ for (String name : authorNames) --> Line_39 $$ String lname = name.substring(idx + 1).trim() [FD]
Line_19 $$ ArrayList<IAuthor> authors = new ArrayList<IAuthor>() --> Line_40 $$ authors.add(new Author(fname, lname)) [FD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_42 $$ progress.advance("Wykonano") [CD]
Line_2 $$ public Collection<IAuthor> doImport() throws Exception --> Line_43 $$ return authors [CD]
