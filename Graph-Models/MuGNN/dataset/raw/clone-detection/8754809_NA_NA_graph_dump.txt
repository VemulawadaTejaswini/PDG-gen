Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_4 $$ Assert.notNull(configuration) [CD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_4 $$ Assert.notNull(configuration) [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_5 $$ Assert.notNull(monitor) [CD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_5 $$ Assert.notNull(monitor) [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_7 $$ final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, "") [CD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_7 $$ final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, "") [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() [CD]
Line_7 $$ final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, "") --> Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) [CD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) [FD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_10 $$ final IFile pom = prj.getFile("pom.xml") [CD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_10 $$ final IFile pom = prj.getFile("pom.xml") [FD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_11 $$ if (!pom.exists()) [CD]
Line_10 $$ final IFile pom = prj.getFile("pom.xml") --> Line_11 $$ if (!pom.exists()) [FD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_14 $$ ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() [CD]
Line_10 $$ final IFile pom = prj.getFile("pom.xml") --> Line_14 $$ ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() [FD]
Line_14 $$ ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() --> Line_16 $$ handleRootProfile(doc) [CD]
Line_14 $$ ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() --> Line_16 $$ handleRootProfile(doc) [FD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_19 $$ final IFile bpom = prj.getFile("business/pom.xml") [CD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_19 $$ final IFile bpom = prj.getFile("business/pom.xml") [FD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_20 $$ if (!bpom.exists()) [CD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_23 $$ ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() [CD]
Line_23 $$ ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() --> Line_26 $$ handleBusinessProfile(doc, configuration, prj) [FD]
Line_14 $$ ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() --> Line_26 $$ handleBusinessProfile(doc, configuration, prj) [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_26 $$ handleBusinessProfile(doc, configuration, prj) [FD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_26 $$ handleBusinessProfile(doc, configuration, prj) [FD]
Line_28 $$ if (Logger.getLog().isInfoEnabled()) --> Line_29 $$ Logger.getLog().info("CoreException", e) [CD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_38 $$ final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB") [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_40 $$ props.setProperty("hibernate.connection.driver_class", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, "com.mysql.jdbc.Driver")) [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_41 $$ props.setProperty("hibernate.connection.url", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, "jdbc:mysql://<host><:port>/<database>")) [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_42 $$ props.setProperty("hibernate.connection.username", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, "sa")) [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_43 $$ props.setProperty("hibernate.connection.password", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, "")) [FD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_45 $$ final IFile props_file = prj.getFile("business/src/test/resources/hibernate.properties") [FD]
Line_46 $$ if (!props_file.exists()) --> Line_47 $$ props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor) [CD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_47 $$ props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor) [FD]
Line_46 $$ if (!props_file.exists()) --> Line_49 $$ props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor) [CD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_49 $$ props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor) [FD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_61 $$ if (NexOpenProjectUtils.is04xProject(prj)) [CD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_61 $$ if (NexOpenProjectUtils.is04xProject(prj)) [FD]
Line_61 $$ if (NexOpenProjectUtils.is04xProject(prj)) --> Line_62 $$ final IFile appContext = prj.getFile("web/src/main/webapp/WEB-INF/applicationContext.xml") [CD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_62 $$ final IFile appContext = prj.getFile("web/src/main/webapp/WEB-INF/applicationContext.xml") [FD]
Line_61 $$ if (NexOpenProjectUtils.is04xProject(prj)) --> Line_63 $$ if (!appContext.exists()) [CD]
Line_61 $$ if (NexOpenProjectUtils.is04xProject(prj)) --> Line_66 $$ ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() [CD]
Line_66 $$ ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() --> Line_68 $$ final Element root = doc.getDocumentElement() [CD]
Line_66 $$ ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() --> Line_68 $$ final Element root = doc.getDocumentElement() [FD]
Line_23 $$ ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() --> Line_68 $$ final Element root = doc.getDocumentElement() [FD]
Line_14 $$ ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() --> Line_68 $$ final Element root = doc.getDocumentElement() [FD]
Line_66 $$ ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() --> Line_69 $$ final List<Element> beans = XMLUtils.getChildElementsByTagName(root, "bean") [CD]
Line_68 $$ final Element root = doc.getDocumentElement() --> Line_69 $$ final List<Element> beans = XMLUtils.getChildElementsByTagName(root, "bean") [FD]
Line_70 $$ for (final Element bean : beans) --> Line_71 $$ final String id = bean.getAttribute("id") [FD]
Line_71 $$ final String id = bean.getAttribute("id") --> Line_72 $$ if ("valueListAdapterResolver".equals(id)) [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_74 $$ final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, "") [FD]
Line_70 $$ for (final Element bean : beans) --> Line_76 $$ bean.setAttribute("class", className) [FD]
Line_79 $$ if (Logger.getLog().isInfoEnabled()) --> Line_80 $$ Logger.getLog().info("CoreException", e) [CD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_90 $$ final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB") [CD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_90 $$ final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, "MySQL5InnoDB") [FD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_91 $$ if (support.isReverseEngineeringFileNeeded(dialectName)) [CD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_93 $$ final IFile revengFile = prj.getFile("business/src/test/resources/" + support.getReversEngineeringFile(dialectName)) [FD]
Line_94 $$ if (!revengFile.exists()) --> Line_95 $$ final Bundle bundle = HibernateActivator.getDefault().getBundle() [CD]
Line_94 $$ if (!revengFile.exists()) --> Line_97 $$ final InputStream in = FileLocator.openStream(bundle, src, false) [CD]
Line_94 $$ if (!revengFile.exists()) --> Line_99 $$ IOUtils.copy(in, baos) [CD]
Line_94 $$ if (!revengFile.exists()) --> Line_100 $$ String str = baos.toString() [CD]
Line_94 $$ if (!revengFile.exists()) --> Line_101 $$ str = str.replace("$ [CD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_101 $$ str = str.replace("$ [FD]
Line_94 $$ if (!revengFile.exists()) --> Line_102 $$ revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null) [CD]
Line_105 $$ if (Logger.getLog().isInfoEnabled()) --> Line_106 $$ Logger.getLog().info("CoreException", e) [CD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_112 $$ final IResource resource = (IResource) prj.getAdapter(IResource.class) [FD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_114 $$ final String profile = resource.getPersistentProperty(qn) [CD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_115 $$ resource.setPersistentProperty(qn, "reverse-engineering") [CD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_118 $$ action.scheduleJob(prj, monitor) [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_118 $$ action.scheduleJob(prj, monitor) [FD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_119 $$ prj.refreshLocal(2, monitor) [FD]
Line_2 $$ public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException --> Line_119 $$ prj.refreshLocal(2, monitor) [FD]
Line_8 $$ final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject() --> Line_121 $$ prj.setPersistentProperty(qn, profile) [FD]
Line_9 $$ if (NexOpenProjectUtils.isNexOpenProject(prj)) --> Line_124 $$ Logger.getLog().info("Not a NexOpen project :: " + prj) [CD]
