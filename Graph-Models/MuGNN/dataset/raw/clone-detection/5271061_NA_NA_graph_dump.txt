Line_2 $$ private void createJarArchive(File archiveFile, List<File> filesToBeJared, File base) throws Exception --> Line_3 $$ FileOutputStream stream = new FileOutputStream(archiveFile) [CD]
Line_2 $$ private void createJarArchive(File archiveFile, List<File> filesToBeJared, File base) throws Exception --> Line_4 $$ JarOutputStream out = new JarOutputStream(stream) [CD]
Line_5 $$ for (File tobeJared : filesToBeJared) --> Line_6 $$ if (tobeJared == null || !tobeJared.exists() || tobeJared.isDirectory()) [FD]
Line_5 $$ for (File tobeJared : filesToBeJared) --> Line_7 $$ String entryName = tobeJared.getAbsolutePath().substring(base.getAbsolutePath().length() + 1).replace("\\", "/") [FD]
Line_2 $$ private void createJarArchive(File archiveFile, List<File> filesToBeJared, File base) throws Exception --> Line_7 $$ String entryName = tobeJared.getAbsolutePath().substring(base.getAbsolutePath().length() + 1).replace("\\", "/") [FD]
Line_5 $$ for (File tobeJared : filesToBeJared) --> Line_9 $$ jarEntry.setTime(tobeJared.lastModified()) [FD]
Line_4 $$ JarOutputStream out = new JarOutputStream(stream) --> Line_10 $$ out.putNextEntry(jarEntry) [FD]
Line_11 $$ FileInputStream in = new FileInputStream(tobeJared) --> Line_12 $$ IOUtils.copy(in, out) [FD]
Line_4 $$ JarOutputStream out = new JarOutputStream(stream) --> Line_12 $$ IOUtils.copy(in, out) [FD]
Line_11 $$ FileInputStream in = new FileInputStream(tobeJared) --> Line_13 $$ IOUtils.closeQuietly(in) [FD]
Line_4 $$ JarOutputStream out = new JarOutputStream(stream) --> Line_14 $$ out.closeEntry() [FD]
Line_2 $$ private void createJarArchive(File archiveFile, List<File> filesToBeJared, File base) throws Exception --> Line_16 $$ out.close() [CD]
Line_4 $$ JarOutputStream out = new JarOutputStream(stream) --> Line_16 $$ out.close() [FD]
Line_2 $$ private void createJarArchive(File archiveFile, List<File> filesToBeJared, File base) throws Exception --> Line_17 $$ stream.close() [CD]
Line_3 $$ FileOutputStream stream = new FileOutputStream(archiveFile) --> Line_17 $$ stream.close() [FD]
Line_2 $$ private void createJarArchive(File archiveFile, List<File> filesToBeJared, File base) throws Exception --> Line_18 $$ System.out.println("Generated file: " + archiveFile) [CD]
