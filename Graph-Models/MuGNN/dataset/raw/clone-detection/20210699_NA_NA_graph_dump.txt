Line_2 $$ public List<RTTicket> getTicketsForQueue(final String queueName, long limit) --> Line_3 $$ getSession() [CD]
Line_2 $$ public List<RTTicket> getTicketsForQueue(final String queueName, long limit) --> Line_4 $$ final List<NameValuePair> params = new ArrayList<NameValuePair>() [CD]
Line_2 $$ public List<RTTicket> getTicketsForQueue(final String queueName, long limit) --> Line_5 $$ params.add(new BasicNameValuePair("query", "Queue='" + queueName + "' AND Status='open'")) [CD]
Line_4 $$ final List<NameValuePair> params = new ArrayList<NameValuePair>() --> Line_5 $$ params.add(new BasicNameValuePair("query", "Queue='" + queueName + "' AND Status='open'")) [FD]
Line_2 $$ public List<RTTicket> getTicketsForQueue(final String queueName, long limit) --> Line_6 $$ params.add(new BasicNameValuePair("format", "i")) [CD]
Line_4 $$ final List<NameValuePair> params = new ArrayList<NameValuePair>() --> Line_6 $$ params.add(new BasicNameValuePair("format", "i")) [FD]
Line_2 $$ public List<RTTicket> getTicketsForQueue(final String queueName, long limit) --> Line_7 $$ params.add(new BasicNameValuePair("orderby", "-id")) [CD]
Line_4 $$ final List<NameValuePair> params = new ArrayList<NameValuePair>() --> Line_7 $$ params.add(new BasicNameValuePair("orderby", "-id")) [FD]
Line_2 $$ public List<RTTicket> getTicketsForQueue(final String queueName, long limit) --> Line_8 $$ final HttpGet get = new HttpGet(m_baseURL + "/REST/1.0/search/ticket?" + URLEncodedUtils.format(params, "UTF-8")) [CD]
Line_4 $$ final List<NameValuePair> params = new ArrayList<NameValuePair>() --> Line_8 $$ final HttpGet get = new HttpGet(m_baseURL + "/REST/1.0/search/ticket?" + URLEncodedUtils.format(params, "UTF-8")) [FD]
Line_2 $$ public List<RTTicket> getTicketsForQueue(final String queueName, long limit) --> Line_9 $$ final List<RTTicket> tickets = new ArrayList<RTTicket>() [CD]
Line_2 $$ public List<RTTicket> getTicketsForQueue(final String queueName, long limit) --> Line_10 $$ final List<Long> ticketIds = new ArrayList<Long>() [CD]
Line_8 $$ final HttpGet get = new HttpGet(m_baseURL + "/REST/1.0/search/ticket?" + URLEncodedUtils.format(params, "UTF-8")) --> Line_12 $$ final HttpResponse response = getClient().execute(get) [FD]
Line_12 $$ final HttpResponse response = getClient().execute(get) --> Line_13 $$ int responseCode = response.getStatusLine().getStatusCode() [FD]
Line_13 $$ int responseCode = response.getStatusLine().getStatusCode() --> Line_14 $$ if (responseCode != HttpStatus.SC_OK) [FD]
Line_14 $$ if (responseCode != HttpStatus.SC_OK) --> Line_17 $$ InputStreamReader isr = null [CD]
Line_14 $$ if (responseCode != HttpStatus.SC_OK) --> Line_18 $$ BufferedReader br = null [CD]
Line_12 $$ final HttpResponse response = getClient().execute(get) --> Line_20 $$ if (response.getEntity() == null) [FD]
Line_17 $$ InputStreamReader isr = null --> Line_21 $$ isr = new InputStreamReader(response.getEntity().getContent()) [FD]
Line_12 $$ final HttpResponse response = getClient().execute(get) --> Line_21 $$ isr = new InputStreamReader(response.getEntity().getContent()) [FD]
Line_18 $$ BufferedReader br = null --> Line_22 $$ br = new BufferedReader(isr) [FD]
Line_23 $$ String line = null --> Line_24 $$ do [FD]
Line_24 $$ do --> Line_25 $$ line = br.readLine() [CD]
Line_23 $$ String line = null --> Line_25 $$ line = br.readLine() [FD]
Line_18 $$ BufferedReader br = null --> Line_25 $$ line = br.readLine() [FD]
Line_22 $$ br = new BufferedReader(isr) --> Line_25 $$ line = br.readLine() [FD]
Line_24 $$ do --> Line_26 $$ if (line != null) [CD]
Line_25 $$ line = br.readLine() --> Line_26 $$ if (line != null) [FD]
Line_23 $$ String line = null --> Line_26 $$ if (line != null) [FD]
Line_26 $$ if (line != null) --> Line_27 $$ if (line.contains("does not exist.")) [CD]
Line_25 $$ line = br.readLine() --> Line_27 $$ if (line.contains("does not exist.")) [FD]
Line_23 $$ String line = null --> Line_27 $$ if (line.contains("does not exist.")) [FD]
Line_27 $$ if (line.contains("does not exist.")) --> Line_28 $$ return null [CD]
Line_26 $$ if (line != null) --> Line_30 $$ if (line.startsWith("ticket/")) [CD]
Line_25 $$ line = br.readLine() --> Line_30 $$ if (line.startsWith("ticket/")) [FD]
Line_23 $$ String line = null --> Line_30 $$ if (line.startsWith("ticket/")) [FD]
Line_30 $$ if (line.startsWith("ticket/")) --> Line_31 $$ ticketIds.add(Long.parseLong(line.replace("ticket/", ""))) [CD]
Line_10 $$ final List<Long> ticketIds = new ArrayList<Long>() --> Line_31 $$ ticketIds.add(Long.parseLong(line.replace("ticket/", ""))) [FD]
Line_25 $$ line = br.readLine() --> Line_31 $$ ticketIds.add(Long.parseLong(line.replace("ticket/", ""))) [FD]
Line_23 $$ String line = null --> Line_31 $$ ticketIds.add(Long.parseLong(line.replace("ticket/", ""))) [FD]
Line_18 $$ BufferedReader br = null --> Line_38 $$ IOUtils.closeQuietly(br) [FD]
Line_22 $$ br = new BufferedReader(isr) --> Line_38 $$ IOUtils.closeQuietly(br) [FD]
Line_17 $$ InputStreamReader isr = null --> Line_39 $$ IOUtils.closeQuietly(isr) [FD]
Line_21 $$ isr = new InputStreamReader(response.getEntity().getContent()) --> Line_39 $$ IOUtils.closeQuietly(isr) [FD]
Line_9 $$ final List<RTTicket> tickets = new ArrayList<RTTicket>() --> Line_48 $$ tickets.add(getTicket(id, false)) [FD]
Line_46 $$ for (final Long id : ticketIds) --> Line_48 $$ tickets.add(getTicket(id, false)) [FD]
Line_2 $$ public List<RTTicket> getTicketsForQueue(final String queueName, long limit) --> Line_53 $$ return tickets [CD]
Line_25 $$ line = br.readLine() --> Line_24 $$ do [FD]
