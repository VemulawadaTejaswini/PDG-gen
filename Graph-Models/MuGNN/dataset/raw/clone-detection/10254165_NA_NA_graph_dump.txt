Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_3 $$ List fileList = getSubFiles(new File(baseDir)) [CD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_4 $$ ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(fileName + ".temp")) [CD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_5 $$ ZipEntry ze = null [CD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_6 $$ byte[] buf = new byte[BUFFER] [CD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_7 $$ byte[] encrypByte = new byte[encrypLength] [CD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_8 $$ int readLen = 0 [CD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_9 $$ for (int i = 0; i < fileList.size(); i++) [CD]
Line_3 $$ List fileList = getSubFiles(new File(baseDir)) --> Line_9 $$ for (int i = 0; i < fileList.size(); i++) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_10 $$ if (stopZipFile) [CD]
Line_10 $$ if (stopZipFile) --> Line_11 $$ zos.close() [CD]
Line_4 $$ ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(fileName + ".temp")) --> Line_11 $$ zos.close() [FD]
Line_10 $$ if (stopZipFile) --> Line_12 $$ File zipFile = new File(fileName + ".temp") [CD]
Line_10 $$ if (stopZipFile) --> Line_13 $$ if (zipFile.exists()) [CD]
Line_12 $$ File zipFile = new File(fileName + ".temp") --> Line_13 $$ if (zipFile.exists()) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_16 $$ File f = (File) fileList.get(i) [CD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_16 $$ File f = (File) fileList.get(i) [FD]
Line_3 $$ List fileList = getSubFiles(new File(baseDir)) --> Line_16 $$ File f = (File) fileList.get(i) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_17 $$ if (f.getAbsoluteFile().equals(fileName + ".temp")) [CD]
Line_16 $$ File f = (File) fileList.get(i) --> Line_17 $$ if (f.getAbsoluteFile().equals(fileName + ".temp")) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_18 $$ ze = new ZipEntry(getAbsFileName(baseDir, f)) [CD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_18 $$ ze = new ZipEntry(getAbsFileName(baseDir, f)) [FD]
Line_16 $$ File f = (File) fileList.get(i) --> Line_18 $$ ze = new ZipEntry(getAbsFileName(baseDir, f)) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_19 $$ ze.setSize(f.length()) [CD]
Line_16 $$ File f = (File) fileList.get(i) --> Line_19 $$ ze.setSize(f.length()) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_20 $$ ze.setTime(f.lastModified()) [CD]
Line_16 $$ File f = (File) fileList.get(i) --> Line_20 $$ ze.setTime(f.lastModified()) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_21 $$ zos.putNextEntry(ze) [CD]
Line_4 $$ ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(fileName + ".temp")) --> Line_21 $$ zos.putNextEntry(ze) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_22 $$ InputStream is = new BufferedInputStream(new FileInputStream(f)) [CD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_23 $$ readLen = is.read(buf, 0, BUFFER) [CD]
Line_8 $$ int readLen = 0 --> Line_23 $$ readLen = is.read(buf, 0, BUFFER) [FD]
Line_22 $$ InputStream is = new BufferedInputStream(new FileInputStream(f)) --> Line_23 $$ readLen = is.read(buf, 0, BUFFER) [FD]
Line_6 $$ byte[] buf = new byte[BUFFER] --> Line_23 $$ readLen = is.read(buf, 0, BUFFER) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_24 $$ if (encrypt) [CD]
Line_24 $$ if (encrypt) --> Line_25 $$ if (readLen >= encrypLength) [CD]
Line_23 $$ readLen = is.read(buf, 0, BUFFER) --> Line_25 $$ if (readLen >= encrypLength) [FD]
Line_8 $$ int readLen = 0 --> Line_25 $$ if (readLen >= encrypLength) [FD]
Line_25 $$ if (readLen >= encrypLength) --> Line_26 $$ System.arraycopy(buf, 0, encrypByte, 0, encrypLength) [CD]
Line_6 $$ byte[] buf = new byte[BUFFER] --> Line_26 $$ System.arraycopy(buf, 0, encrypByte, 0, encrypLength) [FD]
Line_7 $$ byte[] encrypByte = new byte[encrypLength] --> Line_26 $$ System.arraycopy(buf, 0, encrypByte, 0, encrypLength) [FD]
Line_25 $$ if (readLen >= encrypLength) --> Line_27 $$ if (readLen > 0) [CD]
Line_23 $$ readLen = is.read(buf, 0, BUFFER) --> Line_27 $$ if (readLen > 0) [FD]
Line_8 $$ int readLen = 0 --> Line_27 $$ if (readLen > 0) [FD]
Line_27 $$ if (readLen > 0) --> Line_28 $$ Arrays.fill(encrypByte, (byte) 0) [CD]
Line_7 $$ byte[] encrypByte = new byte[encrypLength] --> Line_28 $$ Arrays.fill(encrypByte, (byte) 0) [FD]
Line_27 $$ if (readLen > 0) --> Line_29 $$ System.arraycopy(buf, 0, encrypByte, 0, readLen) [CD]
Line_6 $$ byte[] buf = new byte[BUFFER] --> Line_29 $$ System.arraycopy(buf, 0, encrypByte, 0, readLen) [FD]
Line_7 $$ byte[] encrypByte = new byte[encrypLength] --> Line_29 $$ System.arraycopy(buf, 0, encrypByte, 0, readLen) [FD]
Line_23 $$ readLen = is.read(buf, 0, BUFFER) --> Line_29 $$ System.arraycopy(buf, 0, encrypByte, 0, readLen) [FD]
Line_8 $$ int readLen = 0 --> Line_29 $$ System.arraycopy(buf, 0, encrypByte, 0, readLen) [FD]
Line_27 $$ if (readLen > 0) --> Line_30 $$ readLen = encrypLength [CD]
Line_23 $$ readLen = is.read(buf, 0, BUFFER) --> Line_30 $$ readLen = encrypLength [FD]
Line_8 $$ int readLen = 0 --> Line_30 $$ readLen = encrypLength [FD]
Line_24 $$ if (encrypt) --> Line_32 $$ byte[] temp = CryptionControl.getInstance().encryptoECB(encrypByte, rootKey) [CD]
Line_7 $$ byte[] encrypByte = new byte[encrypLength] --> Line_32 $$ byte[] temp = CryptionControl.getInstance().encryptoECB(encrypByte, rootKey) [FD]
Line_24 $$ if (encrypt) --> Line_33 $$ System.arraycopy(temp, 0, buf, 0, encrypLength) [CD]
Line_32 $$ byte[] temp = CryptionControl.getInstance().encryptoECB(encrypByte, rootKey) --> Line_33 $$ System.arraycopy(temp, 0, buf, 0, encrypLength) [FD]
Line_6 $$ byte[] buf = new byte[BUFFER] --> Line_33 $$ System.arraycopy(temp, 0, buf, 0, encrypLength) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_35 $$ while (readLen != -1) [CD]
Line_23 $$ readLen = is.read(buf, 0, BUFFER) --> Line_35 $$ while (readLen != -1) [FD]
Line_30 $$ readLen = encrypLength --> Line_35 $$ while (readLen != -1) [FD]
Line_8 $$ int readLen = 0 --> Line_35 $$ while (readLen != -1) [FD]
Line_35 $$ while (readLen != -1) --> Line_36 $$ zos.write(buf, 0, readLen) [CD]
Line_4 $$ ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(fileName + ".temp")) --> Line_36 $$ zos.write(buf, 0, readLen) [FD]
Line_6 $$ byte[] buf = new byte[BUFFER] --> Line_36 $$ zos.write(buf, 0, readLen) [FD]
Line_23 $$ readLen = is.read(buf, 0, BUFFER) --> Line_36 $$ zos.write(buf, 0, readLen) [FD]
Line_30 $$ readLen = encrypLength --> Line_36 $$ zos.write(buf, 0, readLen) [FD]
Line_8 $$ int readLen = 0 --> Line_36 $$ zos.write(buf, 0, readLen) [FD]
Line_35 $$ while (readLen != -1) --> Line_37 $$ readLen = is.read(buf, 0, BUFFER) [CD]
Line_23 $$ readLen = is.read(buf, 0, BUFFER) --> Line_37 $$ readLen = is.read(buf, 0, BUFFER) [FD]
Line_30 $$ readLen = encrypLength --> Line_37 $$ readLen = is.read(buf, 0, BUFFER) [FD]
Line_8 $$ int readLen = 0 --> Line_37 $$ readLen = is.read(buf, 0, BUFFER) [FD]
Line_22 $$ InputStream is = new BufferedInputStream(new FileInputStream(f)) --> Line_37 $$ readLen = is.read(buf, 0, BUFFER) [FD]
Line_6 $$ byte[] buf = new byte[BUFFER] --> Line_37 $$ readLen = is.read(buf, 0, BUFFER) [FD]
Line_9 $$ for (int i = 0; i < fileList.size(); i++) --> Line_39 $$ is.close() [CD]
Line_22 $$ InputStream is = new BufferedInputStream(new FileInputStream(f)) --> Line_39 $$ is.close() [FD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_41 $$ zos.close() [CD]
Line_4 $$ ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(fileName + ".temp")) --> Line_41 $$ zos.close() [FD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_42 $$ File zipFile = new File(fileName + ".temp") [CD]
Line_2 $$ public void zipFile(String baseDir, String fileName, boolean encrypt) throws Exception --> Line_43 $$ zipFile.renameTo(new File(fileName + ".zip")) [CD]
Line_12 $$ File zipFile = new File(fileName + ".temp") --> Line_43 $$ zipFile.renameTo(new File(fileName + ".zip")) [FD]
Line_42 $$ File zipFile = new File(fileName + ".temp") --> Line_43 $$ zipFile.renameTo(new File(fileName + ".zip")) [FD]
Line_30 $$ readLen = encrypLength --> Line_25 $$ if (readLen >= encrypLength) [FD]
Line_30 $$ readLen = encrypLength --> Line_27 $$ if (readLen > 0) [FD]
Line_30 $$ readLen = encrypLength --> Line_29 $$ System.arraycopy(buf, 0, encrypByte, 0, readLen) [FD]
Line_37 $$ readLen = is.read(buf, 0, BUFFER) --> Line_35 $$ while (readLen != -1) [FD]
Line_37 $$ readLen = is.read(buf, 0, BUFFER) --> Line_36 $$ zos.write(buf, 0, readLen) [FD]
