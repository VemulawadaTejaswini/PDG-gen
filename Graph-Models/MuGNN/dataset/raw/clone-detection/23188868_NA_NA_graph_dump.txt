Line_4 $$ Map<String, File> projectFiles = new HashMap<String, File>() --> Line_7 $$ projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter)) [FD]
Line_6 $$ for (File nextLocation : filesToZip) --> Line_7 $$ projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter)) [FD]
Line_5 $$ IPath basePath = new Path("/") --> Line_7 $$ projectFiles.putAll(getFilesToZip(nextLocation, basePath, fileFilter)) [FD]
Line_4 $$ Map<String, File> projectFiles = new HashMap<String, File>() --> Line_9 $$ if (projectFiles.isEmpty()) [FD]
Line_9 $$ if (projectFiles.isEmpty()) --> Line_10 $$ PlatformActivator.logDebug("Zip file (" + zipFileName + ") not created because there were no files to zip") [CD]
Line_9 $$ if (projectFiles.isEmpty()) --> Line_11 $$ return [CD]
Line_13 $$ IPath resultsPath = PlatformActivator.getDefault().getResultsPath() --> Line_14 $$ File copyRoot = resultsPath.toFile() [FD]
Line_14 $$ File copyRoot = resultsPath.toFile() --> Line_15 $$ copyRoot.mkdirs() [FD]
Line_13 $$ IPath resultsPath = PlatformActivator.getDefault().getResultsPath() --> Line_16 $$ IPath zipFilePath = resultsPath.append(new Path(finalZip)) [FD]
Line_16 $$ IPath zipFilePath = resultsPath.append(new Path(finalZip)) --> Line_17 $$ String zipFileName = zipFilePath.toPortableString() [FD]
Line_18 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_20 $$ out.setLevel(Deflater.DEFAULT_COMPRESSION) [FD]
Line_4 $$ Map<String, File> projectFiles = new HashMap<String, File>() --> Line_21 $$ for (String filePath : projectFiles.keySet()) [FD]
Line_4 $$ Map<String, File> projectFiles = new HashMap<String, File>() --> Line_22 $$ File nextFile = projectFiles.get(filePath) [FD]
Line_21 $$ for (String filePath : projectFiles.keySet()) --> Line_22 $$ File nextFile = projectFiles.get(filePath) [FD]
Line_18 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_25 $$ out.putNextEntry(new ZipEntry(filePath)) [FD]
Line_23 $$ FileInputStream fin = new FileInputStream(nextFile) --> Line_28 $$ int bread = fin.read(bin, 0, 4096) [FD]
Line_27 $$ byte[] bin = new byte[4096] --> Line_28 $$ int bread = fin.read(bin, 0, 4096) [FD]
Line_28 $$ int bread = fin.read(bin, 0, 4096) --> Line_29 $$ while (bread != -1) [FD]
Line_29 $$ while (bread != -1) --> Line_30 $$ out.write(bin, 0, bread) [CD]
Line_18 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_30 $$ out.write(bin, 0, bread) [FD]
Line_27 $$ byte[] bin = new byte[4096] --> Line_30 $$ out.write(bin, 0, bread) [FD]
Line_28 $$ int bread = fin.read(bin, 0, 4096) --> Line_30 $$ out.write(bin, 0, bread) [FD]
Line_29 $$ while (bread != -1) --> Line_31 $$ bread = fin.read(bin, 0, 4096) [CD]
Line_28 $$ int bread = fin.read(bin, 0, 4096) --> Line_31 $$ bread = fin.read(bin, 0, 4096) [FD]
Line_23 $$ FileInputStream fin = new FileInputStream(nextFile) --> Line_31 $$ bread = fin.read(bin, 0, 4096) [FD]
Line_27 $$ byte[] bin = new byte[4096] --> Line_31 $$ bread = fin.read(bin, 0, 4096) [FD]
Line_18 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_34 $$ out.closeEntry() [FD]
Line_23 $$ FileInputStream fin = new FileInputStream(nextFile) --> Line_37 $$ fin.close() [FD]
Line_18 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName)) --> Line_41 $$ out.close() [FD]
Line_31 $$ bread = fin.read(bin, 0, 4096) --> Line_29 $$ while (bread != -1) [FD]
Line_31 $$ bread = fin.read(bin, 0, 4096) --> Line_30 $$ out.write(bin, 0, bread) [FD]
