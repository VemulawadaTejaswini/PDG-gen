Line_3 $$ runningThread = new Thread() --> Line_5 $$ Application.getController().notifyProgressStarted() [CD]
Line_3 $$ runningThread = new Thread() --> Line_6 $$ Application.getController().notifyProgressUpdated(-1) [CD]
Line_3 $$ runningThread = new Thread() --> Line_7 $$ for (int f = 0; f < fileList.size(); f++) [CD]
Line_7 $$ for (int f = 0; f < fileList.size(); f++) --> Line_8 $$ File archive = fileList.get(f) [CD]
Line_7 $$ for (int f = 0; f < fileList.size(); f++) --> Line_8 $$ File archive = fileList.get(f) [FD]
Line_7 $$ for (int f = 0; f < fileList.size(); f++) --> Line_9 $$ String arname = archive.getName() [CD]
Line_8 $$ File archive = fileList.get(f) --> Line_9 $$ String arname = archive.getName() [FD]
Line_7 $$ for (int f = 0; f < fileList.size(); f++) --> Line_10 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length()) [CD]
Line_9 $$ String arname = archive.getName() --> Line_10 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length()) [FD]
Line_7 $$ for (int f = 0; f < fileList.size(); f++) --> Line_11 $$ Algorithm alg = null [CD]
Line_7 $$ for (int f = 0; f < fileList.size(); f++) --> Line_12 $$ Algorithm algs[] = algFactory.getAlgorithms() [CD]
Line_7 $$ for (int f = 0; f < fileList.size(); f++) --> Line_13 $$ for (int i = 0; i < algs.length; i++) [CD]
Line_13 $$ for (int i = 0; i < algs.length; i++) --> Line_14 $$ if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) [CD]
Line_10 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length()) --> Line_14 $$ if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) [FD]
Line_14 $$ if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) --> Line_15 $$ alg = algs[i] [CD]
Line_11 $$ Algorithm alg = null --> Line_15 $$ alg = algs[i] [FD]
Line_7 $$ for (int f = 0; f < fileList.size(); f++) --> Line_19 $$ if (alg == null) [CD]
Line_15 $$ alg = algs[i] --> Line_19 $$ if (alg == null) [FD]
Line_11 $$ Algorithm alg = null --> Line_19 $$ if (alg == null) [FD]
Line_19 $$ if (alg == null) --> Line_20 $$ Application.getController().displayError(bundle.getString("unknown_alg_title"), bundle.getString("unknown_alg_text")) [CD]
Line_19 $$ if (alg == null) --> Line_21 $$ return [CD]
Line_7 $$ for (int f = 0; f < fileList.size(); f++) --> Line_24 $$ if (!alg.initDecrypt(password)) [CD]
Line_15 $$ alg = algs[i] --> Line_24 $$ if (!alg.initDecrypt(password)) [FD]
Line_11 $$ Algorithm alg = null --> Line_24 $$ if (!alg.initDecrypt(password)) [FD]
Line_24 $$ if (!alg.initDecrypt(password)) --> Line_25 $$ Application.getController().displayError(bundle.getString("dec_init_fail_title"), bundle.getString("dec_init_fail_text")) [CD]
Line_24 $$ if (!alg.initDecrypt(password)) --> Line_26 $$ return [CD]
Line_15 $$ alg = algs[i] --> Line_31 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) [FD]
Line_11 $$ Algorithm alg = null --> Line_31 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) [FD]
Line_31 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) --> Line_32 $$ is = alg.getDecryptionStream(new FileInputStream(archive)) [CD]
Line_15 $$ alg = algs[i] --> Line_32 $$ is = alg.getDecryptionStream(new FileInputStream(archive)) [FD]
Line_11 $$ Algorithm alg = null --> Line_32 $$ is = alg.getDecryptionStream(new FileInputStream(archive)) [FD]
Line_31 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) --> Line_33 $$ if (is == null) [CD]
Line_33 $$ if (is == null) --> Line_34 $$ Application.getController().displayError(bundle.getString("dec_init_fail_title"), bundle.getString("dec_init_fail_text")) [CD]
Line_33 $$ if (is == null) --> Line_35 $$ return [CD]
Line_31 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) --> Line_37 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) [CD]
Line_15 $$ alg = algs[i] --> Line_37 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) [FD]
Line_11 $$ Algorithm alg = null --> Line_37 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) [FD]
Line_37 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) --> Line_39 $$ if (is == null) [CD]
Line_39 $$ if (is == null) --> Line_40 $$ Application.getController().displayError(bundle.getString("dec_init_fail_title"), bundle.getString("dec_init_fail_text")) [CD]
Line_39 $$ if (is == null) --> Line_41 $$ return [CD]
Line_45 $$ if (zis == null) --> Line_46 $$ Application.getController().displayError(bundle.getString("dec_init_fail_title"), bundle.getString("dec_init_fail_text")) [CD]
Line_45 $$ if (zis == null) --> Line_47 $$ return [CD]
Line_50 $$ if (outputDir == null) --> Line_51 $$ return [CD]
Line_53 $$ if (!outputDir.exists()) --> Line_54 $$ if (!outputDir.mkdir()) [CD]
Line_54 $$ if (!outputDir.mkdir()) --> Line_55 $$ Application.getController().displayError(bundle.getString("output_dir_fail_title"), outputDir.getAbsolutePath() + " " + bundle.getString("output_dir_fail_text")) [CD]
Line_54 $$ if (!outputDir.mkdir()) --> Line_56 $$ return [CD]
Line_63 $$ File out = new File(outputDir, zae.getName()) --> Line_64 $$ if (out.exists()) [FD]
Line_64 $$ if (out.exists()) --> Line_65 $$ if (!mayOverwrite(out)) [CD]
Line_63 $$ File out = new File(outputDir, zae.getName()) --> Line_65 $$ if (!mayOverwrite(out)) [FD]
Line_63 $$ File out = new File(outputDir, zae.getName()) --> Line_69 $$ Application.getController().displayVerbose("writing to file: " + out.getAbsolutePath()) [FD]
Line_63 $$ File out = new File(outputDir, zae.getName()) --> Line_70 $$ if (!out.getParentFile().exists()) [FD]
Line_70 $$ if (!out.getParentFile().exists()) --> Line_71 $$ out.getParentFile().mkdirs() [CD]
Line_63 $$ File out = new File(outputDir, zae.getName()) --> Line_71 $$ out.getParentFile().mkdirs() [FD]
Line_73 $$ if (zae.isDirectory()) --> Line_74 $$ out.mkdir() [CD]
Line_63 $$ File out = new File(outputDir, zae.getName()) --> Line_74 $$ out.mkdir() [FD]
Line_78 $$ long length = zae.getCompressedSize(), counter = 0 --> Line_83 $$ while ((counter = in.read(buffer)) > 0) [FD]
Line_82 $$ DigestInputStream in = new DigestInputStream(zis, md) --> Line_83 $$ while ((counter = in.read(buffer)) > 0) [FD]
Line_80 $$ byte[] buffer = new byte[16384] --> Line_83 $$ while ((counter = in.read(buffer)) > 0) [FD]
Line_83 $$ while ((counter = in.read(buffer)) > 0) --> Line_84 $$ if (Thread.currentThread().isInterrupted()) [CD]
Line_84 $$ if (Thread.currentThread().isInterrupted()) --> Line_85 $$ os.close() [CD]
Line_77 $$ FileOutputStream os = new FileOutputStream(out) --> Line_85 $$ os.close() [FD]
Line_84 $$ if (Thread.currentThread().isInterrupted()) --> Line_86 $$ zis.close() [CD]
Line_84 $$ if (Thread.currentThread().isInterrupted()) --> Line_87 $$ Application.getController().notifyProgressFinished() [CD]
Line_84 $$ if (Thread.currentThread().isInterrupted()) --> Line_88 $$ resetModel(true) [CD]
Line_84 $$ if (Thread.currentThread().isInterrupted()) --> Line_89 $$ return [CD]
Line_83 $$ while ((counter = in.read(buffer)) > 0) --> Line_91 $$ os.write(buffer, 0, (int) counter) [CD]
Line_77 $$ FileOutputStream os = new FileOutputStream(out) --> Line_91 $$ os.write(buffer, 0, (int) counter) [FD]
Line_80 $$ byte[] buffer = new byte[16384] --> Line_91 $$ os.write(buffer, 0, (int) counter) [FD]
Line_77 $$ FileOutputStream os = new FileOutputStream(out) --> Line_93 $$ os.close() [FD]
Line_94 $$ if (zae.getComment() != null && zae.getComment().length() > 0) --> Line_95 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) [CD]
Line_81 $$ MessageDigest md = MessageDigest.getInstance("SHA-1") --> Line_95 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) [FD]
Line_95 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) --> Line_96 $$ Application.getController().displayVerbose("Hash of " + zae.getName() + ": " + new Base64().encodeToString(md.digest())) [CD]
Line_81 $$ MessageDigest md = MessageDigest.getInstance("SHA-1") --> Line_96 $$ Application.getController().displayVerbose("Hash of " + zae.getName() + ": " + new Base64().encodeToString(md.digest())) [FD]
Line_95 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) --> Line_97 $$ Application.getController().displayError("Hash Error", "The stored hash of the original file and the hash of the decrypted data do not match. Normally, this means that your data has been manipulated/damaged, but it can also happen if your Java Runtime has a bug in his hash functions.\nIT IS VERY IMPORTANT TO CHECK THE INTEGRITY OF YOUR DECRYPTED DATA!") [CD]
Line_95 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) --> Line_99 $$ Application.getController().displayVerbose("the hash of " + zae.getName() + " was verified succesfully") [CD]
Line_103 $$ if (!gotEntries) --> Line_104 $$ Application.getController().displayError(bundle.getString("error_no_entries_title"), bundle.getString("error_no_entries_text")) [CD]
Line_103 $$ if (!gotEntries) --> Line_105 $$ outputDir.delete() [CD]
Line_3 $$ runningThread = new Thread() --> Line_117 $$ Application.getController().notifyProgressFinished() [CD]
Line_3 $$ runningThread = new Thread() --> Line_118 $$ resetModel(true) [CD]
Line_2 $$ private void doDecrypt() --> Line_121 $$ runningThread.start() [CD]
