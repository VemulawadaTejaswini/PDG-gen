Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_3 $$ BlockCipher cipher = new SerpentEngine() [CD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_4 $$ Random rnd = new Random() [CD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_5 $$ byte[] key = new byte[256 / 8] [CD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_6 $$ rnd.nextBytes(key) [CD]
Line_4 $$ Random rnd = new Random() --> Line_6 $$ rnd.nextBytes(key) [FD]
Line_5 $$ byte[] key = new byte[256 / 8] --> Line_6 $$ rnd.nextBytes(key) [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_7 $$ byte[] iv = new byte[cipher.getBlockSize()] [CD]
Line_3 $$ BlockCipher cipher = new SerpentEngine() --> Line_7 $$ byte[] iv = new byte[cipher.getBlockSize()] [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_8 $$ rnd.nextBytes(iv) [CD]
Line_4 $$ Random rnd = new Random() --> Line_8 $$ rnd.nextBytes(iv) [FD]
Line_7 $$ byte[] iv = new byte[cipher.getBlockSize()] --> Line_8 $$ rnd.nextBytes(iv) [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_9 $$ byte[] data = new byte[1230000] [CD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_10 $$ new Random().nextBytes(data) [CD]
Line_9 $$ byte[] data = new byte[1230000] --> Line_10 $$ new Random().nextBytes(data) [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_11 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream() [CD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_12 $$ CryptOutputStream eout = new CryptOutputStream(bout, cipher, key) [CD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_13 $$ eout.write(data) [CD]
Line_12 $$ CryptOutputStream eout = new CryptOutputStream(bout, cipher, key) --> Line_13 $$ eout.write(data) [FD]
Line_9 $$ byte[] data = new byte[1230000] --> Line_13 $$ eout.write(data) [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_14 $$ eout.close() [CD]
Line_12 $$ CryptOutputStream eout = new CryptOutputStream(bout, cipher, key) --> Line_14 $$ eout.close() [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_15 $$ byte[] eData = bout.toByteArray() [CD]
Line_11 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream() --> Line_15 $$ byte[] eData = bout.toByteArray() [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_16 $$ ByteArrayInputStream bin = new ByteArrayInputStream(eData) [CD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_17 $$ CryptInputStream din = new CryptInputStream(bin, cipher, key) [CD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_18 $$ bout = new ByteArrayOutputStream() [CD]
Line_11 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream() --> Line_18 $$ bout = new ByteArrayOutputStream() [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_19 $$ IOUtils.copy(din, bout) [CD]
Line_17 $$ CryptInputStream din = new CryptInputStream(bin, cipher, key) --> Line_19 $$ IOUtils.copy(din, bout) [FD]
Line_11 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream() --> Line_19 $$ IOUtils.copy(din, bout) [FD]
Line_18 $$ bout = new ByteArrayOutputStream() --> Line_19 $$ IOUtils.copy(din, bout) [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_20 $$ eData = bout.toByteArray() [CD]
Line_15 $$ byte[] eData = bout.toByteArray() --> Line_20 $$ eData = bout.toByteArray() [FD]
Line_11 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream() --> Line_20 $$ eData = bout.toByteArray() [FD]
Line_18 $$ bout = new ByteArrayOutputStream() --> Line_20 $$ eData = bout.toByteArray() [FD]
Line_2 $$ public void testEncryptDecrypt() throws IOException --> Line_21 $$ Assert.assertTrue(Arrays.areEqual(data, eData)) [CD]
Line_9 $$ byte[] data = new byte[1230000] --> Line_21 $$ Assert.assertTrue(Arrays.areEqual(data, eData)) [FD]
Line_15 $$ byte[] eData = bout.toByteArray() --> Line_21 $$ Assert.assertTrue(Arrays.areEqual(data, eData)) [FD]
Line_20 $$ eData = bout.toByteArray() --> Line_21 $$ Assert.assertTrue(Arrays.areEqual(data, eData)) [FD]
