Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_3 $$ URLClassLoader urlLoader = new URLClassLoader(new URL[] [CD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_3 $$ URLClassLoader urlLoader = new URLClassLoader(new URL[] [FD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_4 $$ JarInputStream jis = new JarInputStream(new FileInputStream(jarfile)) [CD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_5 $$ JarEntry entry = jis.getNextJarEntry() [CD]
Line_4 $$ JarInputStream jis = new JarInputStream(new FileInputStream(jarfile)) --> Line_5 $$ JarEntry entry = jis.getNextJarEntry() [FD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_6 $$ String name = null [CD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_7 $$ String tmpdir = System.getProperty("user.dir") + File.separator + Application.getProperty("dir.tmp") + File.separator [CD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_8 $$ byte[] buffer = new byte[1000] [CD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_9 $$ while (entry != null) [CD]
Line_9 $$ while (entry != null) --> Line_10 $$ name = entry.getName() [CD]
Line_6 $$ String name = null --> Line_10 $$ name = entry.getName() [FD]
Line_9 $$ while (entry != null) --> Line_11 $$ if (name.endsWith(".class")) [CD]
Line_10 $$ name = entry.getName() --> Line_11 $$ if (name.endsWith(".class")) [FD]
Line_6 $$ String name = null --> Line_11 $$ if (name.endsWith(".class")) [FD]
Line_10 $$ name = entry.getName() --> Line_12 $$ name = name.substring(0, name.length() - 6) [FD]
Line_6 $$ String name = null --> Line_12 $$ name = name.substring(0, name.length() - 6) [FD]
Line_10 $$ name = entry.getName() --> Line_13 $$ name = name.replace('/', '.') [FD]
Line_12 $$ name = name.substring(0, name.length() - 6) --> Line_13 $$ name = name.replace('/', '.') [FD]
Line_6 $$ String name = null --> Line_13 $$ name = name.replace('/', '.') [FD]
Line_3 $$ URLClassLoader urlLoader = new URLClassLoader(new URL[] --> Line_15 $$ Class<?> cls = urlLoader.loadClass(name) [FD]
Line_10 $$ name = entry.getName() --> Line_15 $$ Class<?> cls = urlLoader.loadClass(name) [FD]
Line_12 $$ name = name.substring(0, name.length() - 6) --> Line_15 $$ Class<?> cls = urlLoader.loadClass(name) [FD]
Line_13 $$ name = name.replace('/', '.') --> Line_15 $$ Class<?> cls = urlLoader.loadClass(name) [FD]
Line_6 $$ String name = null --> Line_15 $$ Class<?> cls = urlLoader.loadClass(name) [FD]
Line_15 $$ Class<?> cls = urlLoader.loadClass(name) --> Line_16 $$ if (IAlgorithm.class.isAssignableFrom(cls) && !cls.isInterface() && ((cls.getModifiers() & Modifier.ABSTRACT) == 0)) [FD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_17 $$ dir.addAlgorithm(cls) [FD]
Line_15 $$ Class<?> cls = urlLoader.loadClass(name) --> Line_17 $$ dir.addAlgorithm(cls) [FD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_18 $$ model.putClass(cls.getName(), cls) [FD]
Line_15 $$ Class<?> cls = urlLoader.loadClass(name) --> Line_18 $$ model.putClass(cls.getName(), cls) [FD]
Line_15 $$ Class<?> cls = urlLoader.loadClass(name) --> Line_19 $$ if (ISerializable.class.isAssignableFrom(cls)) [FD]
Line_2 $$ private void putAlgosFromJar(File jarfile, AlgoDir dir, Model model) throws FileNotFoundException, IOException --> Line_20 $$ model.putClass(cls.getName(), cls) [FD]
Line_15 $$ Class<?> cls = urlLoader.loadClass(name) --> Line_20 $$ model.putClass(cls.getName(), cls) [FD]
Line_10 $$ name = entry.getName() --> Line_25 $$ if (Constants.isAllowedImageType(name)) [FD]
Line_12 $$ name = name.substring(0, name.length() - 6) --> Line_25 $$ if (Constants.isAllowedImageType(name)) [FD]
Line_13 $$ name = name.replace('/', '.') --> Line_25 $$ if (Constants.isAllowedImageType(name)) [FD]
Line_6 $$ String name = null --> Line_25 $$ if (Constants.isAllowedImageType(name)) [FD]
Line_25 $$ if (Constants.isAllowedImageType(name)) --> Line_26 $$ int lastSep = name.lastIndexOf("/") [CD]
Line_10 $$ name = entry.getName() --> Line_26 $$ int lastSep = name.lastIndexOf("/") [FD]
Line_12 $$ name = name.substring(0, name.length() - 6) --> Line_26 $$ int lastSep = name.lastIndexOf("/") [FD]
Line_13 $$ name = name.replace('/', '.') --> Line_26 $$ int lastSep = name.lastIndexOf("/") [FD]
Line_6 $$ String name = null --> Line_26 $$ int lastSep = name.lastIndexOf("/") [FD]
Line_25 $$ if (Constants.isAllowedImageType(name)) --> Line_27 $$ if (lastSep != -1) [CD]
Line_26 $$ int lastSep = name.lastIndexOf("/") --> Line_27 $$ if (lastSep != -1) [FD]
Line_27 $$ if (lastSep != -1) --> Line_28 $$ String dirs = tmpdir + name.substring(0, lastSep) [CD]
Line_10 $$ name = entry.getName() --> Line_28 $$ String dirs = tmpdir + name.substring(0, lastSep) [FD]
Line_12 $$ name = name.substring(0, name.length() - 6) --> Line_28 $$ String dirs = tmpdir + name.substring(0, lastSep) [FD]
Line_13 $$ name = name.replace('/', '.') --> Line_28 $$ String dirs = tmpdir + name.substring(0, lastSep) [FD]
Line_6 $$ String name = null --> Line_28 $$ String dirs = tmpdir + name.substring(0, lastSep) [FD]
Line_26 $$ int lastSep = name.lastIndexOf("/") --> Line_28 $$ String dirs = tmpdir + name.substring(0, lastSep) [FD]
Line_27 $$ if (lastSep != -1) --> Line_29 $$ File d = new File(dirs) [CD]
Line_27 $$ if (lastSep != -1) --> Line_30 $$ if (!d.exists()) [CD]
Line_29 $$ File d = new File(dirs) --> Line_30 $$ if (!d.exists()) [FD]
Line_25 $$ if (Constants.isAllowedImageType(name)) --> Line_32 $$ String filename = tmpdir + name [CD]
Line_25 $$ if (Constants.isAllowedImageType(name)) --> Line_33 $$ File f = new File(filename) [CD]
Line_25 $$ if (Constants.isAllowedImageType(name)) --> Line_34 $$ if (!f.exists()) [CD]
Line_33 $$ File f = new File(filename) --> Line_34 $$ if (!f.exists()) [FD]
Line_34 $$ if (!f.exists()) --> Line_35 $$ f.createNewFile() [CD]
Line_33 $$ File f = new File(filename) --> Line_35 $$ f.createNewFile() [FD]
Line_34 $$ if (!f.exists()) --> Line_36 $$ FileOutputStream fos = new FileOutputStream(f) [CD]
Line_34 $$ if (!f.exists()) --> Line_37 $$ int read = -1 [CD]
Line_34 $$ if (!f.exists()) --> Line_38 $$ while ((read = jis.read(buffer)) != -1) [CD]
Line_37 $$ int read = -1 --> Line_38 $$ while ((read = jis.read(buffer)) != -1) [FD]
Line_4 $$ JarInputStream jis = new JarInputStream(new FileInputStream(jarfile)) --> Line_38 $$ while ((read = jis.read(buffer)) != -1) [FD]
Line_8 $$ byte[] buffer = new byte[1000] --> Line_38 $$ while ((read = jis.read(buffer)) != -1) [FD]
Line_38 $$ while ((read = jis.read(buffer)) != -1) --> Line_39 $$ fos.write(buffer, 0, read) [CD]
Line_38 $$ while ((read = jis.read(buffer)) != -1) --> Line_39 $$ fos.write(buffer, 0, read) [FD]
Line_36 $$ FileOutputStream fos = new FileOutputStream(f) --> Line_39 $$ fos.write(buffer, 0, read) [FD]
Line_8 $$ byte[] buffer = new byte[1000] --> Line_39 $$ fos.write(buffer, 0, read) [FD]
Line_37 $$ int read = -1 --> Line_39 $$ fos.write(buffer, 0, read) [FD]
Line_34 $$ if (!f.exists()) --> Line_41 $$ fos.close() [CD]
Line_36 $$ FileOutputStream fos = new FileOutputStream(f) --> Line_41 $$ fos.close() [FD]
Line_9 $$ while (entry != null) --> Line_44 $$ entry = jis.getNextJarEntry() [CD]
Line_4 $$ JarInputStream jis = new JarInputStream(new FileInputStream(jarfile)) --> Line_44 $$ entry = jis.getNextJarEntry() [FD]
Line_12 $$ name = name.substring(0, name.length() - 6) --> Line_11 $$ if (name.endsWith(".class")) [FD]
Line_13 $$ name = name.replace('/', '.') --> Line_11 $$ if (name.endsWith(".class")) [FD]
Line_13 $$ name = name.replace('/', '.') --> Line_12 $$ name = name.substring(0, name.length() - 6) [FD]
