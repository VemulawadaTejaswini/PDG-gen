Line_2 $$ public void dispatch(com.sun.star.util.URL aURL, com.sun.star.beans.PropertyValue[] aArguments) --> Line_3 $$ if (aURL.Protocol.compareTo("org.openoffice.oosvn.oosvn:") == 0) [CD]
Line_3 $$ if (aURL.Protocol.compareTo("org.openoffice.oosvn.oosvn:") == 0) --> Line_4 $$ OoDocProperty docProperty = getProperty() [CD]
Line_3 $$ if (aURL.Protocol.compareTo("org.openoffice.oosvn.oosvn:") == 0) --> Line_5 $$ settings.setCancelFired(false) [CD]
Line_3 $$ if (aURL.Protocol.compareTo("org.openoffice.oosvn.oosvn:") == 0) --> Line_6 $$ if (aURL.Path.compareTo("svnUpdate") == 0) [CD]
Line_4 $$ OoDocProperty docProperty = getProperty() --> Line_9 $$ settings = getSerializedSettings(docProperty) [FD]
Line_21 $$ if (logs.length == 0) --> Line_22 $$ error("Sorry, the specified repository is empty.") [CD]
Line_21 $$ if (logs.length == 0) --> Line_23 $$ return [CD]
Line_27 $$ File tempDir = new File(settings.getCheckoutPath() + svnWorker.tempDir) --> Line_28 $$ if (tempDir.exists()) [FD]
Line_28 $$ if (tempDir.exists()) --> Line_29 $$ if (deleteFileDir(tempDir) == false) [CD]
Line_27 $$ File tempDir = new File(settings.getCheckoutPath() + svnWorker.tempDir) --> Line_29 $$ if (deleteFileDir(tempDir) == false) [FD]
Line_29 $$ if (deleteFileDir(tempDir) == false) --> Line_30 $$ error("Error while deleting temporary checkout dir.") [CD]
Line_27 $$ File tempDir = new File(settings.getCheckoutPath() + svnWorker.tempDir) --> Line_34 $$ File[] tempFiles = tempDir.listFiles() [FD]
Line_37 $$ for (int j = 0; j < tempFiles.length; j++) --> Line_38 $$ if (tempFiles[j].toString().endsWith(".odt")) [CD]
Line_35 $$ File anyOdt = null --> Line_38 $$ if (tempFiles[j].toString().endsWith(".odt")) [FD]
Line_37 $$ for (int j = 0; j < tempFiles.length; j++) --> Line_39 $$ if (tempFiles[j].toString().equals(settings.getCheckoutDoc()) && settings.getCheckoutDoc() != null) [CD]
Line_36 $$ File thisOdt = null --> Line_39 $$ if (tempFiles[j].toString().equals(settings.getCheckoutDoc()) && settings.getCheckoutDoc() != null) [FD]
Line_39 $$ if (tempFiles[j].toString().equals(settings.getCheckoutDoc()) && settings.getCheckoutDoc() != null) --> Line_41 $$ if (thisOdt != null) [FD]
Line_36 $$ File thisOdt = null --> Line_41 $$ if (thisOdt != null) [FD]
Line_38 $$ if (tempFiles[j].toString().endsWith(".odt")) --> Line_41 $$ if (thisOdt != null) [FD]
Line_35 $$ File anyOdt = null --> Line_41 $$ if (thisOdt != null) [FD]
Line_38 $$ if (tempFiles[j].toString().endsWith(".odt")) --> Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) [FD]
Line_35 $$ File anyOdt = null --> Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) [FD]
Line_41 $$ if (thisOdt != null) --> Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_44 $$ File newOdt = new File(settings.getCheckoutPath() + "/" + anyOdt.getName()) [CD]
Line_38 $$ if (tempFiles[j].toString().endsWith(".odt")) --> Line_44 $$ File newOdt = new File(settings.getCheckoutPath() + "/" + anyOdt.getName()) [FD]
Line_35 $$ File anyOdt = null --> Line_44 $$ File newOdt = new File(settings.getCheckoutPath() + "/" + anyOdt.getName()) [FD]
Line_41 $$ if (thisOdt != null) --> Line_44 $$ File newOdt = new File(settings.getCheckoutPath() + "/" + anyOdt.getName()) [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_45 $$ if (newOdt.exists()) [CD]
Line_44 $$ File newOdt = new File(settings.getCheckoutPath() + "/" + anyOdt.getName()) --> Line_45 $$ if (newOdt.exists()) [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_46 $$ anyOdt.renameTo(newOdt) [CD]
Line_38 $$ if (tempFiles[j].toString().endsWith(".odt")) --> Line_46 $$ anyOdt.renameTo(newOdt) [FD]
Line_35 $$ File anyOdt = null --> Line_46 $$ anyOdt.renameTo(newOdt) [FD]
Line_41 $$ if (thisOdt != null) --> Line_46 $$ anyOdt.renameTo(newOdt) [FD]
Line_44 $$ File newOdt = new File(settings.getCheckoutPath() + "/" + anyOdt.getName()) --> Line_46 $$ anyOdt.renameTo(newOdt) [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_47 $$ File svnInfo = new File(settings.getCheckoutPath() + svnWorker.tempDir + "/.svn") [CD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_48 $$ File newSvnInfo = new File(settings.getCheckoutPath() + "/.svn") [CD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_49 $$ if (newSvnInfo.exists()) [CD]
Line_48 $$ File newSvnInfo = new File(settings.getCheckoutPath() + "/.svn") --> Line_49 $$ if (newSvnInfo.exists()) [FD]
Line_49 $$ if (newSvnInfo.exists()) --> Line_50 $$ if (deleteFileDir(newSvnInfo) == false) [CD]
Line_48 $$ File newSvnInfo = new File(settings.getCheckoutPath() + "/.svn") --> Line_50 $$ if (deleteFileDir(newSvnInfo) == false) [FD]
Line_50 $$ if (deleteFileDir(newSvnInfo) == false) --> Line_51 $$ error("Error while deleting temporary checkout dir.") [CD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_54 $$ url = "file:///" + newOdt.getPath().replace("\\", "/") [CD]
Line_42 $$ String url --> Line_54 $$ url = "file:///" + newOdt.getPath().replace("\\", "/") [FD]
Line_44 $$ File newOdt = new File(settings.getCheckoutPath() + "/" + anyOdt.getName()) --> Line_54 $$ url = "file:///" + newOdt.getPath().replace("\\", "/") [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_55 $$ svnInfo.renameTo(newSvnInfo) [CD]
Line_47 $$ File svnInfo = new File(settings.getCheckoutPath() + svnWorker.tempDir + "/.svn") --> Line_55 $$ svnInfo.renameTo(newSvnInfo) [FD]
Line_48 $$ File newSvnInfo = new File(settings.getCheckoutPath() + "/.svn") --> Line_55 $$ svnInfo.renameTo(newSvnInfo) [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_56 $$ anyOdt = newOdt [CD]
Line_38 $$ if (tempFiles[j].toString().endsWith(".odt")) --> Line_56 $$ anyOdt = newOdt [FD]
Line_35 $$ File anyOdt = null --> Line_56 $$ anyOdt = newOdt [FD]
Line_41 $$ if (thisOdt != null) --> Line_56 $$ anyOdt = newOdt [FD]
Line_44 $$ File newOdt = new File(settings.getCheckoutPath() + "/" + anyOdt.getName()) --> Line_56 $$ anyOdt = newOdt [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_57 $$ loadDocumentFromUrl(url) [CD]
Line_42 $$ String url --> Line_57 $$ loadDocumentFromUrl(url) [FD]
Line_54 $$ url = "file:///" + newOdt.getPath().replace("\\", "/") --> Line_57 $$ loadDocumentFromUrl(url) [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_58 $$ settings.setCheckoutDoc(anyOdt.getName()) [CD]
Line_38 $$ if (tempFiles[j].toString().endsWith(".odt")) --> Line_58 $$ settings.setCheckoutDoc(anyOdt.getName()) [FD]
Line_35 $$ File anyOdt = null --> Line_58 $$ settings.setCheckoutDoc(anyOdt.getName()) [FD]
Line_41 $$ if (thisOdt != null) --> Line_58 $$ settings.setCheckoutDoc(anyOdt.getName()) [FD]
Line_56 $$ anyOdt = newOdt --> Line_58 $$ settings.setCheckoutDoc(anyOdt.getName()) [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_70 $$ ///" + anyOdt.getPath().replace("\\", "/"); [CD]
Line_42 $$ String url --> Line_70 $$ ///" + anyOdt.getPath().replace("\\", "/"); [FD]
Line_54 $$ url = "file:///" + newOdt.getPath().replace("\\", "/") --> Line_70 $$ ///" + anyOdt.getPath().replace("\\", "/"); [FD]
Line_38 $$ if (tempFiles[j].toString().endsWith(".odt")) --> Line_70 $$ ///" + anyOdt.getPath().replace("\\", "/"); [FD]
Line_35 $$ File anyOdt = null --> Line_70 $$ ///" + anyOdt.getPath().replace("\\", "/"); [FD]
Line_41 $$ if (thisOdt != null) --> Line_70 $$ ///" + anyOdt.getPath().replace("\\", "/"); [FD]
Line_56 $$ anyOdt = newOdt --> Line_70 $$ ///" + anyOdt.getPath().replace("\\", "/"); [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_71 $$ XDispatchProvider xDispatchProvider = (XDispatchProvider) UnoRuntime.queryInterface(XDispatchProvider.class, m_xFrame) [CD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_72 $$ PropertyValue property[] = new PropertyValue[1] [CD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_73 $$ property[0] = new PropertyValue() [CD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_74 $$ property[0].Name = "URL" [CD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_75 $$ property[0].Value = url [CD]
Line_42 $$ String url --> Line_75 $$ property[0].Value = url [FD]
Line_54 $$ url = "file:///" + newOdt.getPath().replace("\\", "/") --> Line_75 $$ property[0].Value = url [FD]
Line_70 $$ ///" + anyOdt.getPath().replace("\\", "/"); --> Line_75 $$ property[0].Value = url [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_76 $$ XMultiServiceFactory xMSF = createProvider() [CD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_77 $$ Object objDispatchHelper = m_xServiceManager.createInstanceWithContext("com.sun.star.frame.DispatchHelper", m_xContext) [CD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_78 $$ XDispatchHelper xDispatchHelper = (XDispatchHelper) UnoRuntime.queryInterface(XDispatchHelper.class, objDispatchHelper) [CD]
Line_77 $$ Object objDispatchHelper = m_xServiceManager.createInstanceWithContext("com.sun.star.frame.DispatchHelper", m_xContext) --> Line_78 $$ XDispatchHelper xDispatchHelper = (XDispatchHelper) UnoRuntime.queryInterface(XDispatchHelper.class, objDispatchHelper) [FD]
Line_43 $$ if (settings.getCheckoutDoc() == null || !settings.getCheckoutDoc().equals(anyOdt.getName())) --> Line_79 $$ xDispatchHelper.executeDispatch(xDispatchProvider, ".uno:CompareDocuments", "", 0, property) [CD]
Line_6 $$ if (aURL.Path.compareTo("svnUpdate") == 0) --> Line_84 $$ return [CD]
Line_3 $$ if (aURL.Protocol.compareTo("org.openoffice.oosvn.oosvn:") == 0) --> Line_86 $$ if (aURL.Path.compareTo("svnCommit") == 0) [CD]
Line_4 $$ OoDocProperty docProperty = getProperty() --> Line_89 $$ settings = getSerializedSettings(docProperty) [FD]
Line_19 $$ Object[][] logs = getLogs(settings) --> Line_95 $$ long headRevision = svnWorker.getHeadRevisionNumber(logs) [FD]
Line_95 $$ long headRevision = svnWorker.getHeadRevisionNumber(logs) --> Line_104 $$ if (headRevision == 0) [FD]
Line_104 $$ if (headRevision == 0) --> Line_105 $$ File impDir = new File(settings.getCheckoutPath() + svnWorker.tempDir + "/.import") [CD]
Line_104 $$ if (headRevision == 0) --> Line_106 $$ if (deleteFileDir(impDir) == false) [CD]
Line_105 $$ File impDir = new File(settings.getCheckoutPath() + svnWorker.tempDir + "/.import") --> Line_106 $$ if (deleteFileDir(impDir) == false) [FD]
Line_106 $$ if (deleteFileDir(impDir) == false) --> Line_107 $$ error("Error while creating temporary import directory.") [CD]
Line_106 $$ if (deleteFileDir(impDir) == false) --> Line_108 $$ return [CD]
Line_104 $$ if (headRevision == 0) --> Line_110 $$ if (!impDir.mkdirs()) [CD]
Line_105 $$ File impDir = new File(settings.getCheckoutPath() + svnWorker.tempDir + "/.import") --> Line_110 $$ if (!impDir.mkdirs()) [FD]
Line_110 $$ if (!impDir.mkdirs()) --> Line_111 $$ error("Error while creating temporary import directory.") [CD]
Line_110 $$ if (!impDir.mkdirs()) --> Line_112 $$ return [CD]
Line_104 $$ if (headRevision == 0) --> Line_114 $$ File impFile = new File(settings.getCheckoutPath() + svnWorker.tempDir + "/.import/" + settings.getCheckoutDoc()) [CD]
Line_117 $$ FileChannel dstChannel = new FileOutputStream(impFile).getChannel() --> Line_118 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_116 $$ FileChannel srcChannel = new FileInputStream(settings.getCheckoutPath() + "/" + settings.getCheckoutDoc()).getChannel() --> Line_118 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_116 $$ FileChannel srcChannel = new FileInputStream(settings.getCheckoutPath() + "/" + settings.getCheckoutDoc()).getChannel() --> Line_119 $$ srcChannel.close() [FD]
Line_117 $$ FileChannel dstChannel = new FileOutputStream(impFile).getChannel() --> Line_120 $$ dstChannel.close() [FD]
Line_104 $$ if (headRevision == 0) --> Line_125 $$ final String checkoutPath = settings.getCheckoutPath() [CD]
Line_105 $$ File impDir = new File(settings.getCheckoutPath() + svnWorker.tempDir + "/.import") --> Line_127 $$ settings.setCheckoutPath(impDir.toString()) [FD]
Line_96 $$ long committedRevision = -1 --> Line_128 $$ committedRevision = svnWorker.importDirectory(settings, false).getNewRevision() [FD]
Line_125 $$ final String checkoutPath = settings.getCheckoutPath() --> Line_130 $$ settings.setCheckoutPath(checkoutPath) [FD]
Line_104 $$ if (headRevision == 0) --> Line_134 $$ settings.setCheckoutPath(checkoutPath) [CD]
Line_125 $$ final String checkoutPath = settings.getCheckoutPath() --> Line_134 $$ settings.setCheckoutPath(checkoutPath) [FD]
Line_104 $$ if (headRevision == 0) --> Line_135 $$ error("Error while creating temporary import directory.") [CD]
Line_105 $$ File impDir = new File(settings.getCheckoutPath() + svnWorker.tempDir + "/.import") --> Line_135 $$ error("Error while creating temporary import directory.") [FD]
Line_48 $$ File newSvnInfo = new File(settings.getCheckoutPath() + "/.svn") --> Line_138 $$ if (newSvnInfo.exists()) [FD]
Line_138 $$ if (newSvnInfo.exists()) --> Line_139 $$ if (deleteFileDir(newSvnInfo) == false) [CD]
Line_48 $$ File newSvnInfo = new File(settings.getCheckoutPath() + "/.svn") --> Line_139 $$ if (deleteFileDir(newSvnInfo) == false) [FD]
Line_139 $$ if (deleteFileDir(newSvnInfo) == false) --> Line_140 $$ error("Error while deleting temporary checkout dir.") [CD]
Line_27 $$ File tempDir = new File(settings.getCheckoutPath() + svnWorker.tempDir) --> Line_144 $$ if (tempDir.exists()) [FD]
Line_144 $$ if (tempDir.exists()) --> Line_145 $$ if (deleteFileDir(tempDir) == false) [CD]
Line_27 $$ File tempDir = new File(settings.getCheckoutPath() + svnWorker.tempDir) --> Line_145 $$ if (deleteFileDir(tempDir) == false) [FD]
Line_145 $$ if (deleteFileDir(tempDir) == false) --> Line_146 $$ error("Error while deleting temporary checkout dir.") [CD]
Line_47 $$ File svnInfo = new File(settings.getCheckoutPath() + svnWorker.tempDir + "/.svn") --> Line_151 $$ svnInfo.renameTo(newSvnInfo) [FD]
Line_48 $$ File newSvnInfo = new File(settings.getCheckoutPath() + "/.svn") --> Line_151 $$ svnInfo.renameTo(newSvnInfo) [FD]
Line_27 $$ File tempDir = new File(settings.getCheckoutPath() + svnWorker.tempDir) --> Line_152 $$ if (deleteFileDir(tempDir) == false) [FD]
Line_152 $$ if (deleteFileDir(tempDir) == false) --> Line_153 $$ error("Error while managing working copy") [CD]
Line_104 $$ if (headRevision == 0) --> Line_163 $$ showMessageBox("Import succesful", "Succesfully imported as revision no. " + committedRevision) [CD]
Line_104 $$ if (headRevision == 0) --> Line_164 $$ return [CD]
Line_96 $$ long committedRevision = -1 --> Line_167 $$ committedRevision = svnWorker.commit(settings, false).getNewRevision() [FD]
Line_128 $$ committedRevision = svnWorker.importDirectory(settings, false).getNewRevision() --> Line_167 $$ committedRevision = svnWorker.commit(settings, false).getNewRevision() [FD]
Line_104 $$ if (headRevision == 0) --> Line_171 $$ if (committedRevision == -1) [CD]
Line_96 $$ long committedRevision = -1 --> Line_171 $$ if (committedRevision == -1) [FD]
Line_128 $$ committedRevision = svnWorker.importDirectory(settings, false).getNewRevision() --> Line_171 $$ if (committedRevision == -1) [FD]
Line_167 $$ committedRevision = svnWorker.commit(settings, false).getNewRevision() --> Line_171 $$ if (committedRevision == -1) [FD]
Line_171 $$ if (committedRevision == -1) --> Line_172 $$ showMessageBox("Update - no changes", "No changes was made. Maybe you must just save the changes.") [CD]
Line_171 $$ if (committedRevision == -1) --> Line_174 $$ showMessageBox("Commit succesfull", "Commited as revision no. " + committedRevision) [CD]
Line_86 $$ if (aURL.Path.compareTo("svnCommit") == 0) --> Line_180 $$ return [CD]
Line_3 $$ if (aURL.Protocol.compareTo("org.openoffice.oosvn.oosvn:") == 0) --> Line_182 $$ if (aURL.Path.compareTo("svnHistory") == 0) [CD]
Line_4 $$ OoDocProperty docProperty = getProperty() --> Line_185 $$ settings = getSerializedSettings(docProperty) [FD]
Line_20 $$ long checkVersion = -1 --> Line_194 $$ settings.setCheckoutVersion(checkVersion) [FD]
Line_182 $$ if (aURL.Path.compareTo("svnHistory") == 0) --> Line_198 $$ return [CD]
Line_3 $$ if (aURL.Protocol.compareTo("org.openoffice.oosvn.oosvn:") == 0) --> Line_200 $$ if (aURL.Path.compareTo("settings") == 0) [CD]
Line_4 $$ OoDocProperty docProperty = getProperty() --> Line_202 $$ settings = getSerializedSettings(docProperty) [FD]
Line_4 $$ OoDocProperty docProperty = getProperty() --> Line_205 $$ settings.setCheckout(docProperty.getDocURL()) [FD]
Line_200 $$ if (aURL.Path.compareTo("settings") == 0) --> Line_212 $$ new DialogSettings(new javax.swing.JFrame(), true, settings).setVisible(true) [CD]
Line_200 $$ if (aURL.Path.compareTo("settings") == 0) --> Line_218 $$ return [CD]
Line_3 $$ if (aURL.Protocol.compareTo("org.openoffice.oosvn.oosvn:") == 0) --> Line_220 $$ if (aURL.Path.compareTo("about") == 0) [CD]
Line_220 $$ if (aURL.Path.compareTo("about") == 0) --> Line_221 $$ showMessageBox("OoSvn :: About", "Autor: �t�p�n Cenek (stepan@geek.cz)") [CD]
Line_220 $$ if (aURL.Path.compareTo("about") == 0) --> Line_222 $$ return [CD]
