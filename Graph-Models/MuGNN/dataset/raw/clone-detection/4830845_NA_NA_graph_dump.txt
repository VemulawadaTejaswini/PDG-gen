Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_3 $$ final Connection connection = this.getConnection() [CD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_5 $$ connection.setAutoCommit(false) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_7 $$ if (principal != null) [FD]
Line_7 $$ if (principal != null) --> Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " [FD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_10 $$ queryString = queryString + "WHERE " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_10 $$ queryString = queryString + "WHERE " [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_11 $$ if (elementId != null) [FD]
Line_11 $$ if (elementId != null) --> Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_14 $$ if (contextName != null) [FD]
Line_14 $$ if (contextName != null) --> Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " [FD]
Line_17 $$ if ((category != null)) --> Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " [FD]
Line_20 $$ if ((project != null)) --> Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " [FD]
Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " --> Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " [FD]
Line_23 $$ if ((name != null)) --> Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " [FD]
Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " --> Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " [FD]
Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " --> Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_26 $$ if (dateFrom != null) [FD]
Line_26 $$ if (dateFrom != null) --> Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " [FD]
Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " --> Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " [FD]
Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " --> Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " [FD]
Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " --> Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_29 $$ if (dateTo != null) [FD]
Line_29 $$ if (dateTo != null) --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [FD]
Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [FD]
Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [FD]
Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [FD]
Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " --> Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_32 $$ if (principal != null) [FD]
Line_32 $$ if (principal != null) --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " --> Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_35 $$ if (extractException != null) [FD]
Line_35 $$ if (extractException != null) --> Line_36 $$ if (extractException.booleanValue()) [CD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_36 $$ if (extractException.booleanValue()) [FD]
Line_36 $$ if (extractException.booleanValue()) --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " --> Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " [FD]
Line_36 $$ if (extractException.booleanValue()) --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [CD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " --> Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " [FD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " --> Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) [FD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_6 $$ String queryString = "DELETE " + this.getCallInvocationsSchemaAndTableName() + " FROM " + this.getCallInvocationsSchemaAndTableName() + " INNER JOIN " + this.getCallElementsSchemaAndTableName() + " ON " + this.getCallElementsSchemaAndTableName() + ".element_id =  " + this.getCallInvocationsSchemaAndTableName() + ".element_id " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_8 $$ queryString = queryString + "LEFT JOIN " + this.getCallPrincipalsSchemaAndTableName() + " ON " + this.getCallInvocationsSchemaAndTableName() + ".principal_id = " + this.getCallPrincipalsSchemaAndTableName() + ".principal_id " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_10 $$ queryString = queryString + "WHERE " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_12 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".elementId = ? AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_15 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".context_name LIKE ? AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_18 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".category LIKE ? AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_21 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".project LIKE ? AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_24 $$ queryString = queryString + this.getCallElementsSchemaAndTableName() + ".name LIKE ? AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_27 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp >= ? AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_30 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".start_timestamp <= ? AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_33 $$ queryString = queryString + this.getCallPrincipalsSchemaAndTableName() + ".principal_name LIKE ? AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_37 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NOT NULL AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_39 $$ queryString = queryString + this.getCallInvocationsSchemaAndTableName() + ".exception_id IS NULL AND " --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_42 $$ queryString = DefaultDatabaseHandler.removeOrphanWhereAndAndFromSelect(queryString) --> Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_45 $$ if (elementId != null) [FD]
Line_45 $$ if (elementId != null) --> Line_46 $$ preparedStatement.setLong(indexCounter, elementId.longValue()) [CD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_46 $$ preparedStatement.setLong(indexCounter, elementId.longValue()) [FD]
Line_44 $$ int indexCounter = 1 --> Line_46 $$ preparedStatement.setLong(indexCounter, elementId.longValue()) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_46 $$ preparedStatement.setLong(indexCounter, elementId.longValue()) [FD]
Line_45 $$ if (elementId != null) --> Line_47 $$ indexCounter = indexCounter + 1 [CD]
Line_44 $$ int indexCounter = 1 --> Line_47 $$ indexCounter = indexCounter + 1 [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_49 $$ if (contextName != null) [FD]
Line_49 $$ if (contextName != null) --> Line_50 $$ preparedStatement.setString(indexCounter, contextName) [CD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_50 $$ preparedStatement.setString(indexCounter, contextName) [FD]
Line_44 $$ int indexCounter = 1 --> Line_50 $$ preparedStatement.setString(indexCounter, contextName) [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_50 $$ preparedStatement.setString(indexCounter, contextName) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_50 $$ preparedStatement.setString(indexCounter, contextName) [FD]
Line_49 $$ if (contextName != null) --> Line_51 $$ indexCounter = indexCounter + 1 [CD]
Line_44 $$ int indexCounter = 1 --> Line_51 $$ indexCounter = indexCounter + 1 [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_51 $$ indexCounter = indexCounter + 1 [FD]
Line_53 $$ if ((category != null)) --> Line_54 $$ preparedStatement.setString(indexCounter, category) [CD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_54 $$ preparedStatement.setString(indexCounter, category) [FD]
Line_44 $$ int indexCounter = 1 --> Line_54 $$ preparedStatement.setString(indexCounter, category) [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_54 $$ preparedStatement.setString(indexCounter, category) [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_54 $$ preparedStatement.setString(indexCounter, category) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_54 $$ preparedStatement.setString(indexCounter, category) [FD]
Line_53 $$ if ((category != null)) --> Line_55 $$ indexCounter = indexCounter + 1 [CD]
Line_44 $$ int indexCounter = 1 --> Line_55 $$ indexCounter = indexCounter + 1 [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_55 $$ indexCounter = indexCounter + 1 [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_55 $$ indexCounter = indexCounter + 1 [FD]
Line_57 $$ if ((project != null)) --> Line_58 $$ preparedStatement.setString(indexCounter, project) [CD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_58 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_44 $$ int indexCounter = 1 --> Line_58 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_58 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_58 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_58 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_58 $$ preparedStatement.setString(indexCounter, project) [FD]
Line_57 $$ if ((project != null)) --> Line_59 $$ indexCounter = indexCounter + 1 [CD]
Line_44 $$ int indexCounter = 1 --> Line_59 $$ indexCounter = indexCounter + 1 [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_59 $$ indexCounter = indexCounter + 1 [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_59 $$ indexCounter = indexCounter + 1 [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_59 $$ indexCounter = indexCounter + 1 [FD]
Line_61 $$ if ((name != null)) --> Line_62 $$ preparedStatement.setString(indexCounter, name) [CD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_62 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_44 $$ int indexCounter = 1 --> Line_62 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_62 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_62 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_62 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_59 $$ indexCounter = indexCounter + 1 --> Line_62 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_62 $$ preparedStatement.setString(indexCounter, name) [FD]
Line_61 $$ if ((name != null)) --> Line_63 $$ indexCounter = indexCounter + 1 [CD]
Line_44 $$ int indexCounter = 1 --> Line_63 $$ indexCounter = indexCounter + 1 [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_63 $$ indexCounter = indexCounter + 1 [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_63 $$ indexCounter = indexCounter + 1 [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_63 $$ indexCounter = indexCounter + 1 [FD]
Line_59 $$ indexCounter = indexCounter + 1 --> Line_63 $$ indexCounter = indexCounter + 1 [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_65 $$ if (dateFrom != null) [FD]
Line_65 $$ if (dateFrom != null) --> Line_66 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [CD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_66 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_44 $$ int indexCounter = 1 --> Line_66 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_66 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_66 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_66 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_59 $$ indexCounter = indexCounter + 1 --> Line_66 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_63 $$ indexCounter = indexCounter + 1 --> Line_66 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_66 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateFrom.getTime())) [FD]
Line_65 $$ if (dateFrom != null) --> Line_67 $$ indexCounter = indexCounter + 1 [CD]
Line_44 $$ int indexCounter = 1 --> Line_67 $$ indexCounter = indexCounter + 1 [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_67 $$ indexCounter = indexCounter + 1 [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_67 $$ indexCounter = indexCounter + 1 [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_67 $$ indexCounter = indexCounter + 1 [FD]
Line_59 $$ indexCounter = indexCounter + 1 --> Line_67 $$ indexCounter = indexCounter + 1 [FD]
Line_63 $$ indexCounter = indexCounter + 1 --> Line_67 $$ indexCounter = indexCounter + 1 [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_69 $$ if (dateTo != null) [FD]
Line_69 $$ if (dateTo != null) --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [CD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_44 $$ int indexCounter = 1 --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_59 $$ indexCounter = indexCounter + 1 --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_63 $$ indexCounter = indexCounter + 1 --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_67 $$ indexCounter = indexCounter + 1 --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_70 $$ preparedStatement.setTimestamp(indexCounter, new Timestamp(dateTo.getTime())) [FD]
Line_69 $$ if (dateTo != null) --> Line_71 $$ indexCounter = indexCounter + 1 [CD]
Line_44 $$ int indexCounter = 1 --> Line_71 $$ indexCounter = indexCounter + 1 [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_71 $$ indexCounter = indexCounter + 1 [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_71 $$ indexCounter = indexCounter + 1 [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_71 $$ indexCounter = indexCounter + 1 [FD]
Line_59 $$ indexCounter = indexCounter + 1 --> Line_71 $$ indexCounter = indexCounter + 1 [FD]
Line_63 $$ indexCounter = indexCounter + 1 --> Line_71 $$ indexCounter = indexCounter + 1 [FD]
Line_67 $$ indexCounter = indexCounter + 1 --> Line_71 $$ indexCounter = indexCounter + 1 [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_73 $$ if (principal != null) [FD]
Line_73 $$ if (principal != null) --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [CD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_44 $$ int indexCounter = 1 --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_59 $$ indexCounter = indexCounter + 1 --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_63 $$ indexCounter = indexCounter + 1 --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_67 $$ indexCounter = indexCounter + 1 --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_71 $$ indexCounter = indexCounter + 1 --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_2 $$ public synchronized void deleteCallStatistics(Integer elementId, String contextName, String category, String project, String name, Date dateFrom, Date dateTo, Boolean extractException, String principal) throws DatabaseException --> Line_74 $$ preparedStatement.setString(indexCounter, principal) [FD]
Line_73 $$ if (principal != null) --> Line_75 $$ indexCounter = indexCounter + 1 [CD]
Line_44 $$ int indexCounter = 1 --> Line_75 $$ indexCounter = indexCounter + 1 [FD]
Line_47 $$ indexCounter = indexCounter + 1 --> Line_75 $$ indexCounter = indexCounter + 1 [FD]
Line_51 $$ indexCounter = indexCounter + 1 --> Line_75 $$ indexCounter = indexCounter + 1 [FD]
Line_55 $$ indexCounter = indexCounter + 1 --> Line_75 $$ indexCounter = indexCounter + 1 [FD]
Line_59 $$ indexCounter = indexCounter + 1 --> Line_75 $$ indexCounter = indexCounter + 1 [FD]
Line_63 $$ indexCounter = indexCounter + 1 --> Line_75 $$ indexCounter = indexCounter + 1 [FD]
Line_67 $$ indexCounter = indexCounter + 1 --> Line_75 $$ indexCounter = indexCounter + 1 [FD]
Line_71 $$ indexCounter = indexCounter + 1 --> Line_75 $$ indexCounter = indexCounter + 1 [FD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_77 $$ preparedStatement.executeUpdate() [FD]
Line_43 $$ final PreparedStatement preparedStatement = DebugPreparedStatement.prepareStatement(connection, queryString) --> Line_78 $$ preparedStatement.close() [FD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_79 $$ connection.commit() [FD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_82 $$ connection.rollback() [FD]
Line_3 $$ final Connection connection = this.getConnection() --> Line_89 $$ this.releaseConnection(connection) [FD]
