Line_5 $$ String codebase = System.getProperty("java.rmi.server.codebase", InetAddress.getLocalHost().getHostName()) --> Line_7 $$ int x = codebase.indexOf(protocol) + protocol.length() [FD]
Line_6 $$ String protocol = "http://" --> Line_7 $$ int x = codebase.indexOf(protocol) + protocol.length() [FD]
Line_5 $$ String codebase = System.getProperty("java.rmi.server.codebase", InetAddress.getLocalHost().getHostName()) --> Line_8 $$ String s2 = codebase.substring(x) [FD]
Line_7 $$ int x = codebase.indexOf(protocol) + protocol.length() --> Line_8 $$ String s2 = codebase.substring(x) [FD]
Line_8 $$ String s2 = codebase.substring(x) --> Line_9 $$ int x2 = s2.indexOf('/') [FD]
Line_8 $$ String s2 = codebase.substring(x) --> Line_10 $$ String downloadHost = s2.substring(0, x2) [FD]
Line_9 $$ int x2 = s2.indexOf('/') --> Line_10 $$ String downloadHost = s2.substring(0, x2) [FD]
Line_10 $$ String downloadHost = s2.substring(0, x2) --> Line_11 $$ if (downloadHost.indexOf(':') == -1) [FD]
Line_11 $$ if (downloadHost.indexOf(':') == -1) --> Line_12 $$ downloadHost += ":" + port [CD]
Line_10 $$ String downloadHost = s2.substring(0, x2) --> Line_12 $$ downloadHost += ":" + port [FD]
Line_14 $$ URL url = new URL("jar:http://" + downloadHost + "/" + jarName + "!/" + entry) --> Line_15 $$ JarURLConnection jurl = (JarURLConnection) url.openConnection() [FD]
Line_15 $$ JarURLConnection jurl = (JarURLConnection) url.openConnection() --> Line_16 $$ JarEntry je = jurl.getJarEntry() [FD]
Line_15 $$ JarURLConnection jurl = (JarURLConnection) url.openConnection() --> Line_17 $$ InputStream is = jurl.getInputStream() [FD]
Line_3 $$ byte[] b = null --> Line_20 $$ b = new byte[size] [FD]
Line_23 $$ while ((size - rb) > 0) --> Line_24 $$ chunk = bis.read(b, rb, size - rb) [CD]
Line_22 $$ int chunk = 0 --> Line_24 $$ chunk = bis.read(b, rb, size - rb) [FD]
Line_18 $$ BufferedInputStream bis = new BufferedInputStream(is) --> Line_24 $$ chunk = bis.read(b, rb, size - rb) [FD]
Line_3 $$ byte[] b = null --> Line_24 $$ chunk = bis.read(b, rb, size - rb) [FD]
Line_20 $$ b = new byte[size] --> Line_24 $$ chunk = bis.read(b, rb, size - rb) [FD]
Line_21 $$ int rb = 0 --> Line_24 $$ chunk = bis.read(b, rb, size - rb) [FD]
Line_23 $$ while ((size - rb) > 0) --> Line_25 $$ if (chunk == -1) [CD]
Line_24 $$ chunk = bis.read(b, rb, size - rb) --> Line_25 $$ if (chunk == -1) [FD]
Line_22 $$ int chunk = 0 --> Line_25 $$ if (chunk == -1) [FD]
Line_23 $$ while ((size - rb) > 0) --> Line_28 $$ rb += chunk [CD]
Line_21 $$ int rb = 0 --> Line_28 $$ rb += chunk [FD]
Line_24 $$ chunk = bis.read(b, rb, size - rb) --> Line_28 $$ rb += chunk [FD]
Line_22 $$ int chunk = 0 --> Line_28 $$ rb += chunk [FD]
Line_18 $$ BufferedInputStream bis = new BufferedInputStream(is) --> Line_30 $$ bis.close() [FD]
Line_17 $$ InputStream is = jurl.getInputStream() --> Line_31 $$ is.close() [FD]
Line_18 $$ BufferedInputStream bis = new BufferedInputStream(is) --> Line_32 $$ bis = null [FD]
Line_17 $$ InputStream is = jurl.getInputStream() --> Line_33 $$ is = null [FD]
Line_14 $$ URL url = new URL("jar:http://" + downloadHost + "/" + jarName + "!/" + entry) --> Line_34 $$ url = null [FD]
Line_15 $$ JarURLConnection jurl = (JarURLConnection) url.openConnection() --> Line_35 $$ jurl = null [FD]
Line_28 $$ rb += chunk --> Line_24 $$ chunk = bis.read(b, rb, size - rb) [FD]
