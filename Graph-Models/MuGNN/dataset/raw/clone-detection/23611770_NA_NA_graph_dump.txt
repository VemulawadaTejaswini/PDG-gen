Line_2 $$ public void handle() --> Line_3 $$ FileChannel srcChannel, destChannel [CD]
Line_2 $$ public void handle() --> Line_4 $$ String destOutFile = logFile + "." + System.currentTimeMillis() [CD]
Line_2 $$ public void handle() --> Line_5 $$ String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz" [CD]
Line_2 $$ public void handle() --> Line_6 $$ if (rotateDest != null) [CD]
Line_6 $$ if (rotateDest != null) --> Line_7 $$ (new File(rotateDest)).mkdirs() [CD]
Line_6 $$ if (rotateDest != null) --> Line_8 $$ if (destOutFile.indexOf("/") != -1) [CD]
Line_4 $$ String destOutFile = logFile + "." + System.currentTimeMillis() --> Line_8 $$ if (destOutFile.indexOf("/") != -1) [FD]
Line_8 $$ if (destOutFile.indexOf("/") != -1) --> Line_9 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1) [CD]
Line_4 $$ String destOutFile = logFile + "." + System.currentTimeMillis() --> Line_9 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1) [FD]
Line_6 $$ if (rotateDest != null) --> Line_11 $$ if (destOutFileCompressed.indexOf("/") != -1) [CD]
Line_5 $$ String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz" --> Line_11 $$ if (destOutFileCompressed.indexOf("/") != -1) [FD]
Line_11 $$ if (destOutFileCompressed.indexOf("/") != -1) --> Line_12 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1) [CD]
Line_5 $$ String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz" --> Line_12 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1) [FD]
Line_2 $$ public void handle() --> Line_15 $$ if (rotateCompress) [CD]
Line_20 $$ int len --> Line_21 $$ while ((len = in.read(buf)) > 0) [FD]
Line_18 $$ FileInputStream in = new FileInputStream(logFile) --> Line_21 $$ while ((len = in.read(buf)) > 0) [FD]
Line_21 $$ while ((len = in.read(buf)) > 0) --> Line_22 $$ out.write(buf, 0, len) [CD]
Line_21 $$ while ((len = in.read(buf)) > 0) --> Line_22 $$ out.write(buf, 0, len) [FD]
Line_17 $$ GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed)) --> Line_22 $$ out.write(buf, 0, len) [FD]
Line_20 $$ int len --> Line_22 $$ out.write(buf, 0, len) [FD]
Line_18 $$ FileInputStream in = new FileInputStream(logFile) --> Line_24 $$ in.close() [FD]
Line_17 $$ GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed)) --> Line_25 $$ out.finish() [FD]
Line_17 $$ GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed)) --> Line_26 $$ out.close() [FD]
Line_18 $$ FileInputStream in = new FileInputStream(logFile) --> Line_28 $$ in = null [FD]
Line_17 $$ GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed)) --> Line_29 $$ out = null [FD]
Line_3 $$ FileChannel srcChannel, destChannel --> Line_36 $$ srcChannel = new FileInputStream(logFile).getChannel() [FD]
Line_3 $$ FileChannel srcChannel, destChannel --> Line_42 $$ destChannel = new FileOutputStream(destOutFile).getChannel() [FD]
Line_3 $$ FileChannel srcChannel, destChannel --> Line_48 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_42 $$ destChannel = new FileOutputStream(destOutFile).getChannel() --> Line_48 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_36 $$ srcChannel = new FileInputStream(logFile).getChannel() --> Line_48 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_3 $$ FileChannel srcChannel, destChannel --> Line_49 $$ srcChannel.close() [FD]
Line_36 $$ srcChannel = new FileInputStream(logFile).getChannel() --> Line_49 $$ srcChannel.close() [FD]
Line_3 $$ FileChannel srcChannel, destChannel --> Line_50 $$ destChannel.close() [FD]
Line_42 $$ destChannel = new FileOutputStream(destOutFile).getChannel() --> Line_50 $$ destChannel.close() [FD]
Line_3 $$ FileChannel srcChannel, destChannel --> Line_51 $$ srcChannel = null [FD]
Line_36 $$ srcChannel = new FileInputStream(logFile).getChannel() --> Line_51 $$ srcChannel = null [FD]
Line_3 $$ FileChannel srcChannel, destChannel --> Line_52 $$ destChannel = null [FD]
Line_42 $$ destChannel = new FileOutputStream(destOutFile).getChannel() --> Line_52 $$ destChannel = null [FD]
Line_15 $$ if (rotateCompress) --> Line_57 $$ Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFile + "'") [CD]
Line_2 $$ public void handle() --> Line_59 $$ if (rotateDelete && isFile) [CD]
Line_59 $$ if (rotateDelete && isFile) --> Line_66 $$ (new File(logFile)).delete() [CD]
Line_59 $$ if (rotateDelete && isFile) --> Line_67 $$ reconfigureDebug() [CD]
Line_2 $$ public void handle() --> Line_69 $$ if (rotateDest != null) [CD]
Line_69 $$ if (rotateDest != null) --> Line_70 $$ long comparisonTime = rotateDays * (60 * 60 * 24 * 1000) [CD]
Line_69 $$ if (rotateDest != null) --> Line_71 $$ long currentTime = System.currentTimeMillis() [CD]
Line_69 $$ if (rotateDest != null) --> Line_72 $$ File fileList[] = (new File(rotateDest)).listFiles() [CD]
Line_69 $$ if (rotateDest != null) --> Line_73 $$ DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd") [CD]
Line_69 $$ if (rotateDest != null) --> Line_74 $$ java.util.Date date = new java.util.Date(currentTime) [CD]
Line_69 $$ if (rotateDest != null) --> Line_75 $$ String archiveFile = format1.format(date).toString() + ".zip" [CD]
Line_73 $$ DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd") --> Line_75 $$ String archiveFile = format1.format(date).toString() + ".zip" [FD]
Line_74 $$ java.util.Date date = new java.util.Date(currentTime) --> Line_75 $$ String archiveFile = format1.format(date).toString() + ".zip" [FD]
Line_69 $$ if (rotateDest != null) --> Line_76 $$ if (rotateArchive != null) [CD]
Line_76 $$ if (rotateArchive != null) --> Line_77 $$ archiveFile = rotateArchive + "/" + archiveFile [CD]
Line_75 $$ String archiveFile = format1.format(date).toString() + ".zip" --> Line_77 $$ archiveFile = rotateArchive + "/" + archiveFile [FD]
Line_76 $$ if (rotateArchive != null) --> Line_78 $$ (new File(rotateArchive)).mkdirs() [CD]
Line_69 $$ if (rotateDest != null) --> Line_80 $$ Archive archive = new Archive(archiveFile) [CD]
Line_69 $$ if (rotateDest != null) --> Line_81 $$ for (int i = 0; i < fileList.length; i++) [CD]
Line_81 $$ for (int i = 0; i < fileList.length; i++) --> Line_82 $$ String currentFilename = fileList[i].getName() [CD]
Line_81 $$ for (int i = 0; i < fileList.length; i++) --> Line_83 $$ long timeDifference = (currentTime - fileList[i].lastModified()) [CD]
Line_81 $$ for (int i = 0; i < fileList.length; i++) --> Line_84 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [CD]
Line_82 $$ String currentFilename = fileList[i].getName() --> Line_84 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [FD]
Line_84 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) --> Line_85 $$ if (rotateDest != null) [CD]
Line_85 $$ if (rotateDest != null) --> Line_86 $$ currentFilename = rotateDest + "/" + currentFilename [CD]
Line_82 $$ String currentFilename = fileList[i].getName() --> Line_86 $$ currentFilename = rotateDest + "/" + currentFilename [FD]
Line_84 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) --> Line_88 $$ if (timeDifference > comparisonTime) [CD]
Line_83 $$ long timeDifference = (currentTime - fileList[i].lastModified()) --> Line_88 $$ if (timeDifference > comparisonTime) [FD]
Line_70 $$ long comparisonTime = rotateDays * (60 * 60 * 24 * 1000) --> Line_88 $$ if (timeDifference > comparisonTime) [FD]
Line_88 $$ if (timeDifference > comparisonTime) --> Line_89 $$ archive.addFile(fileList[i].getName(), currentFilename) [CD]
Line_80 $$ Archive archive = new Archive(archiveFile) --> Line_89 $$ archive.addFile(fileList[i].getName(), currentFilename) [FD]
Line_82 $$ String currentFilename = fileList[i].getName() --> Line_89 $$ archive.addFile(fileList[i].getName(), currentFilename) [FD]
Line_86 $$ currentFilename = rotateDest + "/" + currentFilename --> Line_89 $$ archive.addFile(fileList[i].getName(), currentFilename) [FD]
Line_88 $$ if (timeDifference > comparisonTime) --> Line_90 $$ fileList[i].delete() [CD]
Line_69 $$ if (rotateDest != null) --> Line_94 $$ archive = null [CD]
Line_80 $$ Archive archive = new Archive(archiveFile) --> Line_94 $$ archive = null [FD]
Line_69 $$ if (rotateDest != null) --> Line_96 $$ format1 = null [CD]
Line_73 $$ DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd") --> Line_96 $$ format1 = null [FD]
Line_69 $$ if (rotateDest != null) --> Line_97 $$ date = null [CD]
Line_74 $$ java.util.Date date = new java.util.Date(currentTime) --> Line_97 $$ date = null [FD]
Line_86 $$ currentFilename = rotateDest + "/" + currentFilename --> Line_84 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [FD]
