Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/compression/emptyBlock_01.xsd", getClass(), m_compilerErrors) [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_4 $$ Assert.assertEquals(0, m_compilerErrors.getTotalCount()) [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS) [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_6 $$ Transmogrifier encoder = new Transmogrifier() [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_7 $$ EXIDecoder decoder = new EXIDecoder(31) [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_8 $$ Scanner scanner [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_9 $$ InputSource inputSource [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_10 $$ encoder.setOutputOptions(HeaderOptionsOutputType.lessSchemaId) [CD]
Line_6 $$ Transmogrifier encoder = new Transmogrifier() --> Line_10 $$ encoder.setOutputOptions(HeaderOptionsOutputType.lessSchemaId) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_11 $$ encoder.setAlignmentType(AlignmentType.compress) [CD]
Line_6 $$ Transmogrifier encoder = new Transmogrifier() --> Line_11 $$ encoder.setAlignmentType(AlignmentType.compress) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_12 $$ encoder.setBlockSize(1) [CD]
Line_6 $$ Transmogrifier encoder = new Transmogrifier() --> Line_12 $$ encoder.setBlockSize(1) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_13 $$ encoder.setEXISchema(grammarCache) [CD]
Line_6 $$ Transmogrifier encoder = new Transmogrifier() --> Line_13 $$ encoder.setEXISchema(grammarCache) [FD]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS) --> Line_13 $$ encoder.setEXISchema(grammarCache) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_14 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_15 $$ encoder.setOutputStream(baos) [CD]
Line_6 $$ Transmogrifier encoder = new Transmogrifier() --> Line_15 $$ encoder.setOutputStream(baos) [FD]
Line_14 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_15 $$ encoder.setOutputStream(baos) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_16 $$ URL url = resolveSystemIdAsURL("/compression/emptyBlock_01.xml") [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_17 $$ inputSource = new InputSource(url.toString()) [CD]
Line_9 $$ InputSource inputSource --> Line_17 $$ inputSource = new InputSource(url.toString()) [FD]
Line_16 $$ URL url = resolveSystemIdAsURL("/compression/emptyBlock_01.xml") --> Line_17 $$ inputSource = new InputSource(url.toString()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_18 $$ inputSource.setByteStream(url.openStream()) [CD]
Line_9 $$ InputSource inputSource --> Line_18 $$ inputSource.setByteStream(url.openStream()) [FD]
Line_17 $$ inputSource = new InputSource(url.toString()) --> Line_18 $$ inputSource.setByteStream(url.openStream()) [FD]
Line_16 $$ URL url = resolveSystemIdAsURL("/compression/emptyBlock_01.xml") --> Line_18 $$ inputSource.setByteStream(url.openStream()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_19 $$ byte[] bts [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_20 $$ int n_events [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_21 $$ encoder.encode(inputSource) [CD]
Line_6 $$ Transmogrifier encoder = new Transmogrifier() --> Line_21 $$ encoder.encode(inputSource) [FD]
Line_9 $$ InputSource inputSource --> Line_21 $$ encoder.encode(inputSource) [FD]
Line_17 $$ inputSource = new InputSource(url.toString()) --> Line_21 $$ encoder.encode(inputSource) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_22 $$ bts = baos.toByteArray() [CD]
Line_19 $$ byte[] bts --> Line_22 $$ bts = baos.toByteArray() [FD]
Line_14 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_22 $$ bts = baos.toByteArray() [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_23 $$ decoder.setEXISchema(grammarCache) [CD]
Line_7 $$ EXIDecoder decoder = new EXIDecoder(31) --> Line_23 $$ decoder.setEXISchema(grammarCache) [FD]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS) --> Line_23 $$ decoder.setEXISchema(grammarCache) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_24 $$ decoder.setInputStream(new ByteArrayInputStream(bts)) [CD]
Line_7 $$ EXIDecoder decoder = new EXIDecoder(31) --> Line_24 $$ decoder.setInputStream(new ByteArrayInputStream(bts)) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_25 $$ scanner = decoder.processHeader() [CD]
Line_8 $$ Scanner scanner --> Line_25 $$ scanner = decoder.processHeader() [FD]
Line_7 $$ EXIDecoder decoder = new EXIDecoder(31) --> Line_25 $$ scanner = decoder.processHeader() [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_27 $$ EXIEvent exiEvent [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_28 $$ n_events = 0 [CD]
Line_20 $$ int n_events --> Line_28 $$ n_events = 0 [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) [CD]
Line_27 $$ EXIEvent exiEvent --> Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) [FD]
Line_8 $$ Scanner scanner --> Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) [FD]
Line_25 $$ scanner = decoder.processHeader() --> Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) [FD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_30 $$ ++n_events [CD]
Line_20 $$ int n_events --> Line_30 $$ ++n_events [FD]
Line_28 $$ n_events = 0 --> Line_30 $$ ++n_events [FD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_31 $$ exiEventList.add(exiEvent) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_31 $$ exiEventList.add(exiEvent) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_31 $$ exiEventList.add(exiEvent) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_31 $$ exiEventList.add(exiEvent) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_33 $$ Assert.assertEquals(11, n_events) [CD]
Line_20 $$ int n_events --> Line_33 $$ Assert.assertEquals(11, n_events) [FD]
Line_28 $$ n_events = 0 --> Line_33 $$ Assert.assertEquals(11, n_events) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_34 $$ Assert.assertEquals(1, ((ChannellingScanner) scanner).getBlockCount()) [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_35 $$ EventType eventType [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_36 $$ EventTypeList eventTypeList [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_37 $$ int pos = 0 [CD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_38 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_38 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_38 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_38 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_38 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_39 $$ Assert.assertEquals(EXIEvent.EVENT_SD, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_39 $$ Assert.assertEquals(EXIEvent.EVENT_SD, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_39 $$ Assert.assertEquals(EXIEvent.EVENT_SD, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_39 $$ Assert.assertEquals(EXIEvent.EVENT_SD, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_40 $$ eventType = exiEvent.getEventType() [CD]
Line_35 $$ EventType eventType --> Line_40 $$ eventType = exiEvent.getEventType() [FD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_40 $$ eventType = exiEvent.getEventType() [FD]
Line_27 $$ EXIEvent exiEvent --> Line_40 $$ eventType = exiEvent.getEventType() [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_40 $$ eventType = exiEvent.getEventType() [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_41 $$ Assert.assertSame(exiEvent, eventType) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_41 $$ Assert.assertSame(exiEvent, eventType) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_41 $$ Assert.assertSame(exiEvent, eventType) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_41 $$ Assert.assertSame(exiEvent, eventType) [FD]
Line_35 $$ EventType eventType --> Line_41 $$ Assert.assertSame(exiEvent, eventType) [FD]
Line_40 $$ eventType = exiEvent.getEventType() --> Line_41 $$ Assert.assertSame(exiEvent, eventType) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_42 $$ Assert.assertEquals(0, eventType.getIndex()) [CD]
Line_35 $$ EventType eventType --> Line_42 $$ Assert.assertEquals(0, eventType.getIndex()) [FD]
Line_40 $$ eventType = exiEvent.getEventType() --> Line_42 $$ Assert.assertEquals(0, eventType.getIndex()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_43 $$ eventTypeList = eventType.getEventTypeList() [CD]
Line_36 $$ EventTypeList eventTypeList --> Line_43 $$ eventTypeList = eventType.getEventTypeList() [FD]
Line_35 $$ EventType eventType --> Line_43 $$ eventTypeList = eventType.getEventTypeList() [FD]
Line_40 $$ eventType = exiEvent.getEventType() --> Line_43 $$ eventTypeList = eventType.getEventTypeList() [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_44 $$ Assert.assertNull(eventTypeList.getEE()) [CD]
Line_36 $$ EventTypeList eventTypeList --> Line_44 $$ Assert.assertNull(eventTypeList.getEE()) [FD]
Line_43 $$ eventTypeList = eventType.getEventTypeList() --> Line_44 $$ Assert.assertNull(eventTypeList.getEE()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_45 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_45 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_45 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_45 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_45 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_45 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_46 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_46 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_46 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_46 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_46 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_47 $$ Assert.assertEquals("root", exiEvent.getName()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_47 $$ Assert.assertEquals("root", exiEvent.getName()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_47 $$ Assert.assertEquals("root", exiEvent.getName()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_47 $$ Assert.assertEquals("root", exiEvent.getName()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_47 $$ Assert.assertEquals("root", exiEvent.getName()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_48 $$ Assert.assertEquals("", eventType.getURI()) [CD]
Line_35 $$ EventType eventType --> Line_48 $$ Assert.assertEquals("", eventType.getURI()) [FD]
Line_40 $$ eventType = exiEvent.getEventType() --> Line_48 $$ Assert.assertEquals("", eventType.getURI()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_49 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_49 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_49 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_49 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_49 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_49 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_49 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_50 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_50 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_50 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_50 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_50 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_50 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_51 $$ Assert.assertEquals("parent", exiEvent.getName()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_51 $$ Assert.assertEquals("parent", exiEvent.getName()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_51 $$ Assert.assertEquals("parent", exiEvent.getName()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_51 $$ Assert.assertEquals("parent", exiEvent.getName()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_51 $$ Assert.assertEquals("parent", exiEvent.getName()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_51 $$ Assert.assertEquals("parent", exiEvent.getName()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_52 $$ Assert.assertEquals("", eventType.getURI()) [CD]
Line_35 $$ EventType eventType --> Line_52 $$ Assert.assertEquals("", eventType.getURI()) [FD]
Line_40 $$ eventType = exiEvent.getEventType() --> Line_52 $$ Assert.assertEquals("", eventType.getURI()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_53 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_53 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_53 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_53 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_53 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_53 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_53 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_53 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_54 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_54 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_54 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_54 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_54 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_54 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_54 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_55 $$ Assert.assertEquals("child", exiEvent.getName()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_55 $$ Assert.assertEquals("child", exiEvent.getName()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_55 $$ Assert.assertEquals("child", exiEvent.getName()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_55 $$ Assert.assertEquals("child", exiEvent.getName()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_55 $$ Assert.assertEquals("child", exiEvent.getName()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_55 $$ Assert.assertEquals("child", exiEvent.getName()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_55 $$ Assert.assertEquals("child", exiEvent.getName()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_56 $$ Assert.assertEquals("", eventType.getURI()) [CD]
Line_35 $$ EventType eventType --> Line_56 $$ Assert.assertEquals("", eventType.getURI()) [FD]
Line_40 $$ eventType = exiEvent.getEventType() --> Line_56 $$ Assert.assertEquals("", eventType.getURI()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_57 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_57 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_57 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_57 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_57 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_57 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_57 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_57 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_57 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_58 $$ Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_58 $$ Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_58 $$ Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_58 $$ Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_58 $$ Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_58 $$ Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_58 $$ Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_58 $$ Assert.assertEquals(EXIEvent.EVENT_CH, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_59 $$ Assert.assertEquals("42", exiEvent.getCharacters().makeString()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_59 $$ Assert.assertEquals("42", exiEvent.getCharacters().makeString()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_59 $$ Assert.assertEquals("42", exiEvent.getCharacters().makeString()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_59 $$ Assert.assertEquals("42", exiEvent.getCharacters().makeString()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_59 $$ Assert.assertEquals("42", exiEvent.getCharacters().makeString()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_59 $$ Assert.assertEquals("42", exiEvent.getCharacters().makeString()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_59 $$ Assert.assertEquals("42", exiEvent.getCharacters().makeString()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_59 $$ Assert.assertEquals("42", exiEvent.getCharacters().makeString()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_60 $$ int tp = ((EventTypeSchema) exiEvent.getEventType()).getSchemaSubstance() [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_60 $$ int tp = ((EventTypeSchema) exiEvent.getEventType()).getSchemaSubstance() [FD]
Line_27 $$ EXIEvent exiEvent --> Line_60 $$ int tp = ((EventTypeSchema) exiEvent.getEventType()).getSchemaSubstance() [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_60 $$ int tp = ((EventTypeSchema) exiEvent.getEventType()).getSchemaSubstance() [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_60 $$ int tp = ((EventTypeSchema) exiEvent.getEventType()).getSchemaSubstance() [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_60 $$ int tp = ((EventTypeSchema) exiEvent.getEventType()).getSchemaSubstance() [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_60 $$ int tp = ((EventTypeSchema) exiEvent.getEventType()).getSchemaSubstance() [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_60 $$ int tp = ((EventTypeSchema) exiEvent.getEventType()).getSchemaSubstance() [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_61 $$ Assert.assertEquals(EXISchemaConst.UNSIGNED_BYTE_TYPE, corpus.getSerialOfType(tp)) [CD]
Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/compression/emptyBlock_01.xsd", getClass(), m_compilerErrors) --> Line_61 $$ Assert.assertEquals(EXISchemaConst.UNSIGNED_BYTE_TYPE, corpus.getSerialOfType(tp)) [FD]
Line_60 $$ int tp = ((EventTypeSchema) exiEvent.getEventType()).getSchemaSubstance() --> Line_61 $$ Assert.assertEquals(EXISchemaConst.UNSIGNED_BYTE_TYPE, corpus.getSerialOfType(tp)) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_62 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_62 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_62 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_62 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_62 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_62 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_62 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_62 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_62 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_62 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_63 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_63 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_63 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_63 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_63 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_63 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_63 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_63 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_63 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_64 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_64 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_65 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_66 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_66 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_66 $$ exiEvent = exiEventList.get(pos++) --> Line_67 $$ Assert.assertEquals(EXIEvent.EVENT_SE, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_66 $$ exiEvent = exiEventList.get(pos++) --> Line_68 $$ Assert.assertEquals("adjunct", exiEvent.getName()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_66 $$ exiEvent = exiEventList.get(pos++) --> Line_69 $$ Assert.assertEquals("", exiEvent.getURI()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_70 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_66 $$ exiEvent = exiEventList.get(pos++) --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_70 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_66 $$ exiEvent = exiEventList.get(pos++) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_70 $$ exiEvent = exiEventList.get(pos++) --> Line_71 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_72 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_66 $$ exiEvent = exiEventList.get(pos++) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_70 $$ exiEvent = exiEventList.get(pos++) --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_72 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_66 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_70 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_72 $$ exiEvent = exiEventList.get(pos++) --> Line_73 $$ Assert.assertEquals(EXIEvent.EVENT_EE, exiEvent.getEventVariety()) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_74 $$ exiEvent = exiEventList.get(pos++) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_66 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_70 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_72 $$ exiEvent = exiEventList.get(pos++) --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_37 $$ int pos = 0 --> Line_74 $$ exiEvent = exiEventList.get(pos++) [FD]
Line_2 $$ public void testEmptyBlock_01() throws Exception --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [CD]
Line_29 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_27 $$ EXIEvent exiEvent --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_38 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_45 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_49 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_53 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_57 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_62 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_64 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_66 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_70 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_72 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
Line_74 $$ exiEvent = exiEventList.get(pos++) --> Line_75 $$ Assert.assertEquals(EXIEvent.EVENT_ED, exiEvent.getEventVariety()) [FD]
