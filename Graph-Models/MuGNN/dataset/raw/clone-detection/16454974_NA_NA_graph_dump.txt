Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_3 $$ String key = logFileNameExtractor.getFileName(fileStatus) [CD]
Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_3 $$ String key = logFileNameExtractor.getFileName(fileStatus) [FD]
Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_4 $$ int wasWritten = 0 [CD]
Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_5 $$ FileOutputStreamPool fileOutputStreamPool = fileOutputStreamPoolFactory.getPoolForKey(key) [CD]
Line_3 $$ String key = logFileNameExtractor.getFileName(fileStatus) --> Line_5 $$ FileOutputStreamPool fileOutputStreamPool = fileOutputStreamPoolFactory.getPoolForKey(key) [FD]
Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_6 $$ RollBackOutputStream outputStream = null [CD]
Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_7 $$ File file = null [CD]
Line_7 $$ File file = null --> Line_9 $$ file = getOutputFile(key) [FD]
Line_3 $$ String key = logFileNameExtractor.getFileName(fileStatus) --> Line_9 $$ file = getOutputFile(key) [FD]
Line_6 $$ RollBackOutputStream outputStream = null --> Line_11 $$ outputStream = fileOutputStreamPool.open(key, compressionCodec, file, true) [FD]
Line_5 $$ FileOutputStreamPool fileOutputStreamPool = fileOutputStreamPoolFactory.getPoolForKey(key) --> Line_11 $$ outputStream = fileOutputStreamPool.open(key, compressionCodec, file, true) [FD]
Line_3 $$ String key = logFileNameExtractor.getFileName(fileStatus) --> Line_11 $$ outputStream = fileOutputStreamPool.open(key, compressionCodec, file, true) [FD]
Line_7 $$ File file = null --> Line_11 $$ outputStream = fileOutputStreamPool.open(key, compressionCodec, file, true) [FD]
Line_9 $$ file = getOutputFile(key) --> Line_11 $$ outputStream = fileOutputStreamPool.open(key, compressionCodec, file, true) [FD]
Line_6 $$ RollBackOutputStream outputStream = null --> Line_12 $$ outputStream.mark() [FD]
Line_11 $$ outputStream = fileOutputStreamPool.open(key, compressionCodec, file, true) --> Line_12 $$ outputStream.mark() [FD]
Line_4 $$ int wasWritten = 0 --> Line_13 $$ wasWritten = IOUtils.copy(input, outputStream) [FD]
Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_13 $$ wasWritten = IOUtils.copy(input, outputStream) [FD]
Line_6 $$ RollBackOutputStream outputStream = null --> Line_13 $$ wasWritten = IOUtils.copy(input, outputStream) [FD]
Line_11 $$ outputStream = fileOutputStreamPool.open(key, compressionCodec, file, true) --> Line_13 $$ wasWritten = IOUtils.copy(input, outputStream) [FD]
Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_14 $$ if (postWriteAction != null) [FD]
Line_14 $$ if (postWriteAction != null) --> Line_15 $$ postWriteAction.run(wasWritten) [CD]
Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_15 $$ postWriteAction.run(wasWritten) [FD]
Line_4 $$ int wasWritten = 0 --> Line_15 $$ postWriteAction.run(wasWritten) [FD]
Line_13 $$ wasWritten = IOUtils.copy(input, outputStream) --> Line_15 $$ postWriteAction.run(wasWritten) [FD]
Line_19 $$ if (outputStream != null && wasWritten > 0) --> Line_20 $$ LOG.error("Rolling back file " + file.getAbsolutePath()) [CD]
Line_7 $$ File file = null --> Line_20 $$ LOG.error("Rolling back file " + file.getAbsolutePath()) [FD]
Line_9 $$ file = getOutputFile(key) --> Line_20 $$ LOG.error("Rolling back file " + file.getAbsolutePath()) [FD]
Line_6 $$ RollBackOutputStream outputStream = null --> Line_22 $$ outputStream.rollback() [FD]
Line_11 $$ outputStream = fileOutputStreamPool.open(key, compressionCodec, file, true) --> Line_22 $$ outputStream.rollback() [FD]
Line_5 $$ FileOutputStreamPool fileOutputStreamPool = fileOutputStreamPoolFactory.getPoolForKey(key) --> Line_32 $$ fileOutputStreamPool.releaseFile(key) [FD]
Line_3 $$ String key = logFileNameExtractor.getFileName(fileStatus) --> Line_32 $$ fileOutputStreamPool.releaseFile(key) [FD]
Line_2 $$ public int write(FileStatus.FileTrackingStatus fileStatus, InputStream input, PostWriteAction postWriteAction) throws WriterException, InterruptedException --> Line_37 $$ return wasWritten [CD]
