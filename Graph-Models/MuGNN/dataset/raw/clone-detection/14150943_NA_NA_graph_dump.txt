Line_2 $$ private void downloadPage(final URL url, final File file) --> Line_6 $$ final File tempFile = new File(file.getParentFile(), "temp.tmp") [FD]
Line_2 $$ private void downloadPage(final URL url, final File file) --> Line_10 $$ final InputStream is = url.openStream() [FD]
Line_7 $$ int length --> Line_11 $$ do [FD]
Line_11 $$ do --> Line_12 $$ length = is.read(buffer) [CD]
Line_7 $$ int length --> Line_12 $$ length = is.read(buffer) [FD]
Line_10 $$ final InputStream is = url.openStream() --> Line_12 $$ length = is.read(buffer) [FD]
Line_5 $$ final byte[] buffer = new byte[BotUtil.BUFFER_SIZE] --> Line_12 $$ length = is.read(buffer) [FD]
Line_11 $$ do --> Line_13 $$ if (length >= 0) [CD]
Line_12 $$ length = is.read(buffer) --> Line_13 $$ if (length >= 0) [FD]
Line_7 $$ int length --> Line_13 $$ if (length >= 0) [FD]
Line_13 $$ if (length >= 0) --> Line_14 $$ fos.write(buffer, 0, length) [CD]
Line_9 $$ FileOutputStream fos = new FileOutputStream(tempFile) --> Line_14 $$ fos.write(buffer, 0, length) [FD]
Line_5 $$ final byte[] buffer = new byte[BotUtil.BUFFER_SIZE] --> Line_14 $$ fos.write(buffer, 0, length) [FD]
Line_12 $$ length = is.read(buffer) --> Line_14 $$ fos.write(buffer, 0, length) [FD]
Line_7 $$ int length --> Line_14 $$ fos.write(buffer, 0, length) [FD]
Line_13 $$ if (length >= 0) --> Line_15 $$ size += length [CD]
Line_4 $$ long size = 0 --> Line_15 $$ size += length [FD]
Line_12 $$ length = is.read(buffer) --> Line_15 $$ size += length [FD]
Line_7 $$ int length --> Line_15 $$ size += length [FD]
Line_11 $$ do --> Line_17 $$ if (lastUpdate > UPDATE_TIME) [CD]
Line_8 $$ int lastUpdate = 0 --> Line_17 $$ if (lastUpdate > UPDATE_TIME) [FD]
Line_17 $$ if (lastUpdate > UPDATE_TIME) --> Line_18 $$ report(0, (int) (size / Format.MEMORY_MEG), "Downloading... " + Format.formatMemory(size)) [CD]
Line_15 $$ size += length --> Line_18 $$ report(0, (int) (size / Format.MEMORY_MEG), "Downloading... " + Format.formatMemory(size)) [FD]
Line_4 $$ long size = 0 --> Line_18 $$ report(0, (int) (size / Format.MEMORY_MEG), "Downloading... " + Format.formatMemory(size)) [FD]
Line_17 $$ if (lastUpdate > UPDATE_TIME) --> Line_19 $$ lastUpdate = 0 [CD]
Line_8 $$ int lastUpdate = 0 --> Line_19 $$ lastUpdate = 0 [FD]
Line_11 $$ do --> Line_21 $$ lastUpdate++ [CD]
Line_19 $$ lastUpdate = 0 --> Line_21 $$ lastUpdate++ [FD]
Line_8 $$ int lastUpdate = 0 --> Line_21 $$ lastUpdate++ [FD]
Line_9 $$ FileOutputStream fos = new FileOutputStream(tempFile) --> Line_23 $$ fos.close() [FD]
Line_2 $$ private void downloadPage(final URL url, final File file) --> Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_25 $$ final FileInputStream fis = new FileInputStream(tempFile) [CD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_26 $$ final GZIPInputStream gis = new GZIPInputStream(fis) [CD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_27 $$ fos = new FileOutputStream(file) [CD]
Line_9 $$ FileOutputStream fos = new FileOutputStream(tempFile) --> Line_27 $$ fos = new FileOutputStream(file) [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_28 $$ size = 0 [CD]
Line_15 $$ size += length --> Line_28 $$ size = 0 [FD]
Line_4 $$ long size = 0 --> Line_28 $$ size = 0 [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_29 $$ lastUpdate = 0 [CD]
Line_19 $$ lastUpdate = 0 --> Line_29 $$ lastUpdate = 0 [FD]
Line_8 $$ int lastUpdate = 0 --> Line_29 $$ lastUpdate = 0 [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_30 $$ do [CD]
Line_12 $$ length = is.read(buffer) --> Line_30 $$ do [FD]
Line_7 $$ int length --> Line_30 $$ do [FD]
Line_30 $$ do --> Line_31 $$ length = gis.read(buffer) [CD]
Line_12 $$ length = is.read(buffer) --> Line_31 $$ length = gis.read(buffer) [FD]
Line_7 $$ int length --> Line_31 $$ length = gis.read(buffer) [FD]
Line_26 $$ final GZIPInputStream gis = new GZIPInputStream(fis) --> Line_31 $$ length = gis.read(buffer) [FD]
Line_5 $$ final byte[] buffer = new byte[BotUtil.BUFFER_SIZE] --> Line_31 $$ length = gis.read(buffer) [FD]
Line_30 $$ do --> Line_32 $$ if (length >= 0) [CD]
Line_31 $$ length = gis.read(buffer) --> Line_32 $$ if (length >= 0) [FD]
Line_12 $$ length = is.read(buffer) --> Line_32 $$ if (length >= 0) [FD]
Line_7 $$ int length --> Line_32 $$ if (length >= 0) [FD]
Line_32 $$ if (length >= 0) --> Line_33 $$ fos.write(buffer, 0, length) [CD]
Line_9 $$ FileOutputStream fos = new FileOutputStream(tempFile) --> Line_33 $$ fos.write(buffer, 0, length) [FD]
Line_27 $$ fos = new FileOutputStream(file) --> Line_33 $$ fos.write(buffer, 0, length) [FD]
Line_5 $$ final byte[] buffer = new byte[BotUtil.BUFFER_SIZE] --> Line_33 $$ fos.write(buffer, 0, length) [FD]
Line_31 $$ length = gis.read(buffer) --> Line_33 $$ fos.write(buffer, 0, length) [FD]
Line_12 $$ length = is.read(buffer) --> Line_33 $$ fos.write(buffer, 0, length) [FD]
Line_7 $$ int length --> Line_33 $$ fos.write(buffer, 0, length) [FD]
Line_32 $$ if (length >= 0) --> Line_34 $$ size += length [CD]
Line_15 $$ size += length --> Line_34 $$ size += length [FD]
Line_4 $$ long size = 0 --> Line_34 $$ size += length [FD]
Line_28 $$ size = 0 --> Line_34 $$ size += length [FD]
Line_31 $$ length = gis.read(buffer) --> Line_34 $$ size += length [FD]
Line_12 $$ length = is.read(buffer) --> Line_34 $$ size += length [FD]
Line_7 $$ int length --> Line_34 $$ size += length [FD]
Line_30 $$ do --> Line_36 $$ if (lastUpdate > UPDATE_TIME) [CD]
Line_19 $$ lastUpdate = 0 --> Line_36 $$ if (lastUpdate > UPDATE_TIME) [FD]
Line_8 $$ int lastUpdate = 0 --> Line_36 $$ if (lastUpdate > UPDATE_TIME) [FD]
Line_29 $$ lastUpdate = 0 --> Line_36 $$ if (lastUpdate > UPDATE_TIME) [FD]
Line_36 $$ if (lastUpdate > UPDATE_TIME) --> Line_37 $$ report(0, (int) (size / Format.MEMORY_MEG), "Uncompressing... " + Format.formatMemory(size)) [CD]
Line_34 $$ size += length --> Line_37 $$ report(0, (int) (size / Format.MEMORY_MEG), "Uncompressing... " + Format.formatMemory(size)) [FD]
Line_15 $$ size += length --> Line_37 $$ report(0, (int) (size / Format.MEMORY_MEG), "Uncompressing... " + Format.formatMemory(size)) [FD]
Line_4 $$ long size = 0 --> Line_37 $$ report(0, (int) (size / Format.MEMORY_MEG), "Uncompressing... " + Format.formatMemory(size)) [FD]
Line_28 $$ size = 0 --> Line_37 $$ report(0, (int) (size / Format.MEMORY_MEG), "Uncompressing... " + Format.formatMemory(size)) [FD]
Line_36 $$ if (lastUpdate > UPDATE_TIME) --> Line_38 $$ lastUpdate = 0 [CD]
Line_19 $$ lastUpdate = 0 --> Line_38 $$ lastUpdate = 0 [FD]
Line_8 $$ int lastUpdate = 0 --> Line_38 $$ lastUpdate = 0 [FD]
Line_29 $$ lastUpdate = 0 --> Line_38 $$ lastUpdate = 0 [FD]
Line_30 $$ do --> Line_40 $$ lastUpdate++ [CD]
Line_38 $$ lastUpdate = 0 --> Line_40 $$ lastUpdate++ [FD]
Line_19 $$ lastUpdate = 0 --> Line_40 $$ lastUpdate++ [FD]
Line_8 $$ int lastUpdate = 0 --> Line_40 $$ lastUpdate++ [FD]
Line_29 $$ lastUpdate = 0 --> Line_40 $$ lastUpdate++ [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_42 $$ fos.close() [CD]
Line_9 $$ FileOutputStream fos = new FileOutputStream(tempFile) --> Line_42 $$ fos.close() [FD]
Line_27 $$ fos = new FileOutputStream(file) --> Line_42 $$ fos.close() [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_43 $$ fis.close() [CD]
Line_25 $$ final FileInputStream fis = new FileInputStream(tempFile) --> Line_43 $$ fis.close() [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_44 $$ gis.close() [CD]
Line_26 $$ final GZIPInputStream gis = new GZIPInputStream(fis) --> Line_44 $$ gis.close() [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_45 $$ tempFile.delete() [CD]
Line_6 $$ final File tempFile = new File(file.getParentFile(), "temp.tmp") --> Line_45 $$ tempFile.delete() [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_47 $$ file.delete() [CD]
Line_2 $$ private void downloadPage(final URL url, final File file) --> Line_47 $$ file.delete() [FD]
Line_24 $$ if (url.toString().toLowerCase().endsWith(".gz")) --> Line_48 $$ tempFile.renameTo(file) [CD]
Line_6 $$ final File tempFile = new File(file.getParentFile(), "temp.tmp") --> Line_48 $$ tempFile.renameTo(file) [FD]
Line_2 $$ private void downloadPage(final URL url, final File file) --> Line_48 $$ tempFile.renameTo(file) [FD]
Line_12 $$ length = is.read(buffer) --> Line_11 $$ do [FD]
Line_19 $$ lastUpdate = 0 --> Line_17 $$ if (lastUpdate > UPDATE_TIME) [FD]
Line_31 $$ length = gis.read(buffer) --> Line_30 $$ do [FD]
Line_38 $$ lastUpdate = 0 --> Line_36 $$ if (lastUpdate > UPDATE_TIME) [FD]
