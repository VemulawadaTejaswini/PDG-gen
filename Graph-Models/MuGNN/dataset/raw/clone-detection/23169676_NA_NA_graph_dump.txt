Line_2 $$ ArrayList<String> remoteSampling(IntersectionFile[] intersectionFiles, double[][] points) --> Line_3 $$ logger.info("begin REMOTE sampling, number of threads " + intersectConfig.getThreadCount() + ", number of layers=" + intersectionFiles.length + ", number of coordinates=" + points.length) [CD]
Line_2 $$ ArrayList<String> remoteSampling(IntersectionFile[] intersectionFiles, double[][] points) --> Line_4 $$ ArrayList<String> output = null [CD]
Line_7 $$ URL url = new URL(intersectConfig.getLayerIndexUrl() + "/intersect/batch") --> Line_8 $$ URLConnection c = url.openConnection() [FD]
Line_8 $$ URLConnection c = url.openConnection() --> Line_9 $$ c.setDoOutput(true) [FD]
Line_8 $$ URLConnection c = url.openConnection() --> Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) [FD]
Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) --> Line_11 $$ out.write("fids=") [FD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_13 $$ if (i > 0) [CD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_13 $$ if (i > 0) [FD]
Line_13 $$ if (i > 0) --> Line_14 $$ out.write(",") [CD]
Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) --> Line_14 $$ out.write(",") [FD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_16 $$ out.write(intersectionFiles[i].getFieldId()) [CD]
Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) --> Line_16 $$ out.write(intersectionFiles[i].getFieldId()) [FD]
Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) --> Line_18 $$ out.write("&points=") [FD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_19 $$ for (int i = 0; i < points.length; i++) [FD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_20 $$ if (i > 0) [CD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_20 $$ if (i > 0) [FD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_20 $$ if (i > 0) [FD]
Line_20 $$ if (i > 0) --> Line_21 $$ out.write(",") [CD]
Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) --> Line_21 $$ out.write(",") [FD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_23 $$ out.write(String.valueOf(points[i][0])) [CD]
Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) --> Line_23 $$ out.write(String.valueOf(points[i][0])) [FD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_24 $$ out.write(",") [CD]
Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) --> Line_24 $$ out.write(",") [FD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_25 $$ out.write(String.valueOf(points[i][1])) [CD]
Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) --> Line_25 $$ out.write(String.valueOf(points[i][1])) [FD]
Line_10 $$ OutputStreamWriter out = new OutputStreamWriter(c.getOutputStream()) --> Line_27 $$ out.close() [FD]
Line_8 $$ URLConnection c = url.openConnection() --> Line_28 $$ CSVReader csv = new CSVReader(new InputStreamReader(new GZIPInputStream(c.getInputStream()))) [FD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_31 $$ for (int i = 0; i < intersectionFiles.length; i++) [FD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_31 $$ for (int i = 0; i < intersectionFiles.length; i++) [FD]
Line_31 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_32 $$ tmpOutput.add(new StringBuilder()) [CD]
Line_30 $$ ArrayList<StringBuilder> tmpOutput = new ArrayList<StringBuilder>() --> Line_32 $$ tmpOutput.add(new StringBuilder()) [FD]
Line_28 $$ CSVReader csv = new CSVReader(new InputStreamReader(new GZIPInputStream(c.getInputStream()))) --> Line_36 $$ csv.readNext() [FD]
Line_34 $$ String[] line --> Line_37 $$ while ((line = csv.readNext()) != null) [FD]
Line_28 $$ CSVReader csv = new CSVReader(new InputStreamReader(new GZIPInputStream(c.getInputStream()))) --> Line_37 $$ while ((line = csv.readNext()) != null) [FD]
Line_37 $$ while ((line = csv.readNext()) != null) --> Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) [CD]
Line_30 $$ ArrayList<StringBuilder> tmpOutput = new ArrayList<StringBuilder>() --> Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) [FD]
Line_31 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) [FD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) [FD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) [FD]
Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) --> Line_39 $$ if (row > 0) [CD]
Line_35 $$ int row = 0 --> Line_39 $$ if (row > 0) [FD]
Line_39 $$ if (row > 0) --> Line_40 $$ tmpOutput.get(i - 2).append("\n") [CD]
Line_30 $$ ArrayList<StringBuilder> tmpOutput = new ArrayList<StringBuilder>() --> Line_40 $$ tmpOutput.get(i - 2).append("\n") [FD]
Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) --> Line_42 $$ tmpOutput.get(i - 2).append(line[i]) [CD]
Line_30 $$ ArrayList<StringBuilder> tmpOutput = new ArrayList<StringBuilder>() --> Line_42 $$ tmpOutput.get(i - 2).append(line[i]) [FD]
Line_37 $$ while ((line = csv.readNext()) != null) --> Line_44 $$ row++ [CD]
Line_35 $$ int row = 0 --> Line_44 $$ row++ [FD]
Line_28 $$ CSVReader csv = new CSVReader(new InputStreamReader(new GZIPInputStream(c.getInputStream()))) --> Line_46 $$ csv.close() [FD]
Line_4 $$ ArrayList<String> output = null --> Line_47 $$ output = new ArrayList<String>() [FD]
Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) --> Line_48 $$ for (int i = 0; i < tmpOutput.size(); i++) [FD]
Line_31 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_48 $$ for (int i = 0; i < tmpOutput.size(); i++) [FD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_48 $$ for (int i = 0; i < tmpOutput.size(); i++) [FD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_48 $$ for (int i = 0; i < tmpOutput.size(); i++) [FD]
Line_30 $$ ArrayList<StringBuilder> tmpOutput = new ArrayList<StringBuilder>() --> Line_48 $$ for (int i = 0; i < tmpOutput.size(); i++) [FD]
Line_48 $$ for (int i = 0; i < tmpOutput.size(); i++) --> Line_49 $$ output.add(tmpOutput.get(i).toString()) [CD]
Line_48 $$ for (int i = 0; i < tmpOutput.size(); i++) --> Line_49 $$ output.add(tmpOutput.get(i).toString()) [FD]
Line_4 $$ ArrayList<String> output = null --> Line_49 $$ output.add(tmpOutput.get(i).toString()) [FD]
Line_47 $$ output = new ArrayList<String>() --> Line_49 $$ output.add(tmpOutput.get(i).toString()) [FD]
Line_30 $$ ArrayList<StringBuilder> tmpOutput = new ArrayList<StringBuilder>() --> Line_49 $$ output.add(tmpOutput.get(i).toString()) [FD]
Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) --> Line_49 $$ output.add(tmpOutput.get(i).toString()) [FD]
Line_31 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_49 $$ output.add(tmpOutput.get(i).toString()) [FD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_49 $$ output.add(tmpOutput.get(i).toString()) [FD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_49 $$ output.add(tmpOutput.get(i).toString()) [FD]
Line_48 $$ for (int i = 0; i < tmpOutput.size(); i++) --> Line_50 $$ tmpOutput.set(i, null) [CD]
Line_48 $$ for (int i = 0; i < tmpOutput.size(); i++) --> Line_50 $$ tmpOutput.set(i, null) [FD]
Line_30 $$ ArrayList<StringBuilder> tmpOutput = new ArrayList<StringBuilder>() --> Line_50 $$ tmpOutput.set(i, null) [FD]
Line_38 $$ for (int i = 2; i < line.length && i - 2 < tmpOutput.size(); i++) --> Line_50 $$ tmpOutput.set(i, null) [FD]
Line_31 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_50 $$ tmpOutput.set(i, null) [FD]
Line_19 $$ for (int i = 0; i < points.length; i++) --> Line_50 $$ tmpOutput.set(i, null) [FD]
Line_12 $$ for (int i = 0; i < intersectionFiles.length; i++) --> Line_50 $$ tmpOutput.set(i, null) [FD]
Line_2 $$ ArrayList<String> remoteSampling(IntersectionFile[] intersectionFiles, double[][] points) --> Line_57 $$ return output [CD]
