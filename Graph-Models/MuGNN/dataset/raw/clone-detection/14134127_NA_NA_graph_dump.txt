Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_3 $$ File tempFile = new File(zipFile.getAbsoluteFile() + ".temp") [CD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_3 $$ File tempFile = new File(zipFile.getAbsoluteFile() + ".temp") [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_4 $$ if (tempFile.exists()) [CD]
Line_3 $$ File tempFile = new File(zipFile.getAbsoluteFile() + ".temp") --> Line_4 $$ if (tempFile.exists()) [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_5 $$ boolean renameOk = zipFile.renameTo(tempFile) [CD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_5 $$ boolean renameOk = zipFile.renameTo(tempFile) [FD]
Line_3 $$ File tempFile = new File(zipFile.getAbsoluteFile() + ".temp") --> Line_5 $$ boolean renameOk = zipFile.renameTo(tempFile) [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_6 $$ if (!renameOk) [CD]
Line_5 $$ boolean renameOk = zipFile.renameTo(tempFile) --> Line_6 $$ if (!renameOk) [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_7 $$ throw new RuntimeException("Could not rename the file " + zipFile.getAbsolutePath() + " to " + tempFile.getAbsolutePath()) [FD]
Line_3 $$ File tempFile = new File(zipFile.getAbsoluteFile() + ".temp") --> Line_7 $$ throw new RuntimeException("Could not rename the file " + zipFile.getAbsolutePath() + " to " + tempFile.getAbsolutePath()) [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_9 $$ ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile)) [CD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_10 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile)) [CD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_11 $$ ZipEntry entry = zin.getNextEntry() [CD]
Line_9 $$ ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile)) --> Line_11 $$ ZipEntry entry = zin.getNextEntry() [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_12 $$ byte[] buf = new byte[1024] [CD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_13 $$ while (entry != null) [CD]
Line_13 $$ while (entry != null) --> Line_14 $$ String entryName = entry.getName() [CD]
Line_13 $$ while (entry != null) --> Line_15 $$ boolean inFiles = false [CD]
Line_13 $$ while (entry != null) --> Line_16 $$ for (int i = 0; i < files.length; i++) [CD]
Line_16 $$ for (int i = 0; i < files.length; i++) --> Line_17 $$ String fileName = dirs[i] + "/" + files[i].getName() [CD]
Line_16 $$ for (int i = 0; i < files.length; i++) --> Line_18 $$ if (fileName.equals(entryName)) [CD]
Line_17 $$ String fileName = dirs[i] + "/" + files[i].getName() --> Line_18 $$ if (fileName.equals(entryName)) [FD]
Line_14 $$ String entryName = entry.getName() --> Line_18 $$ if (fileName.equals(entryName)) [FD]
Line_18 $$ if (fileName.equals(entryName)) --> Line_19 $$ inFiles = true [CD]
Line_15 $$ boolean inFiles = false --> Line_19 $$ inFiles = true [FD]
Line_13 $$ while (entry != null) --> Line_23 $$ if (!inFiles) [CD]
Line_19 $$ inFiles = true --> Line_23 $$ if (!inFiles) [FD]
Line_15 $$ boolean inFiles = false --> Line_23 $$ if (!inFiles) [FD]
Line_23 $$ if (!inFiles) --> Line_24 $$ out.putNextEntry(new ZipEntry(entryName)) [CD]
Line_10 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_24 $$ out.putNextEntry(new ZipEntry(entryName)) [FD]
Line_23 $$ if (!inFiles) --> Line_26 $$ while ((len = zin.read(buf)) > 0) out.write(buf, 0, len) [CD]
Line_9 $$ ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile)) --> Line_26 $$ while ((len = zin.read(buf)) > 0) out.write(buf, 0, len) [FD]
Line_12 $$ byte[] buf = new byte[1024] --> Line_26 $$ while ((len = zin.read(buf)) > 0) out.write(buf, 0, len) [FD]
Line_10 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_26 $$ while ((len = zin.read(buf)) > 0) out.write(buf, 0, len) [FD]
Line_13 $$ while (entry != null) --> Line_28 $$ entry = zin.getNextEntry() [CD]
Line_9 $$ ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile)) --> Line_28 $$ entry = zin.getNextEntry() [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_30 $$ zin.close() [CD]
Line_9 $$ ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile)) --> Line_30 $$ zin.close() [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_31 $$ for (int i = 0; i < files.length; i++) [CD]
Line_16 $$ for (int i = 0; i < files.length; i++) --> Line_31 $$ for (int i = 0; i < files.length; i++) [FD]
Line_31 $$ for (int i = 0; i < files.length; i++) --> Line_32 $$ InputStream in = new FileInputStream(files[i]) [CD]
Line_31 $$ for (int i = 0; i < files.length; i++) --> Line_33 $$ out.putNextEntry(new ZipEntry(dirs[i] + "/" + files[i].getName())) [CD]
Line_10 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_33 $$ out.putNextEntry(new ZipEntry(dirs[i] + "/" + files[i].getName())) [FD]
Line_31 $$ for (int i = 0; i < files.length; i++) --> Line_34 $$ int len [CD]
Line_31 $$ for (int i = 0; i < files.length; i++) --> Line_35 $$ while ((len = in.read(buf)) > 0) out.write(buf, 0, len) [CD]
Line_34 $$ int len --> Line_35 $$ while ((len = in.read(buf)) > 0) out.write(buf, 0, len) [FD]
Line_32 $$ InputStream in = new FileInputStream(files[i]) --> Line_35 $$ while ((len = in.read(buf)) > 0) out.write(buf, 0, len) [FD]
Line_12 $$ byte[] buf = new byte[1024] --> Line_35 $$ while ((len = in.read(buf)) > 0) out.write(buf, 0, len) [FD]
Line_10 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_35 $$ while ((len = in.read(buf)) > 0) out.write(buf, 0, len) [FD]
Line_31 $$ for (int i = 0; i < files.length; i++) --> Line_36 $$ out.closeEntry() [CD]
Line_10 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_36 $$ out.closeEntry() [FD]
Line_31 $$ for (int i = 0; i < files.length; i++) --> Line_37 $$ in.close() [CD]
Line_32 $$ InputStream in = new FileInputStream(files[i]) --> Line_37 $$ in.close() [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_39 $$ out.close() [CD]
Line_10 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_39 $$ out.close() [FD]
Line_2 $$ private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException --> Line_40 $$ tempFile.delete() [CD]
Line_3 $$ File tempFile = new File(zipFile.getAbsoluteFile() + ".temp") --> Line_40 $$ tempFile.delete() [FD]
