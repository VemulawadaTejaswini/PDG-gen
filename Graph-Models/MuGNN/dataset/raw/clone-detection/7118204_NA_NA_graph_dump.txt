Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_3 $$ String sessionKey = "" [CD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_4 $$ HttpClient hc = new DefaultHttpClient() [CD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_5 $$ HttpGet hg = new HttpGet(Common.TEST_SESSION_HOST + Common.TEST_SESSION_PARAM + authCode) [CD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_6 $$ HttpResponse hr = hc.execute(hg) [CD]
Line_4 $$ HttpClient hc = new DefaultHttpClient() --> Line_6 $$ HttpResponse hr = hc.execute(hg) [FD]
Line_5 $$ HttpGet hg = new HttpGet(Common.TEST_SESSION_HOST + Common.TEST_SESSION_PARAM + authCode) --> Line_6 $$ HttpResponse hr = hc.execute(hg) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(hr.getEntity().getContent())) [CD]
Line_6 $$ HttpResponse hr = hc.execute(hg) --> Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(hr.getEntity().getContent())) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_8 $$ StringBuilder sb = new StringBuilder() [CD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_9 $$ String line [CD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_10 $$ while ((line = br.readLine()) != null) [CD]
Line_9 $$ String line --> Line_10 $$ while ((line = br.readLine()) != null) [FD]
Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(hr.getEntity().getContent())) --> Line_10 $$ while ((line = br.readLine()) != null) [FD]
Line_10 $$ while ((line = br.readLine()) != null) --> Line_11 $$ sb.append(line) [CD]
Line_10 $$ while ((line = br.readLine()) != null) --> Line_11 $$ sb.append(line) [FD]
Line_8 $$ StringBuilder sb = new StringBuilder() --> Line_11 $$ sb.append(line) [FD]
Line_9 $$ String line --> Line_11 $$ sb.append(line) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_13 $$ String result = sb.toString() [CD]
Line_8 $$ StringBuilder sb = new StringBuilder() --> Line_13 $$ String result = sb.toString() [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_14 $$ Log.i("sessionKeyMessages", result) [CD]
Line_13 $$ String result = sb.toString() --> Line_14 $$ Log.i("sessionKeyMessages", result) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_15 $$ Map<String, String> map = Util.handleURLParameters(result) [CD]
Line_13 $$ String result = sb.toString() --> Line_15 $$ Map<String, String> map = Util.handleURLParameters(result) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_16 $$ sessionKey = map.get(Common.TOP_SESSION) [CD]
Line_3 $$ String sessionKey = "" --> Line_16 $$ sessionKey = map.get(Common.TOP_SESSION) [FD]
Line_15 $$ Map<String, String> map = Util.handleURLParameters(result) --> Line_16 $$ sessionKey = map.get(Common.TOP_SESSION) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_17 $$ String topParameters = map.get(Common.TOP_PARAMETERS) [CD]
Line_15 $$ Map<String, String> map = Util.handleURLParameters(result) --> Line_17 $$ String topParameters = map.get(Common.TOP_PARAMETERS) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_18 $$ String decTopParameters = Util.decodeBase64(topParameters) [CD]
Line_17 $$ String topParameters = map.get(Common.TOP_PARAMETERS) --> Line_18 $$ String decTopParameters = Util.decodeBase64(topParameters) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_19 $$ Log.i("base64", decTopParameters) [CD]
Line_18 $$ String decTopParameters = Util.decodeBase64(topParameters) --> Line_19 $$ Log.i("base64", decTopParameters) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_20 $$ map = Util.handleURLParameters(decTopParameters) [CD]
Line_15 $$ Map<String, String> map = Util.handleURLParameters(result) --> Line_20 $$ map = Util.handleURLParameters(decTopParameters) [FD]
Line_18 $$ String decTopParameters = Util.decodeBase64(topParameters) --> Line_20 $$ map = Util.handleURLParameters(decTopParameters) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_21 $$ Log.i("nick", map.get(Common.VISITOR_NICK)) [CD]
Line_15 $$ Map<String, String> map = Util.handleURLParameters(result) --> Line_21 $$ Log.i("nick", map.get(Common.VISITOR_NICK)) [FD]
Line_20 $$ map = Util.handleURLParameters(decTopParameters) --> Line_21 $$ Log.i("nick", map.get(Common.VISITOR_NICK)) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_22 $$ CachePool.put(Common.VISITOR_NICK, map.get(Common.VISITOR_NICK)) [CD]
Line_15 $$ Map<String, String> map = Util.handleURLParameters(result) --> Line_22 $$ CachePool.put(Common.VISITOR_NICK, map.get(Common.VISITOR_NICK)) [FD]
Line_20 $$ map = Util.handleURLParameters(decTopParameters) --> Line_22 $$ CachePool.put(Common.VISITOR_NICK, map.get(Common.VISITOR_NICK)) [FD]
Line_2 $$ private static String doGetForSessionKey(String authCode) throws Exception --> Line_23 $$ return sessionKey [CD]
