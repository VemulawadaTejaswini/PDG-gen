Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_3 $$ String key = s3object.getKey() [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_3 $$ String key = s3object.getKey() [FD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_4 $$ key = trimPrefix(key) [CD]
Line_3 $$ String key = s3object.getKey() --> Line_4 $$ key = trimPrefix(key) [FD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_5 $$ String[] path = key.split("/") [CD]
Line_3 $$ String key = s3object.getKey() --> Line_5 $$ String[] path = key.split("/") [FD]
Line_4 $$ key = trimPrefix(key) --> Line_5 $$ String[] path = key.split("/") [FD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_6 $$ String fileName = path[path.length - 1] [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_7 $$ String dirPath = "" [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_8 $$ for (int i = 0; i < path.length - 1; i++) [CD]
Line_8 $$ for (int i = 0; i < path.length - 1; i++) --> Line_9 $$ dirPath += path[i] + "/" [CD]
Line_7 $$ String dirPath = "" --> Line_9 $$ dirPath += path[i] + "/" [FD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_11 $$ File outputDir = new File(downloadFileOutputDir + "/" + dirPath) [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_12 $$ if (outputDir.exists() == false) [CD]
Line_11 $$ File outputDir = new File(downloadFileOutputDir + "/" + dirPath) --> Line_12 $$ if (outputDir.exists() == false) [FD]
Line_12 $$ if (outputDir.exists() == false) --> Line_13 $$ outputDir.mkdirs() [CD]
Line_11 $$ File outputDir = new File(downloadFileOutputDir + "/" + dirPath) --> Line_13 $$ outputDir.mkdirs() [FD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_15 $$ File outputFile = new File(outputDir, fileName) [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_16 $$ long size = s3object.getContentLength() [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_16 $$ long size = s3object.getContentLength() [FD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_17 $$ if (outputFile.exists() && outputFile.length() == size) [CD]
Line_15 $$ File outputFile = new File(outputDir, fileName) --> Line_17 $$ if (outputFile.exists() && outputFile.length() == size) [FD]
Line_17 $$ if (outputFile.exists() && outputFile.length() == size) --> Line_18 $$ return [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_20 $$ long startTime = System.currentTimeMillis() [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_21 $$ log.info("Download start.S3 file=" + s3object.getKey() + " local file=" + outputFile.getAbsolutePath()) [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_21 $$ log.info("Download start.S3 file=" + s3object.getKey() + " local file=" + outputFile.getAbsolutePath()) [FD]
Line_15 $$ File outputFile = new File(outputDir, fileName) --> Line_21 $$ log.info("Download start.S3 file=" + s3object.getKey() + " local file=" + outputFile.getAbsolutePath()) [FD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_22 $$ FileOutputStream fout = null [CD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_23 $$ S3Object dataObject = null [CD]
Line_22 $$ FileOutputStream fout = null --> Line_25 $$ fout = new FileOutputStream(outputFile) [FD]
Line_23 $$ S3Object dataObject = null --> Line_26 $$ dataObject = s3.getObject(bucket, s3object.getKey()) [FD]
Line_2 $$ protected void doDownload(S3Bucket bucket, S3Object s3object) throws Exception --> Line_26 $$ dataObject = s3.getObject(bucket, s3object.getKey()) [FD]
Line_23 $$ S3Object dataObject = null --> Line_27 $$ InputStream is = dataObject.getDataInputStream() [FD]
Line_26 $$ dataObject = s3.getObject(bucket, s3object.getKey()) --> Line_27 $$ InputStream is = dataObject.getDataInputStream() [FD]
Line_27 $$ InputStream is = dataObject.getDataInputStream() --> Line_28 $$ IOUtils.copyStream(is, fout) [FD]
Line_22 $$ FileOutputStream fout = null --> Line_28 $$ IOUtils.copyStream(is, fout) [FD]
Line_25 $$ fout = new FileOutputStream(outputFile) --> Line_28 $$ IOUtils.copyStream(is, fout) [FD]
Line_3 $$ String key = s3object.getKey() --> Line_29 $$ downloadedFileList.add(key) [FD]
Line_4 $$ key = trimPrefix(key) --> Line_29 $$ downloadedFileList.add(key) [FD]
Line_30 $$ long downloadTime = System.currentTimeMillis() - startTime --> Line_31 $$ log.info("Download complete.Estimete time=" + downloadTime + "ms " + IOUtils.toBPSText(downloadTime, size)) [FD]
Line_16 $$ long size = s3object.getContentLength() --> Line_31 $$ log.info("Download complete.Estimete time=" + downloadTime + "ms " + IOUtils.toBPSText(downloadTime, size)) [FD]
Line_15 $$ File outputFile = new File(outputDir, fileName) --> Line_34 $$ outputFile.delete() [FD]
Line_22 $$ FileOutputStream fout = null --> Line_37 $$ IOUtils.closeNoException(fout) [FD]
Line_25 $$ fout = new FileOutputStream(outputFile) --> Line_37 $$ IOUtils.closeNoException(fout) [FD]
Line_23 $$ S3Object dataObject = null --> Line_38 $$ if (dataObject != null) [FD]
Line_26 $$ dataObject = s3.getObject(bucket, s3object.getKey()) --> Line_38 $$ if (dataObject != null) [FD]
Line_38 $$ if (dataObject != null) --> Line_39 $$ dataObject.closeDataInputStream() [CD]
Line_23 $$ S3Object dataObject = null --> Line_39 $$ dataObject.closeDataInputStream() [FD]
Line_26 $$ dataObject = s3.getObject(bucket, s3object.getKey()) --> Line_39 $$ dataObject.closeDataInputStream() [FD]
