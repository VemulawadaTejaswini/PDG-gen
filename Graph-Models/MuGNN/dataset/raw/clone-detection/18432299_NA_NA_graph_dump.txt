Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_3 $$ List l = Arrays.asList(e.getListOfEqErrors()) [CD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_3 $$ List l = Arrays.asList(e.getListOfEqErrors()) [FD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_4 $$ int size = l.size() [CD]
Line_3 $$ List l = Arrays.asList(e.getListOfEqErrors()) --> Line_4 $$ int size = l.size() [FD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_5 $$ String sql = getClassifyDAO().getStatement(TABLE_KEY, "ADD_CLASSIFY_EQ_ERROR") [CD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_6 $$ PreparedStatement ps = null [CD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_7 $$ conn.setAutoCommit(false) [CD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_9 $$ deleteCycleError(namespaceId) [FD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_10 $$ deleteEqError(namespaceId) [FD]
Line_6 $$ PreparedStatement ps = null --> Line_13 $$ ps = conn.prepareStatement(sql) [FD]
Line_5 $$ String sql = getClassifyDAO().getStatement(TABLE_KEY, "ADD_CLASSIFY_EQ_ERROR") --> Line_13 $$ ps = conn.prepareStatement(sql) [FD]
Line_3 $$ List l = Arrays.asList(e.getListOfEqErrors()) --> Line_14 $$ for (int i = 0; i < l.size(); i++) [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_15 $$ EqError error = (EqError) l.get(i) [CD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_15 $$ EqError error = (EqError) l.get(i) [FD]
Line_3 $$ List l = Arrays.asList(e.getListOfEqErrors()) --> Line_15 $$ EqError error = (EqError) l.get(i) [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_16 $$ ConceptRef ref1 = error.getConcept1() [CD]
Line_15 $$ EqError error = (EqError) l.get(i) --> Line_16 $$ ConceptRef ref1 = error.getConcept1() [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_17 $$ ConceptRef ref2 = error.getConcept2() [CD]
Line_15 $$ EqError error = (EqError) l.get(i) --> Line_17 $$ ConceptRef ref2 = error.getConcept2() [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_18 $$ conceptGID1 = getConceptGID(ref1, namespaceId) [CD]
Line_11 $$ long conceptGID1 = -1 --> Line_18 $$ conceptGID1 = getConceptGID(ref1, namespaceId) [FD]
Line_16 $$ ConceptRef ref1 = error.getConcept1() --> Line_18 $$ conceptGID1 = getConceptGID(ref1, namespaceId) [FD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_18 $$ conceptGID1 = getConceptGID(ref1, namespaceId) [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_19 $$ conceptGID2 = getConceptGID(ref2, namespaceId) [CD]
Line_12 $$ long conceptGID2 = -1 --> Line_19 $$ conceptGID2 = getConceptGID(ref2, namespaceId) [FD]
Line_17 $$ ConceptRef ref2 = error.getConcept2() --> Line_19 $$ conceptGID2 = getConceptGID(ref2, namespaceId) [FD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_19 $$ conceptGID2 = getConceptGID(ref2, namespaceId) [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_20 $$ ps.setLong(1, conceptGID1) [CD]
Line_6 $$ PreparedStatement ps = null --> Line_20 $$ ps.setLong(1, conceptGID1) [FD]
Line_13 $$ ps = conn.prepareStatement(sql) --> Line_20 $$ ps.setLong(1, conceptGID1) [FD]
Line_18 $$ conceptGID1 = getConceptGID(ref1, namespaceId) --> Line_20 $$ ps.setLong(1, conceptGID1) [FD]
Line_11 $$ long conceptGID1 = -1 --> Line_20 $$ ps.setLong(1, conceptGID1) [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_21 $$ ps.setLong(2, conceptGID2) [CD]
Line_6 $$ PreparedStatement ps = null --> Line_21 $$ ps.setLong(2, conceptGID2) [FD]
Line_13 $$ ps = conn.prepareStatement(sql) --> Line_21 $$ ps.setLong(2, conceptGID2) [FD]
Line_19 $$ conceptGID2 = getConceptGID(ref2, namespaceId) --> Line_21 $$ ps.setLong(2, conceptGID2) [FD]
Line_12 $$ long conceptGID2 = -1 --> Line_21 $$ ps.setLong(2, conceptGID2) [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_22 $$ ps.setInt(3, namespaceId) [CD]
Line_6 $$ PreparedStatement ps = null --> Line_22 $$ ps.setInt(3, namespaceId) [FD]
Line_13 $$ ps = conn.prepareStatement(sql) --> Line_22 $$ ps.setInt(3, namespaceId) [FD]
Line_2 $$ private String addEqError(EquivalencyException e, int namespaceId) throws SQLException --> Line_22 $$ ps.setInt(3, namespaceId) [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_23 $$ int result = ps.executeUpdate() [CD]
Line_6 $$ PreparedStatement ps = null --> Line_23 $$ int result = ps.executeUpdate() [FD]
Line_13 $$ ps = conn.prepareStatement(sql) --> Line_23 $$ int result = ps.executeUpdate() [FD]
Line_14 $$ for (int i = 0; i < l.size(); i++) --> Line_24 $$ if (result == 0) [CD]
Line_23 $$ int result = ps.executeUpdate() --> Line_24 $$ if (result == 0) [FD]
Line_6 $$ PreparedStatement ps = null --> Line_38 $$ if (ps != null) [FD]
Line_13 $$ ps = conn.prepareStatement(sql) --> Line_38 $$ if (ps != null) [FD]
Line_38 $$ if (ps != null) --> Line_39 $$ ps.close() [CD]
Line_6 $$ PreparedStatement ps = null --> Line_39 $$ ps.close() [FD]
Line_13 $$ ps = conn.prepareStatement(sql) --> Line_39 $$ ps.close() [FD]
