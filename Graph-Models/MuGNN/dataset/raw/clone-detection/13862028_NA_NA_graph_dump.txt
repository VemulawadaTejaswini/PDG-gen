Line_6 $$ if (args.length == 2) --> Line_7 $$ completePath = args[0] [CD]
Line_4 $$ String completePath = null --> Line_7 $$ completePath = args[0] [FD]
Line_6 $$ if (args.length == 2) --> Line_8 $$ predictionFileName = args[1] [CD]
Line_5 $$ String predictionFileName = null --> Line_8 $$ predictionFileName = args[1] [FD]
Line_6 $$ if (args.length == 2) --> Line_10 $$ System.out.println("Please provide complete path to training_set parent folder as an argument. EXITING") [CD]
Line_6 $$ if (args.length == 2) --> Line_11 $$ System.exit(0) [CD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_15 $$ int filesize = (int) inC.size() [FD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_15 $$ int filesize = (int) inC.size() --> Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_22 $$ while (mappedfile.hasRemaining()) [FD]
Line_22 $$ while (mappedfile.hasRemaining()) --> Line_23 $$ movie = mappedfile.getShort() [CD]
Line_19 $$ short movie --> Line_23 $$ movie = mappedfile.getShort() [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_23 $$ movie = mappedfile.getShort() [FD]
Line_22 $$ while (mappedfile.hasRemaining()) --> Line_24 $$ startIndex = mappedfile.getInt() [CD]
Line_20 $$ int startIndex, endIndex --> Line_24 $$ startIndex = mappedfile.getInt() [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_24 $$ startIndex = mappedfile.getInt() [FD]
Line_22 $$ while (mappedfile.hasRemaining()) --> Line_25 $$ endIndex = mappedfile.getInt() [CD]
Line_20 $$ int startIndex, endIndex --> Line_25 $$ endIndex = mappedfile.getInt() [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_25 $$ endIndex = mappedfile.getInt() [FD]
Line_22 $$ while (mappedfile.hasRemaining()) --> Line_26 $$ a = new TIntArrayList(2) [CD]
Line_21 $$ TIntArrayList a --> Line_26 $$ a = new TIntArrayList(2) [FD]
Line_22 $$ while (mappedfile.hasRemaining()) --> Line_27 $$ a.add(startIndex) [CD]
Line_26 $$ a = new TIntArrayList(2) --> Line_27 $$ a.add(startIndex) [FD]
Line_21 $$ TIntArrayList a --> Line_27 $$ a.add(startIndex) [FD]
Line_24 $$ startIndex = mappedfile.getInt() --> Line_27 $$ a.add(startIndex) [FD]
Line_20 $$ int startIndex, endIndex --> Line_27 $$ a.add(startIndex) [FD]
Line_22 $$ while (mappedfile.hasRemaining()) --> Line_28 $$ a.add(endIndex) [CD]
Line_26 $$ a = new TIntArrayList(2) --> Line_28 $$ a.add(endIndex) [FD]
Line_21 $$ TIntArrayList a --> Line_28 $$ a.add(endIndex) [FD]
Line_25 $$ endIndex = mappedfile.getInt() --> Line_28 $$ a.add(endIndex) [FD]
Line_20 $$ int startIndex, endIndex --> Line_28 $$ a.add(endIndex) [FD]
Line_22 $$ while (mappedfile.hasRemaining()) --> Line_29 $$ MovieLimitsTHash.put(movie, a) [CD]
Line_23 $$ movie = mappedfile.getShort() --> Line_29 $$ MovieLimitsTHash.put(movie, a) [FD]
Line_19 $$ short movie --> Line_29 $$ MovieLimitsTHash.put(movie, a) [FD]
Line_26 $$ a = new TIntArrayList(2) --> Line_29 $$ MovieLimitsTHash.put(movie, a) [FD]
Line_21 $$ TIntArrayList a --> Line_29 $$ MovieLimitsTHash.put(movie, a) [FD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_31 $$ inC.close() [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_32 $$ mappedfile = null [FD]
Line_13 $$ File inputFile = new File(completePath + fSep + "SmartGRAPE" + fSep + MovieIndexFileName) --> Line_34 $$ inputFile = new File(completePath + fSep + "SmartGRAPE" + fSep + CustIndexFileName) [FD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_35 $$ inC = new FileInputStream(inputFile).getChannel() [FD]
Line_15 $$ int filesize = (int) inC.size() --> Line_36 $$ filesize = (int) inC.size() [FD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_36 $$ filesize = (int) inC.size() [FD]
Line_35 $$ inC = new FileInputStream(inputFile).getChannel() --> Line_36 $$ filesize = (int) inC.size() [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_32 $$ mappedfile = null --> Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_35 $$ inC = new FileInputStream(inputFile).getChannel() --> Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_15 $$ int filesize = (int) inC.size() --> Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_36 $$ filesize = (int) inC.size() --> Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_40 $$ while (mappedfile.hasRemaining()) [FD]
Line_32 $$ mappedfile = null --> Line_40 $$ while (mappedfile.hasRemaining()) [FD]
Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_40 $$ while (mappedfile.hasRemaining()) [FD]
Line_40 $$ while (mappedfile.hasRemaining()) --> Line_41 $$ custid = mappedfile.getInt() [CD]
Line_39 $$ int custid --> Line_41 $$ custid = mappedfile.getInt() [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_41 $$ custid = mappedfile.getInt() [FD]
Line_32 $$ mappedfile = null --> Line_41 $$ custid = mappedfile.getInt() [FD]
Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_41 $$ custid = mappedfile.getInt() [FD]
Line_40 $$ while (mappedfile.hasRemaining()) --> Line_42 $$ startIndex = mappedfile.getInt() [CD]
Line_24 $$ startIndex = mappedfile.getInt() --> Line_42 $$ startIndex = mappedfile.getInt() [FD]
Line_20 $$ int startIndex, endIndex --> Line_42 $$ startIndex = mappedfile.getInt() [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_42 $$ startIndex = mappedfile.getInt() [FD]
Line_32 $$ mappedfile = null --> Line_42 $$ startIndex = mappedfile.getInt() [FD]
Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_42 $$ startIndex = mappedfile.getInt() [FD]
Line_40 $$ while (mappedfile.hasRemaining()) --> Line_43 $$ endIndex = mappedfile.getInt() [CD]
Line_25 $$ endIndex = mappedfile.getInt() --> Line_43 $$ endIndex = mappedfile.getInt() [FD]
Line_20 $$ int startIndex, endIndex --> Line_43 $$ endIndex = mappedfile.getInt() [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_43 $$ endIndex = mappedfile.getInt() [FD]
Line_32 $$ mappedfile = null --> Line_43 $$ endIndex = mappedfile.getInt() [FD]
Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_43 $$ endIndex = mappedfile.getInt() [FD]
Line_40 $$ while (mappedfile.hasRemaining()) --> Line_44 $$ a = new TIntArrayList(2) [CD]
Line_26 $$ a = new TIntArrayList(2) --> Line_44 $$ a = new TIntArrayList(2) [FD]
Line_21 $$ TIntArrayList a --> Line_44 $$ a = new TIntArrayList(2) [FD]
Line_40 $$ while (mappedfile.hasRemaining()) --> Line_45 $$ a.add(startIndex) [CD]
Line_44 $$ a = new TIntArrayList(2) --> Line_45 $$ a.add(startIndex) [FD]
Line_26 $$ a = new TIntArrayList(2) --> Line_45 $$ a.add(startIndex) [FD]
Line_21 $$ TIntArrayList a --> Line_45 $$ a.add(startIndex) [FD]
Line_42 $$ startIndex = mappedfile.getInt() --> Line_45 $$ a.add(startIndex) [FD]
Line_24 $$ startIndex = mappedfile.getInt() --> Line_45 $$ a.add(startIndex) [FD]
Line_20 $$ int startIndex, endIndex --> Line_45 $$ a.add(startIndex) [FD]
Line_40 $$ while (mappedfile.hasRemaining()) --> Line_46 $$ a.add(endIndex) [CD]
Line_44 $$ a = new TIntArrayList(2) --> Line_46 $$ a.add(endIndex) [FD]
Line_26 $$ a = new TIntArrayList(2) --> Line_46 $$ a.add(endIndex) [FD]
Line_21 $$ TIntArrayList a --> Line_46 $$ a.add(endIndex) [FD]
Line_43 $$ endIndex = mappedfile.getInt() --> Line_46 $$ a.add(endIndex) [FD]
Line_25 $$ endIndex = mappedfile.getInt() --> Line_46 $$ a.add(endIndex) [FD]
Line_20 $$ int startIndex, endIndex --> Line_46 $$ a.add(endIndex) [FD]
Line_40 $$ while (mappedfile.hasRemaining()) --> Line_47 $$ CustomerLimitsTHash.put(custid, a) [CD]
Line_41 $$ custid = mappedfile.getInt() --> Line_47 $$ CustomerLimitsTHash.put(custid, a) [FD]
Line_39 $$ int custid --> Line_47 $$ CustomerLimitsTHash.put(custid, a) [FD]
Line_44 $$ a = new TIntArrayList(2) --> Line_47 $$ CustomerLimitsTHash.put(custid, a) [FD]
Line_26 $$ a = new TIntArrayList(2) --> Line_47 $$ CustomerLimitsTHash.put(custid, a) [FD]
Line_21 $$ TIntArrayList a --> Line_47 $$ CustomerLimitsTHash.put(custid, a) [FD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_49 $$ inC.close() [FD]
Line_35 $$ inC = new FileInputStream(inputFile).getChannel() --> Line_49 $$ inC.close() [FD]
Line_16 $$ ByteBuffer mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_50 $$ mappedfile = null [FD]
Line_32 $$ mappedfile = null --> Line_50 $$ mappedfile = null [FD]
Line_37 $$ mappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_50 $$ mappedfile = null [FD]
Line_4 $$ String completePath = null --> Line_52 $$ MoviesAndRatingsPerCustomer = InitializeMovieRatingsForCustomerHashMap(completePath, CustomerLimitsTHash) [FD]
Line_7 $$ completePath = args[0] --> Line_52 $$ MoviesAndRatingsPerCustomer = InitializeMovieRatingsForCustomerHashMap(completePath, CustomerLimitsTHash) [FD]
Line_13 $$ File inputFile = new File(completePath + fSep + "SmartGRAPE" + fSep + MovieIndexFileName) --> Line_56 $$ inputFile = new File(completePath + fSep + "SmartGRAPE" + fSep + "formattedProbeData.txt") [FD]
Line_34 $$ inputFile = new File(completePath + fSep + "SmartGRAPE" + fSep + CustIndexFileName) --> Line_56 $$ inputFile = new File(completePath + fSep + "SmartGRAPE" + fSep + "formattedProbeData.txt") [FD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_57 $$ inC = new FileInputStream(inputFile).getChannel() [FD]
Line_35 $$ inC = new FileInputStream(inputFile).getChannel() --> Line_57 $$ inC = new FileInputStream(inputFile).getChannel() [FD]
Line_15 $$ int filesize = (int) inC.size() --> Line_58 $$ filesize = (int) inC.size() [FD]
Line_36 $$ filesize = (int) inC.size() --> Line_58 $$ filesize = (int) inC.size() [FD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_58 $$ filesize = (int) inC.size() [FD]
Line_35 $$ inC = new FileInputStream(inputFile).getChannel() --> Line_58 $$ filesize = (int) inC.size() [FD]
Line_57 $$ inC = new FileInputStream(inputFile).getChannel() --> Line_58 $$ filesize = (int) inC.size() [FD]
Line_14 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_59 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_35 $$ inC = new FileInputStream(inputFile).getChannel() --> Line_59 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_57 $$ inC = new FileInputStream(inputFile).getChannel() --> Line_59 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_15 $$ int filesize = (int) inC.size() --> Line_59 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_36 $$ filesize = (int) inC.size() --> Line_59 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_58 $$ filesize = (int) inC.size() --> Line_59 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_59 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_64 $$ while (probemappedfile.hasRemaining()) [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_65 $$ short testmovie = probemappedfile.getShort() [CD]
Line_59 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_65 $$ short testmovie = probemappedfile.getShort() [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_66 $$ int testCustomer = probemappedfile.getInt() [CD]
Line_59 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_66 $$ int testCustomer = probemappedfile.getInt() [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_67 $$ if ((CustomersAndRatingsPerMovie != null) && (CustomersAndRatingsPerMovie.containsKey(testmovie))) [CD]
Line_65 $$ short testmovie = probemappedfile.getShort() --> Line_67 $$ if ((CustomersAndRatingsPerMovie != null) && (CustomersAndRatingsPerMovie.containsKey(testmovie))) [FD]
Line_67 $$ if ((CustomersAndRatingsPerMovie != null) && (CustomersAndRatingsPerMovie.containsKey(testmovie))) --> Line_69 $$ CustomersAndRatingsPerMovie = InitializeCustomerRatingsForMovieHashMap(completePath, testmovie) [CD]
Line_4 $$ String completePath = null --> Line_69 $$ CustomersAndRatingsPerMovie = InitializeCustomerRatingsForMovieHashMap(completePath, testmovie) [FD]
Line_7 $$ completePath = args[0] --> Line_69 $$ CustomersAndRatingsPerMovie = InitializeCustomerRatingsForMovieHashMap(completePath, testmovie) [FD]
Line_65 $$ short testmovie = probemappedfile.getShort() --> Line_69 $$ CustomersAndRatingsPerMovie = InitializeCustomerRatingsForMovieHashMap(completePath, testmovie) [FD]
Line_67 $$ if ((CustomersAndRatingsPerMovie != null) && (CustomersAndRatingsPerMovie.containsKey(testmovie))) --> Line_70 $$ custsandratings = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(testmovie) [CD]
Line_61 $$ TIntByteHashMap custsandratings = new TIntByteHashMap() --> Line_70 $$ custsandratings = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(testmovie) [FD]
Line_65 $$ short testmovie = probemappedfile.getShort() --> Line_70 $$ custsandratings = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(testmovie) [FD]
Line_67 $$ if ((CustomersAndRatingsPerMovie != null) && (CustomersAndRatingsPerMovie.containsKey(testmovie))) --> Line_71 $$ custAndRatingSize = custsandratings.size() [CD]
Line_60 $$ int custAndRatingSize = 0 --> Line_71 $$ custAndRatingSize = custsandratings.size() [FD]
Line_70 $$ custsandratings = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(testmovie) --> Line_71 $$ custAndRatingSize = custsandratings.size() [FD]
Line_61 $$ TIntByteHashMap custsandratings = new TIntByteHashMap() --> Line_71 $$ custAndRatingSize = custsandratings.size() [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_73 $$ TShortByteHashMap testCustMovieAndRatingsMap = (TShortByteHashMap) MoviesAndRatingsPerCustomer.get(testCustomer) [CD]
Line_66 $$ int testCustomer = probemappedfile.getInt() --> Line_73 $$ TShortByteHashMap testCustMovieAndRatingsMap = (TShortByteHashMap) MoviesAndRatingsPerCustomer.get(testCustomer) [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_74 $$ short[] testCustMovies = testCustMovieAndRatingsMap.keys() [CD]
Line_73 $$ TShortByteHashMap testCustMovieAndRatingsMap = (TShortByteHashMap) MoviesAndRatingsPerCustomer.get(testCustomer) --> Line_74 $$ short[] testCustMovies = testCustMovieAndRatingsMap.keys() [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_75 $$ float finalPrediction = 0 [CD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [CD]
Line_75 $$ float finalPrediction = 0 --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_66 $$ int testCustomer = probemappedfile.getInt() --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_65 $$ short testmovie = probemappedfile.getShort() --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_70 $$ custsandratings = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(testmovie) --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_61 $$ TIntByteHashMap custsandratings = new TIntByteHashMap() --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_71 $$ custAndRatingSize = custsandratings.size() --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_60 $$ int custAndRatingSize = 0 --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_74 $$ short[] testCustMovies = testCustMovieAndRatingsMap.keys() --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_73 $$ TShortByteHashMap testCustMovieAndRatingsMap = (TShortByteHashMap) MoviesAndRatingsPerCustomer.get(testCustomer) --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_77 $$ System.out.println("prediction for movie: " + testmovie + " for customer " + testCustomer + " is " + finalPrediction) [CD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_78 $$ ByteBuffer buf = ByteBuffer.allocate(11) [CD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_79 $$ buf.putShort(testmovie) [CD]
Line_78 $$ ByteBuffer buf = ByteBuffer.allocate(11) --> Line_79 $$ buf.putShort(testmovie) [FD]
Line_65 $$ short testmovie = probemappedfile.getShort() --> Line_79 $$ buf.putShort(testmovie) [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_80 $$ buf.putInt(testCustomer) [CD]
Line_78 $$ ByteBuffer buf = ByteBuffer.allocate(11) --> Line_80 $$ buf.putInt(testCustomer) [FD]
Line_66 $$ int testCustomer = probemappedfile.getInt() --> Line_80 $$ buf.putInt(testCustomer) [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_81 $$ buf.putFloat(finalPrediction) [CD]
Line_78 $$ ByteBuffer buf = ByteBuffer.allocate(11) --> Line_81 $$ buf.putFloat(finalPrediction) [FD]
Line_75 $$ float finalPrediction = 0 --> Line_81 $$ buf.putFloat(finalPrediction) [FD]
Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) --> Line_81 $$ buf.putFloat(finalPrediction) [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_82 $$ buf.flip() [CD]
Line_78 $$ ByteBuffer buf = ByteBuffer.allocate(11) --> Line_82 $$ buf.flip() [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_83 $$ out.write(buf) [CD]
Line_55 $$ FileChannel out = new FileOutputStream(outfile, true).getChannel() --> Line_83 $$ out.write(buf) [FD]
Line_78 $$ ByteBuffer buf = ByteBuffer.allocate(11) --> Line_83 $$ out.write(buf) [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_84 $$ buf = null [CD]
Line_78 $$ ByteBuffer buf = ByteBuffer.allocate(11) --> Line_84 $$ buf = null [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_85 $$ testCustMovieAndRatingsMap = null [CD]
Line_73 $$ TShortByteHashMap testCustMovieAndRatingsMap = (TShortByteHashMap) MoviesAndRatingsPerCustomer.get(testCustomer) --> Line_85 $$ testCustMovieAndRatingsMap = null [FD]
Line_64 $$ while (probemappedfile.hasRemaining()) --> Line_86 $$ testCustMovies = null [CD]
Line_74 $$ short[] testCustMovies = testCustMovieAndRatingsMap.keys() --> Line_86 $$ testCustMovies = null [FD]
Line_85 $$ testCustMovieAndRatingsMap = null --> Line_74 $$ short[] testCustMovies = testCustMovieAndRatingsMap.keys() [FD]
Line_86 $$ testCustMovies = null --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_85 $$ testCustMovieAndRatingsMap = null --> Line_76 $$ finalPrediction = predictRating(testCustomer, testmovie, custsandratings, custAndRatingSize, testCustMovies, testCustMovieAndRatingsMap) [FD]
Line_84 $$ buf = null --> Line_79 $$ buf.putShort(testmovie) [FD]
Line_84 $$ buf = null --> Line_80 $$ buf.putInt(testCustomer) [FD]
Line_84 $$ buf = null --> Line_81 $$ buf.putFloat(finalPrediction) [FD]
Line_84 $$ buf = null --> Line_82 $$ buf.flip() [FD]
Line_84 $$ buf = null --> Line_83 $$ out.write(buf) [FD]
