Line_2 $$ public Map<? extends ClassLoader, Set<String>> getClassNamesByClassLoader() throws IOException --> Line_3 $$ final Map<? extends ClassLoader, Set<URL>> urlsByClassLoader = getClassNameListURLsByClassLoader() [CD]
Line_2 $$ public Map<? extends ClassLoader, Set<String>> getClassNamesByClassLoader() throws IOException --> Line_4 $$ final LinkedHashMap<ClassLoader, Set<String>> map = new LinkedHashMap<ClassLoader, Set<String>>(urlsByClassLoader.size()) [CD]
Line_3 $$ final Map<? extends ClassLoader, Set<URL>> urlsByClassLoader = getClassNameListURLsByClassLoader() --> Line_4 $$ final LinkedHashMap<ClassLoader, Set<String>> map = new LinkedHashMap<ClassLoader, Set<String>>(urlsByClassLoader.size()) [FD]
Line_2 $$ public Map<? extends ClassLoader, Set<String>> getClassNamesByClassLoader() throws IOException --> Line_5 $$ final HashSet<String> allNames = new HashSet<String>(map.size()) [CD]
Line_4 $$ final LinkedHashMap<ClassLoader, Set<String>> map = new LinkedHashMap<ClassLoader, Set<String>>(urlsByClassLoader.size()) --> Line_5 $$ final HashSet<String> allNames = new HashSet<String>(map.size()) [FD]
Line_3 $$ final Map<? extends ClassLoader, Set<URL>> urlsByClassLoader = getClassNameListURLsByClassLoader() --> Line_6 $$ for (final Map.Entry<? extends ClassLoader, Set<URL>> e : urlsByClassLoader.entrySet()) [FD]
Line_9 $$ InputStream bin = null --> Line_11 $$ bin = url.openStream() [FD]
Line_8 $$ for (final URL url : e.getValue()) --> Line_11 $$ bin = url.openStream() [FD]
Line_12 $$ final LineNumberReader in = new LineNumberReader(new InputStreamReader(bin)) --> Line_13 $$ for (String line; (line = in.readLine()) != null; ) [FD]
Line_13 $$ for (String line; (line = in.readLine()) != null; ) --> Line_14 $$ line = line.trim() [CD]
Line_13 $$ for (String line; (line = in.readLine()) != null; ) --> Line_14 $$ line = line.trim() [FD]
Line_13 $$ for (String line; (line = in.readLine()) != null; ) --> Line_15 $$ if ((line.length() > 0) && (line.charAt(0) != '#') && allNames.add(line) && acceptClassName(e.getKey(), url, line)) [CD]
Line_13 $$ for (String line; (line = in.readLine()) != null; ) --> Line_15 $$ if ((line.length() > 0) && (line.charAt(0) != '#') && allNames.add(line) && acceptClassName(e.getKey(), url, line)) [FD]
Line_14 $$ line = line.trim() --> Line_15 $$ if ((line.length() > 0) && (line.charAt(0) != '#') && allNames.add(line) && acceptClassName(e.getKey(), url, line)) [FD]
Line_5 $$ final HashSet<String> allNames = new HashSet<String>(map.size()) --> Line_15 $$ if ((line.length() > 0) && (line.charAt(0) != '#') && allNames.add(line) && acceptClassName(e.getKey(), url, line)) [FD]
Line_8 $$ for (final URL url : e.getValue()) --> Line_15 $$ if ((line.length() > 0) && (line.charAt(0) != '#') && allNames.add(line) && acceptClassName(e.getKey(), url, line)) [FD]
Line_15 $$ if ((line.length() > 0) && (line.charAt(0) != '#') && allNames.add(line) && acceptClassName(e.getKey(), url, line)) --> Line_16 $$ names = new LinkedHashSet<String>(e.getValue().size()) [CD]
Line_7 $$ LinkedHashSet<String> names = null --> Line_16 $$ names = new LinkedHashSet<String>(e.getValue().size()) [FD]
Line_15 $$ if ((line.length() > 0) && (line.charAt(0) != '#') && allNames.add(line) && acceptClassName(e.getKey(), url, line)) --> Line_17 $$ names.add(line) [CD]
Line_16 $$ names = new LinkedHashSet<String>(e.getValue().size()) --> Line_17 $$ names.add(line) [FD]
Line_7 $$ LinkedHashSet<String> names = null --> Line_17 $$ names.add(line) [FD]
Line_13 $$ for (String line; (line = in.readLine()) != null; ) --> Line_17 $$ names.add(line) [FD]
Line_14 $$ line = line.trim() --> Line_17 $$ names.add(line) [FD]
Line_12 $$ final LineNumberReader in = new LineNumberReader(new InputStreamReader(bin)) --> Line_20 $$ in.close() [FD]
Line_9 $$ InputStream bin = null --> Line_21 $$ bin = null [FD]
Line_11 $$ bin = url.openStream() --> Line_21 $$ bin = null [FD]
Line_8 $$ for (final URL url : e.getValue()) --> Line_23 $$ handleIOException(e.getKey(), url, ex) [FD]
Line_9 $$ InputStream bin = null --> Line_25 $$ if (bin != null) [FD]
Line_11 $$ bin = url.openStream() --> Line_25 $$ if (bin != null) [FD]
Line_21 $$ bin = null --> Line_25 $$ if (bin != null) [FD]
Line_9 $$ InputStream bin = null --> Line_27 $$ bin.close() [FD]
Line_11 $$ bin = url.openStream() --> Line_27 $$ bin.close() [FD]
Line_21 $$ bin = null --> Line_27 $$ bin.close() [FD]
Line_16 $$ names = new LinkedHashSet<String>(e.getValue().size()) --> Line_33 $$ map.put(e.getKey(), names) [FD]
Line_7 $$ LinkedHashSet<String> names = null --> Line_33 $$ map.put(e.getKey(), names) [FD]
Line_4 $$ final LinkedHashMap<ClassLoader, Set<String>> map = new LinkedHashMap<ClassLoader, Set<String>>(urlsByClassLoader.size()) --> Line_33 $$ map.put(e.getKey(), names) [FD]
Line_2 $$ public Map<? extends ClassLoader, Set<String>> getClassNamesByClassLoader() throws IOException --> Line_35 $$ return map [CD]
