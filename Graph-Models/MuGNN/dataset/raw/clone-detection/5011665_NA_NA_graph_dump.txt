Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_3 $$ byte[] buf = new byte[8192] [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_4 $$ int bytesRead = 0 [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_5 $$ File backupModelFile = new File(modelFile.getPath() + ".bak") [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_5 $$ File backupModelFile = new File(modelFile.getPath() + ".bak") [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_6 $$ FileInputStream oldModelIn = new FileInputStream(modelFile) [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_7 $$ FileOutputStream backupModelOut = new FileOutputStream(backupModelFile) [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_8 $$ while ((bytesRead = oldModelIn.read(buf)) >= 0) [CD]
Line_4 $$ int bytesRead = 0 --> Line_8 $$ while ((bytesRead = oldModelIn.read(buf)) >= 0) [FD]
Line_6 $$ FileInputStream oldModelIn = new FileInputStream(modelFile) --> Line_8 $$ while ((bytesRead = oldModelIn.read(buf)) >= 0) [FD]
Line_3 $$ byte[] buf = new byte[8192] --> Line_8 $$ while ((bytesRead = oldModelIn.read(buf)) >= 0) [FD]
Line_8 $$ while ((bytesRead = oldModelIn.read(buf)) >= 0) --> Line_9 $$ backupModelOut.write(buf, 0, bytesRead) [CD]
Line_8 $$ while ((bytesRead = oldModelIn.read(buf)) >= 0) --> Line_9 $$ backupModelOut.write(buf, 0, bytesRead) [FD]
Line_7 $$ FileOutputStream backupModelOut = new FileOutputStream(backupModelFile) --> Line_9 $$ backupModelOut.write(buf, 0, bytesRead) [FD]
Line_3 $$ byte[] buf = new byte[8192] --> Line_9 $$ backupModelOut.write(buf, 0, bytesRead) [FD]
Line_4 $$ int bytesRead = 0 --> Line_9 $$ backupModelOut.write(buf, 0, bytesRead) [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_11 $$ backupModelOut.close() [CD]
Line_7 $$ FileOutputStream backupModelOut = new FileOutputStream(backupModelFile) --> Line_11 $$ backupModelOut.close() [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_12 $$ oldModelIn.close() [CD]
Line_6 $$ FileInputStream oldModelIn = new FileInputStream(modelFile) --> Line_12 $$ oldModelIn.close() [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_13 $$ buf = null [CD]
Line_3 $$ byte[] buf = new byte[8192] --> Line_13 $$ buf = null [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_14 $$ modelFile.delete() [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_14 $$ modelFile.delete() [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_15 $$ modelFile.mkdir() [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_15 $$ modelFile.mkdir() [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_16 $$ BufferedReader oldModelsBuff = new BomStrippingInputStreamReader(new FileInputStream(backupModelFile), "UTF-8") [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_17 $$ File metaDataFile = new File(modelFile, ConstantParameters.FILENAMEOFModelMetaData) [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_18 $$ BufferedWriter metaDataBuff = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(metaDataFile), "UTF-8")) [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_19 $$ for (int i = 0; i < 8; i++) [CD]
Line_19 $$ for (int i = 0; i < 8; i++) --> Line_20 $$ metaDataBuff.write(oldModelsBuff.readLine()) [CD]
Line_18 $$ BufferedWriter metaDataBuff = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(metaDataFile), "UTF-8")) --> Line_20 $$ metaDataBuff.write(oldModelsBuff.readLine()) [FD]
Line_16 $$ BufferedReader oldModelsBuff = new BomStrippingInputStreamReader(new FileInputStream(backupModelFile), "UTF-8") --> Line_20 $$ metaDataBuff.write(oldModelsBuff.readLine()) [FD]
Line_19 $$ for (int i = 0; i < 8; i++) --> Line_21 $$ metaDataBuff.write('\n') [CD]
Line_18 $$ BufferedWriter metaDataBuff = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(metaDataFile), "UTF-8")) --> Line_21 $$ metaDataBuff.write('\n') [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_23 $$ metaDataBuff.close() [CD]
Line_18 $$ BufferedWriter metaDataBuff = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(metaDataFile), "UTF-8")) --> Line_23 $$ metaDataBuff.close() [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_24 $$ int classIndex = 1 [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_25 $$ BufferedWriter modelWriter = null [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_26 $$ String line = null [CD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_27 $$ while ((line = oldModelsBuff.readLine()) != null) [CD]
Line_26 $$ String line = null --> Line_27 $$ while ((line = oldModelsBuff.readLine()) != null) [FD]
Line_16 $$ BufferedReader oldModelsBuff = new BomStrippingInputStreamReader(new FileInputStream(backupModelFile), "UTF-8") --> Line_27 $$ while ((line = oldModelsBuff.readLine()) != null) [FD]
Line_27 $$ while ((line = oldModelsBuff.readLine()) != null) --> Line_28 $$ if (line.startsWith("Class=") && line.contains("numTraining=") && line.contains("numPos=")) [CD]
Line_27 $$ while ((line = oldModelsBuff.readLine()) != null) --> Line_28 $$ if (line.startsWith("Class=") && line.contains("numTraining=") && line.contains("numPos=")) [FD]
Line_26 $$ String line = null --> Line_28 $$ if (line.startsWith("Class=") && line.contains("numTraining=") && line.contains("numPos=")) [FD]
Line_28 $$ if (line.startsWith("Class=") && line.contains("numTraining=") && line.contains("numPos=")) --> Line_29 $$ if (modelWriter != null) [CD]
Line_25 $$ BufferedWriter modelWriter = null --> Line_29 $$ if (modelWriter != null) [FD]
Line_29 $$ if (modelWriter != null) --> Line_30 $$ modelWriter.close() [CD]
Line_25 $$ BufferedWriter modelWriter = null --> Line_30 $$ modelWriter.close() [FD]
Line_28 $$ if (line.startsWith("Class=") && line.contains("numTraining=") && line.contains("numPos=")) --> Line_32 $$ File nextModel = new File(modelFile, String.format(ConstantParameters.FILENAMEOFPerClassModel, Integer.valueOf(classIndex++))) [CD]
Line_28 $$ if (line.startsWith("Class=") && line.contains("numTraining=") && line.contains("numPos=")) --> Line_33 $$ modelWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(nextModel), "UTF-8")) [CD]
Line_25 $$ BufferedWriter modelWriter = null --> Line_33 $$ modelWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(nextModel), "UTF-8")) [FD]
Line_27 $$ while ((line = oldModelsBuff.readLine()) != null) --> Line_35 $$ modelWriter.write(line) [CD]
Line_27 $$ while ((line = oldModelsBuff.readLine()) != null) --> Line_35 $$ modelWriter.write(line) [FD]
Line_33 $$ modelWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(nextModel), "UTF-8")) --> Line_35 $$ modelWriter.write(line) [FD]
Line_25 $$ BufferedWriter modelWriter = null --> Line_35 $$ modelWriter.write(line) [FD]
Line_26 $$ String line = null --> Line_35 $$ modelWriter.write(line) [FD]
Line_27 $$ while ((line = oldModelsBuff.readLine()) != null) --> Line_36 $$ modelWriter.write('\n') [CD]
Line_33 $$ modelWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(nextModel), "UTF-8")) --> Line_36 $$ modelWriter.write('\n') [FD]
Line_25 $$ BufferedWriter modelWriter = null --> Line_36 $$ modelWriter.write('\n') [FD]
Line_2 $$ public void upgradeSingleFileModelToDirectory(File modelFile) throws IOException --> Line_38 $$ if (modelWriter != null) [CD]
Line_33 $$ modelWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(nextModel), "UTF-8")) --> Line_38 $$ if (modelWriter != null) [FD]
Line_25 $$ BufferedWriter modelWriter = null --> Line_38 $$ if (modelWriter != null) [FD]
Line_38 $$ if (modelWriter != null) --> Line_39 $$ modelWriter.close() [CD]
Line_33 $$ modelWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(nextModel), "UTF-8")) --> Line_39 $$ modelWriter.close() [FD]
Line_25 $$ BufferedWriter modelWriter = null --> Line_39 $$ modelWriter.close() [FD]
Line_33 $$ modelWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(nextModel), "UTF-8")) --> Line_29 $$ if (modelWriter != null) [FD]
Line_33 $$ modelWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(nextModel), "UTF-8")) --> Line_30 $$ modelWriter.close() [FD]
