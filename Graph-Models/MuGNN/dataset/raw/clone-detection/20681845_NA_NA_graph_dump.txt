Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_3 $$ JCRNodeSource emptySource = loadTestSource() [CD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_4 $$ assertEquals(false, emptySource.exists()) [CD]
Line_3 $$ JCRNodeSource emptySource = loadTestSource() --> Line_4 $$ assertEquals(false, emptySource.exists()) [FD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() [CD]
Line_3 $$ JCRNodeSource emptySource = loadTestSource() --> Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() [FD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_6 $$ assertNotNull(sourceOut) [CD]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() --> Line_6 $$ assertNotNull(sourceOut) [FD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_7 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE) [CD]
Line_7 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE) --> Line_9 $$ IOUtils.copy(contentIn, sourceOut) [FD]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() --> Line_9 $$ IOUtils.copy(contentIn, sourceOut) [FD]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() --> Line_10 $$ sourceOut.flush() [FD]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() --> Line_12 $$ sourceOut.close() [FD]
Line_7 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE) --> Line_13 $$ contentIn.close() [FD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_15 $$ InputStream contentIn2 = getClass().getResourceAsStream(CONTENT2_FILE) [CD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_16 $$ sourceOut = emptySource.getOutputStream() [CD]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() --> Line_16 $$ sourceOut = emptySource.getOutputStream() [FD]
Line_3 $$ JCRNodeSource emptySource = loadTestSource() --> Line_16 $$ sourceOut = emptySource.getOutputStream() [FD]
Line_15 $$ InputStream contentIn2 = getClass().getResourceAsStream(CONTENT2_FILE) --> Line_18 $$ IOUtils.copy(contentIn2, sourceOut) [FD]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() --> Line_18 $$ IOUtils.copy(contentIn2, sourceOut) [FD]
Line_16 $$ sourceOut = emptySource.getOutputStream() --> Line_18 $$ IOUtils.copy(contentIn2, sourceOut) [FD]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() --> Line_19 $$ sourceOut.flush() [FD]
Line_16 $$ sourceOut = emptySource.getOutputStream() --> Line_19 $$ sourceOut.flush() [FD]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream() --> Line_21 $$ sourceOut.close() [FD]
Line_16 $$ sourceOut = emptySource.getOutputStream() --> Line_21 $$ sourceOut.close() [FD]
Line_15 $$ InputStream contentIn2 = getClass().getResourceAsStream(CONTENT2_FILE) --> Line_22 $$ contentIn2.close() [FD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_24 $$ InputStream expected = getClass().getResourceAsStream(CONTENT2_FILE) [CD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_25 $$ JCRNodeSource persistentSource = loadTestSource() [CD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_26 $$ assertEquals(true, persistentSource.exists()) [CD]
Line_25 $$ JCRNodeSource persistentSource = loadTestSource() --> Line_26 $$ assertEquals(true, persistentSource.exists()) [FD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_27 $$ InputStream actual = persistentSource.getInputStream() [CD]
Line_25 $$ JCRNodeSource persistentSource = loadTestSource() --> Line_27 $$ InputStream actual = persistentSource.getInputStream() [FD]
Line_24 $$ InputStream expected = getClass().getResourceAsStream(CONTENT2_FILE) --> Line_29 $$ assertTrue(isXmlEqual(expected, actual)) [FD]
Line_27 $$ InputStream actual = persistentSource.getInputStream() --> Line_29 $$ assertTrue(isXmlEqual(expected, actual)) [FD]
Line_24 $$ InputStream expected = getClass().getResourceAsStream(CONTENT2_FILE) --> Line_31 $$ expected.close() [FD]
Line_27 $$ InputStream actual = persistentSource.getInputStream() --> Line_32 $$ actual.close() [FD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_34 $$ JCRNodeSource tmpSrc = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.saar") [CD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_35 $$ persistentSource.delete() [CD]
Line_25 $$ JCRNodeSource persistentSource = loadTestSource() --> Line_35 $$ persistentSource.delete() [FD]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception --> Line_36 $$ tmpSrc.delete() [CD]
Line_34 $$ JCRNodeSource tmpSrc = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.saar") --> Line_36 $$ tmpSrc.delete() [FD]
