Line_2 $$ private void parseExternalCss(Document d) throws XPathExpressionException, IOException --> Line_3 $$ InputStream is = null [CD]
Line_5 $$ XPath xp = xpf.newXPath() --> Line_6 $$ XPathExpression xpe = xp.compile("//link[@type='text/css']/@href") [FD]
Line_6 $$ XPathExpression xpe = xp.compile("//link[@type='text/css']/@href") --> Line_7 $$ NodeList nl = (NodeList) xpe.evaluate(d, XPathConstants.NODESET) [FD]
Line_2 $$ private void parseExternalCss(Document d) throws XPathExpressionException, IOException --> Line_7 $$ NodeList nl = (NodeList) xpe.evaluate(d, XPathConstants.NODESET) [FD]
Line_7 $$ NodeList nl = (NodeList) xpe.evaluate(d, XPathConstants.NODESET) --> Line_8 $$ for (int i = 0; i < nl.getLength(); i++) [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_9 $$ Attr a = (Attr) nl.item(i) [CD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_9 $$ Attr a = (Attr) nl.item(i) [FD]
Line_7 $$ NodeList nl = (NodeList) xpe.evaluate(d, XPathConstants.NODESET) --> Line_9 $$ Attr a = (Attr) nl.item(i) [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_10 $$ String url = a.getValue() [CD]
Line_9 $$ Attr a = (Attr) nl.item(i) --> Line_10 $$ String url = a.getValue() [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_11 $$ URL u = new URL(url) [CD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_12 $$ is = new BufferedInputStream(u.openStream()) [CD]
Line_3 $$ InputStream is = null --> Line_12 $$ is = new BufferedInputStream(u.openStream()) [FD]
Line_11 $$ URL u = new URL(url) --> Line_12 $$ is = new BufferedInputStream(u.openStream()) [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_13 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() [CD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_14 $$ IOUtils.copy(is, baos) [CD]
Line_12 $$ is = new BufferedInputStream(u.openStream()) --> Line_14 $$ IOUtils.copy(is, baos) [FD]
Line_3 $$ InputStream is = null --> Line_14 $$ IOUtils.copy(is, baos) [FD]
Line_13 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_14 $$ IOUtils.copy(is, baos) [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_15 $$ parser.add(new String(baos.toByteArray(), "UTF-8")) [CD]
Line_13 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_15 $$ parser.add(new String(baos.toByteArray(), "UTF-8")) [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_16 $$ Element linkNode = a.getOwnerElement() [CD]
Line_9 $$ Attr a = (Attr) nl.item(i) --> Line_16 $$ Element linkNode = a.getOwnerElement() [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_17 $$ Element parent = (Element) linkNode.getParentNode() [CD]
Line_16 $$ Element linkNode = a.getOwnerElement() --> Line_17 $$ Element parent = (Element) linkNode.getParentNode() [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_18 $$ parent.removeChild(linkNode) [CD]
Line_17 $$ Element parent = (Element) linkNode.getParentNode() --> Line_18 $$ parent.removeChild(linkNode) [FD]
Line_16 $$ Element linkNode = a.getOwnerElement() --> Line_18 $$ parent.removeChild(linkNode) [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_19 $$ IOUtils.closeQuietly(is) [CD]
Line_12 $$ is = new BufferedInputStream(u.openStream()) --> Line_19 $$ IOUtils.closeQuietly(is) [FD]
Line_3 $$ InputStream is = null --> Line_19 $$ IOUtils.closeQuietly(is) [FD]
Line_8 $$ for (int i = 0; i < nl.getLength(); i++) --> Line_20 $$ is = null [CD]
Line_12 $$ is = new BufferedInputStream(u.openStream()) --> Line_20 $$ is = null [FD]
Line_3 $$ InputStream is = null --> Line_20 $$ is = null [FD]
Line_12 $$ is = new BufferedInputStream(u.openStream()) --> Line_23 $$ IOUtils.closeQuietly(is) [FD]
Line_20 $$ is = null --> Line_23 $$ IOUtils.closeQuietly(is) [FD]
Line_3 $$ InputStream is = null --> Line_23 $$ IOUtils.closeQuietly(is) [FD]
Line_20 $$ is = null --> Line_14 $$ IOUtils.copy(is, baos) [FD]
Line_20 $$ is = null --> Line_19 $$ IOUtils.closeQuietly(is) [FD]
