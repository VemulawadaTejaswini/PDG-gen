Line_2 $$ public void transferOutputFiles() throws IOException --> Line_3 $$ HashSet<GridNode> nodes = (HashSet) batchTask.returnNodeCollection() [CD]
Line_2 $$ public void transferOutputFiles() throws IOException --> Line_4 $$ Iterator<GridNode> ic = nodes.iterator() [CD]
Line_3 $$ HashSet<GridNode> nodes = (HashSet) batchTask.returnNodeCollection() --> Line_4 $$ Iterator<GridNode> ic = nodes.iterator() [FD]
Line_2 $$ public void transferOutputFiles() throws IOException --> Line_5 $$ InetAddress addLocal = InetAddress.getLocalHost() [CD]
Line_2 $$ public void transferOutputFiles() throws IOException --> Line_6 $$ String hostnameLocal = addLocal.getHostName() [CD]
Line_5 $$ InetAddress addLocal = InetAddress.getLocalHost() --> Line_6 $$ String hostnameLocal = addLocal.getHostName() [FD]
Line_2 $$ public void transferOutputFiles() throws IOException --> Line_7 $$ while (ic.hasNext()) [CD]
Line_4 $$ Iterator<GridNode> ic = nodes.iterator() --> Line_7 $$ while (ic.hasNext()) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_8 $$ GridNode node = ic.next() [CD]
Line_4 $$ Iterator<GridNode> ic = nodes.iterator() --> Line_8 $$ GridNode node = ic.next() [FD]
Line_7 $$ while (ic.hasNext()) --> Line_9 $$ String address = node.getPhysicalAddress() [CD]
Line_8 $$ GridNode node = ic.next() --> Line_9 $$ String address = node.getPhysicalAddress() [FD]
Line_7 $$ while (ic.hasNext()) --> Line_10 $$ InetAddress addr = InetAddress.getByName(address) [CD]
Line_9 $$ String address = node.getPhysicalAddress() --> Line_10 $$ InetAddress addr = InetAddress.getByName(address) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_11 $$ byte[] rawAddr = addr.getAddress() [CD]
Line_10 $$ InetAddress addr = InetAddress.getByName(address) --> Line_11 $$ byte[] rawAddr = addr.getAddress() [FD]
Line_7 $$ while (ic.hasNext()) --> Line_12 $$ Map<String, String> attributes = node.getAttributes() [CD]
Line_8 $$ GridNode node = ic.next() --> Line_12 $$ Map<String, String> attributes = node.getAttributes() [FD]
Line_7 $$ while (ic.hasNext()) --> Line_13 $$ InetAddress hostname = InetAddress.getByAddress(rawAddr) [CD]
Line_11 $$ byte[] rawAddr = addr.getAddress() --> Line_13 $$ InetAddress hostname = InetAddress.getByAddress(rawAddr) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_14 $$ if (hostname.getHostName().equals(hostnameLocal)) [CD]
Line_6 $$ String hostnameLocal = addLocal.getHostName() --> Line_14 $$ if (hostname.getHostName().equals(hostnameLocal)) [FD]
Line_13 $$ InetAddress hostname = InetAddress.getByAddress(rawAddr) --> Line_14 $$ if (hostname.getHostName().equals(hostnameLocal)) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_15 $$ String[] usernamePass = inputNodes.get(hostname.getHostName()) [CD]
Line_13 $$ InetAddress hostname = InetAddress.getByAddress(rawAddr) --> Line_15 $$ String[] usernamePass = inputNodes.get(hostname.getHostName()) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_16 $$ String gridPath = attributes.get("GRIDGAIN_HOME") [CD]
Line_12 $$ Map<String, String> attributes = node.getAttributes() --> Line_16 $$ String gridPath = attributes.get("GRIDGAIN_HOME") [FD]
Line_7 $$ while (ic.hasNext()) --> Line_17 $$ FTPClient ftp = new FTPClient() [CD]
Line_7 $$ while (ic.hasNext()) --> Line_18 $$ ftp.connect(hostname) [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_18 $$ ftp.connect(hostname) [FD]
Line_13 $$ InetAddress hostname = InetAddress.getByAddress(rawAddr) --> Line_18 $$ ftp.connect(hostname) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_19 $$ ftp.login(usernamePass[0], usernamePass[1]) [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_19 $$ ftp.login(usernamePass[0], usernamePass[1]) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_20 $$ int reply = ftp.getReplyCode() [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_20 $$ int reply = ftp.getReplyCode() [FD]
Line_7 $$ while (ic.hasNext()) --> Line_21 $$ if (!FTPReply.isPositiveCompletion(reply)) [CD]
Line_20 $$ int reply = ftp.getReplyCode() --> Line_21 $$ if (!FTPReply.isPositiveCompletion(reply)) [FD]
Line_21 $$ if (!FTPReply.isPositiveCompletion(reply)) --> Line_22 $$ ftp.disconnect() [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_22 $$ ftp.disconnect() [FD]
Line_21 $$ if (!FTPReply.isPositiveCompletion(reply)) --> Line_23 $$ System.err.println("FTP server refused connection.") [CD]
Line_7 $$ while (ic.hasNext()) --> Line_26 $$ ftp.changeWorkingDirectory(gridPath + "/bin") [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_26 $$ ftp.changeWorkingDirectory(gridPath + "/bin") [FD]
Line_7 $$ while (ic.hasNext()) --> Line_27 $$ ftp.setFileType(FTPClient.COMPRESSED_TRANSFER_MODE) [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_27 $$ ftp.setFileType(FTPClient.COMPRESSED_TRANSFER_MODE) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_28 $$ ftp.setRemoteVerificationEnabled(false) [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_28 $$ ftp.setRemoteVerificationEnabled(false) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_29 $$ ftp.setFileType(FTPClient.ASCII_FILE_TYPE) [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_29 $$ ftp.setFileType(FTPClient.ASCII_FILE_TYPE) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_30 $$ FTPFile[] fs = ftp.listFiles() [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_30 $$ FTPFile[] fs = ftp.listFiles() [FD]
Line_31 $$ for (FTPFile f : fs) --> Line_32 $$ if (f.isDirectory()) [FD]
Line_31 $$ for (FTPFile f : fs) --> Line_33 $$ String fileName = f.getName() [FD]
Line_33 $$ String fileName = f.getName() --> Line_34 $$ if (!fileName.endsWith(".txt")) [FD]
Line_31 $$ for (FTPFile f : fs) --> Line_35 $$ System.out.println(f.getName()) [FD]
Line_31 $$ for (FTPFile f : fs) --> Line_36 $$ FileOutputStream out = new FileOutputStream("../repast.simphony.distributedBatch/" + "remoteOutput/" + f.getName()) [FD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_38 $$ ftp.retrieveFile(fileName, out) [FD]
Line_33 $$ String fileName = f.getName() --> Line_38 $$ ftp.retrieveFile(fileName, out) [FD]
Line_36 $$ FileOutputStream out = new FileOutputStream("../repast.simphony.distributedBatch/" + "remoteOutput/" + f.getName()) --> Line_38 $$ ftp.retrieveFile(fileName, out) [FD]
Line_36 $$ FileOutputStream out = new FileOutputStream("../repast.simphony.distributedBatch/" + "remoteOutput/" + f.getName()) --> Line_42 $$ if (out != null) [FD]
Line_7 $$ while (ic.hasNext()) --> Line_45 $$ ftp.logout() [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_45 $$ ftp.logout() [FD]
Line_7 $$ while (ic.hasNext()) --> Line_46 $$ ftp.disconnect() [CD]
Line_17 $$ FTPClient ftp = new FTPClient() --> Line_46 $$ ftp.disconnect() [FD]
