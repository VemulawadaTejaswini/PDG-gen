Line_2 $$ public static String getMessageDigest(String[] inputs) --> Line_3 $$ if (inputs.length == 0) [CD]
Line_5 $$ MessageDigest sha = MessageDigest.getInstance("SHA-1") --> Line_6 $$ for (String input : inputs) sha.update(input.getBytes()) [FD]
Line_5 $$ MessageDigest sha = MessageDigest.getInstance("SHA-1") --> Line_7 $$ byte[] hash = sha.digest() [FD]
Line_11 $$ for (int i = 0; i < 20; i++) --> Line_12 $$ h = hash[i] [CD]
Line_9 $$ int h = 0 --> Line_12 $$ h = hash[i] [FD]
Line_11 $$ for (int i = 0; i < 20; i++) --> Line_13 $$ if (h < 0) [CD]
Line_12 $$ h = hash[i] --> Line_13 $$ if (h < 0) [FD]
Line_9 $$ int h = 0 --> Line_13 $$ if (h < 0) [FD]
Line_11 $$ for (int i = 0; i < 20; i++) --> Line_14 $$ s = Integer.toHexString(h) [CD]
Line_10 $$ String s = "" --> Line_14 $$ s = Integer.toHexString(h) [FD]
Line_12 $$ h = hash[i] --> Line_14 $$ s = Integer.toHexString(h) [FD]
Line_13 $$ if (h < 0) --> Line_14 $$ s = Integer.toHexString(h) [FD]
Line_9 $$ int h = 0 --> Line_14 $$ s = Integer.toHexString(h) [FD]
Line_11 $$ for (int i = 0; i < 20; i++) --> Line_15 $$ CPass = CPass.concat("0") [CD]
Line_14 $$ s = Integer.toHexString(h) --> Line_15 $$ CPass = CPass.concat("0") [FD]
Line_10 $$ String s = "" --> Line_15 $$ CPass = CPass.concat("0") [FD]
Line_8 $$ String CPass = "" --> Line_15 $$ CPass = CPass.concat("0") [FD]
Line_11 $$ for (int i = 0; i < 20; i++) --> Line_16 $$ CPass = CPass.concat(s) [CD]
Line_15 $$ CPass = CPass.concat("0") --> Line_16 $$ CPass = CPass.concat(s) [FD]
Line_8 $$ String CPass = "" --> Line_16 $$ CPass = CPass.concat(s) [FD]
Line_14 $$ s = Integer.toHexString(h) --> Line_16 $$ CPass = CPass.concat(s) [FD]
Line_10 $$ String s = "" --> Line_16 $$ CPass = CPass.concat(s) [FD]
Line_15 $$ CPass = CPass.concat("0") --> Line_18 $$ CPass = CPass.toUpperCase() [FD]
Line_16 $$ CPass = CPass.concat(s) --> Line_18 $$ CPass = CPass.toUpperCase() [FD]
Line_8 $$ String CPass = "" --> Line_18 $$ CPass = CPass.toUpperCase() [FD]
Line_16 $$ CPass = CPass.concat(s) --> Line_15 $$ CPass = CPass.concat("0") [FD]
