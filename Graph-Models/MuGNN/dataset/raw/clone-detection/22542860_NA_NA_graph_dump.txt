Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_3 $$ FTPClient client = new FTPClient() [CD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_4 $$ client.connect(targetSourceDetail.getHost()) [CD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_4 $$ client.connect(targetSourceDetail.getHost()) [FD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_4 $$ client.connect(targetSourceDetail.getHost()) [FD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_5 $$ client.login(targetSourceDetail.getUser(), targetSourceDetail.getPassword()) [CD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_5 $$ client.login(targetSourceDetail.getUser(), targetSourceDetail.getPassword()) [FD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_5 $$ client.login(targetSourceDetail.getUser(), targetSourceDetail.getPassword()) [FD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_6 $$ client.setFileType(FTPClient.BINARY_FILE_TYPE) [CD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_6 $$ client.setFileType(FTPClient.BINARY_FILE_TYPE) [FD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_7 $$ File file = new File(sourceLocation) [CD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_8 $$ if (file.isDirectory()) [CD]
Line_7 $$ File file = new File(sourceLocation) --> Line_8 $$ if (file.isDirectory()) [FD]
Line_8 $$ if (file.isDirectory()) --> Line_9 $$ client.makeDirectory(targetlocation) [CD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_9 $$ client.makeDirectory(targetlocation) [FD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_9 $$ client.makeDirectory(targetlocation) [FD]
Line_8 $$ if (file.isDirectory()) --> Line_10 $$ FileInputStream in = null [CD]
Line_7 $$ File file = new File(sourceLocation) --> Line_11 $$ for (File myFile : file.listFiles()) [FD]
Line_11 $$ for (File myFile : file.listFiles()) --> Line_12 $$ if (myFile.isDirectory()) [FD]
Line_12 $$ if (myFile.isDirectory()) --> Line_13 $$ storeRemote(myFile.getAbsolutePath(), targetSourceDetail, targetlocation + "/" + myFile.getName(), isBinary) [CD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_13 $$ storeRemote(myFile.getAbsolutePath(), targetSourceDetail, targetlocation + "/" + myFile.getName(), isBinary) [FD]
Line_11 $$ for (File myFile : file.listFiles()) --> Line_13 $$ storeRemote(myFile.getAbsolutePath(), targetSourceDetail, targetlocation + "/" + myFile.getName(), isBinary) [FD]
Line_12 $$ if (myFile.isDirectory()) --> Line_15 $$ in = new FileInputStream(myFile.getAbsolutePath()) [CD]
Line_10 $$ FileInputStream in = null --> Line_15 $$ in = new FileInputStream(myFile.getAbsolutePath()) [FD]
Line_11 $$ for (File myFile : file.listFiles()) --> Line_15 $$ in = new FileInputStream(myFile.getAbsolutePath()) [FD]
Line_12 $$ if (myFile.isDirectory()) --> Line_16 $$ client.storeFile(targetlocation + "/" + myFile.getName(), in) [CD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_16 $$ client.storeFile(targetlocation + "/" + myFile.getName(), in) [FD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_16 $$ client.storeFile(targetlocation + "/" + myFile.getName(), in) [FD]
Line_10 $$ FileInputStream in = null --> Line_16 $$ client.storeFile(targetlocation + "/" + myFile.getName(), in) [FD]
Line_15 $$ in = new FileInputStream(myFile.getAbsolutePath()) --> Line_16 $$ client.storeFile(targetlocation + "/" + myFile.getName(), in) [FD]
Line_11 $$ for (File myFile : file.listFiles()) --> Line_16 $$ client.storeFile(targetlocation + "/" + myFile.getName(), in) [FD]
Line_12 $$ if (myFile.isDirectory()) --> Line_17 $$ in.close() [CD]
Line_10 $$ FileInputStream in = null --> Line_17 $$ in.close() [FD]
Line_15 $$ in = new FileInputStream(myFile.getAbsolutePath()) --> Line_17 $$ in.close() [FD]
Line_8 $$ if (file.isDirectory()) --> Line_22 $$ client.storeFile(targetlocation, in) [CD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_22 $$ client.storeFile(targetlocation, in) [FD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_22 $$ client.storeFile(targetlocation, in) [FD]
Line_10 $$ FileInputStream in = null --> Line_22 $$ client.storeFile(targetlocation, in) [FD]
Line_15 $$ in = new FileInputStream(myFile.getAbsolutePath()) --> Line_22 $$ client.storeFile(targetlocation, in) [FD]
Line_8 $$ if (file.isDirectory()) --> Line_23 $$ in.close() [CD]
Line_10 $$ FileInputStream in = null --> Line_23 $$ in.close() [FD]
Line_15 $$ in = new FileInputStream(myFile.getAbsolutePath()) --> Line_23 $$ in.close() [FD]
Line_2 $$ public static void storeRemote(String sourceLocation, SourceDetail targetSourceDetail, String targetlocation, boolean isBinary) throws Exception --> Line_25 $$ client.disconnect() [CD]
Line_3 $$ FTPClient client = new FTPClient() --> Line_25 $$ client.disconnect() [FD]
