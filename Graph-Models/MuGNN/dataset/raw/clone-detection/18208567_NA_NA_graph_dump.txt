Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_3 $$ createSections(eventURI) [CD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_3 $$ createSections(eventURI) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) [CD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_7 $$ writer.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight) [CD]
Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) --> Line_7 $$ writer.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_8 $$ writer.setCropBoxSize(Dimensions.getDimension(even, Dimension.CROPBOX)) [CD]
Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) --> Line_8 $$ writer.setCropBoxSize(Dimensions.getDimension(even, Dimension.CROPBOX)) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_9 $$ writer.setBoxSize("trim", Dimensions.getDimension(even, Dimension.TRIMBOX)) [CD]
Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) --> Line_9 $$ writer.setBoxSize("trim", Dimensions.getDimension(even, Dimension.TRIMBOX)) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_10 $$ writer.setBoxSize("bleed", Dimensions.getDimension(even, Dimension.BLEEDBOX)) [CD]
Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) --> Line_10 $$ writer.setBoxSize("bleed", Dimensions.getDimension(even, Dimension.BLEEDBOX)) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_11 $$ final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers() [CD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_12 $$ writer.setPageEvent(event) [CD]
Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) --> Line_12 $$ writer.setPageEvent(event) [FD]
Line_11 $$ final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers() --> Line_12 $$ writer.setPageEvent(event) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_13 $$ document.open() [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_13 $$ document.open() [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_14 $$ final PdfContentByte content = writer.getDirectContent() [CD]
Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) --> Line_14 $$ final PdfContentByte content = writer.getDirectContent() [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_15 $$ event.setTabs(Index.INFO.getTab()) [CD]
Line_11 $$ final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers() --> Line_15 $$ event.setTabs(Index.INFO.getTab()) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_16 $$ importPages(document, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle()) [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_16 $$ importPages(document, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle()) [FD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_16 $$ importPages(document, content, new PdfReader(Index.INFO.getOutput()), Index.INFO.getTitle()) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_17 $$ importPages(document, content, MyProperties.getBefore(), event) [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_17 $$ importPages(document, content, MyProperties.getBefore(), event) [FD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_17 $$ importPages(document, content, MyProperties.getBefore(), event) [FD]
Line_11 $$ final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers() --> Line_17 $$ importPages(document, content, MyProperties.getBefore(), event) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_18 $$ addAdPage(document, content) [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_18 $$ addAdPage(document, content) [FD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_18 $$ addAdPage(document, content) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_19 $$ PdfReader reader = new PdfReader(Presentations.INFO.getOutput()) [CD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_20 $$ String[] titles = [CD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) [CD]
Line_19 $$ PdfReader reader = new PdfReader(Presentations.INFO.getOutput()) --> Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_22 $$ titles = index.getSubtitle(titles, i) [CD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_22 $$ titles = index.getSubtitle(titles, i) [FD]
Line_20 $$ String[] titles = --> Line_22 $$ titles = index.getSubtitle(titles, i) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_23 $$ event.setTabs(titles[0].toLowerCase()) [CD]
Line_11 $$ final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers() --> Line_23 $$ event.setTabs(titles[0].toLowerCase()) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_24 $$ addTitleLeft(content, Dimensions.getTitleArea(even), titles[0], MyFonts.TITLE) [CD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_24 $$ addTitleLeft(content, Dimensions.getTitleArea(even), titles[0], MyFonts.TITLE) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_25 $$ addTitleRight(content, Dimensions.getTitleArea(even), titles[1], MyFonts.DATE) [CD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_25 $$ addTitleRight(content, Dimensions.getTitleArea(even), titles[1], MyFonts.DATE) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_26 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [CD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_26 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_26 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) --> Line_26 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_19 $$ PdfReader reader = new PdfReader(Presentations.INFO.getOutput()) --> Line_26 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_27 $$ document.newPage() [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_27 $$ document.newPage() [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_30 $$ addAdPage(document, content) [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_30 $$ addAdPage(document, content) [FD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_30 $$ addAdPage(document, content) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_31 $$ importPages(document, content, MyProperties.getAfter(), event) [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_31 $$ importPages(document, content, MyProperties.getAfter(), event) [FD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_31 $$ importPages(document, content, MyProperties.getAfter(), event) [FD]
Line_11 $$ final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers() --> Line_31 $$ importPages(document, content, MyProperties.getAfter(), event) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_32 $$ int total = writer.getPageNumber() - 1 [CD]
Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) --> Line_32 $$ int total = writer.getPageNumber() - 1 [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_33 $$ event.setNoMorePageNumbers() [CD]
Line_11 $$ final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers() --> Line_33 $$ event.setNoMorePageNumbers() [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_34 $$ event.setTabs(Schedules.INFO.getTab()) [CD]
Line_11 $$ final EventBackgroundAndPageNumbers event = new EventBackgroundAndPageNumbers() --> Line_34 $$ event.setTabs(Schedules.INFO.getTab()) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_35 $$ reader = new PdfReader(Schedules.INFO.getOutput()) [CD]
Line_19 $$ PdfReader reader = new PdfReader(Presentations.INFO.getOutput()) --> Line_35 $$ reader = new PdfReader(Schedules.INFO.getOutput()) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) [CD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) [FD]
Line_19 $$ PdfReader reader = new PdfReader(Presentations.INFO.getOutput()) --> Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) [FD]
Line_35 $$ reader = new PdfReader(Schedules.INFO.getOutput()) --> Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) [FD]
Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_37 $$ addTitleLeft(content, Dimensions.getTitleArea(even), Schedules.INFO.getTitle(), MyFonts.TITLE) [CD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_37 $$ addTitleLeft(content, Dimensions.getTitleArea(even), Schedules.INFO.getTitle(), MyFonts.TITLE) [FD]
Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_38 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [CD]
Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_38 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_14 $$ final PdfContentByte content = writer.getDirectContent() --> Line_38 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_6 $$ final PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(MyProperties.getOutput())) --> Line_38 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_19 $$ PdfReader reader = new PdfReader(Presentations.INFO.getOutput()) --> Line_38 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_35 $$ reader = new PdfReader(Schedules.INFO.getOutput()) --> Line_38 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_38 $$ content.addTemplate(writer.getImportedPage(reader, i), Dimensions.getOffsetX(even), Dimensions.getOffsetY(even)) [FD]
Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_39 $$ document.newPage() [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_39 $$ document.newPage() [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_42 $$ document.close() [CD]
Line_5 $$ final Document document = new Document(Dimensions.getDimension(even, Dimension.MEDIABOX)) --> Line_42 $$ document.close() [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_43 $$ final File file = new File(MyProperties.getOutput()) [CD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_44 $$ final byte[] original = new byte[(int) file.length()] [CD]
Line_43 $$ final File file = new File(MyProperties.getOutput()) --> Line_44 $$ final byte[] original = new byte[(int) file.length()] [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_45 $$ final FileInputStream f = new FileInputStream(file) [CD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_46 $$ f.read(original) [CD]
Line_45 $$ final FileInputStream f = new FileInputStream(file) --> Line_46 $$ f.read(original) [FD]
Line_44 $$ final byte[] original = new byte[(int) file.length()] --> Line_46 $$ f.read(original) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_47 $$ reader = new PdfReader(original) [CD]
Line_19 $$ PdfReader reader = new PdfReader(Presentations.INFO.getOutput()) --> Line_47 $$ reader = new PdfReader(original) [FD]
Line_35 $$ reader = new PdfReader(Schedules.INFO.getOutput()) --> Line_47 $$ reader = new PdfReader(original) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_48 $$ final List<Integer> ranges = new ArrayList<Integer>() [CD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_49 $$ for (int i = 1; i <= total; i++) [CD]
Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_49 $$ for (int i = 1; i <= total; i++) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_49 $$ for (int i = 1; i <= total; i++) [FD]
Line_32 $$ int total = writer.getPageNumber() - 1 --> Line_49 $$ for (int i = 1; i <= total; i++) [FD]
Line_49 $$ for (int i = 1; i <= total; i++) --> Line_50 $$ ranges.add(i) [CD]
Line_49 $$ for (int i = 1; i <= total; i++) --> Line_50 $$ ranges.add(i) [FD]
Line_48 $$ final List<Integer> ranges = new ArrayList<Integer>() --> Line_50 $$ ranges.add(i) [FD]
Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_50 $$ ranges.add(i) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_50 $$ ranges.add(i) [FD]
Line_49 $$ for (int i = 1; i <= total; i++) --> Line_51 $$ if (i == total / 2) [CD]
Line_49 $$ for (int i = 1; i <= total; i++) --> Line_51 $$ if (i == total / 2) [FD]
Line_36 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_51 $$ if (i == total / 2) [FD]
Line_21 $$ for (int i = 1; i <= reader.getNumberOfPages(); i++) --> Line_51 $$ if (i == total / 2) [FD]
Line_51 $$ if (i == total / 2) --> Line_52 $$ for (int j = total + 1; j <= reader.getNumberOfPages(); j++) [CD]
Line_19 $$ PdfReader reader = new PdfReader(Presentations.INFO.getOutput()) --> Line_52 $$ for (int j = total + 1; j <= reader.getNumberOfPages(); j++) [FD]
Line_35 $$ reader = new PdfReader(Schedules.INFO.getOutput()) --> Line_52 $$ for (int j = total + 1; j <= reader.getNumberOfPages(); j++) [FD]
Line_47 $$ reader = new PdfReader(original) --> Line_52 $$ for (int j = total + 1; j <= reader.getNumberOfPages(); j++) [FD]
Line_52 $$ for (int j = total + 1; j <= reader.getNumberOfPages(); j++) --> Line_53 $$ ranges.add(j) [CD]
Line_52 $$ for (int j = total + 1; j <= reader.getNumberOfPages(); j++) --> Line_53 $$ ranges.add(j) [FD]
Line_48 $$ final List<Integer> ranges = new ArrayList<Integer>() --> Line_53 $$ ranges.add(j) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_57 $$ reader.selectPages(ranges) [CD]
Line_19 $$ PdfReader reader = new PdfReader(Presentations.INFO.getOutput()) --> Line_57 $$ reader.selectPages(ranges) [FD]
Line_35 $$ reader = new PdfReader(Schedules.INFO.getOutput()) --> Line_57 $$ reader.selectPages(ranges) [FD]
Line_47 $$ reader = new PdfReader(original) --> Line_57 $$ reader.selectPages(ranges) [FD]
Line_48 $$ final List<Integer> ranges = new ArrayList<Integer>() --> Line_57 $$ reader.selectPages(ranges) [FD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_58 $$ final PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(MyProperties.getOutput())) [CD]
Line_2 $$ public void createPdf(final String eventURI) throws IOException, DocumentException --> Line_59 $$ stamper.close() [CD]
Line_58 $$ final PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(MyProperties.getOutput())) --> Line_59 $$ stamper.close() [FD]
