Line_2 $$ public static void main(String[] args) --> Line_3 $$ String command = "java -jar  " [CD]
Line_2 $$ public static void main(String[] args) --> Line_4 $$ String linkerJarPath = "" [CD]
Line_2 $$ public static void main(String[] args) --> Line_5 $$ String path = "" [CD]
Line_2 $$ public static void main(String[] args) --> Line_6 $$ String osName = System.getProperty("os.name") [CD]
Line_2 $$ public static void main(String[] args) --> Line_7 $$ String temp = Launcher.class.getResource("").toString() [CD]
Line_2 $$ public static void main(String[] args) --> Line_8 $$ int index = temp.indexOf(".jar") [CD]
Line_2 $$ public static void main(String[] args) --> Line_9 $$ int start = index - 1 [CD]
Line_2 $$ public static void main(String[] args) --> Line_10 $$ while (Character.isLetter(temp.charAt(start))) [CD]
Line_9 $$ int start = index - 1 --> Line_10 $$ while (Character.isLetter(temp.charAt(start))) [FD]
Line_10 $$ while (Character.isLetter(temp.charAt(start))) --> Line_11 $$ start-- [CD]
Line_9 $$ int start = index - 1 --> Line_11 $$ start-- [FD]
Line_2 $$ public static void main(String[] args) --> Line_13 $$ String jarName = temp.substring(start + 1, index + 4) [CD]
Line_2 $$ public static void main(String[] args) --> Line_14 $$ System.out.println(jarName) [CD]
Line_13 $$ String jarName = temp.substring(start + 1, index + 4) --> Line_14 $$ System.out.println(jarName) [FD]
Line_2 $$ public static void main(String[] args) --> Line_15 $$ if (osName.startsWith("Linux")) [CD]
Line_6 $$ String osName = System.getProperty("os.name") --> Line_15 $$ if (osName.startsWith("Linux")) [FD]
Line_15 $$ if (osName.startsWith("Linux")) --> Line_16 $$ temp = temp.substring(temp.indexOf("/"), temp.indexOf(jarName)) [CD]
Line_13 $$ String jarName = temp.substring(start + 1, index + 4) --> Line_16 $$ temp = temp.substring(temp.indexOf("/"), temp.indexOf(jarName)) [FD]
Line_15 $$ if (osName.startsWith("Linux")) --> Line_17 $$ if (osName.startsWith("Windows")) [CD]
Line_6 $$ String osName = System.getProperty("os.name") --> Line_17 $$ if (osName.startsWith("Windows")) [FD]
Line_17 $$ if (osName.startsWith("Windows")) --> Line_18 $$ temp = temp.substring(temp.indexOf("file:") + 5, temp.indexOf(jarName)) [CD]
Line_16 $$ temp = temp.substring(temp.indexOf("/"), temp.indexOf(jarName)) --> Line_18 $$ temp = temp.substring(temp.indexOf("file:") + 5, temp.indexOf(jarName)) [FD]
Line_13 $$ String jarName = temp.substring(start + 1, index + 4) --> Line_18 $$ temp = temp.substring(temp.indexOf("file:") + 5, temp.indexOf(jarName)) [FD]
Line_17 $$ if (osName.startsWith("Windows")) --> Line_20 $$ System.exit(0) [CD]
Line_2 $$ public static void main(String[] args) --> Line_22 $$ path = path + temp [CD]
Line_5 $$ String path = "" --> Line_22 $$ path = path + temp [FD]
Line_16 $$ temp = temp.substring(temp.indexOf("/"), temp.indexOf(jarName)) --> Line_22 $$ path = path + temp [FD]
Line_18 $$ temp = temp.substring(temp.indexOf("file:") + 5, temp.indexOf(jarName)) --> Line_22 $$ path = path + temp [FD]
Line_5 $$ String path = "" --> Line_24 $$ path = java.net.URLDecoder.decode(path, "utf-8") [FD]
Line_22 $$ path = path + temp --> Line_24 $$ path = java.net.URLDecoder.decode(path, "utf-8") [FD]
Line_2 $$ public static void main(String[] args) --> Line_28 $$ File dir = new File(path) [CD]
Line_2 $$ public static void main(String[] args) --> Line_29 $$ File[] files = dir.listFiles() [CD]
Line_28 $$ File dir = new File(path) --> Line_29 $$ File[] files = dir.listFiles() [FD]
Line_2 $$ public static void main(String[] args) --> Line_30 $$ String exeJarName = null [CD]
Line_31 $$ for (File f : files) --> Line_32 $$ if (f.getName().endsWith(".jar") && !f.getName().startsWith(jarName)) [FD]
Line_13 $$ String jarName = temp.substring(start + 1, index + 4) --> Line_32 $$ if (f.getName().endsWith(".jar") && !f.getName().startsWith(jarName)) [FD]
Line_32 $$ if (f.getName().endsWith(".jar") && !f.getName().startsWith(jarName)) --> Line_33 $$ exeJarName = f.getName() [CD]
Line_30 $$ String exeJarName = null --> Line_33 $$ exeJarName = f.getName() [FD]
Line_31 $$ for (File f : files) --> Line_33 $$ exeJarName = f.getName() [FD]
Line_2 $$ public static void main(String[] args) --> Line_37 $$ if (exeJarName == null) [CD]
Line_30 $$ String exeJarName = null --> Line_37 $$ if (exeJarName == null) [FD]
Line_33 $$ exeJarName = f.getName() --> Line_37 $$ if (exeJarName == null) [FD]
Line_37 $$ if (exeJarName == null) --> Line_38 $$ System.out.println("no exefile") [CD]
Line_37 $$ if (exeJarName == null) --> Line_39 $$ System.exit(0) [CD]
Line_2 $$ public static void main(String[] args) --> Line_41 $$ linkerJarPath = path + exeJarName [CD]
Line_4 $$ String linkerJarPath = "" --> Line_41 $$ linkerJarPath = path + exeJarName [FD]
Line_5 $$ String path = "" --> Line_41 $$ linkerJarPath = path + exeJarName [FD]
Line_22 $$ path = path + temp --> Line_41 $$ linkerJarPath = path + exeJarName [FD]
Line_24 $$ path = java.net.URLDecoder.decode(path, "utf-8") --> Line_41 $$ linkerJarPath = path + exeJarName [FD]
Line_30 $$ String exeJarName = null --> Line_41 $$ linkerJarPath = path + exeJarName [FD]
Line_33 $$ exeJarName = f.getName() --> Line_41 $$ linkerJarPath = path + exeJarName [FD]
Line_2 $$ public static void main(String[] args) --> Line_42 $$ String pluginDirPath = path + "plugin" + File.separator [CD]
Line_2 $$ public static void main(String[] args) --> Line_43 $$ File[] plugins = new File(pluginDirPath).listFiles() [CD]
Line_2 $$ public static void main(String[] args) --> Line_44 $$ StringBuffer pluginNames = new StringBuffer("") [CD]
Line_45 $$ for (File plugin : plugins) --> Line_46 $$ if (plugin.getAbsolutePath().endsWith(".jar")) [FD]
Line_46 $$ if (plugin.getAbsolutePath().endsWith(".jar")) --> Line_47 $$ pluginNames.append("plugin/" + plugin.getName() + " ") [CD]
Line_44 $$ StringBuffer pluginNames = new StringBuffer("") --> Line_47 $$ pluginNames.append("plugin/" + plugin.getName() + " ") [FD]
Line_45 $$ for (File plugin : plugins) --> Line_47 $$ pluginNames.append("plugin/" + plugin.getName() + " ") [FD]
Line_2 $$ public static void main(String[] args) --> Line_50 $$ String libDirPath = path + "lib" + File.separator [CD]
Line_2 $$ public static void main(String[] args) --> Line_51 $$ File[] libs = new File(libDirPath).listFiles() [CD]
Line_2 $$ public static void main(String[] args) --> Line_52 $$ StringBuffer libNames = new StringBuffer("") [CD]
Line_53 $$ for (File lib : libs) --> Line_54 $$ if (lib.getAbsolutePath().endsWith(".jar")) [FD]
Line_54 $$ if (lib.getAbsolutePath().endsWith(".jar")) --> Line_55 $$ libNames.append("lib/" + lib.getName() + " ") [CD]
Line_52 $$ StringBuffer libNames = new StringBuffer("") --> Line_55 $$ libNames.append("lib/" + lib.getName() + " ") [FD]
Line_53 $$ for (File lib : libs) --> Line_55 $$ libNames.append("lib/" + lib.getName() + " ") [FD]
Line_59 $$ JarFile jarFile = new JarFile(linkerJarPath) --> Line_60 $$ Manifest manifest = jarFile.getManifest() [FD]
Line_60 $$ Manifest manifest = jarFile.getManifest() --> Line_61 $$ if (manifest == null) [FD]
Line_61 $$ if (manifest == null) --> Line_62 $$ manifest = new Manifest() [CD]
Line_60 $$ Manifest manifest = jarFile.getManifest() --> Line_62 $$ manifest = new Manifest() [FD]
Line_60 $$ Manifest manifest = jarFile.getManifest() --> Line_64 $$ Attributes attributes = manifest.getMainAttributes() [FD]
Line_62 $$ manifest = new Manifest() --> Line_64 $$ Attributes attributes = manifest.getMainAttributes() [FD]
Line_64 $$ Attributes attributes = manifest.getMainAttributes() --> Line_65 $$ attributes.putValue("Class-Path", pluginNames.toString() + libNames.toString()) [FD]
Line_44 $$ StringBuffer pluginNames = new StringBuffer("") --> Line_65 $$ attributes.putValue("Class-Path", pluginNames.toString() + libNames.toString()) [FD]
Line_52 $$ StringBuffer libNames = new StringBuffer("") --> Line_65 $$ attributes.putValue("Class-Path", pluginNames.toString() + libNames.toString()) [FD]
Line_70 $$ int s --> Line_71 $$ while ((s = copyInput.read(buffer)) > -1) [FD]
Line_67 $$ FileInputStream copyInput = new FileInputStream(linkerJarPath) --> Line_71 $$ while ((s = copyInput.read(buffer)) > -1) [FD]
Line_69 $$ byte[] buffer = new byte[4096] --> Line_71 $$ while ((s = copyInput.read(buffer)) > -1) [FD]
Line_71 $$ while ((s = copyInput.read(buffer)) > -1) --> Line_72 $$ copyOutput.write(buffer, 0, s) [CD]
Line_71 $$ while ((s = copyInput.read(buffer)) > -1) --> Line_72 $$ copyOutput.write(buffer, 0, s) [FD]
Line_68 $$ FileOutputStream copyOutput = new FileOutputStream(backupFile) --> Line_72 $$ copyOutput.write(buffer, 0, s) [FD]
Line_69 $$ byte[] buffer = new byte[4096] --> Line_72 $$ copyOutput.write(buffer, 0, s) [FD]
Line_70 $$ int s --> Line_72 $$ copyOutput.write(buffer, 0, s) [FD]
Line_68 $$ FileOutputStream copyOutput = new FileOutputStream(backupFile) --> Line_74 $$ copyOutput.flush() [FD]
Line_68 $$ FileOutputStream copyOutput = new FileOutputStream(backupFile) --> Line_75 $$ copyOutput.close() [FD]
Line_67 $$ FileInputStream copyInput = new FileInputStream(linkerJarPath) --> Line_76 $$ copyInput.close() [FD]
Line_78 $$ JarInputStream jarIn = new JarInputStream(new FileInputStream(backupFile)) --> Line_81 $$ while ((entry = jarIn.getNextJarEntry()) != null) [FD]
Line_77 $$ JarOutputStream jarOut = new JarOutputStream(new FileOutputStream(linkerJarPath), manifest) --> Line_83 $$ jarOut.putNextEntry(entry) [FD]
Line_84 $$ int read --> Line_85 $$ while ((read = jarIn.read(buf)) != -1) [FD]
Line_78 $$ JarInputStream jarIn = new JarInputStream(new FileInputStream(backupFile)) --> Line_85 $$ while ((read = jarIn.read(buf)) != -1) [FD]
Line_79 $$ byte[] buf = new byte[4096] --> Line_85 $$ while ((read = jarIn.read(buf)) != -1) [FD]
Line_85 $$ while ((read = jarIn.read(buf)) != -1) --> Line_86 $$ jarOut.write(buf, 0, read) [CD]
Line_85 $$ while ((read = jarIn.read(buf)) != -1) --> Line_86 $$ jarOut.write(buf, 0, read) [FD]
Line_77 $$ JarOutputStream jarOut = new JarOutputStream(new FileOutputStream(linkerJarPath), manifest) --> Line_86 $$ jarOut.write(buf, 0, read) [FD]
Line_79 $$ byte[] buf = new byte[4096] --> Line_86 $$ jarOut.write(buf, 0, read) [FD]
Line_84 $$ int read --> Line_86 $$ jarOut.write(buf, 0, read) [FD]
Line_77 $$ JarOutputStream jarOut = new JarOutputStream(new FileOutputStream(linkerJarPath), manifest) --> Line_88 $$ jarOut.closeEntry() [FD]
Line_77 $$ JarOutputStream jarOut = new JarOutputStream(new FileOutputStream(linkerJarPath), manifest) --> Line_90 $$ jarOut.flush() [FD]
Line_77 $$ JarOutputStream jarOut = new JarOutputStream(new FileOutputStream(linkerJarPath), manifest) --> Line_91 $$ jarOut.close() [FD]
Line_78 $$ JarInputStream jarIn = new JarInputStream(new FileInputStream(backupFile)) --> Line_92 $$ jarIn.close() [FD]
Line_93 $$ File file = new File(backupFile) --> Line_94 $$ if (file.exists()) [FD]
Line_94 $$ if (file.exists()) --> Line_95 $$ file.delete() [CD]
Line_93 $$ File file = new File(backupFile) --> Line_95 $$ file.delete() [FD]
Line_101 $$ if (System.getProperty("os.name").startsWith("Linux")) --> Line_102 $$ Runtime runtime = Runtime.getRuntime() [CD]
Line_101 $$ if (System.getProperty("os.name").startsWith("Linux")) --> Line_103 $$ String[] commands = new String[] [CD]
Line_101 $$ if (System.getProperty("os.name").startsWith("Linux")) --> Line_104 $$ runtime.exec(commands) [CD]
Line_102 $$ Runtime runtime = Runtime.getRuntime() --> Line_104 $$ runtime.exec(commands) [FD]
Line_103 $$ String[] commands = new String[] --> Line_104 $$ runtime.exec(commands) [FD]
Line_101 $$ if (System.getProperty("os.name").startsWith("Linux")) --> Line_106 $$ path = path.substring(1) [CD]
Line_5 $$ String path = "" --> Line_106 $$ path = path.substring(1) [FD]
Line_22 $$ path = path + temp --> Line_106 $$ path = path.substring(1) [FD]
Line_24 $$ path = java.net.URLDecoder.decode(path, "utf-8") --> Line_106 $$ path = path.substring(1) [FD]
Line_101 $$ if (System.getProperty("os.name").startsWith("Linux")) --> Line_107 $$ command = command + "\"" + path + exeJarName + "\"" [CD]
Line_3 $$ String command = "java -jar  " --> Line_107 $$ command = command + "\"" + path + exeJarName + "\"" [FD]
Line_101 $$ if (System.getProperty("os.name").startsWith("Linux")) --> Line_108 $$ System.out.println(command) [CD]
Line_3 $$ String command = "java -jar  " --> Line_108 $$ System.out.println(command) [FD]
Line_107 $$ command = command + "\"" + path + exeJarName + "\"" --> Line_108 $$ System.out.println(command) [FD]
Line_101 $$ if (System.getProperty("os.name").startsWith("Linux")) --> Line_109 $$ Runtime.getRuntime().exec(command) [CD]
Line_3 $$ String command = "java -jar  " --> Line_109 $$ Runtime.getRuntime().exec(command) [FD]
Line_107 $$ command = command + "\"" + path + exeJarName + "\"" --> Line_109 $$ Runtime.getRuntime().exec(command) [FD]
