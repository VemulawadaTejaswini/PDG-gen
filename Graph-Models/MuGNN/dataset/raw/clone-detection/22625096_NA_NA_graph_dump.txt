Line_2 $$ public void run() --> Line_3 $$ long starttime = (new Date()).getTime() [CD]
Line_2 $$ public void run() --> Line_4 $$ Matcher m = Pattern.compile("(\\S+);(\\d+)").matcher(Destination) [CD]
Line_2 $$ public void run() --> Line_5 $$ boolean completed = false [CD]
Line_2 $$ public void run() --> Line_6 $$ if (OutFile.length() > IncommingProcessor.MaxPayload) [CD]
Line_6 $$ if (OutFile.length() > IncommingProcessor.MaxPayload) --> Line_7 $$ logger.warn("Payload is too large!") [CD]
Line_6 $$ if (OutFile.length() > IncommingProcessor.MaxPayload) --> Line_8 $$ close() [CD]
Line_6 $$ if (OutFile.length() > IncommingProcessor.MaxPayload) --> Line_10 $$ if (m.find()) [CD]
Line_4 $$ Matcher m = Pattern.compile("(\\S+);(\\d+)").matcher(Destination) --> Line_10 $$ if (m.find()) [FD]
Line_10 $$ if (m.find()) --> Line_11 $$ Runnable cl = new Runnable() [CD]
Line_11 $$ Runnable cl = new Runnable() --> Line_13 $$ WaitToClose() [CD]
Line_10 $$ if (m.find()) --> Line_17 $$ t.start() [CD]
Line_4 $$ Matcher m = Pattern.compile("(\\S+);(\\d+)").matcher(Destination) --> Line_20 $$ String ip = m.group(1) [FD]
Line_4 $$ Matcher m = Pattern.compile("(\\S+);(\\d+)").matcher(Destination) --> Line_21 $$ int port = Integer.valueOf(m.group(2)) [FD]
Line_42 $$ while (readlen >= 0) --> Line_43 $$ if (readlen > 0) [CD]
Line_43 $$ if (readlen > 0) --> Line_44 $$ cryptlen = cipher.processBytes(inbuffer, 0, readlen, outbuffer, 0) [CD]
Line_43 $$ if (readlen > 0) --> Line_45 $$ fos.write(outbuffer, 0, cryptlen) [CD]
Line_42 $$ while (readlen >= 0) --> Line_47 $$ readlen = fis.read(inbuffer) [CD]
Line_50 $$ if (cryptlen > 0) --> Line_51 $$ fos.write(outbuffer, 0, cryptlen) [CD]
Line_62 $$ while (readlen >= 0) --> Line_63 $$ dos.write(inbuffer, 0, readlen) [CD]
Line_62 $$ while (readlen >= 0) --> Line_64 $$ readlen = fis.read(inbuffer) [CD]
Line_5 $$ boolean completed = false --> Line_82 $$ if (!completed) [FD]
Line_82 $$ if (!completed) --> Line_83 $$ e.printStackTrace() [CD]
Line_82 $$ if (!completed) --> Line_84 $$ Callback.Fail(e.getMessage()) [CD]
Line_10 $$ if (m.find()) --> Line_88 $$ close() [CD]
Line_10 $$ if (m.find()) --> Line_89 $$ logger.warn("Improper destination string. " + Destination) [CD]
Line_10 $$ if (m.find()) --> Line_90 $$ Callback.Fail("Improper destination string. " + Destination) [CD]
Line_2 $$ public void run() --> Line_93 $$ CloseWait() [CD]
Line_2 $$ public void run() --> Line_94 $$ long newtime = (new Date()).getTime() [CD]
Line_2 $$ public void run() --> Line_96 $$ logger.debug("Outgoing processor took: " + timediff) [CD]
