Line_2 $$ private static void extractSOUNDFILES() throws Exception --> Line_3 $$ ArrayList<File> soundFiles = new ArrayList<File>() [CD]
Line_2 $$ private static void extractSOUNDFILES() throws Exception --> Line_4 $$ File soundsFolder = new File("/var/lib/asterisk/sounds/") [CD]
Line_2 $$ private static void extractSOUNDFILES() throws Exception --> Line_5 $$ if (soundsFolder.exists()) [CD]
Line_4 $$ File soundsFolder = new File("/var/lib/asterisk/sounds/") --> Line_5 $$ if (soundsFolder.exists()) [FD]
Line_5 $$ if (soundsFolder.exists()) --> Line_6 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() [CD]
Line_4 $$ File soundsFolder = new File("/var/lib/asterisk/sounds/") --> Line_6 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() [FD]
Line_6 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_8 $$ if (NullStatus.isNull(name)) [CD]
Line_6 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_8 $$ if (NullStatus.isNull(name)) [FD]
Line_8 $$ if (NullStatus.isNull(name)) --> Line_9 $$ return false [CD]
Line_6 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_11 $$ if (name.endsWith("-sounds.jar")) [CD]
Line_6 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_11 $$ if (name.endsWith("-sounds.jar")) [FD]
Line_11 $$ if (name.endsWith("-sounds.jar")) --> Line_12 $$ return true [CD]
Line_6 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_14 $$ return false [CD]
Line_5 $$ if (soundsFolder.exists()) --> Line_17 $$ for (int i = 0; i < soundFiles1.length; i++) [CD]
Line_17 $$ for (int i = 0; i < soundFiles1.length; i++) --> Line_18 $$ soundFiles.add(soundFiles1[i]) [CD]
Line_3 $$ ArrayList<File> soundFiles = new ArrayList<File>() --> Line_18 $$ soundFiles.add(soundFiles1[i]) [FD]
Line_2 $$ private static void extractSOUNDFILES() throws Exception --> Line_22 $$ if (soundsFolder.exists()) [CD]
Line_4 $$ File soundsFolder = new File("/var/lib/asterisk/sounds/") --> Line_22 $$ if (soundsFolder.exists()) [FD]
Line_22 $$ if (soundsFolder.exists()) --> Line_23 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() [CD]
Line_4 $$ File soundsFolder = new File("/var/lib/asterisk/sounds/") --> Line_23 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() [FD]
Line_23 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_25 $$ if (NullStatus.isNull(name)) [CD]
Line_23 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_25 $$ if (NullStatus.isNull(name)) [FD]
Line_6 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_25 $$ if (NullStatus.isNull(name)) [FD]
Line_25 $$ if (NullStatus.isNull(name)) --> Line_26 $$ return false [CD]
Line_23 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_28 $$ if (name.endsWith("-sounds.jar")) [CD]
Line_23 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_28 $$ if (name.endsWith("-sounds.jar")) [FD]
Line_6 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_28 $$ if (name.endsWith("-sounds.jar")) [FD]
Line_28 $$ if (name.endsWith("-sounds.jar")) --> Line_29 $$ return true [CD]
Line_23 $$ File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() --> Line_31 $$ return false [CD]
Line_22 $$ if (soundsFolder.exists()) --> Line_34 $$ for (int i = 0; i < soundFiles1.length; i++) [CD]
Line_17 $$ for (int i = 0; i < soundFiles1.length; i++) --> Line_34 $$ for (int i = 0; i < soundFiles1.length; i++) [FD]
Line_34 $$ for (int i = 0; i < soundFiles1.length; i++) --> Line_35 $$ soundFiles.add(soundFiles1[i]) [CD]
Line_3 $$ ArrayList<File> soundFiles = new ArrayList<File>() --> Line_35 $$ soundFiles.add(soundFiles1[i]) [FD]
Line_2 $$ private static void extractSOUNDFILES() throws Exception --> Line_38 $$ for (int i = 0; i < soundFiles.size(); i++) [CD]
Line_34 $$ for (int i = 0; i < soundFiles1.length; i++) --> Line_38 $$ for (int i = 0; i < soundFiles.size(); i++) [FD]
Line_17 $$ for (int i = 0; i < soundFiles1.length; i++) --> Line_38 $$ for (int i = 0; i < soundFiles.size(); i++) [FD]
Line_3 $$ ArrayList<File> soundFiles = new ArrayList<File>() --> Line_38 $$ for (int i = 0; i < soundFiles.size(); i++) [FD]
Line_38 $$ for (int i = 0; i < soundFiles.size(); i++) --> Line_39 $$ ZipFile zipFile = new ZipFile(soundFiles.get(i)) [CD]
Line_38 $$ for (int i = 0; i < soundFiles.size(); i++) --> Line_39 $$ ZipFile zipFile = new ZipFile(soundFiles.get(i)) [FD]
Line_3 $$ ArrayList<File> soundFiles = new ArrayList<File>() --> Line_39 $$ ZipFile zipFile = new ZipFile(soundFiles.get(i)) [FD]
Line_34 $$ for (int i = 0; i < soundFiles1.length; i++) --> Line_39 $$ ZipFile zipFile = new ZipFile(soundFiles.get(i)) [FD]
Line_17 $$ for (int i = 0; i < soundFiles1.length; i++) --> Line_39 $$ ZipFile zipFile = new ZipFile(soundFiles.get(i)) [FD]
Line_38 $$ for (int i = 0; i < soundFiles.size(); i++) --> Line_40 $$ InputStream inputStream = null [CD]
Line_38 $$ for (int i = 0; i < soundFiles.size(); i++) --> Line_41 $$ Enumeration<? extends ZipEntry> oEnum = zipFile.entries() [CD]
Line_39 $$ ZipFile zipFile = new ZipFile(soundFiles.get(i)) --> Line_41 $$ Enumeration<? extends ZipEntry> oEnum = zipFile.entries() [FD]
Line_38 $$ for (int i = 0; i < soundFiles.size(); i++) --> Line_42 $$ while (oEnum.hasMoreElements()) [CD]
Line_42 $$ while (oEnum.hasMoreElements()) --> Line_43 $$ ZipEntry zipEntry = oEnum.nextElement() [CD]
Line_42 $$ while (oEnum.hasMoreElements()) --> Line_44 $$ File file = new File("/var/lib/asterisk/sounds/", zipEntry.getName()) [CD]
Line_42 $$ while (oEnum.hasMoreElements()) --> Line_45 $$ if (zipEntry.isDirectory()) [CD]
Line_40 $$ InputStream inputStream = null --> Line_48 $$ inputStream = zipFile.getInputStream(zipEntry) [FD]
Line_39 $$ ZipFile zipFile = new ZipFile(soundFiles.get(i)) --> Line_48 $$ inputStream = zipFile.getInputStream(zipEntry) [FD]
Line_40 $$ InputStream inputStream = null --> Line_50 $$ IOUtils.copy(inputStream, fos) [FD]
Line_49 $$ FileOutputStream fos = new FileOutputStream(file) --> Line_50 $$ IOUtils.copy(inputStream, fos) [FD]
Line_49 $$ FileOutputStream fos = new FileOutputStream(file) --> Line_51 $$ fos.close() [FD]
