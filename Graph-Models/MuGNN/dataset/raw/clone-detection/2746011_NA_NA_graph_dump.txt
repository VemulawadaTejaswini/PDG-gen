Line_2 $$ public void getFile(@PathVariable("file_name") String fileName, HttpServletResponse response, Principal principal) --> Line_5 $$ final String currentUser = principal.getName() [FD]
Line_6 $$ Authentication auth = SecurityContextHolder.getContext().getAuthentication() --> Line_7 $$ if (!auth.getPrincipal().equals(new String("anonymousUser"))) [FD]
Line_7 $$ if (!auth.getPrincipal().equals(new String("anonymousUser"))) --> Line_8 $$ MetabolightsUser metabolightsUser = (MetabolightsUser) auth.getPrincipal() [CD]
Line_6 $$ Authentication auth = SecurityContextHolder.getContext().getAuthentication() --> Line_8 $$ MetabolightsUser metabolightsUser = (MetabolightsUser) auth.getPrincipal() [FD]
Line_7 $$ if (!auth.getPrincipal().equals(new String("anonymousUser"))) --> Line_9 $$ if (metabolightsUser != null && metabolightsUser.isCurator()) [CD]
Line_8 $$ MetabolightsUser metabolightsUser = (MetabolightsUser) auth.getPrincipal() --> Line_9 $$ if (metabolightsUser != null && metabolightsUser.isCurator()) [FD]
Line_4 $$ Boolean validUser = false --> Line_9 $$ if (metabolightsUser != null && metabolightsUser.isCurator()) [FD]
Line_5 $$ final String currentUser = principal.getName() --> Line_11 $$ if (currentUser != null) [FD]
Line_11 $$ if (currentUser != null) --> Line_12 $$ Study study = studyService.getBiiStudy(fileName, true) [CD]
Line_2 $$ public void getFile(@PathVariable("file_name") String fileName, HttpServletResponse response, Principal principal) --> Line_12 $$ Study study = studyService.getBiiStudy(fileName, true) [FD]
Line_11 $$ if (currentUser != null) --> Line_13 $$ Collection<User> users = study.getUsers() [CD]
Line_12 $$ Study study = studyService.getBiiStudy(fileName, true) --> Line_13 $$ Collection<User> users = study.getUsers() [FD]
Line_11 $$ if (currentUser != null) --> Line_14 $$ Iterator<User> iter = users.iterator() [CD]
Line_13 $$ Collection<User> users = study.getUsers() --> Line_14 $$ Iterator<User> iter = users.iterator() [FD]
Line_11 $$ if (currentUser != null) --> Line_15 $$ while (iter.hasNext()) [CD]
Line_14 $$ Iterator<User> iter = users.iterator() --> Line_15 $$ while (iter.hasNext()) [FD]
Line_15 $$ while (iter.hasNext()) --> Line_16 $$ User user = iter.next() [CD]
Line_14 $$ Iterator<User> iter = users.iterator() --> Line_16 $$ User user = iter.next() [FD]
Line_15 $$ while (iter.hasNext()) --> Line_17 $$ if (user.getUserName().equals(currentUser)) [CD]
Line_5 $$ final String currentUser = principal.getName() --> Line_17 $$ if (user.getUserName().equals(currentUser)) [FD]
Line_16 $$ User user = iter.next() --> Line_17 $$ if (user.getUserName().equals(currentUser)) [FD]
Line_17 $$ if (user.getUserName().equals(currentUser)) --> Line_18 $$ validUser = true [CD]
Line_4 $$ Boolean validUser = false --> Line_18 $$ validUser = true [FD]
Line_9 $$ if (metabolightsUser != null && metabolightsUser.isCurator()) --> Line_18 $$ validUser = true [FD]
Line_18 $$ validUser = true --> Line_23 $$ if (!validUser) [FD]
Line_4 $$ Boolean validUser = false --> Line_23 $$ if (!validUser) [FD]
Line_9 $$ if (metabolightsUser != null && metabolightsUser.isCurator()) --> Line_23 $$ if (!validUser) [FD]
Line_2 $$ public void getFile(@PathVariable("file_name") String fileName, HttpServletResponse response, Principal principal) --> Line_26 $$ response.setContentType("application/zip") [FD]
Line_25 $$ InputStream is = new FileInputStream(privateFtpDirectory + fileName + ".zip") --> Line_27 $$ IOUtils.copy(is, response.getOutputStream()) [FD]
Line_2 $$ public void getFile(@PathVariable("file_name") String fileName, HttpServletResponse response, Principal principal) --> Line_27 $$ IOUtils.copy(is, response.getOutputStream()) [FD]
Line_2 $$ public void getFile(@PathVariable("file_name") String fileName, HttpServletResponse response, Principal principal) --> Line_31 $$ response.flushBuffer() [FD]
