Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_7 $$ if (jarfile == null) [FD]
Line_7 $$ if (jarfile == null) --> Line_8 $$ jarconn = jarurl.openConnection() [CD]
Line_5 $$ URLConnection jarconn = null --> Line_8 $$ jarconn = jarurl.openConnection() [FD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_8 $$ jarconn = jarurl.openConnection() [FD]
Line_7 $$ if (jarfile == null) --> Line_9 $$ if (jarconn.getURL().getProtocol().equals("file")) [CD]
Line_5 $$ URLConnection jarconn = null --> Line_9 $$ if (jarconn.getURL().getProtocol().equals("file")) [FD]
Line_8 $$ jarconn = jarurl.openConnection() --> Line_9 $$ if (jarconn.getURL().getProtocol().equals("file")) [FD]
Line_9 $$ if (jarconn.getURL().getProtocol().equals("file")) --> Line_10 $$ String jarfilename = jarurl.getFile() [CD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_10 $$ String jarfilename = jarurl.getFile() [FD]
Line_9 $$ if (jarconn.getURL().getProtocol().equals("file")) --> Line_11 $$ jarfilename = jarfilename.replace('/', File.separatorChar) [CD]
Line_10 $$ String jarfilename = jarurl.getFile() --> Line_11 $$ jarfilename = jarfilename.replace('/', File.separatorChar) [FD]
Line_9 $$ if (jarconn.getURL().getProtocol().equals("file")) --> Line_12 $$ jarfile = new File(jarfilename) [CD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_12 $$ jarfile = new File(jarfilename) [FD]
Line_9 $$ if (jarconn.getURL().getProtocol().equals("file")) --> Line_14 $$ localfile = false [CD]
Line_6 $$ boolean localfile = true --> Line_14 $$ localfile = false [FD]
Line_6 $$ boolean localfile = true --> Line_17 $$ if (localfile && !jarfile.exists()) [FD]
Line_14 $$ localfile = false --> Line_17 $$ if (localfile && !jarfile.exists()) [FD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_17 $$ if (localfile && !jarfile.exists()) [FD]
Line_12 $$ jarfile = new File(jarfilename) --> Line_17 $$ if (localfile && !jarfile.exists()) [FD]
Line_17 $$ if (localfile && !jarfile.exists()) --> Line_18 $$ return [CD]
Line_25 $$ if (caching) --> Line_26 $$ if (localfile) [CD]
Line_26 $$ if (localfile) --> Line_27 $$ mtime = jarfile.lastModified() [CD]
Line_21 $$ long mtime = 0 --> Line_27 $$ mtime = jarfile.lastModified() [FD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_27 $$ mtime = jarfile.lastModified() [FD]
Line_12 $$ jarfile = new File(jarfilename) --> Line_27 $$ mtime = jarfile.lastModified() [FD]
Line_26 $$ if (localfile) --> Line_28 $$ jarcanon = jarfile.getCanonicalPath() [CD]
Line_22 $$ String jarcanon = null --> Line_28 $$ jarcanon = jarfile.getCanonicalPath() [FD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_28 $$ jarcanon = jarfile.getCanonicalPath() [FD]
Line_12 $$ jarfile = new File(jarfilename) --> Line_28 $$ jarcanon = jarfile.getCanonicalPath() [FD]
Line_26 $$ if (localfile) --> Line_30 $$ mtime = jarconn.getLastModified() [CD]
Line_21 $$ long mtime = 0 --> Line_30 $$ mtime = jarconn.getLastModified() [FD]
Line_27 $$ mtime = jarfile.lastModified() --> Line_30 $$ mtime = jarconn.getLastModified() [FD]
Line_5 $$ URLConnection jarconn = null --> Line_30 $$ mtime = jarconn.getLastModified() [FD]
Line_8 $$ jarconn = jarurl.openConnection() --> Line_30 $$ mtime = jarconn.getLastModified() [FD]
Line_26 $$ if (localfile) --> Line_31 $$ jarcanon = jarurl.toString() [CD]
Line_22 $$ String jarcanon = null --> Line_31 $$ jarcanon = jarurl.toString() [FD]
Line_28 $$ jarcanon = jarfile.getCanonicalPath() --> Line_31 $$ jarcanon = jarurl.toString() [FD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_31 $$ jarcanon = jarurl.toString() [FD]
Line_25 $$ if (caching) --> Line_33 $$ entry = (JarXEntry) this.jarfiles.get(jarcanon) [CD]
Line_22 $$ String jarcanon = null --> Line_33 $$ entry = (JarXEntry) this.jarfiles.get(jarcanon) [FD]
Line_28 $$ jarcanon = jarfile.getCanonicalPath() --> Line_33 $$ entry = (JarXEntry) this.jarfiles.get(jarcanon) [FD]
Line_31 $$ jarcanon = jarurl.toString() --> Line_33 $$ entry = (JarXEntry) this.jarfiles.get(jarcanon) [FD]
Line_25 $$ if (caching) --> Line_34 $$ if ((entry == null || !(new File(entry.cachefile).exists())) && cache) [CD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_34 $$ if ((entry == null || !(new File(entry.cachefile).exists())) && cache) [FD]
Line_34 $$ if ((entry == null || !(new File(entry.cachefile).exists())) && cache) --> Line_35 $$ message("processing new jar, '" + jarcanon + "'") [CD]
Line_34 $$ if ((entry == null || !(new File(entry.cachefile).exists())) && cache) --> Line_36 $$ String jarname [CD]
Line_34 $$ if ((entry == null || !(new File(entry.cachefile).exists())) && cache) --> Line_37 $$ if (localfile) [CD]
Line_37 $$ if (localfile) --> Line_38 $$ jarname = jarfile.getName() [CD]
Line_36 $$ String jarname --> Line_38 $$ jarname = jarfile.getName() [FD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_38 $$ jarname = jarfile.getName() [FD]
Line_12 $$ jarfile = new File(jarfilename) --> Line_38 $$ jarname = jarfile.getName() [FD]
Line_37 $$ if (localfile) --> Line_40 $$ jarname = jarurl.getFile() [CD]
Line_36 $$ String jarname --> Line_40 $$ jarname = jarurl.getFile() [FD]
Line_38 $$ jarname = jarfile.getName() --> Line_40 $$ jarname = jarurl.getFile() [FD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_40 $$ jarname = jarurl.getFile() [FD]
Line_37 $$ if (localfile) --> Line_41 $$ int slash = jarname.lastIndexOf('/') [CD]
Line_36 $$ String jarname --> Line_41 $$ int slash = jarname.lastIndexOf('/') [FD]
Line_38 $$ jarname = jarfile.getName() --> Line_41 $$ int slash = jarname.lastIndexOf('/') [FD]
Line_40 $$ jarname = jarurl.getFile() --> Line_41 $$ int slash = jarname.lastIndexOf('/') [FD]
Line_37 $$ if (localfile) --> Line_42 $$ jarname = jarname.substring(slash + 1) [CD]
Line_41 $$ int slash = jarname.lastIndexOf('/') --> Line_42 $$ jarname = jarname.substring(slash + 1) [FD]
Line_36 $$ String jarname --> Line_42 $$ jarname = jarname.substring(slash + 1) [FD]
Line_38 $$ jarname = jarfile.getName() --> Line_42 $$ jarname = jarname.substring(slash + 1) [FD]
Line_40 $$ jarname = jarurl.getFile() --> Line_42 $$ jarname = jarname.substring(slash + 1) [FD]
Line_34 $$ if ((entry == null || !(new File(entry.cachefile).exists())) && cache) --> Line_44 $$ jarname = jarname.substring(0, jarname.length() - 4) [CD]
Line_36 $$ String jarname --> Line_44 $$ jarname = jarname.substring(0, jarname.length() - 4) [FD]
Line_38 $$ jarname = jarfile.getName() --> Line_44 $$ jarname = jarname.substring(0, jarname.length() - 4) [FD]
Line_40 $$ jarname = jarurl.getFile() --> Line_44 $$ jarname = jarname.substring(0, jarname.length() - 4) [FD]
Line_42 $$ jarname = jarname.substring(slash + 1) --> Line_44 $$ jarname = jarname.substring(0, jarname.length() - 4) [FD]
Line_34 $$ if ((entry == null || !(new File(entry.cachefile).exists())) && cache) --> Line_45 $$ entry = new JarXEntry(jarname) [CD]
Line_34 $$ if ((entry == null || !(new File(entry.cachefile).exists())) && cache) --> Line_46 $$ this.jarfiles.put(jarcanon, entry) [CD]
Line_22 $$ String jarcanon = null --> Line_46 $$ this.jarfiles.put(jarcanon, entry) [FD]
Line_28 $$ jarcanon = jarfile.getCanonicalPath() --> Line_46 $$ this.jarfiles.put(jarcanon, entry) [FD]
Line_31 $$ jarcanon = jarurl.toString() --> Line_46 $$ this.jarfiles.put(jarcanon, entry) [FD]
Line_34 $$ if ((entry == null || !(new File(entry.cachefile).exists())) && cache) --> Line_47 $$ brandNew = true [CD]
Line_24 $$ boolean brandNew = false --> Line_47 $$ brandNew = true [FD]
Line_25 $$ if (caching) --> Line_49 $$ if (mtime != 0 && entry != null && entry.mtime == mtime) [CD]
Line_49 $$ if (mtime != 0 && entry != null && entry.mtime == mtime) --> Line_50 $$ zipPackages = readCacheFile(entry, jarcanon) [CD]
Line_20 $$ Hashtable zipPackages = null --> Line_50 $$ zipPackages = readCacheFile(entry, jarcanon) [FD]
Line_22 $$ String jarcanon = null --> Line_50 $$ zipPackages = readCacheFile(entry, jarcanon) [FD]
Line_28 $$ jarcanon = jarfile.getCanonicalPath() --> Line_50 $$ zipPackages = readCacheFile(entry, jarcanon) [FD]
Line_31 $$ jarcanon = jarurl.toString() --> Line_50 $$ zipPackages = readCacheFile(entry, jarcanon) [FD]
Line_20 $$ Hashtable zipPackages = null --> Line_53 $$ if (zipPackages == null) [FD]
Line_50 $$ zipPackages = readCacheFile(entry, jarcanon) --> Line_53 $$ if (zipPackages == null) [FD]
Line_53 $$ if (zipPackages == null) --> Line_54 $$ caching = caching && cache [CD]
Line_4 $$ boolean caching = this.jarfiles != null --> Line_54 $$ caching = caching && cache [FD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_54 $$ caching = caching && cache [FD]
Line_53 $$ if (zipPackages == null) --> Line_55 $$ if (caching) [CD]
Line_55 $$ if (caching) --> Line_56 $$ this.indexModified = true [CD]
Line_55 $$ if (caching) --> Line_57 $$ if (entry.mtime != 0) [CD]
Line_57 $$ if (entry.mtime != 0) --> Line_58 $$ message("processing modified jar, '" + jarcanon + "'") [CD]
Line_55 $$ if (caching) --> Line_60 $$ entry.mtime = mtime [CD]
Line_21 $$ long mtime = 0 --> Line_60 $$ entry.mtime = mtime [FD]
Line_27 $$ mtime = jarfile.lastModified() --> Line_60 $$ entry.mtime = mtime [FD]
Line_30 $$ mtime = jarconn.getLastModified() --> Line_60 $$ entry.mtime = mtime [FD]
Line_53 $$ if (zipPackages == null) --> Line_62 $$ InputStream jarin [CD]
Line_53 $$ if (zipPackages == null) --> Line_63 $$ if (jarconn == null) [CD]
Line_5 $$ URLConnection jarconn = null --> Line_63 $$ if (jarconn == null) [FD]
Line_8 $$ jarconn = jarurl.openConnection() --> Line_63 $$ if (jarconn == null) [FD]
Line_63 $$ if (jarconn == null) --> Line_64 $$ jarin = new BufferedInputStream(new FileInputStream(jarfile)) [CD]
Line_62 $$ InputStream jarin --> Line_64 $$ jarin = new BufferedInputStream(new FileInputStream(jarfile)) [FD]
Line_63 $$ if (jarconn == null) --> Line_66 $$ jarin = jarconn.getInputStream() [CD]
Line_62 $$ InputStream jarin --> Line_66 $$ jarin = jarconn.getInputStream() [FD]
Line_64 $$ jarin = new BufferedInputStream(new FileInputStream(jarfile)) --> Line_66 $$ jarin = jarconn.getInputStream() [FD]
Line_5 $$ URLConnection jarconn = null --> Line_66 $$ jarin = jarconn.getInputStream() [FD]
Line_8 $$ jarconn = jarurl.openConnection() --> Line_66 $$ jarin = jarconn.getInputStream() [FD]
Line_53 $$ if (zipPackages == null) --> Line_68 $$ zipPackages = getZipPackages(jarin) [CD]
Line_20 $$ Hashtable zipPackages = null --> Line_68 $$ zipPackages = getZipPackages(jarin) [FD]
Line_50 $$ zipPackages = readCacheFile(entry, jarcanon) --> Line_68 $$ zipPackages = getZipPackages(jarin) [FD]
Line_62 $$ InputStream jarin --> Line_68 $$ zipPackages = getZipPackages(jarin) [FD]
Line_64 $$ jarin = new BufferedInputStream(new FileInputStream(jarfile)) --> Line_68 $$ zipPackages = getZipPackages(jarin) [FD]
Line_66 $$ jarin = jarconn.getInputStream() --> Line_68 $$ zipPackages = getZipPackages(jarin) [FD]
Line_53 $$ if (zipPackages == null) --> Line_69 $$ if (caching) [CD]
Line_69 $$ if (caching) --> Line_70 $$ writeCacheFile(entry, jarcanon, zipPackages, brandNew) [CD]
Line_22 $$ String jarcanon = null --> Line_70 $$ writeCacheFile(entry, jarcanon, zipPackages, brandNew) [FD]
Line_28 $$ jarcanon = jarfile.getCanonicalPath() --> Line_70 $$ writeCacheFile(entry, jarcanon, zipPackages, brandNew) [FD]
Line_31 $$ jarcanon = jarurl.toString() --> Line_70 $$ writeCacheFile(entry, jarcanon, zipPackages, brandNew) [FD]
Line_20 $$ Hashtable zipPackages = null --> Line_70 $$ writeCacheFile(entry, jarcanon, zipPackages, brandNew) [FD]
Line_50 $$ zipPackages = readCacheFile(entry, jarcanon) --> Line_70 $$ writeCacheFile(entry, jarcanon, zipPackages, brandNew) [FD]
Line_68 $$ zipPackages = getZipPackages(jarin) --> Line_70 $$ writeCacheFile(entry, jarcanon, zipPackages, brandNew) [FD]
Line_24 $$ boolean brandNew = false --> Line_70 $$ writeCacheFile(entry, jarcanon, zipPackages, brandNew) [FD]
Line_47 $$ brandNew = true --> Line_70 $$ writeCacheFile(entry, jarcanon, zipPackages, brandNew) [FD]
Line_20 $$ Hashtable zipPackages = null --> Line_73 $$ addPackages(zipPackages, jarcanon) [FD]
Line_50 $$ zipPackages = readCacheFile(entry, jarcanon) --> Line_73 $$ addPackages(zipPackages, jarcanon) [FD]
Line_68 $$ zipPackages = getZipPackages(jarin) --> Line_73 $$ addPackages(zipPackages, jarcanon) [FD]
Line_22 $$ String jarcanon = null --> Line_73 $$ addPackages(zipPackages, jarcanon) [FD]
Line_28 $$ jarcanon = jarfile.getCanonicalPath() --> Line_73 $$ addPackages(zipPackages, jarcanon) [FD]
Line_31 $$ jarcanon = jarurl.toString() --> Line_73 $$ addPackages(zipPackages, jarcanon) [FD]
Line_2 $$ private void addJarToPackages(URL jarurl, File jarfile, boolean cache) --> Line_76 $$ warning("skipping bad jar, '" + (jarfile != null ? jarfile.toString() : jarurl.toString()) + "'") [FD]
Line_12 $$ jarfile = new File(jarfilename) --> Line_76 $$ warning("skipping bad jar, '" + (jarfile != null ? jarfile.toString() : jarurl.toString()) + "'") [FD]
