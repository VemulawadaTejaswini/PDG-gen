Line_2 $$ private void addServices(Bundle bundle) --> Line_3 $$ if (!resolvedBundles.containsKey(bundle)) [CD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_3 $$ if (!resolvedBundles.containsKey(bundle)) [FD]
Line_3 $$ if (!resolvedBundles.containsKey(bundle)) --> Line_4 $$ Enumeration enumeration = bundle.findEntries("META-INF", "*services.xml", false) [CD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_4 $$ Enumeration enumeration = bundle.findEntries("META-INF", "*services.xml", false) [FD]
Line_3 $$ if (!resolvedBundles.containsKey(bundle)) --> Line_5 $$ int i = 0 [CD]
Line_3 $$ if (!resolvedBundles.containsKey(bundle)) --> Line_6 $$ List<AxisServiceGroup> axisServiceGroupList = null [CD]
Line_3 $$ if (!resolvedBundles.containsKey(bundle)) --> Line_7 $$ if (enumeration != null) [CD]
Line_4 $$ Enumeration enumeration = bundle.findEntries("META-INF", "*services.xml", false) --> Line_7 $$ if (enumeration != null) [FD]
Line_7 $$ if (enumeration != null) --> Line_8 $$ axisServiceGroupList = new ArrayList<AxisServiceGroup>() [CD]
Line_6 $$ List<AxisServiceGroup> axisServiceGroupList = null --> Line_8 $$ axisServiceGroupList = new ArrayList<AxisServiceGroup>() [FD]
Line_3 $$ if (!resolvedBundles.containsKey(bundle)) --> Line_10 $$ while (enumeration != null && enumeration.hasMoreElements()) [CD]
Line_4 $$ Enumeration enumeration = bundle.findEntries("META-INF", "*services.xml", false) --> Line_10 $$ while (enumeration != null && enumeration.hasMoreElements()) [FD]
Line_4 $$ Enumeration enumeration = bundle.findEntries("META-INF", "*services.xml", false) --> Line_12 $$ URL url = (URL) enumeration.nextElement() [FD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_14 $$ serviceGroup.addParameter("last.updated", bundle.getLastModified()) [FD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_14 $$ serviceGroup.addParameter("last.updated", bundle.getLastModified()) [FD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_16 $$ serviceGroup.setServiceGroupClassLoader(loader) [FD]
Line_12 $$ URL url = (URL) enumeration.nextElement() --> Line_17 $$ InputStream inputStream = url.openStream() [FD]
Line_18 $$ DescriptionBuilder builder = new DescriptionBuilder(inputStream, configCtx) --> Line_19 $$ OMElement rootElement = builder.buildOM() [FD]
Line_19 $$ OMElement rootElement = builder.buildOM() --> Line_20 $$ String elementName = rootElement.getLocalName() [FD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_21 $$ Dictionary headers = bundle.getHeaders() [FD]
Line_21 $$ Dictionary headers = bundle.getHeaders() --> Line_22 $$ String bundleSymbolicName = (String) headers.get("Bundle-SymbolicName") [FD]
Line_22 $$ String bundleSymbolicName = (String) headers.get("Bundle-SymbolicName") --> Line_23 $$ bundleSymbolicName = bundleSymbolicName + "_" + i [FD]
Line_5 $$ int i = 0 --> Line_23 $$ bundleSymbolicName = bundleSymbolicName + "_" + i [FD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_24 $$ serviceGroup.setServiceGroupName(bundleSymbolicName) [FD]
Line_22 $$ String bundleSymbolicName = (String) headers.get("Bundle-SymbolicName") --> Line_24 $$ serviceGroup.setServiceGroupName(bundleSymbolicName) [FD]
Line_23 $$ bundleSymbolicName = bundleSymbolicName + "_" + i --> Line_24 $$ serviceGroup.setServiceGroupName(bundleSymbolicName) [FD]
Line_20 $$ String elementName = rootElement.getLocalName() --> Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) [FD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_27 $$ AxisService axisService = new AxisService(bundleSymbolicName) [CD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_28 $$ axisService.setParent(serviceGroup) [CD]
Line_27 $$ AxisService axisService = new AxisService(bundleSymbolicName) --> Line_28 $$ axisService.setParent(serviceGroup) [FD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_28 $$ axisService.setParent(serviceGroup) [FD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_29 $$ axisService.setClassLoader(loader) [CD]
Line_27 $$ AxisService axisService = new AxisService(bundleSymbolicName) --> Line_29 $$ axisService.setClassLoader(loader) [FD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_30 $$ ServiceBuilder serviceBuilder = new OSGiServiceBuilder(configCtx, axisService) [CD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_31 $$ serviceBuilder.setWsdlServiceMap(wsdlServicesMap) [CD]
Line_30 $$ ServiceBuilder serviceBuilder = new OSGiServiceBuilder(configCtx, axisService) --> Line_31 $$ serviceBuilder.setWsdlServiceMap(wsdlServicesMap) [FD]
Line_25 $$ HashMap wsdlServicesMap = new HashMap() --> Line_31 $$ serviceBuilder.setWsdlServiceMap(wsdlServicesMap) [FD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_32 $$ AxisService service = serviceBuilder.populateService(rootElement) [CD]
Line_30 $$ ServiceBuilder serviceBuilder = new OSGiServiceBuilder(configCtx, axisService) --> Line_32 $$ AxisService service = serviceBuilder.populateService(rootElement) [FD]
Line_19 $$ OMElement rootElement = builder.buildOM() --> Line_32 $$ AxisService service = serviceBuilder.populateService(rootElement) [FD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_33 $$ ArrayList<AxisService> serviceList = new ArrayList<AxisService>() [CD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_34 $$ serviceList.add(service) [CD]
Line_33 $$ ArrayList<AxisService> serviceList = new ArrayList<AxisService>() --> Line_34 $$ serviceList.add(service) [FD]
Line_32 $$ AxisService service = serviceBuilder.populateService(rootElement) --> Line_34 $$ serviceList.add(service) [FD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_35 $$ DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration()) [CD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_35 $$ DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration()) [FD]
Line_33 $$ ArrayList<AxisService> serviceList = new ArrayList<AxisService>() --> Line_35 $$ DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration()) [FD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_36 $$ log.info("[Axis2/OSGi] Deployed axis2 service:" + service.getName() + " in Bundle: " + bundle.getSymbolicName()) [CD]
Line_32 $$ AxisService service = serviceBuilder.populateService(rootElement) --> Line_36 $$ log.info("[Axis2/OSGi] Deployed axis2 service:" + service.getName() + " in Bundle: " + bundle.getSymbolicName()) [FD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_36 $$ log.info("[Axis2/OSGi] Deployed axis2 service:" + service.getName() + " in Bundle: " + bundle.getSymbolicName()) [FD]
Line_26 $$ if (DeploymentConstants.TAG_SERVICE.equals(elementName)) --> Line_37 $$ if (DeploymentConstants.TAG_SERVICE_GROUP.equals(elementName)) [CD]
Line_20 $$ String elementName = rootElement.getLocalName() --> Line_37 $$ if (DeploymentConstants.TAG_SERVICE_GROUP.equals(elementName)) [FD]
Line_37 $$ if (DeploymentConstants.TAG_SERVICE_GROUP.equals(elementName)) --> Line_38 $$ ServiceGroupBuilder groupBuilder = new OSGiServiceGroupBuilder(rootElement, wsdlServicesMap, configCtx) [CD]
Line_37 $$ if (DeploymentConstants.TAG_SERVICE_GROUP.equals(elementName)) --> Line_39 $$ ArrayList serviceList = groupBuilder.populateServiceGroup(serviceGroup) [CD]
Line_38 $$ ServiceGroupBuilder groupBuilder = new OSGiServiceGroupBuilder(rootElement, wsdlServicesMap, configCtx) --> Line_39 $$ ArrayList serviceList = groupBuilder.populateServiceGroup(serviceGroup) [FD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_39 $$ ArrayList serviceList = groupBuilder.populateServiceGroup(serviceGroup) [FD]
Line_37 $$ if (DeploymentConstants.TAG_SERVICE_GROUP.equals(elementName)) --> Line_40 $$ DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration()) [CD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_40 $$ DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration()) [FD]
Line_33 $$ ArrayList<AxisService> serviceList = new ArrayList<AxisService>() --> Line_40 $$ DeploymentEngine.addServiceGroup(serviceGroup, serviceList, null, null, configCtx.getAxisConfiguration()) [FD]
Line_37 $$ if (DeploymentConstants.TAG_SERVICE_GROUP.equals(elementName)) --> Line_41 $$ log.info("[Axis2/OSGi] Deployed axis2 service group:" + serviceGroup.getServiceGroupName() + " in Bundle: " + bundle.getSymbolicName()) [CD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_41 $$ log.info("[Axis2/OSGi] Deployed axis2 service group:" + serviceGroup.getServiceGroupName() + " in Bundle: " + bundle.getSymbolicName()) [FD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_41 $$ log.info("[Axis2/OSGi] Deployed axis2 service group:" + serviceGroup.getServiceGroupName() + " in Bundle: " + bundle.getSymbolicName()) [FD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_43 $$ serviceGroup.addParameter(OSGi_BUNDLE_ID, bundle.getBundleId()) [FD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_43 $$ serviceGroup.addParameter(OSGi_BUNDLE_ID, bundle.getBundleId()) [FD]
Line_6 $$ List<AxisServiceGroup> axisServiceGroupList = null --> Line_44 $$ axisServiceGroupList.add(serviceGroup) [FD]
Line_8 $$ axisServiceGroupList = new ArrayList<AxisServiceGroup>() --> Line_44 $$ axisServiceGroupList.add(serviceGroup) [FD]
Line_13 $$ AxisServiceGroup serviceGroup = new AxisServiceGroup(configCtx.getAxisConfiguration()) --> Line_44 $$ axisServiceGroupList.add(serviceGroup) [FD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_45 $$ if (unreslovedBundles.contains(bundle)) [FD]
Line_45 $$ if (unreslovedBundles.contains(bundle)) --> Line_46 $$ unreslovedBundles.remove(bundle) [CD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_46 $$ unreslovedBundles.remove(bundle) [FD]
Line_5 $$ int i = 0 --> Line_48 $$ i++ [FD]
Line_51 $$ if (e instanceof DeploymentException) --> Line_52 $$ String message = e.getMessage() [CD]
Line_51 $$ if (e instanceof DeploymentException) --> Line_53 $$ if (message != null && message.length() != 0) [CD]
Line_52 $$ String message = e.getMessage() --> Line_53 $$ if (message != null && message.length() != 0) [FD]
Line_53 $$ if (message != null && message.length() != 0) --> Line_54 $$ if (message.indexOf(MODULE_NOT_FOUND_ERROR) > -1) [CD]
Line_52 $$ String message = e.getMessage() --> Line_54 $$ if (message.indexOf(MODULE_NOT_FOUND_ERROR) > -1) [FD]
Line_54 $$ if (message.indexOf(MODULE_NOT_FOUND_ERROR) > -1) --> Line_55 $$ if (!unreslovedBundles.contains(bundle)) [CD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_55 $$ if (!unreslovedBundles.contains(bundle)) [FD]
Line_55 $$ if (!unreslovedBundles.contains(bundle)) --> Line_56 $$ log.info("A service being found with unmeant module " + "dependency. Hence, moved it to UNRESOLVED state.") [CD]
Line_55 $$ if (!unreslovedBundles.contains(bundle)) --> Line_57 $$ unreslovedBundles.add(bundle) [CD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_57 $$ unreslovedBundles.add(bundle) [FD]
Line_55 $$ if (!unreslovedBundles.contains(bundle)) --> Line_59 $$ log.info("A service being found in UNRESOLVED state.") [CD]
Line_54 $$ if (message.indexOf(MODULE_NOT_FOUND_ERROR) > -1) --> Line_62 $$ log.error(msg, e) [CD]
Line_50 $$ String msg = "Error while reading from the bundle" --> Line_62 $$ log.error(msg, e) [FD]
Line_53 $$ if (message != null && message.length() != 0) --> Line_66 $$ log.error(msg, e) [CD]
Line_50 $$ String msg = "Error while reading from the bundle" --> Line_66 $$ log.error(msg, e) [FD]
Line_51 $$ if (e instanceof DeploymentException) --> Line_70 $$ log.error(msg, e) [CD]
Line_50 $$ String msg = "Error while reading from the bundle" --> Line_70 $$ log.error(msg, e) [FD]
Line_3 $$ if (!resolvedBundles.containsKey(bundle)) --> Line_75 $$ if (axisServiceGroupList != null && axisServiceGroupList.size() > 0) [CD]
Line_6 $$ List<AxisServiceGroup> axisServiceGroupList = null --> Line_75 $$ if (axisServiceGroupList != null && axisServiceGroupList.size() > 0) [FD]
Line_8 $$ axisServiceGroupList = new ArrayList<AxisServiceGroup>() --> Line_75 $$ if (axisServiceGroupList != null && axisServiceGroupList.size() > 0) [FD]
Line_75 $$ if (axisServiceGroupList != null && axisServiceGroupList.size() > 0) --> Line_76 $$ resolvedBundles.put(bundle, axisServiceGroupList) [CD]
Line_2 $$ private void addServices(Bundle bundle) --> Line_76 $$ resolvedBundles.put(bundle, axisServiceGroupList) [FD]
Line_6 $$ List<AxisServiceGroup> axisServiceGroupList = null --> Line_76 $$ resolvedBundles.put(bundle, axisServiceGroupList) [FD]
Line_8 $$ axisServiceGroupList = new ArrayList<AxisServiceGroup>() --> Line_76 $$ resolvedBundles.put(bundle, axisServiceGroupList) [FD]
