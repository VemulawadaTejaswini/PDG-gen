Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_3 $$ String fullname = System.mapLibraryName(name) [CD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_3 $$ String fullname = System.mapLibraryName(name) [FD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_4 $$ String path = "native/" + sysName + "/" + fullname [CD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_5 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(path) [CD]
Line_4 $$ String path = "native/" + sysName + "/" + fullname --> Line_5 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(path) [FD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_6 $$ if (url == null) [CD]
Line_5 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(path) --> Line_6 $$ if (url == null) [FD]
Line_6 $$ if (url == null) --> Line_7 $$ if (!warning) [CD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_7 $$ if (!warning) [FD]
Line_7 $$ if (!warning) --> Line_8 $$ logger.log(Level.WARNING, "Cannot locate native library: [CD]
Line_6 $$ if (url == null) --> Line_10 $$ return [CD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_12 $$ URLConnection conn = url.openConnection() [CD]
Line_5 $$ URL url = Thread.currentThread().getContextClassLoader().getResource(path) --> Line_12 $$ URLConnection conn = url.openConnection() [FD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_13 $$ InputStream in = conn.getInputStream() [CD]
Line_12 $$ URLConnection conn = url.openConnection() --> Line_13 $$ InputStream in = conn.getInputStream() [FD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_14 $$ File targetFile = new File(getExtractionDir(), fullname) [CD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_15 $$ OutputStream out = null [CD]
Line_14 $$ File targetFile = new File(getExtractionDir(), fullname) --> Line_17 $$ if (targetFile.exists()) [FD]
Line_17 $$ if (targetFile.exists()) --> Line_18 $$ long targetLastModified = targetFile.lastModified() [CD]
Line_14 $$ File targetFile = new File(getExtractionDir(), fullname) --> Line_18 $$ long targetLastModified = targetFile.lastModified() [FD]
Line_17 $$ if (targetFile.exists()) --> Line_19 $$ long sourceLastModified = conn.getLastModified() [CD]
Line_12 $$ URLConnection conn = url.openConnection() --> Line_19 $$ long sourceLastModified = conn.getLastModified() [FD]
Line_17 $$ if (targetFile.exists()) --> Line_20 $$ if (targetLastModified + 1000 > sourceLastModified) [CD]
Line_19 $$ long sourceLastModified = conn.getLastModified() --> Line_20 $$ if (targetLastModified + 1000 > sourceLastModified) [FD]
Line_20 $$ if (targetLastModified + 1000 > sourceLastModified) --> Line_21 $$ logger.log(Level.FINE, "Not copying library [CD]
Line_3 $$ String fullname = System.mapLibraryName(name) --> Line_21 $$ logger.log(Level.FINE, "Not copying library [FD]
Line_20 $$ if (targetLastModified + 1000 > sourceLastModified) --> Line_22 $$ return [CD]
Line_15 $$ OutputStream out = null --> Line_25 $$ out = new FileOutputStream(targetFile) [FD]
Line_26 $$ int len --> Line_27 $$ while ((len = in.read(buf)) > 0) [FD]
Line_13 $$ InputStream in = conn.getInputStream() --> Line_27 $$ while ((len = in.read(buf)) > 0) [FD]
Line_27 $$ while ((len = in.read(buf)) > 0) --> Line_28 $$ out.write(buf, 0, len) [CD]
Line_27 $$ while ((len = in.read(buf)) > 0) --> Line_28 $$ out.write(buf, 0, len) [FD]
Line_15 $$ OutputStream out = null --> Line_28 $$ out.write(buf, 0, len) [FD]
Line_25 $$ out = new FileOutputStream(targetFile) --> Line_28 $$ out.write(buf, 0, len) [FD]
Line_26 $$ int len --> Line_28 $$ out.write(buf, 0, len) [FD]
Line_13 $$ InputStream in = conn.getInputStream() --> Line_30 $$ in.close() [FD]
Line_13 $$ InputStream in = conn.getInputStream() --> Line_31 $$ in = null [FD]
Line_15 $$ OutputStream out = null --> Line_32 $$ out.close() [FD]
Line_25 $$ out = new FileOutputStream(targetFile) --> Line_32 $$ out.close() [FD]
Line_15 $$ OutputStream out = null --> Line_33 $$ out = null [FD]
Line_25 $$ out = new FileOutputStream(targetFile) --> Line_33 $$ out = null [FD]
Line_14 $$ File targetFile = new File(getExtractionDir(), fullname) --> Line_34 $$ targetFile.setLastModified(conn.getLastModified()) [FD]
Line_12 $$ URLConnection conn = url.openConnection() --> Line_34 $$ targetFile.setLastModified(conn.getLastModified()) [FD]
Line_36 $$ if (ex.getMessage().contains("used by another process")) --> Line_37 $$ return [CD]
Line_41 $$ if (load) --> Line_42 $$ System.load(targetFile.getAbsolutePath()) [CD]
Line_14 $$ File targetFile = new File(getExtractionDir(), fullname) --> Line_42 $$ System.load(targetFile.getAbsolutePath()) [FD]
Line_13 $$ InputStream in = conn.getInputStream() --> Line_44 $$ if (in != null) [FD]
Line_31 $$ in = null --> Line_44 $$ if (in != null) [FD]
Line_44 $$ if (in != null) --> Line_45 $$ in.close() [CD]
Line_13 $$ InputStream in = conn.getInputStream() --> Line_45 $$ in.close() [FD]
Line_31 $$ in = null --> Line_45 $$ in.close() [FD]
Line_15 $$ OutputStream out = null --> Line_47 $$ if (out != null) [FD]
Line_25 $$ out = new FileOutputStream(targetFile) --> Line_47 $$ if (out != null) [FD]
Line_33 $$ out = null --> Line_47 $$ if (out != null) [FD]
Line_47 $$ if (out != null) --> Line_48 $$ out.close() [CD]
Line_15 $$ OutputStream out = null --> Line_48 $$ out.close() [FD]
Line_25 $$ out = new FileOutputStream(targetFile) --> Line_48 $$ out.close() [FD]
Line_33 $$ out = null --> Line_48 $$ out.close() [FD]
Line_2 $$ public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException --> Line_51 $$ logger.log(Level.FINE, "Copied [CD]
