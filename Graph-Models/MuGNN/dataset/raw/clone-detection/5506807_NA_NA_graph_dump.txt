Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_3 $$ Statement stmt = con.createStatement() [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_4 $$ stmt.executeUpdate("create table #t0009 " + "  (i  integer  not null,      " + "   s  char(10) not null)      ") [CD]
Line_3 $$ Statement stmt = con.createStatement() --> Line_4 $$ stmt.executeUpdate("create table #t0009 " + "  (i  integer  not null,      " + "   s  char(10) not null)      ") [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_5 $$ con.setAutoCommit(false) [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_7 $$ int rowsToAdd = 8 [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_8 $$ final String theString = "abcdefghijklmnopqrstuvwxyz" [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_9 $$ int count = 0 [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) [CD]
Line_7 $$ int rowsToAdd = 8 --> Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) [FD]
Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_11 $$ pstmt.setInt(1, i) [CD]
Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_11 $$ pstmt.setInt(1, i) [FD]
Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_11 $$ pstmt.setInt(1, i) [FD]
Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_12 $$ pstmt.setString(2, theString.substring(0, i)) [CD]
Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_12 $$ pstmt.setString(2, theString.substring(0, i)) [FD]
Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_12 $$ pstmt.setString(2, theString.substring(0, i)) [FD]
Line_8 $$ final String theString = "abcdefghijklmnopqrstuvwxyz" --> Line_12 $$ pstmt.setString(2, theString.substring(0, i)) [FD]
Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_13 $$ count += pstmt.executeUpdate() [CD]
Line_9 $$ int count = 0 --> Line_13 $$ count += pstmt.executeUpdate() [FD]
Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_13 $$ count += pstmt.executeUpdate() [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_15 $$ pstmt.close() [CD]
Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_15 $$ pstmt.close() [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_16 $$ assertEquals(count, rowsToAdd) [CD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_16 $$ assertEquals(count, rowsToAdd) [FD]
Line_9 $$ int count = 0 --> Line_16 $$ assertEquals(count, rowsToAdd) [FD]
Line_7 $$ int rowsToAdd = 8 --> Line_16 $$ assertEquals(count, rowsToAdd) [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_17 $$ con.rollback() [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_18 $$ ResultSet rs = stmt.executeQuery("select s, i from #t0009") [CD]
Line_3 $$ Statement stmt = con.createStatement() --> Line_18 $$ ResultSet rs = stmt.executeQuery("select s, i from #t0009") [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_19 $$ assertNotNull(rs) [CD]
Line_18 $$ ResultSet rs = stmt.executeQuery("select s, i from #t0009") --> Line_19 $$ assertNotNull(rs) [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_20 $$ count = 0 [CD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_20 $$ count = 0 [FD]
Line_9 $$ int count = 0 --> Line_20 $$ count = 0 [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_21 $$ while (rs.next()) [CD]
Line_18 $$ ResultSet rs = stmt.executeQuery("select s, i from #t0009") --> Line_21 $$ while (rs.next()) [FD]
Line_21 $$ while (rs.next()) --> Line_22 $$ count++ [CD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_22 $$ count++ [FD]
Line_9 $$ int count = 0 --> Line_22 $$ count++ [FD]
Line_20 $$ count = 0 --> Line_22 $$ count++ [FD]
Line_21 $$ while (rs.next()) --> Line_23 $$ assertEquals(rs.getString(1).trim().length(), rs.getInt(2)) [CD]
Line_18 $$ ResultSet rs = stmt.executeQuery("select s, i from #t0009") --> Line_23 $$ assertEquals(rs.getString(1).trim().length(), rs.getInt(2)) [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_25 $$ assertEquals(count, 0) [CD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_25 $$ assertEquals(count, 0) [FD]
Line_9 $$ int count = 0 --> Line_25 $$ assertEquals(count, 0) [FD]
Line_20 $$ count = 0 --> Line_25 $$ assertEquals(count, 0) [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_26 $$ con.commit() [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_27 $$ pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") [CD]
Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_27 $$ pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_28 $$ rowsToAdd = 6 [CD]
Line_7 $$ int rowsToAdd = 8 --> Line_28 $$ rowsToAdd = 6 [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_29 $$ count = 0 [CD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_29 $$ count = 0 [FD]
Line_9 $$ int count = 0 --> Line_29 $$ count = 0 [FD]
Line_20 $$ count = 0 --> Line_29 $$ count = 0 [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_30 $$ for (int i = 1; i <= rowsToAdd; i++) [CD]
Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_30 $$ for (int i = 1; i <= rowsToAdd; i++) [FD]
Line_7 $$ int rowsToAdd = 8 --> Line_30 $$ for (int i = 1; i <= rowsToAdd; i++) [FD]
Line_28 $$ rowsToAdd = 6 --> Line_30 $$ for (int i = 1; i <= rowsToAdd; i++) [FD]
Line_30 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_31 $$ pstmt.setInt(1, i) [CD]
Line_30 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_31 $$ pstmt.setInt(1, i) [FD]
Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_31 $$ pstmt.setInt(1, i) [FD]
Line_27 $$ pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_31 $$ pstmt.setInt(1, i) [FD]
Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_31 $$ pstmt.setInt(1, i) [FD]
Line_30 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_32 $$ pstmt.setString(2, theString.substring(0, i)) [CD]
Line_30 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_32 $$ pstmt.setString(2, theString.substring(0, i)) [FD]
Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_32 $$ pstmt.setString(2, theString.substring(0, i)) [FD]
Line_27 $$ pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_32 $$ pstmt.setString(2, theString.substring(0, i)) [FD]
Line_8 $$ final String theString = "abcdefghijklmnopqrstuvwxyz" --> Line_32 $$ pstmt.setString(2, theString.substring(0, i)) [FD]
Line_10 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_32 $$ pstmt.setString(2, theString.substring(0, i)) [FD]
Line_30 $$ for (int i = 1; i <= rowsToAdd; i++) --> Line_33 $$ count += pstmt.executeUpdate() [CD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_33 $$ count += pstmt.executeUpdate() [FD]
Line_9 $$ int count = 0 --> Line_33 $$ count += pstmt.executeUpdate() [FD]
Line_20 $$ count = 0 --> Line_33 $$ count += pstmt.executeUpdate() [FD]
Line_29 $$ count = 0 --> Line_33 $$ count += pstmt.executeUpdate() [FD]
Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_33 $$ count += pstmt.executeUpdate() [FD]
Line_27 $$ pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_33 $$ count += pstmt.executeUpdate() [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_35 $$ assertEquals(count, rowsToAdd) [CD]
Line_33 $$ count += pstmt.executeUpdate() --> Line_35 $$ assertEquals(count, rowsToAdd) [FD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_35 $$ assertEquals(count, rowsToAdd) [FD]
Line_9 $$ int count = 0 --> Line_35 $$ assertEquals(count, rowsToAdd) [FD]
Line_20 $$ count = 0 --> Line_35 $$ assertEquals(count, rowsToAdd) [FD]
Line_29 $$ count = 0 --> Line_35 $$ assertEquals(count, rowsToAdd) [FD]
Line_7 $$ int rowsToAdd = 8 --> Line_35 $$ assertEquals(count, rowsToAdd) [FD]
Line_28 $$ rowsToAdd = 6 --> Line_35 $$ assertEquals(count, rowsToAdd) [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_36 $$ con.commit() [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_37 $$ pstmt.close() [CD]
Line_6 $$ PreparedStatement pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_37 $$ pstmt.close() [FD]
Line_27 $$ pstmt = con.prepareStatement("insert into #t0009 values (?, ?)") --> Line_37 $$ pstmt.close() [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_38 $$ rs = stmt.executeQuery("select s, i from #t0009") [CD]
Line_18 $$ ResultSet rs = stmt.executeQuery("select s, i from #t0009") --> Line_38 $$ rs = stmt.executeQuery("select s, i from #t0009") [FD]
Line_3 $$ Statement stmt = con.createStatement() --> Line_38 $$ rs = stmt.executeQuery("select s, i from #t0009") [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_39 $$ count = 0 [CD]
Line_33 $$ count += pstmt.executeUpdate() --> Line_39 $$ count = 0 [FD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_39 $$ count = 0 [FD]
Line_9 $$ int count = 0 --> Line_39 $$ count = 0 [FD]
Line_20 $$ count = 0 --> Line_39 $$ count = 0 [FD]
Line_29 $$ count = 0 --> Line_39 $$ count = 0 [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_40 $$ while (rs.next()) [CD]
Line_18 $$ ResultSet rs = stmt.executeQuery("select s, i from #t0009") --> Line_40 $$ while (rs.next()) [FD]
Line_38 $$ rs = stmt.executeQuery("select s, i from #t0009") --> Line_40 $$ while (rs.next()) [FD]
Line_40 $$ while (rs.next()) --> Line_41 $$ count++ [CD]
Line_33 $$ count += pstmt.executeUpdate() --> Line_41 $$ count++ [FD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_41 $$ count++ [FD]
Line_9 $$ int count = 0 --> Line_41 $$ count++ [FD]
Line_20 $$ count = 0 --> Line_41 $$ count++ [FD]
Line_29 $$ count = 0 --> Line_41 $$ count++ [FD]
Line_39 $$ count = 0 --> Line_41 $$ count++ [FD]
Line_40 $$ while (rs.next()) --> Line_42 $$ assertEquals(rs.getString(1).trim().length(), rs.getInt(2)) [CD]
Line_18 $$ ResultSet rs = stmt.executeQuery("select s, i from #t0009") --> Line_42 $$ assertEquals(rs.getString(1).trim().length(), rs.getInt(2)) [FD]
Line_38 $$ rs = stmt.executeQuery("select s, i from #t0009") --> Line_42 $$ assertEquals(rs.getString(1).trim().length(), rs.getInt(2)) [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_44 $$ assertEquals(count, rowsToAdd) [CD]
Line_33 $$ count += pstmt.executeUpdate() --> Line_44 $$ assertEquals(count, rowsToAdd) [FD]
Line_13 $$ count += pstmt.executeUpdate() --> Line_44 $$ assertEquals(count, rowsToAdd) [FD]
Line_9 $$ int count = 0 --> Line_44 $$ assertEquals(count, rowsToAdd) [FD]
Line_20 $$ count = 0 --> Line_44 $$ assertEquals(count, rowsToAdd) [FD]
Line_29 $$ count = 0 --> Line_44 $$ assertEquals(count, rowsToAdd) [FD]
Line_39 $$ count = 0 --> Line_44 $$ assertEquals(count, rowsToAdd) [FD]
Line_7 $$ int rowsToAdd = 8 --> Line_44 $$ assertEquals(count, rowsToAdd) [FD]
Line_28 $$ rowsToAdd = 6 --> Line_44 $$ assertEquals(count, rowsToAdd) [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_45 $$ con.commit() [CD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_46 $$ stmt.close() [CD]
Line_3 $$ Statement stmt = con.createStatement() --> Line_46 $$ stmt.close() [FD]
Line_2 $$ public void testPreparedStatement0009() throws Exception --> Line_47 $$ con.setAutoCommit(true) [CD]
