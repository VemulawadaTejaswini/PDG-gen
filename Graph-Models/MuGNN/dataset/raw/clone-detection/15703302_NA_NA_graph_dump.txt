Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_3 $$ GenericDAO<UserMapOriginal> dao = DAOFactory.createDAO(UserMapOriginal.class) [CD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_12 $$ if (mapOriginal == null) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_13 $$ if (UserMapOriginal.SubState.INPROC.equals(mapOriginal.getSubstate())) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_14 $$ if (UserMapOriginal.State.COMBINE.equals(mapOriginal.getState())) [FD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_15 $$ if (!"download".equals(mapSource) && !"upload".equals(mapSource) && !"current".equals(mapSource)) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_17 $$ mapOriginal.setSWLat(Double.parseDouble(south)) [FD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_17 $$ mapOriginal.setSWLat(Double.parseDouble(south)) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_22 $$ mapOriginal.setSWLon(Double.parseDouble(west)) [FD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_22 $$ mapOriginal.setSWLon(Double.parseDouble(west)) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_27 $$ mapOriginal.setNELat(Double.parseDouble(north)) [FD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_27 $$ mapOriginal.setNELat(Double.parseDouble(north)) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_32 $$ mapOriginal.setNELon(Double.parseDouble(east)) [FD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_32 $$ mapOriginal.setNELon(Double.parseDouble(east)) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_36 $$ mapOriginal.setState(UserMapOriginal.State.CALIBRATE) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_37 $$ mapOriginal.setSubstate(UserMapOriginal.SubState.INPROC) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_38 $$ final XFile mapStorage = new XFile(new XFile(Configuration.getInstance().getPrivateMapStorage().toString()), mapOriginal.getGuid()) [FD]
Line_38 $$ final XFile mapStorage = new XFile(new XFile(Configuration.getInstance().getPrivateMapStorage().toString()), mapOriginal.getGuid()) --> Line_39 $$ mapStorage.mkdir() [FD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_40 $$ if ("download".equals(mapSource)) [FD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_41 $$ final XFile tmpFile [CD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_42 $$ final URI uri = new URI(mapUrl) [CD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_43 $$ String query = (StringUtils.isEmpty(uri.getQuery())) ? "?BBOX=" : "&BBOX=" [CD]
Line_42 $$ final URI uri = new URI(mapUrl) --> Line_43 $$ String query = (StringUtils.isEmpty(uri.getQuery())) ? "?BBOX=" : "&BBOX=" [FD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_44 $$ query += west + "," + south + "," + east + "," + north [CD]
Line_43 $$ String query = (StringUtils.isEmpty(uri.getQuery())) ? "?BBOX=" : "&BBOX=" --> Line_44 $$ query += west + "," + south + "," + east + "," + north [FD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_44 $$ query += west + "," + south + "," + east + "," + north [FD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_45 $$ URLConnection con = (new URL(mapUrl + query)).openConnection() [CD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_46 $$ if (con == null || con.getContentLength() == 0) [CD]
Line_45 $$ URLConnection con = (new URL(mapUrl + query)).openConnection() --> Line_46 $$ if (con == null || con.getContentLength() == 0) [FD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_47 $$ if (!con.getContentType().startsWith("image/")) [CD]
Line_45 $$ URLConnection con = (new URL(mapUrl + query)).openConnection() --> Line_47 $$ if (!con.getContentType().startsWith("image/")) [FD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_48 $$ tmpFile = new XFile(mapStorage, mapOriginal.getGuid()) [CD]
Line_41 $$ final XFile tmpFile --> Line_48 $$ tmpFile = new XFile(mapStorage, mapOriginal.getGuid()) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_48 $$ tmpFile = new XFile(mapStorage, mapOriginal.getGuid()) [FD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_49 $$ XFileOutputStream out = new XFileOutputStream(tmpFile) [CD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_50 $$ IOUtils.copy(con.getInputStream(), out) [CD]
Line_49 $$ XFileOutputStream out = new XFileOutputStream(tmpFile) --> Line_50 $$ IOUtils.copy(con.getInputStream(), out) [FD]
Line_45 $$ URLConnection con = (new URL(mapUrl + query)).openConnection() --> Line_50 $$ IOUtils.copy(con.getInputStream(), out) [FD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_51 $$ out.flush() [CD]
Line_49 $$ XFileOutputStream out = new XFileOutputStream(tmpFile) --> Line_51 $$ out.flush() [FD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_52 $$ out.close() [CD]
Line_49 $$ XFileOutputStream out = new XFileOutputStream(tmpFile) --> Line_52 $$ out.close() [FD]
Line_40 $$ if ("download".equals(mapSource)) --> Line_53 $$ if ("upload".equals(mapSource)) [CD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_53 $$ if ("upload".equals(mapSource)) [FD]
Line_53 $$ if ("upload".equals(mapSource)) --> Line_55 $$ final FileItem file = uploadFile.iterator().next() [CD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_55 $$ final FileItem file = uploadFile.iterator().next() [FD]
Line_53 $$ if ("upload".equals(mapSource)) --> Line_56 $$ if (file == null || file.getSize() == 0) [CD]
Line_55 $$ final FileItem file = uploadFile.iterator().next() --> Line_56 $$ if (file == null || file.getSize() == 0) [FD]
Line_53 $$ if ("upload".equals(mapSource)) --> Line_57 $$ if (!file.getContentType().startsWith("image/")) [CD]
Line_55 $$ final FileItem file = uploadFile.iterator().next() --> Line_57 $$ if (!file.getContentType().startsWith("image/")) [FD]
Line_53 $$ if ("upload".equals(mapSource)) --> Line_58 $$ tmpFile = new XFile(mapStorage, mapOriginal.getGuid()) [CD]
Line_41 $$ final XFile tmpFile --> Line_58 $$ tmpFile = new XFile(mapStorage, mapOriginal.getGuid()) [FD]
Line_48 $$ tmpFile = new XFile(mapStorage, mapOriginal.getGuid()) --> Line_58 $$ tmpFile = new XFile(mapStorage, mapOriginal.getGuid()) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_58 $$ tmpFile = new XFile(mapStorage, mapOriginal.getGuid()) [FD]
Line_53 $$ if ("upload".equals(mapSource)) --> Line_60 $$ IOUtils.copy(file.getInputStream(), out) [CD]
Line_49 $$ XFileOutputStream out = new XFileOutputStream(tmpFile) --> Line_60 $$ IOUtils.copy(file.getInputStream(), out) [FD]
Line_55 $$ final FileItem file = uploadFile.iterator().next() --> Line_60 $$ IOUtils.copy(file.getInputStream(), out) [FD]
Line_53 $$ if ("upload".equals(mapSource)) --> Line_61 $$ out.flush() [CD]
Line_49 $$ XFileOutputStream out = new XFileOutputStream(tmpFile) --> Line_61 $$ out.flush() [FD]
Line_53 $$ if ("upload".equals(mapSource)) --> Line_62 $$ out.close() [CD]
Line_49 $$ XFileOutputStream out = new XFileOutputStream(tmpFile) --> Line_62 $$ out.close() [FD]
Line_53 $$ if ("upload".equals(mapSource)) --> Line_63 $$ if ("current".equals(mapSource)) [CD]
Line_2 $$ public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException --> Line_63 $$ if ("current".equals(mapSource)) [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_65 $$ dao.update(mapOriginal) [FD]
Line_68 $$ PoolClientInterface pool = PoolFactory.getInstance().getClientPool() --> Line_69 $$ if (pool == null) [FD]
Line_68 $$ PoolClientInterface pool = PoolFactory.getInstance().getClientPool() --> Line_70 $$ pool.put(mapOriginal, new StatesStack(new byte[] [FD]
Line_11 $$ final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq("guid", guid)) --> Line_70 $$ pool.put(mapOriginal, new StatesStack(new byte[] [FD]
