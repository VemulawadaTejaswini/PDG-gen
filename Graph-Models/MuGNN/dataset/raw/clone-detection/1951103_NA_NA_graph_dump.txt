Line_2 $$ private List<File> ungzipFile(File directory, File compressedFile) throws IOException --> Line_3 $$ List<File> files = new ArrayList<File>() [CD]
Line_2 $$ private List<File> ungzipFile(File directory, File compressedFile) throws IOException --> Line_4 $$ TarArchiveInputStream in = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(compressedFile))) [CD]
Line_4 $$ TarArchiveInputStream in = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(compressedFile))) --> Line_6 $$ TarArchiveEntry entry = in.getNextTarEntry() [FD]
Line_7 $$ while (entry != null) --> Line_8 $$ if (entry.isDirectory()) [CD]
Line_8 $$ if (entry.isDirectory()) --> Line_9 $$ log.warn("TAR archive contains directories which are being ignored") [CD]
Line_8 $$ if (entry.isDirectory()) --> Line_10 $$ entry = in.getNextTarEntry() [CD]
Line_4 $$ TarArchiveInputStream in = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(compressedFile))) --> Line_10 $$ entry = in.getNextTarEntry() [FD]
Line_7 $$ while (entry != null) --> Line_13 $$ String fn = new File(entry.getName()).getName() [CD]
Line_7 $$ while (entry != null) --> Line_14 $$ if (fn.startsWith(".")) [CD]
Line_13 $$ String fn = new File(entry.getName()).getName() --> Line_14 $$ if (fn.startsWith(".")) [FD]
Line_14 $$ if (fn.startsWith(".")) --> Line_15 $$ log.warn("TAR archive contains a hidden file which is being ignored") [CD]
Line_14 $$ if (fn.startsWith(".")) --> Line_16 $$ entry = in.getNextTarEntry() [CD]
Line_4 $$ TarArchiveInputStream in = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(compressedFile))) --> Line_16 $$ entry = in.getNextTarEntry() [FD]
Line_7 $$ while (entry != null) --> Line_19 $$ File targetFile = new File(directory, fn) [CD]
Line_7 $$ while (entry != null) --> Line_20 $$ if (targetFile.exists()) [CD]
Line_19 $$ File targetFile = new File(directory, fn) --> Line_20 $$ if (targetFile.exists()) [FD]
Line_20 $$ if (targetFile.exists()) --> Line_21 $$ log.warn("TAR archive contains duplicate filenames, only the first is being extracted") [CD]
Line_20 $$ if (targetFile.exists()) --> Line_22 $$ entry = in.getNextTarEntry() [CD]
Line_4 $$ TarArchiveInputStream in = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(compressedFile))) --> Line_22 $$ entry = in.getNextTarEntry() [FD]
Line_7 $$ while (entry != null) --> Line_25 $$ files.add(targetFile) [CD]
Line_3 $$ List<File> files = new ArrayList<File>() --> Line_25 $$ files.add(targetFile) [FD]
Line_19 $$ File targetFile = new File(directory, fn) --> Line_25 $$ files.add(targetFile) [FD]
Line_7 $$ while (entry != null) --> Line_26 $$ log.debug("Extracting file: " + entry.getName() + " to: " + targetFile.getAbsolutePath()) [CD]
Line_19 $$ File targetFile = new File(directory, fn) --> Line_26 $$ log.debug("Extracting file: " + entry.getName() + " to: " + targetFile.getAbsolutePath()) [FD]
Line_7 $$ while (entry != null) --> Line_27 $$ OutputStream fout = new BufferedOutputStream(new FileOutputStream(targetFile)) [CD]
Line_7 $$ while (entry != null) --> Line_28 $$ InputStream entryIn = new FileInputStream(entry.getFile()) [CD]
Line_7 $$ while (entry != null) --> Line_29 $$ IOUtils.copy(entryIn, fout) [CD]
Line_28 $$ InputStream entryIn = new FileInputStream(entry.getFile()) --> Line_29 $$ IOUtils.copy(entryIn, fout) [FD]
Line_27 $$ OutputStream fout = new BufferedOutputStream(new FileOutputStream(targetFile)) --> Line_29 $$ IOUtils.copy(entryIn, fout) [FD]
Line_7 $$ while (entry != null) --> Line_30 $$ fout.close() [CD]
Line_27 $$ OutputStream fout = new BufferedOutputStream(new FileOutputStream(targetFile)) --> Line_30 $$ fout.close() [FD]
Line_7 $$ while (entry != null) --> Line_31 $$ entryIn.close() [CD]
Line_28 $$ InputStream entryIn = new FileInputStream(entry.getFile()) --> Line_31 $$ entryIn.close() [FD]
Line_4 $$ TarArchiveInputStream in = new TarArchiveInputStream(new GZIPInputStream(new FileInputStream(compressedFile))) --> Line_34 $$ in.close() [FD]
Line_2 $$ private List<File> ungzipFile(File directory, File compressedFile) throws IOException --> Line_36 $$ return files [CD]
