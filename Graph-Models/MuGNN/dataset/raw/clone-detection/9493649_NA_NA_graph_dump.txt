Line_2 $$ public boolean loadFile(String inpfile) --> Line_3 $$ if (osmlContainer == null) [CD]
Line_2 $$ public boolean loadFile(String inpfile) --> Line_4 $$ hApdx.clear() [CD]
Line_2 $$ public boolean loadFile(String inpfile) --> Line_7 $$ if (inpfile.indexOf("http://") >= 0) [FD]
Line_7 $$ if (inpfile.indexOf("http://") >= 0) --> Line_8 $$ URL url = null [CD]
Line_7 $$ if (inpfile.indexOf("http://") >= 0) --> Line_9 $$ url = new URL(inpfile) [CD]
Line_8 $$ URL url = null --> Line_9 $$ url = new URL(inpfile) [FD]
Line_7 $$ if (inpfile.indexOf("http://") >= 0) --> Line_10 $$ URLConnection conn = url.openConnection() [CD]
Line_8 $$ URL url = null --> Line_10 $$ URLConnection conn = url.openConnection() [FD]
Line_9 $$ url = new URL(inpfile) --> Line_10 $$ URLConnection conn = url.openConnection() [FD]
Line_7 $$ if (inpfile.indexOf("http://") >= 0) --> Line_11 $$ conn.setUseCaches(false) [CD]
Line_10 $$ URLConnection conn = url.openConnection() --> Line_11 $$ conn.setUseCaches(false) [FD]
Line_7 $$ if (inpfile.indexOf("http://") >= 0) --> Line_12 $$ InputStreamReader is = new InputStreamReader(conn.getInputStream()) [CD]
Line_10 $$ URLConnection conn = url.openConnection() --> Line_12 $$ InputStreamReader is = new InputStreamReader(conn.getInputStream()) [FD]
Line_7 $$ if (inpfile.indexOf("http://") >= 0) --> Line_13 $$ in = new BufferedReader(is) [CD]
Line_6 $$ BufferedReader in = null --> Line_13 $$ in = new BufferedReader(is) [FD]
Line_7 $$ if (inpfile.indexOf("http://") >= 0) --> Line_15 $$ in = new BufferedReader(new FileReader(inpfile)) [CD]
Line_6 $$ BufferedReader in = null --> Line_15 $$ in = new BufferedReader(new FileReader(inpfile)) [FD]
Line_13 $$ in = new BufferedReader(is) --> Line_15 $$ in = new BufferedReader(new FileReader(inpfile)) [FD]
Line_17 $$ String pline = null --> Line_18 $$ while ((pline = in.readLine()) != null) [FD]
Line_6 $$ BufferedReader in = null --> Line_18 $$ while ((pline = in.readLine()) != null) [FD]
Line_13 $$ in = new BufferedReader(is) --> Line_18 $$ while ((pline = in.readLine()) != null) [FD]
Line_15 $$ in = new BufferedReader(new FileReader(inpfile)) --> Line_18 $$ while ((pline = in.readLine()) != null) [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_19 $$ StringTokenizer tok = new StringTokenizer(pline, "\t\n\r") [CD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_20 $$ if (tok.countTokens() < 2) [CD]
Line_19 $$ StringTokenizer tok = new StringTokenizer(pline, "\t\n\r") --> Line_20 $$ if (tok.countTokens() < 2) [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_21 $$ String name = tok.nextToken() [CD]
Line_19 $$ StringTokenizer tok = new StringTokenizer(pline, "\t\n\r") --> Line_21 $$ String name = tok.nextToken() [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_22 $$ String apdx = tok.nextToken() [CD]
Line_19 $$ StringTokenizer tok = new StringTokenizer(pline, "\t\n\r") --> Line_22 $$ String apdx = tok.nextToken() [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_23 $$ String note = "" [CD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_24 $$ if (tok.countTokens() > 0) [CD]
Line_19 $$ StringTokenizer tok = new StringTokenizer(pline, "\t\n\r") --> Line_24 $$ if (tok.countTokens() > 0) [FD]
Line_23 $$ String note = "" --> Line_24 $$ if (tok.countTokens() > 0) [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_25 $$ if (name.length() == 0 || apdx.length() == 0) [CD]
Line_21 $$ String name = tok.nextToken() --> Line_25 $$ if (name.length() == 0 || apdx.length() == 0) [FD]
Line_22 $$ String apdx = tok.nextToken() --> Line_25 $$ if (name.length() == 0 || apdx.length() == 0) [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_26 $$ OmicElementContainer element = (OmicElementContainer) OmicElementContainer.createContainer() [CD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_27 $$ element.setName(name) [CD]
Line_26 $$ OmicElementContainer element = (OmicElementContainer) OmicElementContainer.createContainer() --> Line_27 $$ element.setName(name) [FD]
Line_21 $$ String name = tok.nextToken() --> Line_27 $$ element.setName(name) [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_28 $$ element.setNote(note) [CD]
Line_26 $$ OmicElementContainer element = (OmicElementContainer) OmicElementContainer.createContainer() --> Line_28 $$ element.setNote(note) [FD]
Line_23 $$ String note = "" --> Line_28 $$ element.setNote(note) [FD]
Line_24 $$ if (tok.countTokens() > 0) --> Line_28 $$ element.setNote(note) [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_29 $$ element.addAppendix(apdx) [CD]
Line_26 $$ OmicElementContainer element = (OmicElementContainer) OmicElementContainer.createContainer() --> Line_29 $$ element.addAppendix(apdx) [FD]
Line_22 $$ String apdx = tok.nextToken() --> Line_29 $$ element.addAppendix(apdx) [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_30 $$ String keys[] = commaPattern.split(apdx) [CD]
Line_22 $$ String apdx = tok.nextToken() --> Line_30 $$ String keys[] = commaPattern.split(apdx) [FD]
Line_18 $$ while ((pline = in.readLine()) != null) --> Line_31 $$ for (int j = 0; j < keys.length; j++) [CD]
Line_31 $$ for (int j = 0; j < keys.length; j++) --> Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) [CD]
Line_31 $$ for (int j = 0; j < keys.length; j++) --> Line_33 $$ v = new ArrayList() [CD]
Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) --> Line_33 $$ v = new ArrayList() [FD]
Line_31 $$ for (int j = 0; j < keys.length; j++) --> Line_34 $$ v.add(element) [CD]
Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) --> Line_34 $$ v.add(element) [FD]
Line_33 $$ v = new ArrayList() --> Line_34 $$ v.add(element) [FD]
Line_26 $$ OmicElementContainer element = (OmicElementContainer) OmicElementContainer.createContainer() --> Line_34 $$ v.add(element) [FD]
Line_31 $$ for (int j = 0; j < keys.length; j++) --> Line_35 $$ hApdx.put(keys[j], v) [CD]
Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) --> Line_35 $$ hApdx.put(keys[j], v) [FD]
Line_33 $$ v = new ArrayList() --> Line_35 $$ hApdx.put(keys[j], v) [FD]
Line_6 $$ BufferedReader in = null --> Line_38 $$ in.close() [FD]
Line_13 $$ in = new BufferedReader(is) --> Line_38 $$ in.close() [FD]
Line_15 $$ in = new BufferedReader(new FileReader(inpfile)) --> Line_38 $$ in.close() [FD]
Line_2 $$ public boolean loadFile(String inpfile) --> Line_46 $$ System.out.println("appendix name list size " + hApdx.size()) [CD]
Line_2 $$ public boolean loadFile(String inpfile) --> Line_47 $$ if (bElementDirected) [CD]
Line_47 $$ if (bElementDirected) --> Line_48 $$ int nCount = 0 [CD]
Line_47 $$ if (bElementDirected) --> Line_49 $$ ArrayList<OmicElementContainer> omicElementList = osmlContainer.getAllOmicElementContainers() [CD]
Line_26 $$ OmicElementContainer element = (OmicElementContainer) OmicElementContainer.createContainer() --> Line_51 $$ String name = element.getName() [FD]
Line_50 $$ for (OmicElementContainer element : omicElementList) --> Line_51 $$ String name = element.getName() [FD]
Line_26 $$ OmicElementContainer element = (OmicElementContainer) OmicElementContainer.createContainer() --> Line_52 $$ String apdx = element.getAppendix() [FD]
Line_50 $$ for (OmicElementContainer element : omicElementList) --> Line_52 $$ String apdx = element.getAppendix() [FD]
Line_21 $$ String name = tok.nextToken() --> Line_53 $$ if (name.length() == 0) [FD]
Line_51 $$ String name = element.getName() --> Line_53 $$ if (name.length() == 0) [FD]
Line_21 $$ String name = tok.nextToken() --> Line_54 $$ String names[] = commaPattern.split(name) [FD]
Line_51 $$ String name = element.getName() --> Line_54 $$ String names[] = commaPattern.split(name) [FD]
Line_22 $$ String apdx = tok.nextToken() --> Line_55 $$ String apdxs[] = commaPattern.split(apdx) [FD]
Line_52 $$ String apdx = element.getAppendix() --> Line_55 $$ String apdxs[] = commaPattern.split(apdx) [FD]
Line_31 $$ for (int j = 0; j < keys.length; j++) --> Line_57 $$ for (int j = 0; j < names.length; j++) list[j] = names[j] [FD]
Line_57 $$ for (int j = 0; j < names.length; j++) list[j] = names[j] --> Line_58 $$ for (int j = 0; j < apdxs.length; j++) list[j + names.length] = apdxs[j] [FD]
Line_31 $$ for (int j = 0; j < keys.length; j++) --> Line_58 $$ for (int j = 0; j < apdxs.length; j++) list[j + names.length] = apdxs[j] [FD]
Line_58 $$ for (int j = 0; j < apdxs.length; j++) list[j + names.length] = apdxs[j] --> Line_59 $$ for (int j = 0; j < list.length; j++) [FD]
Line_57 $$ for (int j = 0; j < names.length; j++) list[j] = names[j] --> Line_59 $$ for (int j = 0; j < list.length; j++) [FD]
Line_31 $$ for (int j = 0; j < keys.length; j++) --> Line_59 $$ for (int j = 0; j < list.length; j++) [FD]
Line_59 $$ for (int j = 0; j < list.length; j++) --> Line_60 $$ ArrayList v = (ArrayList) hApdx.get(list[j]) [CD]
Line_59 $$ for (int j = 0; j < list.length; j++) --> Line_61 $$ if (v == null) [CD]
Line_60 $$ ArrayList v = (ArrayList) hApdx.get(list[j]) --> Line_61 $$ if (v == null) [FD]
Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) --> Line_61 $$ if (v == null) [FD]
Line_33 $$ v = new ArrayList() --> Line_61 $$ if (v == null) [FD]
Line_59 $$ for (int j = 0; j < list.length; j++) --> Line_62 $$ for (int k = 0; k < v.size(); k++) [CD]
Line_60 $$ ArrayList v = (ArrayList) hApdx.get(list[j]) --> Line_62 $$ for (int k = 0; k < v.size(); k++) [FD]
Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) --> Line_62 $$ for (int k = 0; k < v.size(); k++) [FD]
Line_33 $$ v = new ArrayList() --> Line_62 $$ for (int k = 0; k < v.size(); k++) [FD]
Line_62 $$ for (int k = 0; k < v.size(); k++) --> Line_63 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [CD]
Line_62 $$ for (int k = 0; k < v.size(); k++) --> Line_63 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_60 $$ ArrayList v = (ArrayList) hApdx.get(list[j]) --> Line_63 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) --> Line_63 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_33 $$ v = new ArrayList() --> Line_63 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_62 $$ for (int k = 0; k < v.size(); k++) --> Line_64 $$ element.addAppendix(appendix.getName()) [CD]
Line_26 $$ OmicElementContainer element = (OmicElementContainer) OmicElementContainer.createContainer() --> Line_64 $$ element.addAppendix(appendix.getName()) [FD]
Line_50 $$ for (OmicElementContainer element : omicElementList) --> Line_64 $$ element.addAppendix(appendix.getName()) [FD]
Line_63 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) --> Line_64 $$ element.addAppendix(appendix.getName()) [FD]
Line_62 $$ for (int k = 0; k < v.size(); k++) --> Line_65 $$ nCount++ [CD]
Line_48 $$ int nCount = 0 --> Line_65 $$ nCount++ [FD]
Line_47 $$ if (bElementDirected) --> Line_69 $$ System.out.println("match appendix element " + nCount + " items") [CD]
Line_2 $$ public boolean loadFile(String inpfile) --> Line_71 $$ if (bFunctionDirected) [CD]
Line_71 $$ if (bFunctionDirected) --> Line_73 $$ FunctionalClassContainer functions[] = osmlContainer.getFunctionalClassContainer("[@container=all]") [CD]
Line_71 $$ if (bFunctionDirected) --> Line_74 $$ ArrayList vFunction = new ArrayList() [CD]
Line_71 $$ if (bFunctionDirected) --> Line_75 $$ for (int i = 0; i < functions.length; i++) [CD]
Line_75 $$ for (int i = 0; i < functions.length; i++) --> Line_76 $$ if (!vFunction.contains(functions[i])) [CD]
Line_74 $$ ArrayList vFunction = new ArrayList() --> Line_76 $$ if (!vFunction.contains(functions[i])) [FD]
Line_71 $$ if (bFunctionDirected) --> Line_78 $$ for (int i = 0; i < vFunction.size(); i++) [CD]
Line_75 $$ for (int i = 0; i < functions.length; i++) --> Line_78 $$ for (int i = 0; i < vFunction.size(); i++) [FD]
Line_74 $$ ArrayList vFunction = new ArrayList() --> Line_78 $$ for (int i = 0; i < vFunction.size(); i++) [FD]
Line_78 $$ for (int i = 0; i < vFunction.size(); i++) --> Line_79 $$ FunctionalClassContainer function = (FunctionalClassContainer) vFunction.get(i) [CD]
Line_78 $$ for (int i = 0; i < vFunction.size(); i++) --> Line_79 $$ FunctionalClassContainer function = (FunctionalClassContainer) vFunction.get(i) [FD]
Line_74 $$ ArrayList vFunction = new ArrayList() --> Line_79 $$ FunctionalClassContainer function = (FunctionalClassContainer) vFunction.get(i) [FD]
Line_75 $$ for (int i = 0; i < functions.length; i++) --> Line_79 $$ FunctionalClassContainer function = (FunctionalClassContainer) vFunction.get(i) [FD]
Line_78 $$ for (int i = 0; i < vFunction.size(); i++) --> Line_80 $$ String name = function.getName() [CD]
Line_79 $$ FunctionalClassContainer function = (FunctionalClassContainer) vFunction.get(i) --> Line_80 $$ String name = function.getName() [FD]
Line_78 $$ for (int i = 0; i < vFunction.size(); i++) --> Line_81 $$ if (name.length() == 0) [CD]
Line_80 $$ String name = function.getName() --> Line_81 $$ if (name.length() == 0) [FD]
Line_21 $$ String name = tok.nextToken() --> Line_81 $$ if (name.length() == 0) [FD]
Line_51 $$ String name = element.getName() --> Line_81 $$ if (name.length() == 0) [FD]
Line_78 $$ for (int i = 0; i < vFunction.size(); i++) --> Line_82 $$ String names[] = name.split(",") [CD]
Line_80 $$ String name = function.getName() --> Line_82 $$ String names[] = name.split(",") [FD]
Line_21 $$ String name = tok.nextToken() --> Line_82 $$ String names[] = name.split(",") [FD]
Line_51 $$ String name = element.getName() --> Line_82 $$ String names[] = name.split(",") [FD]
Line_78 $$ for (int i = 0; i < vFunction.size(); i++) --> Line_83 $$ for (int j = 0; j < names.length; j++) [CD]
Line_59 $$ for (int j = 0; j < list.length; j++) --> Line_83 $$ for (int j = 0; j < names.length; j++) [FD]
Line_58 $$ for (int j = 0; j < apdxs.length; j++) list[j + names.length] = apdxs[j] --> Line_83 $$ for (int j = 0; j < names.length; j++) [FD]
Line_57 $$ for (int j = 0; j < names.length; j++) list[j] = names[j] --> Line_83 $$ for (int j = 0; j < names.length; j++) [FD]
Line_31 $$ for (int j = 0; j < keys.length; j++) --> Line_83 $$ for (int j = 0; j < names.length; j++) [FD]
Line_83 $$ for (int j = 0; j < names.length; j++) --> Line_84 $$ ArrayList v = (ArrayList) hApdx.get(names[j]) [CD]
Line_83 $$ for (int j = 0; j < names.length; j++) --> Line_85 $$ if (v == null) [CD]
Line_84 $$ ArrayList v = (ArrayList) hApdx.get(names[j]) --> Line_85 $$ if (v == null) [FD]
Line_60 $$ ArrayList v = (ArrayList) hApdx.get(list[j]) --> Line_85 $$ if (v == null) [FD]
Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) --> Line_85 $$ if (v == null) [FD]
Line_33 $$ v = new ArrayList() --> Line_85 $$ if (v == null) [FD]
Line_83 $$ for (int j = 0; j < names.length; j++) --> Line_86 $$ for (int k = 0; k < v.size(); k++) [CD]
Line_62 $$ for (int k = 0; k < v.size(); k++) --> Line_86 $$ for (int k = 0; k < v.size(); k++) [FD]
Line_84 $$ ArrayList v = (ArrayList) hApdx.get(names[j]) --> Line_86 $$ for (int k = 0; k < v.size(); k++) [FD]
Line_60 $$ ArrayList v = (ArrayList) hApdx.get(list[j]) --> Line_86 $$ for (int k = 0; k < v.size(); k++) [FD]
Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) --> Line_86 $$ for (int k = 0; k < v.size(); k++) [FD]
Line_33 $$ v = new ArrayList() --> Line_86 $$ for (int k = 0; k < v.size(); k++) [FD]
Line_86 $$ for (int k = 0; k < v.size(); k++) --> Line_87 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [CD]
Line_86 $$ for (int k = 0; k < v.size(); k++) --> Line_87 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_84 $$ ArrayList v = (ArrayList) hApdx.get(names[j]) --> Line_87 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_60 $$ ArrayList v = (ArrayList) hApdx.get(list[j]) --> Line_87 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_32 $$ ArrayList v = (ArrayList) hApdx.get(keys[j]) --> Line_87 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_33 $$ v = new ArrayList() --> Line_87 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_62 $$ for (int k = 0; k < v.size(); k++) --> Line_87 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) [FD]
Line_86 $$ for (int k = 0; k < v.size(); k++) --> Line_88 $$ functions[i].addOmicElementContainer(appendix) [CD]
Line_87 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) --> Line_88 $$ functions[i].addOmicElementContainer(appendix) [FD]
Line_63 $$ OmicElementContainer appendix = (OmicElementContainer) v.get(k) --> Line_88 $$ functions[i].addOmicElementContainer(appendix) [FD]
Line_86 $$ for (int k = 0; k < v.size(); k++) --> Line_89 $$ nCount++ [CD]
Line_48 $$ int nCount = 0 --> Line_89 $$ nCount++ [FD]
Line_71 $$ if (bFunctionDirected) --> Line_93 $$ System.out.println("match appendix function " + nCount + " items") [CD]
Line_2 $$ public boolean loadFile(String inpfile) --> Line_95 $$ return true [CD]
