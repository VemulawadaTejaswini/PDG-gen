Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_3 $$ if (target_length == 0) [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_3 $$ if (target_length == 0) [FD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_4 $$ if (todir == null) [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_4 $$ if (todir == null) [FD]
Line_4 $$ if (todir == null) --> Line_5 $$ todir = new File(System.getProperty("java.io.tmpdir")) [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_5 $$ todir = new File(System.getProperty("java.io.tmpdir")) [FD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_7 $$ if (prefix == null || prefix.equals("")) [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_7 $$ if (prefix == null || prefix.equals("")) [FD]
Line_7 $$ if (prefix == null || prefix.equals("")) --> Line_8 $$ prefix = source.getName() [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_8 $$ prefix = source.getName() [FD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_10 $$ Vector result = new Vector() [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_11 $$ FileOutputStream fos = null [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_12 $$ FileInputStream fis = null [CD]
Line_12 $$ FileInputStream fis = null --> Line_14 $$ fis = new FileInputStream(source) [FD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_21 $$ if (!validator.verifyFile(f)) [FD]
Line_20 $$ File f = new File(todir, prefix + i18n.getString("targetname_suffix") + current_target_nb) --> Line_21 $$ if (!validator.verifyFile(f)) [FD]
Line_10 $$ Vector result = new Vector() --> Line_22 $$ result.add(f) [FD]
Line_20 $$ File f = new File(todir, prefix + i18n.getString("targetname_suffix") + current_target_nb) --> Line_22 $$ result.add(f) [FD]
Line_11 $$ FileOutputStream fos = null --> Line_23 $$ fos = new FileOutputStream(f) [FD]
Line_18 $$ int nbread = -1 --> Line_24 $$ while ((nbread = fis.read(bytes)) > -1) [FD]
Line_12 $$ FileInputStream fis = null --> Line_24 $$ while ((nbread = fis.read(bytes)) > -1) [FD]
Line_14 $$ fis = new FileInputStream(source) --> Line_24 $$ while ((nbread = fis.read(bytes)) > -1) [FD]
Line_15 $$ byte[] bytes = new byte[CACHE_SIZE] --> Line_24 $$ while ((nbread = fis.read(bytes)) > -1) [FD]
Line_24 $$ while ((nbread = fis.read(bytes)) > -1) --> Line_25 $$ if ((current_target_size + nbread) > target_length) [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_25 $$ if ((current_target_size + nbread) > target_length) [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_26 $$ int limit = (int) (target_length - current_target_size) [CD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_27 $$ fos.write(bytes, 0, limit) [CD]
Line_11 $$ FileOutputStream fos = null --> Line_27 $$ fos.write(bytes, 0, limit) [FD]
Line_23 $$ fos = new FileOutputStream(f) --> Line_27 $$ fos.write(bytes, 0, limit) [FD]
Line_15 $$ byte[] bytes = new byte[CACHE_SIZE] --> Line_27 $$ fos.write(bytes, 0, limit) [FD]
Line_26 $$ int limit = (int) (target_length - current_target_size) --> Line_27 $$ fos.write(bytes, 0, limit) [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_28 $$ fos.close() [CD]
Line_11 $$ FileOutputStream fos = null --> Line_28 $$ fos.close() [FD]
Line_23 $$ fos = new FileOutputStream(f) --> Line_28 $$ fos.close() [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_29 $$ current_target_nb++ [CD]
Line_17 $$ int current_target_nb = 1 --> Line_29 $$ current_target_nb++ [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_30 $$ current_target_size = 0 [CD]
Line_16 $$ long current_target_size = 0 --> Line_30 $$ current_target_size = 0 [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_31 $$ f = new File(todir, prefix + "_" + current_target_nb) [CD]
Line_20 $$ File f = new File(todir, prefix + i18n.getString("targetname_suffix") + current_target_nb) --> Line_31 $$ f = new File(todir, prefix + "_" + current_target_nb) [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_32 $$ if (!validator.verifyFile(f)) [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_32 $$ if (!validator.verifyFile(f)) [FD]
Line_31 $$ f = new File(todir, prefix + "_" + current_target_nb) --> Line_32 $$ if (!validator.verifyFile(f)) [FD]
Line_20 $$ File f = new File(todir, prefix + i18n.getString("targetname_suffix") + current_target_nb) --> Line_32 $$ if (!validator.verifyFile(f)) [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_33 $$ result.add(f) [CD]
Line_10 $$ Vector result = new Vector() --> Line_33 $$ result.add(f) [FD]
Line_31 $$ f = new File(todir, prefix + "_" + current_target_nb) --> Line_33 $$ result.add(f) [FD]
Line_20 $$ File f = new File(todir, prefix + i18n.getString("targetname_suffix") + current_target_nb) --> Line_33 $$ result.add(f) [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_34 $$ fos = new FileOutputStream(f) [CD]
Line_11 $$ FileOutputStream fos = null --> Line_34 $$ fos = new FileOutputStream(f) [FD]
Line_23 $$ fos = new FileOutputStream(f) --> Line_34 $$ fos = new FileOutputStream(f) [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_35 $$ fos.write(bytes, limit, nbread - limit) [CD]
Line_34 $$ fos = new FileOutputStream(f) --> Line_35 $$ fos.write(bytes, limit, nbread - limit) [FD]
Line_11 $$ FileOutputStream fos = null --> Line_35 $$ fos.write(bytes, limit, nbread - limit) [FD]
Line_23 $$ fos = new FileOutputStream(f) --> Line_35 $$ fos.write(bytes, limit, nbread - limit) [FD]
Line_15 $$ byte[] bytes = new byte[CACHE_SIZE] --> Line_35 $$ fos.write(bytes, limit, nbread - limit) [FD]
Line_26 $$ int limit = (int) (target_length - current_target_size) --> Line_35 $$ fos.write(bytes, limit, nbread - limit) [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_36 $$ current_target_size += nbread - limit [CD]
Line_30 $$ current_target_size = 0 --> Line_36 $$ current_target_size += nbread - limit [FD]
Line_16 $$ long current_target_size = 0 --> Line_36 $$ current_target_size += nbread - limit [FD]
Line_24 $$ while ((nbread = fis.read(bytes)) > -1) --> Line_36 $$ current_target_size += nbread - limit [FD]
Line_18 $$ int nbread = -1 --> Line_36 $$ current_target_size += nbread - limit [FD]
Line_26 $$ int limit = (int) (target_length - current_target_size) --> Line_36 $$ current_target_size += nbread - limit [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_38 $$ fos.write(bytes, 0, nbread) [CD]
Line_34 $$ fos = new FileOutputStream(f) --> Line_38 $$ fos.write(bytes, 0, nbread) [FD]
Line_11 $$ FileOutputStream fos = null --> Line_38 $$ fos.write(bytes, 0, nbread) [FD]
Line_23 $$ fos = new FileOutputStream(f) --> Line_38 $$ fos.write(bytes, 0, nbread) [FD]
Line_15 $$ byte[] bytes = new byte[CACHE_SIZE] --> Line_38 $$ fos.write(bytes, 0, nbread) [FD]
Line_24 $$ while ((nbread = fis.read(bytes)) > -1) --> Line_38 $$ fos.write(bytes, 0, nbread) [FD]
Line_18 $$ int nbread = -1 --> Line_38 $$ fos.write(bytes, 0, nbread) [FD]
Line_25 $$ if ((current_target_size + nbread) > target_length) --> Line_39 $$ current_target_size += nbread [CD]
Line_30 $$ current_target_size = 0 --> Line_39 $$ current_target_size += nbread [FD]
Line_36 $$ current_target_size += nbread - limit --> Line_39 $$ current_target_size += nbread [FD]
Line_16 $$ long current_target_size = 0 --> Line_39 $$ current_target_size += nbread [FD]
Line_24 $$ while ((nbread = fis.read(bytes)) > -1) --> Line_39 $$ current_target_size += nbread [FD]
Line_18 $$ int nbread = -1 --> Line_39 $$ current_target_size += nbread [FD]
Line_34 $$ fos = new FileOutputStream(f) --> Line_46 $$ if (fos != null) [FD]
Line_11 $$ FileOutputStream fos = null --> Line_46 $$ if (fos != null) [FD]
Line_23 $$ fos = new FileOutputStream(f) --> Line_46 $$ if (fos != null) [FD]
Line_12 $$ FileInputStream fis = null --> Line_50 $$ if (fis != null) [FD]
Line_14 $$ fis = new FileInputStream(source) --> Line_50 $$ if (fis != null) [FD]
Line_34 $$ fos = new FileOutputStream(f) --> Line_58 $$ if (fos != null) [FD]
Line_11 $$ FileOutputStream fos = null --> Line_58 $$ if (fos != null) [FD]
Line_23 $$ fos = new FileOutputStream(f) --> Line_58 $$ if (fos != null) [FD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_62 $$ File[] fresult = null [CD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_63 $$ if (result.size() > 0) [CD]
Line_10 $$ Vector result = new Vector() --> Line_63 $$ if (result.size() > 0) [FD]
Line_63 $$ if (result.size() > 0) --> Line_64 $$ fresult = new File[result.size()] [CD]
Line_62 $$ File[] fresult = null --> Line_64 $$ fresult = new File[result.size()] [FD]
Line_10 $$ Vector result = new Vector() --> Line_64 $$ fresult = new File[result.size()] [FD]
Line_63 $$ if (result.size() > 0) --> Line_65 $$ fresult = (File[]) result.toArray(fresult) [CD]
Line_62 $$ File[] fresult = null --> Line_65 $$ fresult = (File[]) result.toArray(fresult) [FD]
Line_64 $$ fresult = new File[result.size()] --> Line_65 $$ fresult = (File[]) result.toArray(fresult) [FD]
Line_10 $$ Vector result = new Vector() --> Line_65 $$ fresult = (File[]) result.toArray(fresult) [FD]
Line_2 $$ public static File[] splitFile(FileValidator validator, File source, long target_length, File todir, String prefix) --> Line_67 $$ return fresult [CD]
Line_34 $$ fos = new FileOutputStream(f) --> Line_27 $$ fos.write(bytes, 0, limit) [FD]
Line_34 $$ fos = new FileOutputStream(f) --> Line_28 $$ fos.close() [FD]
