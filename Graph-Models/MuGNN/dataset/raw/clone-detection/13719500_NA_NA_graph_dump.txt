Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_3 $$ throw new SshException("%s: unexpected %s", this.connection.uri, msg.getType()) [CD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_3 $$ throw new SshException("%s: unexpected %s", this.connection.uri, msg.getType()) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_4 $$ final BigInteger k [CD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_6 $$ final DHPublicKeySpec remoteKeySpec = new DHPublicKeySpec(new BigInteger(msg.f), P1, G) [CD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_7 $$ final KeyFactory dhKeyFact = KeyFactory.getInstance("DH") [CD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_8 $$ final DHPublicKey remotePubKey = (DHPublicKey) dhKeyFact.generatePublic(remoteKeySpec) [CD]
Line_7 $$ final KeyFactory dhKeyFact = KeyFactory.getInstance("DH") --> Line_8 $$ final DHPublicKey remotePubKey = (DHPublicKey) dhKeyFact.generatePublic(remoteKeySpec) [FD]
Line_6 $$ final DHPublicKeySpec remoteKeySpec = new DHPublicKeySpec(new BigInteger(msg.f), P1, G) --> Line_8 $$ final DHPublicKey remotePubKey = (DHPublicKey) dhKeyFact.generatePublic(remoteKeySpec) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_9 $$ final KeyAgreement dhKex = KeyAgreement.getInstance("DH") [CD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_10 $$ dhKex.init(this.keyPair.getPrivate()) [CD]
Line_9 $$ final KeyAgreement dhKex = KeyAgreement.getInstance("DH") --> Line_10 $$ dhKex.init(this.keyPair.getPrivate()) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_11 $$ dhKex.doPhase(remotePubKey, true) [CD]
Line_9 $$ final KeyAgreement dhKex = KeyAgreement.getInstance("DH") --> Line_11 $$ dhKex.doPhase(remotePubKey, true) [FD]
Line_8 $$ final DHPublicKey remotePubKey = (DHPublicKey) dhKeyFact.generatePublic(remoteKeySpec) --> Line_11 $$ dhKex.doPhase(remotePubKey, true) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_12 $$ k = new BigInteger(dhKex.generateSecret()) [CD]
Line_4 $$ final BigInteger k --> Line_12 $$ k = new BigInteger(dhKex.generateSecret()) [FD]
Line_9 $$ final KeyAgreement dhKex = KeyAgreement.getInstance("DH") --> Line_12 $$ k = new BigInteger(dhKex.generateSecret()) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_14 $$ final MessageDigest md = createMessageDigest() [CD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_15 $$ final byte[] h [CD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_17 $$ updateByteArray(md, SshVersion.LOCAL.toString().getBytes()) [CD]
Line_14 $$ final MessageDigest md = createMessageDigest() --> Line_17 $$ updateByteArray(md, SshVersion.LOCAL.toString().getBytes()) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_18 $$ updateByteArray(md, this.connection.getRemoteSshVersion().toString().getBytes()) [CD]
Line_14 $$ final MessageDigest md = createMessageDigest() --> Line_18 $$ updateByteArray(md, this.connection.getRemoteSshVersion().toString().getBytes()) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_19 $$ updateByteArray(md, this.keyExchangeInitLocal.getPayload()) [CD]
Line_14 $$ final MessageDigest md = createMessageDigest() --> Line_19 $$ updateByteArray(md, this.keyExchangeInitLocal.getPayload()) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_20 $$ updateByteArray(md, this.keyExchangeInitRemote.getPayload()) [CD]
Line_14 $$ final MessageDigest md = createMessageDigest() --> Line_20 $$ updateByteArray(md, this.keyExchangeInitRemote.getPayload()) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_21 $$ updateByteArray(md, msg.hostKey) [CD]
Line_14 $$ final MessageDigest md = createMessageDigest() --> Line_21 $$ updateByteArray(md, msg.hostKey) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_22 $$ updateByteArray(md, ((DHPublicKey) this.keyPair.getPublic()).getY().toByteArray()) [CD]
Line_14 $$ final MessageDigest md = createMessageDigest() --> Line_22 $$ updateByteArray(md, ((DHPublicKey) this.keyPair.getPublic()).getY().toByteArray()) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_23 $$ updateByteArray(md, msg.f) [CD]
Line_14 $$ final MessageDigest md = createMessageDigest() --> Line_23 $$ updateByteArray(md, msg.f) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_24 $$ updateBigInt(md, k) [CD]
Line_14 $$ final MessageDigest md = createMessageDigest() --> Line_24 $$ updateBigInt(md, k) [FD]
Line_4 $$ final BigInteger k --> Line_24 $$ updateBigInt(md, k) [FD]
Line_12 $$ k = new BigInteger(dhKex.generateSecret()) --> Line_24 $$ updateBigInt(md, k) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_25 $$ h = md.digest() [CD]
Line_15 $$ final byte[] h --> Line_25 $$ h = md.digest() [FD]
Line_14 $$ final MessageDigest md = createMessageDigest() --> Line_25 $$ h = md.digest() [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_27 $$ if (this.sessionId == null) [CD]
Line_15 $$ final byte[] h --> Line_27 $$ if (this.sessionId == null) [FD]
Line_25 $$ h = md.digest() --> Line_27 $$ if (this.sessionId == null) [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_28 $$ this.keyExchangeInitLocal = null [CD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_29 $$ this.keyExchangeInitRemote = null [CD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_30 $$ this.h = h [CD]
Line_15 $$ final byte[] h --> Line_30 $$ this.h = h [FD]
Line_25 $$ h = md.digest() --> Line_30 $$ this.h = h [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_31 $$ this.k = k [CD]
Line_4 $$ final BigInteger k --> Line_31 $$ this.k = k [FD]
Line_12 $$ k = new BigInteger(dhKex.generateSecret()) --> Line_31 $$ this.k = k [FD]
Line_2 $$ private void onDhReply(final SshDhReply msg) throws GeneralSecurityException, IOException --> Line_32 $$ this.connection.send(new SshKeyExchangeNewKeys()) [CD]
