Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_3 $$ String type = "pre" [CD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_4 $$ if (module.isExceptionModule()) [CD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_4 $$ if (module.isExceptionModule()) [FD]
Line_3 $$ String type = "pre" --> Line_4 $$ if (module.isExceptionModule()) [FD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_5 $$ Properties props = module.getState() [CD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_5 $$ Properties props = module.getState() [FD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_6 $$ Connection con = null [CD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_7 $$ PreparedStatement ps = null [CD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_8 $$ Statement st = null [CD]
Line_6 $$ Connection con = null --> Line_10 $$ con = connector.getDB() [FD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_10 $$ con = connector.getDB() [FD]
Line_6 $$ Connection con = null --> Line_11 $$ con.setAutoCommit(false) [FD]
Line_10 $$ con = connector.getDB() --> Line_11 $$ con.setAutoCommit(false) [FD]
Line_8 $$ Statement st = null --> Line_12 $$ st = con.createStatement() [FD]
Line_6 $$ Connection con = null --> Line_12 $$ st = con.createStatement() [FD]
Line_10 $$ con = connector.getDB() --> Line_12 $$ st = con.createStatement() [FD]
Line_8 $$ Statement st = null --> Line_13 $$ st.executeUpdate("DELETE FROM instance where id=" + module.getId()) [FD]
Line_12 $$ st = con.createStatement() --> Line_13 $$ st.executeUpdate("DELETE FROM instance where id=" + module.getId()) [FD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_13 $$ st.executeUpdate("DELETE FROM instance where id=" + module.getId()) [FD]
Line_8 $$ Statement st = null --> Line_14 $$ st.executeUpdate("DELETE FROM instance_property where instance_id=" + module.getId()) [FD]
Line_12 $$ st = con.createStatement() --> Line_14 $$ st.executeUpdate("DELETE FROM instance_property where instance_id=" + module.getId()) [FD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_14 $$ st.executeUpdate("DELETE FROM instance_property where instance_id=" + module.getId()) [FD]
Line_7 $$ PreparedStatement ps = null --> Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") [FD]
Line_6 $$ Connection con = null --> Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") [FD]
Line_10 $$ con = connector.getDB() --> Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") [FD]
Line_7 $$ PreparedStatement ps = null --> Line_16 $$ ps.setInt(1, module.getId()) [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_16 $$ ps.setInt(1, module.getId()) [FD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_16 $$ ps.setInt(1, module.getId()) [FD]
Line_7 $$ PreparedStatement ps = null --> Line_17 $$ ps.setBoolean(2, module.getActive()) [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_17 $$ ps.setBoolean(2, module.getActive()) [FD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_17 $$ ps.setBoolean(2, module.getActive()) [FD]
Line_7 $$ PreparedStatement ps = null --> Line_18 $$ ps.setString(3, module.getClass().getName()) [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_18 $$ ps.setString(3, module.getClass().getName()) [FD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_18 $$ ps.setString(3, module.getClass().getName()) [FD]
Line_7 $$ PreparedStatement ps = null --> Line_19 $$ ps.setString(4, type) [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_19 $$ ps.setString(4, type) [FD]
Line_3 $$ String type = "pre" --> Line_19 $$ ps.setString(4, type) [FD]
Line_4 $$ if (module.isExceptionModule()) --> Line_19 $$ ps.setString(4, type) [FD]
Line_7 $$ PreparedStatement ps = null --> Line_20 $$ ps.executeUpdate() [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_20 $$ ps.executeUpdate() [FD]
Line_7 $$ PreparedStatement ps = null --> Line_21 $$ ps.close() [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_21 $$ ps.close() [FD]
Line_7 $$ PreparedStatement ps = null --> Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") [FD]
Line_6 $$ Connection con = null --> Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") [FD]
Line_10 $$ con = connector.getDB() --> Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") [FD]
Line_5 $$ Properties props = module.getState() --> Line_23 $$ for (Enumeration<Object> keys = props.keys(); keys.hasMoreElements(); ) [FD]
Line_23 $$ for (Enumeration<Object> keys = props.keys(); keys.hasMoreElements(); ) --> Line_24 $$ String key = (String) keys.nextElement() [CD]
Line_23 $$ for (Enumeration<Object> keys = props.keys(); keys.hasMoreElements(); ) --> Line_24 $$ String key = (String) keys.nextElement() [FD]
Line_23 $$ for (Enumeration<Object> keys = props.keys(); keys.hasMoreElements(); ) --> Line_25 $$ String value = props.getProperty(key) [CD]
Line_5 $$ Properties props = module.getState() --> Line_25 $$ String value = props.getProperty(key) [FD]
Line_24 $$ String key = (String) keys.nextElement() --> Line_25 $$ String value = props.getProperty(key) [FD]
Line_23 $$ for (Enumeration<Object> keys = props.keys(); keys.hasMoreElements(); ) --> Line_26 $$ ps.setInt(1, module.getId()) [CD]
Line_7 $$ PreparedStatement ps = null --> Line_26 $$ ps.setInt(1, module.getId()) [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_26 $$ ps.setInt(1, module.getId()) [FD]
Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") --> Line_26 $$ ps.setInt(1, module.getId()) [FD]
Line_2 $$ static final void saveModule(Module module, DBConnector connector) throws IOException --> Line_26 $$ ps.setInt(1, module.getId()) [FD]
Line_23 $$ for (Enumeration<Object> keys = props.keys(); keys.hasMoreElements(); ) --> Line_27 $$ ps.setString(2, key) [CD]
Line_7 $$ PreparedStatement ps = null --> Line_27 $$ ps.setString(2, key) [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_27 $$ ps.setString(2, key) [FD]
Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") --> Line_27 $$ ps.setString(2, key) [FD]
Line_24 $$ String key = (String) keys.nextElement() --> Line_27 $$ ps.setString(2, key) [FD]
Line_23 $$ for (Enumeration<Object> keys = props.keys(); keys.hasMoreElements(); ) --> Line_28 $$ ps.setString(3, value) [CD]
Line_7 $$ PreparedStatement ps = null --> Line_28 $$ ps.setString(3, value) [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_28 $$ ps.setString(3, value) [FD]
Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") --> Line_28 $$ ps.setString(3, value) [FD]
Line_25 $$ String value = props.getProperty(key) --> Line_28 $$ ps.setString(3, value) [FD]
Line_23 $$ for (Enumeration<Object> keys = props.keys(); keys.hasMoreElements(); ) --> Line_29 $$ ps.addBatch() [CD]
Line_7 $$ PreparedStatement ps = null --> Line_29 $$ ps.addBatch() [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_29 $$ ps.addBatch() [FD]
Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") --> Line_29 $$ ps.addBatch() [FD]
Line_7 $$ PreparedStatement ps = null --> Line_31 $$ ps.executeBatch() [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_31 $$ ps.executeBatch() [FD]
Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") --> Line_31 $$ ps.executeBatch() [FD]
Line_6 $$ Connection con = null --> Line_32 $$ con.commit() [FD]
Line_10 $$ con = connector.getDB() --> Line_32 $$ con.commit() [FD]
Line_6 $$ Connection con = null --> Line_35 $$ con.rollback() [FD]
Line_10 $$ con = connector.getDB() --> Line_35 $$ con.rollback() [FD]
Line_8 $$ Statement st = null --> Line_41 $$ if (st != null) [FD]
Line_12 $$ st = con.createStatement() --> Line_41 $$ if (st != null) [FD]
Line_8 $$ Statement st = null --> Line_43 $$ st.close() [FD]
Line_12 $$ st = con.createStatement() --> Line_43 $$ st.close() [FD]
Line_7 $$ PreparedStatement ps = null --> Line_47 $$ if (ps != null) [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_47 $$ if (ps != null) [FD]
Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") --> Line_47 $$ if (ps != null) [FD]
Line_7 $$ PreparedStatement ps = null --> Line_49 $$ ps.close() [FD]
Line_15 $$ ps = con.prepareStatement("INSERT INTO instance VALUES (?, ?, ?, ?)") --> Line_49 $$ ps.close() [FD]
Line_22 $$ ps = con.prepareStatement("INSERT INTO instance_property values(?, ?, ?)") --> Line_49 $$ ps.close() [FD]
Line_6 $$ Connection con = null --> Line_53 $$ if (con != null) [FD]
Line_10 $$ con = connector.getDB() --> Line_53 $$ if (con != null) [FD]
Line_6 $$ Connection con = null --> Line_55 $$ con.close() [FD]
Line_10 $$ con = connector.getDB() --> Line_55 $$ con.close() [FD]
