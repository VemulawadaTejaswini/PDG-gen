Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_3 $$ File in = null [CD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_4 $$ String dest = output [CD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_5 $$ if (input.equals(STDIN)) [CD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_5 $$ if (input.equals(STDIN)) [FD]
Line_3 $$ File in = null --> Line_7 $$ in = File.createTempFile("tmp", ".jp2") [FD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_8 $$ input = in.getAbsolutePath() [FD]
Line_3 $$ File in = null --> Line_8 $$ input = in.getAbsolutePath() [FD]
Line_7 $$ in = File.createTempFile("tmp", ".jp2") --> Line_8 $$ input = in.getAbsolutePath() [FD]
Line_3 $$ File in = null --> Line_9 $$ in.deleteOnExit() [FD]
Line_7 $$ in = File.createTempFile("tmp", ".jp2") --> Line_9 $$ in.deleteOnExit() [FD]
Line_3 $$ File in = null --> Line_10 $$ IOUtils.copyFile(new File(STDIN), in) [FD]
Line_7 $$ in = File.createTempFile("tmp", ".jp2") --> Line_10 $$ IOUtils.copyFile(new File(STDIN), in) [FD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_16 $$ BufferedImage bi = extractImpl.process(input, params) [CD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_16 $$ BufferedImage bi = extractImpl.process(input, params) [FD]
Line_8 $$ input = in.getAbsolutePath() --> Line_16 $$ BufferedImage bi = extractImpl.process(input, params) [FD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_17 $$ if (bi != null) [CD]
Line_16 $$ BufferedImage bi = extractImpl.process(input, params) --> Line_17 $$ if (bi != null) [FD]
Line_17 $$ if (bi != null) --> Line_18 $$ if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) [CD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_18 $$ if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) [FD]
Line_16 $$ BufferedImage bi = extractImpl.process(input, params) --> Line_18 $$ if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) [FD]
Line_17 $$ if (bi != null) --> Line_19 $$ if (params.getTransform() != null) [CD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_19 $$ if (params.getTransform() != null) [FD]
Line_16 $$ BufferedImage bi = extractImpl.process(input, params) --> Line_19 $$ if (params.getTransform() != null) [FD]
Line_18 $$ if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) --> Line_19 $$ if (params.getTransform() != null) [FD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_22 $$ w.write(bi, os) [FD]
Line_16 $$ BufferedImage bi = extractImpl.process(input, params) --> Line_22 $$ w.write(bi, os) [FD]
Line_18 $$ if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) --> Line_22 $$ w.write(bi, os) [FD]
Line_19 $$ if (params.getTransform() != null) --> Line_22 $$ w.write(bi, os) [FD]
Line_21 $$ BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest))) --> Line_22 $$ w.write(bi, os) [FD]
Line_21 $$ BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest))) --> Line_23 $$ os.close() [FD]
Line_2 $$ public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException --> Line_32 $$ if (in != null) [CD]
Line_3 $$ File in = null --> Line_32 $$ if (in != null) [FD]
Line_7 $$ in = File.createTempFile("tmp", ".jp2") --> Line_32 $$ if (in != null) [FD]
