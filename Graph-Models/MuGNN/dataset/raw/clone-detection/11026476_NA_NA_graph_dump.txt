Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_3 $$ SmartRef smartRef = (SmartRef) invocation.getValue(Invocation.SMARTREF) [CD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_3 $$ SmartRef smartRef = (SmartRef) invocation.getValue(Invocation.SMARTREF) [FD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_4 $$ HttpURLConnection connection = null [CD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_5 $$ ObjectOutputStream out = null [CD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_6 $$ URL url = null [CD]
Line_6 $$ URL url = null --> Line_8 $$ url = new URL(smartRef.getProperties().getProperty("org.smartcc.connector.url")) [FD]
Line_3 $$ SmartRef smartRef = (SmartRef) invocation.getValue(Invocation.SMARTREF) --> Line_8 $$ url = new URL(smartRef.getProperties().getProperty("org.smartcc.connector.url")) [FD]
Line_6 $$ URL url = null --> Line_9 $$ url = new URL(url, smartRef.getLookup()) [FD]
Line_8 $$ url = new URL(smartRef.getProperties().getProperty("org.smartcc.connector.url")) --> Line_9 $$ url = new URL(url, smartRef.getLookup()) [FD]
Line_3 $$ SmartRef smartRef = (SmartRef) invocation.getValue(Invocation.SMARTREF) --> Line_9 $$ url = new URL(url, smartRef.getLookup()) [FD]
Line_4 $$ HttpURLConnection connection = null --> Line_10 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_6 $$ URL url = null --> Line_10 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_8 $$ url = new URL(smartRef.getProperties().getProperty("org.smartcc.connector.url")) --> Line_10 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_9 $$ url = new URL(url, smartRef.getLookup()) --> Line_10 $$ connection = (HttpURLConnection) url.openConnection() [FD]
Line_4 $$ HttpURLConnection connection = null --> Line_11 $$ connection.setRequestProperty("Content-Type", "application/octet-stream") [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_11 $$ connection.setRequestProperty("Content-Type", "application/octet-stream") [FD]
Line_4 $$ HttpURLConnection connection = null --> Line_12 $$ connection.setDoOutput(true) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_12 $$ connection.setDoOutput(true) [FD]
Line_4 $$ HttpURLConnection connection = null --> Line_13 $$ connection.setDoInput(true) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_13 $$ connection.setDoInput(true) [FD]
Line_4 $$ HttpURLConnection connection = null --> Line_14 $$ connection.setUseCaches(false) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_14 $$ connection.setUseCaches(false) [FD]
Line_5 $$ ObjectOutputStream out = null --> Line_15 $$ out = new ObjectOutputStream(connection.getOutputStream()) [FD]
Line_4 $$ HttpURLConnection connection = null --> Line_15 $$ out = new ObjectOutputStream(connection.getOutputStream()) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_15 $$ out = new ObjectOutputStream(connection.getOutputStream()) [FD]
Line_5 $$ ObjectOutputStream out = null --> Line_16 $$ out.writeObject(invocation) [FD]
Line_15 $$ out = new ObjectOutputStream(connection.getOutputStream()) --> Line_16 $$ out.writeObject(invocation) [FD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_16 $$ out.writeObject(invocation) [FD]
Line_5 $$ ObjectOutputStream out = null --> Line_17 $$ out.flush() [FD]
Line_15 $$ out = new ObjectOutputStream(connection.getOutputStream()) --> Line_17 $$ out.flush() [FD]
Line_5 $$ ObjectOutputStream out = null --> Line_26 $$ out.close() [FD]
Line_15 $$ out = new ObjectOutputStream(connection.getOutputStream()) --> Line_26 $$ out.close() [FD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_30 $$ boolean isThrowable = false [CD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_31 $$ Object result = null [CD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_32 $$ ObjectInputStream in = null [CD]
Line_32 $$ ObjectInputStream in = null --> Line_34 $$ in = new ObjectInputStream(connection.getInputStream()) [FD]
Line_4 $$ HttpURLConnection connection = null --> Line_34 $$ in = new ObjectInputStream(connection.getInputStream()) [FD]
Line_10 $$ connection = (HttpURLConnection) url.openConnection() --> Line_34 $$ in = new ObjectInputStream(connection.getInputStream()) [FD]
Line_30 $$ boolean isThrowable = false --> Line_35 $$ isThrowable = in.readBoolean() [FD]
Line_32 $$ ObjectInputStream in = null --> Line_35 $$ isThrowable = in.readBoolean() [FD]
Line_34 $$ in = new ObjectInputStream(connection.getInputStream()) --> Line_35 $$ isThrowable = in.readBoolean() [FD]
Line_30 $$ boolean isThrowable = false --> Line_36 $$ if (isThrowable || !invocation.getMethod().getReturnType().equals(void.class)) [FD]
Line_35 $$ isThrowable = in.readBoolean() --> Line_36 $$ if (isThrowable || !invocation.getMethod().getReturnType().equals(void.class)) [FD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_36 $$ if (isThrowable || !invocation.getMethod().getReturnType().equals(void.class)) [FD]
Line_31 $$ Object result = null --> Line_36 $$ if (isThrowable || !invocation.getMethod().getReturnType().equals(void.class)) [FD]
Line_32 $$ ObjectInputStream in = null --> Line_36 $$ if (isThrowable || !invocation.getMethod().getReturnType().equals(void.class)) [FD]
Line_34 $$ in = new ObjectInputStream(connection.getInputStream()) --> Line_36 $$ if (isThrowable || !invocation.getMethod().getReturnType().equals(void.class)) [FD]
Line_32 $$ ObjectInputStream in = null --> Line_45 $$ in.close() [FD]
Line_34 $$ in = new ObjectInputStream(connection.getInputStream()) --> Line_45 $$ in.close() [FD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_49 $$ if (isThrowable) [CD]
Line_2 $$ public Object invoke(Invocation invocation) throws Throwable --> Line_50 $$ return result [CD]
