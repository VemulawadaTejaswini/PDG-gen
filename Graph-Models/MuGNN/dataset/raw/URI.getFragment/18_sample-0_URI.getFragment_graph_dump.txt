Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testAsynch() [ CD ]
Line_2 $$ public void testAsynch() -->Line_3 $$ URI uri = new URI(request.getUri())[ CD ]
Line_2 $$ public void testAsynch() -->Line_4 $$ String query = (uri.getQuery() == null ? "" : "&") + "wait=1000"[ CD ]
Line_3 $$ URI uri = new URI(request.getUri())-->Line_4 $$ String query = (uri.getQuery() == null ? "" : "&") + "wait=1000"[ FD ]
Line_2 $$ public void testAsynch() -->Line_5 $$ URI newURI = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), query, uri.getFragment())[ CD ]
Line_3 $$ URI uri = new URI(request.getUri())-->Line_5 $$ URI newURI = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), query, uri.getFragment())[ FD ]
Line_3 $$ URI uri = new URI(request.getUri())-->Line_5 $$ URI newURI = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), query, uri.getFragment())[ FD ]
Line_3 $$ URI uri = new URI(request.getUri())-->Line_5 $$ URI newURI = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), query, uri.getFragment())[ FD ]
Line_3 $$ URI uri = new URI(request.getUri())-->Line_5 $$ URI newURI = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), query, uri.getFragment())[ FD ]
Line_5 $$ URI newURI = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), query, uri.getFragment())-->Line_6 $$ request = new ClientRequest(newURI.toString())[ FD ]
Line_2 $$ public void testAsynch() -->Line_7 $$ response = request.get()[ CD ]
Line_2 $$ public void testAsynch() -->Line_8 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatus())[ CD ]
Line_2 $$ public void testAsynch() -->Line_9 $$ Assert.assertEquals(response.getEntity(String.class), "content")[ CD ]
Line_2 $$ public void testAsynch() -->Line_10 $$ response = request.get()[ CD ]
Line_2 $$ public void testAsynch() -->Line_11 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatus())[ CD ]
Line_2 $$ public void testAsynch() -->Line_12 $$ Assert.assertEquals(response.getEntity(String.class), "content")[ CD ]
Line_2 $$ public void testAsynch() -->Line_14 $$ response = request.delete()[ CD ]
Line_2 $$ public void testAsynch() -->Line_15 $$ Assert.assertEquals(HttpServletResponse.SC_NO_CONTENT, response.getStatus())[ CD ]
Line_2 $$ public void testAsynch() -->Line_16 $$ response = request.get()[ CD ]
Line_2 $$ public void testAsynch() -->Line_17 $$ Assert.assertEquals(HttpServletResponse.SC_GONE, response.getStatus())[ CD ]
Line_2 $$ public void testAsynch() -->Line_18 $$ response.releaseConnection()[ CD ]
