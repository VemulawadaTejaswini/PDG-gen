Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void test_equals2() [ CD ]
Line_2 $$ public void test_equals2() -->Line_3 $$ URI uri = new URI("http:///~/dictionary")[ CD ]
Line_2 $$ public void test_equals2() -->Line_4 $$ URI uri2 = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())[ CD ]
Line_3 $$ URI uri = new URI("http:///~/dictionary")-->Line_4 $$ URI uri2 = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_3 $$ URI uri = new URI("http:///~/dictionary")-->Line_4 $$ URI uri2 = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_3 $$ URI uri = new URI("http:///~/dictionary")-->Line_4 $$ URI uri2 = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_3 $$ URI uri = new URI("http:///~/dictionary")-->Line_4 $$ URI uri2 = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_3 $$ URI uri = new URI("http:///~/dictionary")-->Line_4 $$ URI uri2 = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_2 $$ public void test_equals2() -->Line_6 $$ assertTrue(uri2.equals(uri))[ CD ]
Line_4 $$ URI uri2 = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_6 $$ assertTrue(uri2.equals(uri))[ FD ]
Line_3 $$ URI uri = new URI("http:///~/dictionary")-->Line_6 $$ assertTrue(uri2.equals(uri))[ FD ]
Line_2 $$ public void test_equals2() -->Line_7 $$ uri = new URI("http://abc.com%E2%82%AC:88/root/news")[ CD ]
Line_3 $$ URI uri = new URI("http:///~/dictionary")-->Line_7 $$ uri = new URI("http://abc.com%E2%82%AC:88/root/news")[ FD ]
Line_7 $$ uri = new URI("http://abc.com%E2%82%AC:88/root/news")-->Line_7 $$ uri = new URI("http://abc.com%E2%82%AC:88/root/news")[ FD ]
