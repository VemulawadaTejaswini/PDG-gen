Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void loadURL(URI uri) [ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_3 $$ final String uriString = uri.toString()[ CD ]
Line_3 $$ final String uriString = uri.toString()-->Line_3 $$ final String uriString = uri.toString()[ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_3 $$ final String uriString = uri.toString()[ FD ]
Line_2 $$ public void loadURL(URI uri) -->Line_4 $$ if (uriString.startsWith("#")) [ CD ]
Line_3 $$ final String uriString = uri.toString()-->Line_4 $$ if (uriString.startsWith("#")) [ FD ]
Line_4 $$ if (uriString.startsWith("#")) -->Line_4 $$ if (uriString.startsWith("#")) [ CD ]
Line_3 $$ final String uriString = uri.toString()-->Line_4 $$ if (uriString.startsWith("#")) [ FD ]
Line_4 $$ if (uriString.startsWith("#")) -->Line_5 $$ final String target = uri.getFragment()[ CD ]
Line_5 $$ final String target = uri.getFragment()-->Line_5 $$ final String target = uri.getFragment()[ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_5 $$ final String target = uri.getFragment()[ FD ]
Line_7 $$ final ModeController modeController = Controller.getCurrentModeController()-->Line_7 $$ final ModeController modeController = Controller.getCurrentModeController()[ CD ]
Line_8 $$ final MapController mapController = modeController.getMapController()-->Line_8 $$ final MapController mapController = modeController.getMapController()[ CD ]
Line_7 $$ final ModeController modeController = Controller.getCurrentModeController()-->Line_8 $$ final MapController mapController = modeController.getMapController()[ FD ]
Line_9 $$ final NodeModel node = mapController.getNodeFromID(target)-->Line_9 $$ final NodeModel node = mapController.getNodeFromID(target)[ CD ]
Line_8 $$ final MapController mapController = modeController.getMapController()-->Line_9 $$ final NodeModel node = mapController.getNodeFromID(target)[ FD ]
Line_5 $$ final String target = uri.getFragment()-->Line_9 $$ final NodeModel node = mapController.getNodeFromID(target)[ FD ]
Line_9 $$ final NodeModel node = mapController.getNodeFromID(target)-->Line_10 $$ if (node != null) [ FD ]
Line_10 $$ if (node != null) -->Line_11 $$ mapController.select(node)[ CD ]
Line_8 $$ final MapController mapController = modeController.getMapController()-->Line_11 $$ mapController.select(node)[ FD ]
Line_9 $$ final NodeModel node = mapController.getNodeFromID(target)-->Line_11 $$ mapController.select(node)[ FD ]
Line_5 $$ final String target = uri.getFragment()-->Line_16 $$ UITools.errorMessage(TextUtils.format("link_not_found", target))[ FD ]
Line_4 $$ if (uriString.startsWith("#")) -->Line_18 $$ return[ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_20 $$ final String extension = FileUtils.getExtension(uri.getRawPath())[ CD ]
Line_20 $$ final String extension = FileUtils.getExtension(uri.getRawPath())-->Line_20 $$ final String extension = FileUtils.getExtension(uri.getRawPath())[ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_20 $$ final String extension = FileUtils.getExtension(uri.getRawPath())[ FD ]
Line_2 $$ public void loadURL(URI uri) -->Line_21 $$ if (!uri.isAbsolute()) [ CD ]
Line_21 $$ if (!uri.isAbsolute()) -->Line_21 $$ if (!uri.isAbsolute()) [ CD ]
Line_21 $$ if (!uri.isAbsolute()) -->Line_21 $$ if (!uri.isAbsolute()) [ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_21 $$ if (!uri.isAbsolute()) [ FD ]
Line_21 $$ if (!uri.isAbsolute()) -->Line_22 $$ uri = getAbsoluteUri(uri)[ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_22 $$ uri = getAbsoluteUri(uri)[ FD ]
Line_22 $$ uri = getAbsoluteUri(uri)-->Line_22 $$ uri = getAbsoluteUri(uri)[ FD ]
Line_22 $$ uri = getAbsoluteUri(uri)-->Line_22 $$ uri = getAbsoluteUri(uri)[ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_22 $$ uri = getAbsoluteUri(uri)[ FD ]
Line_22 $$ uri = getAbsoluteUri(uri)-->Line_22 $$ uri = getAbsoluteUri(uri)[ FD ]
Line_21 $$ if (!uri.isAbsolute()) -->Line_23 $$ if (uri == null) [ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_23 $$ if (uri == null) [ FD ]
Line_22 $$ uri = getAbsoluteUri(uri)-->Line_23 $$ if (uri == null) [ FD ]
Line_23 $$ if (uri == null) -->Line_24 $$ UITools.errorMessage(TextUtils.getText("map_not_saved"))[ CD ]
Line_23 $$ if (uri == null) -->Line_25 $$ return[ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_28 $$ if (!"file".equals(uri.getScheme())) [ CD ]
Line_28 $$ if (!"file".equals(uri.getScheme())) -->Line_28 $$ if (!"file".equals(uri.getScheme())) [ CD ]
Line_28 $$ if (!"file".equals(uri.getScheme())) -->Line_28 $$ if (!"file".equals(uri.getScheme())) [ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_28 $$ if (!"file".equals(uri.getScheme())) [ FD ]
Line_22 $$ uri = getAbsoluteUri(uri)-->Line_28 $$ if (!"file".equals(uri.getScheme())) [ FD ]
Line_2 $$ public void loadURL(URI uri) -->Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()[ FD ]
Line_22 $$ uri = getAbsoluteUri(uri)-->Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()[ FD ]
Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()-->Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()[ FD ]
Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()-->Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()[ CD ]
Line_2 $$ public void loadURL(URI uri) -->Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()[ FD ]
Line_22 $$ uri = getAbsoluteUri(uri)-->Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()[ FD ]
Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()-->Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()[ FD ]
Line_2 $$ public void loadURL(URI uri) -->Line_34 $$ UITools.errorMessage(TextUtils.format("link_not_found", uri.toString()))[ FD ]
Line_22 $$ uri = getAbsoluteUri(uri)-->Line_34 $$ UITools.errorMessage(TextUtils.format("link_not_found", uri.toString()))[ FD ]
Line_30 $$ uri = uri.toURL().openConnection().getURL().toURI().normalize()-->Line_34 $$ UITools.errorMessage(TextUtils.format("link_not_found", uri.toString()))[ FD ]
