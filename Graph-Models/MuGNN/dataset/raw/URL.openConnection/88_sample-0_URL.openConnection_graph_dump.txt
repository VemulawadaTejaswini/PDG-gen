Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testMbw(String param) [ CD ]
Line_2 $$ public void testMbw(String param) -->Line_3 $$ final TestWebServer testWebServer = createTestWebServer(new MyResource())[ CD ]
Line_3 $$ final TestWebServer testWebServer = createTestWebServer(new MyResource())-->Line_3 $$ final TestWebServer testWebServer = createTestWebServer(new MyResource())[ CD ]
Line_2 $$ public void testMbw(String param) -->Line_4 $$ int port = testWebServer.getPort()[ CD ]
Line_4 $$ int port = testWebServer.getPort()-->Line_4 $$ int port = testWebServer.getPort()[ CD ]
Line_3 $$ final TestWebServer testWebServer = createTestWebServer(new MyResource())-->Line_4 $$ int port = testWebServer.getPort()[ FD ]
Line_2 $$ public void testMbw(String param) -->Line_5 $$ URL serverURL = new URL("http://localhost:" + port + "/foo/bar?name=" + param)[ CD ]
Line_2 $$ public void testMbw(String param) -->Line_6 $$ HttpURLConnection connection = (HttpURLConnection) serverURL.openConnection()[ CD ]
Line_5 $$ URL serverURL = new URL("http://localhost:" + port + "/foo/bar?name=" + param)-->Line_6 $$ HttpURLConnection connection = (HttpURLConnection) serverURL.openConnection()[ FD ]
Line_2 $$ public void testMbw(String param) -->Line_7 $$ connection.setRequestMethod("GET")[ CD ]
Line_6 $$ HttpURLConnection connection = (HttpURLConnection) serverURL.openConnection()-->Line_7 $$ connection.setRequestMethod("GET")[ FD ]
Line_2 $$ public void testMbw(String param) -->Line_8 $$ connection.addRequestProperty("Accept", "application/json, */*; q=.2")[ CD ]
Line_6 $$ HttpURLConnection connection = (HttpURLConnection) serverURL.openConnection()-->Line_8 $$ connection.addRequestProperty("Accept", "application/json, */*; q=.2")[ FD ]
Line_2 $$ public void testMbw(String param) -->Line_9 $$ BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"))[ CD ]
Line_6 $$ HttpURLConnection connection = (HttpURLConnection) serverURL.openConnection()-->Line_9 $$ BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"))[ FD ]
Line_2 $$ public void testMbw(String param) -->Line_10 $$ String line = br.readLine()[ CD ]
Line_10 $$ String line = br.readLine()-->Line_10 $$ String line = br.readLine()[ CD ]
Line_9 $$ BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"))-->Line_10 $$ String line = br.readLine()[ FD ]
Line_2 $$ public void testMbw(String param) -->Line_11 $$ Assert.assertEquals("[ CD ]
Line_10 $$ String line = br.readLine()-->Line_11 $$ Assert.assertEquals("[ FD ]
Line_2 $$ public void testMbw(String param) -->Line_12 $$ testWebServer.stop()[ CD ]
Line_3 $$ final TestWebServer testWebServer = createTestWebServer(new MyResource())-->Line_12 $$ testWebServer.stop()[ FD ]
