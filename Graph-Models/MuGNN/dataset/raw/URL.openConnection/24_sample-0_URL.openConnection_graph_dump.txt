Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void invalidRequestUri(final String path) [ CD ]
Line_2 $$ public void invalidRequestUri(final String path) -->Line_3 $$ final URL url = new URL(getBaseUri().toString() + path + "/resource[ CD ]
Line_2 $$ public void invalidRequestUri(final String path) -->Line_4 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ CD ]
Line_3 $$ final URL url = new URL(getBaseUri().toString() + path + "/resource-->Line_4 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void invalidRequestUri(final String path) -->Line_5 $$ connection.setRequestMethod("GET")[ CD ]
Line_4 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_5 $$ connection.setRequestMethod("GET")[ FD ]
Line_2 $$ public void invalidRequestUri(final String path) -->Line_6 $$ connection.setRequestProperty("Accept", "text/plain")[ CD ]
Line_4 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_6 $$ connection.setRequestProperty("Accept", "text/plain")[ FD ]
Line_2 $$ public void invalidRequestUri(final String path) -->Line_7 $$ connection.connect()[ CD ]
Line_4 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_7 $$ connection.connect()[ FD ]
Line_2 $$ public void invalidRequestUri(final String path) -->Line_8 $$ assertEquals(400, connection.getResponseCode())[ CD ]
Line_4 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_8 $$ assertEquals(400, connection.getResponseCode())[ FD ]
