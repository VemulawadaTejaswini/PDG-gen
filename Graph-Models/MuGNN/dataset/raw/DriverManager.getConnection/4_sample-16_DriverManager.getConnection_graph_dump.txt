Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void compileStatement(String query, List<Object> binds) [ CD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)[ CD ]
Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)-->Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)[ CD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ CD ]
Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)-->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ CD ]
Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)-->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ FD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_5 $$ statement = StatementNormalizer.normalize(statement, resolver)[ CD ]
Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)-->Line_5 $$ statement = StatementNormalizer.normalize(statement, resolver)[ FD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_7 $$ GroupBy groupBy = GroupByCompiler.compile(context, statement)[ CD ]
Line_7 $$ GroupBy groupBy = GroupByCompiler.compile(context, statement)-->Line_7 $$ GroupBy groupBy = GroupByCompiler.compile(context, statement)[ CD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_8 $$ statement = HavingCompiler.rewrite(context, statement, groupBy)[ CD ]
Line_7 $$ GroupBy groupBy = GroupByCompiler.compile(context, statement)-->Line_8 $$ statement = HavingCompiler.rewrite(context, statement, groupBy)[ FD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_9 $$ Expression having = HavingCompiler.compile(context, statement, groupBy)[ CD ]
Line_9 $$ Expression having = HavingCompiler.compile(context, statement, groupBy)-->Line_9 $$ Expression having = HavingCompiler.compile(context, statement, groupBy)[ CD ]
Line_7 $$ GroupBy groupBy = GroupByCompiler.compile(context, statement)-->Line_9 $$ Expression having = HavingCompiler.compile(context, statement, groupBy)[ FD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_10 $$ Expression where = WhereCompiler.compile(context, statement)[ CD ]
Line_10 $$ Expression where = WhereCompiler.compile(context, statement)-->Line_10 $$ Expression where = WhereCompiler.compile(context, statement)[ CD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_11 $$ where = WhereOptimizer.pushKeyExpressionsToScan(context, statement, where)[ CD ]
Line_10 $$ Expression where = WhereCompiler.compile(context, statement)-->Line_11 $$ where = WhereOptimizer.pushKeyExpressionsToScan(context, statement, where)[ FD ]
Line_11 $$ where = WhereOptimizer.pushKeyExpressionsToScan(context, statement, where)-->Line_11 $$ where = WhereOptimizer.pushKeyExpressionsToScan(context, statement, where)[ FD ]
Line_11 $$ where = WhereOptimizer.pushKeyExpressionsToScan(context, statement, where)-->Line_11 $$ where = WhereOptimizer.pushKeyExpressionsToScan(context, statement, where)[ CD ]
Line_10 $$ Expression where = WhereCompiler.compile(context, statement)-->Line_11 $$ where = WhereOptimizer.pushKeyExpressionsToScan(context, statement, where)[ FD ]
Line_11 $$ where = WhereOptimizer.pushKeyExpressionsToScan(context, statement, where)-->Line_11 $$ where = WhereOptimizer.pushKeyExpressionsToScan(context, statement, where)[ FD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_12 $$ return new Expressions(where, having)[ CD ]
